/*! For license information please see background.js.LICENSE.txt */
(()=>{var e={"./node_modules/@urql/core/dist/8a6d4d1f.js":(e,n,t)=>{var r=t("./node_modules/graphql/index.mjs"),i=t("./node_modules/wonka/dist/wonka.js");function o(e){return"string"==typeof e?new r.GraphQLError(e):"object"==typeof e&&e.message?new r.GraphQLError(e.message,e.nodes,e.source,e.positions,e.path,e,e.extensions||{}):e}var a=function(e){function n(n){var t=n.networkError,r=n.response,i=(n.graphQLErrors||[]).map(o),a=function(e,n){var t="";return void 0!==e?t="[Network] "+e.message:(void 0!==n&&n.forEach((function(e){t+="[GraphQL] "+e.message+"\n"})),t.trim())}(t,i);e.call(this,a),this.name="CombinedError",this.message=a,this.graphQLErrors=i,this.networkError=t,this.response=r}return e&&(n.__proto__=e),(n.prototype=Object.create(e&&e.prototype)).constructor=n,n.prototype.toString=function(){return this.message},n}(Error);function s(e,n){e|=0;for(var t=0,r=0|n.length;t<r;t++)e=(e<<5)+e+n.charCodeAt(t);return e}function u(e){return s(5381,e)>>>0}var l=new Set,c=new WeakMap;function d(e){if(null===e||l.has(e))return"null";if("object"!=typeof e)return JSON.stringify(e)||"";if(e.toJSON)return d(e.toJSON());if(Array.isArray(e)){for(var n="[",t=0,r=e.length;t<r;t++){t>0&&(n+=",");var i=d(e[t]);n+=i.length>0?i:"null"}return n+"]"}var o=Object.keys(e).sort();if(!o.length&&e.constructor&&e.constructor!==Object){var a=c.get(e)||Math.random().toString(36).slice(2);return c.set(e,a),'{"__key":"'+a+'"}'}l.add(e);for(var s="{",u=0,p=o.length;u<p;u++){var f=o[u],m=d(e[f]);m&&(s.length>1&&(s+=","),s+=d(f)+":"+m)}return l.delete(e),s+"}"}function p(e){return l.clear(),d(e)}function f(e){var n=("string"!=typeof e?e.loc&&e.loc.source.body||r.print(e):e).replace(/([\s,]|#[^\n\r]+)+/g," ").trim();if("string"!=typeof e){var t="definitions"in e&&v(e);t&&(n="# "+t+"\n"+n),e.loc||(e.loc={start:0,end:n.length,source:{body:n,name:"gql",locationOffset:{line:1,column:1}}})}return n}var m=new Map;function h(e){var n,t;return"string"==typeof e?(n=u(f(e)),t=m.get(n)||r.parse(e,{noLocation:!0})):(n=e.__key||u(f(e)),t=m.get(n)||e),t.loc||f(t),t.__key=n,m.set(n,t),t}function v(e){for(var n=0,t=e.definitions.length;n<t;n++){var i=e.definitions[n];if(i.kind===r.Kind.OPERATION_DEFINITION&&i.name)return i.name.value}}function y(){return(y=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}function g(e,n,t){if(!("data"in n)&&!("errors"in n)||"path"in n)throw new Error("No Content");return{operation:e,data:n.data,error:Array.isArray(n.errors)?new a({graphQLErrors:n.errors,response:t}):void 0,extensions:"object"==typeof n.extensions&&n.extensions||void 0,hasNext:!!n.hasNext}}function T(e,n,t){var r=y({},e);if(r.hasNext=!!n.hasNext,!("path"in n))return"data"in n&&(r.data=n.data),r;Array.isArray(n.errors)&&(r.error=new a({graphQLErrors:r.error?r.error.graphQLErrors.concat(n.errors):n.errors,response:t}));for(var i,o=r.data=y({},r.data),s=0;s<n.path.length;)o=o[i=n.path[s++]]=Array.isArray(o[i])?[].concat(o[i]):y({},o[i]);return y(o,n.data),r}function E(e,n,t){return{operation:e,data:void 0,error:new a({networkError:n,response:t}),extensions:void 0}}function _(e){return"query"===e.kind&&!!e.context.preferGetMethod}var N="undefined"!=typeof Symbol?Symbol.asyncIterator:null,b="undefined"!=typeof TextDecoder?new TextDecoder:null,j=/content-type:[^\r\n]*application\/json/i,I=/boundary="?([^=";]+)"?/i;function O(e,n,t){var r=t.headers&&t.headers.get("Content-Type")||"";if(!/multipart\/mixed/i.test(r))return t.json().then((function(r){e(g(n,r,t))}));var i,o="---",a=r.match(I);a&&(o="--"+a[1]);var s=function(){};if(N&&t[N]){var u=t[N]();i=u.next.bind(u)}else{if(!("body"in t)||!t.body)throw new TypeError("Streaming requests unsupported");var l=t.body.getReader();s=l.cancel.bind(l),i=l.read.bind(l)}var c="",d=!0,p=null,f=null;return i().then((function r(a){if(!a.done){var s=function(e){return"undefined"!=typeof Buffer&&Buffer.isBuffer(e)?e.toString():b.decode(e)}(a.value),u=s.indexOf(o);for(u>-1?u+=c.length:u=c.indexOf(o),c+=s;u>-1;){var l=c.slice(0,u),m=c.slice(u+o.length);if(d)d=!1;else{var h=l.indexOf("\r\n\r\n")+4,v=l.slice(0,h),y=l.slice(h,l.lastIndexOf("\r\n")),E=void 0;if(j.test(v))try{E=JSON.parse(y),p=f=f?T(f,E,t):g(n,E,t)}catch(e){}if("--"===m.slice(0,2)||E&&!E.hasNext){if(!f)return e(g(n,{},t));break}}u=(c=m).indexOf(o)}}if(p&&(e(p),p=null),!a.done&&(!f||f.hasNext))return i().then(r)})).finally(s)}n.CombinedError=a,n._extends=y,n.createRequest=function(e,n){n||(n={});var t=h(e);return{key:s(t.__key,p(n))>>>0,query:t,variables:n}},n.getOperationName=v,n.getOperationType=function(e){for(var n=0,t=e.definitions.length;n<t;n++){var i=e.definitions[n];if(i.kind===r.Kind.OPERATION_DEFINITION)return i.operation}},n.keyDocument=h,n.makeErrorResult=E,n.makeFetchBody=function(e){return{query:r.print(e.query),operationName:v(e.query),variables:e.variables||void 0,extensions:void 0}},n.makeFetchOptions=function(e,n){var t=_(e),r="function"==typeof e.context.fetchOptions?e.context.fetchOptions():e.context.fetchOptions||{};return y({},r,{body:!t&&n?JSON.stringify(n):void 0,method:t?"GET":"POST",headers:t?r.headers:y({},{"content-type":"application/json"},r.headers)})},n.makeFetchSource=function(e,n,t){var r="manual"===t.redirect?400:300,o=e.context.fetch;return i.make((function(i){var a=i.next,s=i.complete,u="undefined"!=typeof AbortController?new AbortController:null;u&&(t.signal=u.signal);var l,c=!1,d=!1;return Promise.resolve().then((function(){if(!c)return(o||fetch)(n,t)})).then((function(n){if(n)return d=(l=n).status<200||l.status>=r,O(a,e,l)})).then(s).catch((function(n){if("AbortError"!==n.name){var t=E(e,d?new Error(l.statusText):n,l);a(t),s()}})),function(){c=!0,u&&u.abort()}}))},n.makeFetchURL=function(e,n){var t=_(e),r=e.context.url;if(!t||!n)return r;var i=[];return n.operationName&&i.push("operationName="+encodeURIComponent(n.operationName)),n.query&&i.push("query="+encodeURIComponent(n.query.replace(/#[^\n\r]+/g," ").trim())),n.variables&&i.push("variables="+encodeURIComponent(p(n.variables))),n.extensions&&i.push("extensions="+encodeURIComponent(p(n.extensions))),r+"?"+i.join("&")},n.makeResult=g,n.mergeResultPatch=T,n.stringifyDocument=f,n.stringifyVariables=p},"./node_modules/@urql/core/dist/urql-core.js":(e,n,t)=>{var r=t("./node_modules/graphql/index.mjs"),i=t("./node_modules/@urql/core/dist/8a6d4d1f.js"),o=t("./node_modules/wonka/dist/wonka.js");function a(e,n){if(Array.isArray(e))for(var t=0;t<e.length;t++)a(e[t],n);else if("object"==typeof e&&null!==e)for(var r in e)"__typename"===r&&"string"==typeof e[r]?n[e[r]]=0:a(e[r],n);return n}function s(e){return Object.keys(a(e,{}))}var u=function(e){if(e.selectionSet&&!e.selectionSet.selections.some((function(e){return e.kind===r.Kind.FIELD&&"__typename"===e.name.value&&!e.alias})))return i._extends({},e,{selectionSet:i._extends({},e.selectionSet,{selections:e.selectionSet.selections.concat([{kind:r.Kind.FIELD,name:{kind:r.Kind.NAME,value:"__typename"}}])})})},l=new Map;function c(e){var n=i.keyDocument(e),t=l.get(n.__key);return t||(t=r.visit(n,{Field:u,InlineFragment:u}),Object.defineProperty(t,"__key",{value:n.__key,enumerable:!1}),l.set(n.__key,t)),t}function d(e){return e&&"object"==typeof e?Object.keys(e).reduce((function(n,t){var r=e[t];return"__typename"===t?Object.defineProperty(n,"__typename",{enumerable:!1,value:r}):Array.isArray(r)?n[t]=r.map(d):n[t]=r&&"object"==typeof r&&"__typename"in r?d(r):r,n}),{}):e}function p(e){return e.toPromise=function(){return o.toPromise(o.take(1)(o.filter((function(e){return!e.stale&&!e.hasNext}))(e)))},e}function f(e,n,t){return t||(t=n.context),{key:n.key,query:n.query,variables:n.variables,kind:e,context:t}}function m(e,n){return f(e.kind,e,i._extends({},e.context,{meta:i._extends({},e.context.meta,n)}))}function h(){}function v(e,n,t){for(var o=0;o<t.length;o++)if(t[o].kind===r.Kind.FRAGMENT_DEFINITION){var a=t[o].name.value,s=i.stringifyDocument(t[o]);e.has(a)?e.get(a)!==s&&console.warn("[WARNING: Duplicate Fragment] A fragment with name `"+a+"` already exists in this document.\nWhile fragment names may not be unique across your source, each name must be unique per document."):(e.set(a,s),n.push(t[o]))}else n.push(t[o])}function y(e){var n=e.kind;return"mutation"!==n&&"query"!==n}function g(e){var n=e.forward,t=e.client,r=e.dispatchDebug,a=new Map,u=Object.create(null);function l(e){var n=f(e.kind,e);return n.query=c(e.query),n}function d(e){var n=e.context.requestPolicy;return"query"===e.kind&&"network-only"!==n&&("cache-only"===n||a.has(e.key))}return function(e){var c=o.share(e),p=o.map((function(e){var n=a.get(e.key);r(i._extends({},{operation:e},n?{type:"cacheHit",message:"The result was successfully retried from the cache"}:{type:"cacheMiss",message:"The result could not be retrieved from the cache"}));var o=i._extends({},n,{operation:m(e,{cacheOutcome:n?"hit":"miss"})});return"cache-and-network"===e.context.requestPolicy&&(o.stale=!0,T(t,e)),o}))(o.filter((function(e){return!y(e)&&d(e)}))(c)),f=o.tap((function(e){var n=e.operation;if(n){var i=s(e.data).concat(n.context.additionalTypenames||[]);if("mutation"===e.operation.kind){var o=new Set;r({type:"cacheInvalidation",message:"The following typenames have been invalidated: "+i,operation:n,data:{typenames:i,response:e},source:"cacheExchange"});for(var l=0;l<i.length;l++){var c=i[l],d=u[c]||(u[c]=new Set);d.forEach((function(e){o.add(e)})),d.clear()}o.forEach((function(e){a.has(e)&&(n=a.get(e).operation,a.delete(e),T(t,n))}))}else if("query"===n.kind&&e.data){a.set(n.key,e);for(var p=0;p<i.length;p++){var f=i[p];(u[f]||(u[f]=new Set)).add(n.key)}}}}))(n(o.filter((function(e){return"query"!==e.kind||"cache-only"!==e.context.requestPolicy}))(o.map((function(e){return m(e,{cacheOutcome:"miss"})}))(o.merge([o.map(l)(o.filter((function(e){return!y(e)&&!d(e)}))(c)),o.filter((function(e){return y(e)}))(c)])))));return o.merge([p,f])}}function T(e,n){return e.reexecuteOperation(f(n.kind,n,i._extends({},n.context,{requestPolicy:"network-only"})))}var E=new Set;function _(e){var n=e.forward,t=e.dispatchDebug,r=new Set;function i(e){var n=e.key,i=e.kind;if("teardown"===i)return r.delete(n),!0;if("query"!==i&&"subscription"!==i)return!0;var o=r.has(n);return r.add(n),o&&t({type:"dedup",message:"An operation has been deduped.",operation:e,source:"dedupExchange"}),!o}function a(e){e.hasNext||r.delete(e.operation.key)}return function(e){var t=o.filter(i)(e);return o.tap(a)(n(t))}}function N(e){var n=e.forward,t=e.dispatchDebug;return function(e){var r=o.share(e),a=o.mergeMap((function(e){var n=e.key,a=o.filter((function(e){return"teardown"===e.kind&&e.key===n}))(r),s=i.makeFetchBody(e),u=i.makeFetchURL(e,s),l=i.makeFetchOptions(e,s);return t({type:"fetchRequest",message:"A fetch request is being executed.",operation:e,data:{url:u,fetchOptions:l},source:"fetchExchange"}),o.onPush((function(n){var r=n.data?void 0:n.error;t({type:r?"fetchError":"fetchSuccess",message:"A "+(r?"failed":"successful")+" fetch response has been returned.",operation:e,data:{url:u,fetchOptions:l,value:r||n},source:"fetchExchange"})}))(o.takeUntil(a)(i.makeFetchSource(e,u,l)))}))(o.filter((function(e){return"query"===e.kind||"mutation"===e.kind}))(r)),s=n(o.filter((function(e){return"query"!==e.kind&&"mutation"!==e.kind}))(r));return o.merge([a,s])}}function b(e){var n=e.dispatchDebug;return function(e){return o.filter((function(){return!1}))(o.tap((function(e){if("teardown"!==e.kind){var t='No exchange has handled operations of kind "'+e.kind+"\". Check whether you've added an exchange responsible for these operations.";n({type:"fallbackCatch",message:t,operation:e,source:"fallbackExchange"}),console.warn(t)}}))(e))}}var j=b({dispatchDebug:h});function I(e){return function(n){var t=n.client,r=n.dispatchDebug;return e.reduceRight((function(e,n){return n({client:t,forward:e,dispatchDebug:function(e){r(i._extends({},{timestamp:Date.now(),source:n.name},e))}})}),n.forward)}}var O=[_,g,N],L=function e(n){if(!n.url)throw new Error("You are creating an urql-client without a url.");var t=new Map,r=new Map,a=[],s=o.makeSubject(),u=s.source,l=s.next,c=!1;function m(e){for(c=!0,e&&l(e);e=a.shift();)l(e);c=!1}function h(e){var n=o.filter((function(n){return n.operation.kind===e.kind&&n.operation.key===e.key}))(j);return g.maskTypename&&(n=o.map((function(e){return i._extends({},e,{data:d(e.data)})}))(n)),"mutation"===e.kind?o.take(1)(o.onStart((function(){return m(e)}))(n)):o.share(o.onEnd((function(){t.delete(e.key),r.delete(e.key);for(var n=a.length-1;n>=0;n--)a[n].key===e.key&&a.splice(n,1);m(f("teardown",e,e.context))}))(o.onPush((function(n){t.set(e.key,n)}))(o.switchMap((function(n){return"query"!==e.kind||n.stale?o.fromValue(n):o.merge([o.fromValue(n),o.map((function(){return i._extends({},n,{stale:!0})}))(o.take(1)(o.filter((function(n){return"query"===n.kind&&n.key===e.key&&"cache-only"!==n.context.requestPolicy}))(u)))])}))(o.takeUntil(o.filter((function(n){return"teardown"===n.kind&&n.key===e.key}))(u))(n)))))}var v,y=this instanceof e?this:Object.create(e.prototype),g=i._extends(y,{url:n.url,fetchOptions:n.fetchOptions,fetch:n.fetch,suspense:!!n.suspense,requestPolicy:n.requestPolicy||"cache-first",preferGetMethod:!!n.preferGetMethod,maskTypename:!!n.maskTypename,operations$:u,reexecuteOperation:function(e){("mutation"===e.kind||r.has(e.key))&&(a.push(e),c||Promise.resolve().then(m))},createOperationContext:function(e){return e||(e={}),i._extends({},{url:g.url,fetchOptions:g.fetchOptions,fetch:g.fetch,preferGetMethod:g.preferGetMethod},e,{suspense:e.suspense||!1!==e.suspense&&g.suspense,requestPolicy:e.requestPolicy||g.requestPolicy})},createRequestOperation:function(e,n,t){var r=i.getOperationType(n.query);if("teardown"!==e&&r!==e)throw new Error('Expected operation of type "'+e+'" but found "'+r+'"');return f(e,n,g.createOperationContext(t))},executeRequestOperation:function(e){return"mutation"===e.kind?h(e):o.make((function(n){var a=r.get(e.key);a||r.set(e.key,a=h(e));var s="cache-and-network"===e.context.requestPolicy||"network-only"===e.context.requestPolicy;return o.subscribe(n.next)(o.onEnd(n.complete)(o.onStart((function(){var r=t.get(e.key);if("subscription"===e.kind)return m(e);s&&m(e),null!=r&&r===t.get(e.key)?n.next(s?i._extends({},r,{stale:!0}):r):s||m(e)}))(a))).unsubscribe}))},executeQuery:function(e,n){var t=g.createRequestOperation("query",e,n);return g.executeRequestOperation(t)},executeSubscription:function(e,n){var t=g.createRequestOperation("subscription",e,n);return g.executeRequestOperation(t)},executeMutation:function(e,n){var t=g.createRequestOperation("mutation",e,n);return g.executeRequestOperation(t)},query:function(e,n,t){return t&&"boolean"==typeof t.suspense||(t=i._extends({},t,{suspense:!1})),p(g.executeQuery(i.createRequest(e,n),t))},readQuery:function(e,n,t){var r=null;return o.subscribe((function(e){r=e}))(g.query(e,n,t)).unsubscribe(),r},subscription:function(e,n,t){return g.executeSubscription(i.createRequest(e,n),t)},mutation:function(e,n,t){return p(g.executeMutation(i.createRequest(e,n),t))}}),T=o.makeSubject(),E=T.next,_=T.source;g.subscribeToDebugTarget=function(e){return o.subscribe(e)(_)},v=E;var N=I(void 0!==n.exchanges?n.exchanges:O),j=o.share(N({client:g,dispatchDebug:v,forward:b({dispatchDebug:v})})(u));return o.publish(j),g},S=L;n.CombinedError=i.CombinedError,n.createRequest=i.createRequest,n.getOperationName=i.getOperationName,n.makeErrorResult=i.makeErrorResult,n.makeResult=i.makeResult,n.mergeResultPatch=i.mergeResultPatch,n.stringifyVariables=i.stringifyVariables,n.Client=L,n.cacheExchange=g,n.composeExchanges=I,n.createClient=S,n.debugExchange=function(e){var n=e.forward;return function(e){return o.tap((function(e){return console.log("[Exchange debug]: Completed operation: ",e)}))(n(o.tap((function(e){return console.log("[Exchange debug]: Incoming operation: ",e)}))(e)))}},n.dedupExchange=_,n.defaultExchanges=O,n.errorExchange=function(e){var n=e.onError;return function(e){var t=e.forward;return function(e){return o.tap((function(e){var t=e.error;t&&n(t,e.operation)}))(t(e))}}},n.fallbackExchangeIO=j,n.fetchExchange=N,n.formatDocument=c,n.gql=function(){for(var e=arguments,n=new Map,t=[],o=[],a=Array.isArray(arguments[0])?arguments[0][0]:arguments[0]||"",s=1;s<arguments.length;s++){var u=e[s];u&&u.definitions?o.push.apply(o,u.definitions):a+=u,a+=e[0][s]}return v(n,t,i.keyDocument(a).definitions),v(n,t,o),i.keyDocument({kind:r.Kind.DOCUMENT,definitions:t})},n.makeOperation=f,n.maskTypename=d,n.ssrExchange=function(e){var n=!(!e||!e.staleWhileRevalidate),t=!(!e||!e.includeExtensions),r={},a=[];function s(e){a.push(e.operation.key),1===a.length&&Promise.resolve().then((function(){for(var e;e=a.shift();)r[e]=null}))}var u=function(a){var u=a.client,l=a.forward;return function(a){var c=e&&"boolean"==typeof e.isClient?!!e.isClient:!u.suspense,d=o.share(a),p=l(o.filter((function(e){return!r[e.key]||!!r[e.key].hasNext}))(d)),f=o.map((function(e){var o=function(e,n,t){return{operation:e,data:n.data?JSON.parse(n.data):void 0,extensions:t&&n.extensions?JSON.parse(n.extensions):void 0,error:n.error?new i.CombinedError({networkError:n.error.networkError?new Error(n.error.networkError):void 0,graphQLErrors:n.error.graphQLErrors}):void 0,hasNext:n.hasNext}}(e,r[e.key],t);return n&&!E.has(e.key)&&(o.stale=!0,E.add(e.key),T(u,e)),o}))(o.filter((function(e){return!!r[e.key]}))(d));return c?f=o.tap(s)(f):p=o.tap((function(e){var n=e.operation;if("mutation"!==n.kind){var i=function(e,n){var t=e.hasNext,r=e.data,i=e.extensions,o=e.error,a={};return void 0!==r&&(a.data=JSON.stringify(r)),n&&void 0!==i&&(a.extensions=JSON.stringify(i)),t&&(a.hasNext=!0),o&&(a.error={graphQLErrors:o.graphQLErrors.map((function(e){return e.path||e.extensions?{message:e.message,path:e.path,extensions:e.extensions}:e.message}))},o.networkError&&(a.error.networkError=""+o.networkError)),a}(e,t);r[n.key]=i}}))(p),o.merge([p,f])}};return u.restoreData=function(e){for(var n in e)null!==r[n]&&(r[n]=e[n])},u.extractData=function(){var e={};for(var n in r)null!=r[n]&&(e[n]=r[n]);return e},e&&e.initialState&&u.restoreData(e.initialState),u},n.subscriptionExchange=function(e){var n=e.forwardSubscription,t=e.enableAllOperations;return function(e){var a=e.client,s=e.forward;function u(e){var n=e.kind;return"subscription"===n||!!t&&("query"===n||"mutation"===n)}return function(e){var t=o.share(e),l=o.mergeMap((function(e){var s=e.key,u=o.filter((function(e){return"teardown"===e.kind&&e.key===s}))(t);return o.takeUntil(u)(function(e){var t=n({key:e.key.toString(36),query:r.print(e.query),variables:e.variables,context:i._extends({},e.context)});return o.make((function(n){var r,o=n.next,s=n.complete,u=!1;return Promise.resolve().then((function(){u||(r=t.subscribe({next:function(n){return o(i.makeResult(e,n))},error:function(n){return o(i.makeErrorResult(e,n))},complete:function(){u||(u=!0,"subscription"===e.kind&&a.reexecuteOperation(f("teardown",e,e.context)),s())}}))})),function(){u=!0,r&&r.unsubscribe()}}))}(e))}))(o.filter(u)(t)),c=s(o.filter((function(e){return!u(e)}))(t));return o.merge([l,c])}}}},"./src/background.ts":function(e,n,t){"use strict";var r=this&&this.__makeTemplateObject||function(e,n){return Object.defineProperty?Object.defineProperty(e,"raw",{value:n}):e.raw=n,e},i=this&&this.__awaiter||function(e,n,t,r){return new(t||(t=Promise))((function(i,o){function a(e){try{u(r.next(e))}catch(e){o(e)}}function s(e){try{u(r.throw(e))}catch(e){o(e)}}function u(e){var n;e.done?i(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(a,s)}u((r=r.apply(e,n||[])).next())}))},o=this&&this.__generator||function(e,n){var t,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(t)throw new TypeError("Generator is already executing.");for(;a;)try{if(t=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=n.call(e,a)}catch(e){o=[6,e],r=0}finally{t=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}};Object.defineProperty(n,"__esModule",{value:!0});var a=t("./node_modules/uuid/dist/esm-browser/index.js"),s=t("./node_modules/@urql/core/dist/urql-core.js"),u=(0,s.createClient)({url:"https://www.code-inspector.com/graphql"}),l={};chrome.storage.onChanged.addListener((function(e,n){for(var t=0,r=Object.entries(e);t<r.length;t++){var i=r[t],o=i[0],a=i[1],s=a.oldValue,u=a.newValue;console.log('Storage key "'+o+'" in namespace "'+n+'" changed.','Old value was "'+s+'", new value is "'+u+'".')}}));var c,d,p=function(e,n,t,i){return(0,s.gql)(c||(c=r(["mutation {\n    createFileAnalysis(language: ",', filename: "','", code: ',', fingerprint: "','")\n}'],["mutation {\n    createFileAnalysis(language: ",', filename: "','", code: ',', fingerprint: "','")\n}'])),t,i,JSON.stringify(e),n)},f=function(e,n){return(0,s.gql)(d||(d=r(["{\n    getFileAnalysis(id: ",', fingerprint: "','"){\n        violations {\n            line\n            description\n            tool\n            category\n            rule\n            severity\n        }\n        code\n        status\n        timestamp\n        runningTimeSeconds\n    }\n}'],["{\n    getFileAnalysis(id: ",', fingerprint: "','"){\n        violations {\n            line\n            description\n            tool\n            category\n            rule\n            severity\n        }\n        code\n        status\n        timestamp\n        runningTimeSeconds\n    }\n}'])),n,e)},m=function(){function e(e){this.innerAnalysisId=e}return e.prototype.shouldFetch=function(e){return this.innerAnalysisId===l[e]},e}();chrome.runtime.onMessage.addListener((function(e,n,t){return"validateCode"==e.contentScriptQuery&&function(e){return new Promise((function(n){return i(void 0,void 0,void 0,(function(){var t,r,s,c,d,h,v,y,g,T,E;return o(this,(function(_){switch(_.label){case 0:return[4,new Promise((function(e){chrome.storage.sync.get(["codiga-user"],(function(n){var t;if(n&&0===Object.keys(n).length&&n.constructor===Object){var r=(0,a.v4)();chrome.storage.sync.set(((t={})["codiga-user"]=r,t),(function(){e(r)}))}else e(n["codiga-user"])}))}))];case 1:return t=_.sent(),r=e.data.code,s=e.data.language,c=e.data.filename,d=e.data.id,h=(0,a.v4)(),l[d]=h,[4,(N=h,b=d,i(void 0,void 0,void 0,(function(){var e;return o(this,(function(n){switch(n.label){case 0:return e=new m(N),[4,new Promise((function(e){var n=setTimeout((function(){clearTimeout(n),e(!1)}),1e3)}))];case 1:return n.sent(),[2,e.shouldFetch(b)]}}))})))];case 2:return _.sent()?[4,u.mutation(p(r,t,s,c)).toPromise()]:[3,4];case 3:return y=_.sent(),[3,5];case 4:y=void 0,_.label=5;case 5:return(g=null==(v=y)?void 0:v.data.errors)&&g.length?(n({errors:g}),[2]):(v&&(T=v.data.createFileAnalysis,E=setInterval((function(){return i(void 0,void 0,void 0,(function(){var e,r,i,a,s,l;return o(this,(function(o){switch(o.label){case 0:return[4,u.query(f(t,T)).toPromise()];case 1:return e=o.sent(),(r=e.data.errors)&&n({errors:r}),"Done"===(null===(l=null===(s=e.data)||void 0===s?void 0:s.getFileAnalysis)||void 0===l?void 0:l.status)&&(clearInterval(E),c=e.data.getFileAnalysis.violations,"line",i=c.reduce((function(e,n){return(e[n.line]=e[n.line]||[]).push(n),e}),{}),a=Object.keys(i).map((function(e){return{line:e,group:i[e]}})),n({violations:a})),n({violations:[]}),[2]}var c}))}))}),2e3)),[2])}var N,b}))}))}))}(e).then((function(e){t(e)})),!0})),chrome.tabs.onUpdated.addListener((function(e,n,t){console.log(e,n,t),(n.url||"complete"===n.status)&&chrome.tabs.sendMessage(e,{action:"updateContainer"},(function(e){}))}))},"./node_modules/uuid/dist/esm-browser/index.js":(e,n,t)=>{"use strict";t.r(n),t.d(n,{v1:()=>r.default,v3:()=>i.default,v4:()=>o.default,v5:()=>a.default,NIL:()=>s.default,version:()=>u.default,validate:()=>l.default,stringify:()=>c.default,parse:()=>d.default});var r=t("./node_modules/uuid/dist/esm-browser/v1.js"),i=t("./node_modules/uuid/dist/esm-browser/v3.js"),o=t("./node_modules/uuid/dist/esm-browser/v4.js"),a=t("./node_modules/uuid/dist/esm-browser/v5.js"),s=t("./node_modules/uuid/dist/esm-browser/nil.js"),u=t("./node_modules/uuid/dist/esm-browser/version.js"),l=t("./node_modules/uuid/dist/esm-browser/validate.js"),c=t("./node_modules/uuid/dist/esm-browser/stringify.js"),d=t("./node_modules/uuid/dist/esm-browser/parse.js")},"./node_modules/uuid/dist/esm-browser/md5.js":(e,n,t)=>{"use strict";function r(e){return 14+(e+64>>>9<<4)+1}function i(e,n){var t=(65535&e)+(65535&n);return(e>>16)+(n>>16)+(t>>16)<<16|65535&t}function o(e,n,t,r,o,a){return i((s=i(i(n,e),i(r,a)))<<(u=o)|s>>>32-u,t);var s,u}function a(e,n,t,r,i,a,s){return o(n&t|~n&r,e,n,i,a,s)}function s(e,n,t,r,i,a,s){return o(n&r|t&~r,e,n,i,a,s)}function u(e,n,t,r,i,a,s){return o(n^t^r,e,n,i,a,s)}function l(e,n,t,r,i,a,s){return o(t^(n|~r),e,n,i,a,s)}t.r(n),t.d(n,{default:()=>c});const c=function(e){if("string"==typeof e){var n=unescape(encodeURIComponent(e));e=new Uint8Array(n.length);for(var t=0;t<n.length;++t)e[t]=n.charCodeAt(t)}return function(e){for(var n=[],t=32*e.length,r="0123456789abcdef",i=0;i<t;i+=8){var o=e[i>>5]>>>i%32&255,a=parseInt(r.charAt(o>>>4&15)+r.charAt(15&o),16);n.push(a)}return n}(function(e,n){e[n>>5]|=128<<n%32,e[r(n)-1]=n;for(var t=1732584193,o=-271733879,c=-1732584194,d=271733878,p=0;p<e.length;p+=16){var f=t,m=o,h=c,v=d;t=a(t,o,c,d,e[p],7,-680876936),d=a(d,t,o,c,e[p+1],12,-389564586),c=a(c,d,t,o,e[p+2],17,606105819),o=a(o,c,d,t,e[p+3],22,-1044525330),t=a(t,o,c,d,e[p+4],7,-176418897),d=a(d,t,o,c,e[p+5],12,1200080426),c=a(c,d,t,o,e[p+6],17,-1473231341),o=a(o,c,d,t,e[p+7],22,-45705983),t=a(t,o,c,d,e[p+8],7,1770035416),d=a(d,t,o,c,e[p+9],12,-1958414417),c=a(c,d,t,o,e[p+10],17,-42063),o=a(o,c,d,t,e[p+11],22,-1990404162),t=a(t,o,c,d,e[p+12],7,1804603682),d=a(d,t,o,c,e[p+13],12,-40341101),c=a(c,d,t,o,e[p+14],17,-1502002290),t=s(t,o=a(o,c,d,t,e[p+15],22,1236535329),c,d,e[p+1],5,-165796510),d=s(d,t,o,c,e[p+6],9,-1069501632),c=s(c,d,t,o,e[p+11],14,643717713),o=s(o,c,d,t,e[p],20,-373897302),t=s(t,o,c,d,e[p+5],5,-701558691),d=s(d,t,o,c,e[p+10],9,38016083),c=s(c,d,t,o,e[p+15],14,-660478335),o=s(o,c,d,t,e[p+4],20,-405537848),t=s(t,o,c,d,e[p+9],5,568446438),d=s(d,t,o,c,e[p+14],9,-1019803690),c=s(c,d,t,o,e[p+3],14,-187363961),o=s(o,c,d,t,e[p+8],20,1163531501),t=s(t,o,c,d,e[p+13],5,-1444681467),d=s(d,t,o,c,e[p+2],9,-51403784),c=s(c,d,t,o,e[p+7],14,1735328473),t=u(t,o=s(o,c,d,t,e[p+12],20,-1926607734),c,d,e[p+5],4,-378558),d=u(d,t,o,c,e[p+8],11,-2022574463),c=u(c,d,t,o,e[p+11],16,1839030562),o=u(o,c,d,t,e[p+14],23,-35309556),t=u(t,o,c,d,e[p+1],4,-1530992060),d=u(d,t,o,c,e[p+4],11,1272893353),c=u(c,d,t,o,e[p+7],16,-155497632),o=u(o,c,d,t,e[p+10],23,-1094730640),t=u(t,o,c,d,e[p+13],4,681279174),d=u(d,t,o,c,e[p],11,-358537222),c=u(c,d,t,o,e[p+3],16,-722521979),o=u(o,c,d,t,e[p+6],23,76029189),t=u(t,o,c,d,e[p+9],4,-640364487),d=u(d,t,o,c,e[p+12],11,-421815835),c=u(c,d,t,o,e[p+15],16,530742520),t=l(t,o=u(o,c,d,t,e[p+2],23,-995338651),c,d,e[p],6,-198630844),d=l(d,t,o,c,e[p+7],10,1126891415),c=l(c,d,t,o,e[p+14],15,-1416354905),o=l(o,c,d,t,e[p+5],21,-57434055),t=l(t,o,c,d,e[p+12],6,1700485571),d=l(d,t,o,c,e[p+3],10,-1894986606),c=l(c,d,t,o,e[p+10],15,-1051523),o=l(o,c,d,t,e[p+1],21,-2054922799),t=l(t,o,c,d,e[p+8],6,1873313359),d=l(d,t,o,c,e[p+15],10,-30611744),c=l(c,d,t,o,e[p+6],15,-1560198380),o=l(o,c,d,t,e[p+13],21,1309151649),t=l(t,o,c,d,e[p+4],6,-145523070),d=l(d,t,o,c,e[p+11],10,-1120210379),c=l(c,d,t,o,e[p+2],15,718787259),o=l(o,c,d,t,e[p+9],21,-343485551),t=i(t,f),o=i(o,m),c=i(c,h),d=i(d,v)}return[t,o,c,d]}(function(e){if(0===e.length)return[];for(var n=8*e.length,t=new Uint32Array(r(n)),i=0;i<n;i+=8)t[i>>5]|=(255&e[i/8])<<i%32;return t}(e),8*e.length))}},"./node_modules/uuid/dist/esm-browser/nil.js":(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>r});const r="00000000-0000-0000-0000-000000000000"},"./node_modules/uuid/dist/esm-browser/parse.js":(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>i});var r=t("./node_modules/uuid/dist/esm-browser/validate.js");const i=function(e){if(!(0,r.default)(e))throw TypeError("Invalid UUID");var n,t=new Uint8Array(16);return t[0]=(n=parseInt(e.slice(0,8),16))>>>24,t[1]=n>>>16&255,t[2]=n>>>8&255,t[3]=255&n,t[4]=(n=parseInt(e.slice(9,13),16))>>>8,t[5]=255&n,t[6]=(n=parseInt(e.slice(14,18),16))>>>8,t[7]=255&n,t[8]=(n=parseInt(e.slice(19,23),16))>>>8,t[9]=255&n,t[10]=(n=parseInt(e.slice(24,36),16))/1099511627776&255,t[11]=n/4294967296&255,t[12]=n>>>24&255,t[13]=n>>>16&255,t[14]=n>>>8&255,t[15]=255&n,t}},"./node_modules/uuid/dist/esm-browser/regex.js":(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>r});const r=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i},"./node_modules/uuid/dist/esm-browser/rng.js":(e,n,t)=>{"use strict";var r;t.r(n),t.d(n,{default:()=>o});var i=new Uint8Array(16);function o(){if(!r&&!(r="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return r(i)}},"./node_modules/uuid/dist/esm-browser/sha1.js":(e,n,t)=>{"use strict";function r(e,n,t,r){switch(e){case 0:return n&t^~n&r;case 1:case 3:return n^t^r;case 2:return n&t^n&r^t&r}}function i(e,n){return e<<n|e>>>32-n}t.r(n),t.d(n,{default:()=>o});const o=function(e){var n=[1518500249,1859775393,2400959708,3395469782],t=[1732584193,4023233417,2562383102,271733878,3285377520];if("string"==typeof e){var o=unescape(encodeURIComponent(e));e=[];for(var a=0;a<o.length;++a)e.push(o.charCodeAt(a))}else Array.isArray(e)||(e=Array.prototype.slice.call(e));e.push(128);for(var s=e.length/4+2,u=Math.ceil(s/16),l=new Array(u),c=0;c<u;++c){for(var d=new Uint32Array(16),p=0;p<16;++p)d[p]=e[64*c+4*p]<<24|e[64*c+4*p+1]<<16|e[64*c+4*p+2]<<8|e[64*c+4*p+3];l[c]=d}l[u-1][14]=8*(e.length-1)/Math.pow(2,32),l[u-1][14]=Math.floor(l[u-1][14]),l[u-1][15]=8*(e.length-1)&4294967295;for(var f=0;f<u;++f){for(var m=new Uint32Array(80),h=0;h<16;++h)m[h]=l[f][h];for(var v=16;v<80;++v)m[v]=i(m[v-3]^m[v-8]^m[v-14]^m[v-16],1);for(var y=t[0],g=t[1],T=t[2],E=t[3],_=t[4],N=0;N<80;++N){var b=Math.floor(N/20),j=i(y,5)+r(b,g,T,E)+_+n[b]+m[N]>>>0;_=E,E=T,T=i(g,30)>>>0,g=y,y=j}t[0]=t[0]+y>>>0,t[1]=t[1]+g>>>0,t[2]=t[2]+T>>>0,t[3]=t[3]+E>>>0,t[4]=t[4]+_>>>0}return[t[0]>>24&255,t[0]>>16&255,t[0]>>8&255,255&t[0],t[1]>>24&255,t[1]>>16&255,t[1]>>8&255,255&t[1],t[2]>>24&255,t[2]>>16&255,t[2]>>8&255,255&t[2],t[3]>>24&255,t[3]>>16&255,t[3]>>8&255,255&t[3],t[4]>>24&255,t[4]>>16&255,t[4]>>8&255,255&t[4]]}},"./node_modules/uuid/dist/esm-browser/stringify.js":(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});for(var r=t("./node_modules/uuid/dist/esm-browser/validate.js"),i=[],o=0;o<256;++o)i.push((o+256).toString(16).substr(1));const a=function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,t=(i[e[n+0]]+i[e[n+1]]+i[e[n+2]]+i[e[n+3]]+"-"+i[e[n+4]]+i[e[n+5]]+"-"+i[e[n+6]]+i[e[n+7]]+"-"+i[e[n+8]]+i[e[n+9]]+"-"+i[e[n+10]]+i[e[n+11]]+i[e[n+12]]+i[e[n+13]]+i[e[n+14]]+i[e[n+15]]).toLowerCase();if(!(0,r.default)(t))throw TypeError("Stringified UUID is invalid");return t}},"./node_modules/uuid/dist/esm-browser/v1.js":(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>l});var r,i,o=t("./node_modules/uuid/dist/esm-browser/rng.js"),a=t("./node_modules/uuid/dist/esm-browser/stringify.js"),s=0,u=0;const l=function(e,n,t){var l=n&&t||0,c=n||new Array(16),d=(e=e||{}).node||r,p=void 0!==e.clockseq?e.clockseq:i;if(null==d||null==p){var f=e.random||(e.rng||o.default)();null==d&&(d=r=[1|f[0],f[1],f[2],f[3],f[4],f[5]]),null==p&&(p=i=16383&(f[6]<<8|f[7]))}var m=void 0!==e.msecs?e.msecs:Date.now(),h=void 0!==e.nsecs?e.nsecs:u+1,v=m-s+(h-u)/1e4;if(v<0&&void 0===e.clockseq&&(p=p+1&16383),(v<0||m>s)&&void 0===e.nsecs&&(h=0),h>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");s=m,u=h,i=p;var y=(1e4*(268435455&(m+=122192928e5))+h)%4294967296;c[l++]=y>>>24&255,c[l++]=y>>>16&255,c[l++]=y>>>8&255,c[l++]=255&y;var g=m/4294967296*1e4&268435455;c[l++]=g>>>8&255,c[l++]=255&g,c[l++]=g>>>24&15|16,c[l++]=g>>>16&255,c[l++]=p>>>8|128,c[l++]=255&p;for(var T=0;T<6;++T)c[l+T]=d[T];return n||(0,a.default)(c)}},"./node_modules/uuid/dist/esm-browser/v3.js":(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>o});var r=t("./node_modules/uuid/dist/esm-browser/v35.js"),i=t("./node_modules/uuid/dist/esm-browser/md5.js");const o=(0,r.default)("v3",48,i.default)},"./node_modules/uuid/dist/esm-browser/v35.js":(e,n,t)=>{"use strict";t.r(n),t.d(n,{DNS:()=>o,URL:()=>a,default:()=>s});var r=t("./node_modules/uuid/dist/esm-browser/stringify.js"),i=t("./node_modules/uuid/dist/esm-browser/parse.js"),o="6ba7b810-9dad-11d1-80b4-00c04fd430c8",a="6ba7b811-9dad-11d1-80b4-00c04fd430c8";function s(e,n,t){function s(e,o,a,s){if("string"==typeof e&&(e=function(e){e=unescape(encodeURIComponent(e));for(var n=[],t=0;t<e.length;++t)n.push(e.charCodeAt(t));return n}(e)),"string"==typeof o&&(o=(0,i.default)(o)),16!==o.length)throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");var u=new Uint8Array(16+e.length);if(u.set(o),u.set(e,o.length),(u=t(u))[6]=15&u[6]|n,u[8]=63&u[8]|128,a){s=s||0;for(var l=0;l<16;++l)a[s+l]=u[l];return a}return(0,r.default)(u)}try{s.name=e}catch(e){}return s.DNS=o,s.URL=a,s}},"./node_modules/uuid/dist/esm-browser/v4.js":(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>o});var r=t("./node_modules/uuid/dist/esm-browser/rng.js"),i=t("./node_modules/uuid/dist/esm-browser/stringify.js");const o=function(e,n,t){var o=(e=e||{}).random||(e.rng||r.default)();if(o[6]=15&o[6]|64,o[8]=63&o[8]|128,n){t=t||0;for(var a=0;a<16;++a)n[t+a]=o[a];return n}return(0,i.default)(o)}},"./node_modules/uuid/dist/esm-browser/v5.js":(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>o});var r=t("./node_modules/uuid/dist/esm-browser/v35.js"),i=t("./node_modules/uuid/dist/esm-browser/sha1.js");const o=(0,r.default)("v5",80,i.default)},"./node_modules/uuid/dist/esm-browser/validate.js":(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>i});var r=t("./node_modules/uuid/dist/esm-browser/regex.js");const i=function(e){return"string"==typeof e&&r.default.test(e)}},"./node_modules/uuid/dist/esm-browser/version.js":(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>i});var r=t("./node_modules/uuid/dist/esm-browser/validate.js");const i=function(e){if(!(0,r.default)(e))throw TypeError("Invalid UUID");return parseInt(e.substr(14,1),16)}},"./node_modules/wonka/dist/wonka.js":(e,n)=>{"use strict";function t(e,n){return n.tag=e,n}function r(e){}function i(e){return function(n){var r=e.length;let i=!1,o=!1,a=!1,s=0;n(t(0,[function(u){if(u)i=!0;else if(o)a=!0;else{for(o=a=!0;a&&!i;)s<r?(u=e[s],s=s+1|0,a=!1,n(t(1,[u]))):(i=!0,n(0));o=!1}}]))}}function o(){}function a(e){e(0)}function s(e){let n=!1;e(t(0,[function(t){t?n=!0:n||e(0)}]))}function u(e){return void 0===e?((e=[A,0]).tag=256,e):(null===e||e[0]!==A||((e=[A,e[1]+1|0]).tag=256),e)}function l(e){return null===e||e[0]!==A?e:0!==(e=e[1])?[A,e-1|0]:void 0}function c(e){return function(n){return function(i){function o(n){"number"==typeof n?d&&(d=!1,void 0!==(n=a.shift())?(n=e(l(n)),d=!0,n(o)):f?i(0):u||(u=!0,s(0))):n.tag?d&&(i(n),p?p=!1:c(0)):(c=n=n[0],p=!1,n(0))}let a=[],s=r,u=!1,c=r,d=!1,p=!1,f=!1;n((function(n){"number"==typeof n?f||(f=!0,!d&&function(e){return 0===e.length}(a)&&i(0)):n.tag?f||(n=n[0],u=!1,d?a.push(n):(n=e(n),d=!0,n(o))):s=n[0]})),i(t(0,[function(e){if(e){if(f||(f=!0,s(1)),d)return d=!1,c(1)}else f||u||(u=!0,s(0)),d&&!p&&(p=!0,c(0))}]))}}}function d(e){return e}function p(e){return e}function f(e){return e(0)}function m(e){return function(n){return function(i){let o=r,a=!1,s=[],u=!1;n((function(n){"number"==typeof n?u||(u=!0,0===s.length&&i(0)):n.tag?u||(a=!1,function(e){function n(e){return e!==c}var l=function(e){"number"==typeof e?0!==s.length&&(s=s.filter(n),e=0===s.length,u&&e?i(0):!a&&e&&(a=!0,o(0))):e.tag?0!==s.length&&(i(t(1,[e[0]])),c(0)):(c=e=e[0],s=s.concat(e),e(0))};let c=r;1===e.length?e(l):e.bind(null,l)}(e(n[0])),a||(a=!0,o(0))):o=n[0]})),i(t(0,[function(e){e?(u||(u=!0,o(e)),s.forEach((function(n){return n(e)})),s=[]):(a||u?a=!1:(a=!0,o(0)),s.forEach(f))}]))}}}function h(e){return e}function v(e){return e}function y(e){return m(v)(e)}function g(e){return function(n){return function(r){let i=!1;return n((function(n){if("number"==typeof n)i||(i=!0,r(n));else if(n.tag)i||(e(n[0]),r(n));else{var o=n[0];r(t(0,[function(e){if(!i)return e&&(i=!0),o(e)}]))}}))}}}function T(e){e(0)}function E(e){return function(n){return function(i){function o(e){l&&("number"==typeof e?(l=!1,d?i(e):s||(s=!0,a(0))):e.tag?(i(e),c?c=!1:u(0)):(u=e=e[0],c=!1,e(0)))}let a=r,s=!1,u=r,l=!1,c=!1,d=!1;n((function(n){"number"==typeof n?d||(d=!0,l||i(0)):n.tag?d||(l&&(u(1),u=r),s?s=!1:(s=!0,a(0)),n=e(n[0]),l=!0,n(o)):a=n[0]})),i(t(0,[function(e){if(e){if(d||(d=!0,a(1)),l)return l=!1,u(1)}else d||s||(s=!0,a(0)),l&&!c&&(c=!0,u(0))}]))}}}function _(e){return e}function N(e){return function(n){return function(t){let o=[],a=r;return n((function(n){"number"==typeof n?i(o)(t):n.tag?(o.length>=e&&0<e&&o.shift(),o.push(n[0]),a(0)):(n=n[0],0>=e?(n(1),s(t)):(a=n,n(0)))}))}}}function b(e){return function(n){let t=r,i=!1;return n((function(n){"number"==typeof n?i=!0:n.tag?i||(e(n[0]),t(0)):(t=n=n[0],n(0))})),{unsubscribe:function(e){if(!i)return i=!0,t(1)}}}}function j(e){}function I(e){}function O(){}function L(){}function S(e,n,t){e.addEventListener(n,t)}function D(e,n,t){e.removeEventListener(n,t)}var A,w,R,k,q,x,F,G,V,C,K,U,Q,P,M,B,Y,J,X,z,H,W,$,Z,ee,ne,te,re,ie,oe,ae,se,ue,le,ce,de,pe,fe,me,he,ve,ye,ge,Te,Ee=i,_e=s;A=[],w=function(e){return function(n){return function(i){function o(e){"number"==typeof e?c||(c=!0,s(1),0<a.length&&i(t(1,[a])),i(0)):e.tag?!c&&0<a.length&&(e=a,a=[],i(t(1,[e]))):u=e[0]}let a=[],s=r,u=r,l=!1,c=!1;n((function(n){"number"==typeof n?c||(c=!0,u(1),0<a.length&&i(t(1,[a])),i(0)):n.tag?c||(a.push(n[0]),l?l=!1:(l=!0,s(0),u(0))):(s=n[0],e(o))})),i(t(0,[function(e){if(!c){if(e)return c=!0,s(1),u(1);if(!l)return l=!0,s(0),u(0)}}]))}}},R=function(e,n){return function(e,n){return function(i){let o,a,s=r,c=r,d=!1,p=0,f=!1;e((function(e){var n=a;"number"==typeof e?1>p?p=p+1|0:f||(f=!0,i(0)):e.tag?(e=e[0],void 0!==n?f||(o=u(e),d=!1,i(t(1,[[e,l(n)]]))):(o=u(e),d?d=!1:c(0))):s=e[0]})),n((function(e){var n=o;"number"==typeof e?1>p?p=p+1|0:f||(f=!0,i(0)):e.tag?(e=e[0],void 0!==n?f||(a=u(e),d=!1,i(t(1,[[l(n),e]]))):(a=u(e),d?d=!1:s(0))):c=e[0]})),i(t(0,[function(e){if(!f){if(e)return f=!0,s(1),c(1);if(!d)return d=!0,s(e),c(e)}}]))}}(e,n)},k=c,q=function(e){return c(d)(e)},x=function(e){return c(p)(i(e))},F=function(e){return function(n){return function(t){let i=r;return n((function(n){"number"==typeof n?t(n):n.tag?e(n[0])?t(n):i(0):(i=n[0],t(n))}))}}},G=function(e){return function(n){return function(r){return n((function(n){n="number"==typeof n?0:n.tag?t(1,[e(n[0])]):t(0,[n[0]]),r(n)}))}}},V=m,C=function(e){return m(h)(i(e))},K=y,U=y,Q=function(e){return function(n){return function(r){let i=!1;return n((function(n){if("number"==typeof n){if(i)return;return i=!0,r(n),e()}if(n.tag)i||r(n);else{var o=n[0];r(t(0,[function(n){if(!i)return n?(i=!0,o(n),e()):o(n)}]))}}))}}},P=g,M=g,B=function(e){return function(n){return function(t){return n((function(n){"number"==typeof n||n.tag?t(n):(t(n),e())}))}}},Y=function(e){return function(n){return function(i){let o,a=r,s=r,c=!1,d=!1;n((function(e){"number"==typeof e?d||(d=!0,s(1),i(0)):e.tag?(o=u(e[0]),c?c=!1:(c=!0,s(0),a(0))):a=e[0]})),e((function(e){var n=o;"number"==typeof e?d||(d=!0,a(1),i(0)):e.tag?void 0===n||d||(o=void 0,i(t(1,[l(n)]))):s=e[0]})),i(t(0,[function(e){if(!d){if(e)return d=!0,a(1),s(1);if(!c)return c=!0,a(0),s(0)}}]))}}},J=function(e,n){return function(e,n){return function(r){return function(i){let o=n;return r((function(n){"number"==typeof n?n=0:n.tag?(o=e(o,n[0]),n=t(1,[o])):n=t(0,[n[0]]),i(n)}))}}}(e,n)},X=function(e){function n(e){"number"==typeof e?(i.forEach(T),i=[]):e.tag?(a=!1,i.forEach((function(n){n(e)}))):o=e[0]}let i=[],o=r,a=!1;return function(r){function s(e){return e!==r}i=i.concat(r),1===i.length&&e(n),r(t(0,[function(e){if(e){if(i=i.filter(s),0===i.length)return o(1)}else a||(a=!0,o(e))}]))}},z=function(e){return function(n){return function(t){let i=r,o=e;return n((function(e){"number"==typeof e?t(e):e.tag?0<o?(o=o-1|0,i(0)):t(e):(i=e[0],t(e))}))}}},H=function(e){return function(n){return function(i){function o(e){"number"==typeof e?u&&(c=!0,a(1)):e.tag?(u=!1,s(1)):(s=e=e[0],e(0))}let a=r,s=r,u=!0,l=!1,c=!1;n((function(n){"number"==typeof n?(u&&s(1),c=!0,i(0)):n.tag?u||c?l?l=!1:(l=!0,a(0),s(0)):(l=!1,i(n)):(a=n[0],e(o))})),i(t(0,[function(e){if(!c)if(e){if(c=!0,a(1),u)return s(1)}else l||(l=!0,u&&s(0),a(0))}]))}}},W=function(e){return function(n){return function(t){let i=r,o=!0;return n((function(n){"number"==typeof n?t(n):n.tag?o?e(n[0])?i(0):(o=!1,t(n)):t(n):(i=n[0],t(n))}))}}},$=E,Z=function(e){return E(_)(e)},ee=function(e){return function(n){return function(i){let o=!1,a=0,s=r;n((function(n){"number"==typeof n?o||(o=!0,i(0)):n.tag?a<e&&!o&&(a=a+1|0,i(n),!o&&a>=e&&(o=!0,i(0),s(1))):(n=n[0],0>=e?(o=!0,i(0),n(1)):s=n)})),i(t(0,[function(n){if(!o){if(n)return o=!0,s(1);if(a<e)return s(0)}}]))}}},ne=N,te=function(e){return function(n){return function(i){function o(e){"number"!=typeof e&&(e.tag?(a=!0,s(1),i(0)):(u=e=e[0],e(0)))}let a=!1,s=r,u=r;n((function(n){"number"==typeof n?a||(a=!0,u(1),i(0)):n.tag?a||i(n):(s=n[0],e(o))})),i(t(0,[function(e){if(!a)return e?(a=!0,s(1),u(1)):s(0)}]))}}},re=function(e){return function(n){return function(t){let i=r,o=!1;return n((function(n){"number"==typeof n?o||(o=!0,t(0)):n.tag?o||(e(n[0])?t(n):(o=!0,t(0),i(1))):(i=n[0],t(n))}))}}},ie=b,oe=function(e){return function(n){b(e)(n)}},ae=function(e){return b(j)(e)},se=function(e){let n=[],t=r,i=!1;return e((function(e){"number"==typeof e?i=!0:e.tag?(n.push(e[0]),t(0)):(t=e=e[0],e(0))})),i||t(1),n},ue="function"==typeof Symbol?Symbol.observable||(Symbol.observable=Symbol("observable")):"@@observable",le=function(e){var n=void 0!==e[ue]?e[ue]():e;return function(e){var r=n.subscribe({next:function(n){e(t(1,[n]))},complete:function(){e(0)},error:I});e(t(0,[function(e){if(e)return r.unsubscribe()}]))}},ce=function(e){var n={subscribe:function(n,t,i){var o=("object"==typeof n?n.next.bind(n):n)||O,a=("object"==typeof n?n.complete.bind(n):i)||L;let s=r,u=!1;return e((function(e){if("number"==typeof e)return u=!0,a();if(e.tag){if(u)return;return o(e[0]),s(0)}s=e=e[0],e(0)})),{unsubscribe:function(){if(!u)return this.closed=!1,u=!0,s(1)},closed:!1}}};return n[ue]=function(e){return n},n},de=function(e){return function(n){var r=function(e,r){switch(e){case 0:n(t(0,[function(e){return r(e?2:1)}]));break;case 1:n(t(1,[r]));break;case 2:n(0)}};return 2===e.length?e(0,r):e.bind(null,0,r)}},pe=function(e){return function(n,t){if(0===n)return e((function(e){if("number"==typeof e)return 2===t.length?t(2,void 0):t.bind(null,2,void 0);if(e.tag)return e=e[0],2===t.length?t(1,e):t.bind(null,1,e);var n=e[0];return e=function(e){switch(e){case 1:n(0);break;case 2:n(1)}},2===t.length?t(0,e):t.bind(null,0,e)}))}},fe=function(e){return function(n){return function(r){let i,o=!1,a=!1;var s=function(e){void 0!==(e=i)&&(i=void 0,clearTimeout(l(e)))};return n((function(n){if("number"==typeof n)a||(a=!0,void 0!==i?o=!0:r(0));else if(n.tag)a||(s(),i=u(setTimeout((function(e){i=void 0,r(n),o&&r(0)}),e(n[0]))));else{var l=n[0];r(t(0,[function(e){if(!a)return e?(a=!0,o=!1,s(),l(1)):l(0)}]))}}))}}},me=function(e){return function(n){return function(t){let r=0;return n((function(n){"number"==typeof n||n.tag?(r=r+1|0,setTimeout((function(e){0!==r&&(r=r-1|0,t(n))}),e)):t(n)}))}}},he=function(e){return function(n){return function(r){function i(e){o=void 0,a=!1}let o,a=!1;var s=function(e){void 0!==(e=o)&&clearTimeout(l(e))};return n((function(n){if("number"==typeof n)s(),r(0);else if(n.tag)a||(a=!0,s(),o=u(setTimeout(i,e(n[0]))),r(n));else{var l=n[0];r(t(0,[function(e){return e?(s(),l(1)):l(e)}]))}}))}}},ve=function(e){return new Promise((function(n,t){N(1)(e)((function(e){"number"!=typeof e&&(e.tag?n(e[0]):e[0](0))}))}))},ye=function(e){return function(n){let r=0;var i=setInterval((function(e){e=r,r=r+1|0,n(t(1,[e]))}),e);n(t(0,[function(e){e&&clearInterval(i)}]))}},ge=function(e,n){return function(e,n){return function(r){var i=S,o=D,a=function(e){r(t(1,[e]))};return r(t(0,[function(t){if(t)return o(e,n,a)}])),i(e,n,a)}}(e,n)},Te=function(e){return function(n){let r=!1;e.then((function(e){return r||(n(t(1,[e])),n(0)),Promise.resolve(void 0)})),n(t(0,[function(e){e&&(r=!0)}]))}},n.buffer=w,n.combine=R,n.concat=x,n.concatAll=q,n.concatMap=k,n.debounce=fe,n.delay=me,n.empty=_e,n.filter=F,n.flatten=U,n.forEach=oe,n.fromArray=Ee,n.fromCallbag=de,n.fromDomEvent=ge,n.fromList=function(e){return function(n){let r=!1,i=!1,o=!1,a=e;n(t(0,[function(e){if(e)r=!0;else if(i)o=!0;else{for(i=o=!0;o&&!r;)(e=a)?(a=e[1],o=!1,n(t(1,[e[0]]))):(r=!0,n(0));i=!1}}]))}},n.fromObservable=le,n.fromPromise=Te,n.fromValue=function(e){return function(n){let r=!1;n(t(0,[function(i){i?r=!0:r||(r=!0,n(t(1,[e])),n(0))}]))}},n.interval=ye,n.make=function(e){return function(n){let r=o,i=!1;r=e({next:function(e){i||n(t(1,[e]))},complete:function(e){i||(i=!0,n(0))}}),n(t(0,[function(e){if(e&&!i)return i=!0,r()}]))}},n.makeSubject=function(e){let n=[],r=!1;return{source:function(e){function r(n){return n!==e}n=n.concat(e),e(t(0,[function(e){e&&(n=n.filter(r))}]))},next:function(e){r||n.forEach((function(n){n(t(1,[e]))}))},complete:function(e){r||(r=!0,n.forEach(a))}}},n.map=G,n.merge=C,n.mergeAll=K,n.mergeMap=V,n.never=function(e){e(t(0,[r]))},n.onEnd=Q,n.onPush=P,n.onStart=B,n.pipe=function(){for(var e=arguments,n=arguments[0],t=1,r=arguments.length;t<r;t++)n=e[t](n);return n},n.publish=ae,n.sample=Y,n.scan=J,n.share=X,n.skip=z,n.skipUntil=H,n.skipWhile=W,n.subscribe=ie,n.switchAll=Z,n.switchMap=$,n.take=ee,n.takeLast=ne,n.takeUntil=te,n.takeWhile=re,n.tap=M,n.throttle=he,n.toArray=se,n.toCallbag=pe,n.toObservable=ce,n.toPromise=ve},"./node_modules/graphql/error/GraphQLError.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{GraphQLError:()=>v,printError:()=>y});var r=t("./node_modules/graphql/jsutils/isObjectLike.mjs"),i=t("./node_modules/graphql/polyfills/symbols.mjs"),o=t("./node_modules/graphql/language/location.mjs"),a=t("./node_modules/graphql/language/printLocation.mjs");function s(e){return s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},s(e)}function u(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function l(e,n){return!n||"object"!==s(n)&&"function"!=typeof n?c(e):n}function c(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function d(e){var n="function"==typeof Map?new Map:void 0;return d=function(e){if(null===e||(t=e,-1===Function.toString.call(t).indexOf("[native code]")))return e;var t;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==n){if(n.has(e))return n.get(e);n.set(e,r)}function r(){return p(e,arguments,h(this).constructor)}return r.prototype=Object.create(e.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),m(r,e)},d(e)}function p(e,n,t){return p=f()?Reflect.construct:function(e,n,t){var r=[null];r.push.apply(r,n);var i=new(Function.bind.apply(e,r));return t&&m(i,t.prototype),i},p.apply(null,arguments)}function f(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function m(e,n){return m=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e},m(e,n)}function h(e){return h=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},h(e)}var v=function(e){!function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&m(e,n)}(p,e);var n,t,a,s,d=(n=p,t=f(),function(){var e,r=h(n);if(t){var i=h(this).constructor;e=Reflect.construct(r,arguments,i)}else e=r.apply(this,arguments);return l(this,e)});function p(e,n,t,i,a,s,u){var f,m,h,v,y;!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,p),y=d.call(this,e);var g,T=Array.isArray(n)?0!==n.length?n:void 0:n?[n]:void 0,E=t;!E&&T&&(E=null===(g=T[0].loc)||void 0===g?void 0:g.source);var _,N=i;!N&&T&&(N=T.reduce((function(e,n){return n.loc&&e.push(n.loc.start),e}),[])),N&&0===N.length&&(N=void 0),i&&t?_=i.map((function(e){return(0,o.getLocation)(t,e)})):T&&(_=T.reduce((function(e,n){return n.loc&&e.push((0,o.getLocation)(n.loc.source,n.loc.start)),e}),[]));var b=u;if(null==b&&null!=s){var j=s.extensions;(0,r.default)(j)&&(b=j)}return Object.defineProperties(c(y),{name:{value:"GraphQLError"},message:{value:e,enumerable:!0,writable:!0},locations:{value:null!==(f=_)&&void 0!==f?f:void 0,enumerable:null!=_},path:{value:null!=a?a:void 0,enumerable:null!=a},nodes:{value:null!=T?T:void 0},source:{value:null!==(m=E)&&void 0!==m?m:void 0},positions:{value:null!==(h=N)&&void 0!==h?h:void 0},originalError:{value:s},extensions:{value:null!==(v=b)&&void 0!==v?v:void 0,enumerable:null!=b}}),null!=s&&s.stack?(Object.defineProperty(c(y),"stack",{value:s.stack,writable:!0,configurable:!0}),l(y)):(Error.captureStackTrace?Error.captureStackTrace(c(y),p):Object.defineProperty(c(y),"stack",{value:Error().stack,writable:!0,configurable:!0}),y)}return a=p,(s=[{key:"toString",value:function(){return y(this)}},{key:i.SYMBOL_TO_STRING_TAG,get:function(){return"Object"}}])&&u(a.prototype,s),p}(d(Error));function y(e){var n=e.message;if(e.nodes)for(var t=0,r=e.nodes;t<r.length;t++){var i=r[t];i.loc&&(n+="\n\n"+(0,a.printLocation)(i.loc))}else if(e.source&&e.locations)for(var o=0,s=e.locations;o<s.length;o++){var u=s[o];n+="\n\n"+(0,a.printSourceLocation)(e.source,u)}return n}},"./node_modules/graphql/error/formatError.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{formatError:()=>i});var r=t("./node_modules/graphql/jsutils/devAssert.mjs");function i(e){var n;e||(0,r.default)(0,"Received null or undefined error.");var t=null!==(n=e.message)&&void 0!==n?n:"An unknown error occurred.",i=e.locations,o=e.path,a=e.extensions;return a?{message:t,locations:i,path:o,extensions:a}:{message:t,locations:i,path:o}}},"./node_modules/graphql/error/locatedError.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{locatedError:()=>o});var r=t("./node_modules/graphql/jsutils/inspect.mjs"),i=t("./node_modules/graphql/error/GraphQLError.mjs");function o(e,n,t){var o,a=e instanceof Error?e:new Error("Unexpected error value: "+(0,r.default)(e));return Array.isArray(a.path)?a:new i.GraphQLError(a.message,null!==(o=a.nodes)&&void 0!==o?o:n,a.source,a.positions,t,a)}},"./node_modules/graphql/error/syntaxError.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{syntaxError:()=>i});var r=t("./node_modules/graphql/error/GraphQLError.mjs");function i(e,n,t){return new r.GraphQLError("Syntax Error: ".concat(t),void 0,e,[n])}},"./node_modules/graphql/execution/execute.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{execute:()=>b,executeSync:()=>j,assertValidExecutionArguments:()=>L,buildExecutionContext:()=>S,collectFields:()=>A,buildResolveInfo:()=>q,defaultTypeResolver:()=>Q,defaultFieldResolver:()=>P,getFieldDef:()=>M});var r=t("./node_modules/graphql/jsutils/inspect.mjs"),i=t("./node_modules/graphql/jsutils/memoize3.mjs"),o=t("./node_modules/graphql/jsutils/invariant.mjs"),a=t("./node_modules/graphql/jsutils/devAssert.mjs"),s=t("./node_modules/graphql/jsutils/isPromise.mjs"),u=t("./node_modules/graphql/jsutils/isObjectLike.mjs"),l=t("./node_modules/graphql/jsutils/safeArrayFrom.mjs"),c=t("./node_modules/graphql/jsutils/promiseReduce.mjs"),d=t("./node_modules/graphql/jsutils/promiseForObject.mjs"),p=t("./node_modules/graphql/jsutils/Path.mjs"),f=t("./node_modules/graphql/error/GraphQLError.mjs"),m=t("./node_modules/graphql/error/locatedError.mjs"),h=t("./node_modules/graphql/language/kinds.mjs"),v=t("./node_modules/graphql/type/validate.mjs"),y=t("./node_modules/graphql/type/introspection.mjs"),g=t("./node_modules/graphql/type/directives.mjs"),T=t("./node_modules/graphql/type/definition.mjs"),E=t("./node_modules/graphql/utilities/typeFromAST.mjs"),_=t("./node_modules/graphql/utilities/getOperationRootType.mjs"),N=t("./node_modules/graphql/execution/values.mjs");function b(e,n,t,r,i,o,a,s){return I(1===arguments.length?e:{schema:e,document:n,rootValue:t,contextValue:r,variableValues:i,operationName:o,fieldResolver:a,typeResolver:s})}function j(e){var n=I(e);if((0,s.default)(n))throw new Error("GraphQL execution failed to complete synchronously.");return n}function I(e){var n=e.schema,t=e.document,r=e.rootValue,i=e.contextValue,o=e.variableValues,a=e.operationName,u=e.fieldResolver,l=e.typeResolver;L(n,t,o);var d=S(n,t,r,i,o,a,u,l);if(Array.isArray(d))return{errors:d};var f=function(e,n,t){var r=(0,_.getOperationRootType)(e.schema,n),i=A(e,r,n.selectionSet,Object.create(null),Object.create(null)),o=void 0;try{var a="mutation"===n.operation?function(e,n,t,r,i){return(0,c.default)(Object.keys(i),(function(r,o){var a=i[o],u=(0,p.addPath)(undefined,o,n.name),l=k(e,n,t,a,u);return void 0===l?r:(0,s.default)(l)?l.then((function(e){return r[o]=e,r})):(r[o]=l,r)}),Object.create(null))}(e,r,t,0,i):D(e,r,t,o,i);return(0,s.default)(a)?a.then(void 0,(function(n){return e.errors.push(n),Promise.resolve(null)})):a}catch(n){return e.errors.push(n),null}}(d,d.operation,r);return O(d,f)}function O(e,n){return(0,s.default)(n)?n.then((function(n){return O(e,n)})):0===e.errors.length?{data:n}:{errors:e.errors,data:n}}function L(e,n,t){n||(0,a.default)(0,"Must provide document."),(0,v.assertValidSchema)(e),null==t||(0,u.default)(t)||(0,a.default)(0,"Variables must be provided as an Object where each property is a variable value. Perhaps look to see if an unparsed JSON string was provided.")}function S(e,n,t,r,i,o,a,s){for(var u,l,c,d=Object.create(null),p=0,m=n.definitions;p<m.length;p++){var v=m[p];switch(v.kind){case h.Kind.OPERATION_DEFINITION:if(null==o){if(void 0!==c)return[new f.GraphQLError("Must provide operation name if query contains multiple operations.")];c=v}else(null===(u=v.name)||void 0===u?void 0:u.value)===o&&(c=v);break;case h.Kind.FRAGMENT_DEFINITION:d[v.name.value]=v}}if(!c)return null!=o?[new f.GraphQLError('Unknown operation named "'.concat(o,'".'))]:[new f.GraphQLError("Must provide an operation.")];var y=null!==(l=c.variableDefinitions)&&void 0!==l?l:[],g=(0,N.getVariableValues)(e,y,null!=i?i:{},{maxErrors:50});return g.errors?g.errors:{schema:e,fragments:d,rootValue:t,contextValue:r,operation:c,variableValues:g.coerced,fieldResolver:null!=a?a:P,typeResolver:null!=s?s:Q,errors:[]}}function D(e,n,t,r,i){for(var o=Object.create(null),a=!1,u=0,l=Object.keys(i);u<l.length;u++){var c=l[u],f=k(e,n,t,i[c],(0,p.addPath)(r,c,n.name));void 0!==f&&(o[c]=f,(0,s.default)(f)&&(a=!0))}return a?(0,d.default)(o):o}function A(e,n,t,r,i){for(var o=0,a=t.selections;o<a.length;o++){var s=a[o];switch(s.kind){case h.Kind.FIELD:if(!w(e,s))continue;var u=(d=s).alias?d.alias.value:d.name.value;r[u]||(r[u]=[]),r[u].push(s);break;case h.Kind.INLINE_FRAGMENT:if(!w(e,s)||!R(e,s,n))continue;A(e,n,s.selectionSet,r,i);break;case h.Kind.FRAGMENT_SPREAD:var l=s.name.value;if(i[l]||!w(e,s))continue;i[l]=!0;var c=e.fragments[l];if(!c||!R(e,c,n))continue;A(e,n,c.selectionSet,r,i)}}var d;return r}function w(e,n){var t=(0,N.getDirectiveValues)(g.GraphQLSkipDirective,n,e.variableValues);if(!0===(null==t?void 0:t.if))return!1;var r=(0,N.getDirectiveValues)(g.GraphQLIncludeDirective,n,e.variableValues);return!1!==(null==r?void 0:r.if)}function R(e,n,t){var r=n.typeCondition;if(!r)return!0;var i=(0,E.typeFromAST)(e.schema,r);return i===t||!!(0,T.isAbstractType)(i)&&e.schema.isSubType(i,t)}function k(e,n,t,r,i){var o,a=r[0].name.value,u=M(e.schema,n,a);if(u){var l=u.type,c=null!==(o=u.resolve)&&void 0!==o?o:e.fieldResolver,d=q(e,u,r,n,i);try{var f,h=c(t,(0,N.getArgumentValues)(u,r[0],e.variableValues),e.contextValue,d);return f=(0,s.default)(h)?h.then((function(n){return F(e,l,r,d,i,n)})):F(e,l,r,d,i,h),(0,s.default)(f)?f.then(void 0,(function(n){return x((0,m.locatedError)(n,r,(0,p.pathToArray)(i)),l,e)})):f}catch(n){return x((0,m.locatedError)(n,r,(0,p.pathToArray)(i)),l,e)}}}function q(e,n,t,r,i){return{fieldName:n.name,fieldNodes:t,returnType:n.type,parentType:r,path:i,schema:e.schema,fragments:e.fragments,rootValue:e.rootValue,operation:e.operation,variableValues:e.variableValues}}function x(e,n,t){if((0,T.isNonNullType)(n))throw e;return t.errors.push(e),null}function F(e,n,t,i,a,u){if(u instanceof Error)throw u;if((0,T.isNonNullType)(n)){var c=F(e,n.ofType,t,i,a,u);if(null===c)throw new Error("Cannot return null for non-nullable field ".concat(i.parentType.name,".").concat(i.fieldName,"."));return c}return null==u?null:(0,T.isListType)(n)?function(e,n,t,r,i,o){var a=n.ofType,u=!1,c=(0,l.default)(o,(function(n,o){var l=(0,p.addPath)(i,o,void 0);try{var c;return c=(0,s.default)(n)?n.then((function(n){return F(e,a,t,r,l,n)})):F(e,a,t,r,l,n),(0,s.default)(c)?(u=!0,c.then(void 0,(function(n){return x((0,m.locatedError)(n,t,(0,p.pathToArray)(l)),a,e)}))):c}catch(n){return x((0,m.locatedError)(n,t,(0,p.pathToArray)(l)),a,e)}}));if(null==c)throw new f.GraphQLError('Expected Iterable, but did not find one for field "'.concat(r.parentType.name,".").concat(r.fieldName,'".'));return u?Promise.all(c):c}(e,n,t,i,a,u):(0,T.isLeafType)(n)?function(e,n){var t=e.serialize(n);if(void 0===t)throw new Error('Expected a value of type "'.concat((0,r.default)(e),'" but ')+"received: ".concat((0,r.default)(n)));return t}(n,u):(0,T.isAbstractType)(n)?function(e,n,t,r,i,o){var a,u=null!==(a=n.resolveType)&&void 0!==a?a:e.typeResolver,l=e.contextValue,c=u(o,l,r,n);return(0,s.default)(c)?c.then((function(a){return V(e,G(a,e,n,t,r,o),t,r,i,o)})):V(e,G(c,e,n,t,r,o),t,r,i,o)}(e,n,t,i,a,u):(0,T.isObjectType)(n)?V(e,n,t,i,a,u):void(0,o.default)(0,"Cannot complete value of unexpected output type: "+(0,r.default)(n))}function G(e,n,t,i,o,a){if(null==e)throw new f.GraphQLError('Abstract type "'.concat(t.name,'" must resolve to an Object type at runtime for field "').concat(o.parentType.name,".").concat(o.fieldName,'". Either the "').concat(t.name,'" type should provide a "resolveType" function or each possible type should provide an "isTypeOf" function.'),i);var s=(0,T.isNamedType)(e)?e.name:e;if("string"!=typeof s)throw new f.GraphQLError('Abstract type "'.concat(t.name,'" must resolve to an Object type at runtime for field "').concat(o.parentType.name,".").concat(o.fieldName,'" with ')+"value ".concat((0,r.default)(a),', received "').concat((0,r.default)(e),'".'));var u=n.schema.getType(s);if(null==u)throw new f.GraphQLError('Abstract type "'.concat(t.name,'" was resolve to a type "').concat(s,'" that does not exist inside schema.'),i);if(!(0,T.isObjectType)(u))throw new f.GraphQLError('Abstract type "'.concat(t.name,'" was resolve to a non-object type "').concat(s,'".'),i);if(!n.schema.isSubType(t,u))throw new f.GraphQLError('Runtime Object type "'.concat(u.name,'" is not a possible type for "').concat(t.name,'".'),i);return u}function V(e,n,t,r,i,o){if(n.isTypeOf){var a=n.isTypeOf(o,e.contextValue,r);if((0,s.default)(a))return a.then((function(r){if(!r)throw C(n,o,t);return K(e,n,t,i,o)}));if(!a)throw C(n,o,t)}return K(e,n,t,i,o)}function C(e,n,t){return new f.GraphQLError('Expected value of type "'.concat(e.name,'" but got: ').concat((0,r.default)(n),"."),t)}function K(e,n,t,r,i){return D(e,n,i,r,U(e,n,t))}var U=(0,i.default)((function(e,n,t){for(var r=Object.create(null),i=Object.create(null),o=0;o<t.length;o++){var a=t[o];a.selectionSet&&(r=A(e,n,a.selectionSet,r,i))}return r})),Q=function(e,n,t,r){if((0,u.default)(e)&&"string"==typeof e.__typename)return e.__typename;for(var i=t.schema.getPossibleTypes(r),o=[],a=0;a<i.length;a++){var l=i[a];if(l.isTypeOf){var c=l.isTypeOf(e,n,t);if((0,s.default)(c))o[a]=c;else if(c)return l.name}}return o.length?Promise.all(o).then((function(e){for(var n=0;n<e.length;n++)if(e[n])return i[n].name})):void 0},P=function(e,n,t,r){if((0,u.default)(e)||"function"==typeof e){var i=e[r.fieldName];return"function"==typeof i?e[r.fieldName](n,t,r):i}};function M(e,n,t){return t===y.SchemaMetaFieldDef.name&&e.getQueryType()===n?y.SchemaMetaFieldDef:t===y.TypeMetaFieldDef.name&&e.getQueryType()===n?y.TypeMetaFieldDef:t===y.TypeNameMetaFieldDef.name?y.TypeNameMetaFieldDef:n.getFields()[t]}},"./node_modules/graphql/execution/values.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{getVariableValues:()=>m,getArgumentValues:()=>h,getDirectiveValues:()=>v});var r=t("./node_modules/graphql/polyfills/find.mjs"),i=t("./node_modules/graphql/jsutils/keyMap.mjs"),o=t("./node_modules/graphql/jsutils/inspect.mjs"),a=t("./node_modules/graphql/jsutils/printPathArray.mjs"),s=t("./node_modules/graphql/error/GraphQLError.mjs"),u=t("./node_modules/graphql/language/kinds.mjs"),l=t("./node_modules/graphql/language/printer.mjs"),c=t("./node_modules/graphql/type/definition.mjs"),d=t("./node_modules/graphql/utilities/typeFromAST.mjs"),p=t("./node_modules/graphql/utilities/valueFromAST.mjs"),f=t("./node_modules/graphql/utilities/coerceInputValue.mjs");function m(e,n,t,r){var i=[],u=null==r?void 0:r.maxErrors;try{var m=function(e,n,t,r){for(var i={},u=function(u){var m=n[u],h=m.variable.name.value,v=(0,d.typeFromAST)(e,m.type);if(!(0,c.isInputType)(v)){var g=(0,l.print)(m.type);return r(new s.GraphQLError('Variable "$'.concat(h,'" expected value of type "').concat(g,'" which cannot be used as an input type.'),m.type)),"continue"}if(!y(t,h)){if(m.defaultValue)i[h]=(0,p.valueFromAST)(m.defaultValue,v);else if((0,c.isNonNullType)(v)){var T=(0,o.default)(v);r(new s.GraphQLError('Variable "$'.concat(h,'" of required type "').concat(T,'" was not provided.'),m))}return"continue"}var E=t[h];if(null===E&&(0,c.isNonNullType)(v)){var _=(0,o.default)(v);return r(new s.GraphQLError('Variable "$'.concat(h,'" of non-null type "').concat(_,'" must not be null.'),m)),"continue"}i[h]=(0,f.coerceInputValue)(E,v,(function(e,n,t){var i='Variable "$'.concat(h,'" got invalid value ')+(0,o.default)(n);e.length>0&&(i+=' at "'.concat(h).concat((0,a.default)(e),'"')),r(new s.GraphQLError(i+"; "+t.message,m,void 0,void 0,void 0,t.originalError))}))},m=0;m<n.length;m++)u(m);return i}(e,n,t,(function(e){if(null!=u&&i.length>=u)throw new s.GraphQLError("Too many errors processing variables, error limit reached. Execution aborted.");i.push(e)}));if(0===i.length)return{coerced:m}}catch(e){i.push(e)}return{errors:i}}function h(e,n,t){for(var r,a={},d=null!==(r=n.arguments)&&void 0!==r?r:[],f=(0,i.default)(d,(function(e){return e.name.value})),m=0,h=e.args;m<h.length;m++){var v=h[m],g=v.name,T=v.type,E=f[g];if(E){var _=E.value,N=_.kind===u.Kind.NULL;if(_.kind===u.Kind.VARIABLE){var b=_.name.value;if(null==t||!y(t,b)){if(void 0!==v.defaultValue)a[g]=v.defaultValue;else if((0,c.isNonNullType)(T))throw new s.GraphQLError('Argument "'.concat(g,'" of required type "').concat((0,o.default)(T),'" ')+'was provided the variable "$'.concat(b,'" which was not provided a runtime value.'),_);continue}N=null==t[b]}if(N&&(0,c.isNonNullType)(T))throw new s.GraphQLError('Argument "'.concat(g,'" of non-null type "').concat((0,o.default)(T),'" ')+"must not be null.",_);var j=(0,p.valueFromAST)(_,T,t);if(void 0===j)throw new s.GraphQLError('Argument "'.concat(g,'" has invalid value ').concat((0,l.print)(_),"."),_);a[g]=j}else if(void 0!==v.defaultValue)a[g]=v.defaultValue;else if((0,c.isNonNullType)(T))throw new s.GraphQLError('Argument "'.concat(g,'" of required type "').concat((0,o.default)(T),'" ')+"was not provided.",n)}return a}function v(e,n,t){var i=n.directives&&(0,r.default)(n.directives,(function(n){return n.name.value===e.name}));if(i)return h(e,i,t)}function y(e,n){return Object.prototype.hasOwnProperty.call(e,n)}},"./node_modules/graphql/graphql.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{graphql:()=>u,graphqlSync:()=>l});var r=t("./node_modules/graphql/jsutils/isPromise.mjs"),i=t("./node_modules/graphql/language/parser.mjs"),o=t("./node_modules/graphql/validation/validate.mjs"),a=t("./node_modules/graphql/type/validate.mjs"),s=t("./node_modules/graphql/execution/execute.mjs");function u(e,n,t,r,i,o,a,s){var u=arguments;return new Promise((function(l){return l(1===u.length?c(e):c({schema:e,source:n,rootValue:t,contextValue:r,variableValues:i,operationName:o,fieldResolver:a,typeResolver:s}))}))}function l(e,n,t,i,o,a,s,u){var l=c(1===arguments.length?e:{schema:e,source:n,rootValue:t,contextValue:i,variableValues:o,operationName:a,fieldResolver:s,typeResolver:u});if((0,r.default)(l))throw new Error("GraphQL execution failed to complete synchronously.");return l}function c(e){var n,t=e.schema,r=e.source,u=e.rootValue,l=e.contextValue,c=e.variableValues,d=e.operationName,p=e.fieldResolver,f=e.typeResolver,m=(0,a.validateSchema)(t);if(m.length>0)return{errors:m};try{n=(0,i.parse)(r)}catch(e){return{errors:[e]}}var h=(0,o.validate)(t,n);return h.length>0?{errors:h}:(0,s.execute)({schema:t,document:n,rootValue:u,contextValue:l,variableValues:c,operationName:d,fieldResolver:p,typeResolver:f})}},"./node_modules/graphql/index.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{version:()=>r.version,versionInfo:()=>r.versionInfo,graphql:()=>i.graphql,graphqlSync:()=>i.graphqlSync,GraphQLSchema:()=>o.GraphQLSchema,GraphQLDirective:()=>a.GraphQLDirective,GraphQLScalarType:()=>s.GraphQLScalarType,GraphQLObjectType:()=>s.GraphQLObjectType,GraphQLInterfaceType:()=>s.GraphQLInterfaceType,GraphQLUnionType:()=>s.GraphQLUnionType,GraphQLEnumType:()=>s.GraphQLEnumType,GraphQLInputObjectType:()=>s.GraphQLInputObjectType,GraphQLList:()=>s.GraphQLList,GraphQLNonNull:()=>s.GraphQLNonNull,specifiedScalarTypes:()=>u.specifiedScalarTypes,GraphQLInt:()=>u.GraphQLInt,GraphQLFloat:()=>u.GraphQLFloat,GraphQLString:()=>u.GraphQLString,GraphQLBoolean:()=>u.GraphQLBoolean,GraphQLID:()=>u.GraphQLID,specifiedDirectives:()=>a.specifiedDirectives,GraphQLIncludeDirective:()=>a.GraphQLIncludeDirective,GraphQLSkipDirective:()=>a.GraphQLSkipDirective,GraphQLDeprecatedDirective:()=>a.GraphQLDeprecatedDirective,GraphQLSpecifiedByDirective:()=>a.GraphQLSpecifiedByDirective,TypeKind:()=>l.TypeKind,DEFAULT_DEPRECATION_REASON:()=>a.DEFAULT_DEPRECATION_REASON,introspectionTypes:()=>l.introspectionTypes,__Schema:()=>l.__Schema,__Directive:()=>l.__Directive,__DirectiveLocation:()=>l.__DirectiveLocation,__Type:()=>l.__Type,__Field:()=>l.__Field,__InputValue:()=>l.__InputValue,__EnumValue:()=>l.__EnumValue,__TypeKind:()=>l.__TypeKind,SchemaMetaFieldDef:()=>l.SchemaMetaFieldDef,TypeMetaFieldDef:()=>l.TypeMetaFieldDef,TypeNameMetaFieldDef:()=>l.TypeNameMetaFieldDef,isSchema:()=>o.isSchema,isDirective:()=>a.isDirective,isType:()=>s.isType,isScalarType:()=>s.isScalarType,isObjectType:()=>s.isObjectType,isInterfaceType:()=>s.isInterfaceType,isUnionType:()=>s.isUnionType,isEnumType:()=>s.isEnumType,isInputObjectType:()=>s.isInputObjectType,isListType:()=>s.isListType,isNonNullType:()=>s.isNonNullType,isInputType:()=>s.isInputType,isOutputType:()=>s.isOutputType,isLeafType:()=>s.isLeafType,isCompositeType:()=>s.isCompositeType,isAbstractType:()=>s.isAbstractType,isWrappingType:()=>s.isWrappingType,isNullableType:()=>s.isNullableType,isNamedType:()=>s.isNamedType,isRequiredArgument:()=>s.isRequiredArgument,isRequiredInputField:()=>s.isRequiredInputField,isSpecifiedScalarType:()=>u.isSpecifiedScalarType,isIntrospectionType:()=>l.isIntrospectionType,isSpecifiedDirective:()=>a.isSpecifiedDirective,assertSchema:()=>o.assertSchema,assertDirective:()=>a.assertDirective,assertType:()=>s.assertType,assertScalarType:()=>s.assertScalarType,assertObjectType:()=>s.assertObjectType,assertInterfaceType:()=>s.assertInterfaceType,assertUnionType:()=>s.assertUnionType,assertEnumType:()=>s.assertEnumType,assertInputObjectType:()=>s.assertInputObjectType,assertListType:()=>s.assertListType,assertNonNullType:()=>s.assertNonNullType,assertInputType:()=>s.assertInputType,assertOutputType:()=>s.assertOutputType,assertLeafType:()=>s.assertLeafType,assertCompositeType:()=>s.assertCompositeType,assertAbstractType:()=>s.assertAbstractType,assertWrappingType:()=>s.assertWrappingType,assertNullableType:()=>s.assertNullableType,assertNamedType:()=>s.assertNamedType,getNullableType:()=>s.getNullableType,getNamedType:()=>s.getNamedType,validateSchema:()=>c.validateSchema,assertValidSchema:()=>c.assertValidSchema,Token:()=>d.Token,Source:()=>p.Source,Location:()=>d.Location,getLocation:()=>f.getLocation,printLocation:()=>m.printLocation,printSourceLocation:()=>m.printSourceLocation,Lexer:()=>h.Lexer,TokenKind:()=>v.TokenKind,parse:()=>y.parse,parseValue:()=>y.parseValue,parseType:()=>y.parseType,print:()=>g.print,visit:()=>T.visit,visitInParallel:()=>T.visitInParallel,getVisitFn:()=>T.getVisitFn,BREAK:()=>T.BREAK,Kind:()=>E.Kind,DirectiveLocation:()=>_.DirectiveLocation,isDefinitionNode:()=>N.isDefinitionNode,isExecutableDefinitionNode:()=>N.isExecutableDefinitionNode,isSelectionNode:()=>N.isSelectionNode,isValueNode:()=>N.isValueNode,isTypeNode:()=>N.isTypeNode,isTypeSystemDefinitionNode:()=>N.isTypeSystemDefinitionNode,isTypeDefinitionNode:()=>N.isTypeDefinitionNode,isTypeSystemExtensionNode:()=>N.isTypeSystemExtensionNode,isTypeExtensionNode:()=>N.isTypeExtensionNode,execute:()=>b.execute,executeSync:()=>b.executeSync,defaultFieldResolver:()=>b.defaultFieldResolver,defaultTypeResolver:()=>b.defaultTypeResolver,responsePathAsArray:()=>j.pathToArray,getDirectiveValues:()=>I.getDirectiveValues,subscribe:()=>O.subscribe,createSourceEventStream:()=>O.createSourceEventStream,validate:()=>L.validate,ValidationContext:()=>S.ValidationContext,specifiedRules:()=>D.specifiedRules,ExecutableDefinitionsRule:()=>A.ExecutableDefinitionsRule,FieldsOnCorrectTypeRule:()=>w.FieldsOnCorrectTypeRule,FragmentsOnCompositeTypesRule:()=>R.FragmentsOnCompositeTypesRule,KnownArgumentNamesRule:()=>k.KnownArgumentNamesRule,KnownDirectivesRule:()=>q.KnownDirectivesRule,KnownFragmentNamesRule:()=>x.KnownFragmentNamesRule,KnownTypeNamesRule:()=>F.KnownTypeNamesRule,LoneAnonymousOperationRule:()=>G.LoneAnonymousOperationRule,NoFragmentCyclesRule:()=>V.NoFragmentCyclesRule,NoUndefinedVariablesRule:()=>C.NoUndefinedVariablesRule,NoUnusedFragmentsRule:()=>K.NoUnusedFragmentsRule,NoUnusedVariablesRule:()=>U.NoUnusedVariablesRule,OverlappingFieldsCanBeMergedRule:()=>Q.OverlappingFieldsCanBeMergedRule,PossibleFragmentSpreadsRule:()=>P.PossibleFragmentSpreadsRule,ProvidedRequiredArgumentsRule:()=>M.ProvidedRequiredArgumentsRule,ScalarLeafsRule:()=>B.ScalarLeafsRule,SingleFieldSubscriptionsRule:()=>Y.SingleFieldSubscriptionsRule,UniqueArgumentNamesRule:()=>J.UniqueArgumentNamesRule,UniqueDirectivesPerLocationRule:()=>X.UniqueDirectivesPerLocationRule,UniqueFragmentNamesRule:()=>z.UniqueFragmentNamesRule,UniqueInputFieldNamesRule:()=>H.UniqueInputFieldNamesRule,UniqueOperationNamesRule:()=>W.UniqueOperationNamesRule,UniqueVariableNamesRule:()=>$.UniqueVariableNamesRule,ValuesOfCorrectTypeRule:()=>Z.ValuesOfCorrectTypeRule,VariablesAreInputTypesRule:()=>ee.VariablesAreInputTypesRule,VariablesInAllowedPositionRule:()=>ne.VariablesInAllowedPositionRule,LoneSchemaDefinitionRule:()=>te.LoneSchemaDefinitionRule,UniqueOperationTypesRule:()=>re.UniqueOperationTypesRule,UniqueTypeNamesRule:()=>ie.UniqueTypeNamesRule,UniqueEnumValueNamesRule:()=>oe.UniqueEnumValueNamesRule,UniqueFieldDefinitionNamesRule:()=>ae.UniqueFieldDefinitionNamesRule,UniqueDirectiveNamesRule:()=>se.UniqueDirectiveNamesRule,PossibleTypeExtensionsRule:()=>ue.PossibleTypeExtensionsRule,NoDeprecatedCustomRule:()=>le.NoDeprecatedCustomRule,NoSchemaIntrospectionCustomRule:()=>ce.NoSchemaIntrospectionCustomRule,GraphQLError:()=>de.GraphQLError,syntaxError:()=>pe.syntaxError,locatedError:()=>fe.locatedError,printError:()=>de.printError,formatError:()=>me.formatError,getIntrospectionQuery:()=>he.getIntrospectionQuery,getOperationAST:()=>ve.getOperationAST,getOperationRootType:()=>ye.getOperationRootType,introspectionFromSchema:()=>ge.introspectionFromSchema,buildClientSchema:()=>Te.buildClientSchema,buildASTSchema:()=>Ee.buildASTSchema,buildSchema:()=>Ee.buildSchema,getDescription:()=>_e.getDescription,extendSchema:()=>_e.extendSchema,lexicographicSortSchema:()=>Ne.lexicographicSortSchema,printSchema:()=>be.printSchema,printType:()=>be.printType,printIntrospectionSchema:()=>be.printIntrospectionSchema,typeFromAST:()=>je.typeFromAST,valueFromAST:()=>Ie.valueFromAST,valueFromASTUntyped:()=>Oe.valueFromASTUntyped,astFromValue:()=>Le.astFromValue,TypeInfo:()=>Se.TypeInfo,visitWithTypeInfo:()=>Se.visitWithTypeInfo,coerceInputValue:()=>De.coerceInputValue,concatAST:()=>Ae.concatAST,separateOperations:()=>we.separateOperations,stripIgnoredCharacters:()=>Re.stripIgnoredCharacters,isEqualType:()=>ke.isEqualType,isTypeSubTypeOf:()=>ke.isTypeSubTypeOf,doTypesOverlap:()=>ke.doTypesOverlap,assertValidName:()=>qe.assertValidName,isValidNameError:()=>qe.isValidNameError,BreakingChangeType:()=>xe.BreakingChangeType,DangerousChangeType:()=>xe.DangerousChangeType,findBreakingChanges:()=>xe.findBreakingChanges,findDangerousChanges:()=>xe.findDangerousChanges,findDeprecatedUsages:()=>Fe.findDeprecatedUsages});var r=t("./node_modules/graphql/version.mjs"),i=t("./node_modules/graphql/graphql.mjs"),o=t("./node_modules/graphql/type/schema.mjs"),a=t("./node_modules/graphql/type/directives.mjs"),s=t("./node_modules/graphql/type/definition.mjs"),u=t("./node_modules/graphql/type/scalars.mjs"),l=t("./node_modules/graphql/type/introspection.mjs"),c=t("./node_modules/graphql/type/validate.mjs"),d=t("./node_modules/graphql/language/ast.mjs"),p=t("./node_modules/graphql/language/source.mjs"),f=t("./node_modules/graphql/language/location.mjs"),m=t("./node_modules/graphql/language/printLocation.mjs"),h=t("./node_modules/graphql/language/lexer.mjs"),v=t("./node_modules/graphql/language/tokenKind.mjs"),y=t("./node_modules/graphql/language/parser.mjs"),g=t("./node_modules/graphql/language/printer.mjs"),T=t("./node_modules/graphql/language/visitor.mjs"),E=t("./node_modules/graphql/language/kinds.mjs"),_=t("./node_modules/graphql/language/directiveLocation.mjs"),N=t("./node_modules/graphql/language/predicates.mjs"),b=t("./node_modules/graphql/execution/execute.mjs"),j=t("./node_modules/graphql/jsutils/Path.mjs"),I=t("./node_modules/graphql/execution/values.mjs"),O=t("./node_modules/graphql/subscription/subscribe.mjs"),L=t("./node_modules/graphql/validation/validate.mjs"),S=t("./node_modules/graphql/validation/ValidationContext.mjs"),D=t("./node_modules/graphql/validation/specifiedRules.mjs"),A=t("./node_modules/graphql/validation/rules/ExecutableDefinitionsRule.mjs"),w=t("./node_modules/graphql/validation/rules/FieldsOnCorrectTypeRule.mjs"),R=t("./node_modules/graphql/validation/rules/FragmentsOnCompositeTypesRule.mjs"),k=t("./node_modules/graphql/validation/rules/KnownArgumentNamesRule.mjs"),q=t("./node_modules/graphql/validation/rules/KnownDirectivesRule.mjs"),x=t("./node_modules/graphql/validation/rules/KnownFragmentNamesRule.mjs"),F=t("./node_modules/graphql/validation/rules/KnownTypeNamesRule.mjs"),G=t("./node_modules/graphql/validation/rules/LoneAnonymousOperationRule.mjs"),V=t("./node_modules/graphql/validation/rules/NoFragmentCyclesRule.mjs"),C=t("./node_modules/graphql/validation/rules/NoUndefinedVariablesRule.mjs"),K=t("./node_modules/graphql/validation/rules/NoUnusedFragmentsRule.mjs"),U=t("./node_modules/graphql/validation/rules/NoUnusedVariablesRule.mjs"),Q=t("./node_modules/graphql/validation/rules/OverlappingFieldsCanBeMergedRule.mjs"),P=t("./node_modules/graphql/validation/rules/PossibleFragmentSpreadsRule.mjs"),M=t("./node_modules/graphql/validation/rules/ProvidedRequiredArgumentsRule.mjs"),B=t("./node_modules/graphql/validation/rules/ScalarLeafsRule.mjs"),Y=t("./node_modules/graphql/validation/rules/SingleFieldSubscriptionsRule.mjs"),J=t("./node_modules/graphql/validation/rules/UniqueArgumentNamesRule.mjs"),X=t("./node_modules/graphql/validation/rules/UniqueDirectivesPerLocationRule.mjs"),z=t("./node_modules/graphql/validation/rules/UniqueFragmentNamesRule.mjs"),H=t("./node_modules/graphql/validation/rules/UniqueInputFieldNamesRule.mjs"),W=t("./node_modules/graphql/validation/rules/UniqueOperationNamesRule.mjs"),$=t("./node_modules/graphql/validation/rules/UniqueVariableNamesRule.mjs"),Z=t("./node_modules/graphql/validation/rules/ValuesOfCorrectTypeRule.mjs"),ee=t("./node_modules/graphql/validation/rules/VariablesAreInputTypesRule.mjs"),ne=t("./node_modules/graphql/validation/rules/VariablesInAllowedPositionRule.mjs"),te=t("./node_modules/graphql/validation/rules/LoneSchemaDefinitionRule.mjs"),re=t("./node_modules/graphql/validation/rules/UniqueOperationTypesRule.mjs"),ie=t("./node_modules/graphql/validation/rules/UniqueTypeNamesRule.mjs"),oe=t("./node_modules/graphql/validation/rules/UniqueEnumValueNamesRule.mjs"),ae=t("./node_modules/graphql/validation/rules/UniqueFieldDefinitionNamesRule.mjs"),se=t("./node_modules/graphql/validation/rules/UniqueDirectiveNamesRule.mjs"),ue=t("./node_modules/graphql/validation/rules/PossibleTypeExtensionsRule.mjs"),le=t("./node_modules/graphql/validation/rules/custom/NoDeprecatedCustomRule.mjs"),ce=t("./node_modules/graphql/validation/rules/custom/NoSchemaIntrospectionCustomRule.mjs"),de=t("./node_modules/graphql/error/GraphQLError.mjs"),pe=t("./node_modules/graphql/error/syntaxError.mjs"),fe=t("./node_modules/graphql/error/locatedError.mjs"),me=t("./node_modules/graphql/error/formatError.mjs"),he=t("./node_modules/graphql/utilities/getIntrospectionQuery.mjs"),ve=t("./node_modules/graphql/utilities/getOperationAST.mjs"),ye=t("./node_modules/graphql/utilities/getOperationRootType.mjs"),ge=t("./node_modules/graphql/utilities/introspectionFromSchema.mjs"),Te=t("./node_modules/graphql/utilities/buildClientSchema.mjs"),Ee=t("./node_modules/graphql/utilities/buildASTSchema.mjs"),_e=t("./node_modules/graphql/utilities/extendSchema.mjs"),Ne=t("./node_modules/graphql/utilities/lexicographicSortSchema.mjs"),be=t("./node_modules/graphql/utilities/printSchema.mjs"),je=t("./node_modules/graphql/utilities/typeFromAST.mjs"),Ie=t("./node_modules/graphql/utilities/valueFromAST.mjs"),Oe=t("./node_modules/graphql/utilities/valueFromASTUntyped.mjs"),Le=t("./node_modules/graphql/utilities/astFromValue.mjs"),Se=t("./node_modules/graphql/utilities/TypeInfo.mjs"),De=t("./node_modules/graphql/utilities/coerceInputValue.mjs"),Ae=t("./node_modules/graphql/utilities/concatAST.mjs"),we=t("./node_modules/graphql/utilities/separateOperations.mjs"),Re=t("./node_modules/graphql/utilities/stripIgnoredCharacters.mjs"),ke=t("./node_modules/graphql/utilities/typeComparators.mjs"),qe=t("./node_modules/graphql/utilities/assertValidName.mjs"),xe=t("./node_modules/graphql/utilities/findBreakingChanges.mjs"),Fe=t("./node_modules/graphql/utilities/findDeprecatedUsages.mjs")},"./node_modules/graphql/jsutils/Path.mjs":(e,n,t)=>{"use strict";function r(e,n,t){return{prev:e,key:n,typename:t}}function i(e){for(var n=[],t=e;t;)n.push(t.key),t=t.prev;return n.reverse()}t.r(n),t.d(n,{addPath:()=>r,pathToArray:()=>i})},"./node_modules/graphql/jsutils/defineInspect.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>o});var r=t("./node_modules/graphql/jsutils/invariant.mjs"),i=t("./node_modules/graphql/jsutils/nodejsCustomInspectSymbol.mjs");function o(e){var n=e.prototype.toJSON;"function"==typeof n||(0,r.default)(0),e.prototype.inspect=n,i.default&&(e.prototype[i.default]=n)}},"./node_modules/graphql/jsutils/devAssert.mjs":(e,n,t)=>{"use strict";function r(e,n){if(!Boolean(e))throw new Error(n)}t.r(n),t.d(n,{default:()=>r})},"./node_modules/graphql/jsutils/didYouMean.mjs":(e,n,t)=>{"use strict";function r(e,n){var t="string"==typeof e?[e,n]:[void 0,e],r=t[0],i=" Did you mean ";r&&(i+=r+" ");var o=t[1].map((function(e){return'"'.concat(e,'"')}));switch(o.length){case 0:return"";case 1:return i+o[0]+"?";case 2:return i+o[0]+" or "+o[1]+"?"}var a=o.slice(0,5),s=a.pop();return i+a.join(", ")+", or "+s+"?"}t.r(n),t.d(n,{default:()=>r})},"./node_modules/graphql/jsutils/identityFunc.mjs":(e,n,t)=>{"use strict";function r(e){return e}t.r(n),t.d(n,{default:()=>r})},"./node_modules/graphql/jsutils/inspect.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>o});var r=t("./node_modules/graphql/jsutils/nodejsCustomInspectSymbol.mjs");function i(e){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}function o(e){return a(e,[])}function a(e,n){switch(i(e)){case"string":return JSON.stringify(e);case"function":return e.name?"[function ".concat(e.name,"]"):"[function]";case"object":return null===e?"null":function(e,n){if(-1!==n.indexOf(e))return"[Circular]";var t=[].concat(n,[e]),i=function(e){var n=e[String(r.default)];return"function"==typeof n?n:"function"==typeof e.inspect?e.inspect:void 0}(e);if(void 0!==i){var o=i.call(e);if(o!==e)return"string"==typeof o?o:a(o,t)}else if(Array.isArray(e))return function(e,n){if(0===e.length)return"[]";if(n.length>2)return"[Array]";for(var t=Math.min(10,e.length),r=e.length-t,i=[],o=0;o<t;++o)i.push(a(e[o],n));return 1===r?i.push("... 1 more item"):r>1&&i.push("... ".concat(r," more items")),"["+i.join(", ")+"]"}(e,t);return function(e,n){var t=Object.keys(e);return 0===t.length?"{}":n.length>2?"["+function(e){var n=Object.prototype.toString.call(e).replace(/^\[object /,"").replace(/]$/,"");if("Object"===n&&"function"==typeof e.constructor){var t=e.constructor.name;if("string"==typeof t&&""!==t)return t}return n}(e)+"]":"{ "+t.map((function(t){return t+": "+a(e[t],n)})).join(", ")+" }"}(e,t)}(e,n);default:return String(e)}}},"./node_modules/graphql/jsutils/instanceOf.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>o});var r=t("./node_modules/graphql/jsutils/inspect.mjs");function i(e){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}const o=function(e,n){if(e instanceof n)return!0;if("object"===i(e)&&null!==e){var t,o=n.prototype[Symbol.toStringTag];if(o===(Symbol.toStringTag in e?e[Symbol.toStringTag]:null===(t=e.constructor)||void 0===t?void 0:t.name)){var a=(0,r.default)(e);throw new Error("Cannot use ".concat(o,' "').concat(a,'" from another module or realm.\n\nEnsure that there is only one instance of "graphql" in the node_modules\ndirectory. If different versions of "graphql" are the dependencies of other\nrelied on modules, use "resolutions" to ensure only one version is installed.\n\nhttps://yarnpkg.com/en/docs/selective-version-resolutions\n\nDuplicate "graphql" modules cannot be used at the same time since different\nversions may have different capabilities and behavior. The data from one\nversion used in the function from another could produce confusing and\nspurious results.'))}}return!1}},"./node_modules/graphql/jsutils/invariant.mjs":(e,n,t)=>{"use strict";function r(e,n){if(!Boolean(e))throw new Error(null!=n?n:"Unexpected invariant triggered.")}t.r(n),t.d(n,{default:()=>r})},"./node_modules/graphql/jsutils/isAsyncIterable.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>i});var r=t("./node_modules/graphql/polyfills/symbols.mjs");function i(e){return"function"==typeof(null==e?void 0:e[r.SYMBOL_ASYNC_ITERATOR])}},"./node_modules/graphql/jsutils/isObjectLike.mjs":(e,n,t)=>{"use strict";function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}function i(e){return"object"==r(e)&&null!==e}t.r(n),t.d(n,{default:()=>i})},"./node_modules/graphql/jsutils/isPromise.mjs":(e,n,t)=>{"use strict";function r(e){return"function"==typeof(null==e?void 0:e.then)}t.r(n),t.d(n,{default:()=>r})},"./node_modules/graphql/jsutils/keyMap.mjs":(e,n,t)=>{"use strict";function r(e,n){return e.reduce((function(e,t){return e[n(t)]=t,e}),Object.create(null))}t.r(n),t.d(n,{default:()=>r})},"./node_modules/graphql/jsutils/keyValMap.mjs":(e,n,t)=>{"use strict";function r(e,n,t){return e.reduce((function(e,r){return e[n(r)]=t(r),e}),Object.create(null))}t.r(n),t.d(n,{default:()=>r})},"./node_modules/graphql/jsutils/mapValue.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>i});var r=t("./node_modules/graphql/polyfills/objectEntries.mjs");function i(e,n){for(var t=Object.create(null),i=0,o=(0,r.default)(e);i<o.length;i++){var a=o[i],s=a[0],u=a[1];t[s]=n(u,s)}return t}},"./node_modules/graphql/jsutils/memoize3.mjs":(e,n,t)=>{"use strict";function r(e){var n;return function(t,r,i){n||(n=new WeakMap);var o,a=n.get(t);if(a){if(o=a.get(r)){var s=o.get(i);if(void 0!==s)return s}}else a=new WeakMap,n.set(t,a);o||(o=new WeakMap,a.set(r,o));var u=e(t,r,i);return o.set(i,u),u}}t.r(n),t.d(n,{default:()=>r})},"./node_modules/graphql/jsutils/naturalCompare.mjs":(e,n,t)=>{"use strict";function r(e,n){for(var t=0,r=0;t<e.length&&r<n.length;){var a=e.charCodeAt(t),s=n.charCodeAt(r);if(o(a)&&o(s)){var u=0;do{++t,u=10*u+a-i,a=e.charCodeAt(t)}while(o(a)&&u>0);var l=0;do{++r,l=10*l+s-i,s=n.charCodeAt(r)}while(o(s)&&l>0);if(u<l)return-1;if(u>l)return 1}else{if(a<s)return-1;if(a>s)return 1;++t,++r}}return e.length-n.length}t.r(n),t.d(n,{default:()=>r});var i=48;function o(e){return!isNaN(e)&&i<=e&&e<=57}},"./node_modules/graphql/jsutils/nodejsCustomInspectSymbol.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>r});const r="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):void 0},"./node_modules/graphql/jsutils/printPathArray.mjs":(e,n,t)=>{"use strict";function r(e){return e.map((function(e){return"number"==typeof e?"["+e.toString()+"]":"."+e})).join("")}t.r(n),t.d(n,{default:()=>r})},"./node_modules/graphql/jsutils/promiseForObject.mjs":(e,n,t)=>{"use strict";function r(e){var n=Object.keys(e),t=n.map((function(n){return e[n]}));return Promise.all(t).then((function(e){return e.reduce((function(e,t,r){return e[n[r]]=t,e}),Object.create(null))}))}t.r(n),t.d(n,{default:()=>r})},"./node_modules/graphql/jsutils/promiseReduce.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>i});var r=t("./node_modules/graphql/jsutils/isPromise.mjs");function i(e,n,t){return e.reduce((function(e,t){return(0,r.default)(e)?e.then((function(e){return n(e,t)})):n(e,t)}),t)}},"./node_modules/graphql/jsutils/safeArrayFrom.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>o});var r=t("./node_modules/graphql/polyfills/symbols.mjs");function i(e){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}function o(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(e){return e};if(null==e||"object"!==i(e))return null;if(Array.isArray(e))return e.map(n);var t=e[r.SYMBOL_ITERATOR];if("function"==typeof t){for(var o,a=t.call(e),s=[],u=0;!(o=a.next()).done;++u)s.push(n(o.value,u));return s}var l=e.length;if("number"==typeof l&&l>=0&&l%1==0){for(var c=[],d=0;d<l;++d){if(!Object.prototype.hasOwnProperty.call(e,d))return null;c.push(n(e[String(d)],d))}return c}return null}},"./node_modules/graphql/jsutils/suggestionList.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>i});var r=t("./node_modules/graphql/jsutils/naturalCompare.mjs");function i(e,n){for(var t=Object.create(null),i=new o(e),a=Math.floor(.4*e.length)+1,s=0;s<n.length;s++){var u=n[s],l=i.measure(u,a);void 0!==l&&(t[u]=l)}return Object.keys(t).sort((function(e,n){var i=t[e]-t[n];return 0!==i?i:(0,r.default)(e,n)}))}var o=function(){function e(e){this._input=e,this._inputLowerCase=e.toLowerCase(),this._inputArray=a(this._inputLowerCase),this._rows=[new Array(e.length+1).fill(0),new Array(e.length+1).fill(0),new Array(e.length+1).fill(0)]}return e.prototype.measure=function(e,n){if(this._input===e)return 0;var t=e.toLowerCase();if(this._inputLowerCase===t)return 1;var r=a(t),i=this._inputArray;if(r.length<i.length){var o=r;r=i,i=o}var s=r.length,u=i.length;if(!(s-u>n)){for(var l=this._rows,c=0;c<=u;c++)l[0][c]=c;for(var d=1;d<=s;d++){for(var p=l[(d-1)%3],f=l[d%3],m=f[0]=d,h=1;h<=u;h++){var v=r[d-1]===i[h-1]?0:1,y=Math.min(p[h]+1,f[h-1]+1,p[h-1]+v);if(d>1&&h>1&&r[d-1]===i[h-2]&&r[d-2]===i[h-1]){var g=l[(d-2)%3][h-2];y=Math.min(y,g+1)}y<m&&(m=y),f[h]=y}if(m>n)return}var T=l[s%3][u];return T<=n?T:void 0}},e}();function a(e){for(var n=e.length,t=new Array(n),r=0;r<n;++r)t[r]=e.charCodeAt(r);return t}},"./node_modules/graphql/jsutils/toObjMap.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>i});var r=t("./node_modules/graphql/polyfills/objectEntries.mjs");function i(e){if(null===Object.getPrototypeOf(e))return e;for(var n=Object.create(null),t=0,i=(0,r.default)(e);t<i.length;t++){var o=i[t],a=o[0],s=o[1];n[a]=s}return n}},"./node_modules/graphql/language/ast.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{Location:()=>i,Token:()=>o,isNode:()=>a});var r=t("./node_modules/graphql/jsutils/defineInspect.mjs"),i=function(){function e(e,n,t){this.start=e.start,this.end=n.end,this.startToken=e,this.endToken=n,this.source=t}return e.prototype.toJSON=function(){return{start:this.start,end:this.end}},e}();(0,r.default)(i);var o=function(){function e(e,n,t,r,i,o,a){this.kind=e,this.start=n,this.end=t,this.line=r,this.column=i,this.value=a,this.prev=o,this.next=null}return e.prototype.toJSON=function(){return{kind:this.kind,value:this.value,line:this.line,column:this.column}},e}();function a(e){return null!=e&&"string"==typeof e.kind}(0,r.default)(o)},"./node_modules/graphql/language/blockString.mjs":(e,n,t)=>{"use strict";function r(e){var n=e.split(/\r\n|[\n\r]/g),t=o(e);if(0!==t)for(var r=1;r<n.length;r++)n[r]=n[r].slice(t);for(var a=0;a<n.length&&i(n[a]);)++a;for(var s=n.length;s>a&&i(n[s-1]);)--s;return n.slice(a,s).join("\n")}function i(e){for(var n=0;n<e.length;++n)if(" "!==e[n]&&"\t"!==e[n])return!1;return!0}function o(e){for(var n,t=!0,r=!0,i=0,o=null,a=0;a<e.length;++a)switch(e.charCodeAt(a)){case 13:10===e.charCodeAt(a+1)&&++a;case 10:t=!1,r=!0,i=0;break;case 9:case 32:++i;break;default:r&&!t&&(null===o||i<o)&&(o=i),r=!1}return null!==(n=o)&&void 0!==n?n:0}function a(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",t=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=-1===e.indexOf("\n"),i=" "===e[0]||"\t"===e[0],o='"'===e[e.length-1],a="\\"===e[e.length-1],s=!r||o||a||t,u="";return!s||r&&i||(u+="\n"+n),u+=n?e.replace(/\n/g,"\n"+n):e,s&&(u+="\n"),'"""'+u.replace(/"""/g,'\\"""')+'"""'}t.r(n),t.d(n,{dedentBlockStringValue:()=>r,getBlockStringIndentation:()=>o,printBlockString:()=>a})},"./node_modules/graphql/language/directiveLocation.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{DirectiveLocation:()=>r});var r=Object.freeze({QUERY:"QUERY",MUTATION:"MUTATION",SUBSCRIPTION:"SUBSCRIPTION",FIELD:"FIELD",FRAGMENT_DEFINITION:"FRAGMENT_DEFINITION",FRAGMENT_SPREAD:"FRAGMENT_SPREAD",INLINE_FRAGMENT:"INLINE_FRAGMENT",VARIABLE_DEFINITION:"VARIABLE_DEFINITION",SCHEMA:"SCHEMA",SCALAR:"SCALAR",OBJECT:"OBJECT",FIELD_DEFINITION:"FIELD_DEFINITION",ARGUMENT_DEFINITION:"ARGUMENT_DEFINITION",INTERFACE:"INTERFACE",UNION:"UNION",ENUM:"ENUM",ENUM_VALUE:"ENUM_VALUE",INPUT_OBJECT:"INPUT_OBJECT",INPUT_FIELD_DEFINITION:"INPUT_FIELD_DEFINITION"})},"./node_modules/graphql/language/kinds.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{Kind:()=>r});var r=Object.freeze({NAME:"Name",DOCUMENT:"Document",OPERATION_DEFINITION:"OperationDefinition",VARIABLE_DEFINITION:"VariableDefinition",SELECTION_SET:"SelectionSet",FIELD:"Field",ARGUMENT:"Argument",FRAGMENT_SPREAD:"FragmentSpread",INLINE_FRAGMENT:"InlineFragment",FRAGMENT_DEFINITION:"FragmentDefinition",VARIABLE:"Variable",INT:"IntValue",FLOAT:"FloatValue",STRING:"StringValue",BOOLEAN:"BooleanValue",NULL:"NullValue",ENUM:"EnumValue",LIST:"ListValue",OBJECT:"ObjectValue",OBJECT_FIELD:"ObjectField",DIRECTIVE:"Directive",NAMED_TYPE:"NamedType",LIST_TYPE:"ListType",NON_NULL_TYPE:"NonNullType",SCHEMA_DEFINITION:"SchemaDefinition",OPERATION_TYPE_DEFINITION:"OperationTypeDefinition",SCALAR_TYPE_DEFINITION:"ScalarTypeDefinition",OBJECT_TYPE_DEFINITION:"ObjectTypeDefinition",FIELD_DEFINITION:"FieldDefinition",INPUT_VALUE_DEFINITION:"InputValueDefinition",INTERFACE_TYPE_DEFINITION:"InterfaceTypeDefinition",UNION_TYPE_DEFINITION:"UnionTypeDefinition",ENUM_TYPE_DEFINITION:"EnumTypeDefinition",ENUM_VALUE_DEFINITION:"EnumValueDefinition",INPUT_OBJECT_TYPE_DEFINITION:"InputObjectTypeDefinition",DIRECTIVE_DEFINITION:"DirectiveDefinition",SCHEMA_EXTENSION:"SchemaExtension",SCALAR_TYPE_EXTENSION:"ScalarTypeExtension",OBJECT_TYPE_EXTENSION:"ObjectTypeExtension",INTERFACE_TYPE_EXTENSION:"InterfaceTypeExtension",UNION_TYPE_EXTENSION:"UnionTypeExtension",ENUM_TYPE_EXTENSION:"EnumTypeExtension",INPUT_OBJECT_TYPE_EXTENSION:"InputObjectTypeExtension"})},"./node_modules/graphql/language/lexer.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{Lexer:()=>s,isPunctuatorTokenKind:()=>u});var r=t("./node_modules/graphql/error/syntaxError.mjs"),i=t("./node_modules/graphql/language/ast.mjs"),o=t("./node_modules/graphql/language/tokenKind.mjs"),a=t("./node_modules/graphql/language/blockString.mjs"),s=function(){function e(e){var n=new i.Token(o.TokenKind.SOF,0,0,0,0,null);this.source=e,this.lastToken=n,this.token=n,this.line=1,this.lineStart=0}var n=e.prototype;return n.advance=function(){return this.lastToken=this.token,this.token=this.lookahead()},n.lookahead=function(){var e=this.token;if(e.kind!==o.TokenKind.EOF)do{var n;e=null!==(n=e.next)&&void 0!==n?n:e.next=c(this,e)}while(e.kind===o.TokenKind.COMMENT);return e},e}();function u(e){return e===o.TokenKind.BANG||e===o.TokenKind.DOLLAR||e===o.TokenKind.AMP||e===o.TokenKind.PAREN_L||e===o.TokenKind.PAREN_R||e===o.TokenKind.SPREAD||e===o.TokenKind.COLON||e===o.TokenKind.EQUALS||e===o.TokenKind.AT||e===o.TokenKind.BRACKET_L||e===o.TokenKind.BRACKET_R||e===o.TokenKind.BRACE_L||e===o.TokenKind.PIPE||e===o.TokenKind.BRACE_R}function l(e){return isNaN(e)?o.TokenKind.EOF:e<127?JSON.stringify(String.fromCharCode(e)):'"\\u'.concat(("00"+e.toString(16).toUpperCase()).slice(-4),'"')}function c(e,n){for(var t=e.source,a=t.body,s=a.length,u=n.end;u<s;){var l=a.charCodeAt(u),c=e.line,m=1+u-e.lineStart;switch(l){case 65279:case 9:case 32:case 44:++u;continue;case 10:++u,++e.line,e.lineStart=u;continue;case 13:10===a.charCodeAt(u+1)?u+=2:++u,++e.line,e.lineStart=u;continue;case 33:return new i.Token(o.TokenKind.BANG,u,u+1,c,m,n);case 35:return p(t,u,c,m,n);case 36:return new i.Token(o.TokenKind.DOLLAR,u,u+1,c,m,n);case 38:return new i.Token(o.TokenKind.AMP,u,u+1,c,m,n);case 40:return new i.Token(o.TokenKind.PAREN_L,u,u+1,c,m,n);case 41:return new i.Token(o.TokenKind.PAREN_R,u,u+1,c,m,n);case 46:if(46===a.charCodeAt(u+1)&&46===a.charCodeAt(u+2))return new i.Token(o.TokenKind.SPREAD,u,u+3,c,m,n);break;case 58:return new i.Token(o.TokenKind.COLON,u,u+1,c,m,n);case 61:return new i.Token(o.TokenKind.EQUALS,u,u+1,c,m,n);case 64:return new i.Token(o.TokenKind.AT,u,u+1,c,m,n);case 91:return new i.Token(o.TokenKind.BRACKET_L,u,u+1,c,m,n);case 93:return new i.Token(o.TokenKind.BRACKET_R,u,u+1,c,m,n);case 123:return new i.Token(o.TokenKind.BRACE_L,u,u+1,c,m,n);case 124:return new i.Token(o.TokenKind.PIPE,u,u+1,c,m,n);case 125:return new i.Token(o.TokenKind.BRACE_R,u,u+1,c,m,n);case 34:return 34===a.charCodeAt(u+1)&&34===a.charCodeAt(u+2)?v(t,u,c,m,n,e):h(t,u,c,m,n);case 45:case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:return f(t,u,l,c,m,n);case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:return g(t,u,c,m,n)}throw(0,r.syntaxError)(t,u,d(l))}var y=e.line,T=1+u-e.lineStart;return new i.Token(o.TokenKind.EOF,s,s,y,T,n)}function d(e){return e<32&&9!==e&&10!==e&&13!==e?"Cannot contain the invalid character ".concat(l(e),"."):39===e?"Unexpected single quote character ('), did you mean to use a double quote (\")?":"Cannot parse the unexpected character ".concat(l(e),".")}function p(e,n,t,r,a){var s,u=e.body,l=n;do{s=u.charCodeAt(++l)}while(!isNaN(s)&&(s>31||9===s));return new i.Token(o.TokenKind.COMMENT,n,l,t,r,a,u.slice(n+1,l))}function f(e,n,t,a,s,u){var c=e.body,d=t,p=n,f=!1;if(45===d&&(d=c.charCodeAt(++p)),48===d){if((d=c.charCodeAt(++p))>=48&&d<=57)throw(0,r.syntaxError)(e,p,"Invalid number, unexpected digit after 0: ".concat(l(d),"."))}else p=m(e,p,d),d=c.charCodeAt(p);if(46===d&&(f=!0,d=c.charCodeAt(++p),p=m(e,p,d),d=c.charCodeAt(p)),69!==d&&101!==d||(f=!0,43!==(d=c.charCodeAt(++p))&&45!==d||(d=c.charCodeAt(++p)),p=m(e,p,d),d=c.charCodeAt(p)),46===d||function(e){return 95===e||e>=65&&e<=90||e>=97&&e<=122}(d))throw(0,r.syntaxError)(e,p,"Invalid number, expected digit but got: ".concat(l(d),"."));return new i.Token(f?o.TokenKind.FLOAT:o.TokenKind.INT,n,p,a,s,u,c.slice(n,p))}function m(e,n,t){var i=e.body,o=n,a=t;if(a>=48&&a<=57){do{a=i.charCodeAt(++o)}while(a>=48&&a<=57);return o}throw(0,r.syntaxError)(e,o,"Invalid number, expected digit but got: ".concat(l(a),"."))}function h(e,n,t,a,s){for(var u,c,d,p,f=e.body,m=n+1,h=m,v=0,g="";m<f.length&&!isNaN(v=f.charCodeAt(m))&&10!==v&&13!==v;){if(34===v)return g+=f.slice(h,m),new i.Token(o.TokenKind.STRING,n,m+1,t,a,s,g);if(v<32&&9!==v)throw(0,r.syntaxError)(e,m,"Invalid character within String: ".concat(l(v),"."));if(++m,92===v){switch(g+=f.slice(h,m-1),v=f.charCodeAt(m)){case 34:g+='"';break;case 47:g+="/";break;case 92:g+="\\";break;case 98:g+="\b";break;case 102:g+="\f";break;case 110:g+="\n";break;case 114:g+="\r";break;case 116:g+="\t";break;case 117:var T=(u=f.charCodeAt(m+1),c=f.charCodeAt(m+2),d=f.charCodeAt(m+3),p=f.charCodeAt(m+4),y(u)<<12|y(c)<<8|y(d)<<4|y(p));if(T<0){var E=f.slice(m+1,m+5);throw(0,r.syntaxError)(e,m,"Invalid character escape sequence: \\u".concat(E,"."))}g+=String.fromCharCode(T),m+=4;break;default:throw(0,r.syntaxError)(e,m,"Invalid character escape sequence: \\".concat(String.fromCharCode(v),"."))}h=++m}}throw(0,r.syntaxError)(e,m,"Unterminated string.")}function v(e,n,t,s,u,c){for(var d=e.body,p=n+3,f=p,m=0,h="";p<d.length&&!isNaN(m=d.charCodeAt(p));){if(34===m&&34===d.charCodeAt(p+1)&&34===d.charCodeAt(p+2))return h+=d.slice(f,p),new i.Token(o.TokenKind.BLOCK_STRING,n,p+3,t,s,u,(0,a.dedentBlockStringValue)(h));if(m<32&&9!==m&&10!==m&&13!==m)throw(0,r.syntaxError)(e,p,"Invalid character within String: ".concat(l(m),"."));10===m?(++p,++c.line,c.lineStart=p):13===m?(10===d.charCodeAt(p+1)?p+=2:++p,++c.line,c.lineStart=p):92===m&&34===d.charCodeAt(p+1)&&34===d.charCodeAt(p+2)&&34===d.charCodeAt(p+3)?(h+=d.slice(f,p)+'"""',f=p+=4):++p}throw(0,r.syntaxError)(e,p,"Unterminated string.")}function y(e){return e>=48&&e<=57?e-48:e>=65&&e<=70?e-55:e>=97&&e<=102?e-87:-1}function g(e,n,t,r,a){for(var s=e.body,u=s.length,l=n+1,c=0;l!==u&&!isNaN(c=s.charCodeAt(l))&&(95===c||c>=48&&c<=57||c>=65&&c<=90||c>=97&&c<=122);)++l;return new i.Token(o.TokenKind.NAME,n,l,t,r,a,s.slice(n,l))}},"./node_modules/graphql/language/location.mjs":(e,n,t)=>{"use strict";function r(e,n){for(var t,r=/\r\n|[\n\r]/g,i=1,o=n+1;(t=r.exec(e.body))&&t.index<n;)i+=1,o=n+1-(t.index+t[0].length);return{line:i,column:o}}t.r(n),t.d(n,{getLocation:()=>r})},"./node_modules/graphql/language/parser.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{parse:()=>c,parseValue:()=>d,parseType:()=>p,Parser:()=>f});var r=t("./node_modules/graphql/error/syntaxError.mjs"),i=t("./node_modules/graphql/language/kinds.mjs"),o=t("./node_modules/graphql/language/ast.mjs"),a=t("./node_modules/graphql/language/tokenKind.mjs"),s=t("./node_modules/graphql/language/source.mjs"),u=t("./node_modules/graphql/language/directiveLocation.mjs"),l=t("./node_modules/graphql/language/lexer.mjs");function c(e,n){return new f(e,n).parseDocument()}function d(e,n){var t=new f(e,n);t.expectToken(a.TokenKind.SOF);var r=t.parseValueLiteral(!1);return t.expectToken(a.TokenKind.EOF),r}function p(e,n){var t=new f(e,n);t.expectToken(a.TokenKind.SOF);var r=t.parseTypeReference();return t.expectToken(a.TokenKind.EOF),r}var f=function(){function e(e,n){var t=(0,s.isSource)(e)?e:new s.Source(e);this._lexer=new l.Lexer(t),this._options=n}var n=e.prototype;return n.parseName=function(){var e=this.expectToken(a.TokenKind.NAME);return{kind:i.Kind.NAME,value:e.value,loc:this.loc(e)}},n.parseDocument=function(){var e=this._lexer.token;return{kind:i.Kind.DOCUMENT,definitions:this.many(a.TokenKind.SOF,this.parseDefinition,a.TokenKind.EOF),loc:this.loc(e)}},n.parseDefinition=function(){if(this.peek(a.TokenKind.NAME))switch(this._lexer.token.value){case"query":case"mutation":case"subscription":return this.parseOperationDefinition();case"fragment":return this.parseFragmentDefinition();case"schema":case"scalar":case"type":case"interface":case"union":case"enum":case"input":case"directive":return this.parseTypeSystemDefinition();case"extend":return this.parseTypeSystemExtension()}else{if(this.peek(a.TokenKind.BRACE_L))return this.parseOperationDefinition();if(this.peekDescription())return this.parseTypeSystemDefinition()}throw this.unexpected()},n.parseOperationDefinition=function(){var e=this._lexer.token;if(this.peek(a.TokenKind.BRACE_L))return{kind:i.Kind.OPERATION_DEFINITION,operation:"query",name:void 0,variableDefinitions:[],directives:[],selectionSet:this.parseSelectionSet(),loc:this.loc(e)};var n,t=this.parseOperationType();return this.peek(a.TokenKind.NAME)&&(n=this.parseName()),{kind:i.Kind.OPERATION_DEFINITION,operation:t,name:n,variableDefinitions:this.parseVariableDefinitions(),directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet(),loc:this.loc(e)}},n.parseOperationType=function(){var e=this.expectToken(a.TokenKind.NAME);switch(e.value){case"query":return"query";case"mutation":return"mutation";case"subscription":return"subscription"}throw this.unexpected(e)},n.parseVariableDefinitions=function(){return this.optionalMany(a.TokenKind.PAREN_L,this.parseVariableDefinition,a.TokenKind.PAREN_R)},n.parseVariableDefinition=function(){var e=this._lexer.token;return{kind:i.Kind.VARIABLE_DEFINITION,variable:this.parseVariable(),type:(this.expectToken(a.TokenKind.COLON),this.parseTypeReference()),defaultValue:this.expectOptionalToken(a.TokenKind.EQUALS)?this.parseValueLiteral(!0):void 0,directives:this.parseDirectives(!0),loc:this.loc(e)}},n.parseVariable=function(){var e=this._lexer.token;return this.expectToken(a.TokenKind.DOLLAR),{kind:i.Kind.VARIABLE,name:this.parseName(),loc:this.loc(e)}},n.parseSelectionSet=function(){var e=this._lexer.token;return{kind:i.Kind.SELECTION_SET,selections:this.many(a.TokenKind.BRACE_L,this.parseSelection,a.TokenKind.BRACE_R),loc:this.loc(e)}},n.parseSelection=function(){return this.peek(a.TokenKind.SPREAD)?this.parseFragment():this.parseField()},n.parseField=function(){var e,n,t=this._lexer.token,r=this.parseName();return this.expectOptionalToken(a.TokenKind.COLON)?(e=r,n=this.parseName()):n=r,{kind:i.Kind.FIELD,alias:e,name:n,arguments:this.parseArguments(!1),directives:this.parseDirectives(!1),selectionSet:this.peek(a.TokenKind.BRACE_L)?this.parseSelectionSet():void 0,loc:this.loc(t)}},n.parseArguments=function(e){var n=e?this.parseConstArgument:this.parseArgument;return this.optionalMany(a.TokenKind.PAREN_L,n,a.TokenKind.PAREN_R)},n.parseArgument=function(){var e=this._lexer.token,n=this.parseName();return this.expectToken(a.TokenKind.COLON),{kind:i.Kind.ARGUMENT,name:n,value:this.parseValueLiteral(!1),loc:this.loc(e)}},n.parseConstArgument=function(){var e=this._lexer.token;return{kind:i.Kind.ARGUMENT,name:this.parseName(),value:(this.expectToken(a.TokenKind.COLON),this.parseValueLiteral(!0)),loc:this.loc(e)}},n.parseFragment=function(){var e=this._lexer.token;this.expectToken(a.TokenKind.SPREAD);var n=this.expectOptionalKeyword("on");return!n&&this.peek(a.TokenKind.NAME)?{kind:i.Kind.FRAGMENT_SPREAD,name:this.parseFragmentName(),directives:this.parseDirectives(!1),loc:this.loc(e)}:{kind:i.Kind.INLINE_FRAGMENT,typeCondition:n?this.parseNamedType():void 0,directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet(),loc:this.loc(e)}},n.parseFragmentDefinition=function(){var e,n=this._lexer.token;return this.expectKeyword("fragment"),!0===(null===(e=this._options)||void 0===e?void 0:e.experimentalFragmentVariables)?{kind:i.Kind.FRAGMENT_DEFINITION,name:this.parseFragmentName(),variableDefinitions:this.parseVariableDefinitions(),typeCondition:(this.expectKeyword("on"),this.parseNamedType()),directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet(),loc:this.loc(n)}:{kind:i.Kind.FRAGMENT_DEFINITION,name:this.parseFragmentName(),typeCondition:(this.expectKeyword("on"),this.parseNamedType()),directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet(),loc:this.loc(n)}},n.parseFragmentName=function(){if("on"===this._lexer.token.value)throw this.unexpected();return this.parseName()},n.parseValueLiteral=function(e){var n=this._lexer.token;switch(n.kind){case a.TokenKind.BRACKET_L:return this.parseList(e);case a.TokenKind.BRACE_L:return this.parseObject(e);case a.TokenKind.INT:return this._lexer.advance(),{kind:i.Kind.INT,value:n.value,loc:this.loc(n)};case a.TokenKind.FLOAT:return this._lexer.advance(),{kind:i.Kind.FLOAT,value:n.value,loc:this.loc(n)};case a.TokenKind.STRING:case a.TokenKind.BLOCK_STRING:return this.parseStringLiteral();case a.TokenKind.NAME:switch(this._lexer.advance(),n.value){case"true":return{kind:i.Kind.BOOLEAN,value:!0,loc:this.loc(n)};case"false":return{kind:i.Kind.BOOLEAN,value:!1,loc:this.loc(n)};case"null":return{kind:i.Kind.NULL,loc:this.loc(n)};default:return{kind:i.Kind.ENUM,value:n.value,loc:this.loc(n)}}case a.TokenKind.DOLLAR:if(!e)return this.parseVariable()}throw this.unexpected()},n.parseStringLiteral=function(){var e=this._lexer.token;return this._lexer.advance(),{kind:i.Kind.STRING,value:e.value,block:e.kind===a.TokenKind.BLOCK_STRING,loc:this.loc(e)}},n.parseList=function(e){var n=this,t=this._lexer.token;return{kind:i.Kind.LIST,values:this.any(a.TokenKind.BRACKET_L,(function(){return n.parseValueLiteral(e)}),a.TokenKind.BRACKET_R),loc:this.loc(t)}},n.parseObject=function(e){var n=this,t=this._lexer.token;return{kind:i.Kind.OBJECT,fields:this.any(a.TokenKind.BRACE_L,(function(){return n.parseObjectField(e)}),a.TokenKind.BRACE_R),loc:this.loc(t)}},n.parseObjectField=function(e){var n=this._lexer.token,t=this.parseName();return this.expectToken(a.TokenKind.COLON),{kind:i.Kind.OBJECT_FIELD,name:t,value:this.parseValueLiteral(e),loc:this.loc(n)}},n.parseDirectives=function(e){for(var n=[];this.peek(a.TokenKind.AT);)n.push(this.parseDirective(e));return n},n.parseDirective=function(e){var n=this._lexer.token;return this.expectToken(a.TokenKind.AT),{kind:i.Kind.DIRECTIVE,name:this.parseName(),arguments:this.parseArguments(e),loc:this.loc(n)}},n.parseTypeReference=function(){var e,n=this._lexer.token;return this.expectOptionalToken(a.TokenKind.BRACKET_L)?(e=this.parseTypeReference(),this.expectToken(a.TokenKind.BRACKET_R),e={kind:i.Kind.LIST_TYPE,type:e,loc:this.loc(n)}):e=this.parseNamedType(),this.expectOptionalToken(a.TokenKind.BANG)?{kind:i.Kind.NON_NULL_TYPE,type:e,loc:this.loc(n)}:e},n.parseNamedType=function(){var e=this._lexer.token;return{kind:i.Kind.NAMED_TYPE,name:this.parseName(),loc:this.loc(e)}},n.parseTypeSystemDefinition=function(){var e=this.peekDescription()?this._lexer.lookahead():this._lexer.token;if(e.kind===a.TokenKind.NAME)switch(e.value){case"schema":return this.parseSchemaDefinition();case"scalar":return this.parseScalarTypeDefinition();case"type":return this.parseObjectTypeDefinition();case"interface":return this.parseInterfaceTypeDefinition();case"union":return this.parseUnionTypeDefinition();case"enum":return this.parseEnumTypeDefinition();case"input":return this.parseInputObjectTypeDefinition();case"directive":return this.parseDirectiveDefinition()}throw this.unexpected(e)},n.peekDescription=function(){return this.peek(a.TokenKind.STRING)||this.peek(a.TokenKind.BLOCK_STRING)},n.parseDescription=function(){if(this.peekDescription())return this.parseStringLiteral()},n.parseSchemaDefinition=function(){var e=this._lexer.token,n=this.parseDescription();this.expectKeyword("schema");var t=this.parseDirectives(!0),r=this.many(a.TokenKind.BRACE_L,this.parseOperationTypeDefinition,a.TokenKind.BRACE_R);return{kind:i.Kind.SCHEMA_DEFINITION,description:n,directives:t,operationTypes:r,loc:this.loc(e)}},n.parseOperationTypeDefinition=function(){var e=this._lexer.token,n=this.parseOperationType();this.expectToken(a.TokenKind.COLON);var t=this.parseNamedType();return{kind:i.Kind.OPERATION_TYPE_DEFINITION,operation:n,type:t,loc:this.loc(e)}},n.parseScalarTypeDefinition=function(){var e=this._lexer.token,n=this.parseDescription();this.expectKeyword("scalar");var t=this.parseName(),r=this.parseDirectives(!0);return{kind:i.Kind.SCALAR_TYPE_DEFINITION,description:n,name:t,directives:r,loc:this.loc(e)}},n.parseObjectTypeDefinition=function(){var e=this._lexer.token,n=this.parseDescription();this.expectKeyword("type");var t=this.parseName(),r=this.parseImplementsInterfaces(),o=this.parseDirectives(!0),a=this.parseFieldsDefinition();return{kind:i.Kind.OBJECT_TYPE_DEFINITION,description:n,name:t,interfaces:r,directives:o,fields:a,loc:this.loc(e)}},n.parseImplementsInterfaces=function(){var e;if(!this.expectOptionalKeyword("implements"))return[];if(!0===(null===(e=this._options)||void 0===e?void 0:e.allowLegacySDLImplementsInterfaces)){var n=[];this.expectOptionalToken(a.TokenKind.AMP);do{n.push(this.parseNamedType())}while(this.expectOptionalToken(a.TokenKind.AMP)||this.peek(a.TokenKind.NAME));return n}return this.delimitedMany(a.TokenKind.AMP,this.parseNamedType)},n.parseFieldsDefinition=function(){var e;return!0===(null===(e=this._options)||void 0===e?void 0:e.allowLegacySDLEmptyFields)&&this.peek(a.TokenKind.BRACE_L)&&this._lexer.lookahead().kind===a.TokenKind.BRACE_R?(this._lexer.advance(),this._lexer.advance(),[]):this.optionalMany(a.TokenKind.BRACE_L,this.parseFieldDefinition,a.TokenKind.BRACE_R)},n.parseFieldDefinition=function(){var e=this._lexer.token,n=this.parseDescription(),t=this.parseName(),r=this.parseArgumentDefs();this.expectToken(a.TokenKind.COLON);var o=this.parseTypeReference(),s=this.parseDirectives(!0);return{kind:i.Kind.FIELD_DEFINITION,description:n,name:t,arguments:r,type:o,directives:s,loc:this.loc(e)}},n.parseArgumentDefs=function(){return this.optionalMany(a.TokenKind.PAREN_L,this.parseInputValueDef,a.TokenKind.PAREN_R)},n.parseInputValueDef=function(){var e=this._lexer.token,n=this.parseDescription(),t=this.parseName();this.expectToken(a.TokenKind.COLON);var r,o=this.parseTypeReference();this.expectOptionalToken(a.TokenKind.EQUALS)&&(r=this.parseValueLiteral(!0));var s=this.parseDirectives(!0);return{kind:i.Kind.INPUT_VALUE_DEFINITION,description:n,name:t,type:o,defaultValue:r,directives:s,loc:this.loc(e)}},n.parseInterfaceTypeDefinition=function(){var e=this._lexer.token,n=this.parseDescription();this.expectKeyword("interface");var t=this.parseName(),r=this.parseImplementsInterfaces(),o=this.parseDirectives(!0),a=this.parseFieldsDefinition();return{kind:i.Kind.INTERFACE_TYPE_DEFINITION,description:n,name:t,interfaces:r,directives:o,fields:a,loc:this.loc(e)}},n.parseUnionTypeDefinition=function(){var e=this._lexer.token,n=this.parseDescription();this.expectKeyword("union");var t=this.parseName(),r=this.parseDirectives(!0),o=this.parseUnionMemberTypes();return{kind:i.Kind.UNION_TYPE_DEFINITION,description:n,name:t,directives:r,types:o,loc:this.loc(e)}},n.parseUnionMemberTypes=function(){return this.expectOptionalToken(a.TokenKind.EQUALS)?this.delimitedMany(a.TokenKind.PIPE,this.parseNamedType):[]},n.parseEnumTypeDefinition=function(){var e=this._lexer.token,n=this.parseDescription();this.expectKeyword("enum");var t=this.parseName(),r=this.parseDirectives(!0),o=this.parseEnumValuesDefinition();return{kind:i.Kind.ENUM_TYPE_DEFINITION,description:n,name:t,directives:r,values:o,loc:this.loc(e)}},n.parseEnumValuesDefinition=function(){return this.optionalMany(a.TokenKind.BRACE_L,this.parseEnumValueDefinition,a.TokenKind.BRACE_R)},n.parseEnumValueDefinition=function(){var e=this._lexer.token,n=this.parseDescription(),t=this.parseName(),r=this.parseDirectives(!0);return{kind:i.Kind.ENUM_VALUE_DEFINITION,description:n,name:t,directives:r,loc:this.loc(e)}},n.parseInputObjectTypeDefinition=function(){var e=this._lexer.token,n=this.parseDescription();this.expectKeyword("input");var t=this.parseName(),r=this.parseDirectives(!0),o=this.parseInputFieldsDefinition();return{kind:i.Kind.INPUT_OBJECT_TYPE_DEFINITION,description:n,name:t,directives:r,fields:o,loc:this.loc(e)}},n.parseInputFieldsDefinition=function(){return this.optionalMany(a.TokenKind.BRACE_L,this.parseInputValueDef,a.TokenKind.BRACE_R)},n.parseTypeSystemExtension=function(){var e=this._lexer.lookahead();if(e.kind===a.TokenKind.NAME)switch(e.value){case"schema":return this.parseSchemaExtension();case"scalar":return this.parseScalarTypeExtension();case"type":return this.parseObjectTypeExtension();case"interface":return this.parseInterfaceTypeExtension();case"union":return this.parseUnionTypeExtension();case"enum":return this.parseEnumTypeExtension();case"input":return this.parseInputObjectTypeExtension()}throw this.unexpected(e)},n.parseSchemaExtension=function(){var e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("schema");var n=this.parseDirectives(!0),t=this.optionalMany(a.TokenKind.BRACE_L,this.parseOperationTypeDefinition,a.TokenKind.BRACE_R);if(0===n.length&&0===t.length)throw this.unexpected();return{kind:i.Kind.SCHEMA_EXTENSION,directives:n,operationTypes:t,loc:this.loc(e)}},n.parseScalarTypeExtension=function(){var e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("scalar");var n=this.parseName(),t=this.parseDirectives(!0);if(0===t.length)throw this.unexpected();return{kind:i.Kind.SCALAR_TYPE_EXTENSION,name:n,directives:t,loc:this.loc(e)}},n.parseObjectTypeExtension=function(){var e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("type");var n=this.parseName(),t=this.parseImplementsInterfaces(),r=this.parseDirectives(!0),o=this.parseFieldsDefinition();if(0===t.length&&0===r.length&&0===o.length)throw this.unexpected();return{kind:i.Kind.OBJECT_TYPE_EXTENSION,name:n,interfaces:t,directives:r,fields:o,loc:this.loc(e)}},n.parseInterfaceTypeExtension=function(){var e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("interface");var n=this.parseName(),t=this.parseImplementsInterfaces(),r=this.parseDirectives(!0),o=this.parseFieldsDefinition();if(0===t.length&&0===r.length&&0===o.length)throw this.unexpected();return{kind:i.Kind.INTERFACE_TYPE_EXTENSION,name:n,interfaces:t,directives:r,fields:o,loc:this.loc(e)}},n.parseUnionTypeExtension=function(){var e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("union");var n=this.parseName(),t=this.parseDirectives(!0),r=this.parseUnionMemberTypes();if(0===t.length&&0===r.length)throw this.unexpected();return{kind:i.Kind.UNION_TYPE_EXTENSION,name:n,directives:t,types:r,loc:this.loc(e)}},n.parseEnumTypeExtension=function(){var e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("enum");var n=this.parseName(),t=this.parseDirectives(!0),r=this.parseEnumValuesDefinition();if(0===t.length&&0===r.length)throw this.unexpected();return{kind:i.Kind.ENUM_TYPE_EXTENSION,name:n,directives:t,values:r,loc:this.loc(e)}},n.parseInputObjectTypeExtension=function(){var e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("input");var n=this.parseName(),t=this.parseDirectives(!0),r=this.parseInputFieldsDefinition();if(0===t.length&&0===r.length)throw this.unexpected();return{kind:i.Kind.INPUT_OBJECT_TYPE_EXTENSION,name:n,directives:t,fields:r,loc:this.loc(e)}},n.parseDirectiveDefinition=function(){var e=this._lexer.token,n=this.parseDescription();this.expectKeyword("directive"),this.expectToken(a.TokenKind.AT);var t=this.parseName(),r=this.parseArgumentDefs(),o=this.expectOptionalKeyword("repeatable");this.expectKeyword("on");var s=this.parseDirectiveLocations();return{kind:i.Kind.DIRECTIVE_DEFINITION,description:n,name:t,arguments:r,repeatable:o,locations:s,loc:this.loc(e)}},n.parseDirectiveLocations=function(){return this.delimitedMany(a.TokenKind.PIPE,this.parseDirectiveLocation)},n.parseDirectiveLocation=function(){var e=this._lexer.token,n=this.parseName();if(void 0!==u.DirectiveLocation[n.value])return n;throw this.unexpected(e)},n.loc=function(e){var n;if(!0!==(null===(n=this._options)||void 0===n?void 0:n.noLocation))return new o.Location(e,this._lexer.lastToken,this._lexer.source)},n.peek=function(e){return this._lexer.token.kind===e},n.expectToken=function(e){var n=this._lexer.token;if(n.kind===e)return this._lexer.advance(),n;throw(0,r.syntaxError)(this._lexer.source,n.start,"Expected ".concat(h(e),", found ").concat(m(n),"."))},n.expectOptionalToken=function(e){var n=this._lexer.token;if(n.kind===e)return this._lexer.advance(),n},n.expectKeyword=function(e){var n=this._lexer.token;if(n.kind!==a.TokenKind.NAME||n.value!==e)throw(0,r.syntaxError)(this._lexer.source,n.start,'Expected "'.concat(e,'", found ').concat(m(n),"."));this._lexer.advance()},n.expectOptionalKeyword=function(e){var n=this._lexer.token;return n.kind===a.TokenKind.NAME&&n.value===e&&(this._lexer.advance(),!0)},n.unexpected=function(e){var n=null!=e?e:this._lexer.token;return(0,r.syntaxError)(this._lexer.source,n.start,"Unexpected ".concat(m(n),"."))},n.any=function(e,n,t){this.expectToken(e);for(var r=[];!this.expectOptionalToken(t);)r.push(n.call(this));return r},n.optionalMany=function(e,n,t){if(this.expectOptionalToken(e)){var r=[];do{r.push(n.call(this))}while(!this.expectOptionalToken(t));return r}return[]},n.many=function(e,n,t){this.expectToken(e);var r=[];do{r.push(n.call(this))}while(!this.expectOptionalToken(t));return r},n.delimitedMany=function(e,n){this.expectOptionalToken(e);var t=[];do{t.push(n.call(this))}while(this.expectOptionalToken(e));return t},e}();function m(e){var n=e.value;return h(e.kind)+(null!=n?' "'.concat(n,'"'):"")}function h(e){return(0,l.isPunctuatorTokenKind)(e)?'"'.concat(e,'"'):e}},"./node_modules/graphql/language/predicates.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{isDefinitionNode:()=>i,isExecutableDefinitionNode:()=>o,isSelectionNode:()=>a,isValueNode:()=>s,isTypeNode:()=>u,isTypeSystemDefinitionNode:()=>l,isTypeDefinitionNode:()=>c,isTypeSystemExtensionNode:()=>d,isTypeExtensionNode:()=>p});var r=t("./node_modules/graphql/language/kinds.mjs");function i(e){return o(e)||l(e)||d(e)}function o(e){return e.kind===r.Kind.OPERATION_DEFINITION||e.kind===r.Kind.FRAGMENT_DEFINITION}function a(e){return e.kind===r.Kind.FIELD||e.kind===r.Kind.FRAGMENT_SPREAD||e.kind===r.Kind.INLINE_FRAGMENT}function s(e){return e.kind===r.Kind.VARIABLE||e.kind===r.Kind.INT||e.kind===r.Kind.FLOAT||e.kind===r.Kind.STRING||e.kind===r.Kind.BOOLEAN||e.kind===r.Kind.NULL||e.kind===r.Kind.ENUM||e.kind===r.Kind.LIST||e.kind===r.Kind.OBJECT}function u(e){return e.kind===r.Kind.NAMED_TYPE||e.kind===r.Kind.LIST_TYPE||e.kind===r.Kind.NON_NULL_TYPE}function l(e){return e.kind===r.Kind.SCHEMA_DEFINITION||c(e)||e.kind===r.Kind.DIRECTIVE_DEFINITION}function c(e){return e.kind===r.Kind.SCALAR_TYPE_DEFINITION||e.kind===r.Kind.OBJECT_TYPE_DEFINITION||e.kind===r.Kind.INTERFACE_TYPE_DEFINITION||e.kind===r.Kind.UNION_TYPE_DEFINITION||e.kind===r.Kind.ENUM_TYPE_DEFINITION||e.kind===r.Kind.INPUT_OBJECT_TYPE_DEFINITION}function d(e){return e.kind===r.Kind.SCHEMA_EXTENSION||p(e)}function p(e){return e.kind===r.Kind.SCALAR_TYPE_EXTENSION||e.kind===r.Kind.OBJECT_TYPE_EXTENSION||e.kind===r.Kind.INTERFACE_TYPE_EXTENSION||e.kind===r.Kind.UNION_TYPE_EXTENSION||e.kind===r.Kind.ENUM_TYPE_EXTENSION||e.kind===r.Kind.INPUT_OBJECT_TYPE_EXTENSION}},"./node_modules/graphql/language/printLocation.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{printLocation:()=>i,printSourceLocation:()=>o});var r=t("./node_modules/graphql/language/location.mjs");function i(e){return o(e.source,(0,r.getLocation)(e.source,e.start))}function o(e,n){var t=e.locationOffset.column-1,r=s(t)+e.body,i=n.line-1,o=e.locationOffset.line-1,u=n.line+o,l=1===n.line?t:0,c=n.column+l,d="".concat(e.name,":").concat(u,":").concat(c,"\n"),p=r.split(/\r\n|[\n\r]/g),f=p[i];if(f.length>120){for(var m=Math.floor(c/80),h=c%80,v=[],y=0;y<f.length;y+=80)v.push(f.slice(y,y+80));return d+a([["".concat(u),v[0]]].concat(v.slice(1,m+1).map((function(e){return["",e]})),[[" ",s(h-1)+"^"],["",v[m+1]]]))}return d+a([["".concat(u-1),p[i-1]],["".concat(u),f],["",s(c-1)+"^"],["".concat(u+1),p[i+1]]])}function a(e){var n=e.filter((function(e){return e[0],void 0!==e[1]})),t=Math.max.apply(Math,n.map((function(e){return e[0].length})));return n.map((function(e){var n,r=e[0],i=e[1];return s(t-(n=r).length)+n+(i?" | "+i:" |")})).join("\n")}function s(e){return Array(e+1).join(" ")}},"./node_modules/graphql/language/printer.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{print:()=>o});var r=t("./node_modules/graphql/language/visitor.mjs"),i=t("./node_modules/graphql/language/blockString.mjs");function o(e){return(0,r.visit)(e,{leave:a})}var a={Name:function(e){return e.value},Variable:function(e){return"$"+e.name},Document:function(e){return u(e.definitions,"\n\n")+"\n"},OperationDefinition:function(e){var n=e.operation,t=e.name,r=c("(",u(e.variableDefinitions,", "),")"),i=u(e.directives," "),o=e.selectionSet;return t||i||r||"query"!==n?u([n,u([t,r]),i,o]," "):o},VariableDefinition:function(e){var n=e.variable,t=e.type,r=e.defaultValue,i=e.directives;return n+": "+t+c(" = ",r)+c(" ",u(i," "))},SelectionSet:function(e){return l(e.selections)},Field:function(e){var n=e.alias,t=e.name,r=e.arguments,i=e.directives,o=e.selectionSet,a=c("",n,": ")+t,s=a+c("(",u(r,", "),")");return s.length>80&&(s=a+c("(\n",d(u(r,"\n")),"\n)")),u([s,u(i," "),o]," ")},Argument:function(e){return e.name+": "+e.value},FragmentSpread:function(e){return"..."+e.name+c(" ",u(e.directives," "))},InlineFragment:function(e){var n=e.typeCondition,t=e.directives,r=e.selectionSet;return u(["...",c("on ",n),u(t," "),r]," ")},FragmentDefinition:function(e){var n=e.name,t=e.typeCondition,r=e.variableDefinitions,i=e.directives,o=e.selectionSet;return"fragment ".concat(n).concat(c("(",u(r,", "),")")," ")+"on ".concat(t," ").concat(c("",u(i," ")," "))+o},IntValue:function(e){return e.value},FloatValue:function(e){return e.value},StringValue:function(e,n){var t=e.value;return e.block?(0,i.printBlockString)(t,"description"===n?"":"  "):JSON.stringify(t)},BooleanValue:function(e){return e.value?"true":"false"},NullValue:function(){return"null"},EnumValue:function(e){return e.value},ListValue:function(e){return"["+u(e.values,", ")+"]"},ObjectValue:function(e){return"{"+u(e.fields,", ")+"}"},ObjectField:function(e){return e.name+": "+e.value},Directive:function(e){return"@"+e.name+c("(",u(e.arguments,", "),")")},NamedType:function(e){return e.name},ListType:function(e){return"["+e.type+"]"},NonNullType:function(e){return e.type+"!"},SchemaDefinition:s((function(e){var n=e.directives,t=e.operationTypes;return u(["schema",u(n," "),l(t)]," ")})),OperationTypeDefinition:function(e){return e.operation+": "+e.type},ScalarTypeDefinition:s((function(e){return u(["scalar",e.name,u(e.directives," ")]," ")})),ObjectTypeDefinition:s((function(e){var n=e.name,t=e.interfaces,r=e.directives,i=e.fields;return u(["type",n,c("implements ",u(t," & ")),u(r," "),l(i)]," ")})),FieldDefinition:s((function(e){var n=e.name,t=e.arguments,r=e.type,i=e.directives;return n+(f(t)?c("(\n",d(u(t,"\n")),"\n)"):c("(",u(t,", "),")"))+": "+r+c(" ",u(i," "))})),InputValueDefinition:s((function(e){var n=e.name,t=e.type,r=e.defaultValue,i=e.directives;return u([n+": "+t,c("= ",r),u(i," ")]," ")})),InterfaceTypeDefinition:s((function(e){var n=e.name,t=e.interfaces,r=e.directives,i=e.fields;return u(["interface",n,c("implements ",u(t," & ")),u(r," "),l(i)]," ")})),UnionTypeDefinition:s((function(e){var n=e.name,t=e.directives,r=e.types;return u(["union",n,u(t," "),r&&0!==r.length?"= "+u(r," | "):""]," ")})),EnumTypeDefinition:s((function(e){var n=e.name,t=e.directives,r=e.values;return u(["enum",n,u(t," "),l(r)]," ")})),EnumValueDefinition:s((function(e){return u([e.name,u(e.directives," ")]," ")})),InputObjectTypeDefinition:s((function(e){var n=e.name,t=e.directives,r=e.fields;return u(["input",n,u(t," "),l(r)]," ")})),DirectiveDefinition:s((function(e){var n=e.name,t=e.arguments,r=e.repeatable,i=e.locations;return"directive @"+n+(f(t)?c("(\n",d(u(t,"\n")),"\n)"):c("(",u(t,", "),")"))+(r?" repeatable":"")+" on "+u(i," | ")})),SchemaExtension:function(e){var n=e.directives,t=e.operationTypes;return u(["extend schema",u(n," "),l(t)]," ")},ScalarTypeExtension:function(e){return u(["extend scalar",e.name,u(e.directives," ")]," ")},ObjectTypeExtension:function(e){var n=e.name,t=e.interfaces,r=e.directives,i=e.fields;return u(["extend type",n,c("implements ",u(t," & ")),u(r," "),l(i)]," ")},InterfaceTypeExtension:function(e){var n=e.name,t=e.interfaces,r=e.directives,i=e.fields;return u(["extend interface",n,c("implements ",u(t," & ")),u(r," "),l(i)]," ")},UnionTypeExtension:function(e){var n=e.name,t=e.directives,r=e.types;return u(["extend union",n,u(t," "),r&&0!==r.length?"= "+u(r," | "):""]," ")},EnumTypeExtension:function(e){var n=e.name,t=e.directives,r=e.values;return u(["extend enum",n,u(t," "),l(r)]," ")},InputObjectTypeExtension:function(e){var n=e.name,t=e.directives,r=e.fields;return u(["extend input",n,u(t," "),l(r)]," ")}};function s(e){return function(n){return u([n.description,e(n)],"\n")}}function u(e){var n,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return null!==(n=null==e?void 0:e.filter((function(e){return e})).join(t))&&void 0!==n?n:""}function l(e){return c("{\n",d(u(e,"\n")),"\n}")}function c(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";return null!=n&&""!==n?e+n+t:""}function d(e){return c("  ",e.replace(/\n/g,"\n  "))}function p(e){return-1!==e.indexOf("\n")}function f(e){return null!=e&&e.some(p)}},"./node_modules/graphql/language/source.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{Source:()=>u,isSource:()=>l});var r=t("./node_modules/graphql/polyfills/symbols.mjs"),i=t("./node_modules/graphql/jsutils/inspect.mjs"),o=t("./node_modules/graphql/jsutils/devAssert.mjs"),a=t("./node_modules/graphql/jsutils/instanceOf.mjs");function s(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var u=function(){function e(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"GraphQL request",t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{line:1,column:1};"string"==typeof e||(0,o.default)(0,"Body must be a string. Received: ".concat((0,i.default)(e),".")),this.body=e,this.name=n,this.locationOffset=t,this.locationOffset.line>0||(0,o.default)(0,"line in locationOffset is 1-indexed and must be positive."),this.locationOffset.column>0||(0,o.default)(0,"column in locationOffset is 1-indexed and must be positive.")}var n,t;return n=e,(t=[{key:r.SYMBOL_TO_STRING_TAG,get:function(){return"Source"}}])&&s(n.prototype,t),e}();function l(e){return(0,a.default)(e,u)}},"./node_modules/graphql/language/tokenKind.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{TokenKind:()=>r});var r=Object.freeze({SOF:"<SOF>",EOF:"<EOF>",BANG:"!",DOLLAR:"$",AMP:"&",PAREN_L:"(",PAREN_R:")",SPREAD:"...",COLON:":",EQUALS:"=",AT:"@",BRACKET_L:"[",BRACKET_R:"]",BRACE_L:"{",PIPE:"|",BRACE_R:"}",NAME:"Name",INT:"Int",FLOAT:"Float",STRING:"String",BLOCK_STRING:"BlockString",COMMENT:"Comment"})},"./node_modules/graphql/language/visitor.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{QueryDocumentKeys:()=>o,BREAK:()=>a,visit:()=>s,visitInParallel:()=>u,getVisitFn:()=>l});var r=t("./node_modules/graphql/jsutils/inspect.mjs"),i=t("./node_modules/graphql/language/ast.mjs"),o={Name:[],Document:["definitions"],OperationDefinition:["name","variableDefinitions","directives","selectionSet"],VariableDefinition:["variable","type","defaultValue","directives"],Variable:["name"],SelectionSet:["selections"],Field:["alias","name","arguments","directives","selectionSet"],Argument:["name","value"],FragmentSpread:["name","directives"],InlineFragment:["typeCondition","directives","selectionSet"],FragmentDefinition:["name","variableDefinitions","typeCondition","directives","selectionSet"],IntValue:[],FloatValue:[],StringValue:[],BooleanValue:[],NullValue:[],EnumValue:[],ListValue:["values"],ObjectValue:["fields"],ObjectField:["name","value"],Directive:["name","arguments"],NamedType:["name"],ListType:["type"],NonNullType:["type"],SchemaDefinition:["description","directives","operationTypes"],OperationTypeDefinition:["type"],ScalarTypeDefinition:["description","name","directives"],ObjectTypeDefinition:["description","name","interfaces","directives","fields"],FieldDefinition:["description","name","arguments","type","directives"],InputValueDefinition:["description","name","type","defaultValue","directives"],InterfaceTypeDefinition:["description","name","interfaces","directives","fields"],UnionTypeDefinition:["description","name","directives","types"],EnumTypeDefinition:["description","name","directives","values"],EnumValueDefinition:["description","name","directives"],InputObjectTypeDefinition:["description","name","directives","fields"],DirectiveDefinition:["description","name","arguments","locations"],SchemaExtension:["directives","operationTypes"],ScalarTypeExtension:["name","directives"],ObjectTypeExtension:["name","interfaces","directives","fields"],InterfaceTypeExtension:["name","interfaces","directives","fields"],UnionTypeExtension:["name","directives","types"],EnumTypeExtension:["name","directives","values"],InputObjectTypeExtension:["name","directives","fields"]},a=Object.freeze({});function s(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:o,s=void 0,u=Array.isArray(e),c=[e],d=-1,p=[],f=void 0,m=void 0,h=void 0,v=[],y=[],g=e;do{var T=++d===c.length,E=T&&0!==p.length;if(T){if(m=0===y.length?void 0:v[v.length-1],f=h,h=y.pop(),E){if(u)f=f.slice();else{for(var _={},N=0,b=Object.keys(f);N<b.length;N++){var j=b[N];_[j]=f[j]}f=_}for(var I=0,O=0;O<p.length;O++){var L=p[O][0],S=p[O][1];u&&(L-=I),u&&null===S?(f.splice(L,1),I++):f[L]=S}}d=s.index,c=s.keys,p=s.edits,u=s.inArray,s=s.prev}else{if(m=h?u?d:c[d]:void 0,null==(f=h?h[m]:g))continue;h&&v.push(m)}var D,A=void 0;if(!Array.isArray(f)){if(!(0,i.isNode)(f))throw new Error("Invalid AST Node: ".concat((0,r.default)(f),"."));var w=l(n,f.kind,T);if(w){if((A=w.call(n,f,m,h,v,y))===a)break;if(!1===A){if(!T){v.pop();continue}}else if(void 0!==A&&(p.push([m,A]),!T)){if(!(0,i.isNode)(A)){v.pop();continue}f=A}}}void 0===A&&E&&p.push([m,f]),T?v.pop():(s={inArray:u,index:d,keys:c,edits:p,prev:s},c=(u=Array.isArray(f))?f:null!==(D=t[f.kind])&&void 0!==D?D:[],d=-1,p=[],h&&y.push(h),h=f)}while(void 0!==s);return 0!==p.length&&(g=p[p.length-1][1]),g}function u(e){var n=new Array(e.length);return{enter:function(t){for(var r=0;r<e.length;r++)if(null==n[r]){var i=l(e[r],t.kind,!1);if(i){var o=i.apply(e[r],arguments);if(!1===o)n[r]=t;else if(o===a)n[r]=a;else if(void 0!==o)return o}}},leave:function(t){for(var r=0;r<e.length;r++)if(null==n[r]){var i=l(e[r],t.kind,!0);if(i){var o=i.apply(e[r],arguments);if(o===a)n[r]=a;else if(void 0!==o&&!1!==o)return o}}else n[r]===t&&(n[r]=null)}}}function l(e,n,t){var r=e[n];if(r){if(!t&&"function"==typeof r)return r;var i=t?r.leave:r.enter;if("function"==typeof i)return i}else{var o=t?e.leave:e.enter;if(o){if("function"==typeof o)return o;var a=o[n];if("function"==typeof a)return a}}}},"./node_modules/graphql/polyfills/arrayFrom.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>i});var r=t("./node_modules/graphql/polyfills/symbols.mjs");const i=Array.from||function(e,n,t){if(null==e)throw new TypeError("Array.from requires an array-like object - not null or undefined");var i=e[r.SYMBOL_ITERATOR];if("function"==typeof i){for(var o,a=i.call(e),s=[],u=0;!(o=a.next()).done;++u)if(s.push(n.call(t,o.value,u)),u>9999999)throw new TypeError("Near-infinite iteration.");return s}var l=e.length;if("number"==typeof l&&l>=0&&l%1==0){for(var c=[],d=0;d<l;++d)Object.prototype.hasOwnProperty.call(e,d)&&c.push(n.call(t,e[d],d));return c}return[]}},"./node_modules/graphql/polyfills/find.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>r});const r=Array.prototype.find?function(e,n){return Array.prototype.find.call(e,n)}:function(e,n){for(var t=0;t<e.length;t++){var r=e[t];if(n(r))return r}}},"./node_modules/graphql/polyfills/isFinite.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>r});const r=Number.isFinite||function(e){return"number"==typeof e&&isFinite(e)}},"./node_modules/graphql/polyfills/isInteger.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>r});const r=Number.isInteger||function(e){return"number"==typeof e&&isFinite(e)&&Math.floor(e)===e}},"./node_modules/graphql/polyfills/objectEntries.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>r});const r=Object.entries||function(e){return Object.keys(e).map((function(n){return[n,e[n]]}))}},"./node_modules/graphql/polyfills/objectValues.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>r});const r=Object.values||function(e){return Object.keys(e).map((function(n){return e[n]}))}},"./node_modules/graphql/polyfills/symbols.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{SYMBOL_ITERATOR:()=>r,SYMBOL_ASYNC_ITERATOR:()=>i,SYMBOL_TO_STRING_TAG:()=>o});var r="function"==typeof Symbol&&null!=Symbol.iterator?Symbol.iterator:"@@iterator",i="function"==typeof Symbol&&null!=Symbol.asyncIterator?Symbol.asyncIterator:"@@asyncIterator",o="function"==typeof Symbol&&null!=Symbol.toStringTag?Symbol.toStringTag:"@@toStringTag"},"./node_modules/graphql/subscription/mapAsyncIterator.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>i});var r=t("./node_modules/graphql/polyfills/symbols.mjs");function i(e,n,t){var i,s,u,l,c,d,p=e[r.SYMBOL_ASYNC_ITERATOR].call(e);function f(e){return e.done?e:o(e.value,n).then(a,s)}if("function"==typeof p.return&&(i=p.return,s=function(e){var n=function(){return Promise.reject(e)};return i.call(p).then(n,n)}),t){var m=t;u=function(e){return o(e,m).then(a,s)}}return l={next:function(){return p.next().then(f,u)},return:function(){return i?i.call(p).then(f,u):Promise.resolve({value:void 0,done:!0})},throw:function(e){return"function"==typeof p.throw?p.throw(e).then(f,u):Promise.reject(e).catch(s)}},d=function(){return this},(c=r.SYMBOL_ASYNC_ITERATOR)in l?Object.defineProperty(l,c,{value:d,enumerable:!0,configurable:!0,writable:!0}):l[c]=d,l}function o(e,n){return new Promise((function(t){return t(n(e))}))}function a(e){return{value:e,done:!1}}},"./node_modules/graphql/subscription/subscribe.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{subscribe:()=>p,createSourceEventStream:()=>h});var r=t("./node_modules/graphql/jsutils/inspect.mjs"),i=t("./node_modules/graphql/jsutils/isAsyncIterable.mjs"),o=t("./node_modules/graphql/jsutils/Path.mjs"),a=t("./node_modules/graphql/error/GraphQLError.mjs"),s=t("./node_modules/graphql/error/locatedError.mjs"),u=t("./node_modules/graphql/execution/values.mjs"),l=t("./node_modules/graphql/execution/execute.mjs"),c=t("./node_modules/graphql/utilities/getOperationRootType.mjs"),d=t("./node_modules/graphql/subscription/mapAsyncIterator.mjs");function p(e,n,t,r,i,o,a,s){return m(1===arguments.length?e:{schema:e,document:n,rootValue:t,contextValue:r,variableValues:i,operationName:o,fieldResolver:a,subscribeFieldResolver:s})}function f(e){if(e instanceof a.GraphQLError)return{errors:[e]};throw e}function m(e){var n=e.schema,t=e.document,r=e.rootValue,o=e.contextValue,a=e.variableValues,s=e.operationName,u=e.fieldResolver,c=e.subscribeFieldResolver,p=h(n,t,r,o,a,s,c),m=function(e){return(0,l.execute)({schema:n,document:t,rootValue:e,contextValue:o,variableValues:a,operationName:s,fieldResolver:u})};return p.then((function(e){return(0,i.default)(e)?(0,d.default)(e,m,f):e}))}function h(e,n,t,d,p,m,h){return(0,l.assertValidExecutionArguments)(e,n,p),new Promise((function(f){var v=(0,l.buildExecutionContext)(e,n,t,d,p,m,h);f(Array.isArray(v)?{errors:v}:function(e){var n=e.schema,t=e.operation,d=e.variableValues,p=e.rootValue,f=(0,c.getOperationRootType)(n,t),m=(0,l.collectFields)(e,f,t.selectionSet,Object.create(null),Object.create(null)),h=Object.keys(m)[0],v=m[h],y=v[0].name.value,g=(0,l.getFieldDef)(n,f,y);if(!g)throw new a.GraphQLError('The subscription field "'.concat(y,'" is not defined.'),v);var T=(0,o.addPath)(void 0,h,f.name),E=(0,l.buildResolveInfo)(e,g,v,f,T);return new Promise((function(n){var t,r=(0,u.getArgumentValues)(g,v[0],d),i=e.contextValue;n((null!==(t=g.subscribe)&&void 0!==t?t:e.fieldResolver)(p,r,i,E))})).then((function(e){if(e instanceof Error)throw(0,s.locatedError)(e,v,(0,o.pathToArray)(T));if(!(0,i.default)(e))throw new Error("Subscription field must return Async Iterable. "+"Received: ".concat((0,r.default)(e),"."));return e}),(function(e){throw(0,s.locatedError)(e,v,(0,o.pathToArray)(T))}))}(v))})).catch(f)}},"./node_modules/graphql/type/definition.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{isType:()=>b,assertType:()=>j,isScalarType:()=>I,assertScalarType:()=>O,isObjectType:()=>L,assertObjectType:()=>S,isInterfaceType:()=>D,assertInterfaceType:()=>A,isUnionType:()=>w,assertUnionType:()=>R,isEnumType:()=>k,assertEnumType:()=>q,isInputObjectType:()=>x,assertInputObjectType:()=>F,isListType:()=>G,assertListType:()=>V,isNonNullType:()=>C,assertNonNullType:()=>K,isInputType:()=>U,assertInputType:()=>Q,isOutputType:()=>P,assertOutputType:()=>M,isLeafType:()=>B,assertLeafType:()=>Y,isCompositeType:()=>J,assertCompositeType:()=>X,isAbstractType:()=>z,assertAbstractType:()=>H,GraphQLList:()=>W,GraphQLNonNull:()=>$,isWrappingType:()=>Z,assertWrappingType:()=>ee,isNullableType:()=>ne,assertNullableType:()=>te,getNullableType:()=>re,isNamedType:()=>ie,assertNamedType:()=>oe,getNamedType:()=>ae,GraphQLScalarType:()=>le,GraphQLObjectType:()=>ce,argsToArgsConfig:()=>he,isRequiredArgument:()=>ve,GraphQLInterfaceType:()=>ye,GraphQLUnionType:()=>ge,GraphQLEnumType:()=>Ee,GraphQLInputObjectType:()=>Ne,isRequiredInputField:()=>je});var r=t("./node_modules/graphql/polyfills/objectEntries.mjs"),i=t("./node_modules/graphql/polyfills/symbols.mjs"),o=t("./node_modules/graphql/jsutils/inspect.mjs"),a=t("./node_modules/graphql/jsutils/keyMap.mjs"),s=t("./node_modules/graphql/jsutils/mapValue.mjs"),u=t("./node_modules/graphql/jsutils/toObjMap.mjs"),l=t("./node_modules/graphql/jsutils/devAssert.mjs"),c=t("./node_modules/graphql/jsutils/keyValMap.mjs"),d=t("./node_modules/graphql/jsutils/instanceOf.mjs"),p=t("./node_modules/graphql/jsutils/didYouMean.mjs"),f=t("./node_modules/graphql/jsutils/isObjectLike.mjs"),m=t("./node_modules/graphql/jsutils/identityFunc.mjs"),h=t("./node_modules/graphql/jsutils/defineInspect.mjs"),v=t("./node_modules/graphql/jsutils/suggestionList.mjs"),y=t("./node_modules/graphql/error/GraphQLError.mjs"),g=t("./node_modules/graphql/language/kinds.mjs"),T=t("./node_modules/graphql/language/printer.mjs"),E=t("./node_modules/graphql/utilities/valueFromASTUntyped.mjs");function _(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function N(e,n,t){return n&&_(e.prototype,n),t&&_(e,t),e}function b(e){return I(e)||L(e)||D(e)||w(e)||k(e)||x(e)||G(e)||C(e)}function j(e){if(!b(e))throw new Error("Expected ".concat((0,o.default)(e)," to be a GraphQL type."));return e}function I(e){return(0,d.default)(e,le)}function O(e){if(!I(e))throw new Error("Expected ".concat((0,o.default)(e)," to be a GraphQL Scalar type."));return e}function L(e){return(0,d.default)(e,ce)}function S(e){if(!L(e))throw new Error("Expected ".concat((0,o.default)(e)," to be a GraphQL Object type."));return e}function D(e){return(0,d.default)(e,ye)}function A(e){if(!D(e))throw new Error("Expected ".concat((0,o.default)(e)," to be a GraphQL Interface type."));return e}function w(e){return(0,d.default)(e,ge)}function R(e){if(!w(e))throw new Error("Expected ".concat((0,o.default)(e)," to be a GraphQL Union type."));return e}function k(e){return(0,d.default)(e,Ee)}function q(e){if(!k(e))throw new Error("Expected ".concat((0,o.default)(e)," to be a GraphQL Enum type."));return e}function x(e){return(0,d.default)(e,Ne)}function F(e){if(!x(e))throw new Error("Expected ".concat((0,o.default)(e)," to be a GraphQL Input Object type."));return e}function G(e){return(0,d.default)(e,W)}function V(e){if(!G(e))throw new Error("Expected ".concat((0,o.default)(e)," to be a GraphQL List type."));return e}function C(e){return(0,d.default)(e,$)}function K(e){if(!C(e))throw new Error("Expected ".concat((0,o.default)(e)," to be a GraphQL Non-Null type."));return e}function U(e){return I(e)||k(e)||x(e)||Z(e)&&U(e.ofType)}function Q(e){if(!U(e))throw new Error("Expected ".concat((0,o.default)(e)," to be a GraphQL input type."));return e}function P(e){return I(e)||L(e)||D(e)||w(e)||k(e)||Z(e)&&P(e.ofType)}function M(e){if(!P(e))throw new Error("Expected ".concat((0,o.default)(e)," to be a GraphQL output type."));return e}function B(e){return I(e)||k(e)}function Y(e){if(!B(e))throw new Error("Expected ".concat((0,o.default)(e)," to be a GraphQL leaf type."));return e}function J(e){return L(e)||D(e)||w(e)}function X(e){if(!J(e))throw new Error("Expected ".concat((0,o.default)(e)," to be a GraphQL composite type."));return e}function z(e){return D(e)||w(e)}function H(e){if(!z(e))throw new Error("Expected ".concat((0,o.default)(e)," to be a GraphQL abstract type."));return e}function W(e){if(!(this instanceof W))return new W(e);this.ofType=j(e)}function $(e){if(!(this instanceof $))return new $(e);this.ofType=te(e)}function Z(e){return G(e)||C(e)}function ee(e){if(!Z(e))throw new Error("Expected ".concat((0,o.default)(e)," to be a GraphQL wrapping type."));return e}function ne(e){return b(e)&&!C(e)}function te(e){if(!ne(e))throw new Error("Expected ".concat((0,o.default)(e)," to be a GraphQL nullable type."));return e}function re(e){if(e)return C(e)?e.ofType:e}function ie(e){return I(e)||L(e)||D(e)||w(e)||k(e)||x(e)}function oe(e){if(!ie(e))throw new Error("Expected ".concat((0,o.default)(e)," to be a GraphQL named type."));return e}function ae(e){if(e){for(var n=e;Z(n);)n=n.ofType;return n}}function se(e){return"function"==typeof e?e():e}function ue(e){return e&&e.length>0?e:void 0}W.prototype.toString=function(){return"["+String(this.ofType)+"]"},W.prototype.toJSON=function(){return this.toString()},Object.defineProperty(W.prototype,i.SYMBOL_TO_STRING_TAG,{get:function(){return"GraphQLList"}}),(0,h.default)(W),$.prototype.toString=function(){return String(this.ofType)+"!"},$.prototype.toJSON=function(){return this.toString()},Object.defineProperty($.prototype,i.SYMBOL_TO_STRING_TAG,{get:function(){return"GraphQLNonNull"}}),(0,h.default)($);var le=function(){function e(e){var n,t,r,i=null!==(n=e.parseValue)&&void 0!==n?n:m.default;this.name=e.name,this.description=e.description,this.specifiedByUrl=e.specifiedByUrl,this.serialize=null!==(t=e.serialize)&&void 0!==t?t:m.default,this.parseValue=i,this.parseLiteral=null!==(r=e.parseLiteral)&&void 0!==r?r:function(e,n){return i((0,E.valueFromASTUntyped)(e,n))},this.extensions=e.extensions&&(0,u.default)(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=ue(e.extensionASTNodes),"string"==typeof e.name||(0,l.default)(0,"Must provide name."),null==e.specifiedByUrl||"string"==typeof e.specifiedByUrl||(0,l.default)(0,"".concat(this.name,' must provide "specifiedByUrl" as a string, ')+"but got: ".concat((0,o.default)(e.specifiedByUrl),".")),null==e.serialize||"function"==typeof e.serialize||(0,l.default)(0,"".concat(this.name,' must provide "serialize" function. If this custom Scalar is also used as an input type, ensure "parseValue" and "parseLiteral" functions are also provided.')),e.parseLiteral&&("function"==typeof e.parseValue&&"function"==typeof e.parseLiteral||(0,l.default)(0,"".concat(this.name,' must provide both "parseValue" and "parseLiteral" functions.')))}var n=e.prototype;return n.toConfig=function(){var e;return{name:this.name,description:this.description,specifiedByUrl:this.specifiedByUrl,serialize:this.serialize,parseValue:this.parseValue,parseLiteral:this.parseLiteral,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:null!==(e=this.extensionASTNodes)&&void 0!==e?e:[]}},n.toString=function(){return this.name},n.toJSON=function(){return this.toString()},N(e,[{key:i.SYMBOL_TO_STRING_TAG,get:function(){return"GraphQLScalarType"}}]),e}();(0,h.default)(le);var ce=function(){function e(e){this.name=e.name,this.description=e.description,this.isTypeOf=e.isTypeOf,this.extensions=e.extensions&&(0,u.default)(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=ue(e.extensionASTNodes),this._fields=pe.bind(void 0,e),this._interfaces=de.bind(void 0,e),"string"==typeof e.name||(0,l.default)(0,"Must provide name."),null==e.isTypeOf||"function"==typeof e.isTypeOf||(0,l.default)(0,"".concat(this.name,' must provide "isTypeOf" as a function, ')+"but got: ".concat((0,o.default)(e.isTypeOf),"."))}var n=e.prototype;return n.getFields=function(){return"function"==typeof this._fields&&(this._fields=this._fields()),this._fields},n.getInterfaces=function(){return"function"==typeof this._interfaces&&(this._interfaces=this._interfaces()),this._interfaces},n.toConfig=function(){return{name:this.name,description:this.description,interfaces:this.getInterfaces(),fields:me(this.getFields()),isTypeOf:this.isTypeOf,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes||[]}},n.toString=function(){return this.name},n.toJSON=function(){return this.toString()},N(e,[{key:i.SYMBOL_TO_STRING_TAG,get:function(){return"GraphQLObjectType"}}]),e}();function de(e){var n,t=null!==(n=se(e.interfaces))&&void 0!==n?n:[];return Array.isArray(t)||(0,l.default)(0,"".concat(e.name," interfaces must be an Array or a function which returns an Array.")),t}function pe(e){var n=se(e.fields);return fe(n)||(0,l.default)(0,"".concat(e.name," fields must be an object with field names as keys or a function which returns such an object.")),(0,s.default)(n,(function(n,t){var i;fe(n)||(0,l.default)(0,"".concat(e.name,".").concat(t," field config must be an object.")),!("isDeprecated"in n)||(0,l.default)(0,"".concat(e.name,".").concat(t,' should provide "deprecationReason" instead of "isDeprecated".')),null==n.resolve||"function"==typeof n.resolve||(0,l.default)(0,"".concat(e.name,".").concat(t," field resolver must be a function if ")+"provided, but got: ".concat((0,o.default)(n.resolve),"."));var a=null!==(i=n.args)&&void 0!==i?i:{};fe(a)||(0,l.default)(0,"".concat(e.name,".").concat(t," args must be an object with argument names as keys."));var s=(0,r.default)(a).map((function(e){var n=e[0],t=e[1];return{name:n,description:t.description,type:t.type,defaultValue:t.defaultValue,deprecationReason:t.deprecationReason,extensions:t.extensions&&(0,u.default)(t.extensions),astNode:t.astNode}}));return{name:t,description:n.description,type:n.type,args:s,resolve:n.resolve,subscribe:n.subscribe,isDeprecated:null!=n.deprecationReason,deprecationReason:n.deprecationReason,extensions:n.extensions&&(0,u.default)(n.extensions),astNode:n.astNode}}))}function fe(e){return(0,f.default)(e)&&!Array.isArray(e)}function me(e){return(0,s.default)(e,(function(e){return{description:e.description,type:e.type,args:he(e.args),resolve:e.resolve,subscribe:e.subscribe,deprecationReason:e.deprecationReason,extensions:e.extensions,astNode:e.astNode}}))}function he(e){return(0,c.default)(e,(function(e){return e.name}),(function(e){return{description:e.description,type:e.type,defaultValue:e.defaultValue,deprecationReason:e.deprecationReason,extensions:e.extensions,astNode:e.astNode}}))}function ve(e){return C(e.type)&&void 0===e.defaultValue}(0,h.default)(ce);var ye=function(){function e(e){this.name=e.name,this.description=e.description,this.resolveType=e.resolveType,this.extensions=e.extensions&&(0,u.default)(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=ue(e.extensionASTNodes),this._fields=pe.bind(void 0,e),this._interfaces=de.bind(void 0,e),"string"==typeof e.name||(0,l.default)(0,"Must provide name."),null==e.resolveType||"function"==typeof e.resolveType||(0,l.default)(0,"".concat(this.name,' must provide "resolveType" as a function, ')+"but got: ".concat((0,o.default)(e.resolveType),"."))}var n=e.prototype;return n.getFields=function(){return"function"==typeof this._fields&&(this._fields=this._fields()),this._fields},n.getInterfaces=function(){return"function"==typeof this._interfaces&&(this._interfaces=this._interfaces()),this._interfaces},n.toConfig=function(){var e;return{name:this.name,description:this.description,interfaces:this.getInterfaces(),fields:me(this.getFields()),resolveType:this.resolveType,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:null!==(e=this.extensionASTNodes)&&void 0!==e?e:[]}},n.toString=function(){return this.name},n.toJSON=function(){return this.toString()},N(e,[{key:i.SYMBOL_TO_STRING_TAG,get:function(){return"GraphQLInterfaceType"}}]),e}();(0,h.default)(ye);var ge=function(){function e(e){this.name=e.name,this.description=e.description,this.resolveType=e.resolveType,this.extensions=e.extensions&&(0,u.default)(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=ue(e.extensionASTNodes),this._types=Te.bind(void 0,e),"string"==typeof e.name||(0,l.default)(0,"Must provide name."),null==e.resolveType||"function"==typeof e.resolveType||(0,l.default)(0,"".concat(this.name,' must provide "resolveType" as a function, ')+"but got: ".concat((0,o.default)(e.resolveType),"."))}var n=e.prototype;return n.getTypes=function(){return"function"==typeof this._types&&(this._types=this._types()),this._types},n.toConfig=function(){var e;return{name:this.name,description:this.description,types:this.getTypes(),resolveType:this.resolveType,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:null!==(e=this.extensionASTNodes)&&void 0!==e?e:[]}},n.toString=function(){return this.name},n.toJSON=function(){return this.toString()},N(e,[{key:i.SYMBOL_TO_STRING_TAG,get:function(){return"GraphQLUnionType"}}]),e}();function Te(e){var n=se(e.types);return Array.isArray(n)||(0,l.default)(0,"Must provide Array of types or a function which returns such an array for Union ".concat(e.name,".")),n}(0,h.default)(ge);var Ee=function(){function e(e){var n,t;this.name=e.name,this.description=e.description,this.extensions=e.extensions&&(0,u.default)(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=ue(e.extensionASTNodes),this._values=(n=this.name,fe(t=e.values)||(0,l.default)(0,"".concat(n," values must be an object with value names as keys.")),(0,r.default)(t).map((function(e){var t=e[0],r=e[1];return fe(r)||(0,l.default)(0,"".concat(n,".").concat(t,' must refer to an object with a "value" key ')+"representing an internal value but got: ".concat((0,o.default)(r),".")),!("isDeprecated"in r)||(0,l.default)(0,"".concat(n,".").concat(t,' should provide "deprecationReason" instead of "isDeprecated".')),{name:t,description:r.description,value:void 0!==r.value?r.value:t,isDeprecated:null!=r.deprecationReason,deprecationReason:r.deprecationReason,extensions:r.extensions&&(0,u.default)(r.extensions),astNode:r.astNode}}))),this._valueLookup=new Map(this._values.map((function(e){return[e.value,e]}))),this._nameLookup=(0,a.default)(this._values,(function(e){return e.name})),"string"==typeof e.name||(0,l.default)(0,"Must provide name.")}var n=e.prototype;return n.getValues=function(){return this._values},n.getValue=function(e){return this._nameLookup[e]},n.serialize=function(e){var n=this._valueLookup.get(e);if(void 0===n)throw new y.GraphQLError('Enum "'.concat(this.name,'" cannot represent value: ').concat((0,o.default)(e)));return n.name},n.parseValue=function(e){if("string"!=typeof e){var n=(0,o.default)(e);throw new y.GraphQLError('Enum "'.concat(this.name,'" cannot represent non-string value: ').concat(n,".")+_e(this,n))}var t=this.getValue(e);if(null==t)throw new y.GraphQLError('Value "'.concat(e,'" does not exist in "').concat(this.name,'" enum.')+_e(this,e));return t.value},n.parseLiteral=function(e,n){if(e.kind!==g.Kind.ENUM){var t=(0,T.print)(e);throw new y.GraphQLError('Enum "'.concat(this.name,'" cannot represent non-enum value: ').concat(t,".")+_e(this,t),e)}var r=this.getValue(e.value);if(null==r){var i=(0,T.print)(e);throw new y.GraphQLError('Value "'.concat(i,'" does not exist in "').concat(this.name,'" enum.')+_e(this,i),e)}return r.value},n.toConfig=function(){var e,n=(0,c.default)(this.getValues(),(function(e){return e.name}),(function(e){return{description:e.description,value:e.value,deprecationReason:e.deprecationReason,extensions:e.extensions,astNode:e.astNode}}));return{name:this.name,description:this.description,values:n,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:null!==(e=this.extensionASTNodes)&&void 0!==e?e:[]}},n.toString=function(){return this.name},n.toJSON=function(){return this.toString()},N(e,[{key:i.SYMBOL_TO_STRING_TAG,get:function(){return"GraphQLEnumType"}}]),e}();function _e(e,n){var t=e.getValues().map((function(e){return e.name})),r=(0,v.default)(n,t);return(0,p.default)("the enum value",r)}(0,h.default)(Ee);var Ne=function(){function e(e){this.name=e.name,this.description=e.description,this.extensions=e.extensions&&(0,u.default)(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=ue(e.extensionASTNodes),this._fields=be.bind(void 0,e),"string"==typeof e.name||(0,l.default)(0,"Must provide name.")}var n=e.prototype;return n.getFields=function(){return"function"==typeof this._fields&&(this._fields=this._fields()),this._fields},n.toConfig=function(){var e,n=(0,s.default)(this.getFields(),(function(e){return{description:e.description,type:e.type,defaultValue:e.defaultValue,deprecationReason:e.deprecationReason,extensions:e.extensions,astNode:e.astNode}}));return{name:this.name,description:this.description,fields:n,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:null!==(e=this.extensionASTNodes)&&void 0!==e?e:[]}},n.toString=function(){return this.name},n.toJSON=function(){return this.toString()},N(e,[{key:i.SYMBOL_TO_STRING_TAG,get:function(){return"GraphQLInputObjectType"}}]),e}();function be(e){var n=se(e.fields);return fe(n)||(0,l.default)(0,"".concat(e.name," fields must be an object with field names as keys or a function which returns such an object.")),(0,s.default)(n,(function(n,t){return!("resolve"in n)||(0,l.default)(0,"".concat(e.name,".").concat(t," field has a resolve property, but Input Types cannot define resolvers.")),{name:t,description:n.description,type:n.type,defaultValue:n.defaultValue,deprecationReason:n.deprecationReason,extensions:n.extensions&&(0,u.default)(n.extensions),astNode:n.astNode}}))}function je(e){return C(e.type)&&void 0===e.defaultValue}(0,h.default)(Ne)},"./node_modules/graphql/type/directives.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{isDirective:()=>h,assertDirective:()=>v,GraphQLDirective:()=>y,GraphQLIncludeDirective:()=>g,GraphQLSkipDirective:()=>T,DEFAULT_DEPRECATION_REASON:()=>E,GraphQLDeprecatedDirective:()=>_,GraphQLSpecifiedByDirective:()=>N,specifiedDirectives:()=>b,isSpecifiedDirective:()=>j});var r=t("./node_modules/graphql/polyfills/objectEntries.mjs"),i=t("./node_modules/graphql/polyfills/symbols.mjs"),o=t("./node_modules/graphql/jsutils/inspect.mjs"),a=t("./node_modules/graphql/jsutils/toObjMap.mjs"),s=t("./node_modules/graphql/jsutils/devAssert.mjs"),u=t("./node_modules/graphql/jsutils/instanceOf.mjs"),l=t("./node_modules/graphql/jsutils/isObjectLike.mjs"),c=t("./node_modules/graphql/jsutils/defineInspect.mjs"),d=t("./node_modules/graphql/language/directiveLocation.mjs"),p=t("./node_modules/graphql/type/scalars.mjs"),f=t("./node_modules/graphql/type/definition.mjs");function m(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function h(e){return(0,u.default)(e,y)}function v(e){if(!h(e))throw new Error("Expected ".concat((0,o.default)(e)," to be a GraphQL directive."));return e}var y=function(){function e(e){var n,t;this.name=e.name,this.description=e.description,this.locations=e.locations,this.isRepeatable=null!==(n=e.isRepeatable)&&void 0!==n&&n,this.extensions=e.extensions&&(0,a.default)(e.extensions),this.astNode=e.astNode,e.name||(0,s.default)(0,"Directive must be named."),Array.isArray(e.locations)||(0,s.default)(0,"@".concat(e.name," locations must be an Array."));var i=null!==(t=e.args)&&void 0!==t?t:{};(0,l.default)(i)&&!Array.isArray(i)||(0,s.default)(0,"@".concat(e.name," args must be an object with argument names as keys.")),this.args=(0,r.default)(i).map((function(e){var n=e[0],t=e[1];return{name:n,description:t.description,type:t.type,defaultValue:t.defaultValue,deprecationReason:t.deprecationReason,extensions:t.extensions&&(0,a.default)(t.extensions),astNode:t.astNode}}))}var n,t,o=e.prototype;return o.toConfig=function(){return{name:this.name,description:this.description,locations:this.locations,args:(0,f.argsToArgsConfig)(this.args),isRepeatable:this.isRepeatable,extensions:this.extensions,astNode:this.astNode}},o.toString=function(){return"@"+this.name},o.toJSON=function(){return this.toString()},n=e,(t=[{key:i.SYMBOL_TO_STRING_TAG,get:function(){return"GraphQLDirective"}}])&&m(n.prototype,t),e}();(0,c.default)(y);var g=new y({name:"include",description:"Directs the executor to include this field or fragment only when the `if` argument is true.",locations:[d.DirectiveLocation.FIELD,d.DirectiveLocation.FRAGMENT_SPREAD,d.DirectiveLocation.INLINE_FRAGMENT],args:{if:{type:new f.GraphQLNonNull(p.GraphQLBoolean),description:"Included when true."}}}),T=new y({name:"skip",description:"Directs the executor to skip this field or fragment when the `if` argument is true.",locations:[d.DirectiveLocation.FIELD,d.DirectiveLocation.FRAGMENT_SPREAD,d.DirectiveLocation.INLINE_FRAGMENT],args:{if:{type:new f.GraphQLNonNull(p.GraphQLBoolean),description:"Skipped when true."}}}),E="No longer supported",_=new y({name:"deprecated",description:"Marks an element of a GraphQL schema as no longer supported.",locations:[d.DirectiveLocation.FIELD_DEFINITION,d.DirectiveLocation.ARGUMENT_DEFINITION,d.DirectiveLocation.INPUT_FIELD_DEFINITION,d.DirectiveLocation.ENUM_VALUE],args:{reason:{type:p.GraphQLString,description:"Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https://commonmark.org/).",defaultValue:E}}}),N=new y({name:"specifiedBy",description:"Exposes a URL that specifies the behaviour of this scalar.",locations:[d.DirectiveLocation.SCALAR],args:{url:{type:new f.GraphQLNonNull(p.GraphQLString),description:"The URL that specifies the behaviour of this scalar."}}}),b=Object.freeze([g,T,_,N]);function j(e){return b.some((function(n){return n.name===e.name}))}},"./node_modules/graphql/type/introspection.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{__Schema:()=>d,__Directive:()=>p,__DirectiveLocation:()=>f,__Type:()=>m,__Field:()=>h,__InputValue:()=>v,__EnumValue:()=>y,TypeKind:()=>g,__TypeKind:()=>T,SchemaMetaFieldDef:()=>E,TypeMetaFieldDef:()=>_,TypeNameMetaFieldDef:()=>N,introspectionTypes:()=>b,isIntrospectionType:()=>j});var r=t("./node_modules/graphql/polyfills/objectValues.mjs"),i=t("./node_modules/graphql/jsutils/inspect.mjs"),o=t("./node_modules/graphql/jsutils/invariant.mjs"),a=t("./node_modules/graphql/language/printer.mjs"),s=t("./node_modules/graphql/language/directiveLocation.mjs"),u=t("./node_modules/graphql/utilities/astFromValue.mjs"),l=t("./node_modules/graphql/type/scalars.mjs"),c=t("./node_modules/graphql/type/definition.mjs"),d=new c.GraphQLObjectType({name:"__Schema",description:"A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.",fields:function(){return{description:{type:l.GraphQLString,resolve:function(e){return e.description}},types:{description:"A list of all types supported by this server.",type:new c.GraphQLNonNull(new c.GraphQLList(new c.GraphQLNonNull(m))),resolve:function(e){return(0,r.default)(e.getTypeMap())}},queryType:{description:"The type that query operations will be rooted at.",type:new c.GraphQLNonNull(m),resolve:function(e){return e.getQueryType()}},mutationType:{description:"If this server supports mutation, the type that mutation operations will be rooted at.",type:m,resolve:function(e){return e.getMutationType()}},subscriptionType:{description:"If this server support subscription, the type that subscription operations will be rooted at.",type:m,resolve:function(e){return e.getSubscriptionType()}},directives:{description:"A list of all directives supported by this server.",type:new c.GraphQLNonNull(new c.GraphQLList(new c.GraphQLNonNull(p))),resolve:function(e){return e.getDirectives()}}}}}),p=new c.GraphQLObjectType({name:"__Directive",description:"A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.\n\nIn some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.",fields:function(){return{name:{type:new c.GraphQLNonNull(l.GraphQLString),resolve:function(e){return e.name}},description:{type:l.GraphQLString,resolve:function(e){return e.description}},isRepeatable:{type:new c.GraphQLNonNull(l.GraphQLBoolean),resolve:function(e){return e.isRepeatable}},locations:{type:new c.GraphQLNonNull(new c.GraphQLList(new c.GraphQLNonNull(f))),resolve:function(e){return e.locations}},args:{type:new c.GraphQLNonNull(new c.GraphQLList(new c.GraphQLNonNull(v))),args:{includeDeprecated:{type:l.GraphQLBoolean,defaultValue:!1}},resolve:function(e,n){return n.includeDeprecated?e.args:e.args.filter((function(e){return null==e.deprecationReason}))}}}}}),f=new c.GraphQLEnumType({name:"__DirectiveLocation",description:"A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.",values:{QUERY:{value:s.DirectiveLocation.QUERY,description:"Location adjacent to a query operation."},MUTATION:{value:s.DirectiveLocation.MUTATION,description:"Location adjacent to a mutation operation."},SUBSCRIPTION:{value:s.DirectiveLocation.SUBSCRIPTION,description:"Location adjacent to a subscription operation."},FIELD:{value:s.DirectiveLocation.FIELD,description:"Location adjacent to a field."},FRAGMENT_DEFINITION:{value:s.DirectiveLocation.FRAGMENT_DEFINITION,description:"Location adjacent to a fragment definition."},FRAGMENT_SPREAD:{value:s.DirectiveLocation.FRAGMENT_SPREAD,description:"Location adjacent to a fragment spread."},INLINE_FRAGMENT:{value:s.DirectiveLocation.INLINE_FRAGMENT,description:"Location adjacent to an inline fragment."},VARIABLE_DEFINITION:{value:s.DirectiveLocation.VARIABLE_DEFINITION,description:"Location adjacent to a variable definition."},SCHEMA:{value:s.DirectiveLocation.SCHEMA,description:"Location adjacent to a schema definition."},SCALAR:{value:s.DirectiveLocation.SCALAR,description:"Location adjacent to a scalar definition."},OBJECT:{value:s.DirectiveLocation.OBJECT,description:"Location adjacent to an object type definition."},FIELD_DEFINITION:{value:s.DirectiveLocation.FIELD_DEFINITION,description:"Location adjacent to a field definition."},ARGUMENT_DEFINITION:{value:s.DirectiveLocation.ARGUMENT_DEFINITION,description:"Location adjacent to an argument definition."},INTERFACE:{value:s.DirectiveLocation.INTERFACE,description:"Location adjacent to an interface definition."},UNION:{value:s.DirectiveLocation.UNION,description:"Location adjacent to a union definition."},ENUM:{value:s.DirectiveLocation.ENUM,description:"Location adjacent to an enum definition."},ENUM_VALUE:{value:s.DirectiveLocation.ENUM_VALUE,description:"Location adjacent to an enum value definition."},INPUT_OBJECT:{value:s.DirectiveLocation.INPUT_OBJECT,description:"Location adjacent to an input object type definition."},INPUT_FIELD_DEFINITION:{value:s.DirectiveLocation.INPUT_FIELD_DEFINITION,description:"Location adjacent to an input object field definition."}}}),m=new c.GraphQLObjectType({name:"__Type",description:"The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\n\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByUrl`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.",fields:function(){return{kind:{type:new c.GraphQLNonNull(T),resolve:function(e){return(0,c.isScalarType)(e)?g.SCALAR:(0,c.isObjectType)(e)?g.OBJECT:(0,c.isInterfaceType)(e)?g.INTERFACE:(0,c.isUnionType)(e)?g.UNION:(0,c.isEnumType)(e)?g.ENUM:(0,c.isInputObjectType)(e)?g.INPUT_OBJECT:(0,c.isListType)(e)?g.LIST:(0,c.isNonNullType)(e)?g.NON_NULL:void(0,o.default)(0,'Unexpected type: "'.concat((0,i.default)(e),'".'))}},name:{type:l.GraphQLString,resolve:function(e){return void 0!==e.name?e.name:void 0}},description:{type:l.GraphQLString,resolve:function(e){return void 0!==e.description?e.description:void 0}},specifiedByUrl:{type:l.GraphQLString,resolve:function(e){return void 0!==e.specifiedByUrl?e.specifiedByUrl:void 0}},fields:{type:new c.GraphQLList(new c.GraphQLNonNull(h)),args:{includeDeprecated:{type:l.GraphQLBoolean,defaultValue:!1}},resolve:function(e,n){var t=n.includeDeprecated;if((0,c.isObjectType)(e)||(0,c.isInterfaceType)(e)){var i=(0,r.default)(e.getFields());return t?i:i.filter((function(e){return null==e.deprecationReason}))}}},interfaces:{type:new c.GraphQLList(new c.GraphQLNonNull(m)),resolve:function(e){if((0,c.isObjectType)(e)||(0,c.isInterfaceType)(e))return e.getInterfaces()}},possibleTypes:{type:new c.GraphQLList(new c.GraphQLNonNull(m)),resolve:function(e,n,t,r){var i=r.schema;if((0,c.isAbstractType)(e))return i.getPossibleTypes(e)}},enumValues:{type:new c.GraphQLList(new c.GraphQLNonNull(y)),args:{includeDeprecated:{type:l.GraphQLBoolean,defaultValue:!1}},resolve:function(e,n){var t=n.includeDeprecated;if((0,c.isEnumType)(e)){var r=e.getValues();return t?r:r.filter((function(e){return null==e.deprecationReason}))}}},inputFields:{type:new c.GraphQLList(new c.GraphQLNonNull(v)),args:{includeDeprecated:{type:l.GraphQLBoolean,defaultValue:!1}},resolve:function(e,n){var t=n.includeDeprecated;if((0,c.isInputObjectType)(e)){var i=(0,r.default)(e.getFields());return t?i:i.filter((function(e){return null==e.deprecationReason}))}}},ofType:{type:m,resolve:function(e){return void 0!==e.ofType?e.ofType:void 0}}}}}),h=new c.GraphQLObjectType({name:"__Field",description:"Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.",fields:function(){return{name:{type:new c.GraphQLNonNull(l.GraphQLString),resolve:function(e){return e.name}},description:{type:l.GraphQLString,resolve:function(e){return e.description}},args:{type:new c.GraphQLNonNull(new c.GraphQLList(new c.GraphQLNonNull(v))),args:{includeDeprecated:{type:l.GraphQLBoolean,defaultValue:!1}},resolve:function(e,n){return n.includeDeprecated?e.args:e.args.filter((function(e){return null==e.deprecationReason}))}},type:{type:new c.GraphQLNonNull(m),resolve:function(e){return e.type}},isDeprecated:{type:new c.GraphQLNonNull(l.GraphQLBoolean),resolve:function(e){return null!=e.deprecationReason}},deprecationReason:{type:l.GraphQLString,resolve:function(e){return e.deprecationReason}}}}}),v=new c.GraphQLObjectType({name:"__InputValue",description:"Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.",fields:function(){return{name:{type:new c.GraphQLNonNull(l.GraphQLString),resolve:function(e){return e.name}},description:{type:l.GraphQLString,resolve:function(e){return e.description}},type:{type:new c.GraphQLNonNull(m),resolve:function(e){return e.type}},defaultValue:{type:l.GraphQLString,description:"A GraphQL-formatted string representing the default value for this input value.",resolve:function(e){var n=e.type,t=e.defaultValue,r=(0,u.astFromValue)(t,n);return r?(0,a.print)(r):null}},isDeprecated:{type:new c.GraphQLNonNull(l.GraphQLBoolean),resolve:function(e){return null!=e.deprecationReason}},deprecationReason:{type:l.GraphQLString,resolve:function(e){return e.deprecationReason}}}}}),y=new c.GraphQLObjectType({name:"__EnumValue",description:"One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.",fields:function(){return{name:{type:new c.GraphQLNonNull(l.GraphQLString),resolve:function(e){return e.name}},description:{type:l.GraphQLString,resolve:function(e){return e.description}},isDeprecated:{type:new c.GraphQLNonNull(l.GraphQLBoolean),resolve:function(e){return null!=e.deprecationReason}},deprecationReason:{type:l.GraphQLString,resolve:function(e){return e.deprecationReason}}}}}),g=Object.freeze({SCALAR:"SCALAR",OBJECT:"OBJECT",INTERFACE:"INTERFACE",UNION:"UNION",ENUM:"ENUM",INPUT_OBJECT:"INPUT_OBJECT",LIST:"LIST",NON_NULL:"NON_NULL"}),T=new c.GraphQLEnumType({name:"__TypeKind",description:"An enum describing what kind of type a given `__Type` is.",values:{SCALAR:{value:g.SCALAR,description:"Indicates this type is a scalar."},OBJECT:{value:g.OBJECT,description:"Indicates this type is an object. `fields` and `interfaces` are valid fields."},INTERFACE:{value:g.INTERFACE,description:"Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields."},UNION:{value:g.UNION,description:"Indicates this type is a union. `possibleTypes` is a valid field."},ENUM:{value:g.ENUM,description:"Indicates this type is an enum. `enumValues` is a valid field."},INPUT_OBJECT:{value:g.INPUT_OBJECT,description:"Indicates this type is an input object. `inputFields` is a valid field."},LIST:{value:g.LIST,description:"Indicates this type is a list. `ofType` is a valid field."},NON_NULL:{value:g.NON_NULL,description:"Indicates this type is a non-null. `ofType` is a valid field."}}}),E={name:"__schema",type:new c.GraphQLNonNull(d),description:"Access the current type schema of this server.",args:[],resolve:function(e,n,t,r){return r.schema},isDeprecated:!1,deprecationReason:void 0,extensions:void 0,astNode:void 0},_={name:"__type",type:m,description:"Request the type information of a single type.",args:[{name:"name",description:void 0,type:new c.GraphQLNonNull(l.GraphQLString),defaultValue:void 0,deprecationReason:void 0,extensions:void 0,astNode:void 0}],resolve:function(e,n,t,r){var i=n.name;return r.schema.getType(i)},isDeprecated:!1,deprecationReason:void 0,extensions:void 0,astNode:void 0},N={name:"__typename",type:new c.GraphQLNonNull(l.GraphQLString),description:"The name of the current Object type at runtime.",args:[],resolve:function(e,n,t,r){return r.parentType.name},isDeprecated:!1,deprecationReason:void 0,extensions:void 0,astNode:void 0},b=Object.freeze([d,p,f,m,h,v,y,T]);function j(e){return b.some((function(n){var t=n.name;return e.name===t}))}},"./node_modules/graphql/type/scalars.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{GraphQLInt:()=>f,GraphQLFloat:()=>m,GraphQLString:()=>v,GraphQLBoolean:()=>y,GraphQLID:()=>g,specifiedScalarTypes:()=>T,isSpecifiedScalarType:()=>E});var r=t("./node_modules/graphql/polyfills/isFinite.mjs"),i=t("./node_modules/graphql/polyfills/isInteger.mjs"),o=t("./node_modules/graphql/jsutils/inspect.mjs"),a=t("./node_modules/graphql/jsutils/isObjectLike.mjs"),s=t("./node_modules/graphql/language/kinds.mjs"),u=t("./node_modules/graphql/language/printer.mjs"),l=t("./node_modules/graphql/error/GraphQLError.mjs"),c=t("./node_modules/graphql/type/definition.mjs"),d=2147483647,p=-2147483648,f=new c.GraphQLScalarType({name:"Int",description:"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.",serialize:function(e){var n=h(e);if("boolean"==typeof n)return n?1:0;var t=n;if("string"==typeof n&&""!==n&&(t=Number(n)),!(0,i.default)(t))throw new l.GraphQLError("Int cannot represent non-integer value: ".concat((0,o.default)(n)));if(t>d||t<p)throw new l.GraphQLError("Int cannot represent non 32-bit signed integer value: "+(0,o.default)(n));return t},parseValue:function(e){if(!(0,i.default)(e))throw new l.GraphQLError("Int cannot represent non-integer value: ".concat((0,o.default)(e)));if(e>d||e<p)throw new l.GraphQLError("Int cannot represent non 32-bit signed integer value: ".concat(e));return e},parseLiteral:function(e){if(e.kind!==s.Kind.INT)throw new l.GraphQLError("Int cannot represent non-integer value: ".concat((0,u.print)(e)),e);var n=parseInt(e.value,10);if(n>d||n<p)throw new l.GraphQLError("Int cannot represent non 32-bit signed integer value: ".concat(e.value),e);return n}}),m=new c.GraphQLScalarType({name:"Float",description:"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).",serialize:function(e){var n=h(e);if("boolean"==typeof n)return n?1:0;var t=n;if("string"==typeof n&&""!==n&&(t=Number(n)),!(0,r.default)(t))throw new l.GraphQLError("Float cannot represent non numeric value: ".concat((0,o.default)(n)));return t},parseValue:function(e){if(!(0,r.default)(e))throw new l.GraphQLError("Float cannot represent non numeric value: ".concat((0,o.default)(e)));return e},parseLiteral:function(e){if(e.kind!==s.Kind.FLOAT&&e.kind!==s.Kind.INT)throw new l.GraphQLError("Float cannot represent non numeric value: ".concat((0,u.print)(e)),e);return parseFloat(e.value)}});function h(e){if((0,a.default)(e)){if("function"==typeof e.valueOf){var n=e.valueOf();if(!(0,a.default)(n))return n}if("function"==typeof e.toJSON)return e.toJSON()}return e}var v=new c.GraphQLScalarType({name:"String",description:"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.",serialize:function(e){var n=h(e);if("string"==typeof n)return n;if("boolean"==typeof n)return n?"true":"false";if((0,r.default)(n))return n.toString();throw new l.GraphQLError("String cannot represent value: ".concat((0,o.default)(e)))},parseValue:function(e){if("string"!=typeof e)throw new l.GraphQLError("String cannot represent a non string value: ".concat((0,o.default)(e)));return e},parseLiteral:function(e){if(e.kind!==s.Kind.STRING)throw new l.GraphQLError("String cannot represent a non string value: ".concat((0,u.print)(e)),e);return e.value}}),y=new c.GraphQLScalarType({name:"Boolean",description:"The `Boolean` scalar type represents `true` or `false`.",serialize:function(e){var n=h(e);if("boolean"==typeof n)return n;if((0,r.default)(n))return 0!==n;throw new l.GraphQLError("Boolean cannot represent a non boolean value: ".concat((0,o.default)(n)))},parseValue:function(e){if("boolean"!=typeof e)throw new l.GraphQLError("Boolean cannot represent a non boolean value: ".concat((0,o.default)(e)));return e},parseLiteral:function(e){if(e.kind!==s.Kind.BOOLEAN)throw new l.GraphQLError("Boolean cannot represent a non boolean value: ".concat((0,u.print)(e)),e);return e.value}}),g=new c.GraphQLScalarType({name:"ID",description:'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.',serialize:function(e){var n=h(e);if("string"==typeof n)return n;if((0,i.default)(n))return String(n);throw new l.GraphQLError("ID cannot represent value: ".concat((0,o.default)(e)))},parseValue:function(e){if("string"==typeof e)return e;if((0,i.default)(e))return e.toString();throw new l.GraphQLError("ID cannot represent value: ".concat((0,o.default)(e)))},parseLiteral:function(e){if(e.kind!==s.Kind.STRING&&e.kind!==s.Kind.INT)throw new l.GraphQLError("ID cannot represent a non-string and non-integer value: "+(0,u.print)(e),e);return e.value}}),T=Object.freeze([v,f,m,y,g]);function E(e){return T.some((function(n){var t=n.name;return e.name===t}))}},"./node_modules/graphql/type/schema.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{isSchema:()=>v,assertSchema:()=>y,GraphQLSchema:()=>g});var r=t("./node_modules/graphql/polyfills/find.mjs"),i=t("./node_modules/graphql/polyfills/arrayFrom.mjs"),o=t("./node_modules/graphql/polyfills/objectValues.mjs"),a=t("./node_modules/graphql/polyfills/symbols.mjs"),s=t("./node_modules/graphql/jsutils/inspect.mjs"),u=t("./node_modules/graphql/jsutils/toObjMap.mjs"),l=t("./node_modules/graphql/jsutils/devAssert.mjs"),c=t("./node_modules/graphql/jsutils/instanceOf.mjs"),d=t("./node_modules/graphql/jsutils/isObjectLike.mjs"),p=t("./node_modules/graphql/type/introspection.mjs"),f=t("./node_modules/graphql/type/directives.mjs"),m=t("./node_modules/graphql/type/definition.mjs");function h(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function v(e){return(0,c.default)(e,g)}function y(e){if(!v(e))throw new Error("Expected ".concat((0,s.default)(e)," to be a GraphQL schema."));return e}var g=function(){function e(e){var n;this.__validationErrors=!0===e.assumeValid?[]:void 0,(0,d.default)(e)||(0,l.default)(0,"Must provide configuration object."),!e.types||Array.isArray(e.types)||(0,l.default)(0,'"types" must be Array if provided but got: '.concat((0,s.default)(e.types),".")),!e.directives||Array.isArray(e.directives)||(0,l.default)(0,'"directives" must be Array if provided but got: '+"".concat((0,s.default)(e.directives),".")),this.description=e.description,this.extensions=e.extensions&&(0,u.default)(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=e.extensionASTNodes,this._queryType=e.query,this._mutationType=e.mutation,this._subscriptionType=e.subscription,this._directives=null!==(n=e.directives)&&void 0!==n?n:f.specifiedDirectives;var t=new Set(e.types);if(null!=e.types)for(var r=0,o=e.types;r<o.length;r++){var a=o[r];t.delete(a),T(a,t)}null!=this._queryType&&T(this._queryType,t),null!=this._mutationType&&T(this._mutationType,t),null!=this._subscriptionType&&T(this._subscriptionType,t);for(var c=0,h=this._directives;c<h.length;c++){var v=h[c];if((0,f.isDirective)(v))for(var y=0,g=v.args;y<g.length;y++)T(g[y].type,t)}T(p.__Schema,t),this._typeMap=Object.create(null),this._subTypeMap=Object.create(null),this._implementationsMap=Object.create(null);for(var E=0,_=(0,i.default)(t);E<_.length;E++){var N=_[E];if(null!=N){var b=N.name;if(b||(0,l.default)(0,"One of the provided types for building the Schema is missing a name."),void 0!==this._typeMap[b])throw new Error('Schema must contain uniquely named types but contains multiple types named "'.concat(b,'".'));if(this._typeMap[b]=N,(0,m.isInterfaceType)(N))for(var j=0,I=N.getInterfaces();j<I.length;j++){var O=I[j];if((0,m.isInterfaceType)(O)){var L=this._implementationsMap[O.name];void 0===L&&(L=this._implementationsMap[O.name]={objects:[],interfaces:[]}),L.interfaces.push(N)}}else if((0,m.isObjectType)(N))for(var S=0,D=N.getInterfaces();S<D.length;S++){var A=D[S];if((0,m.isInterfaceType)(A)){var w=this._implementationsMap[A.name];void 0===w&&(w=this._implementationsMap[A.name]={objects:[],interfaces:[]}),w.objects.push(N)}}}}}var n,t,c=e.prototype;return c.getQueryType=function(){return this._queryType},c.getMutationType=function(){return this._mutationType},c.getSubscriptionType=function(){return this._subscriptionType},c.getTypeMap=function(){return this._typeMap},c.getType=function(e){return this.getTypeMap()[e]},c.getPossibleTypes=function(e){return(0,m.isUnionType)(e)?e.getTypes():this.getImplementations(e).objects},c.getImplementations=function(e){var n=this._implementationsMap[e.name];return null!=n?n:{objects:[],interfaces:[]}},c.isPossibleType=function(e,n){return this.isSubType(e,n)},c.isSubType=function(e,n){var t=this._subTypeMap[e.name];if(void 0===t){if(t=Object.create(null),(0,m.isUnionType)(e))for(var r=0,i=e.getTypes();r<i.length;r++)t[i[r].name]=!0;else{for(var o=this.getImplementations(e),a=0,s=o.objects;a<s.length;a++)t[s[a].name]=!0;for(var u=0,l=o.interfaces;u<l.length;u++)t[l[u].name]=!0}this._subTypeMap[e.name]=t}return void 0!==t[n.name]},c.getDirectives=function(){return this._directives},c.getDirective=function(e){return(0,r.default)(this.getDirectives(),(function(n){return n.name===e}))},c.toConfig=function(){var e;return{description:this.description,query:this.getQueryType(),mutation:this.getMutationType(),subscription:this.getSubscriptionType(),types:(0,o.default)(this.getTypeMap()),directives:this.getDirectives().slice(),extensions:this.extensions,astNode:this.astNode,extensionASTNodes:null!==(e=this.extensionASTNodes)&&void 0!==e?e:[],assumeValid:void 0!==this.__validationErrors}},n=e,(t=[{key:a.SYMBOL_TO_STRING_TAG,get:function(){return"GraphQLSchema"}}])&&h(n.prototype,t),e}();function T(e,n){var t=(0,m.getNamedType)(e);if(!n.has(t))if(n.add(t),(0,m.isUnionType)(t))for(var r=0,i=t.getTypes();r<i.length;r++)T(i[r],n);else if((0,m.isObjectType)(t)||(0,m.isInterfaceType)(t)){for(var a=0,s=t.getInterfaces();a<s.length;a++)T(s[a],n);for(var u=0,l=(0,o.default)(t.getFields());u<l.length;u++){var c=l[u];T(c.type,n);for(var d=0,p=c.args;d<p.length;d++)T(p[d].type,n)}}else if((0,m.isInputObjectType)(t))for(var f=0,h=(0,o.default)(t.getFields());f<h.length;f++)T(h[f].type,n);return n}},"./node_modules/graphql/type/validate.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{validateSchema:()=>m,assertValidSchema:()=>h});var r=t("./node_modules/graphql/polyfills/find.mjs"),i=t("./node_modules/graphql/polyfills/objectValues.mjs"),o=t("./node_modules/graphql/jsutils/inspect.mjs"),a=t("./node_modules/graphql/error/GraphQLError.mjs"),s=t("./node_modules/graphql/error/locatedError.mjs"),u=t("./node_modules/graphql/utilities/assertValidName.mjs"),l=t("./node_modules/graphql/utilities/typeComparators.mjs"),c=t("./node_modules/graphql/type/schema.mjs"),d=t("./node_modules/graphql/type/introspection.mjs"),p=t("./node_modules/graphql/type/directives.mjs"),f=t("./node_modules/graphql/type/definition.mjs");function m(e){if((0,c.assertSchema)(e),e.__validationErrors)return e.__validationErrors;var n=new v(e);!function(e){var n=e.schema,t=n.getQueryType();if(t){if(!(0,f.isObjectType)(t)){var r;e.reportError("Query root type must be Object type, it cannot be ".concat((0,o.default)(t),"."),null!==(r=y(n,"query"))&&void 0!==r?r:t.astNode)}}else e.reportError("Query root type must be provided.",n.astNode);var i,a=n.getMutationType();a&&!(0,f.isObjectType)(a)&&e.reportError("Mutation root type must be Object type if provided, it cannot be "+"".concat((0,o.default)(a),"."),null!==(i=y(n,"mutation"))&&void 0!==i?i:a.astNode);var s,u=n.getSubscriptionType();u&&!(0,f.isObjectType)(u)&&e.reportError("Subscription root type must be Object type if provided, it cannot be "+"".concat((0,o.default)(u),"."),null!==(s=y(n,"subscription"))&&void 0!==s?s:u.astNode)}(n),function(e){for(var n=0,t=e.schema.getDirectives();n<t.length;n++){var r=t[n];if((0,p.isDirective)(r)){g(e,r);for(var i=0,a=r.args;i<a.length;i++){var s,u=a[i];g(e,u),(0,f.isInputType)(u.type)||e.reportError("The type of @".concat(r.name,"(").concat(u.name,":) must be Input Type ")+"but got: ".concat((0,o.default)(u.type),"."),u.astNode),(0,f.isRequiredArgument)(u)&&null!=u.deprecationReason&&e.reportError("Required argument @".concat(r.name,"(").concat(u.name,":) cannot be deprecated."),[A(u.astNode),null===(s=u.astNode)||void 0===s?void 0:s.type])}}else e.reportError("Expected directive but got: ".concat((0,o.default)(r),"."),null==r?void 0:r.astNode)}}(n),function(e){for(var n=function(e){var n=Object.create(null),t=[],r=Object.create(null);return function o(a){if(!n[a.name]){n[a.name]=!0,r[a.name]=t.length;for(var s=(0,i.default)(a.getFields()),u=0;u<s.length;u++){var l=s[u];if((0,f.isNonNullType)(l.type)&&(0,f.isInputObjectType)(l.type.ofType)){var c=l.type.ofType,d=r[c.name];if(t.push(l),void 0===d)o(c);else{var p=t.slice(d),m=p.map((function(e){return e.name})).join(".");e.reportError('Cannot reference Input Object "'.concat(c.name,'" within itself through a series of non-null fields: "').concat(m,'".'),p.map((function(e){return e.astNode})))}t.pop()}}r[a.name]=void 0}}}(e),t=e.schema.getTypeMap(),r=0,a=(0,i.default)(t);r<a.length;r++){var s=a[r];(0,f.isNamedType)(s)?((0,d.isIntrospectionType)(s)||g(e,s),(0,f.isObjectType)(s)||(0,f.isInterfaceType)(s)?(T(e,s),E(e,s)):(0,f.isUnionType)(s)?b(e,s):(0,f.isEnumType)(s)?j(e,s):(0,f.isInputObjectType)(s)&&(I(e,s),n(s))):e.reportError("Expected GraphQL named type but got: ".concat((0,o.default)(s),"."),s.astNode)}}(n);var t=n.getErrors();return e.__validationErrors=t,t}function h(e){var n=m(e);if(0!==n.length)throw new Error(n.map((function(e){return e.message})).join("\n\n"))}var v=function(){function e(e){this._errors=[],this.schema=e}var n=e.prototype;return n.reportError=function(e,n){var t=Array.isArray(n)?n.filter(Boolean):n;this.addError(new a.GraphQLError(e,t))},n.addError=function(e){this._errors.push(e)},n.getErrors=function(){return this._errors},e}();function y(e,n){for(var t=L(e,(function(e){return e.operationTypes})),r=0;r<t.length;r++){var i=t[r];if(i.operation===n)return i.type}}function g(e,n){var t=(0,u.isValidNameError)(n.name);t&&e.addError((0,s.locatedError)(t,n.astNode))}function T(e,n){var t=(0,i.default)(n.getFields());0===t.length&&e.reportError("Type ".concat(n.name," must define one or more fields."),O(n));for(var r=0;r<t.length;r++){var a,s=t[r];g(e,s),(0,f.isOutputType)(s.type)||e.reportError("The type of ".concat(n.name,".").concat(s.name," must be Output Type ")+"but got: ".concat((0,o.default)(s.type),"."),null===(a=s.astNode)||void 0===a?void 0:a.type);for(var u=0,l=s.args;u<l.length;u++){var c,d,p=l[u],m=p.name;g(e,p),(0,f.isInputType)(p.type)||e.reportError("The type of ".concat(n.name,".").concat(s.name,"(").concat(m,":) must be Input ")+"Type but got: ".concat((0,o.default)(p.type),"."),null===(c=p.astNode)||void 0===c?void 0:c.type),(0,f.isRequiredArgument)(p)&&null!=p.deprecationReason&&e.reportError("Required argument ".concat(n.name,".").concat(s.name,"(").concat(m,":) cannot be deprecated."),[A(p.astNode),null===(d=p.astNode)||void 0===d?void 0:d.type])}}}function E(e,n){for(var t=Object.create(null),r=0,i=n.getInterfaces();r<i.length;r++){var a=i[r];(0,f.isInterfaceType)(a)?n!==a?t[a.name]?e.reportError("Type ".concat(n.name," can only implement ").concat(a.name," once."),S(n,a)):(t[a.name]=!0,N(e,n,a),_(e,n,a)):e.reportError("Type ".concat(n.name," cannot implement itself because it would create a circular reference."),S(n,a)):e.reportError("Type ".concat((0,o.default)(n)," must only implement Interface types, ")+"it cannot implement ".concat((0,o.default)(a),"."),S(n,a))}}function _(e,n,t){for(var a=n.getFields(),s=0,u=(0,i.default)(t.getFields());s<u.length;s++){var c=u[s],d=c.name,p=a[d];if(p){var m,h;(0,l.isTypeSubTypeOf)(e.schema,p.type,c.type)||e.reportError("Interface field ".concat(t.name,".").concat(d," expects type ")+"".concat((0,o.default)(c.type)," but ").concat(n.name,".").concat(d," ")+"is type ".concat((0,o.default)(p.type),"."),[null===(m=c.astNode)||void 0===m?void 0:m.type,null===(h=p.astNode)||void 0===h?void 0:h.type]);for(var v=function(i,a){var s,u,c=a[i],f=c.name,m=(0,r.default)(p.args,(function(e){return e.name===f}));if(!m)return e.reportError("Interface field argument ".concat(t.name,".").concat(d,"(").concat(f,":) expected but ").concat(n.name,".").concat(d," does not provide it."),[c.astNode,p.astNode]),"continue";(0,l.isEqualType)(c.type,m.type)||e.reportError("Interface field argument ".concat(t.name,".").concat(d,"(").concat(f,":) ")+"expects type ".concat((0,o.default)(c.type)," but ")+"".concat(n.name,".").concat(d,"(").concat(f,":) is type ")+"".concat((0,o.default)(m.type),"."),[null===(s=c.astNode)||void 0===s?void 0:s.type,null===(u=m.astNode)||void 0===u?void 0:u.type])},y=0,g=c.args;y<g.length;y++)v(y,g);for(var T=function(i,o){var a=o[i],s=a.name;!(0,r.default)(c.args,(function(e){return e.name===s}))&&(0,f.isRequiredArgument)(a)&&e.reportError("Object field ".concat(n.name,".").concat(d," includes required argument ").concat(s," that is missing from the Interface field ").concat(t.name,".").concat(d,"."),[a.astNode,c.astNode])},E=0,_=p.args;E<_.length;E++)T(E,_)}else e.reportError("Interface field ".concat(t.name,".").concat(d," expected but ").concat(n.name," does not provide it."),[c.astNode].concat(O(n)))}}function N(e,n,t){for(var r=n.getInterfaces(),i=0,o=t.getInterfaces();i<o.length;i++){var a=o[i];-1===r.indexOf(a)&&e.reportError(a===n?"Type ".concat(n.name," cannot implement ").concat(t.name," because it would create a circular reference."):"Type ".concat(n.name," must implement ").concat(a.name," because it is implemented by ").concat(t.name,"."),[].concat(S(t,a),S(n,t)))}}function b(e,n){var t=n.getTypes();0===t.length&&e.reportError("Union type ".concat(n.name," must define one or more member types."),O(n));for(var r=Object.create(null),i=0;i<t.length;i++){var a=t[i];r[a.name]?e.reportError("Union type ".concat(n.name," can only include type ").concat(a.name," once."),D(n,a.name)):(r[a.name]=!0,(0,f.isObjectType)(a)||e.reportError("Union type ".concat(n.name," can only include Object types, ")+"it cannot include ".concat((0,o.default)(a),"."),D(n,String(a))))}}function j(e,n){var t=n.getValues();0===t.length&&e.reportError("Enum type ".concat(n.name," must define one or more values."),O(n));for(var r=0;r<t.length;r++){var i=t[r],o=i.name;g(e,i),"true"!==o&&"false"!==o&&"null"!==o||e.reportError("Enum type ".concat(n.name," cannot include value: ").concat(o,"."),i.astNode)}}function I(e,n){var t=(0,i.default)(n.getFields());0===t.length&&e.reportError("Input Object type ".concat(n.name," must define one or more fields."),O(n));for(var r=0;r<t.length;r++){var a,s,u=t[r];g(e,u),(0,f.isInputType)(u.type)||e.reportError("The type of ".concat(n.name,".").concat(u.name," must be Input Type ")+"but got: ".concat((0,o.default)(u.type),"."),null===(a=u.astNode)||void 0===a?void 0:a.type),(0,f.isRequiredInputField)(u)&&null!=u.deprecationReason&&e.reportError("Required input field ".concat(n.name,".").concat(u.name," cannot be deprecated."),[A(u.astNode),null===(s=u.astNode)||void 0===s?void 0:s.type])}}function O(e){var n=e.astNode,t=e.extensionASTNodes;return n?t?[n].concat(t):[n]:null!=t?t:[]}function L(e,n){for(var t=[],r=0,i=O(e);r<i.length;r++){var o,a=i[r];t=t.concat(null!==(o=n(a))&&void 0!==o?o:[])}return t}function S(e,n){return L(e,(function(e){return e.interfaces})).filter((function(e){return e.name.value===n.name}))}function D(e,n){return L(e,(function(e){return e.types})).filter((function(e){return e.name.value===n}))}function A(e){var n;return null==e||null===(n=e.directives)||void 0===n?void 0:n.find((function(e){return e.name.value===p.GraphQLDeprecatedDirective.name}))}},"./node_modules/graphql/utilities/TypeInfo.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{TypeInfo:()=>c,visitWithTypeInfo:()=>p});var r=t("./node_modules/graphql/polyfills/find.mjs"),i=t("./node_modules/graphql/language/kinds.mjs"),o=t("./node_modules/graphql/language/ast.mjs"),a=t("./node_modules/graphql/language/visitor.mjs"),s=t("./node_modules/graphql/type/definition.mjs"),u=t("./node_modules/graphql/type/introspection.mjs"),l=t("./node_modules/graphql/utilities/typeFromAST.mjs"),c=function(){function e(e,n,t){this._schema=e,this._typeStack=[],this._parentTypeStack=[],this._inputTypeStack=[],this._fieldDefStack=[],this._defaultValueStack=[],this._directive=null,this._argument=null,this._enumValue=null,this._getFieldDef=null!=n?n:d,t&&((0,s.isInputType)(t)&&this._inputTypeStack.push(t),(0,s.isCompositeType)(t)&&this._parentTypeStack.push(t),(0,s.isOutputType)(t)&&this._typeStack.push(t))}var n=e.prototype;return n.getType=function(){if(this._typeStack.length>0)return this._typeStack[this._typeStack.length-1]},n.getParentType=function(){if(this._parentTypeStack.length>0)return this._parentTypeStack[this._parentTypeStack.length-1]},n.getInputType=function(){if(this._inputTypeStack.length>0)return this._inputTypeStack[this._inputTypeStack.length-1]},n.getParentInputType=function(){if(this._inputTypeStack.length>1)return this._inputTypeStack[this._inputTypeStack.length-2]},n.getFieldDef=function(){if(this._fieldDefStack.length>0)return this._fieldDefStack[this._fieldDefStack.length-1]},n.getDefaultValue=function(){if(this._defaultValueStack.length>0)return this._defaultValueStack[this._defaultValueStack.length-1]},n.getDirective=function(){return this._directive},n.getArgument=function(){return this._argument},n.getEnumValue=function(){return this._enumValue},n.enter=function(e){var n=this._schema;switch(e.kind){case i.Kind.SELECTION_SET:var t=(0,s.getNamedType)(this.getType());this._parentTypeStack.push((0,s.isCompositeType)(t)?t:void 0);break;case i.Kind.FIELD:var o,a,u=this.getParentType();u&&(o=this._getFieldDef(n,u,e))&&(a=o.type),this._fieldDefStack.push(o),this._typeStack.push((0,s.isOutputType)(a)?a:void 0);break;case i.Kind.DIRECTIVE:this._directive=n.getDirective(e.name.value);break;case i.Kind.OPERATION_DEFINITION:var c;switch(e.operation){case"query":c=n.getQueryType();break;case"mutation":c=n.getMutationType();break;case"subscription":c=n.getSubscriptionType()}this._typeStack.push((0,s.isObjectType)(c)?c:void 0);break;case i.Kind.INLINE_FRAGMENT:case i.Kind.FRAGMENT_DEFINITION:var d=e.typeCondition,p=d?(0,l.typeFromAST)(n,d):(0,s.getNamedType)(this.getType());this._typeStack.push((0,s.isOutputType)(p)?p:void 0);break;case i.Kind.VARIABLE_DEFINITION:var f=(0,l.typeFromAST)(n,e.type);this._inputTypeStack.push((0,s.isInputType)(f)?f:void 0);break;case i.Kind.ARGUMENT:var m,h,v,y=null!==(m=this.getDirective())&&void 0!==m?m:this.getFieldDef();y&&(h=(0,r.default)(y.args,(function(n){return n.name===e.name.value})))&&(v=h.type),this._argument=h,this._defaultValueStack.push(h?h.defaultValue:void 0),this._inputTypeStack.push((0,s.isInputType)(v)?v:void 0);break;case i.Kind.LIST:var g=(0,s.getNullableType)(this.getInputType()),T=(0,s.isListType)(g)?g.ofType:g;this._defaultValueStack.push(void 0),this._inputTypeStack.push((0,s.isInputType)(T)?T:void 0);break;case i.Kind.OBJECT_FIELD:var E,_,N=(0,s.getNamedType)(this.getInputType());(0,s.isInputObjectType)(N)&&(_=N.getFields()[e.name.value])&&(E=_.type),this._defaultValueStack.push(_?_.defaultValue:void 0),this._inputTypeStack.push((0,s.isInputType)(E)?E:void 0);break;case i.Kind.ENUM:var b,j=(0,s.getNamedType)(this.getInputType());(0,s.isEnumType)(j)&&(b=j.getValue(e.value)),this._enumValue=b}},n.leave=function(e){switch(e.kind){case i.Kind.SELECTION_SET:this._parentTypeStack.pop();break;case i.Kind.FIELD:this._fieldDefStack.pop(),this._typeStack.pop();break;case i.Kind.DIRECTIVE:this._directive=null;break;case i.Kind.OPERATION_DEFINITION:case i.Kind.INLINE_FRAGMENT:case i.Kind.FRAGMENT_DEFINITION:this._typeStack.pop();break;case i.Kind.VARIABLE_DEFINITION:this._inputTypeStack.pop();break;case i.Kind.ARGUMENT:this._argument=null,this._defaultValueStack.pop(),this._inputTypeStack.pop();break;case i.Kind.LIST:case i.Kind.OBJECT_FIELD:this._defaultValueStack.pop(),this._inputTypeStack.pop();break;case i.Kind.ENUM:this._enumValue=null}},e}();function d(e,n,t){var r=t.name.value;return r===u.SchemaMetaFieldDef.name&&e.getQueryType()===n?u.SchemaMetaFieldDef:r===u.TypeMetaFieldDef.name&&e.getQueryType()===n?u.TypeMetaFieldDef:r===u.TypeNameMetaFieldDef.name&&(0,s.isCompositeType)(n)?u.TypeNameMetaFieldDef:(0,s.isObjectType)(n)||(0,s.isInterfaceType)(n)?n.getFields()[r]:void 0}function p(e,n){return{enter:function(t){e.enter(t);var r=(0,a.getVisitFn)(n,t.kind,!1);if(r){var i=r.apply(n,arguments);return void 0!==i&&(e.leave(t),(0,o.isNode)(i)&&e.enter(i)),i}},leave:function(t){var r,i=(0,a.getVisitFn)(n,t.kind,!0);return i&&(r=i.apply(n,arguments)),e.leave(t),r}}}},"./node_modules/graphql/utilities/assertValidName.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{assertValidName:()=>a,isValidNameError:()=>s});var r=t("./node_modules/graphql/jsutils/devAssert.mjs"),i=t("./node_modules/graphql/error/GraphQLError.mjs"),o=/^[_a-zA-Z][_a-zA-Z0-9]*$/;function a(e){var n=s(e);if(n)throw n;return e}function s(e){return"string"==typeof e||(0,r.default)(0,"Expected name to be a string."),e.length>1&&"_"===e[0]&&"_"===e[1]?new i.GraphQLError('Name "'.concat(e,'" must not begin with "__", which is reserved by GraphQL introspection.')):o.test(e)?void 0:new i.GraphQLError('Names must match /^[_a-zA-Z][_a-zA-Z0-9]*$/ but "'.concat(e,'" does not.'))}},"./node_modules/graphql/utilities/astFromValue.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{astFromValue:()=>p});var r=t("./node_modules/graphql/polyfills/isFinite.mjs"),i=t("./node_modules/graphql/polyfills/objectValues.mjs"),o=t("./node_modules/graphql/jsutils/inspect.mjs"),a=t("./node_modules/graphql/jsutils/invariant.mjs"),s=t("./node_modules/graphql/jsutils/isObjectLike.mjs"),u=t("./node_modules/graphql/jsutils/safeArrayFrom.mjs"),l=t("./node_modules/graphql/language/kinds.mjs"),c=t("./node_modules/graphql/type/scalars.mjs"),d=t("./node_modules/graphql/type/definition.mjs");function p(e,n){if((0,d.isNonNullType)(n)){var t=p(e,n.ofType);return(null==t?void 0:t.kind)===l.Kind.NULL?null:t}if(null===e)return{kind:l.Kind.NULL};if(void 0===e)return null;if((0,d.isListType)(n)){var m=n.ofType,h=(0,u.default)(e);if(null!=h){for(var v=[],y=0;y<h.length;y++){var g=p(h[y],m);null!=g&&v.push(g)}return{kind:l.Kind.LIST,values:v}}return p(e,m)}if((0,d.isInputObjectType)(n)){if(!(0,s.default)(e))return null;for(var T=[],E=0,_=(0,i.default)(n.getFields());E<_.length;E++){var N=_[E],b=p(e[N.name],N.type);b&&T.push({kind:l.Kind.OBJECT_FIELD,name:{kind:l.Kind.NAME,value:N.name},value:b})}return{kind:l.Kind.OBJECT,fields:T}}if((0,d.isLeafType)(n)){var j=n.serialize(e);if(null==j)return null;if("boolean"==typeof j)return{kind:l.Kind.BOOLEAN,value:j};if("number"==typeof j&&(0,r.default)(j)){var I=String(j);return f.test(I)?{kind:l.Kind.INT,value:I}:{kind:l.Kind.FLOAT,value:I}}if("string"==typeof j)return(0,d.isEnumType)(n)?{kind:l.Kind.ENUM,value:j}:n===c.GraphQLID&&f.test(j)?{kind:l.Kind.INT,value:j}:{kind:l.Kind.STRING,value:j};throw new TypeError("Cannot convert value to AST: ".concat((0,o.default)(j),"."))}(0,a.default)(0,"Unexpected input type: "+(0,o.default)(n))}var f=/^-?(?:0|[1-9][0-9]*)$/},"./node_modules/graphql/utilities/buildASTSchema.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{buildASTSchema:()=>c,buildSchema:()=>d});var r=t("./node_modules/graphql/jsutils/devAssert.mjs"),i=t("./node_modules/graphql/language/kinds.mjs"),o=t("./node_modules/graphql/language/parser.mjs"),a=t("./node_modules/graphql/validation/validate.mjs"),s=t("./node_modules/graphql/type/schema.mjs"),u=t("./node_modules/graphql/type/directives.mjs"),l=t("./node_modules/graphql/utilities/extendSchema.mjs");function c(e,n){null!=e&&e.kind===i.Kind.DOCUMENT||(0,r.default)(0,"Must provide valid Document AST."),!0!==(null==n?void 0:n.assumeValid)&&!0!==(null==n?void 0:n.assumeValidSDL)&&(0,a.assertValidSDL)(e);var t=(0,l.extendSchemaImpl)({description:void 0,types:[],directives:[],extensions:void 0,extensionASTNodes:[],assumeValid:!1},e,n);if(null==t.astNode)for(var o=0,c=t.types;o<c.length;o++){var d=c[o];switch(d.name){case"Query":t.query=d;break;case"Mutation":t.mutation=d;break;case"Subscription":t.subscription=d}}for(var p=t.directives,f=function(e){var n=u.specifiedDirectives[e];p.every((function(e){return e.name!==n.name}))&&p.push(n)},m=0;m<u.specifiedDirectives.length;m++)f(m);return new s.GraphQLSchema(t)}function d(e,n){return c((0,o.parse)(e,{noLocation:null==n?void 0:n.noLocation,allowLegacySDLEmptyFields:null==n?void 0:n.allowLegacySDLEmptyFields,allowLegacySDLImplementsInterfaces:null==n?void 0:n.allowLegacySDLImplementsInterfaces,experimentalFragmentVariables:null==n?void 0:n.experimentalFragmentVariables}),{commentDescriptions:null==n?void 0:n.commentDescriptions,assumeValidSDL:null==n?void 0:n.assumeValidSDL,assumeValid:null==n?void 0:n.assumeValid})}},"./node_modules/graphql/utilities/buildClientSchema.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{buildClientSchema:()=>h});var r=t("./node_modules/graphql/polyfills/objectValues.mjs"),i=t("./node_modules/graphql/jsutils/inspect.mjs"),o=t("./node_modules/graphql/jsutils/devAssert.mjs"),a=t("./node_modules/graphql/jsutils/keyValMap.mjs"),s=t("./node_modules/graphql/jsutils/isObjectLike.mjs"),u=t("./node_modules/graphql/language/parser.mjs"),l=t("./node_modules/graphql/type/schema.mjs"),c=t("./node_modules/graphql/type/directives.mjs"),d=t("./node_modules/graphql/type/scalars.mjs"),p=t("./node_modules/graphql/type/introspection.mjs"),f=t("./node_modules/graphql/type/definition.mjs"),m=t("./node_modules/graphql/utilities/valueFromAST.mjs");function h(e,n){(0,s.default)(e)&&(0,s.default)(e.__schema)||(0,o.default)(0,'Invalid or incomplete introspection result. Ensure that you are passing "data" property of introspection response and no "errors" was returned alongside: '.concat((0,i.default)(e),"."));for(var t=e.__schema,h=(0,a.default)(t.types,(function(e){return e.name}),(function(e){return function(e){if(null!=e&&null!=e.name&&null!=e.kind)switch(e.kind){case p.TypeKind.SCALAR:return r=e,new f.GraphQLScalarType({name:r.name,description:r.description,specifiedByUrl:r.specifiedByUrl});case p.TypeKind.OBJECT:return t=e,new f.GraphQLObjectType({name:t.name,description:t.description,interfaces:function(){return L(t)},fields:function(){return S(t)}});case p.TypeKind.INTERFACE:return n=e,new f.GraphQLInterfaceType({name:n.name,description:n.description,interfaces:function(){return L(n)},fields:function(){return S(n)}});case p.TypeKind.UNION:return function(e){if(!e.possibleTypes){var n=(0,i.default)(e);throw new Error("Introspection result missing possibleTypes: ".concat(n,"."))}return new f.GraphQLUnionType({name:e.name,description:e.description,types:function(){return e.possibleTypes.map(I)}})}(e);case p.TypeKind.ENUM:return function(e){if(!e.enumValues){var n=(0,i.default)(e);throw new Error("Introspection result missing enumValues: ".concat(n,"."))}return new f.GraphQLEnumType({name:e.name,description:e.description,values:(0,a.default)(e.enumValues,(function(e){return e.name}),(function(e){return{description:e.description,deprecationReason:e.deprecationReason}}))})}(e);case p.TypeKind.INPUT_OBJECT:return function(e){if(!e.inputFields){var n=(0,i.default)(e);throw new Error("Introspection result missing inputFields: ".concat(n,"."))}return new f.GraphQLInputObjectType({name:e.name,description:e.description,fields:function(){return A(e.inputFields)}})}(e)}var n,t,r,o=(0,i.default)(e);throw new Error("Invalid or incomplete introspection result. Ensure that a full introspection query is used in order to build a client schema: ".concat(o,"."))}(e)})),v=0,y=[].concat(d.specifiedScalarTypes,p.introspectionTypes);v<y.length;v++){var g=y[v];h[g.name]&&(h[g.name]=g)}var T=t.queryType?I(t.queryType):null,E=t.mutationType?I(t.mutationType):null,_=t.subscriptionType?I(t.subscriptionType):null,N=t.directives?t.directives.map((function(e){if(!e.args){var n=(0,i.default)(e);throw new Error("Introspection result missing directive args: ".concat(n,"."))}if(!e.locations){var t=(0,i.default)(e);throw new Error("Introspection result missing directive locations: ".concat(t,"."))}return new c.GraphQLDirective({name:e.name,description:e.description,isRepeatable:e.isRepeatable,locations:e.locations.slice(),args:A(e.args)})})):[];return new l.GraphQLSchema({description:t.description,query:T,mutation:E,subscription:_,types:(0,r.default)(h),directives:N,assumeValid:null==n?void 0:n.assumeValid});function b(e){if(e.kind===p.TypeKind.LIST){var n=e.ofType;if(!n)throw new Error("Decorated type deeper than introspection query.");return new f.GraphQLList(b(n))}if(e.kind===p.TypeKind.NON_NULL){var t=e.ofType;if(!t)throw new Error("Decorated type deeper than introspection query.");var r=b(t);return new f.GraphQLNonNull((0,f.assertNullableType)(r))}return j(e)}function j(e){var n=e.name;if(!n)throw new Error("Unknown type reference: ".concat((0,i.default)(e),"."));var t=h[n];if(!t)throw new Error("Invalid or incomplete schema, unknown type: ".concat(n,". Ensure that a full introspection query is used in order to build a client schema."));return t}function I(e){return(0,f.assertObjectType)(j(e))}function O(e){return(0,f.assertInterfaceType)(j(e))}function L(e){if(null===e.interfaces&&e.kind===p.TypeKind.INTERFACE)return[];if(!e.interfaces){var n=(0,i.default)(e);throw new Error("Introspection result missing interfaces: ".concat(n,"."))}return e.interfaces.map(O)}function S(e){if(!e.fields)throw new Error("Introspection result missing fields: ".concat((0,i.default)(e),"."));return(0,a.default)(e.fields,(function(e){return e.name}),D)}function D(e){var n=b(e.type);if(!(0,f.isOutputType)(n)){var t=(0,i.default)(n);throw new Error("Introspection must provide output type for fields, but received: ".concat(t,"."))}if(!e.args){var r=(0,i.default)(e);throw new Error("Introspection result missing field args: ".concat(r,"."))}return{description:e.description,deprecationReason:e.deprecationReason,type:n,args:A(e.args)}}function A(e){return(0,a.default)(e,(function(e){return e.name}),w)}function w(e){var n=b(e.type);if(!(0,f.isInputType)(n)){var t=(0,i.default)(n);throw new Error("Introspection must provide input type for arguments, but received: ".concat(t,"."))}var r=null!=e.defaultValue?(0,m.valueFromAST)((0,u.parseValue)(e.defaultValue),n):void 0;return{description:e.description,type:n,defaultValue:r,deprecationReason:e.deprecationReason}}}},"./node_modules/graphql/utilities/coerceInputValue.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{coerceInputValue:()=>m});var r=t("./node_modules/graphql/polyfills/objectValues.mjs"),i=t("./node_modules/graphql/jsutils/inspect.mjs"),o=t("./node_modules/graphql/jsutils/invariant.mjs"),a=t("./node_modules/graphql/jsutils/didYouMean.mjs"),s=t("./node_modules/graphql/jsutils/isObjectLike.mjs"),u=t("./node_modules/graphql/jsutils/safeArrayFrom.mjs"),l=t("./node_modules/graphql/jsutils/suggestionList.mjs"),c=t("./node_modules/graphql/jsutils/printPathArray.mjs"),d=t("./node_modules/graphql/jsutils/Path.mjs"),p=t("./node_modules/graphql/error/GraphQLError.mjs"),f=t("./node_modules/graphql/type/definition.mjs");function m(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:h;return v(e,n,t)}function h(e,n,t){var r="Invalid value "+(0,i.default)(n);throw e.length>0&&(r+=' at "value'.concat((0,c.default)(e),'"')),t.message=r+": "+t.message,t}function v(e,n,t,c){if((0,f.isNonNullType)(n))return null!=e?v(e,n.ofType,t,c):void t((0,d.pathToArray)(c),e,new p.GraphQLError('Expected non-nullable type "'.concat((0,i.default)(n),'" not to be null.')));if(null==e)return null;if((0,f.isListType)(n)){var m=n.ofType,h=(0,u.default)(e,(function(e,n){var r=(0,d.addPath)(c,n,void 0);return v(e,m,t,r)}));return null!=h?h:[v(e,m,t,c)]}if((0,f.isInputObjectType)(n)){if(!(0,s.default)(e))return void t((0,d.pathToArray)(c),e,new p.GraphQLError('Expected type "'.concat(n.name,'" to be an object.')));for(var y={},g=n.getFields(),T=0,E=(0,r.default)(g);T<E.length;T++){var _=E[T],N=e[_.name];if(void 0!==N)y[_.name]=v(N,_.type,t,(0,d.addPath)(c,_.name,n.name));else if(void 0!==_.defaultValue)y[_.name]=_.defaultValue;else if((0,f.isNonNullType)(_.type)){var b=(0,i.default)(_.type);t((0,d.pathToArray)(c),e,new p.GraphQLError('Field "'.concat(_.name,'" of required type "').concat(b,'" was not provided.')))}}for(var j=0,I=Object.keys(e);j<I.length;j++){var O=I[j];if(!g[O]){var L=(0,l.default)(O,Object.keys(n.getFields()));t((0,d.pathToArray)(c),e,new p.GraphQLError('Field "'.concat(O,'" is not defined by type "').concat(n.name,'".')+(0,a.default)(L)))}}return y}if((0,f.isLeafType)(n)){var S;try{S=n.parseValue(e)}catch(r){return void(r instanceof p.GraphQLError?t((0,d.pathToArray)(c),e,r):t((0,d.pathToArray)(c),e,new p.GraphQLError('Expected type "'.concat(n.name,'". ')+r.message,void 0,void 0,void 0,void 0,r)))}return void 0===S&&t((0,d.pathToArray)(c),e,new p.GraphQLError('Expected type "'.concat(n.name,'".'))),S}(0,o.default)(0,"Unexpected input type: "+(0,i.default)(n))}},"./node_modules/graphql/utilities/concatAST.mjs":(e,n,t)=>{"use strict";function r(e){for(var n=[],t=0;t<e.length;t++){var r=e[t];n=n.concat(r.definitions)}return{kind:"Document",definitions:n}}t.r(n),t.d(n,{concatAST:()=>r})},"./node_modules/graphql/utilities/extendSchema.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{extendSchema:()=>j,extendSchemaImpl:()=>I,getDescription:()=>D});var r=t("./node_modules/graphql/polyfills/objectValues.mjs"),i=t("./node_modules/graphql/jsutils/keyMap.mjs"),o=t("./node_modules/graphql/jsutils/inspect.mjs"),a=t("./node_modules/graphql/jsutils/mapValue.mjs"),s=t("./node_modules/graphql/jsutils/invariant.mjs"),u=t("./node_modules/graphql/jsutils/devAssert.mjs"),l=t("./node_modules/graphql/language/kinds.mjs"),c=t("./node_modules/graphql/language/tokenKind.mjs"),d=t("./node_modules/graphql/language/blockString.mjs"),p=t("./node_modules/graphql/language/predicates.mjs"),f=t("./node_modules/graphql/validation/validate.mjs"),m=t("./node_modules/graphql/execution/values.mjs"),h=t("./node_modules/graphql/type/schema.mjs"),v=t("./node_modules/graphql/type/scalars.mjs"),y=t("./node_modules/graphql/type/introspection.mjs"),g=t("./node_modules/graphql/type/directives.mjs"),T=t("./node_modules/graphql/type/definition.mjs"),E=t("./node_modules/graphql/utilities/valueFromAST.mjs");function _(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function N(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?_(Object(t),!0).forEach((function(n){b(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):_(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function b(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function j(e,n,t){(0,h.assertSchema)(e),null!=n&&n.kind===l.Kind.DOCUMENT||(0,u.default)(0,"Must provide valid Document AST."),!0!==(null==t?void 0:t.assumeValid)&&!0!==(null==t?void 0:t.assumeValidSDL)&&(0,f.assertValidSDLExtension)(n,e);var r=e.toConfig(),i=I(r,n,t);return r===i?e:new h.GraphQLSchema(i)}function I(e,n,t){for(var i,u,c,d,f,m=[],h=Object.create(null),_=[],b=[],j=0,I=n.definitions;j<I.length;j++){var A=I[j];if(A.kind===l.Kind.SCHEMA_DEFINITION)f=A;else if(A.kind===l.Kind.SCHEMA_EXTENSION)b.push(A);else if((0,p.isTypeDefinitionNode)(A))m.push(A);else if((0,p.isTypeExtensionNode)(A)){var w=A.name.value,R=h[w];h[w]=R?R.concat([A]):[A]}else A.kind===l.Kind.DIRECTIVE_DEFINITION&&_.push(A)}if(0===Object.keys(h).length&&0===m.length&&0===_.length&&0===b.length&&null==f)return e;for(var k=Object.create(null),q=0,x=e.types;q<x.length;q++){var F=x[q];k[F.name]=(G=F,(0,y.isIntrospectionType)(G)||(0,v.isSpecifiedScalarType)(G)?G:(0,T.isScalarType)(G)?function(e){for(var n,t=e.toConfig(),r=null!==(n=h[t.name])&&void 0!==n?n:[],i=t.specifiedByUrl,o=0;o<r.length;o++){var a;i=null!==(a=S(r[o]))&&void 0!==a?a:i}return new T.GraphQLScalarType(N(N({},t),{},{specifiedByUrl:i,extensionASTNodes:t.extensionASTNodes.concat(r)}))}(G):(0,T.isObjectType)(G)?function(e){var n,t=e.toConfig(),r=null!==(n=h[t.name])&&void 0!==n?n:[];return new T.GraphQLObjectType(N(N({},t),{},{interfaces:function(){return[].concat(e.getInterfaces().map(M),ee(r))},fields:function(){return N(N({},(0,a.default)(t.fields,B)),H(r))},extensionASTNodes:t.extensionASTNodes.concat(r)}))}(G):(0,T.isInterfaceType)(G)?function(e){var n,t=e.toConfig(),r=null!==(n=h[t.name])&&void 0!==n?n:[];return new T.GraphQLInterfaceType(N(N({},t),{},{interfaces:function(){return[].concat(e.getInterfaces().map(M),ee(r))},fields:function(){return N(N({},(0,a.default)(t.fields,B)),H(r))},extensionASTNodes:t.extensionASTNodes.concat(r)}))}(G):(0,T.isUnionType)(G)?function(e){var n,t=e.toConfig(),r=null!==(n=h[t.name])&&void 0!==n?n:[];return new T.GraphQLUnionType(N(N({},t),{},{types:function(){return[].concat(e.getTypes().map(M),ne(r))},extensionASTNodes:t.extensionASTNodes.concat(r)}))}(G):(0,T.isEnumType)(G)?function(e){var n,t=e.toConfig(),r=null!==(n=h[e.name])&&void 0!==n?n:[];return new T.GraphQLEnumType(N(N({},t),{},{values:N(N({},t.values),Z(r)),extensionASTNodes:t.extensionASTNodes.concat(r)}))}(G):(0,T.isInputObjectType)(G)?function(e){var n,t=e.toConfig(),r=null!==(n=h[t.name])&&void 0!==n?n:[];return new T.GraphQLInputObjectType(N(N({},t),{},{fields:function(){return N(N({},(0,a.default)(t.fields,(function(e){return N(N({},e),{},{type:P(e.type)})}))),$(r))},extensionASTNodes:t.extensionASTNodes.concat(r)}))}(G):void(0,s.default)(0,"Unexpected type: "+(0,o.default)(G)))}for(var G,V=0;V<m.length;V++){var C,K=m[V],U=K.name.value;k[U]=null!==(C=O[U])&&void 0!==C?C:te(K)}var Q=N(N({query:e.query&&M(e.query),mutation:e.mutation&&M(e.mutation),subscription:e.subscription&&M(e.subscription)},f&&J([f])),J(b));return N(N({description:null===(i=f)||void 0===i||null===(u=i.description)||void 0===u?void 0:u.value},Q),{},{types:(0,r.default)(k),directives:[].concat(e.directives.map((function(e){var n=e.toConfig();return new g.GraphQLDirective(N(N({},n),{},{args:(0,a.default)(n.args,Y)}))})),_.map((function(e){var n=e.locations.map((function(e){return e.value}));return new g.GraphQLDirective({name:e.name.value,description:D(e,t),locations:n,isRepeatable:e.repeatable,args:W(e.arguments),astNode:e})}))),extensions:void 0,astNode:null!==(c=f)&&void 0!==c?c:e.astNode,extensionASTNodes:e.extensionASTNodes.concat(b),assumeValid:null!==(d=null==t?void 0:t.assumeValid)&&void 0!==d&&d});function P(e){return(0,T.isListType)(e)?new T.GraphQLList(P(e.ofType)):(0,T.isNonNullType)(e)?new T.GraphQLNonNull(P(e.ofType)):M(e)}function M(e){return k[e.name]}function B(e){return N(N({},e),{},{type:P(e.type),args:(0,a.default)(e.args,Y)})}function Y(e){return N(N({},e),{},{type:P(e.type)})}function J(e){for(var n={},t=0;t<e.length;t++)for(var r,i=null!==(r=e[t].operationTypes)&&void 0!==r?r:[],o=0;o<i.length;o++){var a=i[o];n[a.operation]=X(a.type)}return n}function X(e){var n,t=e.name.value,r=null!==(n=O[t])&&void 0!==n?n:k[t];if(void 0===r)throw new Error('Unknown type: "'.concat(t,'".'));return r}function z(e){return e.kind===l.Kind.LIST_TYPE?new T.GraphQLList(z(e.type)):e.kind===l.Kind.NON_NULL_TYPE?new T.GraphQLNonNull(z(e.type)):X(e)}function H(e){for(var n=Object.create(null),r=0;r<e.length;r++)for(var i,o=null!==(i=e[r].fields)&&void 0!==i?i:[],a=0;a<o.length;a++){var s=o[a];n[s.name.value]={type:z(s.type),description:D(s,t),args:W(s.arguments),deprecationReason:L(s),astNode:s}}return n}function W(e){for(var n=null!=e?e:[],r=Object.create(null),i=0;i<n.length;i++){var o=n[i],a=z(o.type);r[o.name.value]={type:a,description:D(o,t),defaultValue:(0,E.valueFromAST)(o.defaultValue,a),deprecationReason:L(o),astNode:o}}return r}function $(e){for(var n=Object.create(null),r=0;r<e.length;r++)for(var i,o=null!==(i=e[r].fields)&&void 0!==i?i:[],a=0;a<o.length;a++){var s=o[a],u=z(s.type);n[s.name.value]={type:u,description:D(s,t),defaultValue:(0,E.valueFromAST)(s.defaultValue,u),deprecationReason:L(s),astNode:s}}return n}function Z(e){for(var n=Object.create(null),r=0;r<e.length;r++)for(var i,o=null!==(i=e[r].values)&&void 0!==i?i:[],a=0;a<o.length;a++){var s=o[a];n[s.name.value]={description:D(s,t),deprecationReason:L(s),astNode:s}}return n}function ee(e){for(var n=[],t=0;t<e.length;t++)for(var r,i=null!==(r=e[t].interfaces)&&void 0!==r?r:[],o=0;o<i.length;o++){var a=i[o];n.push(X(a))}return n}function ne(e){for(var n=[],t=0;t<e.length;t++)for(var r,i=null!==(r=e[t].types)&&void 0!==r?r:[],o=0;o<i.length;o++){var a=i[o];n.push(X(a))}return n}function te(e){var n,r=e.name.value,i=D(e,t),a=null!==(n=h[r])&&void 0!==n?n:[];switch(e.kind){case l.Kind.OBJECT_TYPE_DEFINITION:var u=a,c=[e].concat(u);return new T.GraphQLObjectType({name:r,description:i,interfaces:function(){return ee(c)},fields:function(){return H(c)},astNode:e,extensionASTNodes:u});case l.Kind.INTERFACE_TYPE_DEFINITION:var d=a,p=[e].concat(d);return new T.GraphQLInterfaceType({name:r,description:i,interfaces:function(){return ee(p)},fields:function(){return H(p)},astNode:e,extensionASTNodes:d});case l.Kind.ENUM_TYPE_DEFINITION:var f=a,m=[e].concat(f);return new T.GraphQLEnumType({name:r,description:i,values:Z(m),astNode:e,extensionASTNodes:f});case l.Kind.UNION_TYPE_DEFINITION:var v=a,y=[e].concat(v);return new T.GraphQLUnionType({name:r,description:i,types:function(){return ne(y)},astNode:e,extensionASTNodes:v});case l.Kind.SCALAR_TYPE_DEFINITION:var g=a;return new T.GraphQLScalarType({name:r,description:i,specifiedByUrl:S(e),astNode:e,extensionASTNodes:g});case l.Kind.INPUT_OBJECT_TYPE_DEFINITION:var E=a,_=[e].concat(E);return new T.GraphQLInputObjectType({name:r,description:i,fields:function(){return $(_)},astNode:e,extensionASTNodes:E})}(0,s.default)(0,"Unexpected type definition node: "+(0,o.default)(e))}}var O=(0,i.default)(v.specifiedScalarTypes.concat(y.introspectionTypes),(function(e){return e.name}));function L(e){var n=(0,m.getDirectiveValues)(g.GraphQLDeprecatedDirective,e);return null==n?void 0:n.reason}function S(e){var n=(0,m.getDirectiveValues)(g.GraphQLSpecifiedByDirective,e);return null==n?void 0:n.url}function D(e,n){if(e.description)return e.description.value;if(!0===(null==n?void 0:n.commentDescriptions)){var t=function(e){var n=e.loc;if(n){for(var t=[],r=n.startToken.prev;null!=r&&r.kind===c.TokenKind.COMMENT&&r.next&&r.prev&&r.line+1===r.next.line&&r.line!==r.prev.line;){var i=String(r.value);t.push(i),r=r.prev}return t.length>0?t.reverse().join("\n"):void 0}}(e);if(void 0!==t)return(0,d.dedentBlockStringValue)("\n"+t)}}},"./node_modules/graphql/utilities/findBreakingChanges.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{BreakingChangeType:()=>v,DangerousChangeType:()=>y,findBreakingChanges:()=>g,findDangerousChanges:()=>T});var r=t("./node_modules/graphql/polyfills/objectValues.mjs"),i=t("./node_modules/graphql/jsutils/keyMap.mjs"),o=t("./node_modules/graphql/jsutils/inspect.mjs"),a=t("./node_modules/graphql/jsutils/invariant.mjs"),s=t("./node_modules/graphql/jsutils/naturalCompare.mjs"),u=t("./node_modules/graphql/language/printer.mjs"),l=t("./node_modules/graphql/language/visitor.mjs"),c=t("./node_modules/graphql/type/scalars.mjs"),d=t("./node_modules/graphql/type/definition.mjs"),p=t("./node_modules/graphql/utilities/astFromValue.mjs");function f(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function m(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?f(Object(t),!0).forEach((function(n){h(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):f(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function h(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var v=Object.freeze({TYPE_REMOVED:"TYPE_REMOVED",TYPE_CHANGED_KIND:"TYPE_CHANGED_KIND",TYPE_REMOVED_FROM_UNION:"TYPE_REMOVED_FROM_UNION",VALUE_REMOVED_FROM_ENUM:"VALUE_REMOVED_FROM_ENUM",REQUIRED_INPUT_FIELD_ADDED:"REQUIRED_INPUT_FIELD_ADDED",IMPLEMENTED_INTERFACE_REMOVED:"IMPLEMENTED_INTERFACE_REMOVED",FIELD_REMOVED:"FIELD_REMOVED",FIELD_CHANGED_KIND:"FIELD_CHANGED_KIND",REQUIRED_ARG_ADDED:"REQUIRED_ARG_ADDED",ARG_REMOVED:"ARG_REMOVED",ARG_CHANGED_KIND:"ARG_CHANGED_KIND",DIRECTIVE_REMOVED:"DIRECTIVE_REMOVED",DIRECTIVE_ARG_REMOVED:"DIRECTIVE_ARG_REMOVED",REQUIRED_DIRECTIVE_ARG_ADDED:"REQUIRED_DIRECTIVE_ARG_ADDED",DIRECTIVE_REPEATABLE_REMOVED:"DIRECTIVE_REPEATABLE_REMOVED",DIRECTIVE_LOCATION_REMOVED:"DIRECTIVE_LOCATION_REMOVED"}),y=Object.freeze({VALUE_ADDED_TO_ENUM:"VALUE_ADDED_TO_ENUM",TYPE_ADDED_TO_UNION:"TYPE_ADDED_TO_UNION",OPTIONAL_INPUT_FIELD_ADDED:"OPTIONAL_INPUT_FIELD_ADDED",OPTIONAL_ARG_ADDED:"OPTIONAL_ARG_ADDED",IMPLEMENTED_INTERFACE_ADDED:"IMPLEMENTED_INTERFACE_ADDED",ARG_DEFAULT_VALUE_CHANGE:"ARG_DEFAULT_VALUE_CHANGE"});function g(e,n){return E(e,n).filter((function(e){return e.type in v}))}function T(e,n){return E(e,n).filter((function(e){return e.type in y}))}function E(e,n){return[].concat(function(e,n){for(var t=[],i=w((0,r.default)(e.getTypeMap()),(0,r.default)(n.getTypeMap())),o=0,a=i.removed;o<a.length;o++){var s=a[o];t.push({type:v.TYPE_REMOVED,description:(0,c.isSpecifiedScalarType)(s)?"Standard scalar ".concat(s.name," was removed because it is not referenced anymore."):"".concat(s.name," was removed.")})}for(var u=0,l=i.persisted;u<l.length;u++){var p=l[u],f=p[0],m=p[1];(0,d.isEnumType)(f)&&(0,d.isEnumType)(m)?t.push.apply(t,b(f,m)):(0,d.isUnionType)(f)&&(0,d.isUnionType)(m)?t.push.apply(t,N(f,m)):(0,d.isInputObjectType)(f)&&(0,d.isInputObjectType)(m)?t.push.apply(t,_(f,m)):(0,d.isObjectType)(f)&&(0,d.isObjectType)(m)||(0,d.isInterfaceType)(f)&&(0,d.isInterfaceType)(m)?t.push.apply(t,I(f,m).concat(j(f,m))):f.constructor!==m.constructor&&t.push({type:v.TYPE_CHANGED_KIND,description:"".concat(f.name," changed from ")+"".concat(D(f)," to ").concat(D(m),".")})}return t}(e,n),function(e,n){for(var t=[],r=w(e.getDirectives(),n.getDirectives()),i=0,o=r.removed;i<o.length;i++){var a=o[i];t.push({type:v.DIRECTIVE_REMOVED,description:"".concat(a.name," was removed.")})}for(var s=0,u=r.persisted;s<u.length;s++){for(var l=u[s],c=l[0],p=l[1],f=w(c.args,p.args),m=0,h=f.added;m<h.length;m++){var y=h[m];(0,d.isRequiredArgument)(y)&&t.push({type:v.REQUIRED_DIRECTIVE_ARG_ADDED,description:"A required arg ".concat(y.name," on directive ").concat(c.name," was added.")})}for(var g=0,T=f.removed;g<T.length;g++){var E=T[g];t.push({type:v.DIRECTIVE_ARG_REMOVED,description:"".concat(E.name," was removed from ").concat(c.name,".")})}c.isRepeatable&&!p.isRepeatable&&t.push({type:v.DIRECTIVE_REPEATABLE_REMOVED,description:"Repeatable flag was removed from ".concat(c.name,".")});for(var _=0,N=c.locations;_<N.length;_++){var b=N[_];-1===p.locations.indexOf(b)&&t.push({type:v.DIRECTIVE_LOCATION_REMOVED,description:"".concat(b," was removed from ").concat(c.name,".")})}}return t}(e,n))}function _(e,n){for(var t=[],i=w((0,r.default)(e.getFields()),(0,r.default)(n.getFields())),o=0,a=i.added;o<a.length;o++){var s=a[o];(0,d.isRequiredInputField)(s)?t.push({type:v.REQUIRED_INPUT_FIELD_ADDED,description:"A required field ".concat(s.name," on input type ").concat(e.name," was added.")}):t.push({type:y.OPTIONAL_INPUT_FIELD_ADDED,description:"An optional field ".concat(s.name," on input type ").concat(e.name," was added.")})}for(var u=0,l=i.removed;u<l.length;u++){var c=l[u];t.push({type:v.FIELD_REMOVED,description:"".concat(e.name,".").concat(c.name," was removed.")})}for(var p=0,f=i.persisted;p<f.length;p++){var m=f[p],h=m[0],g=m[1];S(h.type,g.type)||t.push({type:v.FIELD_CHANGED_KIND,description:"".concat(e.name,".").concat(h.name," changed type from ")+"".concat(String(h.type)," to ").concat(String(g.type),".")})}return t}function N(e,n){for(var t=[],r=w(e.getTypes(),n.getTypes()),i=0,o=r.added;i<o.length;i++){var a=o[i];t.push({type:y.TYPE_ADDED_TO_UNION,description:"".concat(a.name," was added to union type ").concat(e.name,".")})}for(var s=0,u=r.removed;s<u.length;s++){var l=u[s];t.push({type:v.TYPE_REMOVED_FROM_UNION,description:"".concat(l.name," was removed from union type ").concat(e.name,".")})}return t}function b(e,n){for(var t=[],r=w(e.getValues(),n.getValues()),i=0,o=r.added;i<o.length;i++){var a=o[i];t.push({type:y.VALUE_ADDED_TO_ENUM,description:"".concat(a.name," was added to enum type ").concat(e.name,".")})}for(var s=0,u=r.removed;s<u.length;s++){var l=u[s];t.push({type:v.VALUE_REMOVED_FROM_ENUM,description:"".concat(l.name," was removed from enum type ").concat(e.name,".")})}return t}function j(e,n){for(var t=[],r=w(e.getInterfaces(),n.getInterfaces()),i=0,o=r.added;i<o.length;i++){var a=o[i];t.push({type:y.IMPLEMENTED_INTERFACE_ADDED,description:"".concat(a.name," added to interfaces implemented by ").concat(e.name,".")})}for(var s=0,u=r.removed;s<u.length;s++){var l=u[s];t.push({type:v.IMPLEMENTED_INTERFACE_REMOVED,description:"".concat(e.name," no longer implements interface ").concat(l.name,".")})}return t}function I(e,n){for(var t=[],i=w((0,r.default)(e.getFields()),(0,r.default)(n.getFields())),o=0,a=i.removed;o<a.length;o++){var s=a[o];t.push({type:v.FIELD_REMOVED,description:"".concat(e.name,".").concat(s.name," was removed.")})}for(var u=0,l=i.persisted;u<l.length;u++){var c=l[u],d=c[0],p=c[1];t.push.apply(t,O(e,d,p)),L(d.type,p.type)||t.push({type:v.FIELD_CHANGED_KIND,description:"".concat(e.name,".").concat(d.name," changed type from ")+"".concat(String(d.type)," to ").concat(String(p.type),".")})}return t}function O(e,n,t){for(var r=[],i=w(n.args,t.args),o=0,a=i.removed;o<a.length;o++){var s=a[o];r.push({type:v.ARG_REMOVED,description:"".concat(e.name,".").concat(n.name," arg ").concat(s.name," was removed.")})}for(var u=0,l=i.persisted;u<l.length;u++){var c=l[u],p=c[0],f=c[1];if(S(p.type,f.type)){if(void 0!==p.defaultValue)if(void 0===f.defaultValue)r.push({type:y.ARG_DEFAULT_VALUE_CHANGE,description:"".concat(e.name,".").concat(n.name," arg ").concat(p.name," defaultValue was removed.")});else{var m=A(p.defaultValue,p.type),h=A(f.defaultValue,f.type);m!==h&&r.push({type:y.ARG_DEFAULT_VALUE_CHANGE,description:"".concat(e.name,".").concat(n.name," arg ").concat(p.name," has changed defaultValue from ").concat(m," to ").concat(h,".")})}}else r.push({type:v.ARG_CHANGED_KIND,description:"".concat(e.name,".").concat(n.name," arg ").concat(p.name," has changed type from ")+"".concat(String(p.type)," to ").concat(String(f.type),".")})}for(var g=0,T=i.added;g<T.length;g++){var E=T[g];(0,d.isRequiredArgument)(E)?r.push({type:v.REQUIRED_ARG_ADDED,description:"A required arg ".concat(E.name," on ").concat(e.name,".").concat(n.name," was added.")}):r.push({type:y.OPTIONAL_ARG_ADDED,description:"An optional arg ".concat(E.name," on ").concat(e.name,".").concat(n.name," was added.")})}return r}function L(e,n){return(0,d.isListType)(e)?(0,d.isListType)(n)&&L(e.ofType,n.ofType)||(0,d.isNonNullType)(n)&&L(e,n.ofType):(0,d.isNonNullType)(e)?(0,d.isNonNullType)(n)&&L(e.ofType,n.ofType):(0,d.isNamedType)(n)&&e.name===n.name||(0,d.isNonNullType)(n)&&L(e,n.ofType)}function S(e,n){return(0,d.isListType)(e)?(0,d.isListType)(n)&&S(e.ofType,n.ofType):(0,d.isNonNullType)(e)?(0,d.isNonNullType)(n)&&S(e.ofType,n.ofType)||!(0,d.isNonNullType)(n)&&S(e.ofType,n):(0,d.isNamedType)(n)&&e.name===n.name}function D(e){return(0,d.isScalarType)(e)?"a Scalar type":(0,d.isObjectType)(e)?"an Object type":(0,d.isInterfaceType)(e)?"an Interface type":(0,d.isUnionType)(e)?"a Union type":(0,d.isEnumType)(e)?"an Enum type":(0,d.isInputObjectType)(e)?"an Input type":void(0,a.default)(0,"Unexpected type: "+(0,o.default)(e))}function A(e,n){var t=(0,p.astFromValue)(e,n);null!=t||(0,a.default)(0);var r=(0,l.visit)(t,{ObjectValue:function(e){var n=[].concat(e.fields);return n.sort((function(e,n){return(0,s.default)(e.name.value,n.name.value)})),m(m({},e),{},{fields:n})}});return(0,u.print)(r)}function w(e,n){for(var t=[],r=[],o=[],a=(0,i.default)(e,(function(e){return e.name})),s=(0,i.default)(n,(function(e){return e.name})),u=0;u<e.length;u++){var l=e[u],c=s[l.name];void 0===c?r.push(l):o.push([l,c])}for(var d=0;d<n.length;d++){var p=n[d];void 0===a[p.name]&&t.push(p)}return{added:t,persisted:o,removed:r}}},"./node_modules/graphql/utilities/findDeprecatedUsages.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{findDeprecatedUsages:()=>o});var r=t("./node_modules/graphql/validation/validate.mjs"),i=t("./node_modules/graphql/validation/rules/custom/NoDeprecatedCustomRule.mjs");function o(e,n){return(0,r.validate)(e,n,[i.NoDeprecatedCustomRule])}},"./node_modules/graphql/utilities/getIntrospectionQuery.mjs":(e,n,t)=>{"use strict";function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e){var n=function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}({descriptions:!0,specifiedByUrl:!1,directiveIsRepeatable:!1,schemaDescription:!1,inputValueDeprecation:!1},e),t=n.descriptions?"description":"",o=n.specifiedByUrl?"specifiedByUrl":"",a=n.directiveIsRepeatable?"isRepeatable":"",s=n.schemaDescription?t:"";function u(e){return n.inputValueDeprecation?e:""}return"\n    query IntrospectionQuery {\n      __schema {\n        ".concat(s,"\n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          ").concat(t,"\n          ").concat(a,"\n          locations\n          args").concat(u("(includeDeprecated: true)")," {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      ").concat(t,"\n      ").concat(o,"\n      fields(includeDeprecated: true) {\n        name\n        ").concat(t,"\n        args").concat(u("(includeDeprecated: true)")," {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields").concat(u("(includeDeprecated: true)")," {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        ").concat(t,"\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      ").concat(t,"\n      type { ...TypeRef }\n      defaultValue\n      ").concat(u("isDeprecated"),"\n      ").concat(u("deprecationReason"),"\n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ")}t.r(n),t.d(n,{getIntrospectionQuery:()=>o})},"./node_modules/graphql/utilities/getOperationAST.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{getOperationAST:()=>i});var r=t("./node_modules/graphql/language/kinds.mjs");function i(e,n){for(var t=null,i=0,o=e.definitions;i<o.length;i++){var a,s=o[i];if(s.kind===r.Kind.OPERATION_DEFINITION)if(null==n){if(t)return null;t=s}else if((null===(a=s.name)||void 0===a?void 0:a.value)===n)return s}return t}},"./node_modules/graphql/utilities/getOperationRootType.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{getOperationRootType:()=>i});var r=t("./node_modules/graphql/error/GraphQLError.mjs");function i(e,n){if("query"===n.operation){var t=e.getQueryType();if(!t)throw new r.GraphQLError("Schema does not define the required query root type.",n);return t}if("mutation"===n.operation){var i=e.getMutationType();if(!i)throw new r.GraphQLError("Schema is not configured for mutations.",n);return i}if("subscription"===n.operation){var o=e.getSubscriptionType();if(!o)throw new r.GraphQLError("Schema is not configured for subscriptions.",n);return o}throw new r.GraphQLError("Can only have query, mutation and subscription operations.",n)}},"./node_modules/graphql/utilities/introspectionFromSchema.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{introspectionFromSchema:()=>l});var r=t("./node_modules/graphql/jsutils/invariant.mjs"),i=t("./node_modules/graphql/language/parser.mjs"),o=t("./node_modules/graphql/execution/execute.mjs"),a=t("./node_modules/graphql/utilities/getIntrospectionQuery.mjs");function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function u(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){u(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}({specifiedByUrl:!0,directiveIsRepeatable:!0,schemaDescription:!0,inputValueDeprecation:!0},n),l=(0,i.parse)((0,a.getIntrospectionQuery)(t)),c=(0,o.executeSync)({schema:e,document:l});return!c.errors&&c.data||(0,r.default)(0),c.data}},"./node_modules/graphql/utilities/lexicographicSortSchema.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{lexicographicSortSchema:()=>h});var r=t("./node_modules/graphql/polyfills/objectValues.mjs"),i=t("./node_modules/graphql/jsutils/inspect.mjs"),o=t("./node_modules/graphql/jsutils/invariant.mjs"),a=t("./node_modules/graphql/jsutils/keyValMap.mjs"),s=t("./node_modules/graphql/jsutils/naturalCompare.mjs"),u=t("./node_modules/graphql/type/schema.mjs"),l=t("./node_modules/graphql/type/directives.mjs"),c=t("./node_modules/graphql/type/introspection.mjs"),d=t("./node_modules/graphql/type/definition.mjs");function p(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function f(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?p(Object(t),!0).forEach((function(n){m(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):p(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function m(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function h(e){var n=e.toConfig(),t=(0,a.default)(y(n.types),(function(e){return e.name}),(function(e){if((0,d.isScalarType)(e)||(0,c.isIntrospectionType)(e))return e;if((0,d.isObjectType)(e)){var n=e.toConfig();return new d.GraphQLObjectType(f(f({},n),{},{interfaces:function(){return E(n.interfaces)},fields:function(){return T(n.fields)}}))}if((0,d.isInterfaceType)(e)){var t=e.toConfig();return new d.GraphQLInterfaceType(f(f({},t),{},{interfaces:function(){return E(t.interfaces)},fields:function(){return T(t.fields)}}))}if((0,d.isUnionType)(e)){var r=e.toConfig();return new d.GraphQLUnionType(f(f({},r),{},{types:function(){return E(r.types)}}))}if((0,d.isEnumType)(e)){var a=e.toConfig();return new d.GraphQLEnumType(f(f({},a),{},{values:v(a.values)}))}if((0,d.isInputObjectType)(e)){var u=e.toConfig();return new d.GraphQLInputObjectType(f(f({},u),{},{fields:function(){return v(u.fields,(function(e){return f(f({},e),{},{type:s(e.type)})}))}}))}(0,o.default)(0,"Unexpected type: "+(0,i.default)(e))}));return new u.GraphQLSchema(f(f({},n),{},{types:(0,r.default)(t),directives:y(n.directives).map((function(e){var n=e.toConfig();return new l.GraphQLDirective(f(f({},n),{},{locations:g(n.locations,(function(e){return e})),args:h(n.args)}))})),query:m(n.query),mutation:m(n.mutation),subscription:m(n.subscription)}));function s(e){return(0,d.isListType)(e)?new d.GraphQLList(s(e.ofType)):(0,d.isNonNullType)(e)?new d.GraphQLNonNull(s(e.ofType)):p(e)}function p(e){return t[e.name]}function m(e){return e&&p(e)}function h(e){return v(e,(function(e){return f(f({},e),{},{type:s(e.type)})}))}function T(e){return v(e,(function(e){return f(f({},e),{},{type:s(e.type),args:h(e.args)})}))}function E(e){return y(e).map(p)}}function v(e,n){for(var t=Object.create(null),r=g(Object.keys(e),(function(e){return e})),i=0;i<r.length;i++){var o=r[i],a=e[o];t[o]=n?n(a):a}return t}function y(e){return g(e,(function(e){return e.name}))}function g(e,n){return e.slice().sort((function(e,t){var r=n(e),i=n(t);return(0,s.default)(r,i)}))}},"./node_modules/graphql/utilities/printSchema.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{printSchema:()=>f,printIntrospectionSchema:()=>m,printType:()=>g});var r=t("./node_modules/graphql/polyfills/objectValues.mjs"),i=t("./node_modules/graphql/jsutils/inspect.mjs"),o=t("./node_modules/graphql/jsutils/invariant.mjs"),a=t("./node_modules/graphql/language/printer.mjs"),s=t("./node_modules/graphql/language/blockString.mjs"),u=t("./node_modules/graphql/type/introspection.mjs"),l=t("./node_modules/graphql/type/scalars.mjs"),c=t("./node_modules/graphql/type/directives.mjs"),d=t("./node_modules/graphql/type/definition.mjs"),p=t("./node_modules/graphql/utilities/astFromValue.mjs");function f(e,n){return v(e,(function(e){return!(0,c.isSpecifiedDirective)(e)}),h,n)}function m(e,n){return v(e,c.isSpecifiedDirective,u.isIntrospectionType,n)}function h(e){return!(0,l.isSpecifiedScalarType)(e)&&!(0,u.isIntrospectionType)(e)}function v(e,n,t,i){var o=e.getDirectives().filter(n),a=(0,r.default)(e.getTypeMap()).filter(t);return[y(e)].concat(o.map((function(e){return function(e,n){return I(n,e)+"directive @"+e.name+N(n,e.args)+(e.isRepeatable?" repeatable":"")+" on "+e.locations.join(" | ")}(e,i)})),a.map((function(e){return g(e,i)}))).filter(Boolean).join("\n\n")+"\n"}function y(e){if(null!=e.description||!function(e){var n=e.getQueryType();if(n&&"Query"!==n.name)return!1;var t=e.getMutationType();if(t&&"Mutation"!==t.name)return!1;var r=e.getSubscriptionType();return!r||"Subscription"===r.name}(e)){var n=[],t=e.getQueryType();t&&n.push("  query: ".concat(t.name));var r=e.getMutationType();r&&n.push("  mutation: ".concat(r.name));var i=e.getSubscriptionType();return i&&n.push("  subscription: ".concat(i.name)),I({},e)+"schema {\n".concat(n.join("\n"),"\n}")}}function g(e,n){return(0,d.isScalarType)(e)?function(e,n){return I(n,e)+"scalar ".concat(e.name)+function(e){if(null==e.specifiedByUrl)return"";var n=e.specifiedByUrl,t=(0,p.astFromValue)(n,l.GraphQLString);return t||(0,o.default)(0,"Unexpected null value returned from `astFromValue` for specifiedByUrl")," @specifiedBy(url: "+(0,a.print)(t)+")"}(e)}(e,n):(0,d.isObjectType)(e)?function(e,n){return I(n,e)+"type ".concat(e.name)+T(e)+E(n,e)}(e,n):(0,d.isInterfaceType)(e)?function(e,n){return I(n,e)+"interface ".concat(e.name)+T(e)+E(n,e)}(e,n):(0,d.isUnionType)(e)?function(e,n){var t=e.getTypes(),r=t.length?" = "+t.join(" | "):"";return I(n,e)+"union "+e.name+r}(e,n):(0,d.isEnumType)(e)?function(e,n){var t=e.getValues().map((function(e,t){return I(n,e,"  ",!t)+"  "+e.name+j(e.deprecationReason)}));return I(n,e)+"enum ".concat(e.name)+_(t)}(e,n):(0,d.isInputObjectType)(e)?function(e,n){var t=(0,r.default)(e.getFields()).map((function(e,t){return I(n,e,"  ",!t)+"  "+b(e)}));return I(n,e)+"input ".concat(e.name)+_(t)}(e,n):void(0,o.default)(0,"Unexpected type: "+(0,i.default)(e))}function T(e){var n=e.getInterfaces();return n.length?" implements "+n.map((function(e){return e.name})).join(" & "):""}function E(e,n){return _((0,r.default)(n.getFields()).map((function(n,t){return I(e,n,"  ",!t)+"  "+n.name+N(e,n.args,"  ")+": "+String(n.type)+j(n.deprecationReason)})))}function _(e){return 0!==e.length?" {\n"+e.join("\n")+"\n}":""}function N(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";return 0===n.length?"":n.every((function(e){return!e.description}))?"("+n.map(b).join(", ")+")":"(\n"+n.map((function(n,r){return I(e,n,"  "+t,!r)+"  "+t+b(n)})).join("\n")+"\n"+t+")"}function b(e){var n=(0,p.astFromValue)(e.defaultValue,e.type),t=e.name+": "+String(e.type);return n&&(t+=" = ".concat((0,a.print)(n))),t+j(e.deprecationReason)}function j(e){if(null==e)return"";var n=(0,p.astFromValue)(e,l.GraphQLString);return n&&e!==c.DEFAULT_DEPRECATION_REASON?" @deprecated(reason: "+(0,a.print)(n)+")":" @deprecated"}function I(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",r=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],i=n.description;if(null==i)return"";if(!0===(null==e?void 0:e.commentDescriptions))return O(i,t,r);var o=i.length>70,a=(0,s.printBlockString)(i,"",o),u=t&&!r?"\n"+t:t;return u+a.replace(/\n/g,"\n"+t)+"\n"}function O(e,n,t){return(n&&!t?"\n":"")+e.split("\n").map((function(e){return n+(""!==e?"# "+e:"#")})).join("\n")+"\n"}},"./node_modules/graphql/utilities/separateOperations.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{separateOperations:()=>o});var r=t("./node_modules/graphql/language/kinds.mjs"),i=t("./node_modules/graphql/language/visitor.mjs");function o(e){for(var n=[],t=Object.create(null),i=0,o=e.definitions;i<o.length;i++){var u=o[i];switch(u.kind){case r.Kind.OPERATION_DEFINITION:n.push(u);break;case r.Kind.FRAGMENT_DEFINITION:t[u.name.value]=s(u.selectionSet)}}for(var l=Object.create(null),c=function(i){for(var o=n[i],u=new Set,c=0,d=s(o.selectionSet);c<d.length;c++){var p=d[c];a(u,t,p)}var f=o.name?o.name.value:"";l[f]={kind:r.Kind.DOCUMENT,definitions:e.definitions.filter((function(e){return e===o||e.kind===r.Kind.FRAGMENT_DEFINITION&&u.has(e.name.value)}))}},d=0;d<n.length;d++)c(d);return l}function a(e,n,t){if(!e.has(t)){e.add(t);var r=n[t];if(void 0!==r)for(var i=0;i<r.length;i++)a(e,n,r[i])}}function s(e){var n=[];return(0,i.visit)(e,{FragmentSpread:function(e){n.push(e.name.value)}}),n}},"./node_modules/graphql/utilities/stripIgnoredCharacters.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{stripIgnoredCharacters:()=>s});var r=t("./node_modules/graphql/language/source.mjs"),i=t("./node_modules/graphql/language/tokenKind.mjs"),o=t("./node_modules/graphql/language/lexer.mjs"),a=t("./node_modules/graphql/language/blockString.mjs");function s(e){for(var n=(0,r.isSource)(e)?e:new r.Source(e),t=n.body,a=new o.Lexer(n),s="",l=!1;a.advance().kind!==i.TokenKind.EOF;){var c=a.token,d=c.kind,p=!(0,o.isPunctuatorTokenKind)(c.kind);l&&(p||c.kind===i.TokenKind.SPREAD)&&(s+=" ");var f=t.slice(c.start,c.end);d===i.TokenKind.BLOCK_STRING?s+=u(f):s+=f,l=p}return s}function u(e){var n=e.slice(3,-3),t=(0,a.dedentBlockStringValue)(n);(0,a.getBlockStringIndentation)(t)>0&&(t="\n"+t);var r=t[t.length-1];return('"'===r&&'\\"""'!==t.slice(-4)||"\\"===r)&&(t+="\n"),'"""'+t+'"""'}},"./node_modules/graphql/utilities/typeComparators.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{isEqualType:()=>i,isTypeSubTypeOf:()=>o,doTypesOverlap:()=>a});var r=t("./node_modules/graphql/type/definition.mjs");function i(e,n){return e===n||((0,r.isNonNullType)(e)&&(0,r.isNonNullType)(n)||!(!(0,r.isListType)(e)||!(0,r.isListType)(n)))&&i(e.ofType,n.ofType)}function o(e,n,t){return n===t||((0,r.isNonNullType)(t)?!!(0,r.isNonNullType)(n)&&o(e,n.ofType,t.ofType):(0,r.isNonNullType)(n)?o(e,n.ofType,t):(0,r.isListType)(t)?!!(0,r.isListType)(n)&&o(e,n.ofType,t.ofType):!(0,r.isListType)(n)&&(0,r.isAbstractType)(t)&&((0,r.isInterfaceType)(n)||(0,r.isObjectType)(n))&&e.isSubType(t,n))}function a(e,n,t){return n===t||((0,r.isAbstractType)(n)?(0,r.isAbstractType)(t)?e.getPossibleTypes(n).some((function(n){return e.isSubType(t,n)})):e.isSubType(n,t):!!(0,r.isAbstractType)(t)&&e.isSubType(t,n))}},"./node_modules/graphql/utilities/typeFromAST.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{typeFromAST:()=>s});var r=t("./node_modules/graphql/jsutils/inspect.mjs"),i=t("./node_modules/graphql/jsutils/invariant.mjs"),o=t("./node_modules/graphql/language/kinds.mjs"),a=t("./node_modules/graphql/type/definition.mjs");function s(e,n){var t;return n.kind===o.Kind.LIST_TYPE?(t=s(e,n.type))&&new a.GraphQLList(t):n.kind===o.Kind.NON_NULL_TYPE?(t=s(e,n.type))&&new a.GraphQLNonNull(t):n.kind===o.Kind.NAMED_TYPE?e.getType(n.name.value):void(0,i.default)(0,"Unexpected type node: "+(0,r.default)(n))}},"./node_modules/graphql/utilities/valueFromAST.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{valueFromAST:()=>l});var r=t("./node_modules/graphql/polyfills/objectValues.mjs"),i=t("./node_modules/graphql/jsutils/keyMap.mjs"),o=t("./node_modules/graphql/jsutils/inspect.mjs"),a=t("./node_modules/graphql/jsutils/invariant.mjs"),s=t("./node_modules/graphql/language/kinds.mjs"),u=t("./node_modules/graphql/type/definition.mjs");function l(e,n,t){if(e){if(e.kind===s.Kind.VARIABLE){var d=e.name.value;if(null==t||void 0===t[d])return;var p=t[d];if(null===p&&(0,u.isNonNullType)(n))return;return p}if((0,u.isNonNullType)(n)){if(e.kind===s.Kind.NULL)return;return l(e,n.ofType,t)}if(e.kind===s.Kind.NULL)return null;if((0,u.isListType)(n)){var f=n.ofType;if(e.kind===s.Kind.LIST){for(var m=[],h=0,v=e.values;h<v.length;h++){var y=v[h];if(c(y,t)){if((0,u.isNonNullType)(f))return;m.push(null)}else{var g=l(y,f,t);if(void 0===g)return;m.push(g)}}return m}var T=l(e,f,t);if(void 0===T)return;return[T]}if((0,u.isInputObjectType)(n)){if(e.kind!==s.Kind.OBJECT)return;for(var E=Object.create(null),_=(0,i.default)(e.fields,(function(e){return e.name.value})),N=0,b=(0,r.default)(n.getFields());N<b.length;N++){var j=b[N],I=_[j.name];if(I&&!c(I.value,t)){var O=l(I.value,j.type,t);if(void 0===O)return;E[j.name]=O}else if(void 0!==j.defaultValue)E[j.name]=j.defaultValue;else if((0,u.isNonNullType)(j.type))return}return E}if((0,u.isLeafType)(n)){var L;try{L=n.parseLiteral(e,t)}catch(e){return}if(void 0===L)return;return L}(0,a.default)(0,"Unexpected input type: "+(0,o.default)(n))}}function c(e,n){return e.kind===s.Kind.VARIABLE&&(null==n||void 0===n[e.name.value])}},"./node_modules/graphql/utilities/valueFromASTUntyped.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{valueFromASTUntyped:()=>s});var r=t("./node_modules/graphql/jsutils/inspect.mjs"),i=t("./node_modules/graphql/jsutils/invariant.mjs"),o=t("./node_modules/graphql/jsutils/keyValMap.mjs"),a=t("./node_modules/graphql/language/kinds.mjs");function s(e,n){switch(e.kind){case a.Kind.NULL:return null;case a.Kind.INT:return parseInt(e.value,10);case a.Kind.FLOAT:return parseFloat(e.value);case a.Kind.STRING:case a.Kind.ENUM:case a.Kind.BOOLEAN:return e.value;case a.Kind.LIST:return e.values.map((function(e){return s(e,n)}));case a.Kind.OBJECT:return(0,o.default)(e.fields,(function(e){return e.name.value}),(function(e){return s(e.value,n)}));case a.Kind.VARIABLE:return null==n?void 0:n[e.name.value]}(0,i.default)(0,"Unexpected value node: "+(0,r.default)(e))}},"./node_modules/graphql/validation/ValidationContext.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{ASTValidationContext:()=>s,SDLValidationContext:()=>u,ValidationContext:()=>l});var r=t("./node_modules/graphql/language/kinds.mjs"),i=t("./node_modules/graphql/language/visitor.mjs"),o=t("./node_modules/graphql/utilities/TypeInfo.mjs");function a(e,n){e.prototype=Object.create(n.prototype),e.prototype.constructor=e,e.__proto__=n}var s=function(){function e(e,n){this._ast=e,this._fragments=void 0,this._fragmentSpreads=new Map,this._recursivelyReferencedFragments=new Map,this._onError=n}var n=e.prototype;return n.reportError=function(e){this._onError(e)},n.getDocument=function(){return this._ast},n.getFragment=function(e){var n=this._fragments;return n||(this._fragments=n=this.getDocument().definitions.reduce((function(e,n){return n.kind===r.Kind.FRAGMENT_DEFINITION&&(e[n.name.value]=n),e}),Object.create(null))),n[e]},n.getFragmentSpreads=function(e){var n=this._fragmentSpreads.get(e);if(!n){n=[];for(var t=[e];0!==t.length;)for(var i=0,o=t.pop().selections;i<o.length;i++){var a=o[i];a.kind===r.Kind.FRAGMENT_SPREAD?n.push(a):a.selectionSet&&t.push(a.selectionSet)}this._fragmentSpreads.set(e,n)}return n},n.getRecursivelyReferencedFragments=function(e){var n=this._recursivelyReferencedFragments.get(e);if(!n){n=[];for(var t=Object.create(null),r=[e.selectionSet];0!==r.length;)for(var i=r.pop(),o=0,a=this.getFragmentSpreads(i);o<a.length;o++){var s=a[o].name.value;if(!0!==t[s]){t[s]=!0;var u=this.getFragment(s);u&&(n.push(u),r.push(u.selectionSet))}}this._recursivelyReferencedFragments.set(e,n)}return n},e}(),u=function(e){function n(n,t,r){var i;return(i=e.call(this,n,r)||this)._schema=t,i}return a(n,e),n.prototype.getSchema=function(){return this._schema},n}(s),l=function(e){function n(n,t,r,i){var o;return(o=e.call(this,t,i)||this)._schema=n,o._typeInfo=r,o._variableUsages=new Map,o._recursiveVariableUsages=new Map,o}a(n,e);var t=n.prototype;return t.getSchema=function(){return this._schema},t.getVariableUsages=function(e){var n=this._variableUsages.get(e);if(!n){var t=[],r=new o.TypeInfo(this._schema);(0,i.visit)(e,(0,o.visitWithTypeInfo)(r,{VariableDefinition:function(){return!1},Variable:function(e){t.push({node:e,type:r.getInputType(),defaultValue:r.getDefaultValue()})}})),n=t,this._variableUsages.set(e,n)}return n},t.getRecursiveVariableUsages=function(e){var n=this._recursiveVariableUsages.get(e);if(!n){n=this.getVariableUsages(e);for(var t=0,r=this.getRecursivelyReferencedFragments(e);t<r.length;t++){var i=r[t];n=n.concat(this.getVariableUsages(i))}this._recursiveVariableUsages.set(e,n)}return n},t.getType=function(){return this._typeInfo.getType()},t.getParentType=function(){return this._typeInfo.getParentType()},t.getInputType=function(){return this._typeInfo.getInputType()},t.getParentInputType=function(){return this._typeInfo.getParentInputType()},t.getFieldDef=function(){return this._typeInfo.getFieldDef()},t.getDirective=function(){return this._typeInfo.getDirective()},t.getArgument=function(){return this._typeInfo.getArgument()},t.getEnumValue=function(){return this._typeInfo.getEnumValue()},n}(s)},"./node_modules/graphql/validation/rules/ExecutableDefinitionsRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{ExecutableDefinitionsRule:()=>a});var r=t("./node_modules/graphql/error/GraphQLError.mjs"),i=t("./node_modules/graphql/language/kinds.mjs"),o=t("./node_modules/graphql/language/predicates.mjs");function a(e){return{Document:function(n){for(var t=0,a=n.definitions;t<a.length;t++){var s=a[t];if(!(0,o.isExecutableDefinitionNode)(s)){var u=s.kind===i.Kind.SCHEMA_DEFINITION||s.kind===i.Kind.SCHEMA_EXTENSION?"schema":'"'+s.name.value+'"';e.reportError(new r.GraphQLError("The ".concat(u," definition is not executable."),s))}}return!1}}}},"./node_modules/graphql/validation/rules/FieldsOnCorrectTypeRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{FieldsOnCorrectTypeRule:()=>l});var r=t("./node_modules/graphql/polyfills/arrayFrom.mjs"),i=t("./node_modules/graphql/jsutils/didYouMean.mjs"),o=t("./node_modules/graphql/jsutils/suggestionList.mjs"),a=t("./node_modules/graphql/jsutils/naturalCompare.mjs"),s=t("./node_modules/graphql/error/GraphQLError.mjs"),u=t("./node_modules/graphql/type/definition.mjs");function l(e){return{Field:function(n){var t=e.getParentType();if(t&&!e.getFieldDef()){var l=e.getSchema(),c=n.name.value,d=(0,i.default)("to use an inline fragment on",function(e,n,t){if(!(0,u.isAbstractType)(n))return[];for(var i=new Set,o=Object.create(null),s=0,l=e.getPossibleTypes(n);s<l.length;s++){var c=l[s];if(c.getFields()[t]){i.add(c),o[c.name]=1;for(var d=0,p=c.getInterfaces();d<p.length;d++){var f,m=p[d];m.getFields()[t]&&(i.add(m),o[m.name]=(null!==(f=o[m.name])&&void 0!==f?f:0)+1)}}}return(0,r.default)(i).sort((function(n,t){var r=o[t.name]-o[n.name];return 0!==r?r:(0,u.isInterfaceType)(n)&&e.isSubType(n,t)?-1:(0,u.isInterfaceType)(t)&&e.isSubType(t,n)?1:(0,a.default)(n.name,t.name)})).map((function(e){return e.name}))}(l,t,c));""===d&&(d=(0,i.default)(function(e,n){if((0,u.isObjectType)(e)||(0,u.isInterfaceType)(e)){var t=Object.keys(e.getFields());return(0,o.default)(n,t)}return[]}(t,c))),e.reportError(new s.GraphQLError('Cannot query field "'.concat(c,'" on type "').concat(t.name,'".')+d,n))}}}}},"./node_modules/graphql/validation/rules/FragmentsOnCompositeTypesRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{FragmentsOnCompositeTypesRule:()=>s});var r=t("./node_modules/graphql/error/GraphQLError.mjs"),i=t("./node_modules/graphql/language/printer.mjs"),o=t("./node_modules/graphql/type/definition.mjs"),a=t("./node_modules/graphql/utilities/typeFromAST.mjs");function s(e){return{InlineFragment:function(n){var t=n.typeCondition;if(t){var s=(0,a.typeFromAST)(e.getSchema(),t);if(s&&!(0,o.isCompositeType)(s)){var u=(0,i.print)(t);e.reportError(new r.GraphQLError('Fragment cannot condition on non composite type "'.concat(u,'".'),t))}}},FragmentDefinition:function(n){var t=(0,a.typeFromAST)(e.getSchema(),n.typeCondition);if(t&&!(0,o.isCompositeType)(t)){var s=(0,i.print)(n.typeCondition);e.reportError(new r.GraphQLError('Fragment "'.concat(n.name.value,'" cannot condition on non composite type "').concat(s,'".'),n.typeCondition))}}}}},"./node_modules/graphql/validation/rules/KnownArgumentNamesRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{KnownArgumentNamesRule:()=>d,KnownArgumentNamesOnDirectivesRule:()=>p});var r=t("./node_modules/graphql/jsutils/didYouMean.mjs"),i=t("./node_modules/graphql/jsutils/suggestionList.mjs"),o=t("./node_modules/graphql/error/GraphQLError.mjs"),a=t("./node_modules/graphql/language/kinds.mjs"),s=t("./node_modules/graphql/type/directives.mjs");function u(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?u(Object(t),!0).forEach((function(n){c(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):u(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function d(e){return l(l({},p(e)),{},{Argument:function(n){var t=e.getArgument(),a=e.getFieldDef(),s=e.getParentType();if(!t&&a&&s){var u=n.name.value,l=a.args.map((function(e){return e.name})),c=(0,i.default)(u,l);e.reportError(new o.GraphQLError('Unknown argument "'.concat(u,'" on field "').concat(s.name,".").concat(a.name,'".')+(0,r.default)(c),n))}}})}function p(e){for(var n=Object.create(null),t=e.getSchema(),u=t?t.getDirectives():s.specifiedDirectives,l=0;l<u.length;l++){var c=u[l];n[c.name]=c.args.map((function(e){return e.name}))}for(var d=e.getDocument().definitions,p=0;p<d.length;p++){var f=d[p];if(f.kind===a.Kind.DIRECTIVE_DEFINITION){var m,h=null!==(m=f.arguments)&&void 0!==m?m:[];n[f.name.value]=h.map((function(e){return e.name.value}))}}return{Directive:function(t){var a=t.name.value,s=n[a];if(t.arguments&&s)for(var u=0,l=t.arguments;u<l.length;u++){var c=l[u],d=c.name.value;if(-1===s.indexOf(d)){var p=(0,i.default)(d,s);e.reportError(new o.GraphQLError('Unknown argument "'.concat(d,'" on directive "@').concat(a,'".')+(0,r.default)(p),c))}}return!1}}}},"./node_modules/graphql/validation/rules/KnownDirectivesRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{KnownDirectivesRule:()=>l});var r=t("./node_modules/graphql/jsutils/inspect.mjs"),i=t("./node_modules/graphql/jsutils/invariant.mjs"),o=t("./node_modules/graphql/error/GraphQLError.mjs"),a=t("./node_modules/graphql/language/kinds.mjs"),s=t("./node_modules/graphql/language/directiveLocation.mjs"),u=t("./node_modules/graphql/type/directives.mjs");function l(e){for(var n=Object.create(null),t=e.getSchema(),l=t?t.getDirectives():u.specifiedDirectives,c=0;c<l.length;c++){var d=l[c];n[d.name]=d.locations}for(var p=e.getDocument().definitions,f=0;f<p.length;f++){var m=p[f];m.kind===a.Kind.DIRECTIVE_DEFINITION&&(n[m.name.value]=m.locations.map((function(e){return e.value})))}return{Directive:function(t,u,l,c,d){var p=t.name.value,f=n[p];if(f){var m=function(e){var n=e[e.length-1];switch(!Array.isArray(n)||(0,i.default)(0),n.kind){case a.Kind.OPERATION_DEFINITION:return function(e){switch(e){case"query":return s.DirectiveLocation.QUERY;case"mutation":return s.DirectiveLocation.MUTATION;case"subscription":return s.DirectiveLocation.SUBSCRIPTION}(0,i.default)(0,"Unexpected operation: "+(0,r.default)(e))}(n.operation);case a.Kind.FIELD:return s.DirectiveLocation.FIELD;case a.Kind.FRAGMENT_SPREAD:return s.DirectiveLocation.FRAGMENT_SPREAD;case a.Kind.INLINE_FRAGMENT:return s.DirectiveLocation.INLINE_FRAGMENT;case a.Kind.FRAGMENT_DEFINITION:return s.DirectiveLocation.FRAGMENT_DEFINITION;case a.Kind.VARIABLE_DEFINITION:return s.DirectiveLocation.VARIABLE_DEFINITION;case a.Kind.SCHEMA_DEFINITION:case a.Kind.SCHEMA_EXTENSION:return s.DirectiveLocation.SCHEMA;case a.Kind.SCALAR_TYPE_DEFINITION:case a.Kind.SCALAR_TYPE_EXTENSION:return s.DirectiveLocation.SCALAR;case a.Kind.OBJECT_TYPE_DEFINITION:case a.Kind.OBJECT_TYPE_EXTENSION:return s.DirectiveLocation.OBJECT;case a.Kind.FIELD_DEFINITION:return s.DirectiveLocation.FIELD_DEFINITION;case a.Kind.INTERFACE_TYPE_DEFINITION:case a.Kind.INTERFACE_TYPE_EXTENSION:return s.DirectiveLocation.INTERFACE;case a.Kind.UNION_TYPE_DEFINITION:case a.Kind.UNION_TYPE_EXTENSION:return s.DirectiveLocation.UNION;case a.Kind.ENUM_TYPE_DEFINITION:case a.Kind.ENUM_TYPE_EXTENSION:return s.DirectiveLocation.ENUM;case a.Kind.ENUM_VALUE_DEFINITION:return s.DirectiveLocation.ENUM_VALUE;case a.Kind.INPUT_OBJECT_TYPE_DEFINITION:case a.Kind.INPUT_OBJECT_TYPE_EXTENSION:return s.DirectiveLocation.INPUT_OBJECT;case a.Kind.INPUT_VALUE_DEFINITION:return e[e.length-3].kind===a.Kind.INPUT_OBJECT_TYPE_DEFINITION?s.DirectiveLocation.INPUT_FIELD_DEFINITION:s.DirectiveLocation.ARGUMENT_DEFINITION}}(d);m&&-1===f.indexOf(m)&&e.reportError(new o.GraphQLError('Directive "@'.concat(p,'" may not be used on ').concat(m,"."),t))}else e.reportError(new o.GraphQLError('Unknown directive "@'.concat(p,'".'),t))}}}},"./node_modules/graphql/validation/rules/KnownFragmentNamesRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{KnownFragmentNamesRule:()=>i});var r=t("./node_modules/graphql/error/GraphQLError.mjs");function i(e){return{FragmentSpread:function(n){var t=n.name.value;e.getFragment(t)||e.reportError(new r.GraphQLError('Unknown fragment "'.concat(t,'".'),n.name))}}}},"./node_modules/graphql/validation/rules/KnownTypeNamesRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{KnownTypeNamesRule:()=>l});var r=t("./node_modules/graphql/jsutils/didYouMean.mjs"),i=t("./node_modules/graphql/jsutils/suggestionList.mjs"),o=t("./node_modules/graphql/error/GraphQLError.mjs"),a=t("./node_modules/graphql/language/predicates.mjs"),s=t("./node_modules/graphql/type/scalars.mjs"),u=t("./node_modules/graphql/type/introspection.mjs");function l(e){for(var n=e.getSchema(),t=n?n.getTypeMap():Object.create(null),s=Object.create(null),u=0,l=e.getDocument().definitions;u<l.length;u++){var d=l[u];(0,a.isTypeDefinitionNode)(d)&&(s[d.name.value]=!0)}var p=Object.keys(t).concat(Object.keys(s));return{NamedType:function(n,u,l,d,f){var m,h=n.name.value;if(!t[h]&&!s[h]){var v,y=null!==(v=f[2])&&void 0!==v?v:l,g=null!=y&&(m=y,!Array.isArray(m)&&((0,a.isTypeSystemDefinitionNode)(m)||(0,a.isTypeSystemExtensionNode)(m)));if(g&&function(e){return-1!==c.indexOf(e)}(h))return;var T=(0,i.default)(h,g?c.concat(p):p);e.reportError(new o.GraphQLError('Unknown type "'.concat(h,'".')+(0,r.default)(T),n))}}}}var c=[].concat(s.specifiedScalarTypes,u.introspectionTypes).map((function(e){return e.name}))},"./node_modules/graphql/validation/rules/LoneAnonymousOperationRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{LoneAnonymousOperationRule:()=>o});var r=t("./node_modules/graphql/error/GraphQLError.mjs"),i=t("./node_modules/graphql/language/kinds.mjs");function o(e){var n=0;return{Document:function(e){n=e.definitions.filter((function(e){return e.kind===i.Kind.OPERATION_DEFINITION})).length},OperationDefinition:function(t){!t.name&&n>1&&e.reportError(new r.GraphQLError("This anonymous operation must be the only defined operation.",t))}}}},"./node_modules/graphql/validation/rules/LoneSchemaDefinitionRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{LoneSchemaDefinitionRule:()=>i});var r=t("./node_modules/graphql/error/GraphQLError.mjs");function i(e){var n,t,i,o=e.getSchema(),a=null!==(n=null!==(t=null!==(i=null==o?void 0:o.astNode)&&void 0!==i?i:null==o?void 0:o.getQueryType())&&void 0!==t?t:null==o?void 0:o.getMutationType())&&void 0!==n?n:null==o?void 0:o.getSubscriptionType(),s=0;return{SchemaDefinition:function(n){a?e.reportError(new r.GraphQLError("Cannot define a new schema within a schema extension.",n)):(s>0&&e.reportError(new r.GraphQLError("Must provide only one schema definition.",n)),++s)}}}},"./node_modules/graphql/validation/rules/NoFragmentCyclesRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{NoFragmentCyclesRule:()=>i});var r=t("./node_modules/graphql/error/GraphQLError.mjs");function i(e){var n=Object.create(null),t=[],i=Object.create(null);return{OperationDefinition:function(){return!1},FragmentDefinition:function(e){return o(e),!1}};function o(a){if(!n[a.name.value]){var s=a.name.value;n[s]=!0;var u=e.getFragmentSpreads(a.selectionSet);if(0!==u.length){i[s]=t.length;for(var l=0;l<u.length;l++){var c=u[l],d=c.name.value,p=i[d];if(t.push(c),void 0===p){var f=e.getFragment(d);f&&o(f)}else{var m=t.slice(p),h=m.slice(0,-1).map((function(e){return'"'+e.name.value+'"'})).join(", ");e.reportError(new r.GraphQLError('Cannot spread fragment "'.concat(d,'" within itself')+(""!==h?" via ".concat(h,"."):"."),m))}t.pop()}i[s]=void 0}}}}},"./node_modules/graphql/validation/rules/NoUndefinedVariablesRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{NoUndefinedVariablesRule:()=>i});var r=t("./node_modules/graphql/error/GraphQLError.mjs");function i(e){var n=Object.create(null);return{OperationDefinition:{enter:function(){n=Object.create(null)},leave:function(t){for(var i=e.getRecursiveVariableUsages(t),o=0;o<i.length;o++){var a=i[o].node,s=a.name.value;!0!==n[s]&&e.reportError(new r.GraphQLError(t.name?'Variable "$'.concat(s,'" is not defined by operation "').concat(t.name.value,'".'):'Variable "$'.concat(s,'" is not defined.'),[a,t]))}}},VariableDefinition:function(e){n[e.variable.name.value]=!0}}}},"./node_modules/graphql/validation/rules/NoUnusedFragmentsRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{NoUnusedFragmentsRule:()=>i});var r=t("./node_modules/graphql/error/GraphQLError.mjs");function i(e){var n=[],t=[];return{OperationDefinition:function(e){return n.push(e),!1},FragmentDefinition:function(e){return t.push(e),!1},Document:{leave:function(){for(var i=Object.create(null),o=0;o<n.length;o++)for(var a=n[o],s=0,u=e.getRecursivelyReferencedFragments(a);s<u.length;s++)i[u[s].name.value]=!0;for(var l=0;l<t.length;l++){var c=t[l],d=c.name.value;!0!==i[d]&&e.reportError(new r.GraphQLError('Fragment "'.concat(d,'" is never used.'),c))}}}}}},"./node_modules/graphql/validation/rules/NoUnusedVariablesRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{NoUnusedVariablesRule:()=>i});var r=t("./node_modules/graphql/error/GraphQLError.mjs");function i(e){var n=[];return{OperationDefinition:{enter:function(){n=[]},leave:function(t){for(var i=Object.create(null),o=e.getRecursiveVariableUsages(t),a=0;a<o.length;a++)i[o[a].node.name.value]=!0;for(var s=0,u=n;s<u.length;s++){var l=u[s],c=l.variable.name.value;!0!==i[c]&&e.reportError(new r.GraphQLError(t.name?'Variable "$'.concat(c,'" is never used in operation "').concat(t.name.value,'".'):'Variable "$'.concat(c,'" is never used.'),l))}}},VariableDefinition:function(e){n.push(e)}}}},"./node_modules/graphql/validation/rules/OverlappingFieldsCanBeMergedRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{OverlappingFieldsCanBeMergedRule:()=>p});var r=t("./node_modules/graphql/polyfills/find.mjs"),i=t("./node_modules/graphql/polyfills/objectEntries.mjs"),o=t("./node_modules/graphql/jsutils/inspect.mjs"),a=t("./node_modules/graphql/error/GraphQLError.mjs"),s=t("./node_modules/graphql/language/kinds.mjs"),u=t("./node_modules/graphql/language/printer.mjs"),l=t("./node_modules/graphql/type/definition.mjs"),c=t("./node_modules/graphql/utilities/typeFromAST.mjs");function d(e){return Array.isArray(e)?e.map((function(e){var n=e[0],t=e[1];return'subfields "'.concat(n,'" conflict because ')+d(t)})).join(" and "):e}function p(e){var n=new _,t=new Map;return{SelectionSet:function(r){for(var o=function(e,n,t,r,o){var a=[],s=g(e,n,r,o),u=s[0],l=s[1];if(function(e,n,t,r,o){for(var a=0,s=(0,i.default)(o);a<s.length;a++){var u=s[a],l=u[0],c=u[1];if(c.length>1)for(var d=0;d<c.length;d++)for(var p=d+1;p<c.length;p++){var f=v(e,t,r,!1,l,c[d],c[p]);f&&n.push(f)}}}(e,a,n,t,u),0!==l.length)for(var c=0;c<l.length;c++){f(e,a,n,t,!1,u,l[c]);for(var d=c+1;d<l.length;d++)m(e,a,n,t,!1,l[c],l[d])}return a}(e,t,n,e.getParentType(),r),s=0;s<o.length;s++){var u=o[s],l=u[0],c=l[0],p=l[1],h=u[1],y=u[2],T=d(p);e.reportError(new a.GraphQLError('Fields "'.concat(c,'" conflict because ').concat(T,". Use different aliases on the fields to fetch both if this was intentional."),h.concat(y)))}}}}function f(e,n,t,r,i,o,a){var s=e.getFragment(a);if(s){var u=T(e,t,s),l=u[0],c=u[1];if(o!==l){h(e,n,t,r,i,o,l);for(var d=0;d<c.length;d++)f(e,n,t,r,i,o,c[d])}}}function m(e,n,t,r,i,o,a){if(o!==a&&!r.has(o,a,i)){r.add(o,a,i);var s=e.getFragment(o),u=e.getFragment(a);if(s&&u){var l=T(e,t,s),c=l[0],d=l[1],p=T(e,t,u),f=p[0],v=p[1];h(e,n,t,r,i,c,f);for(var y=0;y<v.length;y++)m(e,n,t,r,i,o,v[y]);for(var g=0;g<d.length;g++)m(e,n,t,r,i,d[g],a)}}}function h(e,n,t,r,i,o,a){for(var s=0,u=Object.keys(o);s<u.length;s++){var l=u[s],c=a[l];if(c)for(var d=o[l],p=0;p<d.length;p++)for(var f=0;f<c.length;f++){var m=v(e,t,r,i,l,d[p],c[f]);m&&n.push(m)}}}function v(e,n,t,i,a,s,c){var d,p,v=s[0],T=s[1],E=s[2],_=c[0],N=c[1],b=c[2],j=i||v!==_&&(0,l.isObjectType)(v)&&(0,l.isObjectType)(_);if(!j){var I,O,L=T.name.value,S=N.name.value;if(L!==S)return[[a,'"'.concat(L,'" and "').concat(S,'" are different fields')],[T],[N]];if(d=null!==(I=T.arguments)&&void 0!==I?I:[],p=null!==(O=N.arguments)&&void 0!==O?O:[],d.length!==p.length||!d.every((function(e){var n,t,i=(0,r.default)(p,(function(n){return n.name.value===e.name.value}));return!!i&&(n=e.value,t=i.value,(0,u.print)(n)===(0,u.print)(t))})))return[[a,"they have differing arguments"],[T],[N]]}var D=null==E?void 0:E.type,A=null==b?void 0:b.type;if(D&&A&&y(D,A))return[[a,'they return conflicting types "'.concat((0,o.default)(D),'" and "').concat((0,o.default)(A),'"')],[T],[N]];var w=T.selectionSet,R=N.selectionSet;if(w&&R){var k=function(e,n,t,r,i,o,a,s){var u=[],l=g(e,n,i,o),c=l[0],d=l[1],p=g(e,n,a,s),v=p[0],y=p[1];if(h(e,u,n,t,r,c,v),0!==y.length)for(var T=0;T<y.length;T++)f(e,u,n,t,r,c,y[T]);if(0!==d.length)for(var E=0;E<d.length;E++)f(e,u,n,t,r,v,d[E]);for(var _=0;_<d.length;_++)for(var N=0;N<y.length;N++)m(e,u,n,t,r,d[_],y[N]);return u}(e,n,t,j,(0,l.getNamedType)(D),w,(0,l.getNamedType)(A),R);return function(e,n,t,r){if(e.length>0)return[[n,e.map((function(e){return e[0]}))],e.reduce((function(e,n){var t=n[1];return e.concat(t)}),[t]),e.reduce((function(e,n){var t=n[2];return e.concat(t)}),[r])]}(k,a,T,N)}}function y(e,n){return(0,l.isListType)(e)?!(0,l.isListType)(n)||y(e.ofType,n.ofType):!!(0,l.isListType)(n)||((0,l.isNonNullType)(e)?!(0,l.isNonNullType)(n)||y(e.ofType,n.ofType):!!(0,l.isNonNullType)(n)||!(!(0,l.isLeafType)(e)&&!(0,l.isLeafType)(n))&&e!==n)}function g(e,n,t,r){var i=n.get(r);if(!i){var o=Object.create(null),a=Object.create(null);E(e,t,r,o,a),i=[o,Object.keys(a)],n.set(r,i)}return i}function T(e,n,t){var r=n.get(t.selectionSet);if(r)return r;var i=(0,c.typeFromAST)(e.getSchema(),t.typeCondition);return g(e,n,i,t.selectionSet)}function E(e,n,t,r,i){for(var o=0,a=t.selections;o<a.length;o++){var u=a[o];switch(u.kind){case s.Kind.FIELD:var d=u.name.value,p=void 0;((0,l.isObjectType)(n)||(0,l.isInterfaceType)(n))&&(p=n.getFields()[d]);var f=u.alias?u.alias.value:d;r[f]||(r[f]=[]),r[f].push([n,u,p]);break;case s.Kind.FRAGMENT_SPREAD:i[u.name.value]=!0;break;case s.Kind.INLINE_FRAGMENT:var m=u.typeCondition,h=m?(0,c.typeFromAST)(e.getSchema(),m):n;E(e,h,u.selectionSet,r,i)}}}var _=function(){function e(){this._data=Object.create(null)}var n=e.prototype;return n.has=function(e,n,t){var r=this._data[e],i=r&&r[n];return void 0!==i&&(!1!==t||!1===i)},n.add=function(e,n,t){this._pairSetAdd(e,n,t),this._pairSetAdd(n,e,t)},n._pairSetAdd=function(e,n,t){var r=this._data[e];r||(r=Object.create(null),this._data[e]=r),r[n]=t},e}()},"./node_modules/graphql/validation/rules/PossibleFragmentSpreadsRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{PossibleFragmentSpreadsRule:()=>u});var r=t("./node_modules/graphql/jsutils/inspect.mjs"),i=t("./node_modules/graphql/error/GraphQLError.mjs"),o=t("./node_modules/graphql/type/definition.mjs"),a=t("./node_modules/graphql/utilities/typeFromAST.mjs"),s=t("./node_modules/graphql/utilities/typeComparators.mjs");function u(e){return{InlineFragment:function(n){var t=e.getType(),a=e.getParentType();if((0,o.isCompositeType)(t)&&(0,o.isCompositeType)(a)&&!(0,s.doTypesOverlap)(e.getSchema(),t,a)){var u=(0,r.default)(a),l=(0,r.default)(t);e.reportError(new i.GraphQLError('Fragment cannot be spread here as objects of type "'.concat(u,'" can never be of type "').concat(l,'".'),n))}},FragmentSpread:function(n){var t=n.name.value,u=function(e,n){var t=e.getFragment(n);if(t){var r=(0,a.typeFromAST)(e.getSchema(),t.typeCondition);if((0,o.isCompositeType)(r))return r}}(e,t),l=e.getParentType();if(u&&l&&!(0,s.doTypesOverlap)(e.getSchema(),u,l)){var c=(0,r.default)(l),d=(0,r.default)(u);e.reportError(new i.GraphQLError('Fragment "'.concat(t,'" cannot be spread here as objects of type "').concat(c,'" can never be of type "').concat(d,'".'),n))}}}}},"./node_modules/graphql/validation/rules/PossibleTypeExtensionsRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{PossibleTypeExtensionsRule:()=>f});var r,i=t("./node_modules/graphql/jsutils/inspect.mjs"),o=t("./node_modules/graphql/jsutils/invariant.mjs"),a=t("./node_modules/graphql/jsutils/didYouMean.mjs"),s=t("./node_modules/graphql/jsutils/suggestionList.mjs"),u=t("./node_modules/graphql/error/GraphQLError.mjs"),l=t("./node_modules/graphql/language/kinds.mjs"),c=t("./node_modules/graphql/language/predicates.mjs"),d=t("./node_modules/graphql/type/definition.mjs");function p(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function f(e){for(var n=e.getSchema(),t=Object.create(null),r=0,p=e.getDocument().definitions;r<p.length;r++){var f=p[r];(0,c.isTypeDefinitionNode)(f)&&(t[f.name.value]=f)}return{ScalarTypeExtension:h,ObjectTypeExtension:h,InterfaceTypeExtension:h,UnionTypeExtension:h,EnumTypeExtension:h,InputObjectTypeExtension:h};function h(r){var c,p,f=r.name.value,h=t[f],v=null==n?void 0:n.getType(f);if(h?c=m[h.kind]:v&&(p=v,c=(0,d.isScalarType)(p)?l.Kind.SCALAR_TYPE_EXTENSION:(0,d.isObjectType)(p)?l.Kind.OBJECT_TYPE_EXTENSION:(0,d.isInterfaceType)(p)?l.Kind.INTERFACE_TYPE_EXTENSION:(0,d.isUnionType)(p)?l.Kind.UNION_TYPE_EXTENSION:(0,d.isEnumType)(p)?l.Kind.ENUM_TYPE_EXTENSION:(0,d.isInputObjectType)(p)?l.Kind.INPUT_OBJECT_TYPE_EXTENSION:void(0,o.default)(0,"Unexpected type: "+(0,i.default)(p))),c){if(c!==r.kind){var y=function(e){switch(e){case l.Kind.SCALAR_TYPE_EXTENSION:return"scalar";case l.Kind.OBJECT_TYPE_EXTENSION:return"object";case l.Kind.INTERFACE_TYPE_EXTENSION:return"interface";case l.Kind.UNION_TYPE_EXTENSION:return"union";case l.Kind.ENUM_TYPE_EXTENSION:return"enum";case l.Kind.INPUT_OBJECT_TYPE_EXTENSION:return"input object"}(0,o.default)(0,"Unexpected kind: "+(0,i.default)(e))}(r.kind);e.reportError(new u.GraphQLError("Cannot extend non-".concat(y,' type "').concat(f,'".'),h?[h,r]:r))}}else{var g=Object.keys(t);n&&(g=g.concat(Object.keys(n.getTypeMap())));var T=(0,s.default)(f,g);e.reportError(new u.GraphQLError('Cannot extend type "'.concat(f,'" because it is not defined.')+(0,a.default)(T),r.name))}}}var m=(p(r={},l.Kind.SCALAR_TYPE_DEFINITION,l.Kind.SCALAR_TYPE_EXTENSION),p(r,l.Kind.OBJECT_TYPE_DEFINITION,l.Kind.OBJECT_TYPE_EXTENSION),p(r,l.Kind.INTERFACE_TYPE_DEFINITION,l.Kind.INTERFACE_TYPE_EXTENSION),p(r,l.Kind.UNION_TYPE_DEFINITION,l.Kind.UNION_TYPE_EXTENSION),p(r,l.Kind.ENUM_TYPE_DEFINITION,l.Kind.ENUM_TYPE_EXTENSION),p(r,l.Kind.INPUT_OBJECT_TYPE_DEFINITION,l.Kind.INPUT_OBJECT_TYPE_EXTENSION),r)},"./node_modules/graphql/validation/rules/ProvidedRequiredArgumentsRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{ProvidedRequiredArgumentsRule:()=>f,ProvidedRequiredArgumentsOnDirectivesRule:()=>m});var r=t("./node_modules/graphql/jsutils/inspect.mjs"),i=t("./node_modules/graphql/jsutils/keyMap.mjs"),o=t("./node_modules/graphql/error/GraphQLError.mjs"),a=t("./node_modules/graphql/language/kinds.mjs"),s=t("./node_modules/graphql/language/printer.mjs"),u=t("./node_modules/graphql/type/directives.mjs"),l=t("./node_modules/graphql/type/definition.mjs");function c(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function d(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?c(Object(t),!0).forEach((function(n){p(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function f(e){return d(d({},m(e)),{},{Field:{leave:function(n){var t,a=e.getFieldDef();if(!a)return!1;for(var s=null!==(t=n.arguments)&&void 0!==t?t:[],u=(0,i.default)(s,(function(e){return e.name.value})),c=0,d=a.args;c<d.length;c++){var p=d[c];if(!u[p.name]&&(0,l.isRequiredArgument)(p)){var f=(0,r.default)(p.type);e.reportError(new o.GraphQLError('Field "'.concat(a.name,'" argument "').concat(p.name,'" of type "').concat(f,'" is required, but it was not provided.'),n))}}}}})}function m(e){for(var n=Object.create(null),t=e.getSchema(),c=t?t.getDirectives():u.specifiedDirectives,d=0;d<c.length;d++){var p=c[d];n[p.name]=(0,i.default)(p.args.filter(l.isRequiredArgument),(function(e){return e.name}))}for(var f=e.getDocument().definitions,m=0;m<f.length;m++){var v=f[m];if(v.kind===a.Kind.DIRECTIVE_DEFINITION){var y,g=null!==(y=v.arguments)&&void 0!==y?y:[];n[v.name.value]=(0,i.default)(g.filter(h),(function(e){return e.name.value}))}}return{Directive:{leave:function(t){var a=t.name.value,u=n[a];if(u)for(var c,d=null!==(c=t.arguments)&&void 0!==c?c:[],p=(0,i.default)(d,(function(e){return e.name.value})),f=0,m=Object.keys(u);f<m.length;f++){var h=m[f];if(!p[h]){var v=u[h].type,y=(0,l.isType)(v)?(0,r.default)(v):(0,s.print)(v);e.reportError(new o.GraphQLError('Directive "@'.concat(a,'" argument "').concat(h,'" of type "').concat(y,'" is required, but it was not provided.'),t))}}}}}}function h(e){return e.type.kind===a.Kind.NON_NULL_TYPE&&null==e.defaultValue}},"./node_modules/graphql/validation/rules/ScalarLeafsRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{ScalarLeafsRule:()=>a});var r=t("./node_modules/graphql/jsutils/inspect.mjs"),i=t("./node_modules/graphql/error/GraphQLError.mjs"),o=t("./node_modules/graphql/type/definition.mjs");function a(e){return{Field:function(n){var t=e.getType(),a=n.selectionSet;if(t)if((0,o.isLeafType)((0,o.getNamedType)(t))){if(a){var s=n.name.value,u=(0,r.default)(t);e.reportError(new i.GraphQLError('Field "'.concat(s,'" must not have a selection since type "').concat(u,'" has no subfields.'),a))}}else if(!a){var l=n.name.value,c=(0,r.default)(t);e.reportError(new i.GraphQLError('Field "'.concat(l,'" of type "').concat(c,'" must have a selection of subfields. Did you mean "').concat(l,' { ... }"?'),n))}}}}},"./node_modules/graphql/validation/rules/SingleFieldSubscriptionsRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{SingleFieldSubscriptionsRule:()=>i});var r=t("./node_modules/graphql/error/GraphQLError.mjs");function i(e){return{OperationDefinition:function(n){"subscription"===n.operation&&1!==n.selectionSet.selections.length&&e.reportError(new r.GraphQLError(n.name?'Subscription "'.concat(n.name.value,'" must select only one top level field.'):"Anonymous Subscription must select only one top level field.",n.selectionSet.selections.slice(1)))}}}},"./node_modules/graphql/validation/rules/UniqueArgumentNamesRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{UniqueArgumentNamesRule:()=>i});var r=t("./node_modules/graphql/error/GraphQLError.mjs");function i(e){var n=Object.create(null);return{Field:function(){n=Object.create(null)},Directive:function(){n=Object.create(null)},Argument:function(t){var i=t.name.value;return n[i]?e.reportError(new r.GraphQLError('There can be only one argument named "'.concat(i,'".'),[n[i],t.name])):n[i]=t.name,!1}}}},"./node_modules/graphql/validation/rules/UniqueDirectiveNamesRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{UniqueDirectiveNamesRule:()=>i});var r=t("./node_modules/graphql/error/GraphQLError.mjs");function i(e){var n=Object.create(null),t=e.getSchema();return{DirectiveDefinition:function(i){var o=i.name.value;if(null==t||!t.getDirective(o))return n[o]?e.reportError(new r.GraphQLError('There can be only one directive named "@'.concat(o,'".'),[n[o],i.name])):n[o]=i.name,!1;e.reportError(new r.GraphQLError('Directive "@'.concat(o,'" already exists in the schema. It cannot be redefined.'),i.name))}}}},"./node_modules/graphql/validation/rules/UniqueDirectivesPerLocationRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{UniqueDirectivesPerLocationRule:()=>s});var r=t("./node_modules/graphql/error/GraphQLError.mjs"),i=t("./node_modules/graphql/language/kinds.mjs"),o=t("./node_modules/graphql/language/predicates.mjs"),a=t("./node_modules/graphql/type/directives.mjs");function s(e){for(var n=Object.create(null),t=e.getSchema(),s=t?t.getDirectives():a.specifiedDirectives,u=0;u<s.length;u++){var l=s[u];n[l.name]=!l.isRepeatable}for(var c=e.getDocument().definitions,d=0;d<c.length;d++){var p=c[d];p.kind===i.Kind.DIRECTIVE_DEFINITION&&(n[p.name.value]=!p.repeatable)}var f=Object.create(null),m=Object.create(null);return{enter:function(t){if(null!=t.directives){var a;if(t.kind===i.Kind.SCHEMA_DEFINITION||t.kind===i.Kind.SCHEMA_EXTENSION)a=f;else if((0,o.isTypeDefinitionNode)(t)||(0,o.isTypeExtensionNode)(t)){var s=t.name.value;void 0===(a=m[s])&&(m[s]=a=Object.create(null))}else a=Object.create(null);for(var u=0,l=t.directives;u<l.length;u++){var c=l[u],d=c.name.value;n[d]&&(a[d]?e.reportError(new r.GraphQLError('The directive "@'.concat(d,'" can only be used once at this location.'),[a[d],c])):a[d]=c)}}}}}},"./node_modules/graphql/validation/rules/UniqueEnumValueNamesRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{UniqueEnumValueNamesRule:()=>o});var r=t("./node_modules/graphql/error/GraphQLError.mjs"),i=t("./node_modules/graphql/type/definition.mjs");function o(e){var n=e.getSchema(),t=n?n.getTypeMap():Object.create(null),o=Object.create(null);return{EnumTypeDefinition:a,EnumTypeExtension:a};function a(n){var a,s=n.name.value;o[s]||(o[s]=Object.create(null));for(var u=null!==(a=n.values)&&void 0!==a?a:[],l=o[s],c=0;c<u.length;c++){var d=u[c],p=d.name.value,f=t[s];(0,i.isEnumType)(f)&&f.getValue(p)?e.reportError(new r.GraphQLError('Enum value "'.concat(s,".").concat(p,'" already exists in the schema. It cannot also be defined in this type extension.'),d.name)):l[p]?e.reportError(new r.GraphQLError('Enum value "'.concat(s,".").concat(p,'" can only be defined once.'),[l[p],d.name])):l[p]=d.name}return!1}}},"./node_modules/graphql/validation/rules/UniqueFieldDefinitionNamesRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{UniqueFieldDefinitionNamesRule:()=>o});var r=t("./node_modules/graphql/error/GraphQLError.mjs"),i=t("./node_modules/graphql/type/definition.mjs");function o(e){var n=e.getSchema(),t=n?n.getTypeMap():Object.create(null),i=Object.create(null);return{InputObjectTypeDefinition:o,InputObjectTypeExtension:o,InterfaceTypeDefinition:o,InterfaceTypeExtension:o,ObjectTypeDefinition:o,ObjectTypeExtension:o};function o(n){var o,s=n.name.value;i[s]||(i[s]=Object.create(null));for(var u=null!==(o=n.fields)&&void 0!==o?o:[],l=i[s],c=0;c<u.length;c++){var d=u[c],p=d.name.value;a(t[s],p)?e.reportError(new r.GraphQLError('Field "'.concat(s,".").concat(p,'" already exists in the schema. It cannot also be defined in this type extension.'),d.name)):l[p]?e.reportError(new r.GraphQLError('Field "'.concat(s,".").concat(p,'" can only be defined once.'),[l[p],d.name])):l[p]=d.name}return!1}}function a(e,n){return!!((0,i.isObjectType)(e)||(0,i.isInterfaceType)(e)||(0,i.isInputObjectType)(e))&&null!=e.getFields()[n]}},"./node_modules/graphql/validation/rules/UniqueFragmentNamesRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{UniqueFragmentNamesRule:()=>i});var r=t("./node_modules/graphql/error/GraphQLError.mjs");function i(e){var n=Object.create(null);return{OperationDefinition:function(){return!1},FragmentDefinition:function(t){var i=t.name.value;return n[i]?e.reportError(new r.GraphQLError('There can be only one fragment named "'.concat(i,'".'),[n[i],t.name])):n[i]=t.name,!1}}}},"./node_modules/graphql/validation/rules/UniqueInputFieldNamesRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{UniqueInputFieldNamesRule:()=>i});var r=t("./node_modules/graphql/error/GraphQLError.mjs");function i(e){var n=[],t=Object.create(null);return{ObjectValue:{enter:function(){n.push(t),t=Object.create(null)},leave:function(){t=n.pop()}},ObjectField:function(n){var i=n.name.value;t[i]?e.reportError(new r.GraphQLError('There can be only one input field named "'.concat(i,'".'),[t[i],n.name])):t[i]=n.name}}}},"./node_modules/graphql/validation/rules/UniqueOperationNamesRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{UniqueOperationNamesRule:()=>i});var r=t("./node_modules/graphql/error/GraphQLError.mjs");function i(e){var n=Object.create(null);return{OperationDefinition:function(t){var i=t.name;return i&&(n[i.value]?e.reportError(new r.GraphQLError('There can be only one operation named "'.concat(i.value,'".'),[n[i.value],i])):n[i.value]=i),!1},FragmentDefinition:function(){return!1}}}},"./node_modules/graphql/validation/rules/UniqueOperationTypesRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{UniqueOperationTypesRule:()=>i});var r=t("./node_modules/graphql/error/GraphQLError.mjs");function i(e){var n=e.getSchema(),t=Object.create(null),i=n?{query:n.getQueryType(),mutation:n.getMutationType(),subscription:n.getSubscriptionType()}:{};return{SchemaDefinition:o,SchemaExtension:o};function o(n){for(var o,a=null!==(o=n.operationTypes)&&void 0!==o?o:[],s=0;s<a.length;s++){var u=a[s],l=u.operation,c=t[l];i[l]?e.reportError(new r.GraphQLError("Type for ".concat(l," already defined in the schema. It cannot be redefined."),u)):c?e.reportError(new r.GraphQLError("There can be only one ".concat(l," type in schema."),[c,u])):t[l]=u}return!1}}},"./node_modules/graphql/validation/rules/UniqueTypeNamesRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{UniqueTypeNamesRule:()=>i});var r=t("./node_modules/graphql/error/GraphQLError.mjs");function i(e){var n=Object.create(null),t=e.getSchema();return{ScalarTypeDefinition:i,ObjectTypeDefinition:i,InterfaceTypeDefinition:i,UnionTypeDefinition:i,EnumTypeDefinition:i,InputObjectTypeDefinition:i};function i(i){var o=i.name.value;if(null==t||!t.getType(o))return n[o]?e.reportError(new r.GraphQLError('There can be only one type named "'.concat(o,'".'),[n[o],i.name])):n[o]=i.name,!1;e.reportError(new r.GraphQLError('Type "'.concat(o,'" already exists in the schema. It cannot also be defined in this type definition.'),i.name))}}},"./node_modules/graphql/validation/rules/UniqueVariableNamesRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{UniqueVariableNamesRule:()=>i});var r=t("./node_modules/graphql/error/GraphQLError.mjs");function i(e){var n=Object.create(null);return{OperationDefinition:function(){n=Object.create(null)},VariableDefinition:function(t){var i=t.variable.name.value;n[i]?e.reportError(new r.GraphQLError('There can be only one variable named "$'.concat(i,'".'),[n[i],t.variable.name])):n[i]=t.variable.name}}}},"./node_modules/graphql/validation/rules/ValuesOfCorrectTypeRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{ValuesOfCorrectTypeRule:()=>d});var r=t("./node_modules/graphql/polyfills/objectValues.mjs"),i=t("./node_modules/graphql/jsutils/keyMap.mjs"),o=t("./node_modules/graphql/jsutils/inspect.mjs"),a=t("./node_modules/graphql/jsutils/didYouMean.mjs"),s=t("./node_modules/graphql/jsutils/suggestionList.mjs"),u=t("./node_modules/graphql/error/GraphQLError.mjs"),l=t("./node_modules/graphql/language/printer.mjs"),c=t("./node_modules/graphql/type/definition.mjs");function d(e){return{ListValue:function(n){var t=(0,c.getNullableType)(e.getParentInputType());if(!(0,c.isListType)(t))return p(e,n),!1},ObjectValue:function(n){var t=(0,c.getNamedType)(e.getInputType());if(!(0,c.isInputObjectType)(t))return p(e,n),!1;for(var a=(0,i.default)(n.fields,(function(e){return e.name.value})),s=0,l=(0,r.default)(t.getFields());s<l.length;s++){var d=l[s];if(!a[d.name]&&(0,c.isRequiredInputField)(d)){var f=(0,o.default)(d.type);e.reportError(new u.GraphQLError('Field "'.concat(t.name,".").concat(d.name,'" of required type "').concat(f,'" was not provided.'),n))}}},ObjectField:function(n){var t=(0,c.getNamedType)(e.getParentInputType());if(!e.getInputType()&&(0,c.isInputObjectType)(t)){var r=(0,s.default)(n.name.value,Object.keys(t.getFields()));e.reportError(new u.GraphQLError('Field "'.concat(n.name.value,'" is not defined by type "').concat(t.name,'".')+(0,a.default)(r),n))}},NullValue:function(n){var t=e.getInputType();(0,c.isNonNullType)(t)&&e.reportError(new u.GraphQLError('Expected value of type "'.concat((0,o.default)(t),'", found ').concat((0,l.print)(n),"."),n))},EnumValue:function(n){return p(e,n)},IntValue:function(n){return p(e,n)},FloatValue:function(n){return p(e,n)},StringValue:function(n){return p(e,n)},BooleanValue:function(n){return p(e,n)}}}function p(e,n){var t=e.getInputType();if(t){var r=(0,c.getNamedType)(t);if((0,c.isLeafType)(r))try{if(void 0===r.parseLiteral(n,void 0)){var i=(0,o.default)(t);e.reportError(new u.GraphQLError('Expected value of type "'.concat(i,'", found ').concat((0,l.print)(n),"."),n))}}catch(r){var a=(0,o.default)(t);r instanceof u.GraphQLError?e.reportError(r):e.reportError(new u.GraphQLError('Expected value of type "'.concat(a,'", found ').concat((0,l.print)(n),"; ")+r.message,n,void 0,void 0,void 0,r))}else{var s=(0,o.default)(t);e.reportError(new u.GraphQLError('Expected value of type "'.concat(s,'", found ').concat((0,l.print)(n),"."),n))}}}},"./node_modules/graphql/validation/rules/VariablesAreInputTypesRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{VariablesAreInputTypesRule:()=>s});var r=t("./node_modules/graphql/error/GraphQLError.mjs"),i=t("./node_modules/graphql/language/printer.mjs"),o=t("./node_modules/graphql/type/definition.mjs"),a=t("./node_modules/graphql/utilities/typeFromAST.mjs");function s(e){return{VariableDefinition:function(n){var t=(0,a.typeFromAST)(e.getSchema(),n.type);if(t&&!(0,o.isInputType)(t)){var s=n.variable.name.value,u=(0,i.print)(n.type);e.reportError(new r.GraphQLError('Variable "$'.concat(s,'" cannot be non-input type "').concat(u,'".'),n.type))}}}}},"./node_modules/graphql/validation/rules/VariablesInAllowedPositionRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{VariablesInAllowedPositionRule:()=>l});var r=t("./node_modules/graphql/jsutils/inspect.mjs"),i=t("./node_modules/graphql/error/GraphQLError.mjs"),o=t("./node_modules/graphql/language/kinds.mjs"),a=t("./node_modules/graphql/type/definition.mjs"),s=t("./node_modules/graphql/utilities/typeFromAST.mjs"),u=t("./node_modules/graphql/utilities/typeComparators.mjs");function l(e){var n=Object.create(null);return{OperationDefinition:{enter:function(){n=Object.create(null)},leave:function(t){for(var o=e.getRecursiveVariableUsages(t),a=0;a<o.length;a++){var u=o[a],l=u.node,d=u.type,p=u.defaultValue,f=l.name.value,m=n[f];if(m&&d){var h=e.getSchema(),v=(0,s.typeFromAST)(h,m.type);if(v&&!c(h,v,m.defaultValue,d,p)){var y=(0,r.default)(v),g=(0,r.default)(d);e.reportError(new i.GraphQLError('Variable "$'.concat(f,'" of type "').concat(y,'" used in position expecting type "').concat(g,'".'),[m,l]))}}}}},VariableDefinition:function(e){n[e.variable.name.value]=e}}}function c(e,n,t,r,i){if((0,a.isNonNullType)(r)&&!(0,a.isNonNullType)(n)){if((null==t||t.kind===o.Kind.NULL)&&void 0===i)return!1;var s=r.ofType;return(0,u.isTypeSubTypeOf)(e,n,s)}return(0,u.isTypeSubTypeOf)(e,n,r)}},"./node_modules/graphql/validation/rules/custom/NoDeprecatedCustomRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{NoDeprecatedCustomRule:()=>a});var r=t("./node_modules/graphql/jsutils/invariant.mjs"),i=t("./node_modules/graphql/error/GraphQLError.mjs"),o=t("./node_modules/graphql/type/definition.mjs");function a(e){return{Field:function(n){var t=e.getFieldDef(),o=null==t?void 0:t.deprecationReason;if(t&&null!=o){var a=e.getParentType();null!=a||(0,r.default)(0),e.reportError(new i.GraphQLError("The field ".concat(a.name,".").concat(t.name," is deprecated. ").concat(o),n))}},Argument:function(n){var t=e.getArgument(),o=null==t?void 0:t.deprecationReason;if(t&&null!=o){var a=e.getDirective();if(null!=a)e.reportError(new i.GraphQLError('Directive "@'.concat(a.name,'" argument "').concat(t.name,'" is deprecated. ').concat(o),n));else{var s=e.getParentType(),u=e.getFieldDef();null!=s&&null!=u||(0,r.default)(0),e.reportError(new i.GraphQLError('Field "'.concat(s.name,".").concat(u.name,'" argument "').concat(t.name,'" is deprecated. ').concat(o),n))}}},ObjectField:function(n){var t=(0,o.getNamedType)(e.getParentInputType());if((0,o.isInputObjectType)(t)){var r=t.getFields()[n.name.value],a=null==r?void 0:r.deprecationReason;null!=a&&e.reportError(new i.GraphQLError("The input field ".concat(t.name,".").concat(r.name," is deprecated. ").concat(a),n))}},EnumValue:function(n){var t=e.getEnumValue(),a=null==t?void 0:t.deprecationReason;if(t&&null!=a){var s=(0,o.getNamedType)(e.getInputType());null!=s||(0,r.default)(0),e.reportError(new i.GraphQLError('The enum value "'.concat(s.name,".").concat(t.name,'" is deprecated. ').concat(a),n))}}}}},"./node_modules/graphql/validation/rules/custom/NoSchemaIntrospectionCustomRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{NoSchemaIntrospectionCustomRule:()=>a});var r=t("./node_modules/graphql/error/GraphQLError.mjs"),i=t("./node_modules/graphql/type/definition.mjs"),o=t("./node_modules/graphql/type/introspection.mjs");function a(e){return{Field:function(n){var t=(0,i.getNamedType)(e.getType());t&&(0,o.isIntrospectionType)(t)&&e.reportError(new r.GraphQLError('GraphQL introspection has been disabled, but the requested query contained the field "'.concat(n.name.value,'".'),n))}}}},"./node_modules/graphql/validation/specifiedRules.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{specifiedRules:()=>F,specifiedSDLRules:()=>G});var r=t("./node_modules/graphql/validation/rules/ExecutableDefinitionsRule.mjs"),i=t("./node_modules/graphql/validation/rules/UniqueOperationNamesRule.mjs"),o=t("./node_modules/graphql/validation/rules/LoneAnonymousOperationRule.mjs"),a=t("./node_modules/graphql/validation/rules/SingleFieldSubscriptionsRule.mjs"),s=t("./node_modules/graphql/validation/rules/KnownTypeNamesRule.mjs"),u=t("./node_modules/graphql/validation/rules/FragmentsOnCompositeTypesRule.mjs"),l=t("./node_modules/graphql/validation/rules/VariablesAreInputTypesRule.mjs"),c=t("./node_modules/graphql/validation/rules/ScalarLeafsRule.mjs"),d=t("./node_modules/graphql/validation/rules/FieldsOnCorrectTypeRule.mjs"),p=t("./node_modules/graphql/validation/rules/UniqueFragmentNamesRule.mjs"),f=t("./node_modules/graphql/validation/rules/KnownFragmentNamesRule.mjs"),m=t("./node_modules/graphql/validation/rules/NoUnusedFragmentsRule.mjs"),h=t("./node_modules/graphql/validation/rules/PossibleFragmentSpreadsRule.mjs"),v=t("./node_modules/graphql/validation/rules/NoFragmentCyclesRule.mjs"),y=t("./node_modules/graphql/validation/rules/UniqueVariableNamesRule.mjs"),g=t("./node_modules/graphql/validation/rules/NoUndefinedVariablesRule.mjs"),T=t("./node_modules/graphql/validation/rules/NoUnusedVariablesRule.mjs"),E=t("./node_modules/graphql/validation/rules/KnownDirectivesRule.mjs"),_=t("./node_modules/graphql/validation/rules/UniqueDirectivesPerLocationRule.mjs"),N=t("./node_modules/graphql/validation/rules/KnownArgumentNamesRule.mjs"),b=t("./node_modules/graphql/validation/rules/UniqueArgumentNamesRule.mjs"),j=t("./node_modules/graphql/validation/rules/ValuesOfCorrectTypeRule.mjs"),I=t("./node_modules/graphql/validation/rules/ProvidedRequiredArgumentsRule.mjs"),O=t("./node_modules/graphql/validation/rules/VariablesInAllowedPositionRule.mjs"),L=t("./node_modules/graphql/validation/rules/OverlappingFieldsCanBeMergedRule.mjs"),S=t("./node_modules/graphql/validation/rules/UniqueInputFieldNamesRule.mjs"),D=t("./node_modules/graphql/validation/rules/LoneSchemaDefinitionRule.mjs"),A=t("./node_modules/graphql/validation/rules/UniqueOperationTypesRule.mjs"),w=t("./node_modules/graphql/validation/rules/UniqueTypeNamesRule.mjs"),R=t("./node_modules/graphql/validation/rules/UniqueEnumValueNamesRule.mjs"),k=t("./node_modules/graphql/validation/rules/UniqueFieldDefinitionNamesRule.mjs"),q=t("./node_modules/graphql/validation/rules/UniqueDirectiveNamesRule.mjs"),x=t("./node_modules/graphql/validation/rules/PossibleTypeExtensionsRule.mjs"),F=Object.freeze([r.ExecutableDefinitionsRule,i.UniqueOperationNamesRule,o.LoneAnonymousOperationRule,a.SingleFieldSubscriptionsRule,s.KnownTypeNamesRule,u.FragmentsOnCompositeTypesRule,l.VariablesAreInputTypesRule,c.ScalarLeafsRule,d.FieldsOnCorrectTypeRule,p.UniqueFragmentNamesRule,f.KnownFragmentNamesRule,m.NoUnusedFragmentsRule,h.PossibleFragmentSpreadsRule,v.NoFragmentCyclesRule,y.UniqueVariableNamesRule,g.NoUndefinedVariablesRule,T.NoUnusedVariablesRule,E.KnownDirectivesRule,_.UniqueDirectivesPerLocationRule,N.KnownArgumentNamesRule,b.UniqueArgumentNamesRule,j.ValuesOfCorrectTypeRule,I.ProvidedRequiredArgumentsRule,O.VariablesInAllowedPositionRule,L.OverlappingFieldsCanBeMergedRule,S.UniqueInputFieldNamesRule]),G=Object.freeze([D.LoneSchemaDefinitionRule,A.UniqueOperationTypesRule,w.UniqueTypeNamesRule,R.UniqueEnumValueNamesRule,k.UniqueFieldDefinitionNamesRule,q.UniqueDirectiveNamesRule,s.KnownTypeNamesRule,E.KnownDirectivesRule,_.UniqueDirectivesPerLocationRule,x.PossibleTypeExtensionsRule,N.KnownArgumentNamesOnDirectivesRule,b.UniqueArgumentNamesRule,S.UniqueInputFieldNamesRule,I.ProvidedRequiredArgumentsOnDirectivesRule])},"./node_modules/graphql/validation/validate.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{validate:()=>c,validateSDL:()=>d,assertValidSDL:()=>p,assertValidSDLExtension:()=>f});var r=t("./node_modules/graphql/jsutils/devAssert.mjs"),i=t("./node_modules/graphql/error/GraphQLError.mjs"),o=t("./node_modules/graphql/language/visitor.mjs"),a=t("./node_modules/graphql/type/validate.mjs"),s=t("./node_modules/graphql/utilities/TypeInfo.mjs"),u=t("./node_modules/graphql/validation/specifiedRules.mjs"),l=t("./node_modules/graphql/validation/ValidationContext.mjs");function c(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:u.specifiedRules,c=arguments.length>3&&void 0!==arguments[3]?arguments[3]:new s.TypeInfo(e),d=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{maxErrors:void 0};n||(0,r.default)(0,"Must provide document."),(0,a.assertValidSchema)(e);var p=Object.freeze({}),f=[],m=new l.ValidationContext(e,n,c,(function(e){if(null!=d.maxErrors&&f.length>=d.maxErrors)throw f.push(new i.GraphQLError("Too many validation errors, error limit reached. Validation aborted.")),p;f.push(e)})),h=(0,o.visitInParallel)(t.map((function(e){return e(m)})));try{(0,o.visit)(n,(0,s.visitWithTypeInfo)(c,h))}catch(e){if(e!==p)throw e}return f}function d(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:u.specifiedSDLRules,r=[],i=new l.SDLValidationContext(e,n,(function(e){r.push(e)})),a=t.map((function(e){return e(i)}));return(0,o.visit)(e,(0,o.visitInParallel)(a)),r}function p(e){var n=d(e);if(0!==n.length)throw new Error(n.map((function(e){return e.message})).join("\n\n"))}function f(e,n){var t=d(e,n);if(0!==t.length)throw new Error(t.map((function(e){return e.message})).join("\n\n"))}},"./node_modules/graphql/version.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{version:()=>r,versionInfo:()=>i});var r="15.6.1",i=Object.freeze({major:15,minor:6,patch:1,preReleaseTag:null})}},n={};function t(r){var i=n[r];if(void 0!==i)return i.exports;var o=n[r]={exports:{}};return e[r].call(o.exports,o,o.exports,t),o.exports}t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t("./src/background.ts")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUNYcW1ELEVBQW9CcHNFLEVBQUUrbEIsRUFBWTVlLEtBQVNpbEUsRUFBb0Jwc0UsRUFBRWlILEVBQVNFLElBQzVFeEcsT0FBT2dKLGVBQWUxQyxFQUFTRSxFQUFLLENBQUV5QyxZQUFZLEVBQU0zSCxJQUFLOGpCLEVBQVc1ZSxNQ0ozRWlsRSxFQUFvQnBzRSxFQUFJLENBQUM0ZSxFQUFLa1AsSUFBVW50QixPQUFPRCxVQUFVNkQsZUFBZWpFLEtBQUtzZSxFQUFLa1AsR0NDbEZzK0MsRUFBb0JsdEUsRUFBSytILElBQ0gsb0JBQVg1QixRQUEwQkEsT0FBT3VyQixhQUMxQ2p3QixPQUFPZ0osZUFBZTFDLEVBQVM1QixPQUFPdXJCLFlBQWEsQ0FBRXpzQixNQUFPLFdBRTdEeEQsT0FBT2dKLGVBQWUxQyxFQUFTLGFBQWMsQ0FBRTlDLE9BQU8sS0NGN0Jpb0UsRUFBb0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9AdXJxbC9jb3JlL2Rpc3QvOGE2ZDRkMWYuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvQHVycWwvY29yZS9kaXN0L3VycWwtY29yZS5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL3NyYy9iYWNrZ3JvdW5kLnRzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci9tZDUuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL25pbC5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvcGFyc2UuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3JlZ2V4LmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci9ybmcuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3NoYTEuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3N0cmluZ2lmeS5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvdjEuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3YzLmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci92MzUuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3Y0LmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci92NS5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvdmFsaWRhdGUuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3ZlcnNpb24uanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvd29ua2EvZGlzdC93b25rYS5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2Vycm9yL0dyYXBoUUxFcnJvci5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9lcnJvci9mb3JtYXRFcnJvci5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9lcnJvci9sb2NhdGVkRXJyb3IubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvZXJyb3Ivc3ludGF4RXJyb3IubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvZXhlY3V0aW9uL2V4ZWN1dGUubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvZXhlY3V0aW9uL3ZhbHVlcy5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9ncmFwaHFsLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2pzdXRpbHMvUGF0aC5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL2RlZmluZUluc3BlY3QubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvanN1dGlscy9kZXZBc3NlcnQubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvanN1dGlscy9kaWRZb3VNZWFuLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2pzdXRpbHMvaWRlbnRpdHlGdW5jLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2pzdXRpbHMvaW5zcGVjdC5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL2luc3RhbmNlT2YubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvanN1dGlscy9pbnZhcmlhbnQubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvanN1dGlscy9pc0FzeW5jSXRlcmFibGUubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvanN1dGlscy9pc09iamVjdExpa2UubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvanN1dGlscy9pc1Byb21pc2UubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvanN1dGlscy9rZXlNYXAubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvanN1dGlscy9rZXlWYWxNYXAubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvanN1dGlscy9tYXBWYWx1ZS5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL21lbW9pemUzLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2pzdXRpbHMvbmF0dXJhbENvbXBhcmUubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvanN1dGlscy9ub2RlanNDdXN0b21JbnNwZWN0U3ltYm9sLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2pzdXRpbHMvcHJpbnRQYXRoQXJyYXkubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvanN1dGlscy9wcm9taXNlRm9yT2JqZWN0Lm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2pzdXRpbHMvcHJvbWlzZVJlZHVjZS5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL3NhZmVBcnJheUZyb20ubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvanN1dGlscy9zdWdnZXN0aW9uTGlzdC5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL3RvT2JqTWFwLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2xhbmd1YWdlL2FzdC5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9sYW5ndWFnZS9ibG9ja1N0cmluZy5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9sYW5ndWFnZS9kaXJlY3RpdmVMb2NhdGlvbi5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9sYW5ndWFnZS9raW5kcy5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9sYW5ndWFnZS9sZXhlci5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9sYW5ndWFnZS9sb2NhdGlvbi5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9sYW5ndWFnZS9wYXJzZXIubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvbGFuZ3VhZ2UvcHJlZGljYXRlcy5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9sYW5ndWFnZS9wcmludExvY2F0aW9uLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2xhbmd1YWdlL3ByaW50ZXIubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvbGFuZ3VhZ2Uvc291cmNlLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2xhbmd1YWdlL3Rva2VuS2luZC5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9sYW5ndWFnZS92aXNpdG9yLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3BvbHlmaWxscy9hcnJheUZyb20ubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvcG9seWZpbGxzL2ZpbmQubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvcG9seWZpbGxzL2lzRmluaXRlLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3BvbHlmaWxscy9pc0ludGVnZXIubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvcG9seWZpbGxzL29iamVjdEVudHJpZXMubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvcG9seWZpbGxzL29iamVjdFZhbHVlcy5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9wb2x5ZmlsbHMvc3ltYm9scy5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9zdWJzY3JpcHRpb24vbWFwQXN5bmNJdGVyYXRvci5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9zdWJzY3JpcHRpb24vc3Vic2NyaWJlLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3R5cGUvZGVmaW5pdGlvbi5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC90eXBlL2RpcmVjdGl2ZXMubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdHlwZS9pbnRyb3NwZWN0aW9uLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3R5cGUvc2NhbGFycy5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC90eXBlL3NjaGVtYS5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC90eXBlL3ZhbGlkYXRlLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3V0aWxpdGllcy9UeXBlSW5mby5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC91dGlsaXRpZXMvYXNzZXJ0VmFsaWROYW1lLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3V0aWxpdGllcy9hc3RGcm9tVmFsdWUubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdXRpbGl0aWVzL2J1aWxkQVNUU2NoZW1hLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3V0aWxpdGllcy9idWlsZENsaWVudFNjaGVtYS5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC91dGlsaXRpZXMvY29lcmNlSW5wdXRWYWx1ZS5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC91dGlsaXRpZXMvY29uY2F0QVNULm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3V0aWxpdGllcy9leHRlbmRTY2hlbWEubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdXRpbGl0aWVzL2ZpbmRCcmVha2luZ0NoYW5nZXMubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdXRpbGl0aWVzL2ZpbmREZXByZWNhdGVkVXNhZ2VzLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3V0aWxpdGllcy9nZXRJbnRyb3NwZWN0aW9uUXVlcnkubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdXRpbGl0aWVzL2dldE9wZXJhdGlvbkFTVC5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC91dGlsaXRpZXMvZ2V0T3BlcmF0aW9uUm9vdFR5cGUubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdXRpbGl0aWVzL2ludHJvc3BlY3Rpb25Gcm9tU2NoZW1hLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3V0aWxpdGllcy9sZXhpY29ncmFwaGljU29ydFNjaGVtYS5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC91dGlsaXRpZXMvcHJpbnRTY2hlbWEubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdXRpbGl0aWVzL3NlcGFyYXRlT3BlcmF0aW9ucy5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC91dGlsaXRpZXMvc3RyaXBJZ25vcmVkQ2hhcmFjdGVycy5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC91dGlsaXRpZXMvdHlwZUNvbXBhcmF0b3JzLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3V0aWxpdGllcy90eXBlRnJvbUFTVC5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC91dGlsaXRpZXMvdmFsdWVGcm9tQVNULm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3V0aWxpdGllcy92YWx1ZUZyb21BU1RVbnR5cGVkLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3ZhbGlkYXRpb24vVmFsaWRhdGlvbkNvbnRleHQubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdmFsaWRhdGlvbi9ydWxlcy9FeGVjdXRhYmxlRGVmaW5pdGlvbnNSdWxlLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3ZhbGlkYXRpb24vcnVsZXMvRmllbGRzT25Db3JyZWN0VHlwZVJ1bGUubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdmFsaWRhdGlvbi9ydWxlcy9GcmFnbWVudHNPbkNvbXBvc2l0ZVR5cGVzUnVsZS5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL0tub3duQXJndW1lbnROYW1lc1J1bGUubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdmFsaWRhdGlvbi9ydWxlcy9Lbm93bkRpcmVjdGl2ZXNSdWxlLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3ZhbGlkYXRpb24vcnVsZXMvS25vd25GcmFnbWVudE5hbWVzUnVsZS5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL0tub3duVHlwZU5hbWVzUnVsZS5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL0xvbmVBbm9ueW1vdXNPcGVyYXRpb25SdWxlLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3ZhbGlkYXRpb24vcnVsZXMvTG9uZVNjaGVtYURlZmluaXRpb25SdWxlLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3ZhbGlkYXRpb24vcnVsZXMvTm9GcmFnbWVudEN5Y2xlc1J1bGUubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdmFsaWRhdGlvbi9ydWxlcy9Ob1VuZGVmaW5lZFZhcmlhYmxlc1J1bGUubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdmFsaWRhdGlvbi9ydWxlcy9Ob1VudXNlZEZyYWdtZW50c1J1bGUubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdmFsaWRhdGlvbi9ydWxlcy9Ob1VudXNlZFZhcmlhYmxlc1J1bGUubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdmFsaWRhdGlvbi9ydWxlcy9PdmVybGFwcGluZ0ZpZWxkc0NhbkJlTWVyZ2VkUnVsZS5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL1Bvc3NpYmxlRnJhZ21lbnRTcHJlYWRzUnVsZS5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL1Bvc3NpYmxlVHlwZUV4dGVuc2lvbnNSdWxlLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3ZhbGlkYXRpb24vcnVsZXMvUHJvdmlkZWRSZXF1aXJlZEFyZ3VtZW50c1J1bGUubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdmFsaWRhdGlvbi9ydWxlcy9TY2FsYXJMZWFmc1J1bGUubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdmFsaWRhdGlvbi9ydWxlcy9TaW5nbGVGaWVsZFN1YnNjcmlwdGlvbnNSdWxlLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3ZhbGlkYXRpb24vcnVsZXMvVW5pcXVlQXJndW1lbnROYW1lc1J1bGUubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdmFsaWRhdGlvbi9ydWxlcy9VbmlxdWVEaXJlY3RpdmVOYW1lc1J1bGUubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdmFsaWRhdGlvbi9ydWxlcy9VbmlxdWVEaXJlY3RpdmVzUGVyTG9jYXRpb25SdWxlLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3ZhbGlkYXRpb24vcnVsZXMvVW5pcXVlRW51bVZhbHVlTmFtZXNSdWxlLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3ZhbGlkYXRpb24vcnVsZXMvVW5pcXVlRmllbGREZWZpbml0aW9uTmFtZXNSdWxlLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3ZhbGlkYXRpb24vcnVsZXMvVW5pcXVlRnJhZ21lbnROYW1lc1J1bGUubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdmFsaWRhdGlvbi9ydWxlcy9VbmlxdWVJbnB1dEZpZWxkTmFtZXNSdWxlLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3ZhbGlkYXRpb24vcnVsZXMvVW5pcXVlT3BlcmF0aW9uTmFtZXNSdWxlLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3ZhbGlkYXRpb24vcnVsZXMvVW5pcXVlT3BlcmF0aW9uVHlwZXNSdWxlLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3ZhbGlkYXRpb24vcnVsZXMvVW5pcXVlVHlwZU5hbWVzUnVsZS5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL1VuaXF1ZVZhcmlhYmxlTmFtZXNSdWxlLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3ZhbGlkYXRpb24vcnVsZXMvVmFsdWVzT2ZDb3JyZWN0VHlwZVJ1bGUubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdmFsaWRhdGlvbi9ydWxlcy9WYXJpYWJsZXNBcmVJbnB1dFR5cGVzUnVsZS5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL1ZhcmlhYmxlc0luQWxsb3dlZFBvc2l0aW9uUnVsZS5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL2N1c3RvbS9Ob0RlcHJlY2F0ZWRDdXN0b21SdWxlLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3ZhbGlkYXRpb24vcnVsZXMvY3VzdG9tL05vU2NoZW1hSW50cm9zcGVjdGlvbkN1c3RvbVJ1bGUubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdmFsaWRhdGlvbi9zcGVjaWZpZWRSdWxlcy5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3ZhbGlkYXRlLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3ZlcnNpb24ubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvd2VicGFjay9zdGFydHVwIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBlID0gcmVxdWlyZShcImdyYXBocWxcIik7XG5cbnZhciByID0gcmVxdWlyZShcIndvbmthXCIpO1xuXG5mdW5jdGlvbiByZWh5ZHJhdGVHcmFwaFFsRXJyb3Iocikge1xuICBpZiAoXCJzdHJpbmdcIiA9PSB0eXBlb2Ygcikge1xuICAgIHJldHVybiBuZXcgZS5HcmFwaFFMRXJyb3Iocik7XG4gIH0gZWxzZSBpZiAoXCJvYmplY3RcIiA9PSB0eXBlb2YgciAmJiByLm1lc3NhZ2UpIHtcbiAgICByZXR1cm4gbmV3IGUuR3JhcGhRTEVycm9yKHIubWVzc2FnZSwgci5ub2Rlcywgci5zb3VyY2UsIHIucG9zaXRpb25zLCByLnBhdGgsIHIsIHIuZXh0ZW5zaW9ucyB8fCB7fSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHI7XG4gIH1cbn1cblxudmFyIHQgPSBmdW5jdGlvbihlKSB7XG4gIGZ1bmN0aW9uIENvbWJpbmVkRXJyb3Iocikge1xuICAgIHZhciB0ID0gci5uZXR3b3JrRXJyb3I7XG4gICAgdmFyIG4gPSByLnJlc3BvbnNlO1xuICAgIHZhciBvID0gKHIuZ3JhcGhRTEVycm9ycyB8fCBbXSkubWFwKHJlaHlkcmF0ZUdyYXBoUWxFcnJvcik7XG4gICAgdmFyIGkgPSBmdW5jdGlvbiBnZW5lcmF0ZUVycm9yTWVzc2FnZShlLCByKSB7XG4gICAgICB2YXIgdCA9IFwiXCI7XG4gICAgICBpZiAodm9pZCAwICE9PSBlKSB7XG4gICAgICAgIHJldHVybiB0ID0gXCJbTmV0d29ya10gXCIgKyBlLm1lc3NhZ2U7XG4gICAgICB9XG4gICAgICBpZiAodm9pZCAwICE9PSByKSB7XG4gICAgICAgIHIuZm9yRWFjaCgoZnVuY3Rpb24oZSkge1xuICAgICAgICAgIHQgKz0gXCJbR3JhcGhRTF0gXCIgKyBlLm1lc3NhZ2UgKyBcIlxcblwiO1xuICAgICAgICB9KSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdC50cmltKCk7XG4gICAgfSh0LCBvKTtcbiAgICBlLmNhbGwodGhpcywgaSk7XG4gICAgdGhpcy5uYW1lID0gXCJDb21iaW5lZEVycm9yXCI7XG4gICAgdGhpcy5tZXNzYWdlID0gaTtcbiAgICB0aGlzLmdyYXBoUUxFcnJvcnMgPSBvO1xuICAgIHRoaXMubmV0d29ya0Vycm9yID0gdDtcbiAgICB0aGlzLnJlc3BvbnNlID0gbjtcbiAgfVxuICBpZiAoZSkge1xuICAgIENvbWJpbmVkRXJyb3IuX19wcm90b19fID0gZTtcbiAgfVxuICAoQ29tYmluZWRFcnJvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKGUgJiYgZS5wcm90b3R5cGUpKS5jb25zdHJ1Y3RvciA9IENvbWJpbmVkRXJyb3I7XG4gIENvbWJpbmVkRXJyb3IucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWVzc2FnZTtcbiAgfTtcbiAgcmV0dXJuIENvbWJpbmVkRXJyb3I7XG59KEVycm9yKTtcblxuZnVuY3Rpb24gcGhhc2goZSwgcikge1xuICBlIHw9IDA7XG4gIGZvciAodmFyIHQgPSAwLCBuID0gMCB8IHIubGVuZ3RoOyB0IDwgbjsgdCsrKSB7XG4gICAgZSA9IChlIDw8IDUpICsgZSArIHIuY2hhckNvZGVBdCh0KTtcbiAgfVxuICByZXR1cm4gZTtcbn1cblxuZnVuY3Rpb24gaGFzaChlKSB7XG4gIHJldHVybiBwaGFzaCg1MzgxLCBlKSA+Pj4gMDtcbn1cblxudmFyIG4gPSBuZXcgU2V0O1xuXG52YXIgbyA9IG5ldyBXZWFrTWFwO1xuXG5mdW5jdGlvbiBzdHJpbmdpZnkoZSkge1xuICBpZiAobnVsbCA9PT0gZSB8fCBuLmhhcyhlKSkge1xuICAgIHJldHVybiBcIm51bGxcIjtcbiAgfSBlbHNlIGlmIChcIm9iamVjdFwiICE9IHR5cGVvZiBlKSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGUpIHx8IFwiXCI7XG4gIH0gZWxzZSBpZiAoZS50b0pTT04pIHtcbiAgICByZXR1cm4gc3RyaW5naWZ5KGUudG9KU09OKCkpO1xuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoZSkpIHtcbiAgICB2YXIgciA9IFwiW1wiO1xuICAgIGZvciAodmFyIHQgPSAwLCBpID0gZS5sZW5ndGg7IHQgPCBpOyB0KyspIHtcbiAgICAgIGlmICh0ID4gMCkge1xuICAgICAgICByICs9IFwiLFwiO1xuICAgICAgfVxuICAgICAgdmFyIGEgPSBzdHJpbmdpZnkoZVt0XSk7XG4gICAgICByICs9IGEubGVuZ3RoID4gMCA/IGEgOiBcIm51bGxcIjtcbiAgICB9XG4gICAgcmV0dXJuIHIgKz0gXCJdXCI7XG4gIH1cbiAgdmFyIHMgPSBPYmplY3Qua2V5cyhlKS5zb3J0KCk7XG4gIGlmICghcy5sZW5ndGggJiYgZS5jb25zdHJ1Y3RvciAmJiBlLmNvbnN0cnVjdG9yICE9PSBPYmplY3QpIHtcbiAgICB2YXIgdSA9IG8uZ2V0KGUpIHx8IE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpO1xuICAgIG8uc2V0KGUsIHUpO1xuICAgIHJldHVybiAne1wiX19rZXlcIjpcIicgKyB1ICsgJ1wifSc7XG4gIH1cbiAgbi5hZGQoZSk7XG4gIHZhciBmID0gXCJ7XCI7XG4gIGZvciAodmFyIGMgPSAwLCBsID0gcy5sZW5ndGg7IGMgPCBsOyBjKyspIHtcbiAgICB2YXIgcCA9IHNbY107XG4gICAgdmFyIGggPSBzdHJpbmdpZnkoZVtwXSk7XG4gICAgaWYgKGgpIHtcbiAgICAgIGlmIChmLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZiArPSBcIixcIjtcbiAgICAgIH1cbiAgICAgIGYgKz0gc3RyaW5naWZ5KHApICsgXCI6XCIgKyBoO1xuICAgIH1cbiAgfVxuICBuLmRlbGV0ZShlKTtcbiAgcmV0dXJuIGYgKz0gXCJ9XCI7XG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeVZhcmlhYmxlcyhlKSB7XG4gIG4uY2xlYXIoKTtcbiAgcmV0dXJuIHN0cmluZ2lmeShlKTtcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5RG9jdW1lbnQocikge1xuICB2YXIgdCA9IChcInN0cmluZ1wiICE9IHR5cGVvZiByID8gci5sb2MgJiYgci5sb2Muc291cmNlLmJvZHkgfHwgZS5wcmludChyKSA6IHIpLnJlcGxhY2UoLyhbXFxzLF18I1teXFxuXFxyXSspKy9nLCBcIiBcIikudHJpbSgpO1xuICBpZiAoXCJzdHJpbmdcIiAhPSB0eXBlb2Ygcikge1xuICAgIHZhciBuID0gXCJkZWZpbml0aW9uc1wiIGluIHIgJiYgZ2V0T3BlcmF0aW9uTmFtZShyKTtcbiAgICBpZiAobikge1xuICAgICAgdCA9IFwiIyBcIiArIG4gKyBcIlxcblwiICsgdDtcbiAgICB9XG4gICAgaWYgKCFyLmxvYykge1xuICAgICAgci5sb2MgPSB7XG4gICAgICAgIHN0YXJ0OiAwLFxuICAgICAgICBlbmQ6IHQubGVuZ3RoLFxuICAgICAgICBzb3VyY2U6IHtcbiAgICAgICAgICBib2R5OiB0LFxuICAgICAgICAgIG5hbWU6IFwiZ3FsXCIsXG4gICAgICAgICAgbG9jYXRpb25PZmZzZXQ6IHtcbiAgICAgICAgICAgIGxpbmU6IDEsXG4gICAgICAgICAgICBjb2x1bW46IDFcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9XG4gIHJldHVybiB0O1xufVxuXG52YXIgaSA9IG5ldyBNYXA7XG5cbmZ1bmN0aW9uIGtleURvY3VtZW50KHIpIHtcbiAgdmFyIHQ7XG4gIHZhciBuO1xuICBpZiAoXCJzdHJpbmdcIiA9PSB0eXBlb2Ygcikge1xuICAgIHQgPSBoYXNoKHN0cmluZ2lmeURvY3VtZW50KHIpKTtcbiAgICBuID0gaS5nZXQodCkgfHwgZS5wYXJzZShyLCB7XG4gICAgICBub0xvY2F0aW9uOiAhMFxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHQgPSByLl9fa2V5IHx8IGhhc2goc3RyaW5naWZ5RG9jdW1lbnQocikpO1xuICAgIG4gPSBpLmdldCh0KSB8fCByO1xuICB9XG4gIGlmICghbi5sb2MpIHtcbiAgICBzdHJpbmdpZnlEb2N1bWVudChuKTtcbiAgfVxuICBuLl9fa2V5ID0gdDtcbiAgaS5zZXQodCwgbik7XG4gIHJldHVybiBuO1xufVxuXG5mdW5jdGlvbiBnZXRPcGVyYXRpb25OYW1lKHIpIHtcbiAgZm9yICh2YXIgdCA9IDAsIG4gPSByLmRlZmluaXRpb25zLmxlbmd0aDsgdCA8IG47IHQrKykge1xuICAgIHZhciBvID0gci5kZWZpbml0aW9uc1t0XTtcbiAgICBpZiAoby5raW5kID09PSBlLktpbmQuT1BFUkFUSU9OX0RFRklOSVRJT04gJiYgby5uYW1lKSB7XG4gICAgICByZXR1cm4gby5uYW1lLnZhbHVlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgcmV0dXJuIChfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24oZSkge1xuICAgIGZvciAodmFyIHIgPSAxOyByIDwgYXJndW1lbnRzLmxlbmd0aDsgcisrKSB7XG4gICAgICB2YXIgdCA9IGFyZ3VtZW50c1tyXTtcbiAgICAgIGZvciAodmFyIG4gaW4gdCkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsIG4pKSB7XG4gICAgICAgICAgZVtuXSA9IHRbbl07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGU7XG4gIH0pLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIG1ha2VSZXN1bHQoZSwgciwgbikge1xuICBpZiAoIShcImRhdGFcIiBpbiByKSAmJiAhKFwiZXJyb3JzXCIgaW4gcikgfHwgXCJwYXRoXCIgaW4gcikge1xuICAgIHRocm93IG5ldyBFcnJvcihcIk5vIENvbnRlbnRcIik7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBvcGVyYXRpb246IGUsXG4gICAgZGF0YTogci5kYXRhLFxuICAgIGVycm9yOiBBcnJheS5pc0FycmF5KHIuZXJyb3JzKSA/IG5ldyB0KHtcbiAgICAgIGdyYXBoUUxFcnJvcnM6IHIuZXJyb3JzLFxuICAgICAgcmVzcG9uc2U6IG5cbiAgICB9KSA6IHZvaWQgMCxcbiAgICBleHRlbnNpb25zOiBcIm9iamVjdFwiID09IHR5cGVvZiByLmV4dGVuc2lvbnMgJiYgci5leHRlbnNpb25zIHx8IHZvaWQgMCxcbiAgICBoYXNOZXh0OiAhIXIuaGFzTmV4dFxuICB9O1xufVxuXG5mdW5jdGlvbiBtZXJnZVJlc3VsdFBhdGNoKGUsIHIsIG4pIHtcbiAgdmFyIG8gPSBfZXh0ZW5kcyh7fSwgZSk7XG4gIG8uaGFzTmV4dCA9ICEhci5oYXNOZXh0O1xuICBpZiAoIShcInBhdGhcIiBpbiByKSkge1xuICAgIGlmIChcImRhdGFcIiBpbiByKSB7XG4gICAgICBvLmRhdGEgPSByLmRhdGE7XG4gICAgfVxuICAgIHJldHVybiBvO1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KHIuZXJyb3JzKSkge1xuICAgIG8uZXJyb3IgPSBuZXcgdCh7XG4gICAgICBncmFwaFFMRXJyb3JzOiBvLmVycm9yID8gby5lcnJvci5ncmFwaFFMRXJyb3JzLmNvbmNhdChyLmVycm9ycykgOiByLmVycm9ycyxcbiAgICAgIHJlc3BvbnNlOiBuXG4gICAgfSk7XG4gIH1cbiAgdmFyIGkgPSBvLmRhdGEgPSBfZXh0ZW5kcyh7fSwgby5kYXRhKTtcbiAgdmFyIGEgPSAwO1xuICB2YXIgcztcbiAgd2hpbGUgKGEgPCByLnBhdGgubGVuZ3RoKSB7XG4gICAgaSA9IGlbcyA9IHIucGF0aFthKytdXSA9IEFycmF5LmlzQXJyYXkoaVtzXSkgPyBbXS5jb25jYXQoaVtzXSkgOiBfZXh0ZW5kcyh7fSwgaVtzXSk7XG4gIH1cbiAgX2V4dGVuZHMoaSwgci5kYXRhKTtcbiAgcmV0dXJuIG87XG59XG5cbmZ1bmN0aW9uIG1ha2VFcnJvclJlc3VsdChlLCByLCBuKSB7XG4gIHJldHVybiB7XG4gICAgb3BlcmF0aW9uOiBlLFxuICAgIGRhdGE6IHZvaWQgMCxcbiAgICBlcnJvcjogbmV3IHQoe1xuICAgICAgbmV0d29ya0Vycm9yOiByLFxuICAgICAgcmVzcG9uc2U6IG5cbiAgICB9KSxcbiAgICBleHRlbnNpb25zOiB2b2lkIDBcbiAgfTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlR2V0KGUpIHtcbiAgcmV0dXJuIFwicXVlcnlcIiA9PT0gZS5raW5kICYmICEhZS5jb250ZXh0LnByZWZlckdldE1ldGhvZDtcbn1cblxudmFyIGEgPSBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBTeW1ib2wgPyBTeW1ib2wuYXN5bmNJdGVyYXRvciA6IG51bGw7XG5cbnZhciBzID0gXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgVGV4dERlY29kZXIgPyBuZXcgVGV4dERlY29kZXIgOiBudWxsO1xuXG52YXIgdSA9IC9jb250ZW50LXR5cGU6W15cXHJcXG5dKmFwcGxpY2F0aW9uXFwvanNvbi9pO1xuXG52YXIgZiA9IC9ib3VuZGFyeT1cIj8oW149XCI7XSspXCI/L2k7XG5cbmZ1bmN0aW9uIGV4ZWN1dGVJbmNyZW1lbnRhbEZldGNoKGUsIHIsIHQpIHtcbiAgdmFyIG4gPSB0LmhlYWRlcnMgJiYgdC5oZWFkZXJzLmdldChcIkNvbnRlbnQtVHlwZVwiKSB8fCBcIlwiO1xuICBpZiAoIS9tdWx0aXBhcnRcXC9taXhlZC9pLnRlc3QobikpIHtcbiAgICByZXR1cm4gdC5qc29uKCkudGhlbigoZnVuY3Rpb24obikge1xuICAgICAgZShtYWtlUmVzdWx0KHIsIG4sIHQpKTtcbiAgICB9KSk7XG4gIH1cbiAgdmFyIG8gPSBcIi0tLVwiO1xuICB2YXIgaSA9IG4ubWF0Y2goZik7XG4gIGlmIChpKSB7XG4gICAgbyA9IFwiLS1cIiArIGlbMV07XG4gIH1cbiAgdmFyIGM7XG4gIHZhciBjYW5jZWwgPSBmdW5jdGlvbigpIHt9O1xuICBpZiAoYSAmJiB0W2FdKSB7XG4gICAgdmFyIGwgPSB0W2FdKCk7XG4gICAgYyA9IGwubmV4dC5iaW5kKGwpO1xuICB9IGVsc2UgaWYgKFwiYm9keVwiIGluIHQgJiYgdC5ib2R5KSB7XG4gICAgdmFyIHAgPSB0LmJvZHkuZ2V0UmVhZGVyKCk7XG4gICAgY2FuY2VsID0gcC5jYW5jZWwuYmluZChwKTtcbiAgICBjID0gcC5yZWFkLmJpbmQocCk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN0cmVhbWluZyByZXF1ZXN0cyB1bnN1cHBvcnRlZFwiKTtcbiAgfVxuICB2YXIgaCA9IFwiXCI7XG4gIHZhciBkID0gITA7XG4gIHZhciB2ID0gbnVsbDtcbiAgdmFyIHkgPSBudWxsO1xuICByZXR1cm4gYygpLnRoZW4oKGZ1bmN0aW9uIG5leHQobikge1xuICAgIGlmICghbi5kb25lKSB7XG4gICAgICB2YXIgaSA9IGZ1bmN0aW9uIHRvU3RyaW5nKGUpIHtcbiAgICAgICAgcmV0dXJuIFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIEJ1ZmZlciAmJiBCdWZmZXIuaXNCdWZmZXIoZSkgPyBlLnRvU3RyaW5nKCkgOiBzLmRlY29kZShlKTtcbiAgICAgIH0obi52YWx1ZSk7XG4gICAgICB2YXIgYSA9IGkuaW5kZXhPZihvKTtcbiAgICAgIGlmIChhID4gLTEpIHtcbiAgICAgICAgYSArPSBoLmxlbmd0aDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGEgPSBoLmluZGV4T2Yobyk7XG4gICAgICB9XG4gICAgICBoICs9IGk7XG4gICAgICB3aGlsZSAoYSA+IC0xKSB7XG4gICAgICAgIHZhciBmID0gaC5zbGljZSgwLCBhKTtcbiAgICAgICAgdmFyIGwgPSBoLnNsaWNlKGEgKyBvLmxlbmd0aCk7XG4gICAgICAgIGlmIChkKSB7XG4gICAgICAgICAgZCA9ICExO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwID0gZi5pbmRleE9mKFwiXFxyXFxuXFxyXFxuXCIpICsgNDtcbiAgICAgICAgICB2YXIgbSA9IGYuc2xpY2UoMCwgcCk7XG4gICAgICAgICAgdmFyIGcgPSBmLnNsaWNlKHAsIGYubGFzdEluZGV4T2YoXCJcXHJcXG5cIikpO1xuICAgICAgICAgIHZhciB4ID0gdm9pZCAwO1xuICAgICAgICAgIGlmICh1LnRlc3QobSkpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHggPSBKU09OLnBhcnNlKGcpO1xuICAgICAgICAgICAgICB2ID0geSA9IHkgPyBtZXJnZVJlc3VsdFBhdGNoKHksIHgsIHQpIDogbWFrZVJlc3VsdChyLCB4LCB0KTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChcIi0tXCIgPT09IGwuc2xpY2UoMCwgMikgfHwgeCAmJiAheC5oYXNOZXh0KSB7XG4gICAgICAgICAgICBpZiAoIXkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGUobWFrZVJlc3VsdChyLCB7fSwgdCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGEgPSAoaCA9IGwpLmluZGV4T2Yobyk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh2KSB7XG4gICAgICBlKHYpO1xuICAgICAgdiA9IG51bGw7XG4gICAgfVxuICAgIGlmICghbi5kb25lICYmICgheSB8fCB5Lmhhc05leHQpKSB7XG4gICAgICByZXR1cm4gYygpLnRoZW4obmV4dCk7XG4gICAgfVxuICB9KSkuZmluYWxseShjYW5jZWwpO1xufVxuXG5leHBvcnRzLkNvbWJpbmVkRXJyb3IgPSB0O1xuXG5leHBvcnRzLl9leHRlbmRzID0gX2V4dGVuZHM7XG5cbmV4cG9ydHMuY3JlYXRlUmVxdWVzdCA9IGZ1bmN0aW9uIGNyZWF0ZVJlcXVlc3QoZSwgcikge1xuICBpZiAoIXIpIHtcbiAgICByID0ge307XG4gIH1cbiAgdmFyIHQgPSBrZXlEb2N1bWVudChlKTtcbiAgcmV0dXJuIHtcbiAgICBrZXk6IHBoYXNoKHQuX19rZXksIHN0cmluZ2lmeVZhcmlhYmxlcyhyKSkgPj4+IDAsXG4gICAgcXVlcnk6IHQsXG4gICAgdmFyaWFibGVzOiByXG4gIH07XG59O1xuXG5leHBvcnRzLmdldE9wZXJhdGlvbk5hbWUgPSBnZXRPcGVyYXRpb25OYW1lO1xuXG5leHBvcnRzLmdldE9wZXJhdGlvblR5cGUgPSBmdW5jdGlvbiBnZXRPcGVyYXRpb25UeXBlKHIpIHtcbiAgZm9yICh2YXIgdCA9IDAsIG4gPSByLmRlZmluaXRpb25zLmxlbmd0aDsgdCA8IG47IHQrKykge1xuICAgIHZhciBvID0gci5kZWZpbml0aW9uc1t0XTtcbiAgICBpZiAoby5raW5kID09PSBlLktpbmQuT1BFUkFUSU9OX0RFRklOSVRJT04pIHtcbiAgICAgIHJldHVybiBvLm9wZXJhdGlvbjtcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydHMua2V5RG9jdW1lbnQgPSBrZXlEb2N1bWVudDtcblxuZXhwb3J0cy5tYWtlRXJyb3JSZXN1bHQgPSBtYWtlRXJyb3JSZXN1bHQ7XG5cbmV4cG9ydHMubWFrZUZldGNoQm9keSA9IGZ1bmN0aW9uIG1ha2VGZXRjaEJvZHkocikge1xuICByZXR1cm4ge1xuICAgIHF1ZXJ5OiBlLnByaW50KHIucXVlcnkpLFxuICAgIG9wZXJhdGlvbk5hbWU6IGdldE9wZXJhdGlvbk5hbWUoci5xdWVyeSksXG4gICAgdmFyaWFibGVzOiByLnZhcmlhYmxlcyB8fCB2b2lkIDAsXG4gICAgZXh0ZW5zaW9uczogdm9pZCAwXG4gIH07XG59O1xuXG5leHBvcnRzLm1ha2VGZXRjaE9wdGlvbnMgPSBmdW5jdGlvbiBtYWtlRmV0Y2hPcHRpb25zKGUsIHIpIHtcbiAgdmFyIHQgPSBzaG91bGRVc2VHZXQoZSk7XG4gIHZhciBuID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBlLmNvbnRleHQuZmV0Y2hPcHRpb25zID8gZS5jb250ZXh0LmZldGNoT3B0aW9ucygpIDogZS5jb250ZXh0LmZldGNoT3B0aW9ucyB8fCB7fTtcbiAgcmV0dXJuIF9leHRlbmRzKHt9LCBuLCB7XG4gICAgYm9keTogIXQgJiYgciA/IEpTT04uc3RyaW5naWZ5KHIpIDogdm9pZCAwLFxuICAgIG1ldGhvZDogdCA/IFwiR0VUXCIgOiBcIlBPU1RcIixcbiAgICBoZWFkZXJzOiB0ID8gbi5oZWFkZXJzIDogX2V4dGVuZHMoe30sIHtcbiAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiXG4gICAgfSwgbi5oZWFkZXJzKVxuICB9KTtcbn07XG5cbmV4cG9ydHMubWFrZUZldGNoU291cmNlID0gZnVuY3Rpb24gbWFrZUZldGNoU291cmNlKGUsIHQsIG4pIHtcbiAgdmFyIG8gPSBcIm1hbnVhbFwiID09PSBuLnJlZGlyZWN0ID8gNDAwIDogMzAwO1xuICB2YXIgaSA9IGUuY29udGV4dC5mZXRjaDtcbiAgcmV0dXJuIHIubWFrZSgoZnVuY3Rpb24ocikge1xuICAgIHZhciBhID0gci5uZXh0O1xuICAgIHZhciBzID0gci5jb21wbGV0ZTtcbiAgICB2YXIgdSA9IFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIEFib3J0Q29udHJvbGxlciA/IG5ldyBBYm9ydENvbnRyb2xsZXIgOiBudWxsO1xuICAgIGlmICh1KSB7XG4gICAgICBuLnNpZ25hbCA9IHUuc2lnbmFsO1xuICAgIH1cbiAgICB2YXIgZiA9ICExO1xuICAgIHZhciBjID0gITE7XG4gICAgdmFyIGw7XG4gICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoZikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICByZXR1cm4gKGkgfHwgZmV0Y2gpKHQsIG4pO1xuICAgIH0pKS50aGVuKChmdW5jdGlvbihyKSB7XG4gICAgICBpZiAoIXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYyA9IChsID0gcikuc3RhdHVzIDwgMjAwIHx8IGwuc3RhdHVzID49IG87XG4gICAgICByZXR1cm4gZXhlY3V0ZUluY3JlbWVudGFsRmV0Y2goYSwgZSwgbCk7XG4gICAgfSkpLnRoZW4ocykuY2F0Y2goKGZ1bmN0aW9uKHIpIHtcbiAgICAgIGlmIChcIkFib3J0RXJyb3JcIiAhPT0gci5uYW1lKSB7XG4gICAgICAgIHZhciB0ID0gbWFrZUVycm9yUmVzdWx0KGUsIGMgPyBuZXcgRXJyb3IobC5zdGF0dXNUZXh0KSA6IHIsIGwpO1xuICAgICAgICBhKHQpO1xuICAgICAgICBzKCk7XG4gICAgICB9XG4gICAgfSkpO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIGYgPSAhMDtcbiAgICAgIGlmICh1KSB7XG4gICAgICAgIHUuYWJvcnQoKTtcbiAgICAgIH1cbiAgICB9O1xuICB9KSk7XG59O1xuXG5leHBvcnRzLm1ha2VGZXRjaFVSTCA9IGZ1bmN0aW9uIG1ha2VGZXRjaFVSTChlLCByKSB7XG4gIHZhciB0ID0gc2hvdWxkVXNlR2V0KGUpO1xuICB2YXIgbiA9IGUuY29udGV4dC51cmw7XG4gIGlmICghdCB8fCAhcikge1xuICAgIHJldHVybiBuO1xuICB9XG4gIHZhciBvID0gW107XG4gIGlmIChyLm9wZXJhdGlvbk5hbWUpIHtcbiAgICBvLnB1c2goXCJvcGVyYXRpb25OYW1lPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KHIub3BlcmF0aW9uTmFtZSkpO1xuICB9XG4gIGlmIChyLnF1ZXJ5KSB7XG4gICAgby5wdXNoKFwicXVlcnk9XCIgKyBlbmNvZGVVUklDb21wb25lbnQoci5xdWVyeS5yZXBsYWNlKC8jW15cXG5cXHJdKy9nLCBcIiBcIikudHJpbSgpKSk7XG4gIH1cbiAgaWYgKHIudmFyaWFibGVzKSB7XG4gICAgby5wdXNoKFwidmFyaWFibGVzPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVZhcmlhYmxlcyhyLnZhcmlhYmxlcykpKTtcbiAgfVxuICBpZiAoci5leHRlbnNpb25zKSB7XG4gICAgby5wdXNoKFwiZXh0ZW5zaW9ucz1cIiArIGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlWYXJpYWJsZXMoci5leHRlbnNpb25zKSkpO1xuICB9XG4gIHJldHVybiBuICsgXCI/XCIgKyBvLmpvaW4oXCImXCIpO1xufTtcblxuZXhwb3J0cy5tYWtlUmVzdWx0ID0gbWFrZVJlc3VsdDtcblxuZXhwb3J0cy5tZXJnZVJlc3VsdFBhdGNoID0gbWVyZ2VSZXN1bHRQYXRjaDtcblxuZXhwb3J0cy5zdHJpbmdpZnlEb2N1bWVudCA9IHN0cmluZ2lmeURvY3VtZW50O1xuXG5leHBvcnRzLnN0cmluZ2lmeVZhcmlhYmxlcyA9IHN0cmluZ2lmeVZhcmlhYmxlcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPThhNmQ0ZDFmLmpzLm1hcFxuIiwidmFyIGUgPSByZXF1aXJlKFwiZ3JhcGhxbFwiKTtcblxudmFyIHQgPSByZXF1aXJlKFwiLi84YTZkNGQxZi5qc1wiKTtcblxudmFyIHIgPSByZXF1aXJlKFwid29ua2FcIik7XG5cbmZ1bmN0aW9uIGNvbGxlY3RUeXBlcyhlLCB0KSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGUpKSB7XG4gICAgZm9yICh2YXIgciA9IDA7IHIgPCBlLmxlbmd0aDsgcisrKSB7XG4gICAgICBjb2xsZWN0VHlwZXMoZVtyXSwgdCk7XG4gICAgfVxuICB9IGVsc2UgaWYgKFwib2JqZWN0XCIgPT0gdHlwZW9mIGUgJiYgbnVsbCAhPT0gZSkge1xuICAgIGZvciAodmFyIG4gaW4gZSkge1xuICAgICAgaWYgKFwiX190eXBlbmFtZVwiID09PSBuICYmIFwic3RyaW5nXCIgPT0gdHlwZW9mIGVbbl0pIHtcbiAgICAgICAgdFtlW25dXSA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb2xsZWN0VHlwZXMoZVtuXSwgdCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB0O1xufVxuXG5mdW5jdGlvbiBjb2xsZWN0VHlwZXNGcm9tUmVzcG9uc2UoZSkge1xuICByZXR1cm4gT2JqZWN0LmtleXMoY29sbGVjdFR5cGVzKGUsIHt9KSk7XG59XG5cbnZhciBmb3JtYXROb2RlID0gZnVuY3Rpb24ocikge1xuICBpZiAoci5zZWxlY3Rpb25TZXQgJiYgIXIuc2VsZWN0aW9uU2V0LnNlbGVjdGlvbnMuc29tZSgoZnVuY3Rpb24odCkge1xuICAgIHJldHVybiB0LmtpbmQgPT09IGUuS2luZC5GSUVMRCAmJiBcIl9fdHlwZW5hbWVcIiA9PT0gdC5uYW1lLnZhbHVlICYmICF0LmFsaWFzO1xuICB9KSkpIHtcbiAgICByZXR1cm4gdC5fZXh0ZW5kcyh7fSwgciwge1xuICAgICAgc2VsZWN0aW9uU2V0OiB0Ll9leHRlbmRzKHt9LCByLnNlbGVjdGlvblNldCwge1xuICAgICAgICBzZWxlY3Rpb25zOiByLnNlbGVjdGlvblNldC5zZWxlY3Rpb25zLmNvbmNhdChbIHtcbiAgICAgICAgICBraW5kOiBlLktpbmQuRklFTEQsXG4gICAgICAgICAgbmFtZToge1xuICAgICAgICAgICAga2luZDogZS5LaW5kLk5BTUUsXG4gICAgICAgICAgICB2YWx1ZTogXCJfX3R5cGVuYW1lXCJcbiAgICAgICAgICB9XG4gICAgICAgIH0gXSlcbiAgICAgIH0pXG4gICAgfSk7XG4gIH1cbn07XG5cbnZhciBuID0gbmV3IE1hcDtcblxuZnVuY3Rpb24gZm9ybWF0RG9jdW1lbnQocikge1xuICB2YXIgYSA9IHQua2V5RG9jdW1lbnQocik7XG4gIHZhciBvID0gbi5nZXQoYS5fX2tleSk7XG4gIGlmICghbykge1xuICAgIG8gPSBlLnZpc2l0KGEsIHtcbiAgICAgIEZpZWxkOiBmb3JtYXROb2RlLFxuICAgICAgSW5saW5lRnJhZ21lbnQ6IGZvcm1hdE5vZGVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJfX2tleVwiLCB7XG4gICAgICB2YWx1ZTogYS5fX2tleSxcbiAgICAgIGVudW1lcmFibGU6ICExXG4gICAgfSk7XG4gICAgbi5zZXQoYS5fX2tleSwgbyk7XG4gIH1cbiAgcmV0dXJuIG87XG59XG5cbmZ1bmN0aW9uIG1hc2tUeXBlbmFtZShlKSB7XG4gIGlmICghZSB8fCBcIm9iamVjdFwiICE9IHR5cGVvZiBlKSB7XG4gICAgcmV0dXJuIGU7XG4gIH1cbiAgcmV0dXJuIE9iamVjdC5rZXlzKGUpLnJlZHVjZSgoZnVuY3Rpb24odCwgcikge1xuICAgIHZhciBuID0gZVtyXTtcbiAgICBpZiAoXCJfX3R5cGVuYW1lXCIgPT09IHIpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCBcIl9fdHlwZW5hbWVcIiwge1xuICAgICAgICBlbnVtZXJhYmxlOiAhMSxcbiAgICAgICAgdmFsdWU6IG5cbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShuKSkge1xuICAgICAgdFtyXSA9IG4ubWFwKG1hc2tUeXBlbmFtZSk7XG4gICAgfSBlbHNlIGlmIChuICYmIFwib2JqZWN0XCIgPT0gdHlwZW9mIG4gJiYgXCJfX3R5cGVuYW1lXCIgaW4gbikge1xuICAgICAgdFtyXSA9IG1hc2tUeXBlbmFtZShuKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdFtyXSA9IG47XG4gICAgfVxuICAgIHJldHVybiB0O1xuICB9KSwge30pO1xufVxuXG5mdW5jdGlvbiB3aXRoUHJvbWlzZShlKSB7XG4gIGUudG9Qcm9taXNlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHIudG9Qcm9taXNlKHIudGFrZSgxKShyLmZpbHRlcigoZnVuY3Rpb24oZSkge1xuICAgICAgcmV0dXJuICFlLnN0YWxlICYmICFlLmhhc05leHQ7XG4gICAgfSkpKGUpKSk7XG4gIH07XG4gIHJldHVybiBlO1xufVxuXG5mdW5jdGlvbiBtYWtlT3BlcmF0aW9uKGUsIHQsIHIpIHtcbiAgaWYgKCFyKSB7XG4gICAgciA9IHQuY29udGV4dDtcbiAgfVxuICByZXR1cm4ge1xuICAgIGtleTogdC5rZXksXG4gICAgcXVlcnk6IHQucXVlcnksXG4gICAgdmFyaWFibGVzOiB0LnZhcmlhYmxlcyxcbiAgICBraW5kOiBlLFxuICAgIGNvbnRleHQ6IHJcbiAgfTtcbn1cblxuZnVuY3Rpb24gYWRkTWV0YWRhdGEoZSwgcikge1xuICByZXR1cm4gbWFrZU9wZXJhdGlvbihlLmtpbmQsIGUsIHQuX2V4dGVuZHMoe30sIGUuY29udGV4dCwge1xuICAgIG1ldGE6IHQuX2V4dGVuZHMoe30sIGUuY29udGV4dC5tZXRhLCByKVxuICB9KSk7XG59XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5mdW5jdGlvbiBhcHBseURlZmluaXRpb25zKHIsIG4sIGEpIHtcbiAgZm9yICh2YXIgbyA9IDA7IG8gPCBhLmxlbmd0aDsgbysrKSB7XG4gICAgaWYgKGFbb10ua2luZCA9PT0gZS5LaW5kLkZSQUdNRU5UX0RFRklOSVRJT04pIHtcbiAgICAgIHZhciBpID0gYVtvXS5uYW1lLnZhbHVlO1xuICAgICAgdmFyIHUgPSB0LnN0cmluZ2lmeURvY3VtZW50KGFbb10pO1xuICAgICAgaWYgKCFyLmhhcyhpKSkge1xuICAgICAgICByLnNldChpLCB1KTtcbiAgICAgICAgbi5wdXNoKGFbb10pO1xuICAgICAgfSBlbHNlIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgJiYgci5nZXQoaSkgIT09IHUpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFwiW1dBUk5JTkc6IER1cGxpY2F0ZSBGcmFnbWVudF0gQSBmcmFnbWVudCB3aXRoIG5hbWUgYFwiICsgaSArIFwiYCBhbHJlYWR5IGV4aXN0cyBpbiB0aGlzIGRvY3VtZW50LlxcbldoaWxlIGZyYWdtZW50IG5hbWVzIG1heSBub3QgYmUgdW5pcXVlIGFjcm9zcyB5b3VyIHNvdXJjZSwgZWFjaCBuYW1lIG11c3QgYmUgdW5pcXVlIHBlciBkb2N1bWVudC5cIik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG4ucHVzaChhW29dKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gc2hvdWxkU2tpcChlKSB7XG4gIHZhciB0ID0gZS5raW5kO1xuICByZXR1cm4gXCJtdXRhdGlvblwiICE9PSB0ICYmIFwicXVlcnlcIiAhPT0gdDtcbn1cblxuZnVuY3Rpb24gY2FjaGVFeGNoYW5nZShlKSB7XG4gIHZhciBuID0gZS5mb3J3YXJkO1xuICB2YXIgYSA9IGUuY2xpZW50O1xuICB2YXIgbyA9IGUuZGlzcGF0Y2hEZWJ1ZztcbiAgdmFyIGkgPSBuZXcgTWFwO1xuICB2YXIgdSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGZ1bmN0aW9uIG1hcFR5cGVOYW1lcyhlKSB7XG4gICAgdmFyIHQgPSBtYWtlT3BlcmF0aW9uKGUua2luZCwgZSk7XG4gICAgdC5xdWVyeSA9IGZvcm1hdERvY3VtZW50KGUucXVlcnkpO1xuICAgIHJldHVybiB0O1xuICB9XG4gIGZ1bmN0aW9uIGlzT3BlcmF0aW9uQ2FjaGVkKGUpIHtcbiAgICB2YXIgdCA9IGUuY29udGV4dC5yZXF1ZXN0UG9saWN5O1xuICAgIHJldHVybiBcInF1ZXJ5XCIgPT09IGUua2luZCAmJiBcIm5ldHdvcmstb25seVwiICE9PSB0ICYmIChcImNhY2hlLW9ubHlcIiA9PT0gdCB8fCBpLmhhcyhlLmtleSkpO1xuICB9XG4gIHJldHVybiBmdW5jdGlvbihlKSB7XG4gICAgdmFyIGMgPSByLnNoYXJlKGUpO1xuICAgIHZhciBzID0gci5tYXAoKGZ1bmN0aW9uKGUpIHtcbiAgICAgIHZhciByID0gaS5nZXQoZS5rZXkpO1xuICAgICAgXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WICYmIG8odC5fZXh0ZW5kcyh7fSwge1xuICAgICAgICBvcGVyYXRpb246IGVcbiAgICAgIH0sIHIgPyB7XG4gICAgICAgIHR5cGU6IFwiY2FjaGVIaXRcIixcbiAgICAgICAgbWVzc2FnZTogXCJUaGUgcmVzdWx0IHdhcyBzdWNjZXNzZnVsbHkgcmV0cmllZCBmcm9tIHRoZSBjYWNoZVwiXG4gICAgICB9IDoge1xuICAgICAgICB0eXBlOiBcImNhY2hlTWlzc1wiLFxuICAgICAgICBtZXNzYWdlOiBcIlRoZSByZXN1bHQgY291bGQgbm90IGJlIHJldHJpZXZlZCBmcm9tIHRoZSBjYWNoZVwiXG4gICAgICB9KSk7XG4gICAgICB2YXIgbiA9IHQuX2V4dGVuZHMoe30sIHIsIHtcbiAgICAgICAgb3BlcmF0aW9uOiBhZGRNZXRhZGF0YShlLCB7XG4gICAgICAgICAgY2FjaGVPdXRjb21lOiByID8gXCJoaXRcIiA6IFwibWlzc1wiXG4gICAgICAgIH0pXG4gICAgICB9KTtcbiAgICAgIGlmIChcImNhY2hlLWFuZC1uZXR3b3JrXCIgPT09IGUuY29udGV4dC5yZXF1ZXN0UG9saWN5KSB7XG4gICAgICAgIG4uc3RhbGUgPSAhMDtcbiAgICAgICAgcmVleGVjdXRlT3BlcmF0aW9uKGEsIGUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG47XG4gICAgfSkpKHIuZmlsdGVyKChmdW5jdGlvbihlKSB7XG4gICAgICByZXR1cm4gIXNob3VsZFNraXAoZSkgJiYgaXNPcGVyYXRpb25DYWNoZWQoZSk7XG4gICAgfSkpKGMpKTtcbiAgICB2YXIgcCA9IHIudGFwKChmdW5jdGlvbihlKSB7XG4gICAgICB2YXIgdCA9IGUub3BlcmF0aW9uO1xuICAgICAgaWYgKCF0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciByID0gY29sbGVjdFR5cGVzRnJvbVJlc3BvbnNlKGUuZGF0YSkuY29uY2F0KHQuY29udGV4dC5hZGRpdGlvbmFsVHlwZW5hbWVzIHx8IFtdKTtcbiAgICAgIGlmIChcIm11dGF0aW9uXCIgPT09IGUub3BlcmF0aW9uLmtpbmQpIHtcbiAgICAgICAgdmFyIG4gPSBuZXcgU2V0O1xuICAgICAgICBcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgJiYgbyh7XG4gICAgICAgICAgdHlwZTogXCJjYWNoZUludmFsaWRhdGlvblwiLFxuICAgICAgICAgIG1lc3NhZ2U6IFwiVGhlIGZvbGxvd2luZyB0eXBlbmFtZXMgaGF2ZSBiZWVuIGludmFsaWRhdGVkOiBcIiArIHIsXG4gICAgICAgICAgb3BlcmF0aW9uOiB0LFxuICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIHR5cGVuYW1lczogcixcbiAgICAgICAgICAgIHJlc3BvbnNlOiBlXG4gICAgICAgICAgfSxcbiAgICAgICAgICBzb3VyY2U6IFwiY2FjaGVFeGNoYW5nZVwiXG4gICAgICAgIH0pO1xuICAgICAgICBmb3IgKHZhciBjID0gMDsgYyA8IHIubGVuZ3RoOyBjKyspIHtcbiAgICAgICAgICB2YXIgcyA9IHJbY107XG4gICAgICAgICAgdmFyIHAgPSB1W3NdIHx8ICh1W3NdID0gbmV3IFNldCk7XG4gICAgICAgICAgcC5mb3JFYWNoKChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICBuLmFkZChlKTtcbiAgICAgICAgICB9KSk7XG4gICAgICAgICAgcC5jbGVhcigpO1xuICAgICAgICB9XG4gICAgICAgIG4uZm9yRWFjaCgoZnVuY3Rpb24oZSkge1xuICAgICAgICAgIGlmIChpLmhhcyhlKSkge1xuICAgICAgICAgICAgdCA9IGkuZ2V0KGUpLm9wZXJhdGlvbjtcbiAgICAgICAgICAgIGkuZGVsZXRlKGUpO1xuICAgICAgICAgICAgcmVleGVjdXRlT3BlcmF0aW9uKGEsIHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgICAgfSBlbHNlIGlmIChcInF1ZXJ5XCIgPT09IHQua2luZCAmJiBlLmRhdGEpIHtcbiAgICAgICAgaS5zZXQodC5rZXksIGUpO1xuICAgICAgICBmb3IgKHZhciBmID0gMDsgZiA8IHIubGVuZ3RoOyBmKyspIHtcbiAgICAgICAgICB2YXIgbCA9IHJbZl07XG4gICAgICAgICAgKHVbbF0gfHwgKHVbbF0gPSBuZXcgU2V0KSkuYWRkKHQua2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pKShuKHIuZmlsdGVyKChmdW5jdGlvbihlKSB7XG4gICAgICByZXR1cm4gXCJxdWVyeVwiICE9PSBlLmtpbmQgfHwgXCJjYWNoZS1vbmx5XCIgIT09IGUuY29udGV4dC5yZXF1ZXN0UG9saWN5O1xuICAgIH0pKShyLm1hcCgoZnVuY3Rpb24oZSkge1xuICAgICAgcmV0dXJuIGFkZE1ldGFkYXRhKGUsIHtcbiAgICAgICAgY2FjaGVPdXRjb21lOiBcIm1pc3NcIlxuICAgICAgfSk7XG4gICAgfSkpKHIubWVyZ2UoWyByLm1hcChtYXBUeXBlTmFtZXMpKHIuZmlsdGVyKChmdW5jdGlvbihlKSB7XG4gICAgICByZXR1cm4gIXNob3VsZFNraXAoZSkgJiYgIWlzT3BlcmF0aW9uQ2FjaGVkKGUpO1xuICAgIH0pKShjKSksIHIuZmlsdGVyKChmdW5jdGlvbihlKSB7XG4gICAgICByZXR1cm4gc2hvdWxkU2tpcChlKTtcbiAgICB9KSkoYykgXSkpKSkpO1xuICAgIHJldHVybiByLm1lcmdlKFsgcywgcCBdKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gcmVleGVjdXRlT3BlcmF0aW9uKGUsIHIpIHtcbiAgcmV0dXJuIGUucmVleGVjdXRlT3BlcmF0aW9uKG1ha2VPcGVyYXRpb24oci5raW5kLCByLCB0Ll9leHRlbmRzKHt9LCByLmNvbnRleHQsIHtcbiAgICByZXF1ZXN0UG9saWN5OiBcIm5ldHdvcmstb25seVwiXG4gIH0pKSk7XG59XG5cbnZhciBhID0gbmV3IFNldDtcblxuZnVuY3Rpb24gZGVkdXBFeGNoYW5nZShlKSB7XG4gIHZhciB0ID0gZS5mb3J3YXJkO1xuICB2YXIgbiA9IGUuZGlzcGF0Y2hEZWJ1ZztcbiAgdmFyIGEgPSBuZXcgU2V0O1xuICBmdW5jdGlvbiBmaWx0ZXJJbmNvbWluZ09wZXJhdGlvbihlKSB7XG4gICAgdmFyIHQgPSBlLmtleTtcbiAgICB2YXIgciA9IGUua2luZDtcbiAgICBpZiAoXCJ0ZWFyZG93blwiID09PSByKSB7XG4gICAgICBhLmRlbGV0ZSh0KTtcbiAgICAgIHJldHVybiAhMDtcbiAgICB9XG4gICAgaWYgKFwicXVlcnlcIiAhPT0gciAmJiBcInN1YnNjcmlwdGlvblwiICE9PSByKSB7XG4gICAgICByZXR1cm4gITA7XG4gICAgfVxuICAgIHZhciBvID0gYS5oYXModCk7XG4gICAgYS5hZGQodCk7XG4gICAgaWYgKG8pIHtcbiAgICAgIFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViAmJiBuKHtcbiAgICAgICAgdHlwZTogXCJkZWR1cFwiLFxuICAgICAgICBtZXNzYWdlOiBcIkFuIG9wZXJhdGlvbiBoYXMgYmVlbiBkZWR1cGVkLlwiLFxuICAgICAgICBvcGVyYXRpb246IGUsXG4gICAgICAgIHNvdXJjZTogXCJkZWR1cEV4Y2hhbmdlXCJcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gIW87XG4gIH1cbiAgZnVuY3Rpb24gYWZ0ZXJPcGVyYXRpb25SZXN1bHQoZSkge1xuICAgIGlmICghZS5oYXNOZXh0KSB7XG4gICAgICBhLmRlbGV0ZShlLm9wZXJhdGlvbi5rZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZnVuY3Rpb24oZSkge1xuICAgIHZhciBuID0gci5maWx0ZXIoZmlsdGVySW5jb21pbmdPcGVyYXRpb24pKGUpO1xuICAgIHJldHVybiByLnRhcChhZnRlck9wZXJhdGlvblJlc3VsdCkodChuKSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGZldGNoRXhjaGFuZ2UoZSkge1xuICB2YXIgbiA9IGUuZm9yd2FyZDtcbiAgdmFyIGEgPSBlLmRpc3BhdGNoRGVidWc7XG4gIHJldHVybiBmdW5jdGlvbihlKSB7XG4gICAgdmFyIG8gPSByLnNoYXJlKGUpO1xuICAgIHZhciBpID0gci5tZXJnZU1hcCgoZnVuY3Rpb24oZSkge1xuICAgICAgdmFyIG4gPSBlLmtleTtcbiAgICAgIHZhciBpID0gci5maWx0ZXIoKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgcmV0dXJuIFwidGVhcmRvd25cIiA9PT0gZS5raW5kICYmIGUua2V5ID09PSBuO1xuICAgICAgfSkpKG8pO1xuICAgICAgdmFyIHUgPSB0Lm1ha2VGZXRjaEJvZHkoZSk7XG4gICAgICB2YXIgYyA9IHQubWFrZUZldGNoVVJMKGUsIHUpO1xuICAgICAgdmFyIHMgPSB0Lm1ha2VGZXRjaE9wdGlvbnMoZSwgdSk7XG4gICAgICBcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgJiYgYSh7XG4gICAgICAgIHR5cGU6IFwiZmV0Y2hSZXF1ZXN0XCIsXG4gICAgICAgIG1lc3NhZ2U6IFwiQSBmZXRjaCByZXF1ZXN0IGlzIGJlaW5nIGV4ZWN1dGVkLlwiLFxuICAgICAgICBvcGVyYXRpb246IGUsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICB1cmw6IGMsXG4gICAgICAgICAgZmV0Y2hPcHRpb25zOiBzXG4gICAgICAgIH0sXG4gICAgICAgIHNvdXJjZTogXCJmZXRjaEV4Y2hhbmdlXCJcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHIub25QdXNoKChmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciByID0gIXQuZGF0YSA/IHQuZXJyb3IgOiB2b2lkIDA7XG4gICAgICAgIFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViAmJiBhKHtcbiAgICAgICAgICB0eXBlOiByID8gXCJmZXRjaEVycm9yXCIgOiBcImZldGNoU3VjY2Vzc1wiLFxuICAgICAgICAgIG1lc3NhZ2U6IFwiQSBcIiArIChyID8gXCJmYWlsZWRcIiA6IFwic3VjY2Vzc2Z1bFwiKSArIFwiIGZldGNoIHJlc3BvbnNlIGhhcyBiZWVuIHJldHVybmVkLlwiLFxuICAgICAgICAgIG9wZXJhdGlvbjogZSxcbiAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICB1cmw6IGMsXG4gICAgICAgICAgICBmZXRjaE9wdGlvbnM6IHMsXG4gICAgICAgICAgICB2YWx1ZTogciB8fCB0XG4gICAgICAgICAgfSxcbiAgICAgICAgICBzb3VyY2U6IFwiZmV0Y2hFeGNoYW5nZVwiXG4gICAgICAgIH0pO1xuICAgICAgfSkpKHIudGFrZVVudGlsKGkpKHQubWFrZUZldGNoU291cmNlKGUsIGMsIHMpKSk7XG4gICAgfSkpKHIuZmlsdGVyKChmdW5jdGlvbihlKSB7XG4gICAgICByZXR1cm4gXCJxdWVyeVwiID09PSBlLmtpbmQgfHwgXCJtdXRhdGlvblwiID09PSBlLmtpbmQ7XG4gICAgfSkpKG8pKTtcbiAgICB2YXIgdSA9IG4oci5maWx0ZXIoKGZ1bmN0aW9uKGUpIHtcbiAgICAgIHJldHVybiBcInF1ZXJ5XCIgIT09IGUua2luZCAmJiBcIm11dGF0aW9uXCIgIT09IGUua2luZDtcbiAgICB9KSkobykpO1xuICAgIHJldHVybiByLm1lcmdlKFsgaSwgdSBdKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZmFsbGJhY2tFeGNoYW5nZShlKSB7XG4gIHZhciB0ID0gZS5kaXNwYXRjaERlYnVnO1xuICByZXR1cm4gZnVuY3Rpb24oZSkge1xuICAgIHJldHVybiByLmZpbHRlcigoZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gITE7XG4gICAgfSkpKHIudGFwKChmdW5jdGlvbihlKSB7XG4gICAgICBpZiAoXCJ0ZWFyZG93blwiICE9PSBlLmtpbmQgJiYgXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WKSB7XG4gICAgICAgIHZhciByID0gJ05vIGV4Y2hhbmdlIGhhcyBoYW5kbGVkIG9wZXJhdGlvbnMgb2Yga2luZCBcIicgKyBlLmtpbmQgKyBcIlxcXCIuIENoZWNrIHdoZXRoZXIgeW91J3ZlIGFkZGVkIGFuIGV4Y2hhbmdlIHJlc3BvbnNpYmxlIGZvciB0aGVzZSBvcGVyYXRpb25zLlwiO1xuICAgICAgICBcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgJiYgdCh7XG4gICAgICAgICAgdHlwZTogXCJmYWxsYmFja0NhdGNoXCIsXG4gICAgICAgICAgbWVzc2FnZTogcixcbiAgICAgICAgICBvcGVyYXRpb246IGUsXG4gICAgICAgICAgc291cmNlOiBcImZhbGxiYWNrRXhjaGFuZ2VcIlxuICAgICAgICB9KTtcbiAgICAgICAgY29uc29sZS53YXJuKHIpO1xuICAgICAgfVxuICAgIH0pKShlKSk7XG4gIH07XG59XG5cbnZhciBvID0gZmFsbGJhY2tFeGNoYW5nZSh7XG4gIGRpc3BhdGNoRGVidWc6IG5vb3Bcbn0pO1xuXG5mdW5jdGlvbiBjb21wb3NlRXhjaGFuZ2VzKGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHIpIHtcbiAgICB2YXIgbiA9IHIuY2xpZW50O1xuICAgIHZhciBhID0gci5kaXNwYXRjaERlYnVnO1xuICAgIHJldHVybiBlLnJlZHVjZVJpZ2h0KChmdW5jdGlvbihlLCByKSB7XG4gICAgICByZXR1cm4gcih7XG4gICAgICAgIGNsaWVudDogbixcbiAgICAgICAgZm9yd2FyZDogZSxcbiAgICAgICAgZGlzcGF0Y2hEZWJ1ZzogZnVuY3Rpb24gZGlzcGF0Y2hEZWJ1ZyQxKGUpIHtcbiAgICAgICAgICBcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgJiYgYSh0Ll9leHRlbmRzKHt9LCB7XG4gICAgICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KCksXG4gICAgICAgICAgICBzb3VyY2U6IHIubmFtZVxuICAgICAgICAgIH0sIGUpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSksIHIuZm9yd2FyZCk7XG4gIH07XG59XG5cbnZhciBpID0gWyBkZWR1cEV4Y2hhbmdlLCBjYWNoZUV4Y2hhbmdlLCBmZXRjaEV4Y2hhbmdlIF07XG5cbnZhciB1ID0gZnVuY3Rpb24gQ2xpZW50KGUpIHtcbiAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViAmJiAhZS51cmwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgYXJlIGNyZWF0aW5nIGFuIHVycWwtY2xpZW50IHdpdGhvdXQgYSB1cmwuXCIpO1xuICB9XG4gIHZhciBuID0gbmV3IE1hcDtcbiAgdmFyIGEgPSBuZXcgTWFwO1xuICB2YXIgbyA9IFtdO1xuICB2YXIgdSA9IHIubWFrZVN1YmplY3QoKTtcbiAgdmFyIGMgPSB1LnNvdXJjZTtcbiAgdmFyIHMgPSB1Lm5leHQ7XG4gIHZhciBwID0gITE7XG4gIGZ1bmN0aW9uIGRpc3BhdGNoT3BlcmF0aW9uKGUpIHtcbiAgICBwID0gITA7XG4gICAgaWYgKGUpIHtcbiAgICAgIHMoZSk7XG4gICAgfVxuICAgIHdoaWxlIChlID0gby5zaGlmdCgpKSB7XG4gICAgICBzKGUpO1xuICAgIH1cbiAgICBwID0gITE7XG4gIH1cbiAgZnVuY3Rpb24gbWFrZVJlc3VsdFNvdXJjZShlKSB7XG4gICAgdmFyIGkgPSByLmZpbHRlcigoZnVuY3Rpb24odCkge1xuICAgICAgcmV0dXJuIHQub3BlcmF0aW9uLmtpbmQgPT09IGUua2luZCAmJiB0Lm9wZXJhdGlvbi5rZXkgPT09IGUua2V5O1xuICAgIH0pKShrKTtcbiAgICBpZiAobC5tYXNrVHlwZW5hbWUpIHtcbiAgICAgIGkgPSByLm1hcCgoZnVuY3Rpb24oZSkge1xuICAgICAgICByZXR1cm4gdC5fZXh0ZW5kcyh7fSwgZSwge1xuICAgICAgICAgIGRhdGE6IG1hc2tUeXBlbmFtZShlLmRhdGEpXG4gICAgICAgIH0pO1xuICAgICAgfSkpKGkpO1xuICAgIH1cbiAgICBpZiAoXCJtdXRhdGlvblwiID09PSBlLmtpbmQpIHtcbiAgICAgIHJldHVybiByLnRha2UoMSkoci5vblN0YXJ0KChmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGRpc3BhdGNoT3BlcmF0aW9uKGUpO1xuICAgICAgfSkpKGkpKTtcbiAgICB9XG4gICAgcmV0dXJuIHIuc2hhcmUoci5vbkVuZCgoZnVuY3Rpb24oKSB7XG4gICAgICBuLmRlbGV0ZShlLmtleSk7XG4gICAgICBhLmRlbGV0ZShlLmtleSk7XG4gICAgICBmb3IgKHZhciB0ID0gby5sZW5ndGggLSAxOyB0ID49IDA7IHQtLSkge1xuICAgICAgICBpZiAob1t0XS5rZXkgPT09IGUua2V5KSB7XG4gICAgICAgICAgby5zcGxpY2UodCwgMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGRpc3BhdGNoT3BlcmF0aW9uKG1ha2VPcGVyYXRpb24oXCJ0ZWFyZG93blwiLCBlLCBlLmNvbnRleHQpKTtcbiAgICB9KSkoci5vblB1c2goKGZ1bmN0aW9uKHQpIHtcbiAgICAgIG4uc2V0KGUua2V5LCB0KTtcbiAgICB9KSkoci5zd2l0Y2hNYXAoKGZ1bmN0aW9uKG4pIHtcbiAgICAgIGlmIChcInF1ZXJ5XCIgIT09IGUua2luZCB8fCBuLnN0YWxlKSB7XG4gICAgICAgIHJldHVybiByLmZyb21WYWx1ZShuKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByLm1lcmdlKFsgci5mcm9tVmFsdWUobiksIHIubWFwKChmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHQuX2V4dGVuZHMoe30sIG4sIHtcbiAgICAgICAgICBzdGFsZTogITBcbiAgICAgICAgfSk7XG4gICAgICB9KSkoci50YWtlKDEpKHIuZmlsdGVyKChmdW5jdGlvbih0KSB7XG4gICAgICAgIHJldHVybiBcInF1ZXJ5XCIgPT09IHQua2luZCAmJiB0LmtleSA9PT0gZS5rZXkgJiYgXCJjYWNoZS1vbmx5XCIgIT09IHQuY29udGV4dC5yZXF1ZXN0UG9saWN5O1xuICAgICAgfSkpKGMpKSkgXSk7XG4gICAgfSkpKHIudGFrZVVudGlsKHIuZmlsdGVyKChmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gXCJ0ZWFyZG93blwiID09PSB0LmtpbmQgJiYgdC5rZXkgPT09IGUua2V5O1xuICAgIH0pKShjKSkoaSkpKSkpO1xuICB9XG4gIHZhciBmID0gdGhpcyBpbnN0YW5jZW9mIENsaWVudCA/IHRoaXMgOiBPYmplY3QuY3JlYXRlKENsaWVudC5wcm90b3R5cGUpO1xuICB2YXIgbCA9IHQuX2V4dGVuZHMoZiwge1xuICAgIHVybDogZS51cmwsXG4gICAgZmV0Y2hPcHRpb25zOiBlLmZldGNoT3B0aW9ucyxcbiAgICBmZXRjaDogZS5mZXRjaCxcbiAgICBzdXNwZW5zZTogISFlLnN1c3BlbnNlLFxuICAgIHJlcXVlc3RQb2xpY3k6IGUucmVxdWVzdFBvbGljeSB8fCBcImNhY2hlLWZpcnN0XCIsXG4gICAgcHJlZmVyR2V0TWV0aG9kOiAhIWUucHJlZmVyR2V0TWV0aG9kLFxuICAgIG1hc2tUeXBlbmFtZTogISFlLm1hc2tUeXBlbmFtZSxcbiAgICBvcGVyYXRpb25zJDogYyxcbiAgICByZWV4ZWN1dGVPcGVyYXRpb246IGZ1bmN0aW9uIHJlZXhlY3V0ZU9wZXJhdGlvbihlKSB7XG4gICAgICBpZiAoXCJtdXRhdGlvblwiID09PSBlLmtpbmQgfHwgYS5oYXMoZS5rZXkpKSB7XG4gICAgICAgIG8ucHVzaChlKTtcbiAgICAgICAgaWYgKCFwKSB7XG4gICAgICAgICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbihkaXNwYXRjaE9wZXJhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGNyZWF0ZU9wZXJhdGlvbkNvbnRleHQ6IGZ1bmN0aW9uIGNyZWF0ZU9wZXJhdGlvbkNvbnRleHQoZSkge1xuICAgICAgaWYgKCFlKSB7XG4gICAgICAgIGUgPSB7fTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0Ll9leHRlbmRzKHt9LCB7XG4gICAgICAgIHVybDogbC51cmwsXG4gICAgICAgIGZldGNoT3B0aW9uczogbC5mZXRjaE9wdGlvbnMsXG4gICAgICAgIGZldGNoOiBsLmZldGNoLFxuICAgICAgICBwcmVmZXJHZXRNZXRob2Q6IGwucHJlZmVyR2V0TWV0aG9kXG4gICAgICB9LCBlLCB7XG4gICAgICAgIHN1c3BlbnNlOiBlLnN1c3BlbnNlIHx8ICExICE9PSBlLnN1c3BlbnNlICYmIGwuc3VzcGVuc2UsXG4gICAgICAgIHJlcXVlc3RQb2xpY3k6IGUucmVxdWVzdFBvbGljeSB8fCBsLnJlcXVlc3RQb2xpY3lcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgY3JlYXRlUmVxdWVzdE9wZXJhdGlvbjogZnVuY3Rpb24gY3JlYXRlUmVxdWVzdE9wZXJhdGlvbihlLCByLCBuKSB7XG4gICAgICB2YXIgYSA9IHQuZ2V0T3BlcmF0aW9uVHlwZShyLnF1ZXJ5KTtcbiAgICAgIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgJiYgXCJ0ZWFyZG93blwiICE9PSBlICYmIGEgIT09IGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBvcGVyYXRpb24gb2YgdHlwZSBcIicgKyBlICsgJ1wiIGJ1dCBmb3VuZCBcIicgKyBhICsgJ1wiJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWFrZU9wZXJhdGlvbihlLCByLCBsLmNyZWF0ZU9wZXJhdGlvbkNvbnRleHQobikpO1xuICAgIH0sXG4gICAgZXhlY3V0ZVJlcXVlc3RPcGVyYXRpb246IGZ1bmN0aW9uIGV4ZWN1dGVSZXF1ZXN0T3BlcmF0aW9uKGUpIHtcbiAgICAgIGlmIChcIm11dGF0aW9uXCIgPT09IGUua2luZCkge1xuICAgICAgICByZXR1cm4gbWFrZVJlc3VsdFNvdXJjZShlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByLm1ha2UoKGZ1bmN0aW9uKG8pIHtcbiAgICAgICAgdmFyIGkgPSBhLmdldChlLmtleSk7XG4gICAgICAgIGlmICghaSkge1xuICAgICAgICAgIGEuc2V0KGUua2V5LCBpID0gbWFrZVJlc3VsdFNvdXJjZShlKSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHUgPSBcImNhY2hlLWFuZC1uZXR3b3JrXCIgPT09IGUuY29udGV4dC5yZXF1ZXN0UG9saWN5IHx8IFwibmV0d29yay1vbmx5XCIgPT09IGUuY29udGV4dC5yZXF1ZXN0UG9saWN5O1xuICAgICAgICByZXR1cm4gci5zdWJzY3JpYmUoby5uZXh0KShyLm9uRW5kKG8uY29tcGxldGUpKHIub25TdGFydCgoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyIHIgPSBuLmdldChlLmtleSk7XG4gICAgICAgICAgaWYgKFwic3Vic2NyaXB0aW9uXCIgPT09IGUua2luZCkge1xuICAgICAgICAgICAgcmV0dXJuIGRpc3BhdGNoT3BlcmF0aW9uKGUpO1xuICAgICAgICAgIH0gZWxzZSBpZiAodSkge1xuICAgICAgICAgICAgZGlzcGF0Y2hPcGVyYXRpb24oZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChudWxsICE9IHIgJiYgciA9PT0gbi5nZXQoZS5rZXkpKSB7XG4gICAgICAgICAgICBvLm5leHQodSA/IHQuX2V4dGVuZHMoe30sIHIsIHtcbiAgICAgICAgICAgICAgc3RhbGU6ICEwXG4gICAgICAgICAgICB9KSA6IHIpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoIXUpIHtcbiAgICAgICAgICAgIGRpc3BhdGNoT3BlcmF0aW9uKGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSkpKGkpKSkudW5zdWJzY3JpYmU7XG4gICAgICB9KSk7XG4gICAgfSxcbiAgICBleGVjdXRlUXVlcnk6IGZ1bmN0aW9uIGV4ZWN1dGVRdWVyeShlLCB0KSB7XG4gICAgICB2YXIgciA9IGwuY3JlYXRlUmVxdWVzdE9wZXJhdGlvbihcInF1ZXJ5XCIsIGUsIHQpO1xuICAgICAgcmV0dXJuIGwuZXhlY3V0ZVJlcXVlc3RPcGVyYXRpb24ocik7XG4gICAgfSxcbiAgICBleGVjdXRlU3Vic2NyaXB0aW9uOiBmdW5jdGlvbiBleGVjdXRlU3Vic2NyaXB0aW9uKGUsIHQpIHtcbiAgICAgIHZhciByID0gbC5jcmVhdGVSZXF1ZXN0T3BlcmF0aW9uKFwic3Vic2NyaXB0aW9uXCIsIGUsIHQpO1xuICAgICAgcmV0dXJuIGwuZXhlY3V0ZVJlcXVlc3RPcGVyYXRpb24ocik7XG4gICAgfSxcbiAgICBleGVjdXRlTXV0YXRpb246IGZ1bmN0aW9uIGV4ZWN1dGVNdXRhdGlvbihlLCB0KSB7XG4gICAgICB2YXIgciA9IGwuY3JlYXRlUmVxdWVzdE9wZXJhdGlvbihcIm11dGF0aW9uXCIsIGUsIHQpO1xuICAgICAgcmV0dXJuIGwuZXhlY3V0ZVJlcXVlc3RPcGVyYXRpb24ocik7XG4gICAgfSxcbiAgICBxdWVyeTogZnVuY3Rpb24gcXVlcnkoZSwgciwgbikge1xuICAgICAgaWYgKCFuIHx8IFwiYm9vbGVhblwiICE9IHR5cGVvZiBuLnN1c3BlbnNlKSB7XG4gICAgICAgIG4gPSB0Ll9leHRlbmRzKHt9LCBuLCB7XG4gICAgICAgICAgc3VzcGVuc2U6ICExXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdpdGhQcm9taXNlKGwuZXhlY3V0ZVF1ZXJ5KHQuY3JlYXRlUmVxdWVzdChlLCByKSwgbikpO1xuICAgIH0sXG4gICAgcmVhZFF1ZXJ5OiBmdW5jdGlvbiByZWFkUXVlcnkoZSwgdCwgbikge1xuICAgICAgdmFyIGEgPSBudWxsO1xuICAgICAgci5zdWJzY3JpYmUoKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgYSA9IGU7XG4gICAgICB9KSkobC5xdWVyeShlLCB0LCBuKSkudW5zdWJzY3JpYmUoKTtcbiAgICAgIHJldHVybiBhO1xuICAgIH0sXG4gICAgc3Vic2NyaXB0aW9uOiBmdW5jdGlvbiBzdWJzY3JpcHRpb24oZSwgciwgbikge1xuICAgICAgcmV0dXJuIGwuZXhlY3V0ZVN1YnNjcmlwdGlvbih0LmNyZWF0ZVJlcXVlc3QoZSwgciksIG4pO1xuICAgIH0sXG4gICAgbXV0YXRpb246IGZ1bmN0aW9uIG11dGF0aW9uKGUsIHIsIG4pIHtcbiAgICAgIHJldHVybiB3aXRoUHJvbWlzZShsLmV4ZWN1dGVNdXRhdGlvbih0LmNyZWF0ZVJlcXVlc3QoZSwgciksIG4pKTtcbiAgICB9XG4gIH0pO1xuICB2YXIgZCA9IG5vb3A7XG4gIGlmIChcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICB2YXIgaCA9IHIubWFrZVN1YmplY3QoKTtcbiAgICB2YXIgdiA9IGgubmV4dDtcbiAgICB2YXIgbSA9IGguc291cmNlO1xuICAgIGwuc3Vic2NyaWJlVG9EZWJ1Z1RhcmdldCA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgIHJldHVybiByLnN1YnNjcmliZShlKShtKTtcbiAgICB9O1xuICAgIGQgPSB2O1xuICB9XG4gIHZhciB5ID0gY29tcG9zZUV4Y2hhbmdlcyh2b2lkIDAgIT09IGUuZXhjaGFuZ2VzID8gZS5leGNoYW5nZXMgOiBpKTtcbiAgdmFyIGsgPSByLnNoYXJlKHkoe1xuICAgIGNsaWVudDogbCxcbiAgICBkaXNwYXRjaERlYnVnOiBkLFxuICAgIGZvcndhcmQ6IGZhbGxiYWNrRXhjaGFuZ2Uoe1xuICAgICAgZGlzcGF0Y2hEZWJ1ZzogZFxuICAgIH0pXG4gIH0pKGMpKTtcbiAgci5wdWJsaXNoKGspO1xuICByZXR1cm4gbDtcbn07XG5cbnZhciBjID0gdTtcblxuZXhwb3J0cy5Db21iaW5lZEVycm9yID0gdC5Db21iaW5lZEVycm9yO1xuXG5leHBvcnRzLmNyZWF0ZVJlcXVlc3QgPSB0LmNyZWF0ZVJlcXVlc3Q7XG5cbmV4cG9ydHMuZ2V0T3BlcmF0aW9uTmFtZSA9IHQuZ2V0T3BlcmF0aW9uTmFtZTtcblxuZXhwb3J0cy5tYWtlRXJyb3JSZXN1bHQgPSB0Lm1ha2VFcnJvclJlc3VsdDtcblxuZXhwb3J0cy5tYWtlUmVzdWx0ID0gdC5tYWtlUmVzdWx0O1xuXG5leHBvcnRzLm1lcmdlUmVzdWx0UGF0Y2ggPSB0Lm1lcmdlUmVzdWx0UGF0Y2g7XG5cbmV4cG9ydHMuc3RyaW5naWZ5VmFyaWFibGVzID0gdC5zdHJpbmdpZnlWYXJpYWJsZXM7XG5cbmV4cG9ydHMuQ2xpZW50ID0gdTtcblxuZXhwb3J0cy5jYWNoZUV4Y2hhbmdlID0gY2FjaGVFeGNoYW5nZTtcblxuZXhwb3J0cy5jb21wb3NlRXhjaGFuZ2VzID0gY29tcG9zZUV4Y2hhbmdlcztcblxuZXhwb3J0cy5jcmVhdGVDbGllbnQgPSBjO1xuXG5leHBvcnRzLmRlYnVnRXhjaGFuZ2UgPSBmdW5jdGlvbiBkZWJ1Z0V4Y2hhbmdlKGUpIHtcbiAgdmFyIHQgPSBlLmZvcndhcmQ7XG4gIGlmIChcInByb2R1Y3Rpb25cIiA9PT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oZSkge1xuICAgICAgcmV0dXJuIHQoZSk7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oZSkge1xuICAgICAgcmV0dXJuIHIudGFwKChmdW5jdGlvbihlKSB7XG4gICAgICAgIHJldHVybiBjb25zb2xlLmxvZyhcIltFeGNoYW5nZSBkZWJ1Z106IENvbXBsZXRlZCBvcGVyYXRpb246IFwiLCBlKTtcbiAgICAgIH0pKSh0KHIudGFwKChmdW5jdGlvbihlKSB7XG4gICAgICAgIHJldHVybiBjb25zb2xlLmxvZyhcIltFeGNoYW5nZSBkZWJ1Z106IEluY29taW5nIG9wZXJhdGlvbjogXCIsIGUpO1xuICAgICAgfSkpKGUpKSk7XG4gICAgfTtcbiAgfVxufTtcblxuZXhwb3J0cy5kZWR1cEV4Y2hhbmdlID0gZGVkdXBFeGNoYW5nZTtcblxuZXhwb3J0cy5kZWZhdWx0RXhjaGFuZ2VzID0gaTtcblxuZXhwb3J0cy5lcnJvckV4Y2hhbmdlID0gZnVuY3Rpb24gZXJyb3JFeGNoYW5nZShlKSB7XG4gIHZhciB0ID0gZS5vbkVycm9yO1xuICByZXR1cm4gZnVuY3Rpb24oZSkge1xuICAgIHZhciBuID0gZS5mb3J3YXJkO1xuICAgIHJldHVybiBmdW5jdGlvbihlKSB7XG4gICAgICByZXR1cm4gci50YXAoKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgdmFyIHIgPSBlLmVycm9yO1xuICAgICAgICBpZiAocikge1xuICAgICAgICAgIHQociwgZS5vcGVyYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9KSkobihlKSk7XG4gICAgfTtcbiAgfTtcbn07XG5cbmV4cG9ydHMuZmFsbGJhY2tFeGNoYW5nZUlPID0gbztcblxuZXhwb3J0cy5mZXRjaEV4Y2hhbmdlID0gZmV0Y2hFeGNoYW5nZTtcblxuZXhwb3J0cy5mb3JtYXREb2N1bWVudCA9IGZvcm1hdERvY3VtZW50O1xuXG5leHBvcnRzLmdxbCA9IGZ1bmN0aW9uIGdxbCgpIHtcbiAgdmFyIHIgPSBhcmd1bWVudHM7XG4gIHZhciBuID0gbmV3IE1hcDtcbiAgdmFyIGEgPSBbXTtcbiAgdmFyIG8gPSBbXTtcbiAgdmFyIGkgPSBBcnJheS5pc0FycmF5KGFyZ3VtZW50c1swXSkgPyBhcmd1bWVudHNbMF1bMF0gOiBhcmd1bWVudHNbMF0gfHwgXCJcIjtcbiAgZm9yICh2YXIgdSA9IDE7IHUgPCBhcmd1bWVudHMubGVuZ3RoOyB1KyspIHtcbiAgICB2YXIgYyA9IHJbdV07XG4gICAgaWYgKGMgJiYgYy5kZWZpbml0aW9ucykge1xuICAgICAgby5wdXNoLmFwcGx5KG8sIGMuZGVmaW5pdGlvbnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpICs9IGM7XG4gICAgfVxuICAgIGkgKz0gclswXVt1XTtcbiAgfVxuICBhcHBseURlZmluaXRpb25zKG4sIGEsIHQua2V5RG9jdW1lbnQoaSkuZGVmaW5pdGlvbnMpO1xuICBhcHBseURlZmluaXRpb25zKG4sIGEsIG8pO1xuICByZXR1cm4gdC5rZXlEb2N1bWVudCh7XG4gICAga2luZDogZS5LaW5kLkRPQ1VNRU5ULFxuICAgIGRlZmluaXRpb25zOiBhXG4gIH0pO1xufTtcblxuZXhwb3J0cy5tYWtlT3BlcmF0aW9uID0gbWFrZU9wZXJhdGlvbjtcblxuZXhwb3J0cy5tYXNrVHlwZW5hbWUgPSBtYXNrVHlwZW5hbWU7XG5cbmV4cG9ydHMuc3NyRXhjaGFuZ2UgPSBmdW5jdGlvbiBzc3JFeGNoYW5nZShlKSB7XG4gIHZhciBuID0gISghZSB8fCAhZS5zdGFsZVdoaWxlUmV2YWxpZGF0ZSk7XG4gIHZhciBvID0gISghZSB8fCAhZS5pbmNsdWRlRXh0ZW5zaW9ucyk7XG4gIHZhciBpID0ge307XG4gIHZhciB1ID0gW107XG4gIGZ1bmN0aW9uIGludmFsaWRhdGUoZSkge1xuICAgIHUucHVzaChlLm9wZXJhdGlvbi5rZXkpO1xuICAgIGlmICgxID09PSB1Lmxlbmd0aCkge1xuICAgICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBlO1xuICAgICAgICB3aGlsZSAoZSA9IHUuc2hpZnQoKSkge1xuICAgICAgICAgIGlbZV0gPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9KSk7XG4gICAgfVxuICB9XG4gIHZhciBzc3IgPSBmdW5jdGlvbih1KSB7XG4gICAgdmFyIGMgPSB1LmNsaWVudDtcbiAgICB2YXIgcyA9IHUuZm9yd2FyZDtcbiAgICByZXR1cm4gZnVuY3Rpb24odSkge1xuICAgICAgdmFyIHAgPSBlICYmIFwiYm9vbGVhblwiID09IHR5cGVvZiBlLmlzQ2xpZW50ID8gISFlLmlzQ2xpZW50IDogIWMuc3VzcGVuc2U7XG4gICAgICB2YXIgZiA9IHIuc2hhcmUodSk7XG4gICAgICB2YXIgbCA9IHMoci5maWx0ZXIoKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgcmV0dXJuICFpW2Uua2V5XSB8fCAhIWlbZS5rZXldLmhhc05leHQ7XG4gICAgICB9KSkoZikpO1xuICAgICAgdmFyIGQgPSByLm1hcCgoZnVuY3Rpb24oZSkge1xuICAgICAgICB2YXIgciA9IGZ1bmN0aW9uIGRlc2VyaWFsaXplUmVzdWx0KGUsIHIsIG4pIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgb3BlcmF0aW9uOiBlLFxuICAgICAgICAgICAgZGF0YTogci5kYXRhID8gSlNPTi5wYXJzZShyLmRhdGEpIDogdm9pZCAwLFxuICAgICAgICAgICAgZXh0ZW5zaW9uczogbiAmJiByLmV4dGVuc2lvbnMgPyBKU09OLnBhcnNlKHIuZXh0ZW5zaW9ucykgOiB2b2lkIDAsXG4gICAgICAgICAgICBlcnJvcjogci5lcnJvciA/IG5ldyB0LkNvbWJpbmVkRXJyb3Ioe1xuICAgICAgICAgICAgICBuZXR3b3JrRXJyb3I6IHIuZXJyb3IubmV0d29ya0Vycm9yID8gbmV3IEVycm9yKHIuZXJyb3IubmV0d29ya0Vycm9yKSA6IHZvaWQgMCxcbiAgICAgICAgICAgICAgZ3JhcGhRTEVycm9yczogci5lcnJvci5ncmFwaFFMRXJyb3JzXG4gICAgICAgICAgICB9KSA6IHZvaWQgMCxcbiAgICAgICAgICAgIGhhc05leHQ6IHIuaGFzTmV4dFxuICAgICAgICAgIH07XG4gICAgICAgIH0oZSwgaVtlLmtleV0sIG8pO1xuICAgICAgICBpZiAobiAmJiAhYS5oYXMoZS5rZXkpKSB7XG4gICAgICAgICAgci5zdGFsZSA9ICEwO1xuICAgICAgICAgIGEuYWRkKGUua2V5KTtcbiAgICAgICAgICByZWV4ZWN1dGVPcGVyYXRpb24oYywgZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHI7XG4gICAgICB9KSkoci5maWx0ZXIoKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgcmV0dXJuICEhaVtlLmtleV07XG4gICAgICB9KSkoZikpO1xuICAgICAgaWYgKCFwKSB7XG4gICAgICAgIGwgPSByLnRhcCgoZnVuY3Rpb24oZSkge1xuICAgICAgICAgIHZhciB0ID0gZS5vcGVyYXRpb247XG4gICAgICAgICAgaWYgKFwibXV0YXRpb25cIiAhPT0gdC5raW5kKSB7XG4gICAgICAgICAgICB2YXIgciA9IGZ1bmN0aW9uIHNlcmlhbGl6ZVJlc3VsdChlLCB0KSB7XG4gICAgICAgICAgICAgIHZhciByID0gZS5oYXNOZXh0O1xuICAgICAgICAgICAgICB2YXIgbiA9IGUuZGF0YTtcbiAgICAgICAgICAgICAgdmFyIGEgPSBlLmV4dGVuc2lvbnM7XG4gICAgICAgICAgICAgIHZhciBvID0gZS5lcnJvcjtcbiAgICAgICAgICAgICAgdmFyIGkgPSB7fTtcbiAgICAgICAgICAgICAgaWYgKHZvaWQgMCAhPT0gbikge1xuICAgICAgICAgICAgICAgIGkuZGF0YSA9IEpTT04uc3RyaW5naWZ5KG4pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmICh0ICYmIHZvaWQgMCAhPT0gYSkge1xuICAgICAgICAgICAgICAgIGkuZXh0ZW5zaW9ucyA9IEpTT04uc3RyaW5naWZ5KGEpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChyKSB7XG4gICAgICAgICAgICAgICAgaS5oYXNOZXh0ID0gITA7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKG8pIHtcbiAgICAgICAgICAgICAgICBpLmVycm9yID0ge1xuICAgICAgICAgICAgICAgICAgZ3JhcGhRTEVycm9yczogby5ncmFwaFFMRXJyb3JzLm1hcCgoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWUucGF0aCAmJiAhZS5leHRlbnNpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUubWVzc2FnZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGUubWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgICBwYXRoOiBlLnBhdGgsXG4gICAgICAgICAgICAgICAgICAgICAgZXh0ZW5zaW9uczogZS5leHRlbnNpb25zXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICB9KSlcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGlmIChvLm5ldHdvcmtFcnJvcikge1xuICAgICAgICAgICAgICAgICAgaS5lcnJvci5uZXR3b3JrRXJyb3IgPSBcIlwiICsgby5uZXR3b3JrRXJyb3I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfShlLCBvKTtcbiAgICAgICAgICAgIGlbdC5rZXldID0gcjtcbiAgICAgICAgICB9XG4gICAgICAgIH0pKShsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGQgPSByLnRhcChpbnZhbGlkYXRlKShkKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByLm1lcmdlKFsgbCwgZCBdKTtcbiAgICB9O1xuICB9O1xuICBzc3IucmVzdG9yZURhdGEgPSBmdW5jdGlvbihlKSB7XG4gICAgZm9yICh2YXIgdCBpbiBlKSB7XG4gICAgICBpZiAobnVsbCAhPT0gaVt0XSkge1xuICAgICAgICBpW3RdID0gZVt0XTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIHNzci5leHRyYWN0RGF0YSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBlID0ge307XG4gICAgZm9yICh2YXIgdCBpbiBpKSB7XG4gICAgICBpZiAobnVsbCAhPSBpW3RdKSB7XG4gICAgICAgIGVbdF0gPSBpW3RdO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZTtcbiAgfTtcbiAgaWYgKGUgJiYgZS5pbml0aWFsU3RhdGUpIHtcbiAgICBzc3IucmVzdG9yZURhdGEoZS5pbml0aWFsU3RhdGUpO1xuICB9XG4gIHJldHVybiBzc3I7XG59O1xuXG5leHBvcnRzLnN1YnNjcmlwdGlvbkV4Y2hhbmdlID0gZnVuY3Rpb24gc3Vic2NyaXB0aW9uRXhjaGFuZ2Uobikge1xuICB2YXIgYSA9IG4uZm9yd2FyZFN1YnNjcmlwdGlvbjtcbiAgdmFyIG8gPSBuLmVuYWJsZUFsbE9wZXJhdGlvbnM7XG4gIHJldHVybiBmdW5jdGlvbihuKSB7XG4gICAgdmFyIGkgPSBuLmNsaWVudDtcbiAgICB2YXIgdSA9IG4uZm9yd2FyZDtcbiAgICBmdW5jdGlvbiBpc1N1YnNjcmlwdGlvbk9wZXJhdGlvbihlKSB7XG4gICAgICB2YXIgdCA9IGUua2luZDtcbiAgICAgIHJldHVybiBcInN1YnNjcmlwdGlvblwiID09PSB0IHx8ICEhbyAmJiAoXCJxdWVyeVwiID09PSB0IHx8IFwibXV0YXRpb25cIiA9PT0gdCk7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbihuKSB7XG4gICAgICB2YXIgbyA9IHIuc2hhcmUobik7XG4gICAgICB2YXIgYyA9IHIubWVyZ2VNYXAoKGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgdmFyIHUgPSBuLmtleTtcbiAgICAgICAgdmFyIGMgPSByLmZpbHRlcigoZnVuY3Rpb24oZSkge1xuICAgICAgICAgIHJldHVybiBcInRlYXJkb3duXCIgPT09IGUua2luZCAmJiBlLmtleSA9PT0gdTtcbiAgICAgICAgfSkpKG8pO1xuICAgICAgICByZXR1cm4gci50YWtlVW50aWwoYykoZnVuY3Rpb24gY3JlYXRlU3Vic2NyaXB0aW9uU291cmNlKG4pIHtcbiAgICAgICAgICB2YXIgbyA9IGEoe1xuICAgICAgICAgICAga2V5OiBuLmtleS50b1N0cmluZygzNiksXG4gICAgICAgICAgICBxdWVyeTogZS5wcmludChuLnF1ZXJ5KSxcbiAgICAgICAgICAgIHZhcmlhYmxlczogbi52YXJpYWJsZXMsXG4gICAgICAgICAgICBjb250ZXh0OiB0Ll9leHRlbmRzKHt9LCBuLmNvbnRleHQpXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIHIubWFrZSgoZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgdmFyIHIgPSBlLm5leHQ7XG4gICAgICAgICAgICB2YXIgYSA9IGUuY29tcGxldGU7XG4gICAgICAgICAgICB2YXIgdSA9ICExO1xuICAgICAgICAgICAgdmFyIGM7XG4gICAgICAgICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgaWYgKHUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYyA9IG8uc3Vic2NyaWJlKHtcbiAgICAgICAgICAgICAgICBuZXh0OiBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gcih0Lm1ha2VSZXN1bHQobiwgZSkpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiByKHQubWFrZUVycm9yUmVzdWx0KG4sIGUpKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgIGlmICghdSkge1xuICAgICAgICAgICAgICAgICAgICB1ID0gITA7XG4gICAgICAgICAgICAgICAgICAgIGlmIChcInN1YnNjcmlwdGlvblwiID09PSBuLmtpbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICBpLnJlZXhlY3V0ZU9wZXJhdGlvbihtYWtlT3BlcmF0aW9uKFwidGVhcmRvd25cIiwgbiwgbi5jb250ZXh0KSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYSgpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgIHUgPSAhMDtcbiAgICAgICAgICAgICAgaWYgKGMpIHtcbiAgICAgICAgICAgICAgICBjLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSkpO1xuICAgICAgICB9KG4pKTtcbiAgICAgIH0pKShyLmZpbHRlcihpc1N1YnNjcmlwdGlvbk9wZXJhdGlvbikobykpO1xuICAgICAgdmFyIHMgPSB1KHIuZmlsdGVyKChmdW5jdGlvbihlKSB7XG4gICAgICAgIHJldHVybiAhaXNTdWJzY3JpcHRpb25PcGVyYXRpb24oZSk7XG4gICAgICB9KSkobykpO1xuICAgICAgcmV0dXJuIHIubWVyZ2UoWyBjLCBzIF0pO1xuICAgIH07XG4gIH07XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXJxbC1jb3JlLmpzLm1hcFxuIiwiaW1wb3J0IHsgdjQgYXMgdXVpZHY0IH0gZnJvbSBcInV1aWRcIjtcbmltcG9ydCB7IGdxbCwgY3JlYXRlQ2xpZW50IH0gZnJvbSBcIkB1cnFsL2NvcmVcIjtcbmltcG9ydCB7IERvY3VtZW50Tm9kZSwgZ3JhcGhxbCB9IGZyb20gXCJncmFwaHFsXCI7XG5cbmNvbnN0IGNsaWVudCA9IGNyZWF0ZUNsaWVudCh7XG4gIHVybDogXCJodHRwczovL3d3dy5jb2RlLWluc3BlY3Rvci5jb20vZ3JhcGhxbFwiLFxufSk7XG5cbmNvbnN0IHJ1bm5pbmdWYWxpZGF0aW9uc0NhY2hlOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge307XG5cbmNvbnN0IFNUT1JBR0VfRklOR0VSUFJJTlRfS0VZID0gXCJjb2RpZ2EtdXNlclwiO1xuXG5jaHJvbWUuc3RvcmFnZS5vbkNoYW5nZWQuYWRkTGlzdGVuZXIoZnVuY3Rpb24gKGNoYW5nZXMsIG5hbWVzcGFjZSkge1xuICBmb3IgKGxldCBba2V5LCB7IG9sZFZhbHVlLCBuZXdWYWx1ZSB9XSBvZiBPYmplY3QuZW50cmllcyhjaGFuZ2VzKSkge1xuICAgIGNvbnNvbGUubG9nKFxuICAgICAgYFN0b3JhZ2Uga2V5IFwiJHtrZXl9XCIgaW4gbmFtZXNwYWNlIFwiJHtuYW1lc3BhY2V9XCIgY2hhbmdlZC5gLFxuICAgICAgYE9sZCB2YWx1ZSB3YXMgXCIke29sZFZhbHVlfVwiLCBuZXcgdmFsdWUgaXMgXCIke25ld1ZhbHVlfVwiLmBcbiAgICApO1xuICB9XG59KTtcblxuY29uc3QgZ2VuZXJhdGVGaW5nZXJwcmludCA9ICgpOiBQcm9taXNlPHN0cmluZz4gPT4ge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICBjaHJvbWUuc3RvcmFnZS5zeW5jLmdldChbU1RPUkFHRV9GSU5HRVJQUklOVF9LRVldLCAocmVzdWx0KSA9PiB7XG4gICAgICBpZiAoXG4gICAgICAgIHJlc3VsdCAmJlxuICAgICAgICBPYmplY3Qua2V5cyhyZXN1bHQpLmxlbmd0aCA9PT0gMCAmJlxuICAgICAgICByZXN1bHQuY29uc3RydWN0b3IgPT09IE9iamVjdFxuICAgICAgKSB7XG4gICAgICAgIGNvbnN0IGZpbmdlcnByaW50ID0gdXVpZHY0KCk7XG4gICAgICAgIGNocm9tZS5zdG9yYWdlLnN5bmMuc2V0KFxuICAgICAgICAgIHsgW1NUT1JBR0VfRklOR0VSUFJJTlRfS0VZXTogZmluZ2VycHJpbnQgfSxcbiAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICByZXNvbHZlKGZpbmdlcnByaW50KTtcbiAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXNvbHZlKHJlc3VsdFtTVE9SQUdFX0ZJTkdFUlBSSU5UX0tFWV0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn07XG5cbmNvbnN0IGNyZWF0ZUZpbGVBbmFseXNpc011dGF0aW9uID0gKFxuICBjb2RlOiBzdHJpbmcsXG4gIGZpbmdlcnByaW50OiBzdHJpbmcsXG4gIGxhbmd1YWdlOiBzdHJpbmcsXG4gIGZpbGVuYW1lOiBzdHJpbmdcbik6IERvY3VtZW50Tm9kZSA9PlxuICBncWxgbXV0YXRpb24ge1xuICAgIGNyZWF0ZUZpbGVBbmFseXNpcyhsYW5ndWFnZTogJHtsYW5ndWFnZX0sIGZpbGVuYW1lOiBcIiR7ZmlsZW5hbWV9XCIsIGNvZGU6ICR7SlNPTi5zdHJpbmdpZnkoXG4gICAgY29kZVxuICApfSwgZmluZ2VycHJpbnQ6IFwiJHtmaW5nZXJwcmludH1cIilcbn1gO1xuXG5jb25zdCBnZXRGaWxlQW5hbHlzaXNRdWVyeSA9IChmaW5nZXJwcmludDogc3RyaW5nLCBhbmFseXNpc0lkOiBzdHJpbmcpID0+XG4gIGdxbGB7XG4gICAgZ2V0RmlsZUFuYWx5c2lzKGlkOiAke2FuYWx5c2lzSWR9LCBmaW5nZXJwcmludDogXCIke2ZpbmdlcnByaW50fVwiKXtcbiAgICAgICAgdmlvbGF0aW9ucyB7XG4gICAgICAgICAgICBsaW5lXG4gICAgICAgICAgICBkZXNjcmlwdGlvblxuICAgICAgICAgICAgdG9vbFxuICAgICAgICAgICAgY2F0ZWdvcnlcbiAgICAgICAgICAgIHJ1bGVcbiAgICAgICAgICAgIHNldmVyaXR5XG4gICAgICAgIH1cbiAgICAgICAgY29kZVxuICAgICAgICBzdGF0dXNcbiAgICAgICAgdGltZXN0YW1wXG4gICAgICAgIHJ1bm5pbmdUaW1lU2Vjb25kc1xuICAgIH1cbn1gO1xuXG5jbGFzcyBGZXRjaENoZWNrZXIge1xuICBpbm5lckFuYWx5c2lzSWQ6IHN0cmluZztcblxuICBjb25zdHJ1Y3Rvcihpbm5lckFuYWx5c2lzSWQ6IHN0cmluZykge1xuICAgIHRoaXMuaW5uZXJBbmFseXNpc0lkID0gaW5uZXJBbmFseXNpc0lkO1xuICB9XG5cbiAgc2hvdWxkRmV0Y2goY2FjaGVLZXk6IHN0cmluZykge1xuICAgIHJldHVybiB0aGlzLmlubmVyQW5hbHlzaXNJZCA9PT0gcnVubmluZ1ZhbGlkYXRpb25zQ2FjaGVbY2FjaGVLZXldO1xuICB9XG59XG5cbmNvbnN0IGdldFNob3VsZEZldGNoID0gYXN5bmMgKGV4Y2VjdXRpb25JZDogc3RyaW5nLCBjYWNoZUtleTogc3RyaW5nKSA9PiB7XG4gIGNvbnN0IGZldGNoQ2hlY2tlciA9IG5ldyBGZXRjaENoZWNrZXIoZXhjZWN1dGlvbklkKTtcblxuICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgIGNvbnN0IHRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgIHJlc29sdmUoZmFsc2UpO1xuICAgIH0sIDEwMDApO1xuICB9KTtcblxuICByZXR1cm4gZmV0Y2hDaGVja2VyLnNob3VsZEZldGNoKGNhY2hlS2V5KTtcbn07XG5cbmNvbnN0IGdyb3VwQnkgPSAobDogQXJyYXk8YW55Piwga2V5OiBzdHJpbmcpID0+IHtcbiAgcmV0dXJuIGwucmVkdWNlKChhY2MsIGN1cnIpID0+IHtcbiAgICAoYWNjW2N1cnJba2V5XV0gPSBhY2NbY3VycltrZXldXSB8fCBbXSkucHVzaChjdXJyKTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG59O1xuXG50eXBlIFZhbGlkYXRlQ29kZVJlcXVlc3QgPSB7XG4gIGRhdGE6IHsgY29kZTogc3RyaW5nOyBsYW5ndWFnZTogc3RyaW5nOyBmaWxlbmFtZTogc3RyaW5nOyBpZDogc3RyaW5nIH07XG59O1xuY29uc3QgdmFsaWRhdGVDb2RlID0gKHJlcXVlc3Q6IFZhbGlkYXRlQ29kZVJlcXVlc3QpID0+XG4gIG5ldyBQcm9taXNlKGFzeW5jIChyZXNvbHZlKSA9PiB7XG4gICAgY29uc3QgZmluZ2VycHJpbnQgPSBhd2FpdCBnZW5lcmF0ZUZpbmdlcnByaW50KCk7XG4gICAgY29uc3QgY29kZSA9IHJlcXVlc3QuZGF0YS5jb2RlO1xuICAgIGNvbnN0IGxhbmd1YWdlID0gcmVxdWVzdC5kYXRhLmxhbmd1YWdlO1xuICAgIGNvbnN0IGZpbGVuYW1lID0gcmVxdWVzdC5kYXRhLmZpbGVuYW1lO1xuXG4gICAgY29uc3QgY29kZUVsZW1lbnRJZCA9IHJlcXVlc3QuZGF0YS5pZDtcbiAgICBjb25zdCBleGVjdXRpb25JZCA9IHV1aWR2NCgpO1xuXG4gICAgcnVubmluZ1ZhbGlkYXRpb25zQ2FjaGVbY29kZUVsZW1lbnRJZF0gPSBleGVjdXRpb25JZDtcblxuICAgIGNvbnN0IHNob3VsZEZldGNoID0gYXdhaXQgZ2V0U2hvdWxkRmV0Y2goZXhlY3V0aW9uSWQsIGNvZGVFbGVtZW50SWQpO1xuXG4gICAgY29uc3QgY3JlYXRlQW5hbHlzaXNSZXN1bHQgPSBzaG91bGRGZXRjaFxuICAgICAgPyBhd2FpdCBjbGllbnRcbiAgICAgICAgICAubXV0YXRpb24oXG4gICAgICAgICAgICBjcmVhdGVGaWxlQW5hbHlzaXNNdXRhdGlvbihjb2RlLCBmaW5nZXJwcmludCwgbGFuZ3VhZ2UsIGZpbGVuYW1lKVxuICAgICAgICAgIClcbiAgICAgICAgICAudG9Qcm9taXNlKClcbiAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgY29uc3QgZXJyb3JzID0gY3JlYXRlQW5hbHlzaXNSZXN1bHQ/LmRhdGEuZXJyb3JzO1xuICAgIGlmIChlcnJvcnMgJiYgZXJyb3JzLmxlbmd0aCkge1xuICAgICAgcmVzb2x2ZSh7IGVycm9ycyB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBJdCB3b24ndCBydW4gdW5sZXNzIGl0J3MgdGhlIGxhdGVzdCB0eXBlZCBjb2RlXG4gICAgaWYgKGNyZWF0ZUFuYWx5c2lzUmVzdWx0KSB7XG4gICAgICBjb25zdCBhbmFseXNpc0lkID0gY3JlYXRlQW5hbHlzaXNSZXN1bHQuZGF0YS5jcmVhdGVGaWxlQW5hbHlzaXM7XG5cbiAgICAgIGNvbnN0IGludGVydmFsID0gc2V0SW50ZXJ2YWwoYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBnZXRBbmFseXNpc1Jlc3VsdCA9IGF3YWl0IGNsaWVudFxuICAgICAgICAgIC5xdWVyeShnZXRGaWxlQW5hbHlzaXNRdWVyeShmaW5nZXJwcmludCwgYW5hbHlzaXNJZCkpXG4gICAgICAgICAgLnRvUHJvbWlzZSgpO1xuXG4gICAgICAgIGNvbnN0IGVycm9ycyA9IGdldEFuYWx5c2lzUmVzdWx0LmRhdGEuZXJyb3JzO1xuICAgICAgICBpZiAoZXJyb3JzKSB7XG4gICAgICAgICAgcmVzb2x2ZSh7IGVycm9ycyB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChnZXRBbmFseXNpc1Jlc3VsdC5kYXRhPy5nZXRGaWxlQW5hbHlzaXM/LnN0YXR1cyA9PT0gXCJEb25lXCIpIHtcbiAgICAgICAgICBjbGVhckludGVydmFsKGludGVydmFsKTtcbiAgICAgICAgICBjb25zdCBncm91cGVkVmlvbGF0aW9ucyA9IGdyb3VwQnkoXG4gICAgICAgICAgICBnZXRBbmFseXNpc1Jlc3VsdC5kYXRhLmdldEZpbGVBbmFseXNpcy52aW9sYXRpb25zLFxuICAgICAgICAgICAgXCJsaW5lXCJcbiAgICAgICAgICApO1xuICAgICAgICAgIGNvbnN0IG1hcHBlZFZpb2xhdGlvbnMgPSBPYmplY3Qua2V5cyhncm91cGVkVmlvbGF0aW9ucykubWFwKChrZXkpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIGxpbmU6IGtleSxcbiAgICAgICAgICAgICAgZ3JvdXA6IGdyb3VwZWRWaW9sYXRpb25zW2tleV0sXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJlc29sdmUoeyB2aW9sYXRpb25zOiBtYXBwZWRWaW9sYXRpb25zIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVzb2x2ZSh7dmlvbGF0aW9uczogW119KVxuICAgICAgfSwgMjAwMCk7XG4gICAgfVxuICB9KTtcblxuY2hyb21lLnJ1bnRpbWUub25NZXNzYWdlLmFkZExpc3RlbmVyKGZ1bmN0aW9uIChyZXF1ZXN0LCBzZW5kZXIsIHNlbmRSZXNwb25zZSkge1xuICBpZiAocmVxdWVzdC5jb250ZW50U2NyaXB0UXVlcnkgPT0gXCJ2YWxpZGF0ZUNvZGVcIikge1xuICAgIHZhbGlkYXRlQ29kZShyZXF1ZXN0KS50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgIHNlbmRSZXNwb25zZShyZXN1bHQpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59KTtcblxuLy8gVG8gbG9hZCBjb250ZW50LXNjcmlwdCBhZ2FpbiB3aGVuIHVybCBjaGFuZ2VzXG5jaHJvbWUudGFicy5vblVwZGF0ZWQuYWRkTGlzdGVuZXIoZnVuY3Rpb24gKHRhYklkLCBjaGFuZ2VJbmZvLCB0YWIpIHtcbiAgY29uc29sZS5sb2codGFiSWQsIGNoYW5nZUluZm8sIHRhYik7XG4gIGlmIChjaGFuZ2VJbmZvLnVybCB8fCBjaGFuZ2VJbmZvLnN0YXR1cyA9PT0gXCJjb21wbGV0ZVwiKSB7XG4gICAgY2hyb21lLnRhYnMuc2VuZE1lc3NhZ2UoXG4gICAgICB0YWJJZCxcbiAgICAgIHsgYWN0aW9uOiBcInVwZGF0ZUNvbnRhaW5lclwiIH0sXG4gICAgICBmdW5jdGlvbiAocmVzcG9uc2UpIHt9XG4gICAgKTtcbiAgfVxufSk7XG4iLCIvKlxuICogQnJvd3Nlci1jb21wYXRpYmxlIEphdmFTY3JpcHQgTUQ1XG4gKlxuICogTW9kaWZpY2F0aW9uIG9mIEphdmFTY3JpcHQgTUQ1XG4gKiBodHRwczovL2dpdGh1Yi5jb20vYmx1ZWltcC9KYXZhU2NyaXB0LU1ENVxuICpcbiAqIENvcHlyaWdodCAyMDExLCBTZWJhc3RpYW4gVHNjaGFuXG4gKiBodHRwczovL2JsdWVpbXAubmV0XG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlOlxuICogaHR0cHM6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9NSVRcbiAqXG4gKiBCYXNlZCBvblxuICogQSBKYXZhU2NyaXB0IGltcGxlbWVudGF0aW9uIG9mIHRoZSBSU0EgRGF0YSBTZWN1cml0eSwgSW5jLiBNRDUgTWVzc2FnZVxuICogRGlnZXN0IEFsZ29yaXRobSwgYXMgZGVmaW5lZCBpbiBSRkMgMTMyMS5cbiAqIFZlcnNpb24gMi4yIENvcHlyaWdodCAoQykgUGF1bCBKb2huc3RvbiAxOTk5IC0gMjAwOVxuICogT3RoZXIgY29udHJpYnV0b3JzOiBHcmVnIEhvbHQsIEFuZHJldyBLZXBlcnQsIFlkbmFyLCBMb3N0aW5ldFxuICogRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIEJTRCBMaWNlbnNlXG4gKiBTZWUgaHR0cDovL3BhamhvbWUub3JnLnVrL2NyeXB0L21kNSBmb3IgbW9yZSBpbmZvLlxuICovXG5mdW5jdGlvbiBtZDUoYnl0ZXMpIHtcbiAgaWYgKHR5cGVvZiBieXRlcyA9PT0gJ3N0cmluZycpIHtcbiAgICB2YXIgbXNnID0gdW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KGJ5dGVzKSk7IC8vIFVURjggZXNjYXBlXG5cbiAgICBieXRlcyA9IG5ldyBVaW50OEFycmF5KG1zZy5sZW5ndGgpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyArK2kpIHtcbiAgICAgIGJ5dGVzW2ldID0gbXNnLmNoYXJDb2RlQXQoaSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1kNVRvSGV4RW5jb2RlZEFycmF5KHdvcmRzVG9NZDUoYnl0ZXNUb1dvcmRzKGJ5dGVzKSwgYnl0ZXMubGVuZ3RoICogOCkpO1xufVxuLypcbiAqIENvbnZlcnQgYW4gYXJyYXkgb2YgbGl0dGxlLWVuZGlhbiB3b3JkcyB0byBhbiBhcnJheSBvZiBieXRlc1xuICovXG5cblxuZnVuY3Rpb24gbWQ1VG9IZXhFbmNvZGVkQXJyYXkoaW5wdXQpIHtcbiAgdmFyIG91dHB1dCA9IFtdO1xuICB2YXIgbGVuZ3RoMzIgPSBpbnB1dC5sZW5ndGggKiAzMjtcbiAgdmFyIGhleFRhYiA9ICcwMTIzNDU2Nzg5YWJjZGVmJztcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDMyOyBpICs9IDgpIHtcbiAgICB2YXIgeCA9IGlucHV0W2kgPj4gNV0gPj4+IGkgJSAzMiAmIDB4ZmY7XG4gICAgdmFyIGhleCA9IHBhcnNlSW50KGhleFRhYi5jaGFyQXQoeCA+Pj4gNCAmIDB4MGYpICsgaGV4VGFiLmNoYXJBdCh4ICYgMHgwZiksIDE2KTtcbiAgICBvdXRwdXQucHVzaChoZXgpO1xuICB9XG5cbiAgcmV0dXJuIG91dHB1dDtcbn1cbi8qKlxuICogQ2FsY3VsYXRlIG91dHB1dCBsZW5ndGggd2l0aCBwYWRkaW5nIGFuZCBiaXQgbGVuZ3RoXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRPdXRwdXRMZW5ndGgoaW5wdXRMZW5ndGg4KSB7XG4gIHJldHVybiAoaW5wdXRMZW5ndGg4ICsgNjQgPj4+IDkgPDwgNCkgKyAxNCArIDE7XG59XG4vKlxuICogQ2FsY3VsYXRlIHRoZSBNRDUgb2YgYW4gYXJyYXkgb2YgbGl0dGxlLWVuZGlhbiB3b3JkcywgYW5kIGEgYml0IGxlbmd0aC5cbiAqL1xuXG5cbmZ1bmN0aW9uIHdvcmRzVG9NZDUoeCwgbGVuKSB7XG4gIC8qIGFwcGVuZCBwYWRkaW5nICovXG4gIHhbbGVuID4+IDVdIHw9IDB4ODAgPDwgbGVuICUgMzI7XG4gIHhbZ2V0T3V0cHV0TGVuZ3RoKGxlbikgLSAxXSA9IGxlbjtcbiAgdmFyIGEgPSAxNzMyNTg0MTkzO1xuICB2YXIgYiA9IC0yNzE3MzM4Nzk7XG4gIHZhciBjID0gLTE3MzI1ODQxOTQ7XG4gIHZhciBkID0gMjcxNzMzODc4O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgeC5sZW5ndGg7IGkgKz0gMTYpIHtcbiAgICB2YXIgb2xkYSA9IGE7XG4gICAgdmFyIG9sZGIgPSBiO1xuICAgIHZhciBvbGRjID0gYztcbiAgICB2YXIgb2xkZCA9IGQ7XG4gICAgYSA9IG1kNWZmKGEsIGIsIGMsIGQsIHhbaV0sIDcsIC02ODA4NzY5MzYpO1xuICAgIGQgPSBtZDVmZihkLCBhLCBiLCBjLCB4W2kgKyAxXSwgMTIsIC0zODk1NjQ1ODYpO1xuICAgIGMgPSBtZDVmZihjLCBkLCBhLCBiLCB4W2kgKyAyXSwgMTcsIDYwNjEwNTgxOSk7XG4gICAgYiA9IG1kNWZmKGIsIGMsIGQsIGEsIHhbaSArIDNdLCAyMiwgLTEwNDQ1MjUzMzApO1xuICAgIGEgPSBtZDVmZihhLCBiLCBjLCBkLCB4W2kgKyA0XSwgNywgLTE3NjQxODg5Nyk7XG4gICAgZCA9IG1kNWZmKGQsIGEsIGIsIGMsIHhbaSArIDVdLCAxMiwgMTIwMDA4MDQyNik7XG4gICAgYyA9IG1kNWZmKGMsIGQsIGEsIGIsIHhbaSArIDZdLCAxNywgLTE0NzMyMzEzNDEpO1xuICAgIGIgPSBtZDVmZihiLCBjLCBkLCBhLCB4W2kgKyA3XSwgMjIsIC00NTcwNTk4Myk7XG4gICAgYSA9IG1kNWZmKGEsIGIsIGMsIGQsIHhbaSArIDhdLCA3LCAxNzcwMDM1NDE2KTtcbiAgICBkID0gbWQ1ZmYoZCwgYSwgYiwgYywgeFtpICsgOV0sIDEyLCAtMTk1ODQxNDQxNyk7XG4gICAgYyA9IG1kNWZmKGMsIGQsIGEsIGIsIHhbaSArIDEwXSwgMTcsIC00MjA2Myk7XG4gICAgYiA9IG1kNWZmKGIsIGMsIGQsIGEsIHhbaSArIDExXSwgMjIsIC0xOTkwNDA0MTYyKTtcbiAgICBhID0gbWQ1ZmYoYSwgYiwgYywgZCwgeFtpICsgMTJdLCA3LCAxODA0NjAzNjgyKTtcbiAgICBkID0gbWQ1ZmYoZCwgYSwgYiwgYywgeFtpICsgMTNdLCAxMiwgLTQwMzQxMTAxKTtcbiAgICBjID0gbWQ1ZmYoYywgZCwgYSwgYiwgeFtpICsgMTRdLCAxNywgLTE1MDIwMDIyOTApO1xuICAgIGIgPSBtZDVmZihiLCBjLCBkLCBhLCB4W2kgKyAxNV0sIDIyLCAxMjM2NTM1MzI5KTtcbiAgICBhID0gbWQ1Z2coYSwgYiwgYywgZCwgeFtpICsgMV0sIDUsIC0xNjU3OTY1MTApO1xuICAgIGQgPSBtZDVnZyhkLCBhLCBiLCBjLCB4W2kgKyA2XSwgOSwgLTEwNjk1MDE2MzIpO1xuICAgIGMgPSBtZDVnZyhjLCBkLCBhLCBiLCB4W2kgKyAxMV0sIDE0LCA2NDM3MTc3MTMpO1xuICAgIGIgPSBtZDVnZyhiLCBjLCBkLCBhLCB4W2ldLCAyMCwgLTM3Mzg5NzMwMik7XG4gICAgYSA9IG1kNWdnKGEsIGIsIGMsIGQsIHhbaSArIDVdLCA1LCAtNzAxNTU4NjkxKTtcbiAgICBkID0gbWQ1Z2coZCwgYSwgYiwgYywgeFtpICsgMTBdLCA5LCAzODAxNjA4Myk7XG4gICAgYyA9IG1kNWdnKGMsIGQsIGEsIGIsIHhbaSArIDE1XSwgMTQsIC02NjA0NzgzMzUpO1xuICAgIGIgPSBtZDVnZyhiLCBjLCBkLCBhLCB4W2kgKyA0XSwgMjAsIC00MDU1Mzc4NDgpO1xuICAgIGEgPSBtZDVnZyhhLCBiLCBjLCBkLCB4W2kgKyA5XSwgNSwgNTY4NDQ2NDM4KTtcbiAgICBkID0gbWQ1Z2coZCwgYSwgYiwgYywgeFtpICsgMTRdLCA5LCAtMTAxOTgwMzY5MCk7XG4gICAgYyA9IG1kNWdnKGMsIGQsIGEsIGIsIHhbaSArIDNdLCAxNCwgLTE4NzM2Mzk2MSk7XG4gICAgYiA9IG1kNWdnKGIsIGMsIGQsIGEsIHhbaSArIDhdLCAyMCwgMTE2MzUzMTUwMSk7XG4gICAgYSA9IG1kNWdnKGEsIGIsIGMsIGQsIHhbaSArIDEzXSwgNSwgLTE0NDQ2ODE0NjcpO1xuICAgIGQgPSBtZDVnZyhkLCBhLCBiLCBjLCB4W2kgKyAyXSwgOSwgLTUxNDAzNzg0KTtcbiAgICBjID0gbWQ1Z2coYywgZCwgYSwgYiwgeFtpICsgN10sIDE0LCAxNzM1MzI4NDczKTtcbiAgICBiID0gbWQ1Z2coYiwgYywgZCwgYSwgeFtpICsgMTJdLCAyMCwgLTE5MjY2MDc3MzQpO1xuICAgIGEgPSBtZDVoaChhLCBiLCBjLCBkLCB4W2kgKyA1XSwgNCwgLTM3ODU1OCk7XG4gICAgZCA9IG1kNWhoKGQsIGEsIGIsIGMsIHhbaSArIDhdLCAxMSwgLTIwMjI1NzQ0NjMpO1xuICAgIGMgPSBtZDVoaChjLCBkLCBhLCBiLCB4W2kgKyAxMV0sIDE2LCAxODM5MDMwNTYyKTtcbiAgICBiID0gbWQ1aGgoYiwgYywgZCwgYSwgeFtpICsgMTRdLCAyMywgLTM1MzA5NTU2KTtcbiAgICBhID0gbWQ1aGgoYSwgYiwgYywgZCwgeFtpICsgMV0sIDQsIC0xNTMwOTkyMDYwKTtcbiAgICBkID0gbWQ1aGgoZCwgYSwgYiwgYywgeFtpICsgNF0sIDExLCAxMjcyODkzMzUzKTtcbiAgICBjID0gbWQ1aGgoYywgZCwgYSwgYiwgeFtpICsgN10sIDE2LCAtMTU1NDk3NjMyKTtcbiAgICBiID0gbWQ1aGgoYiwgYywgZCwgYSwgeFtpICsgMTBdLCAyMywgLTEwOTQ3MzA2NDApO1xuICAgIGEgPSBtZDVoaChhLCBiLCBjLCBkLCB4W2kgKyAxM10sIDQsIDY4MTI3OTE3NCk7XG4gICAgZCA9IG1kNWhoKGQsIGEsIGIsIGMsIHhbaV0sIDExLCAtMzU4NTM3MjIyKTtcbiAgICBjID0gbWQ1aGgoYywgZCwgYSwgYiwgeFtpICsgM10sIDE2LCAtNzIyNTIxOTc5KTtcbiAgICBiID0gbWQ1aGgoYiwgYywgZCwgYSwgeFtpICsgNl0sIDIzLCA3NjAyOTE4OSk7XG4gICAgYSA9IG1kNWhoKGEsIGIsIGMsIGQsIHhbaSArIDldLCA0LCAtNjQwMzY0NDg3KTtcbiAgICBkID0gbWQ1aGgoZCwgYSwgYiwgYywgeFtpICsgMTJdLCAxMSwgLTQyMTgxNTgzNSk7XG4gICAgYyA9IG1kNWhoKGMsIGQsIGEsIGIsIHhbaSArIDE1XSwgMTYsIDUzMDc0MjUyMCk7XG4gICAgYiA9IG1kNWhoKGIsIGMsIGQsIGEsIHhbaSArIDJdLCAyMywgLTk5NTMzODY1MSk7XG4gICAgYSA9IG1kNWlpKGEsIGIsIGMsIGQsIHhbaV0sIDYsIC0xOTg2MzA4NDQpO1xuICAgIGQgPSBtZDVpaShkLCBhLCBiLCBjLCB4W2kgKyA3XSwgMTAsIDExMjY4OTE0MTUpO1xuICAgIGMgPSBtZDVpaShjLCBkLCBhLCBiLCB4W2kgKyAxNF0sIDE1LCAtMTQxNjM1NDkwNSk7XG4gICAgYiA9IG1kNWlpKGIsIGMsIGQsIGEsIHhbaSArIDVdLCAyMSwgLTU3NDM0MDU1KTtcbiAgICBhID0gbWQ1aWkoYSwgYiwgYywgZCwgeFtpICsgMTJdLCA2LCAxNzAwNDg1NTcxKTtcbiAgICBkID0gbWQ1aWkoZCwgYSwgYiwgYywgeFtpICsgM10sIDEwLCAtMTg5NDk4NjYwNik7XG4gICAgYyA9IG1kNWlpKGMsIGQsIGEsIGIsIHhbaSArIDEwXSwgMTUsIC0xMDUxNTIzKTtcbiAgICBiID0gbWQ1aWkoYiwgYywgZCwgYSwgeFtpICsgMV0sIDIxLCAtMjA1NDkyMjc5OSk7XG4gICAgYSA9IG1kNWlpKGEsIGIsIGMsIGQsIHhbaSArIDhdLCA2LCAxODczMzEzMzU5KTtcbiAgICBkID0gbWQ1aWkoZCwgYSwgYiwgYywgeFtpICsgMTVdLCAxMCwgLTMwNjExNzQ0KTtcbiAgICBjID0gbWQ1aWkoYywgZCwgYSwgYiwgeFtpICsgNl0sIDE1LCAtMTU2MDE5ODM4MCk7XG4gICAgYiA9IG1kNWlpKGIsIGMsIGQsIGEsIHhbaSArIDEzXSwgMjEsIDEzMDkxNTE2NDkpO1xuICAgIGEgPSBtZDVpaShhLCBiLCBjLCBkLCB4W2kgKyA0XSwgNiwgLTE0NTUyMzA3MCk7XG4gICAgZCA9IG1kNWlpKGQsIGEsIGIsIGMsIHhbaSArIDExXSwgMTAsIC0xMTIwMjEwMzc5KTtcbiAgICBjID0gbWQ1aWkoYywgZCwgYSwgYiwgeFtpICsgMl0sIDE1LCA3MTg3ODcyNTkpO1xuICAgIGIgPSBtZDVpaShiLCBjLCBkLCBhLCB4W2kgKyA5XSwgMjEsIC0zNDM0ODU1NTEpO1xuICAgIGEgPSBzYWZlQWRkKGEsIG9sZGEpO1xuICAgIGIgPSBzYWZlQWRkKGIsIG9sZGIpO1xuICAgIGMgPSBzYWZlQWRkKGMsIG9sZGMpO1xuICAgIGQgPSBzYWZlQWRkKGQsIG9sZGQpO1xuICB9XG5cbiAgcmV0dXJuIFthLCBiLCBjLCBkXTtcbn1cbi8qXG4gKiBDb252ZXJ0IGFuIGFycmF5IGJ5dGVzIHRvIGFuIGFycmF5IG9mIGxpdHRsZS1lbmRpYW4gd29yZHNcbiAqIENoYXJhY3RlcnMgPjI1NSBoYXZlIHRoZWlyIGhpZ2gtYnl0ZSBzaWxlbnRseSBpZ25vcmVkLlxuICovXG5cblxuZnVuY3Rpb24gYnl0ZXNUb1dvcmRzKGlucHV0KSB7XG4gIGlmIChpbnB1dC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICB2YXIgbGVuZ3RoOCA9IGlucHV0Lmxlbmd0aCAqIDg7XG4gIHZhciBvdXRwdXQgPSBuZXcgVWludDMyQXJyYXkoZ2V0T3V0cHV0TGVuZ3RoKGxlbmd0aDgpKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDg7IGkgKz0gOCkge1xuICAgIG91dHB1dFtpID4+IDVdIHw9IChpbnB1dFtpIC8gOF0gJiAweGZmKSA8PCBpICUgMzI7XG4gIH1cblxuICByZXR1cm4gb3V0cHV0O1xufVxuLypcbiAqIEFkZCBpbnRlZ2Vycywgd3JhcHBpbmcgYXQgMl4zMi4gVGhpcyB1c2VzIDE2LWJpdCBvcGVyYXRpb25zIGludGVybmFsbHlcbiAqIHRvIHdvcmsgYXJvdW5kIGJ1Z3MgaW4gc29tZSBKUyBpbnRlcnByZXRlcnMuXG4gKi9cblxuXG5mdW5jdGlvbiBzYWZlQWRkKHgsIHkpIHtcbiAgdmFyIGxzdyA9ICh4ICYgMHhmZmZmKSArICh5ICYgMHhmZmZmKTtcbiAgdmFyIG1zdyA9ICh4ID4+IDE2KSArICh5ID4+IDE2KSArIChsc3cgPj4gMTYpO1xuICByZXR1cm4gbXN3IDw8IDE2IHwgbHN3ICYgMHhmZmZmO1xufVxuLypcbiAqIEJpdHdpc2Ugcm90YXRlIGEgMzItYml0IG51bWJlciB0byB0aGUgbGVmdC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGJpdFJvdGF0ZUxlZnQobnVtLCBjbnQpIHtcbiAgcmV0dXJuIG51bSA8PCBjbnQgfCBudW0gPj4+IDMyIC0gY250O1xufVxuLypcbiAqIFRoZXNlIGZ1bmN0aW9ucyBpbXBsZW1lbnQgdGhlIGZvdXIgYmFzaWMgb3BlcmF0aW9ucyB0aGUgYWxnb3JpdGhtIHVzZXMuXG4gKi9cblxuXG5mdW5jdGlvbiBtZDVjbW4ocSwgYSwgYiwgeCwgcywgdCkge1xuICByZXR1cm4gc2FmZUFkZChiaXRSb3RhdGVMZWZ0KHNhZmVBZGQoc2FmZUFkZChhLCBxKSwgc2FmZUFkZCh4LCB0KSksIHMpLCBiKTtcbn1cblxuZnVuY3Rpb24gbWQ1ZmYoYSwgYiwgYywgZCwgeCwgcywgdCkge1xuICByZXR1cm4gbWQ1Y21uKGIgJiBjIHwgfmIgJiBkLCBhLCBiLCB4LCBzLCB0KTtcbn1cblxuZnVuY3Rpb24gbWQ1Z2coYSwgYiwgYywgZCwgeCwgcywgdCkge1xuICByZXR1cm4gbWQ1Y21uKGIgJiBkIHwgYyAmIH5kLCBhLCBiLCB4LCBzLCB0KTtcbn1cblxuZnVuY3Rpb24gbWQ1aGgoYSwgYiwgYywgZCwgeCwgcywgdCkge1xuICByZXR1cm4gbWQ1Y21uKGIgXiBjIF4gZCwgYSwgYiwgeCwgcywgdCk7XG59XG5cbmZ1bmN0aW9uIG1kNWlpKGEsIGIsIGMsIGQsIHgsIHMsIHQpIHtcbiAgcmV0dXJuIG1kNWNtbihjIF4gKGIgfCB+ZCksIGEsIGIsIHgsIHMsIHQpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBtZDU7IiwiZXhwb3J0IGRlZmF1bHQgJzAwMDAwMDAwLTAwMDAtMDAwMC0wMDAwLTAwMDAwMDAwMDAwMCc7IiwiaW1wb3J0IHZhbGlkYXRlIGZyb20gJy4vdmFsaWRhdGUuanMnO1xuXG5mdW5jdGlvbiBwYXJzZSh1dWlkKSB7XG4gIGlmICghdmFsaWRhdGUodXVpZCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ0ludmFsaWQgVVVJRCcpO1xuICB9XG5cbiAgdmFyIHY7XG4gIHZhciBhcnIgPSBuZXcgVWludDhBcnJheSgxNik7IC8vIFBhcnNlICMjIyMjIyMjLS4uLi4tLi4uLi0uLi4uLS4uLi4uLi4uLi4uLlxuXG4gIGFyclswXSA9ICh2ID0gcGFyc2VJbnQodXVpZC5zbGljZSgwLCA4KSwgMTYpKSA+Pj4gMjQ7XG4gIGFyclsxXSA9IHYgPj4+IDE2ICYgMHhmZjtcbiAgYXJyWzJdID0gdiA+Pj4gOCAmIDB4ZmY7XG4gIGFyclszXSA9IHYgJiAweGZmOyAvLyBQYXJzZSAuLi4uLi4uLi0jIyMjLS4uLi4tLi4uLi0uLi4uLi4uLi4uLi5cblxuICBhcnJbNF0gPSAodiA9IHBhcnNlSW50KHV1aWQuc2xpY2UoOSwgMTMpLCAxNikpID4+PiA4O1xuICBhcnJbNV0gPSB2ICYgMHhmZjsgLy8gUGFyc2UgLi4uLi4uLi4tLi4uLi0jIyMjLS4uLi4tLi4uLi4uLi4uLi4uXG5cbiAgYXJyWzZdID0gKHYgPSBwYXJzZUludCh1dWlkLnNsaWNlKDE0LCAxOCksIDE2KSkgPj4+IDg7XG4gIGFycls3XSA9IHYgJiAweGZmOyAvLyBQYXJzZSAuLi4uLi4uLi0uLi4uLS4uLi4tIyMjIy0uLi4uLi4uLi4uLi5cblxuICBhcnJbOF0gPSAodiA9IHBhcnNlSW50KHV1aWQuc2xpY2UoMTksIDIzKSwgMTYpKSA+Pj4gODtcbiAgYXJyWzldID0gdiAmIDB4ZmY7IC8vIFBhcnNlIC4uLi4uLi4uLS4uLi4tLi4uLi0uLi4uLSMjIyMjIyMjIyMjI1xuICAvLyAoVXNlIFwiL1wiIHRvIGF2b2lkIDMyLWJpdCB0cnVuY2F0aW9uIHdoZW4gYml0LXNoaWZ0aW5nIGhpZ2gtb3JkZXIgYnl0ZXMpXG5cbiAgYXJyWzEwXSA9ICh2ID0gcGFyc2VJbnQodXVpZC5zbGljZSgyNCwgMzYpLCAxNikpIC8gMHgxMDAwMDAwMDAwMCAmIDB4ZmY7XG4gIGFyclsxMV0gPSB2IC8gMHgxMDAwMDAwMDAgJiAweGZmO1xuICBhcnJbMTJdID0gdiA+Pj4gMjQgJiAweGZmO1xuICBhcnJbMTNdID0gdiA+Pj4gMTYgJiAweGZmO1xuICBhcnJbMTRdID0gdiA+Pj4gOCAmIDB4ZmY7XG4gIGFyclsxNV0gPSB2ICYgMHhmZjtcbiAgcmV0dXJuIGFycjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgcGFyc2U7IiwiZXhwb3J0IGRlZmF1bHQgL14oPzpbMC05YS1mXXs4fS1bMC05YS1mXXs0fS1bMS01XVswLTlhLWZdezN9LVs4OWFiXVswLTlhLWZdezN9LVswLTlhLWZdezEyfXwwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDApJC9pOyIsIi8vIFVuaXF1ZSBJRCBjcmVhdGlvbiByZXF1aXJlcyBhIGhpZ2ggcXVhbGl0eSByYW5kb20gIyBnZW5lcmF0b3IuIEluIHRoZSBicm93c2VyIHdlIHRoZXJlZm9yZVxuLy8gcmVxdWlyZSB0aGUgY3J5cHRvIEFQSSBhbmQgZG8gbm90IHN1cHBvcnQgYnVpbHQtaW4gZmFsbGJhY2sgdG8gbG93ZXIgcXVhbGl0eSByYW5kb20gbnVtYmVyXG4vLyBnZW5lcmF0b3JzIChsaWtlIE1hdGgucmFuZG9tKCkpLlxudmFyIGdldFJhbmRvbVZhbHVlcztcbnZhciBybmRzOCA9IG5ldyBVaW50OEFycmF5KDE2KTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJuZygpIHtcbiAgLy8gbGF6eSBsb2FkIHNvIHRoYXQgZW52aXJvbm1lbnRzIHRoYXQgbmVlZCB0byBwb2x5ZmlsbCBoYXZlIGEgY2hhbmNlIHRvIGRvIHNvXG4gIGlmICghZ2V0UmFuZG9tVmFsdWVzKSB7XG4gICAgLy8gZ2V0UmFuZG9tVmFsdWVzIG5lZWRzIHRvIGJlIGludm9rZWQgaW4gYSBjb250ZXh0IHdoZXJlIFwidGhpc1wiIGlzIGEgQ3J5cHRvIGltcGxlbWVudGF0aW9uLiBBbHNvLFxuICAgIC8vIGZpbmQgdGhlIGNvbXBsZXRlIGltcGxlbWVudGF0aW9uIG9mIGNyeXB0byAobXNDcnlwdG8pIG9uIElFMTEuXG4gICAgZ2V0UmFuZG9tVmFsdWVzID0gdHlwZW9mIGNyeXB0byAhPT0gJ3VuZGVmaW5lZCcgJiYgY3J5cHRvLmdldFJhbmRvbVZhbHVlcyAmJiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzLmJpbmQoY3J5cHRvKSB8fCB0eXBlb2YgbXNDcnlwdG8gIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBtc0NyeXB0by5nZXRSYW5kb21WYWx1ZXMgPT09ICdmdW5jdGlvbicgJiYgbXNDcnlwdG8uZ2V0UmFuZG9tVmFsdWVzLmJpbmQobXNDcnlwdG8pO1xuXG4gICAgaWYgKCFnZXRSYW5kb21WYWx1ZXMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignY3J5cHRvLmdldFJhbmRvbVZhbHVlcygpIG5vdCBzdXBwb3J0ZWQuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vdXVpZGpzL3V1aWQjZ2V0cmFuZG9tdmFsdWVzLW5vdC1zdXBwb3J0ZWQnKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZ2V0UmFuZG9tVmFsdWVzKHJuZHM4KTtcbn0iLCIvLyBBZGFwdGVkIGZyb20gQ2hyaXMgVmVuZXNzJyBTSEExIGNvZGUgYXRcbi8vIGh0dHA6Ly93d3cubW92YWJsZS10eXBlLmNvLnVrL3NjcmlwdHMvc2hhMS5odG1sXG5mdW5jdGlvbiBmKHMsIHgsIHksIHopIHtcbiAgc3dpdGNoIChzKSB7XG4gICAgY2FzZSAwOlxuICAgICAgcmV0dXJuIHggJiB5IF4gfnggJiB6O1xuXG4gICAgY2FzZSAxOlxuICAgICAgcmV0dXJuIHggXiB5IF4gejtcblxuICAgIGNhc2UgMjpcbiAgICAgIHJldHVybiB4ICYgeSBeIHggJiB6IF4geSAmIHo7XG5cbiAgICBjYXNlIDM6XG4gICAgICByZXR1cm4geCBeIHkgXiB6O1xuICB9XG59XG5cbmZ1bmN0aW9uIFJPVEwoeCwgbikge1xuICByZXR1cm4geCA8PCBuIHwgeCA+Pj4gMzIgLSBuO1xufVxuXG5mdW5jdGlvbiBzaGExKGJ5dGVzKSB7XG4gIHZhciBLID0gWzB4NWE4Mjc5OTksIDB4NmVkOWViYTEsIDB4OGYxYmJjZGMsIDB4Y2E2MmMxZDZdO1xuICB2YXIgSCA9IFsweDY3NDUyMzAxLCAweGVmY2RhYjg5LCAweDk4YmFkY2ZlLCAweDEwMzI1NDc2LCAweGMzZDJlMWYwXTtcblxuICBpZiAodHlwZW9mIGJ5dGVzID09PSAnc3RyaW5nJykge1xuICAgIHZhciBtc2cgPSB1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoYnl0ZXMpKTsgLy8gVVRGOCBlc2NhcGVcblxuICAgIGJ5dGVzID0gW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1zZy5sZW5ndGg7ICsraSkge1xuICAgICAgYnl0ZXMucHVzaChtc2cuY2hhckNvZGVBdChpKSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKCFBcnJheS5pc0FycmF5KGJ5dGVzKSkge1xuICAgIC8vIENvbnZlcnQgQXJyYXktbGlrZSB0byBBcnJheVxuICAgIGJ5dGVzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYnl0ZXMpO1xuICB9XG5cbiAgYnl0ZXMucHVzaCgweDgwKTtcbiAgdmFyIGwgPSBieXRlcy5sZW5ndGggLyA0ICsgMjtcbiAgdmFyIE4gPSBNYXRoLmNlaWwobCAvIDE2KTtcbiAgdmFyIE0gPSBuZXcgQXJyYXkoTik7XG5cbiAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IE47ICsrX2kpIHtcbiAgICB2YXIgYXJyID0gbmV3IFVpbnQzMkFycmF5KDE2KTtcblxuICAgIGZvciAodmFyIGogPSAwOyBqIDwgMTY7ICsraikge1xuICAgICAgYXJyW2pdID0gYnl0ZXNbX2kgKiA2NCArIGogKiA0XSA8PCAyNCB8IGJ5dGVzW19pICogNjQgKyBqICogNCArIDFdIDw8IDE2IHwgYnl0ZXNbX2kgKiA2NCArIGogKiA0ICsgMl0gPDwgOCB8IGJ5dGVzW19pICogNjQgKyBqICogNCArIDNdO1xuICAgIH1cblxuICAgIE1bX2ldID0gYXJyO1xuICB9XG5cbiAgTVtOIC0gMV1bMTRdID0gKGJ5dGVzLmxlbmd0aCAtIDEpICogOCAvIE1hdGgucG93KDIsIDMyKTtcbiAgTVtOIC0gMV1bMTRdID0gTWF0aC5mbG9vcihNW04gLSAxXVsxNF0pO1xuICBNW04gLSAxXVsxNV0gPSAoYnl0ZXMubGVuZ3RoIC0gMSkgKiA4ICYgMHhmZmZmZmZmZjtcblxuICBmb3IgKHZhciBfaTIgPSAwOyBfaTIgPCBOOyArK19pMikge1xuICAgIHZhciBXID0gbmV3IFVpbnQzMkFycmF5KDgwKTtcblxuICAgIGZvciAodmFyIHQgPSAwOyB0IDwgMTY7ICsrdCkge1xuICAgICAgV1t0XSA9IE1bX2kyXVt0XTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBfdCA9IDE2OyBfdCA8IDgwOyArK190KSB7XG4gICAgICBXW190XSA9IFJPVEwoV1tfdCAtIDNdIF4gV1tfdCAtIDhdIF4gV1tfdCAtIDE0XSBeIFdbX3QgLSAxNl0sIDEpO1xuICAgIH1cblxuICAgIHZhciBhID0gSFswXTtcbiAgICB2YXIgYiA9IEhbMV07XG4gICAgdmFyIGMgPSBIWzJdO1xuICAgIHZhciBkID0gSFszXTtcbiAgICB2YXIgZSA9IEhbNF07XG5cbiAgICBmb3IgKHZhciBfdDIgPSAwOyBfdDIgPCA4MDsgKytfdDIpIHtcbiAgICAgIHZhciBzID0gTWF0aC5mbG9vcihfdDIgLyAyMCk7XG4gICAgICB2YXIgVCA9IFJPVEwoYSwgNSkgKyBmKHMsIGIsIGMsIGQpICsgZSArIEtbc10gKyBXW190Ml0gPj4+IDA7XG4gICAgICBlID0gZDtcbiAgICAgIGQgPSBjO1xuICAgICAgYyA9IFJPVEwoYiwgMzApID4+PiAwO1xuICAgICAgYiA9IGE7XG4gICAgICBhID0gVDtcbiAgICB9XG5cbiAgICBIWzBdID0gSFswXSArIGEgPj4+IDA7XG4gICAgSFsxXSA9IEhbMV0gKyBiID4+PiAwO1xuICAgIEhbMl0gPSBIWzJdICsgYyA+Pj4gMDtcbiAgICBIWzNdID0gSFszXSArIGQgPj4+IDA7XG4gICAgSFs0XSA9IEhbNF0gKyBlID4+PiAwO1xuICB9XG5cbiAgcmV0dXJuIFtIWzBdID4+IDI0ICYgMHhmZiwgSFswXSA+PiAxNiAmIDB4ZmYsIEhbMF0gPj4gOCAmIDB4ZmYsIEhbMF0gJiAweGZmLCBIWzFdID4+IDI0ICYgMHhmZiwgSFsxXSA+PiAxNiAmIDB4ZmYsIEhbMV0gPj4gOCAmIDB4ZmYsIEhbMV0gJiAweGZmLCBIWzJdID4+IDI0ICYgMHhmZiwgSFsyXSA+PiAxNiAmIDB4ZmYsIEhbMl0gPj4gOCAmIDB4ZmYsIEhbMl0gJiAweGZmLCBIWzNdID4+IDI0ICYgMHhmZiwgSFszXSA+PiAxNiAmIDB4ZmYsIEhbM10gPj4gOCAmIDB4ZmYsIEhbM10gJiAweGZmLCBIWzRdID4+IDI0ICYgMHhmZiwgSFs0XSA+PiAxNiAmIDB4ZmYsIEhbNF0gPj4gOCAmIDB4ZmYsIEhbNF0gJiAweGZmXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc2hhMTsiLCJpbXBvcnQgdmFsaWRhdGUgZnJvbSAnLi92YWxpZGF0ZS5qcyc7XG4vKipcbiAqIENvbnZlcnQgYXJyYXkgb2YgMTYgYnl0ZSB2YWx1ZXMgdG8gVVVJRCBzdHJpbmcgZm9ybWF0IG9mIHRoZSBmb3JtOlxuICogWFhYWFhYWFgtWFhYWC1YWFhYLVhYWFgtWFhYWFhYWFhYWFhYXG4gKi9cblxudmFyIGJ5dGVUb0hleCA9IFtdO1xuXG5mb3IgKHZhciBpID0gMDsgaSA8IDI1NjsgKytpKSB7XG4gIGJ5dGVUb0hleC5wdXNoKChpICsgMHgxMDApLnRvU3RyaW5nKDE2KS5zdWJzdHIoMSkpO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnkoYXJyKSB7XG4gIHZhciBvZmZzZXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDA7XG4gIC8vIE5vdGU6IEJlIGNhcmVmdWwgZWRpdGluZyB0aGlzIGNvZGUhICBJdCdzIGJlZW4gdHVuZWQgZm9yIHBlcmZvcm1hbmNlXG4gIC8vIGFuZCB3b3JrcyBpbiB3YXlzIHlvdSBtYXkgbm90IGV4cGVjdC4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS91dWlkanMvdXVpZC9wdWxsLzQzNFxuICB2YXIgdXVpZCA9IChieXRlVG9IZXhbYXJyW29mZnNldCArIDBdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMV1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAyXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDNdXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgNF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA1XV0gKyAnLScgKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDZdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgN11dICsgJy0nICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA4XV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDldXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTBdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTFdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTJdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTNdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTRdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMTVdXSkudG9Mb3dlckNhc2UoKTsgLy8gQ29uc2lzdGVuY3kgY2hlY2sgZm9yIHZhbGlkIFVVSUQuICBJZiB0aGlzIHRocm93cywgaXQncyBsaWtlbHkgZHVlIHRvIG9uZVxuICAvLyBvZiB0aGUgZm9sbG93aW5nOlxuICAvLyAtIE9uZSBvciBtb3JlIGlucHV0IGFycmF5IHZhbHVlcyBkb24ndCBtYXAgdG8gYSBoZXggb2N0ZXQgKGxlYWRpbmcgdG9cbiAgLy8gXCJ1bmRlZmluZWRcIiBpbiB0aGUgdXVpZClcbiAgLy8gLSBJbnZhbGlkIGlucHV0IHZhbHVlcyBmb3IgdGhlIFJGQyBgdmVyc2lvbmAgb3IgYHZhcmlhbnRgIGZpZWxkc1xuXG4gIGlmICghdmFsaWRhdGUodXVpZCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ1N0cmluZ2lmaWVkIFVVSUQgaXMgaW52YWxpZCcpO1xuICB9XG5cbiAgcmV0dXJuIHV1aWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0cmluZ2lmeTsiLCJpbXBvcnQgcm5nIGZyb20gJy4vcm5nLmpzJztcbmltcG9ydCBzdHJpbmdpZnkgZnJvbSAnLi9zdHJpbmdpZnkuanMnOyAvLyAqKmB2MSgpYCAtIEdlbmVyYXRlIHRpbWUtYmFzZWQgVVVJRCoqXG4vL1xuLy8gSW5zcGlyZWQgYnkgaHR0cHM6Ly9naXRodWIuY29tL0xpb3NLL1VVSUQuanNcbi8vIGFuZCBodHRwOi8vZG9jcy5weXRob24ub3JnL2xpYnJhcnkvdXVpZC5odG1sXG5cbnZhciBfbm9kZUlkO1xuXG52YXIgX2Nsb2Nrc2VxOyAvLyBQcmV2aW91cyB1dWlkIGNyZWF0aW9uIHRpbWVcblxuXG52YXIgX2xhc3RNU2VjcyA9IDA7XG52YXIgX2xhc3ROU2VjcyA9IDA7IC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vdXVpZGpzL3V1aWQgZm9yIEFQSSBkZXRhaWxzXG5cbmZ1bmN0aW9uIHYxKG9wdGlvbnMsIGJ1Ziwgb2Zmc2V0KSB7XG4gIHZhciBpID0gYnVmICYmIG9mZnNldCB8fCAwO1xuICB2YXIgYiA9IGJ1ZiB8fCBuZXcgQXJyYXkoMTYpO1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIG5vZGUgPSBvcHRpb25zLm5vZGUgfHwgX25vZGVJZDtcbiAgdmFyIGNsb2Nrc2VxID0gb3B0aW9ucy5jbG9ja3NlcSAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5jbG9ja3NlcSA6IF9jbG9ja3NlcTsgLy8gbm9kZSBhbmQgY2xvY2tzZXEgbmVlZCB0byBiZSBpbml0aWFsaXplZCB0byByYW5kb20gdmFsdWVzIGlmIHRoZXkncmUgbm90XG4gIC8vIHNwZWNpZmllZC4gIFdlIGRvIHRoaXMgbGF6aWx5IHRvIG1pbmltaXplIGlzc3VlcyByZWxhdGVkIHRvIGluc3VmZmljaWVudFxuICAvLyBzeXN0ZW0gZW50cm9weS4gIFNlZSAjMTg5XG5cbiAgaWYgKG5vZGUgPT0gbnVsbCB8fCBjbG9ja3NlcSA9PSBudWxsKSB7XG4gICAgdmFyIHNlZWRCeXRlcyA9IG9wdGlvbnMucmFuZG9tIHx8IChvcHRpb25zLnJuZyB8fCBybmcpKCk7XG5cbiAgICBpZiAobm9kZSA9PSBudWxsKSB7XG4gICAgICAvLyBQZXIgNC41LCBjcmVhdGUgYW5kIDQ4LWJpdCBub2RlIGlkLCAoNDcgcmFuZG9tIGJpdHMgKyBtdWx0aWNhc3QgYml0ID0gMSlcbiAgICAgIG5vZGUgPSBfbm9kZUlkID0gW3NlZWRCeXRlc1swXSB8IDB4MDEsIHNlZWRCeXRlc1sxXSwgc2VlZEJ5dGVzWzJdLCBzZWVkQnl0ZXNbM10sIHNlZWRCeXRlc1s0XSwgc2VlZEJ5dGVzWzVdXTtcbiAgICB9XG5cbiAgICBpZiAoY2xvY2tzZXEgPT0gbnVsbCkge1xuICAgICAgLy8gUGVyIDQuMi4yLCByYW5kb21pemUgKDE0IGJpdCkgY2xvY2tzZXFcbiAgICAgIGNsb2Nrc2VxID0gX2Nsb2Nrc2VxID0gKHNlZWRCeXRlc1s2XSA8PCA4IHwgc2VlZEJ5dGVzWzddKSAmIDB4M2ZmZjtcbiAgICB9XG4gIH0gLy8gVVVJRCB0aW1lc3RhbXBzIGFyZSAxMDAgbmFuby1zZWNvbmQgdW5pdHMgc2luY2UgdGhlIEdyZWdvcmlhbiBlcG9jaCxcbiAgLy8gKDE1ODItMTAtMTUgMDA6MDApLiAgSlNOdW1iZXJzIGFyZW4ndCBwcmVjaXNlIGVub3VnaCBmb3IgdGhpcywgc29cbiAgLy8gdGltZSBpcyBoYW5kbGVkIGludGVybmFsbHkgYXMgJ21zZWNzJyAoaW50ZWdlciBtaWxsaXNlY29uZHMpIGFuZCAnbnNlY3MnXG4gIC8vICgxMDAtbmFub3NlY29uZHMgb2Zmc2V0IGZyb20gbXNlY3MpIHNpbmNlIHVuaXggZXBvY2gsIDE5NzAtMDEtMDEgMDA6MDAuXG5cblxuICB2YXIgbXNlY3MgPSBvcHRpb25zLm1zZWNzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLm1zZWNzIDogRGF0ZS5ub3coKTsgLy8gUGVyIDQuMi4xLjIsIHVzZSBjb3VudCBvZiB1dWlkJ3MgZ2VuZXJhdGVkIGR1cmluZyB0aGUgY3VycmVudCBjbG9ja1xuICAvLyBjeWNsZSB0byBzaW11bGF0ZSBoaWdoZXIgcmVzb2x1dGlvbiBjbG9ja1xuXG4gIHZhciBuc2VjcyA9IG9wdGlvbnMubnNlY3MgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMubnNlY3MgOiBfbGFzdE5TZWNzICsgMTsgLy8gVGltZSBzaW5jZSBsYXN0IHV1aWQgY3JlYXRpb24gKGluIG1zZWNzKVxuXG4gIHZhciBkdCA9IG1zZWNzIC0gX2xhc3RNU2VjcyArIChuc2VjcyAtIF9sYXN0TlNlY3MpIC8gMTAwMDA7IC8vIFBlciA0LjIuMS4yLCBCdW1wIGNsb2Nrc2VxIG9uIGNsb2NrIHJlZ3Jlc3Npb25cblxuICBpZiAoZHQgPCAwICYmIG9wdGlvbnMuY2xvY2tzZXEgPT09IHVuZGVmaW5lZCkge1xuICAgIGNsb2Nrc2VxID0gY2xvY2tzZXEgKyAxICYgMHgzZmZmO1xuICB9IC8vIFJlc2V0IG5zZWNzIGlmIGNsb2NrIHJlZ3Jlc3NlcyAobmV3IGNsb2Nrc2VxKSBvciB3ZSd2ZSBtb3ZlZCBvbnRvIGEgbmV3XG4gIC8vIHRpbWUgaW50ZXJ2YWxcblxuXG4gIGlmICgoZHQgPCAwIHx8IG1zZWNzID4gX2xhc3RNU2VjcykgJiYgb3B0aW9ucy5uc2VjcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbnNlY3MgPSAwO1xuICB9IC8vIFBlciA0LjIuMS4yIFRocm93IGVycm9yIGlmIHRvbyBtYW55IHV1aWRzIGFyZSByZXF1ZXN0ZWRcblxuXG4gIGlmIChuc2VjcyA+PSAxMDAwMCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcInV1aWQudjEoKTogQ2FuJ3QgY3JlYXRlIG1vcmUgdGhhbiAxME0gdXVpZHMvc2VjXCIpO1xuICB9XG5cbiAgX2xhc3RNU2VjcyA9IG1zZWNzO1xuICBfbGFzdE5TZWNzID0gbnNlY3M7XG4gIF9jbG9ja3NlcSA9IGNsb2Nrc2VxOyAvLyBQZXIgNC4xLjQgLSBDb252ZXJ0IGZyb20gdW5peCBlcG9jaCB0byBHcmVnb3JpYW4gZXBvY2hcblxuICBtc2VjcyArPSAxMjIxOTI5MjgwMDAwMDsgLy8gYHRpbWVfbG93YFxuXG4gIHZhciB0bCA9ICgobXNlY3MgJiAweGZmZmZmZmYpICogMTAwMDAgKyBuc2VjcykgJSAweDEwMDAwMDAwMDtcbiAgYltpKytdID0gdGwgPj4+IDI0ICYgMHhmZjtcbiAgYltpKytdID0gdGwgPj4+IDE2ICYgMHhmZjtcbiAgYltpKytdID0gdGwgPj4+IDggJiAweGZmO1xuICBiW2krK10gPSB0bCAmIDB4ZmY7IC8vIGB0aW1lX21pZGBcblxuICB2YXIgdG1oID0gbXNlY3MgLyAweDEwMDAwMDAwMCAqIDEwMDAwICYgMHhmZmZmZmZmO1xuICBiW2krK10gPSB0bWggPj4+IDggJiAweGZmO1xuICBiW2krK10gPSB0bWggJiAweGZmOyAvLyBgdGltZV9oaWdoX2FuZF92ZXJzaW9uYFxuXG4gIGJbaSsrXSA9IHRtaCA+Pj4gMjQgJiAweGYgfCAweDEwOyAvLyBpbmNsdWRlIHZlcnNpb25cblxuICBiW2krK10gPSB0bWggPj4+IDE2ICYgMHhmZjsgLy8gYGNsb2NrX3NlcV9oaV9hbmRfcmVzZXJ2ZWRgIChQZXIgNC4yLjIgLSBpbmNsdWRlIHZhcmlhbnQpXG5cbiAgYltpKytdID0gY2xvY2tzZXEgPj4+IDggfCAweDgwOyAvLyBgY2xvY2tfc2VxX2xvd2BcblxuICBiW2krK10gPSBjbG9ja3NlcSAmIDB4ZmY7IC8vIGBub2RlYFxuXG4gIGZvciAodmFyIG4gPSAwOyBuIDwgNjsgKytuKSB7XG4gICAgYltpICsgbl0gPSBub2RlW25dO1xuICB9XG5cbiAgcmV0dXJuIGJ1ZiB8fCBzdHJpbmdpZnkoYik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHYxOyIsImltcG9ydCB2MzUgZnJvbSAnLi92MzUuanMnO1xuaW1wb3J0IG1kNSBmcm9tICcuL21kNS5qcyc7XG52YXIgdjMgPSB2MzUoJ3YzJywgMHgzMCwgbWQ1KTtcbmV4cG9ydCBkZWZhdWx0IHYzOyIsImltcG9ydCBzdHJpbmdpZnkgZnJvbSAnLi9zdHJpbmdpZnkuanMnO1xuaW1wb3J0IHBhcnNlIGZyb20gJy4vcGFyc2UuanMnO1xuXG5mdW5jdGlvbiBzdHJpbmdUb0J5dGVzKHN0cikge1xuICBzdHIgPSB1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoc3RyKSk7IC8vIFVURjggZXNjYXBlXG5cbiAgdmFyIGJ5dGVzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICBieXRlcy5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpKTtcbiAgfVxuXG4gIHJldHVybiBieXRlcztcbn1cblxuZXhwb3J0IHZhciBETlMgPSAnNmJhN2I4MTAtOWRhZC0xMWQxLTgwYjQtMDBjMDRmZDQzMGM4JztcbmV4cG9ydCB2YXIgVVJMID0gJzZiYTdiODExLTlkYWQtMTFkMS04MGI0LTAwYzA0ZmQ0MzBjOCc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAobmFtZSwgdmVyc2lvbiwgaGFzaGZ1bmMpIHtcbiAgZnVuY3Rpb24gZ2VuZXJhdGVVVUlEKHZhbHVlLCBuYW1lc3BhY2UsIGJ1Ziwgb2Zmc2V0KSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHZhbHVlID0gc3RyaW5nVG9CeXRlcyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBuYW1lc3BhY2UgPT09ICdzdHJpbmcnKSB7XG4gICAgICBuYW1lc3BhY2UgPSBwYXJzZShuYW1lc3BhY2UpO1xuICAgIH1cblxuICAgIGlmIChuYW1lc3BhY2UubGVuZ3RoICE9PSAxNikge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdOYW1lc3BhY2UgbXVzdCBiZSBhcnJheS1saWtlICgxNiBpdGVyYWJsZSBpbnRlZ2VyIHZhbHVlcywgMC0yNTUpJyk7XG4gICAgfSAvLyBDb21wdXRlIGhhc2ggb2YgbmFtZXNwYWNlIGFuZCB2YWx1ZSwgUGVyIDQuM1xuICAgIC8vIEZ1dHVyZTogVXNlIHNwcmVhZCBzeW50YXggd2hlbiBzdXBwb3J0ZWQgb24gYWxsIHBsYXRmb3JtcywgZS5nLiBgYnl0ZXMgPVxuICAgIC8vIGhhc2hmdW5jKFsuLi5uYW1lc3BhY2UsIC4uLiB2YWx1ZV0pYFxuXG5cbiAgICB2YXIgYnl0ZXMgPSBuZXcgVWludDhBcnJheSgxNiArIHZhbHVlLmxlbmd0aCk7XG4gICAgYnl0ZXMuc2V0KG5hbWVzcGFjZSk7XG4gICAgYnl0ZXMuc2V0KHZhbHVlLCBuYW1lc3BhY2UubGVuZ3RoKTtcbiAgICBieXRlcyA9IGhhc2hmdW5jKGJ5dGVzKTtcbiAgICBieXRlc1s2XSA9IGJ5dGVzWzZdICYgMHgwZiB8IHZlcnNpb247XG4gICAgYnl0ZXNbOF0gPSBieXRlc1s4XSAmIDB4M2YgfCAweDgwO1xuXG4gICAgaWYgKGJ1Zikge1xuICAgICAgb2Zmc2V0ID0gb2Zmc2V0IHx8IDA7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7ICsraSkge1xuICAgICAgICBidWZbb2Zmc2V0ICsgaV0gPSBieXRlc1tpXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGJ1ZjtcbiAgICB9XG5cbiAgICByZXR1cm4gc3RyaW5naWZ5KGJ5dGVzKTtcbiAgfSAvLyBGdW5jdGlvbiNuYW1lIGlzIG5vdCBzZXR0YWJsZSBvbiBzb21lIHBsYXRmb3JtcyAoIzI3MClcblxuXG4gIHRyeSB7XG4gICAgZ2VuZXJhdGVVVUlELm5hbWUgPSBuYW1lOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZW1wdHlcbiAgfSBjYXRjaCAoZXJyKSB7fSAvLyBGb3IgQ29tbW9uSlMgZGVmYXVsdCBleHBvcnQgc3VwcG9ydFxuXG5cbiAgZ2VuZXJhdGVVVUlELkROUyA9IEROUztcbiAgZ2VuZXJhdGVVVUlELlVSTCA9IFVSTDtcbiAgcmV0dXJuIGdlbmVyYXRlVVVJRDtcbn0iLCJpbXBvcnQgcm5nIGZyb20gJy4vcm5nLmpzJztcbmltcG9ydCBzdHJpbmdpZnkgZnJvbSAnLi9zdHJpbmdpZnkuanMnO1xuXG5mdW5jdGlvbiB2NChvcHRpb25zLCBidWYsIG9mZnNldCkge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIHJuZHMgPSBvcHRpb25zLnJhbmRvbSB8fCAob3B0aW9ucy5ybmcgfHwgcm5nKSgpOyAvLyBQZXIgNC40LCBzZXQgYml0cyBmb3IgdmVyc2lvbiBhbmQgYGNsb2NrX3NlcV9oaV9hbmRfcmVzZXJ2ZWRgXG5cbiAgcm5kc1s2XSA9IHJuZHNbNl0gJiAweDBmIHwgMHg0MDtcbiAgcm5kc1s4XSA9IHJuZHNbOF0gJiAweDNmIHwgMHg4MDsgLy8gQ29weSBieXRlcyB0byBidWZmZXIsIGlmIHByb3ZpZGVkXG5cbiAgaWYgKGJ1Zikge1xuICAgIG9mZnNldCA9IG9mZnNldCB8fCAwO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgKytpKSB7XG4gICAgICBidWZbb2Zmc2V0ICsgaV0gPSBybmRzW2ldO1xuICAgIH1cblxuICAgIHJldHVybiBidWY7XG4gIH1cblxuICByZXR1cm4gc3RyaW5naWZ5KHJuZHMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB2NDsiLCJpbXBvcnQgdjM1IGZyb20gJy4vdjM1LmpzJztcbmltcG9ydCBzaGExIGZyb20gJy4vc2hhMS5qcyc7XG52YXIgdjUgPSB2MzUoJ3Y1JywgMHg1MCwgc2hhMSk7XG5leHBvcnQgZGVmYXVsdCB2NTsiLCJpbXBvcnQgUkVHRVggZnJvbSAnLi9yZWdleC5qcyc7XG5cbmZ1bmN0aW9uIHZhbGlkYXRlKHV1aWQpIHtcbiAgcmV0dXJuIHR5cGVvZiB1dWlkID09PSAnc3RyaW5nJyAmJiBSRUdFWC50ZXN0KHV1aWQpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB2YWxpZGF0ZTsiLCJpbXBvcnQgdmFsaWRhdGUgZnJvbSAnLi92YWxpZGF0ZS5qcyc7XG5cbmZ1bmN0aW9uIHZlcnNpb24odXVpZCkge1xuICBpZiAoIXZhbGlkYXRlKHV1aWQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKCdJbnZhbGlkIFVVSUQnKTtcbiAgfVxuXG4gIHJldHVybiBwYXJzZUludCh1dWlkLnN1YnN0cigxNCwgMSksIDE2KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdmVyc2lvbjsiLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIF9fKGEsIGIpIHtcbiAgYi50YWcgPSBhO1xuICByZXR1cm4gYjtcbn1cblxuZnVuY3Rpb24gdGFsa2JhY2tQbGFjZWhvbGRlcihhKSB7fVxuXG5mdW5jdGlvbiBmcm9tQXJyYXkoYSkge1xuICByZXR1cm4gZnVuY3Rpb24gKGIpIHtcbiAgICB2YXIgYyA9IGEubGVuZ3RoO1xuICAgIGxldCBlID0gITEsXG4gICAgICBkID0gITEsXG4gICAgICBmID0gITEsXG4gICAgICBnID0gMDtcbiAgICBiKFxuICAgICAgX18oMCwgW1xuICAgICAgICBmdW5jdGlvbiAoaCkge1xuICAgICAgICAgIGlmIChoKSB7XG4gICAgICAgICAgICBlID0gITA7XG4gICAgICAgICAgfSBlbHNlIGlmIChkKSB7XG4gICAgICAgICAgICBmID0gITA7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvciAoZCA9IGYgPSAhMDsgZiAmJiAhZTsgKSB7XG4gICAgICAgICAgICAgIGcgPCBjID8gKChoID0gYVtnXSksIChnID0gKGcgKyAxKSB8IDApLCAoZiA9ICExKSwgYihfXygxLCBbaF0pKSkgOiAoKGUgPSAhMCksIGIoMCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZCA9ICExO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgIF0pXG4gICAgKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gX3JlZigpIHt9XG5cbmZ1bmN0aW9uIF9yZWY0KGEpIHtcbiAgYSgwKTtcbn1cblxuZnVuY3Rpb24gZW1wdHkoYSkge1xuICBsZXQgYiA9ICExO1xuICBhKFxuICAgIF9fKDAsIFtcbiAgICAgIGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIGMgPyAoYiA9ICEwKSA6IGIgfHwgYSgwKTtcbiAgICAgIH0sXG4gICAgXSlcbiAgKTtcbn1cblxuZnVuY3Rpb24gc29tZShhKSB7XG4gIGlmICh2b2lkIDAgPT09IGEpIHtcbiAgICByZXR1cm4gKChhID0gW3VuZGVmaW5lZEhlYWRlciwgMF0pLnRhZyA9IDI1NiksIGE7XG4gIH1cbiAgaWYgKG51bGwgPT09IGEgfHwgYVswXSAhPT0gdW5kZWZpbmVkSGVhZGVyKSB7XG4gICAgcmV0dXJuIGE7XG4gIH1cbiAgKGEgPSBbdW5kZWZpbmVkSGVhZGVyLCAoYVsxXSArIDEpIHwgMF0pLnRhZyA9IDI1NjtcbiAgcmV0dXJuIGE7XG59XG5cbmZ1bmN0aW9uIHZhbEZyb21PcHRpb24oYSkge1xuICBpZiAobnVsbCA9PT0gYSB8fCBhWzBdICE9PSB1bmRlZmluZWRIZWFkZXIpIHtcbiAgICByZXR1cm4gYTtcbiAgfVxuICBpZiAoMCAhPT0gKGEgPSBhWzFdKSkge1xuICAgIHJldHVybiBbdW5kZWZpbmVkSGVhZGVyLCAoYSAtIDEpIHwgMF07XG4gIH1cbn1cblxuZnVuY3Rpb24gY29uY2F0TWFwKGEpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChiKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChjKSB7XG4gICAgICBmdW5jdGlvbiBlKGIpIHtcbiAgICAgICAgJ251bWJlcicgPT0gdHlwZW9mIGJcbiAgICAgICAgICA/IGsgJiZcbiAgICAgICAgICAgICgoayA9ICExKSxcbiAgICAgICAgICAgIHZvaWQgMCAhPT0gKGIgPSBkLnNoaWZ0KCkpXG4gICAgICAgICAgICAgID8gKChiID0gYSh2YWxGcm9tT3B0aW9uKGIpKSksIChrID0gITApLCBiKGUpKVxuICAgICAgICAgICAgICA6IG1cbiAgICAgICAgICAgICAgPyBjKDApXG4gICAgICAgICAgICAgIDogZyB8fCAoKGcgPSAhMCksIGYoMCkpKVxuICAgICAgICAgIDogYi50YWdcbiAgICAgICAgICA/IGsgJiYgKGMoYiksIGwgPyAobCA9ICExKSA6IGgoMCkpXG4gICAgICAgICAgOiAoKGggPSBiID0gYlswXSksIChsID0gITEpLCBiKDApKTtcbiAgICAgIH1cbiAgICAgIGxldCBkID0gW10sXG4gICAgICAgIGYgPSB0YWxrYmFja1BsYWNlaG9sZGVyLFxuICAgICAgICBnID0gITEsXG4gICAgICAgIGggPSB0YWxrYmFja1BsYWNlaG9sZGVyLFxuICAgICAgICBrID0gITEsXG4gICAgICAgIGwgPSAhMSxcbiAgICAgICAgbSA9ICExO1xuICAgICAgYihmdW5jdGlvbiAoYikge1xuICAgICAgICAnbnVtYmVyJyA9PSB0eXBlb2YgYlxuICAgICAgICAgID8gbSB8fFxuICAgICAgICAgICAgKChtID0gITApLFxuICAgICAgICAgICAgIWsgJiZcbiAgICAgICAgICAgICAgKGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDAgPT09IGEubGVuZ3RoO1xuICAgICAgICAgICAgICB9KShkKSAmJlxuICAgICAgICAgICAgICBjKDApKVxuICAgICAgICAgIDogYi50YWdcbiAgICAgICAgICA/IG0gfHwgKChiID0gYlswXSksIChnID0gITEpLCBrID8gZC5wdXNoKGIpIDogKChiID0gYShiKSksIChrID0gITApLCBiKGUpKSlcbiAgICAgICAgICA6IChmID0gYlswXSk7XG4gICAgICB9KTtcbiAgICAgIGMoXG4gICAgICAgIF9fKDAsIFtcbiAgICAgICAgICBmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgaWYgKGEpIHtcbiAgICAgICAgICAgICAgaWYgKChtIHx8ICgobSA9ICEwKSwgZigxKSksIGspKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChrID0gITEpLCBoKDEpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBtIHx8IGcgfHwgKChnID0gITApLCBmKDApKSwgayAmJiAhbCAmJiAoKGwgPSAhMCksIGgoMCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgIF0pXG4gICAgICApO1xuICAgIH07XG4gIH07XG59XG5cbmZ1bmN0aW9uIF9yZWYzKGEpIHtcbiAgcmV0dXJuIGE7XG59XG5cbmZ1bmN0aW9uIF9yZWY0JDEoYSkge1xuICByZXR1cm4gYTtcbn1cblxuZnVuY3Rpb24gX3JlZjcoYSkge1xuICByZXR1cm4gYSgwKTtcbn1cblxuZnVuY3Rpb24gbWVyZ2VNYXAoYSkge1xuICByZXR1cm4gZnVuY3Rpb24gKGIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGMpIHtcbiAgICAgIGxldCBlID0gdGFsa2JhY2tQbGFjZWhvbGRlcixcbiAgICAgICAgZCA9ICExLFxuICAgICAgICBmID0gW10sXG4gICAgICAgIGcgPSAhMTtcbiAgICAgIGIoZnVuY3Rpb24gKGIpIHtcbiAgICAgICAgJ251bWJlcicgPT0gdHlwZW9mIGJcbiAgICAgICAgICA/IGcgfHwgKChnID0gITApLCAwID09PSBmLmxlbmd0aCAmJiBjKDApKVxuICAgICAgICAgIDogYi50YWdcbiAgICAgICAgICA/IGcgfHxcbiAgICAgICAgICAgICgoZCA9ICExKSxcbiAgICAgICAgICAgIChmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgICBmdW5jdGlvbiBiKGEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYSAhPT0gaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB2YXIgaCA9IGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgICAgICAgJ251bWJlcicgPT0gdHlwZW9mIGFcbiAgICAgICAgICAgICAgICAgID8gMCAhPT0gZi5sZW5ndGggJiZcbiAgICAgICAgICAgICAgICAgICAgKChmID0gZi5maWx0ZXIoYikpLFxuICAgICAgICAgICAgICAgICAgICAoYSA9IDAgPT09IGYubGVuZ3RoKSxcbiAgICAgICAgICAgICAgICAgICAgZyAmJiBhID8gYygwKSA6ICFkICYmIGEgJiYgKChkID0gITApLCBlKDApKSlcbiAgICAgICAgICAgICAgICAgIDogYS50YWdcbiAgICAgICAgICAgICAgICAgID8gMCAhPT0gZi5sZW5ndGggJiYgKGMoX18oMSwgW2FbMF1dKSksIGsoMCkpXG4gICAgICAgICAgICAgICAgICA6ICgoayA9IGEgPSBhWzBdKSwgKGYgPSBmLmNvbmNhdChhKSksIGEoMCkpO1xuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICBsZXQgayA9IHRhbGtiYWNrUGxhY2Vob2xkZXI7XG4gICAgICAgICAgICAgIDEgPT09IGEubGVuZ3RoID8gYShoKSA6IGEuYmluZChudWxsLCBoKTtcbiAgICAgICAgICAgIH0pKGEoYlswXSkpLFxuICAgICAgICAgICAgZCB8fCAoKGQgPSAhMCksIGUoMCkpKVxuICAgICAgICAgIDogKGUgPSBiWzBdKTtcbiAgICAgIH0pO1xuICAgICAgYyhcbiAgICAgICAgX18oMCwgW1xuICAgICAgICAgIGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgICBhXG4gICAgICAgICAgICAgID8gKGcgfHwgKChnID0gITApLCBlKGEpKSxcbiAgICAgICAgICAgICAgICBmLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBjKGEpO1xuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgIChmID0gW10pKVxuICAgICAgICAgICAgICA6IChkIHx8IGcgPyAoZCA9ICExKSA6ICgoZCA9ICEwKSwgZSgwKSksIGYuZm9yRWFjaChfcmVmNykpO1xuICAgICAgICAgIH0sXG4gICAgICAgIF0pXG4gICAgICApO1xuICAgIH07XG4gIH07XG59XG5cbmZ1bmN0aW9uIF9yZWY4KGEpIHtcbiAgcmV0dXJuIGE7XG59XG5cbmZ1bmN0aW9uIF9yZWY5KGEpIHtcbiAgcmV0dXJuIGE7XG59XG5cbmZ1bmN0aW9uIG1lcmdlQWxsKGEpIHtcbiAgcmV0dXJuIG1lcmdlTWFwKF9yZWY5KShhKTtcbn1cblxuZnVuY3Rpb24gb25QdXNoKGEpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChiKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChjKSB7XG4gICAgICBsZXQgZSA9ICExO1xuICAgICAgcmV0dXJuIGIoZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgaWYgKCdudW1iZXInID09IHR5cGVvZiBkKSB7XG4gICAgICAgICAgZSB8fCAoKGUgPSAhMCksIGMoZCkpO1xuICAgICAgICB9IGVsc2UgaWYgKGQudGFnKSB7XG4gICAgICAgICAgZSB8fCAoYShkWzBdKSwgYyhkKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIGcgPSBkWzBdO1xuICAgICAgICAgIGMoXG4gICAgICAgICAgICBfXygwLCBbXG4gICAgICAgICAgICAgIGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFlKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gYSAmJiAoZSA9ICEwKSwgZyhhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBdKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG4gIH07XG59XG5cbmZ1bmN0aW9uIF9yZWYxMShhKSB7XG4gIGEoMCk7XG59XG5cbmZ1bmN0aW9uIHN3aXRjaE1hcChhKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoYikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYykge1xuICAgICAgZnVuY3Rpb24gZShhKSB7XG4gICAgICAgIGggJiZcbiAgICAgICAgICAoJ251bWJlcicgPT0gdHlwZW9mIGFcbiAgICAgICAgICAgID8gKChoID0gITEpLCBsID8gYyhhKSA6IGYgfHwgKChmID0gITApLCBkKDApKSlcbiAgICAgICAgICAgIDogYS50YWdcbiAgICAgICAgICAgID8gKGMoYSksIGsgPyAoayA9ICExKSA6IGcoMCkpXG4gICAgICAgICAgICA6ICgoZyA9IGEgPSBhWzBdKSwgKGsgPSAhMSksIGEoMCkpKTtcbiAgICAgIH1cbiAgICAgIGxldCBkID0gdGFsa2JhY2tQbGFjZWhvbGRlcixcbiAgICAgICAgZiA9ICExLFxuICAgICAgICBnID0gdGFsa2JhY2tQbGFjZWhvbGRlcixcbiAgICAgICAgaCA9ICExLFxuICAgICAgICBrID0gITEsXG4gICAgICAgIGwgPSAhMTtcbiAgICAgIGIoZnVuY3Rpb24gKGIpIHtcbiAgICAgICAgJ251bWJlcicgPT0gdHlwZW9mIGJcbiAgICAgICAgICA/IGwgfHwgKChsID0gITApLCBoIHx8IGMoMCkpXG4gICAgICAgICAgOiBiLnRhZ1xuICAgICAgICAgID8gbCB8fFxuICAgICAgICAgICAgKGggJiYgKGcoMSksIChnID0gdGFsa2JhY2tQbGFjZWhvbGRlcikpLFxuICAgICAgICAgICAgZiA/IChmID0gITEpIDogKChmID0gITApLCBkKDApKSxcbiAgICAgICAgICAgIChiID0gYShiWzBdKSksXG4gICAgICAgICAgICAoaCA9ICEwKSxcbiAgICAgICAgICAgIGIoZSkpXG4gICAgICAgICAgOiAoZCA9IGJbMF0pO1xuICAgICAgfSk7XG4gICAgICBjKFxuICAgICAgICBfXygwLCBbXG4gICAgICAgICAgZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgIGlmIChhKSB7XG4gICAgICAgICAgICAgIGlmICgobCB8fCAoKGwgPSAhMCksIGQoMSkpLCBoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAoaCA9ICExKSwgZygxKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbCB8fCBmIHx8ICgoZiA9ICEwKSwgZCgwKSksIGggJiYgIWsgJiYgKChrID0gITApLCBnKDApKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICBdKVxuICAgICAgKTtcbiAgICB9O1xuICB9O1xufVxuXG5mdW5jdGlvbiBfcmVmMTYoYSkge1xuICByZXR1cm4gYTtcbn1cblxuZnVuY3Rpb24gdGFrZUxhc3QoYSkge1xuICByZXR1cm4gZnVuY3Rpb24gKGIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGMpIHtcbiAgICAgIGxldCBlID0gW10sXG4gICAgICAgIGQgPSB0YWxrYmFja1BsYWNlaG9sZGVyO1xuICAgICAgcmV0dXJuIGIoZnVuY3Rpb24gKGIpIHtcbiAgICAgICAgJ251bWJlcicgPT0gdHlwZW9mIGJcbiAgICAgICAgICA/IGZyb21BcnJheShlKShjKVxuICAgICAgICAgIDogYi50YWdcbiAgICAgICAgICA/IChlLmxlbmd0aCA+PSBhICYmIDAgPCBhICYmIGUuc2hpZnQoKSwgZS5wdXNoKGJbMF0pLCBkKDApKVxuICAgICAgICAgIDogKChiID0gYlswXSksIDAgPj0gYSA/IChiKDEpLCBlbXB0eShjKSkgOiAoKGQgPSBiKSwgYigwKSkpO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3Vic2NyaWJlKGEpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChiKSB7XG4gICAgbGV0IGMgPSB0YWxrYmFja1BsYWNlaG9sZGVyLFxuICAgICAgZSA9ICExO1xuICAgIGIoZnVuY3Rpb24gKGIpIHtcbiAgICAgICdudW1iZXInID09IHR5cGVvZiBiID8gKGUgPSAhMCkgOiBiLnRhZyA/IGUgfHwgKGEoYlswXSksIGMoMCkpIDogKChjID0gYiA9IGJbMF0pLCBiKDApKTtcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgdW5zdWJzY3JpYmU6IGZ1bmN0aW9uIChhKSB7XG4gICAgICAgIGlmICghZSkge1xuICAgICAgICAgIHJldHVybiAoZSA9ICEwKSwgYygxKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICB9O1xuICB9O1xufVxuXG5mdW5jdGlvbiBfcmVmJDEoYSkge31cblxuZnVuY3Rpb24gX3JlZiQyKGEpIHt9XG5cbmZ1bmN0aW9uIF9yZWYyKCkge31cblxuZnVuY3Rpb24gX3JlZjMkMSgpIHt9XG5cbmZ1bmN0aW9uIF9yZWYzJDIoYSwgYiwgYykge1xuICBhLmFkZEV2ZW50TGlzdGVuZXIoYiwgYyk7XG59XG5cbmZ1bmN0aW9uIF9yZWY0JDIoYSwgYiwgYykge1xuICBhLnJlbW92ZUV2ZW50TGlzdGVuZXIoYiwgYyk7XG59XG5cbnZhciB1bmRlZmluZWRIZWFkZXIsXG4gIGJ1ZmZlciQxLFxuICBjb21iaW5lJDEsXG4gIGNvbmNhdE1hcCQxLFxuICBjb25jYXRBbGwkMSxcbiAgY29uY2F0JDEsXG4gIGZpbHRlciQxLFxuICBtYXAkMSxcbiAgbWVyZ2VNYXAkMSxcbiAgbWVyZ2UkMSxcbiAgbWVyZ2VBbGwkMSxcbiAgZmxhdHRlbiQxLFxuICBvbkVuZCQxLFxuICBvblB1c2gkMSxcbiAgdGFwJDEsXG4gIG9uU3RhcnQkMSxcbiAgc2FtcGxlJDEsXG4gIHNjYW4kMSxcbiAgc2hhcmUkMSxcbiAgc2tpcCQxLFxuICBza2lwVW50aWwkMSxcbiAgc2tpcFdoaWxlJDEsXG4gIHN3aXRjaE1hcCQxLFxuICBzd2l0Y2hBbGwkMSxcbiAgdGFrZSQxLFxuICB0YWtlTGFzdCQxLFxuICB0YWtlVW50aWwkMSxcbiAgdGFrZVdoaWxlJDEsXG4gIHN1YnNjcmliZSQxLFxuICBmb3JFYWNoJDEsXG4gIHB1Ymxpc2gkMSxcbiAgdG9BcnJheSQxLFxuICBvYnNlcnZhYmxlU3ltYm9sLFxuICBmcm9tT2JzZXJ2YWJsZSQyLFxuICB0b09ic2VydmFibGUkMixcbiAgZnJvbUNhbGxiYWckMixcbiAgdG9DYWxsYmFnJDIsXG4gIGRlYm91bmNlJDEsXG4gIGRlbGF5JDEsXG4gIHRocm90dGxlJDEsXG4gIHRvUHJvbWlzZSQxLFxuICBpbnRlcnZhbCQxLFxuICBmcm9tRG9tRXZlbnQkMSxcbiAgZnJvbVByb21pc2UkMSxcbiAgZnJvbUFycmF5JDEgPSBmcm9tQXJyYXksXG4gIGVtcHR5JDEgPSBlbXB0eTtcblxudW5kZWZpbmVkSGVhZGVyID0gW107XG5cbihidWZmZXIkMSA9IGZ1bmN0aW9uIChhKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoYikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYykge1xuICAgICAgZnVuY3Rpb24gZShhKSB7XG4gICAgICAgICdudW1iZXInID09IHR5cGVvZiBhXG4gICAgICAgICAgPyBrIHx8ICgoayA9ICEwKSwgZigxKSwgMCA8IGQubGVuZ3RoICYmIGMoX18oMSwgW2RdKSksIGMoMCkpXG4gICAgICAgICAgOiBhLnRhZ1xuICAgICAgICAgID8gIWsgJiYgMCA8IGQubGVuZ3RoICYmICgoYSA9IGQpLCAoZCA9IFtdKSwgYyhfXygxLCBbYV0pKSlcbiAgICAgICAgICA6IChnID0gYVswXSk7XG4gICAgICB9XG4gICAgICBsZXQgZCA9IFtdLFxuICAgICAgICBmID0gdGFsa2JhY2tQbGFjZWhvbGRlcixcbiAgICAgICAgZyA9IHRhbGtiYWNrUGxhY2Vob2xkZXIsXG4gICAgICAgIGggPSAhMSxcbiAgICAgICAgayA9ICExO1xuICAgICAgYihmdW5jdGlvbiAoYikge1xuICAgICAgICAnbnVtYmVyJyA9PSB0eXBlb2YgYlxuICAgICAgICAgID8gayB8fCAoKGsgPSAhMCksIGcoMSksIDAgPCBkLmxlbmd0aCAmJiBjKF9fKDEsIFtkXSkpLCBjKDApKVxuICAgICAgICAgIDogYi50YWdcbiAgICAgICAgICA/IGsgfHwgKGQucHVzaChiWzBdKSwgaCA/IChoID0gITEpIDogKChoID0gITApLCBmKDApLCBnKDApKSlcbiAgICAgICAgICA6ICgoZiA9IGJbMF0pLCBhKGUpKTtcbiAgICAgIH0pO1xuICAgICAgYyhcbiAgICAgICAgX18oMCwgW1xuICAgICAgICAgIGZ1bmN0aW9uIChjKSB7XG4gICAgICAgICAgICBpZiAoIWspIHtcbiAgICAgICAgICAgICAgaWYgKGMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKGsgPSAhMCksIGYoMSksIGcoMSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKCFoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChoID0gITApLCBmKDApLCBnKDApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgXSlcbiAgICAgICk7XG4gICAgfTtcbiAgfTtcbn0pLFxuICAoY29tYmluZSQxID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gKGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgbGV0IGUgPSB0YWxrYmFja1BsYWNlaG9sZGVyLFxuICAgICAgICAgIGQgPSB0YWxrYmFja1BsYWNlaG9sZGVyLFxuICAgICAgICAgIGYgPSB2b2lkIDAsXG4gICAgICAgICAgZyA9IHZvaWQgMCxcbiAgICAgICAgICBoID0gITEsXG4gICAgICAgICAgayA9IDAsXG4gICAgICAgICAgbCA9ICExO1xuICAgICAgICBhKGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgdmFyIGIgPSBnO1xuICAgICAgICAgICdudW1iZXInID09IHR5cGVvZiBhXG4gICAgICAgICAgICA/IDEgPiBrXG4gICAgICAgICAgICAgID8gKGsgPSAoayArIDEpIHwgMClcbiAgICAgICAgICAgICAgOiBsIHx8ICgobCA9ICEwKSwgYygwKSlcbiAgICAgICAgICAgIDogYS50YWdcbiAgICAgICAgICAgID8gKChhID0gYVswXSksXG4gICAgICAgICAgICAgIHZvaWQgMCAhPT0gYlxuICAgICAgICAgICAgICAgID8gbCB8fCAoKGYgPSBzb21lKGEpKSwgKGggPSAhMSksIGMoX18oMSwgW1thLCB2YWxGcm9tT3B0aW9uKGIpXV0pKSlcbiAgICAgICAgICAgICAgICA6ICgoZiA9IHNvbWUoYSkpLCBoID8gKGggPSAhMSkgOiBkKDApKSlcbiAgICAgICAgICAgIDogKGUgPSBhWzBdKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGIoZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICB2YXIgYiA9IGY7XG4gICAgICAgICAgJ251bWJlcicgPT0gdHlwZW9mIGFcbiAgICAgICAgICAgID8gMSA+IGtcbiAgICAgICAgICAgICAgPyAoayA9IChrICsgMSkgfCAwKVxuICAgICAgICAgICAgICA6IGwgfHwgKChsID0gITApLCBjKDApKVxuICAgICAgICAgICAgOiBhLnRhZ1xuICAgICAgICAgICAgPyAoKGEgPSBhWzBdKSxcbiAgICAgICAgICAgICAgdm9pZCAwICE9PSBiXG4gICAgICAgICAgICAgICAgPyBsIHx8ICgoZyA9IHNvbWUoYSkpLCAoaCA9ICExKSwgYyhfXygxLCBbW3ZhbEZyb21PcHRpb24oYiksIGFdXSkpKVxuICAgICAgICAgICAgICAgIDogKChnID0gc29tZShhKSksIGggPyAoaCA9ICExKSA6IGUoMCkpKVxuICAgICAgICAgICAgOiAoZCA9IGFbMF0pO1xuICAgICAgICB9KTtcbiAgICAgICAgYyhcbiAgICAgICAgICBfXygwLCBbXG4gICAgICAgICAgICBmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgICBpZiAoIWwpIHtcbiAgICAgICAgICAgICAgICBpZiAoYSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIChsID0gITApLCBlKDEpLCBkKDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIWgpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAoaCA9ICEwKSwgZShhKSwgZChhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSlcbiAgICAgICAgKTtcbiAgICAgIH07XG4gICAgfSkoYSwgYik7XG4gIH0pLFxuICAoY29uY2F0TWFwJDEgPSBjb25jYXRNYXApLFxuICAoY29uY2F0QWxsJDEgPSBmdW5jdGlvbiAoYSkge1xuICAgIHJldHVybiBjb25jYXRNYXAoX3JlZjMpKGEpO1xuICB9KSxcbiAgKGNvbmNhdCQxID0gZnVuY3Rpb24gKGEpIHtcbiAgICByZXR1cm4gY29uY2F0TWFwKF9yZWY0JDEpKGZyb21BcnJheShhKSk7XG4gIH0pLFxuICAoZmlsdGVyJDEgPSBmdW5jdGlvbiAoYSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIGxldCBlID0gdGFsa2JhY2tQbGFjZWhvbGRlcjtcbiAgICAgICAgcmV0dXJuIGIoZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAnbnVtYmVyJyA9PSB0eXBlb2YgZCA/IGMoZCkgOiBkLnRhZyA/IChhKGRbMF0pID8gYyhkKSA6IGUoMCkpIDogKChlID0gZFswXSksIGMoZCkpO1xuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfTtcbiAgfSksXG4gIChtYXAkMSA9IGZ1bmN0aW9uIChhKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChiKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgcmV0dXJuIGIoZnVuY3Rpb24gKGIpIHtcbiAgICAgICAgICBiID0gJ251bWJlcicgPT0gdHlwZW9mIGIgPyAwIDogYi50YWcgPyBfXygxLCBbYShiWzBdKV0pIDogX18oMCwgW2JbMF1dKTtcbiAgICAgICAgICBjKGIpO1xuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfTtcbiAgfSksXG4gIChtZXJnZU1hcCQxID0gbWVyZ2VNYXApLFxuICAobWVyZ2UkMSA9IGZ1bmN0aW9uIChhKSB7XG4gICAgcmV0dXJuIG1lcmdlTWFwKF9yZWY4KShmcm9tQXJyYXkoYSkpO1xuICB9KSxcbiAgKG1lcmdlQWxsJDEgPSBtZXJnZUFsbCksXG4gIChmbGF0dGVuJDEgPSBtZXJnZUFsbCksXG4gIChvbkVuZCQxID0gZnVuY3Rpb24gKGEpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGIpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoYykge1xuICAgICAgICBsZXQgZSA9ICExO1xuICAgICAgICByZXR1cm4gYihmdW5jdGlvbiAoZCkge1xuICAgICAgICAgIGlmICgnbnVtYmVyJyA9PSB0eXBlb2YgZCkge1xuICAgICAgICAgICAgaWYgKGUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZSA9ICEwO1xuICAgICAgICAgICAgYyhkKTtcbiAgICAgICAgICAgIHJldHVybiBhKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChkLnRhZykge1xuICAgICAgICAgICAgZSB8fCBjKGQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgYiA9IGRbMF07XG4gICAgICAgICAgICBjKFxuICAgICAgICAgICAgICBfXygwLCBbXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICAgICAgICAgIGlmICghZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYyA/ICgoZSA9ICEwKSwgYihjKSwgYSgpKSA6IGIoYyk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfTtcbiAgfSksXG4gIChvblB1c2gkMSA9IG9uUHVzaCksXG4gICh0YXAkMSA9IG9uUHVzaCksXG4gIChvblN0YXJ0JDEgPSBmdW5jdGlvbiAoYSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIHJldHVybiBiKGZ1bmN0aW9uIChiKSB7XG4gICAgICAgICAgJ251bWJlcicgPT0gdHlwZW9mIGIgPyBjKGIpIDogYi50YWcgPyBjKGIpIDogKGMoYiksIGEoKSk7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9O1xuICB9KSxcbiAgKHNhbXBsZSQxID0gZnVuY3Rpb24gKGEpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGIpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoYykge1xuICAgICAgICBsZXQgZSA9IHRhbGtiYWNrUGxhY2Vob2xkZXIsXG4gICAgICAgICAgZCA9IHRhbGtiYWNrUGxhY2Vob2xkZXIsXG4gICAgICAgICAgZiA9IHZvaWQgMCxcbiAgICAgICAgICBnID0gITEsXG4gICAgICAgICAgaCA9ICExO1xuICAgICAgICBiKGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgJ251bWJlcicgPT0gdHlwZW9mIGFcbiAgICAgICAgICAgID8gaCB8fCAoKGggPSAhMCksIGQoMSksIGMoMCkpXG4gICAgICAgICAgICA6IGEudGFnXG4gICAgICAgICAgICA/ICgoZiA9IHNvbWUoYVswXSkpLCBnID8gKGcgPSAhMSkgOiAoKGcgPSAhMCksIGQoMCksIGUoMCkpKVxuICAgICAgICAgICAgOiAoZSA9IGFbMF0pO1xuICAgICAgICB9KTtcbiAgICAgICAgYShmdW5jdGlvbiAoYSkge1xuICAgICAgICAgIHZhciBiID0gZjtcbiAgICAgICAgICAnbnVtYmVyJyA9PSB0eXBlb2YgYVxuICAgICAgICAgICAgPyBoIHx8ICgoaCA9ICEwKSwgZSgxKSwgYygwKSlcbiAgICAgICAgICAgIDogYS50YWdcbiAgICAgICAgICAgID8gdm9pZCAwID09PSBiIHx8IGggfHwgKChmID0gdm9pZCAwKSwgYyhfXygxLCBbdmFsRnJvbU9wdGlvbihiKV0pKSlcbiAgICAgICAgICAgIDogKGQgPSBhWzBdKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGMoXG4gICAgICAgICAgX18oMCwgW1xuICAgICAgICAgICAgZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgICAgaWYgKCFoKSB7XG4gICAgICAgICAgICAgICAgaWYgKGEpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAoaCA9ICEwKSwgZSgxKSwgZCgxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFnKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gKGcgPSAhMCksIGUoMCksIGQoMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0pXG4gICAgICAgICk7XG4gICAgICB9O1xuICAgIH07XG4gIH0pLFxuICAoc2NhbiQxID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gKGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgbGV0IGQgPSBiO1xuICAgICAgICAgIHJldHVybiBjKGZ1bmN0aW9uIChjKSB7XG4gICAgICAgICAgICAnbnVtYmVyJyA9PSB0eXBlb2YgY1xuICAgICAgICAgICAgICA/IChjID0gMClcbiAgICAgICAgICAgICAgOiBjLnRhZ1xuICAgICAgICAgICAgICA/ICgoZCA9IGEoZCwgY1swXSkpLCAoYyA9IF9fKDEsIFtkXSkpKVxuICAgICAgICAgICAgICA6IChjID0gX18oMCwgW2NbMF1dKSk7XG4gICAgICAgICAgICBlKGMpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgfTtcbiAgICB9KShhLCBiKTtcbiAgfSksXG4gIChzaGFyZSQxID0gZnVuY3Rpb24gKGEpIHtcbiAgICBmdW5jdGlvbiBiKGEpIHtcbiAgICAgICdudW1iZXInID09IHR5cGVvZiBhXG4gICAgICAgID8gKGMuZm9yRWFjaChfcmVmMTEpLCAoYyA9IFtdKSlcbiAgICAgICAgOiBhLnRhZ1xuICAgICAgICA/ICgoZCA9ICExKSxcbiAgICAgICAgICBjLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICAgIGMoYSk7XG4gICAgICAgICAgfSkpXG4gICAgICAgIDogKGUgPSBhWzBdKTtcbiAgICB9XG4gICAgbGV0IGMgPSBbXSxcbiAgICAgIGUgPSB0YWxrYmFja1BsYWNlaG9sZGVyLFxuICAgICAgZCA9ICExO1xuICAgIHJldHVybiBmdW5jdGlvbiAoZikge1xuICAgICAgZnVuY3Rpb24gZyhhKSB7XG4gICAgICAgIHJldHVybiBhICE9PSBmO1xuICAgICAgfVxuICAgICAgYyA9IGMuY29uY2F0KGYpO1xuICAgICAgMSA9PT0gYy5sZW5ndGggJiYgYShiKTtcbiAgICAgIGYoXG4gICAgICAgIF9fKDAsIFtcbiAgICAgICAgICBmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgaWYgKGEpIHtcbiAgICAgICAgICAgICAgaWYgKCgoYyA9IGMuZmlsdGVyKGcpKSwgMCA9PT0gYy5sZW5ndGgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGUoMSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGQgfHwgKChkID0gITApLCBlKGEpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICBdKVxuICAgICAgKTtcbiAgICB9O1xuICB9KSxcbiAgKHNraXAkMSA9IGZ1bmN0aW9uIChhKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChiKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgbGV0IGUgPSB0YWxrYmFja1BsYWNlaG9sZGVyLFxuICAgICAgICAgIGQgPSBhO1xuICAgICAgICByZXR1cm4gYihmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICdudW1iZXInID09IHR5cGVvZiBhXG4gICAgICAgICAgICA/IGMoYSlcbiAgICAgICAgICAgIDogYS50YWdcbiAgICAgICAgICAgID8gMCA8IGRcbiAgICAgICAgICAgICAgPyAoKGQgPSAoZCAtIDEpIHwgMCksIGUoMCkpXG4gICAgICAgICAgICAgIDogYyhhKVxuICAgICAgICAgICAgOiAoKGUgPSBhWzBdKSwgYyhhKSk7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9O1xuICB9KSxcbiAgKHNraXBVbnRpbCQxID0gZnVuY3Rpb24gKGEpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGIpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoYykge1xuICAgICAgICBmdW5jdGlvbiBlKGEpIHtcbiAgICAgICAgICAnbnVtYmVyJyA9PSB0eXBlb2YgYVxuICAgICAgICAgICAgPyBnICYmICgoayA9ICEwKSwgZCgxKSlcbiAgICAgICAgICAgIDogYS50YWdcbiAgICAgICAgICAgID8gKChnID0gITEpLCBmKDEpKVxuICAgICAgICAgICAgOiAoKGYgPSBhID0gYVswXSksIGEoMCkpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBkID0gdGFsa2JhY2tQbGFjZWhvbGRlcixcbiAgICAgICAgICBmID0gdGFsa2JhY2tQbGFjZWhvbGRlcixcbiAgICAgICAgICBnID0gITAsXG4gICAgICAgICAgaCA9ICExLFxuICAgICAgICAgIGsgPSAhMTtcbiAgICAgICAgYihmdW5jdGlvbiAoYikge1xuICAgICAgICAgICdudW1iZXInID09IHR5cGVvZiBiXG4gICAgICAgICAgICA/IChnICYmIGYoMSksIChrID0gITApLCBjKDApKVxuICAgICAgICAgICAgOiBiLnRhZ1xuICAgICAgICAgICAgPyBnIHx8IGtcbiAgICAgICAgICAgICAgPyBoXG4gICAgICAgICAgICAgICAgPyAoaCA9ICExKVxuICAgICAgICAgICAgICAgIDogKChoID0gITApLCBkKDApLCBmKDApKVxuICAgICAgICAgICAgICA6ICgoaCA9ICExKSwgYyhiKSlcbiAgICAgICAgICAgIDogKChkID0gYlswXSksIGEoZSkpO1xuICAgICAgICB9KTtcbiAgICAgICAgYyhcbiAgICAgICAgICBfXygwLCBbXG4gICAgICAgICAgICBmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgICBpZiAoIWspIHtcbiAgICAgICAgICAgICAgICBpZiAoYSkge1xuICAgICAgICAgICAgICAgICAgaWYgKCgoayA9ICEwKSwgZCgxKSwgZykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGYoMSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGggfHwgKChoID0gITApLCBnICYmIGYoMCksIGQoMCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdKVxuICAgICAgICApO1xuICAgICAgfTtcbiAgICB9O1xuICB9KSxcbiAgKHNraXBXaGlsZSQxID0gZnVuY3Rpb24gKGEpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGIpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoYykge1xuICAgICAgICBsZXQgZSA9IHRhbGtiYWNrUGxhY2Vob2xkZXIsXG4gICAgICAgICAgZCA9ICEwO1xuICAgICAgICByZXR1cm4gYihmdW5jdGlvbiAoYikge1xuICAgICAgICAgICdudW1iZXInID09IHR5cGVvZiBiXG4gICAgICAgICAgICA/IGMoYilcbiAgICAgICAgICAgIDogYi50YWdcbiAgICAgICAgICAgID8gZFxuICAgICAgICAgICAgICA/IGEoYlswXSlcbiAgICAgICAgICAgICAgICA/IGUoMClcbiAgICAgICAgICAgICAgICA6ICgoZCA9ICExKSwgYyhiKSlcbiAgICAgICAgICAgICAgOiBjKGIpXG4gICAgICAgICAgICA6ICgoZSA9IGJbMF0pLCBjKGIpKTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH07XG4gIH0pLFxuICAoc3dpdGNoTWFwJDEgPSBzd2l0Y2hNYXApLFxuICAoc3dpdGNoQWxsJDEgPSBmdW5jdGlvbiAoYSkge1xuICAgIHJldHVybiBzd2l0Y2hNYXAoX3JlZjE2KShhKTtcbiAgfSksXG4gICh0YWtlJDEgPSBmdW5jdGlvbiAoYSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIGxldCBlID0gITEsXG4gICAgICAgICAgZCA9IDAsXG4gICAgICAgICAgZiA9IHRhbGtiYWNrUGxhY2Vob2xkZXI7XG4gICAgICAgIGIoZnVuY3Rpb24gKGIpIHtcbiAgICAgICAgICAnbnVtYmVyJyA9PSB0eXBlb2YgYlxuICAgICAgICAgICAgPyBlIHx8ICgoZSA9ICEwKSwgYygwKSlcbiAgICAgICAgICAgIDogYi50YWdcbiAgICAgICAgICAgID8gZCA8IGEgJiYgIWUgJiYgKChkID0gKGQgKyAxKSB8IDApLCBjKGIpLCAhZSAmJiBkID49IGEgJiYgKChlID0gITApLCBjKDApLCBmKDEpKSlcbiAgICAgICAgICAgIDogKChiID0gYlswXSksIDAgPj0gYSA/ICgoZSA9ICEwKSwgYygwKSwgYigxKSkgOiAoZiA9IGIpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGMoXG4gICAgICAgICAgX18oMCwgW1xuICAgICAgICAgICAgZnVuY3Rpb24gKGIpIHtcbiAgICAgICAgICAgICAgaWYgKCFlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGIpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAoZSA9ICEwKSwgZigxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGQgPCBhKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gZigwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSlcbiAgICAgICAgKTtcbiAgICAgIH07XG4gICAgfTtcbiAgfSksXG4gICh0YWtlTGFzdCQxID0gdGFrZUxhc3QpLFxuICAodGFrZVVudGlsJDEgPSBmdW5jdGlvbiAoYSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIGZ1bmN0aW9uIGUoYSkge1xuICAgICAgICAgICdudW1iZXInICE9IHR5cGVvZiBhICYmIChhLnRhZyA/ICgoZCA9ICEwKSwgZigxKSwgYygwKSkgOiAoKGcgPSBhID0gYVswXSksIGEoMCkpKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgZCA9ICExLFxuICAgICAgICAgIGYgPSB0YWxrYmFja1BsYWNlaG9sZGVyLFxuICAgICAgICAgIGcgPSB0YWxrYmFja1BsYWNlaG9sZGVyO1xuICAgICAgICBiKGZ1bmN0aW9uIChiKSB7XG4gICAgICAgICAgJ251bWJlcicgPT0gdHlwZW9mIGJcbiAgICAgICAgICAgID8gZCB8fCAoKGQgPSAhMCksIGcoMSksIGMoMCkpXG4gICAgICAgICAgICA6IGIudGFnXG4gICAgICAgICAgICA/IGQgfHwgYyhiKVxuICAgICAgICAgICAgOiAoKGYgPSBiWzBdKSwgYShlKSk7XG4gICAgICAgIH0pO1xuICAgICAgICBjKFxuICAgICAgICAgIF9fKDAsIFtcbiAgICAgICAgICAgIGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgICAgIGlmICghZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhID8gKChkID0gITApLCBmKDEpLCBnKDEpKSA6IGYoMCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSlcbiAgICAgICAgKTtcbiAgICAgIH07XG4gICAgfTtcbiAgfSksXG4gICh0YWtlV2hpbGUkMSA9IGZ1bmN0aW9uIChhKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChiKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgbGV0IGUgPSB0YWxrYmFja1BsYWNlaG9sZGVyLFxuICAgICAgICAgIGQgPSAhMTtcbiAgICAgICAgcmV0dXJuIGIoZnVuY3Rpb24gKGIpIHtcbiAgICAgICAgICAnbnVtYmVyJyA9PSB0eXBlb2YgYlxuICAgICAgICAgICAgPyBkIHx8ICgoZCA9ICEwKSwgYygwKSlcbiAgICAgICAgICAgIDogYi50YWdcbiAgICAgICAgICAgID8gZCB8fCAoYShiWzBdKSA/IGMoYikgOiAoKGQgPSAhMCksIGMoMCksIGUoMSkpKVxuICAgICAgICAgICAgOiAoKGUgPSBiWzBdKSwgYyhiKSk7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9O1xuICB9KTtcblxuKHN1YnNjcmliZSQxID0gc3Vic2NyaWJlKSxcbiAgKGZvckVhY2gkMSA9IGZ1bmN0aW9uIChhKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChiKSB7XG4gICAgICBzdWJzY3JpYmUoYSkoYik7XG4gICAgfTtcbiAgfSksXG4gIChwdWJsaXNoJDEgPSBmdW5jdGlvbiAoYSkge1xuICAgIHJldHVybiBzdWJzY3JpYmUoX3JlZiQxKShhKTtcbiAgfSksXG4gICh0b0FycmF5JDEgPSBmdW5jdGlvbiAoYSkge1xuICAgIGxldCBiID0gW10sXG4gICAgICBjID0gdGFsa2JhY2tQbGFjZWhvbGRlcixcbiAgICAgIGUgPSAhMTtcbiAgICBhKGZ1bmN0aW9uIChhKSB7XG4gICAgICAnbnVtYmVyJyA9PSB0eXBlb2YgYSA/IChlID0gITApIDogYS50YWcgPyAoYi5wdXNoKGFbMF0pLCBjKDApKSA6ICgoYyA9IGEgPSBhWzBdKSwgYSgwKSk7XG4gICAgfSk7XG4gICAgZSB8fCBjKDEpO1xuICAgIHJldHVybiBiO1xuICB9KTtcblxub2JzZXJ2YWJsZVN5bWJvbCA9XG4gICdmdW5jdGlvbicgPT0gdHlwZW9mIFN5bWJvbFxuICAgID8gU3ltYm9sLm9ic2VydmFibGUgfHwgKFN5bWJvbC5vYnNlcnZhYmxlID0gU3ltYm9sKCdvYnNlcnZhYmxlJykpXG4gICAgOiAnQEBvYnNlcnZhYmxlJztcblxuKGZyb21PYnNlcnZhYmxlJDIgPSBmdW5jdGlvbiAoYSkge1xuICB2YXIgYiA9IHZvaWQgMCAhPT0gYVtvYnNlcnZhYmxlU3ltYm9sXSA/IGFbb2JzZXJ2YWJsZVN5bWJvbF0oKSA6IGE7XG4gIHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgIHZhciBjID0gYi5zdWJzY3JpYmUoe1xuICAgICAgbmV4dDogZnVuY3Rpb24gKGIpIHtcbiAgICAgICAgYShfXygxLCBbYl0pKTtcbiAgICAgIH0sXG4gICAgICBjb21wbGV0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICBhKDApO1xuICAgICAgfSxcbiAgICAgIGVycm9yOiBfcmVmJDIsXG4gICAgfSk7XG4gICAgYShcbiAgICAgIF9fKDAsIFtcbiAgICAgICAgZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICBpZiAoYSkge1xuICAgICAgICAgICAgcmV0dXJuIGMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICBdKVxuICAgICk7XG4gIH07XG59KSxcbiAgKHRvT2JzZXJ2YWJsZSQyID0gZnVuY3Rpb24gKGEpIHtcbiAgICB2YXIgYiA9IHtcbiAgICAgIHN1YnNjcmliZTogZnVuY3Rpb24gKGIsIGUsIGQpIHtcbiAgICAgICAgdmFyIGMgPSAoJ29iamVjdCcgPT0gdHlwZW9mIGIgPyBiLm5leHQuYmluZChiKSA6IGIpIHx8IF9yZWYyLFxuICAgICAgICAgIGcgPSAoJ29iamVjdCcgPT0gdHlwZW9mIGIgPyBiLmNvbXBsZXRlLmJpbmQoYikgOiBkKSB8fCBfcmVmMyQxO1xuICAgICAgICBsZXQgaCA9IHRhbGtiYWNrUGxhY2Vob2xkZXIsXG4gICAgICAgICAgayA9ICExO1xuICAgICAgICBhKGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgaWYgKCdudW1iZXInID09IHR5cGVvZiBhKSB7XG4gICAgICAgICAgICByZXR1cm4gKGsgPSAhMCksIGcoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGEudGFnKSB7XG4gICAgICAgICAgICBpZiAoaykge1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjKGFbMF0pO1xuICAgICAgICAgICAgcmV0dXJuIGgoMCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGggPSBhID0gYVswXTtcbiAgICAgICAgICBhKDApO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB1bnN1YnNjcmliZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCFrKSB7XG4gICAgICAgICAgICAgIHJldHVybiAodGhpcy5jbG9zZWQgPSAhMSksIChrID0gITApLCBoKDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgY2xvc2VkOiAhMSxcbiAgICAgICAgfTtcbiAgICAgIH0sXG4gICAgfTtcbiAgICBiW29ic2VydmFibGVTeW1ib2xdID0gZnVuY3Rpb24gKGEpIHtcbiAgICAgIHJldHVybiBiO1xuICAgIH07XG4gICAgcmV0dXJuIGI7XG4gIH0pLFxuICAoZnJvbUNhbGxiYWckMiA9IGZ1bmN0aW9uIChhKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChiKSB7XG4gICAgICB2YXIgYyA9IGZ1bmN0aW9uIChhLCBjKSB7XG4gICAgICAgIHN3aXRjaCAoYSkge1xuICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIGIoXG4gICAgICAgICAgICAgIF9fKDAsIFtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGEgPyBjKDIpIDogYygxKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgYihfXygxLCBbY10pKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgYigwKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHJldHVybiAyID09PSBhLmxlbmd0aCA/IGEoMCwgYykgOiBhLmJpbmQobnVsbCwgMCwgYyk7XG4gICAgfTtcbiAgfSksXG4gICh0b0NhbGxiYWckMiA9IGZ1bmN0aW9uIChhKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChiLCBjKSB7XG4gICAgICBpZiAoMCA9PT0gYikge1xuICAgICAgICByZXR1cm4gYShmdW5jdGlvbiAoYSkge1xuICAgICAgICAgIGlmICgnbnVtYmVyJyA9PSB0eXBlb2YgYSkge1xuICAgICAgICAgICAgcmV0dXJuIDIgPT09IGMubGVuZ3RoID8gYygyLCB2b2lkIDApIDogYy5iaW5kKG51bGwsIDIsIHZvaWQgMCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChhLnRhZykge1xuICAgICAgICAgICAgcmV0dXJuIChhID0gYVswXSksIDIgPT09IGMubGVuZ3RoID8gYygxLCBhKSA6IGMuYmluZChudWxsLCAxLCBhKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmFyIGIgPSBhWzBdO1xuICAgICAgICAgIGEgPSBmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgc3dpdGNoIChhKSB7XG4gICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBiKDApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICBiKDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgICAgcmV0dXJuIDIgPT09IGMubGVuZ3RoID8gYygwLCBhKSA6IGMuYmluZChudWxsLCAwLCBhKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgfSksXG4gIChkZWJvdW5jZSQxID0gZnVuY3Rpb24gKGEpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGIpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoYykge1xuICAgICAgICBsZXQgZSA9IHZvaWQgMCxcbiAgICAgICAgICBkID0gITEsXG4gICAgICAgICAgZiA9ICExO1xuICAgICAgICB2YXIgZyA9IGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgdm9pZCAwICE9PSAoYSA9IGUpICYmICgoZSA9IHZvaWQgMCksIGNsZWFyVGltZW91dCh2YWxGcm9tT3B0aW9uKGEpKSk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBiKGZ1bmN0aW9uIChiKSB7XG4gICAgICAgICAgaWYgKCdudW1iZXInID09IHR5cGVvZiBiKSB7XG4gICAgICAgICAgICBmIHx8ICgoZiA9ICEwKSwgdm9pZCAwICE9PSBlID8gKGQgPSAhMCkgOiBjKDApKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGIudGFnKSB7XG4gICAgICAgICAgICBmIHx8XG4gICAgICAgICAgICAgIChnKCksXG4gICAgICAgICAgICAgIChlID0gc29tZShcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgICAgICAgICBlID0gdm9pZCAwO1xuICAgICAgICAgICAgICAgICAgYyhiKTtcbiAgICAgICAgICAgICAgICAgIGQgJiYgYygwKTtcbiAgICAgICAgICAgICAgICB9LCBhKGJbMF0pKVxuICAgICAgICAgICAgICApKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBsID0gYlswXTtcbiAgICAgICAgICAgIGMoXG4gICAgICAgICAgICAgIF9fKDAsIFtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgICAgICAgaWYgKCFmKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhID8gKChmID0gITApLCAoZCA9ICExKSwgZygpLCBsKDEpKSA6IGwoMCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfTtcbiAgfSksXG4gIChkZWxheSQxID0gZnVuY3Rpb24gKGEpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGIpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoYykge1xuICAgICAgICBsZXQgZSA9IDA7XG4gICAgICAgIHJldHVybiBiKGZ1bmN0aW9uIChiKSB7XG4gICAgICAgICAgJ251bWJlcicgPT0gdHlwZW9mIGIgfHwgYi50YWdcbiAgICAgICAgICAgID8gKChlID0gKGUgKyAxKSB8IDApLFxuICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgICAgICAgMCAhPT0gZSAmJiAoKGUgPSAoZSAtIDEpIHwgMCksIGMoYikpO1xuICAgICAgICAgICAgICB9LCBhKSlcbiAgICAgICAgICAgIDogYyhiKTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH07XG4gIH0pLFxuICAodGhyb3R0bGUkMSA9IGZ1bmN0aW9uIChhKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChiKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgZnVuY3Rpb24gZShhKSB7XG4gICAgICAgICAgZiA9IHZvaWQgMDtcbiAgICAgICAgICBkID0gITE7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGQgPSAhMSxcbiAgICAgICAgICBmID0gdm9pZCAwO1xuICAgICAgICB2YXIgZyA9IGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgdm9pZCAwICE9PSAoYSA9IGYpICYmIGNsZWFyVGltZW91dCh2YWxGcm9tT3B0aW9uKGEpKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGIoZnVuY3Rpb24gKGIpIHtcbiAgICAgICAgICBpZiAoJ251bWJlcicgPT0gdHlwZW9mIGIpIHtcbiAgICAgICAgICAgIGcoKSwgYygwKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGIudGFnKSB7XG4gICAgICAgICAgICBkIHx8ICgoZCA9ICEwKSwgZygpLCAoZiA9IHNvbWUoc2V0VGltZW91dChlLCBhKGJbMF0pKSkpLCBjKGIpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGggPSBiWzBdO1xuICAgICAgICAgICAgYyhcbiAgICAgICAgICAgICAgX18oMCwgW1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gYSA/IChnKCksIGgoMSkpIDogaChhKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9O1xuICB9KSxcbiAgKHRvUHJvbWlzZSQxID0gZnVuY3Rpb24gKGEpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKGIsIGMpIHtcbiAgICAgIHRha2VMYXN0KDEpKGEpKGZ1bmN0aW9uIChhKSB7XG4gICAgICAgIGlmICgnbnVtYmVyJyAhPSB0eXBlb2YgYSkge1xuICAgICAgICAgIGlmIChhLnRhZykge1xuICAgICAgICAgICAgYihhWzBdKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYVswXSgwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KSxcbiAgKGludGVydmFsJDEgPSBmdW5jdGlvbiAoYSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYikge1xuICAgICAgbGV0IGMgPSAwO1xuICAgICAgdmFyIGUgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoYSkge1xuICAgICAgICBhID0gYztcbiAgICAgICAgYyA9IChjICsgMSkgfCAwO1xuICAgICAgICBiKF9fKDEsIFthXSkpO1xuICAgICAgfSwgYSk7XG4gICAgICBiKFxuICAgICAgICBfXygwLCBbXG4gICAgICAgICAgZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgIGEgJiYgY2xlYXJJbnRlcnZhbChlKTtcbiAgICAgICAgICB9LFxuICAgICAgICBdKVxuICAgICAgKTtcbiAgICB9O1xuICB9KSxcbiAgKGZyb21Eb21FdmVudCQxID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gKGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgdmFyIGUgPSBfcmVmMyQyLFxuICAgICAgICAgIGQgPSBfcmVmNCQyLFxuICAgICAgICAgIGYgPSBmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgYyhfXygxLCBbYV0pKTtcbiAgICAgICAgICB9O1xuICAgICAgICBjKFxuICAgICAgICAgIF9fKDAsIFtcbiAgICAgICAgICAgIGZ1bmN0aW9uIChjKSB7XG4gICAgICAgICAgICAgIGlmIChjKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGQoYSwgYiwgZik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSlcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIGUoYSwgYiwgZik7XG4gICAgICB9O1xuICAgIH0pKGEsIGIpO1xuICB9KSxcbiAgKGZyb21Qcm9taXNlJDEgPSBmdW5jdGlvbiAoYSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYikge1xuICAgICAgbGV0IGMgPSAhMTtcbiAgICAgIGEudGhlbihmdW5jdGlvbiAoYSkge1xuICAgICAgICBjIHx8IChiKF9fKDEsIFthXSkpLCBiKDApKTtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2b2lkIDApO1xuICAgICAgfSk7XG4gICAgICBiKFxuICAgICAgICBfXygwLCBbXG4gICAgICAgICAgZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgIGEgJiYgKGMgPSAhMCk7XG4gICAgICAgICAgfSxcbiAgICAgICAgXSlcbiAgICAgICk7XG4gICAgfTtcbiAgfSk7XG5cbmV4cG9ydHMuYnVmZmVyID0gYnVmZmVyJDE7XG5cbmV4cG9ydHMuY29tYmluZSA9IGNvbWJpbmUkMTtcblxuZXhwb3J0cy5jb25jYXQgPSBjb25jYXQkMTtcblxuZXhwb3J0cy5jb25jYXRBbGwgPSBjb25jYXRBbGwkMTtcblxuZXhwb3J0cy5jb25jYXRNYXAgPSBjb25jYXRNYXAkMTtcblxuZXhwb3J0cy5kZWJvdW5jZSA9IGRlYm91bmNlJDE7XG5cbmV4cG9ydHMuZGVsYXkgPSBkZWxheSQxO1xuXG5leHBvcnRzLmVtcHR5ID0gZW1wdHkkMTtcblxuZXhwb3J0cy5maWx0ZXIgPSBmaWx0ZXIkMTtcblxuZXhwb3J0cy5mbGF0dGVuID0gZmxhdHRlbiQxO1xuXG5leHBvcnRzLmZvckVhY2ggPSBmb3JFYWNoJDE7XG5cbmV4cG9ydHMuZnJvbUFycmF5ID0gZnJvbUFycmF5JDE7XG5cbmV4cG9ydHMuZnJvbUNhbGxiYWcgPSBmcm9tQ2FsbGJhZyQyO1xuXG5leHBvcnRzLmZyb21Eb21FdmVudCA9IGZyb21Eb21FdmVudCQxO1xuXG5leHBvcnRzLmZyb21MaXN0ID0gZnVuY3Rpb24gKGEpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChiKSB7XG4gICAgbGV0IGMgPSAhMSxcbiAgICAgIGUgPSAhMSxcbiAgICAgIGQgPSAhMSxcbiAgICAgIGYgPSBhO1xuICAgIGIoXG4gICAgICBfXygwLCBbXG4gICAgICAgIGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgaWYgKGEpIHtcbiAgICAgICAgICAgIGMgPSAhMDtcbiAgICAgICAgICB9IGVsc2UgaWYgKGUpIHtcbiAgICAgICAgICAgIGQgPSAhMDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9yIChlID0gZCA9ICEwOyBkICYmICFjOyApIHtcbiAgICAgICAgICAgICAgKGEgPSBmKSA/ICgoZiA9IGFbMV0pLCAoZCA9ICExKSwgYihfXygxLCBbYVswXV0pKSkgOiAoKGMgPSAhMCksIGIoMCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZSA9ICExO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgIF0pXG4gICAgKTtcbiAgfTtcbn07XG5cbmV4cG9ydHMuZnJvbU9ic2VydmFibGUgPSBmcm9tT2JzZXJ2YWJsZSQyO1xuXG5leHBvcnRzLmZyb21Qcm9taXNlID0gZnJvbVByb21pc2UkMTtcblxuZXhwb3J0cy5mcm9tVmFsdWUgPSBmdW5jdGlvbiAoYSkge1xuICByZXR1cm4gZnVuY3Rpb24gKGIpIHtcbiAgICBsZXQgYyA9ICExO1xuICAgIGIoXG4gICAgICBfXygwLCBbXG4gICAgICAgIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgZSA/IChjID0gITApIDogYyB8fCAoKGMgPSAhMCksIGIoX18oMSwgW2FdKSksIGIoMCkpO1xuICAgICAgICB9LFxuICAgICAgXSlcbiAgICApO1xuICB9O1xufTtcblxuZXhwb3J0cy5pbnRlcnZhbCA9IGludGVydmFsJDE7XG5cbmV4cG9ydHMubWFrZSA9IGZ1bmN0aW9uIChhKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoYikge1xuICAgIGxldCBjID0gX3JlZixcbiAgICAgIGUgPSAhMTtcbiAgICBjID0gYSh7XG4gICAgICBuZXh0OiBmdW5jdGlvbiAoZCkge1xuICAgICAgICBlIHx8IGIoX18oMSwgW2RdKSk7XG4gICAgICB9LFxuICAgICAgY29tcGxldGU6IGZ1bmN0aW9uIChkKSB7XG4gICAgICAgIGUgfHwgKChlID0gITApLCBiKDApKTtcbiAgICAgIH0sXG4gICAgfSk7XG4gICAgYihcbiAgICAgIF9fKDAsIFtcbiAgICAgICAgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICBpZiAoZCAmJiAhZSkge1xuICAgICAgICAgICAgcmV0dXJuIChlID0gITApLCBjKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgXSlcbiAgICApO1xuICB9O1xufTtcblxuZXhwb3J0cy5tYWtlU3ViamVjdCA9IGZ1bmN0aW9uIChhKSB7XG4gIGxldCBiID0gW10sXG4gICAgYyA9ICExO1xuICByZXR1cm4ge1xuICAgIHNvdXJjZTogZnVuY3Rpb24gKGMpIHtcbiAgICAgIGZ1bmN0aW9uIGQoZCkge1xuICAgICAgICByZXR1cm4gZCAhPT0gYztcbiAgICAgIH1cbiAgICAgIGIgPSBiLmNvbmNhdChjKTtcbiAgICAgIGMoXG4gICAgICAgIF9fKDAsIFtcbiAgICAgICAgICBmdW5jdGlvbiAoYykge1xuICAgICAgICAgICAgYyAmJiAoYiA9IGIuZmlsdGVyKGQpKTtcbiAgICAgICAgICB9LFxuICAgICAgICBdKVxuICAgICAgKTtcbiAgICB9LFxuICAgIG5leHQ6IGZ1bmN0aW9uIChhKSB7XG4gICAgICBjIHx8XG4gICAgICAgIGIuZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgICAgICAgIGMoX18oMSwgW2FdKSk7XG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uIChhKSB7XG4gICAgICBjIHx8ICgoYyA9ICEwKSwgYi5mb3JFYWNoKF9yZWY0KSk7XG4gICAgfSxcbiAgfTtcbn07XG5cbmV4cG9ydHMubWFwID0gbWFwJDE7XG5cbmV4cG9ydHMubWVyZ2UgPSBtZXJnZSQxO1xuXG5leHBvcnRzLm1lcmdlQWxsID0gbWVyZ2VBbGwkMTtcblxuZXhwb3J0cy5tZXJnZU1hcCA9IG1lcmdlTWFwJDE7XG5cbmV4cG9ydHMubmV2ZXIgPSBmdW5jdGlvbiAoYSkge1xuICBhKF9fKDAsIFt0YWxrYmFja1BsYWNlaG9sZGVyXSkpO1xufTtcblxuZXhwb3J0cy5vbkVuZCA9IG9uRW5kJDE7XG5cbmV4cG9ydHMub25QdXNoID0gb25QdXNoJDE7XG5cbmV4cG9ydHMub25TdGFydCA9IG9uU3RhcnQkMTtcblxuZXhwb3J0cy5waXBlID0gZnVuY3Rpb24gKCkge1xuICBmb3IgKHZhciBhID0gYXJndW1lbnRzLCBiID0gYXJndW1lbnRzWzBdLCBjID0gMSwgZSA9IGFyZ3VtZW50cy5sZW5ndGg7IGMgPCBlOyBjKyspIHtcbiAgICBiID0gYVtjXShiKTtcbiAgfVxuICByZXR1cm4gYjtcbn07XG5cbmV4cG9ydHMucHVibGlzaCA9IHB1Ymxpc2gkMTtcblxuZXhwb3J0cy5zYW1wbGUgPSBzYW1wbGUkMTtcblxuZXhwb3J0cy5zY2FuID0gc2NhbiQxO1xuXG5leHBvcnRzLnNoYXJlID0gc2hhcmUkMTtcblxuZXhwb3J0cy5za2lwID0gc2tpcCQxO1xuXG5leHBvcnRzLnNraXBVbnRpbCA9IHNraXBVbnRpbCQxO1xuXG5leHBvcnRzLnNraXBXaGlsZSA9IHNraXBXaGlsZSQxO1xuXG5leHBvcnRzLnN1YnNjcmliZSA9IHN1YnNjcmliZSQxO1xuXG5leHBvcnRzLnN3aXRjaEFsbCA9IHN3aXRjaEFsbCQxO1xuXG5leHBvcnRzLnN3aXRjaE1hcCA9IHN3aXRjaE1hcCQxO1xuXG5leHBvcnRzLnRha2UgPSB0YWtlJDE7XG5cbmV4cG9ydHMudGFrZUxhc3QgPSB0YWtlTGFzdCQxO1xuXG5leHBvcnRzLnRha2VVbnRpbCA9IHRha2VVbnRpbCQxO1xuXG5leHBvcnRzLnRha2VXaGlsZSA9IHRha2VXaGlsZSQxO1xuXG5leHBvcnRzLnRhcCA9IHRhcCQxO1xuXG5leHBvcnRzLnRocm90dGxlID0gdGhyb3R0bGUkMTtcblxuZXhwb3J0cy50b0FycmF5ID0gdG9BcnJheSQxO1xuXG5leHBvcnRzLnRvQ2FsbGJhZyA9IHRvQ2FsbGJhZyQyO1xuXG5leHBvcnRzLnRvT2JzZXJ2YWJsZSA9IHRvT2JzZXJ2YWJsZSQyO1xuXG5leHBvcnRzLnRvUHJvbWlzZSA9IHRvUHJvbWlzZSQxO1xuIiwiZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3MpIHsgdmFyIF9jYWNoZSA9IHR5cGVvZiBNYXAgPT09IFwiZnVuY3Rpb25cIiA/IG5ldyBNYXAoKSA6IHVuZGVmaW5lZDsgX3dyYXBOYXRpdmVTdXBlciA9IGZ1bmN0aW9uIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3MpIHsgaWYgKENsYXNzID09PSBudWxsIHx8ICFfaXNOYXRpdmVGdW5jdGlvbihDbGFzcykpIHJldHVybiBDbGFzczsgaWYgKHR5cGVvZiBDbGFzcyAhPT0gXCJmdW5jdGlvblwiKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBpZiAodHlwZW9mIF9jYWNoZSAhPT0gXCJ1bmRlZmluZWRcIikgeyBpZiAoX2NhY2hlLmhhcyhDbGFzcykpIHJldHVybiBfY2FjaGUuZ2V0KENsYXNzKTsgX2NhY2hlLnNldChDbGFzcywgV3JhcHBlcik7IH0gZnVuY3Rpb24gV3JhcHBlcigpIHsgcmV0dXJuIF9jb25zdHJ1Y3QoQ2xhc3MsIGFyZ3VtZW50cywgX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yKTsgfSBXcmFwcGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBXcmFwcGVyLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyByZXR1cm4gX3NldFByb3RvdHlwZU9mKFdyYXBwZXIsIENsYXNzKTsgfTsgcmV0dXJuIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9jb25zdHJ1Y3QoUGFyZW50LCBhcmdzLCBDbGFzcykgeyBpZiAoX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpKSB7IF9jb25zdHJ1Y3QgPSBSZWZsZWN0LmNvbnN0cnVjdDsgfSBlbHNlIHsgX2NvbnN0cnVjdCA9IGZ1bmN0aW9uIF9jb25zdHJ1Y3QoUGFyZW50LCBhcmdzLCBDbGFzcykgeyB2YXIgYSA9IFtudWxsXTsgYS5wdXNoLmFwcGx5KGEsIGFyZ3MpOyB2YXIgQ29uc3RydWN0b3IgPSBGdW5jdGlvbi5iaW5kLmFwcGx5KFBhcmVudCwgYSk7IHZhciBpbnN0YW5jZSA9IG5ldyBDb25zdHJ1Y3RvcigpOyBpZiAoQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihpbnN0YW5jZSwgQ2xhc3MucHJvdG90eXBlKTsgcmV0dXJuIGluc3RhbmNlOyB9OyB9IHJldHVybiBfY29uc3RydWN0LmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7IH1cblxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfVxuXG5mdW5jdGlvbiBfaXNOYXRpdmVGdW5jdGlvbihmbikgeyByZXR1cm4gRnVuY3Rpb24udG9TdHJpbmcuY2FsbChmbikuaW5kZXhPZihcIltuYXRpdmUgY29kZV1cIikgIT09IC0xOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxuLy8gRklYTUU6XG4vLyBmbG93bGludCB1bmluaXRpYWxpemVkLWluc3RhbmNlLXByb3BlcnR5Om9mZlxuaW1wb3J0IGlzT2JqZWN0TGlrZSBmcm9tIFwiLi4vanN1dGlscy9pc09iamVjdExpa2UubWpzXCI7XG5pbXBvcnQgeyBTWU1CT0xfVE9fU1RSSU5HX1RBRyB9IGZyb20gXCIuLi9wb2x5ZmlsbHMvc3ltYm9scy5tanNcIjtcbmltcG9ydCB7IGdldExvY2F0aW9uIH0gZnJvbSBcIi4uL2xhbmd1YWdlL2xvY2F0aW9uLm1qc1wiO1xuaW1wb3J0IHsgcHJpbnRMb2NhdGlvbiwgcHJpbnRTb3VyY2VMb2NhdGlvbiB9IGZyb20gXCIuLi9sYW5ndWFnZS9wcmludExvY2F0aW9uLm1qc1wiO1xuLyoqXG4gKiBBIEdyYXBoUUxFcnJvciBkZXNjcmliZXMgYW4gRXJyb3IgZm91bmQgZHVyaW5nIHRoZSBwYXJzZSwgdmFsaWRhdGUsIG9yXG4gKiBleGVjdXRlIHBoYXNlcyBvZiBwZXJmb3JtaW5nIGEgR3JhcGhRTCBvcGVyYXRpb24uIEluIGFkZGl0aW9uIHRvIGEgbWVzc2FnZVxuICogYW5kIHN0YWNrIHRyYWNlLCBpdCBhbHNvIGluY2x1ZGVzIGluZm9ybWF0aW9uIGFib3V0IHRoZSBsb2NhdGlvbnMgaW4gYVxuICogR3JhcGhRTCBkb2N1bWVudCBhbmQvb3IgZXhlY3V0aW9uIHJlc3VsdCB0aGF0IGNvcnJlc3BvbmQgdG8gdGhlIEVycm9yLlxuICovXG5cbmV4cG9ydCB2YXIgR3JhcGhRTEVycm9yID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfRXJyb3IpIHtcbiAgX2luaGVyaXRzKEdyYXBoUUxFcnJvciwgX0Vycm9yKTtcblxuICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKEdyYXBoUUxFcnJvcik7XG5cbiAgLyoqXG4gICAqIEEgbWVzc2FnZSBkZXNjcmliaW5nIHRoZSBFcnJvciBmb3IgZGVidWdnaW5nIHB1cnBvc2VzLlxuICAgKlxuICAgKiBFbnVtZXJhYmxlLCBhbmQgYXBwZWFycyBpbiB0aGUgcmVzdWx0IG9mIEpTT04uc3RyaW5naWZ5KCkuXG4gICAqXG4gICAqIE5vdGU6IHNob3VsZCBiZSB0cmVhdGVkIGFzIHJlYWRvbmx5LCBkZXNwaXRlIGludmFyaWFudCB1c2FnZS5cbiAgICovXG5cbiAgLyoqXG4gICAqIEFuIGFycmF5IG9mIHsgbGluZSwgY29sdW1uIH0gbG9jYXRpb25zIHdpdGhpbiB0aGUgc291cmNlIEdyYXBoUUwgZG9jdW1lbnRcbiAgICogd2hpY2ggY29ycmVzcG9uZCB0byB0aGlzIGVycm9yLlxuICAgKlxuICAgKiBFcnJvcnMgZHVyaW5nIHZhbGlkYXRpb24gb2Z0ZW4gY29udGFpbiBtdWx0aXBsZSBsb2NhdGlvbnMsIGZvciBleGFtcGxlIHRvXG4gICAqIHBvaW50IG91dCB0d28gdGhpbmdzIHdpdGggdGhlIHNhbWUgbmFtZS4gRXJyb3JzIGR1cmluZyBleGVjdXRpb24gaW5jbHVkZSBhXG4gICAqIHNpbmdsZSBsb2NhdGlvbiwgdGhlIGZpZWxkIHdoaWNoIHByb2R1Y2VkIHRoZSBlcnJvci5cbiAgICpcbiAgICogRW51bWVyYWJsZSwgYW5kIGFwcGVhcnMgaW4gdGhlIHJlc3VsdCBvZiBKU09OLnN0cmluZ2lmeSgpLlxuICAgKi9cblxuICAvKipcbiAgICogQW4gYXJyYXkgZGVzY3JpYmluZyB0aGUgSlNPTi1wYXRoIGludG8gdGhlIGV4ZWN1dGlvbiByZXNwb25zZSB3aGljaFxuICAgKiBjb3JyZXNwb25kcyB0byB0aGlzIGVycm9yLiBPbmx5IGluY2x1ZGVkIGZvciBlcnJvcnMgZHVyaW5nIGV4ZWN1dGlvbi5cbiAgICpcbiAgICogRW51bWVyYWJsZSwgYW5kIGFwcGVhcnMgaW4gdGhlIHJlc3VsdCBvZiBKU09OLnN0cmluZ2lmeSgpLlxuICAgKi9cblxuICAvKipcbiAgICogQW4gYXJyYXkgb2YgR3JhcGhRTCBBU1QgTm9kZXMgY29ycmVzcG9uZGluZyB0byB0aGlzIGVycm9yLlxuICAgKi9cblxuICAvKipcbiAgICogVGhlIHNvdXJjZSBHcmFwaFFMIGRvY3VtZW50IGZvciB0aGUgZmlyc3QgbG9jYXRpb24gb2YgdGhpcyBlcnJvci5cbiAgICpcbiAgICogTm90ZSB0aGF0IGlmIHRoaXMgRXJyb3IgcmVwcmVzZW50cyBtb3JlIHRoYW4gb25lIG5vZGUsIHRoZSBzb3VyY2UgbWF5IG5vdFxuICAgKiByZXByZXNlbnQgbm9kZXMgYWZ0ZXIgdGhlIGZpcnN0IG5vZGUuXG4gICAqL1xuXG4gIC8qKlxuICAgKiBBbiBhcnJheSBvZiBjaGFyYWN0ZXIgb2Zmc2V0cyB3aXRoaW4gdGhlIHNvdXJjZSBHcmFwaFFMIGRvY3VtZW50XG4gICAqIHdoaWNoIGNvcnJlc3BvbmQgdG8gdGhpcyBlcnJvci5cbiAgICovXG5cbiAgLyoqXG4gICAqIFRoZSBvcmlnaW5hbCBlcnJvciB0aHJvd24gZnJvbSBhIGZpZWxkIHJlc29sdmVyIGR1cmluZyBleGVjdXRpb24uXG4gICAqL1xuXG4gIC8qKlxuICAgKiBFeHRlbnNpb24gZmllbGRzIHRvIGFkZCB0byB0aGUgZm9ybWF0dGVkIGVycm9yLlxuICAgKi9cbiAgZnVuY3Rpb24gR3JhcGhRTEVycm9yKG1lc3NhZ2UsIG5vZGVzLCBzb3VyY2UsIHBvc2l0aW9ucywgcGF0aCwgb3JpZ2luYWxFcnJvciwgZXh0ZW5zaW9ucykge1xuICAgIHZhciBfbG9jYXRpb25zMiwgX3NvdXJjZTIsIF9wb3NpdGlvbnMyLCBfZXh0ZW5zaW9uczI7XG5cbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgR3JhcGhRTEVycm9yKTtcblxuICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgbWVzc2FnZSk7IC8vIENvbXB1dGUgbGlzdCBvZiBibGFtZSBub2Rlcy5cblxuICAgIHZhciBfbm9kZXMgPSBBcnJheS5pc0FycmF5KG5vZGVzKSA/IG5vZGVzLmxlbmd0aCAhPT0gMCA/IG5vZGVzIDogdW5kZWZpbmVkIDogbm9kZXMgPyBbbm9kZXNdIDogdW5kZWZpbmVkOyAvLyBDb21wdXRlIGxvY2F0aW9ucyBpbiB0aGUgc291cmNlIGZvciB0aGUgZ2l2ZW4gbm9kZXMvcG9zaXRpb25zLlxuXG5cbiAgICB2YXIgX3NvdXJjZSA9IHNvdXJjZTtcblxuICAgIGlmICghX3NvdXJjZSAmJiBfbm9kZXMpIHtcbiAgICAgIHZhciBfbm9kZXMkMCRsb2M7XG5cbiAgICAgIF9zb3VyY2UgPSAoX25vZGVzJDAkbG9jID0gX25vZGVzWzBdLmxvYykgPT09IG51bGwgfHwgX25vZGVzJDAkbG9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfbm9kZXMkMCRsb2Muc291cmNlO1xuICAgIH1cblxuICAgIHZhciBfcG9zaXRpb25zID0gcG9zaXRpb25zO1xuXG4gICAgaWYgKCFfcG9zaXRpb25zICYmIF9ub2Rlcykge1xuICAgICAgX3Bvc2l0aW9ucyA9IF9ub2Rlcy5yZWR1Y2UoZnVuY3Rpb24gKGxpc3QsIG5vZGUpIHtcbiAgICAgICAgaWYgKG5vZGUubG9jKSB7XG4gICAgICAgICAgbGlzdC5wdXNoKG5vZGUubG9jLnN0YXJ0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBsaXN0O1xuICAgICAgfSwgW10pO1xuICAgIH1cblxuICAgIGlmIChfcG9zaXRpb25zICYmIF9wb3NpdGlvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICBfcG9zaXRpb25zID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHZhciBfbG9jYXRpb25zO1xuXG4gICAgaWYgKHBvc2l0aW9ucyAmJiBzb3VyY2UpIHtcbiAgICAgIF9sb2NhdGlvbnMgPSBwb3NpdGlvbnMubWFwKGZ1bmN0aW9uIChwb3MpIHtcbiAgICAgICAgcmV0dXJuIGdldExvY2F0aW9uKHNvdXJjZSwgcG9zKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoX25vZGVzKSB7XG4gICAgICBfbG9jYXRpb25zID0gX25vZGVzLnJlZHVjZShmdW5jdGlvbiAobGlzdCwgbm9kZSkge1xuICAgICAgICBpZiAobm9kZS5sb2MpIHtcbiAgICAgICAgICBsaXN0LnB1c2goZ2V0TG9jYXRpb24obm9kZS5sb2Muc291cmNlLCBub2RlLmxvYy5zdGFydCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGxpc3Q7XG4gICAgICB9LCBbXSk7XG4gICAgfVxuXG4gICAgdmFyIF9leHRlbnNpb25zID0gZXh0ZW5zaW9ucztcblxuICAgIGlmIChfZXh0ZW5zaW9ucyA9PSBudWxsICYmIG9yaWdpbmFsRXJyb3IgIT0gbnVsbCkge1xuICAgICAgdmFyIG9yaWdpbmFsRXh0ZW5zaW9ucyA9IG9yaWdpbmFsRXJyb3IuZXh0ZW5zaW9ucztcblxuICAgICAgaWYgKGlzT2JqZWN0TGlrZShvcmlnaW5hbEV4dGVuc2lvbnMpKSB7XG4gICAgICAgIF9leHRlbnNpb25zID0gb3JpZ2luYWxFeHRlbnNpb25zO1xuICAgICAgfVxuICAgIH1cblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCB7XG4gICAgICBuYW1lOiB7XG4gICAgICAgIHZhbHVlOiAnR3JhcGhRTEVycm9yJ1xuICAgICAgfSxcbiAgICAgIG1lc3NhZ2U6IHtcbiAgICAgICAgdmFsdWU6IG1lc3NhZ2UsXG4gICAgICAgIC8vIEJ5IGJlaW5nIGVudW1lcmFibGUsIEpTT04uc3RyaW5naWZ5IHdpbGwgaW5jbHVkZSBgbWVzc2FnZWAgaW4gdGhlXG4gICAgICAgIC8vIHJlc3VsdGluZyBvdXRwdXQuIFRoaXMgZW5zdXJlcyB0aGF0IHRoZSBzaW1wbGVzdCBwb3NzaWJsZSBHcmFwaFFMXG4gICAgICAgIC8vIHNlcnZpY2UgYWRoZXJlcyB0byB0aGUgc3BlYy5cbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWVcbiAgICAgIH0sXG4gICAgICBsb2NhdGlvbnM6IHtcbiAgICAgICAgLy8gQ29lcmNpbmcgZmFsc3kgdmFsdWVzIHRvIHVuZGVmaW5lZCBlbnN1cmVzIHRoZXkgd2lsbCBub3QgYmUgaW5jbHVkZWRcbiAgICAgICAgLy8gaW4gSlNPTi5zdHJpbmdpZnkoKSB3aGVuIG5vdCBwcm92aWRlZC5cbiAgICAgICAgdmFsdWU6IChfbG9jYXRpb25zMiA9IF9sb2NhdGlvbnMpICE9PSBudWxsICYmIF9sb2NhdGlvbnMyICE9PSB2b2lkIDAgPyBfbG9jYXRpb25zMiA6IHVuZGVmaW5lZCxcbiAgICAgICAgLy8gQnkgYmVpbmcgZW51bWVyYWJsZSwgSlNPTi5zdHJpbmdpZnkgd2lsbCBpbmNsdWRlIGBsb2NhdGlvbnNgIGluIHRoZVxuICAgICAgICAvLyByZXN1bHRpbmcgb3V0cHV0LiBUaGlzIGVuc3VyZXMgdGhhdCB0aGUgc2ltcGxlc3QgcG9zc2libGUgR3JhcGhRTFxuICAgICAgICAvLyBzZXJ2aWNlIGFkaGVyZXMgdG8gdGhlIHNwZWMuXG4gICAgICAgIGVudW1lcmFibGU6IF9sb2NhdGlvbnMgIT0gbnVsbFxuICAgICAgfSxcbiAgICAgIHBhdGg6IHtcbiAgICAgICAgLy8gQ29lcmNpbmcgZmFsc3kgdmFsdWVzIHRvIHVuZGVmaW5lZCBlbnN1cmVzIHRoZXkgd2lsbCBub3QgYmUgaW5jbHVkZWRcbiAgICAgICAgLy8gaW4gSlNPTi5zdHJpbmdpZnkoKSB3aGVuIG5vdCBwcm92aWRlZC5cbiAgICAgICAgdmFsdWU6IHBhdGggIT09IG51bGwgJiYgcGF0aCAhPT0gdm9pZCAwID8gcGF0aCA6IHVuZGVmaW5lZCxcbiAgICAgICAgLy8gQnkgYmVpbmcgZW51bWVyYWJsZSwgSlNPTi5zdHJpbmdpZnkgd2lsbCBpbmNsdWRlIGBwYXRoYCBpbiB0aGVcbiAgICAgICAgLy8gcmVzdWx0aW5nIG91dHB1dC4gVGhpcyBlbnN1cmVzIHRoYXQgdGhlIHNpbXBsZXN0IHBvc3NpYmxlIEdyYXBoUUxcbiAgICAgICAgLy8gc2VydmljZSBhZGhlcmVzIHRvIHRoZSBzcGVjLlxuICAgICAgICBlbnVtZXJhYmxlOiBwYXRoICE9IG51bGxcbiAgICAgIH0sXG4gICAgICBub2Rlczoge1xuICAgICAgICB2YWx1ZTogX25vZGVzICE9PSBudWxsICYmIF9ub2RlcyAhPT0gdm9pZCAwID8gX25vZGVzIDogdW5kZWZpbmVkXG4gICAgICB9LFxuICAgICAgc291cmNlOiB7XG4gICAgICAgIHZhbHVlOiAoX3NvdXJjZTIgPSBfc291cmNlKSAhPT0gbnVsbCAmJiBfc291cmNlMiAhPT0gdm9pZCAwID8gX3NvdXJjZTIgOiB1bmRlZmluZWRcbiAgICAgIH0sXG4gICAgICBwb3NpdGlvbnM6IHtcbiAgICAgICAgdmFsdWU6IChfcG9zaXRpb25zMiA9IF9wb3NpdGlvbnMpICE9PSBudWxsICYmIF9wb3NpdGlvbnMyICE9PSB2b2lkIDAgPyBfcG9zaXRpb25zMiA6IHVuZGVmaW5lZFxuICAgICAgfSxcbiAgICAgIG9yaWdpbmFsRXJyb3I6IHtcbiAgICAgICAgdmFsdWU6IG9yaWdpbmFsRXJyb3JcbiAgICAgIH0sXG4gICAgICBleHRlbnNpb25zOiB7XG4gICAgICAgIC8vIENvZXJjaW5nIGZhbHN5IHZhbHVlcyB0byB1bmRlZmluZWQgZW5zdXJlcyB0aGV5IHdpbGwgbm90IGJlIGluY2x1ZGVkXG4gICAgICAgIC8vIGluIEpTT04uc3RyaW5naWZ5KCkgd2hlbiBub3QgcHJvdmlkZWQuXG4gICAgICAgIHZhbHVlOiAoX2V4dGVuc2lvbnMyID0gX2V4dGVuc2lvbnMpICE9PSBudWxsICYmIF9leHRlbnNpb25zMiAhPT0gdm9pZCAwID8gX2V4dGVuc2lvbnMyIDogdW5kZWZpbmVkLFxuICAgICAgICAvLyBCeSBiZWluZyBlbnVtZXJhYmxlLCBKU09OLnN0cmluZ2lmeSB3aWxsIGluY2x1ZGUgYHBhdGhgIGluIHRoZVxuICAgICAgICAvLyByZXN1bHRpbmcgb3V0cHV0LiBUaGlzIGVuc3VyZXMgdGhhdCB0aGUgc2ltcGxlc3QgcG9zc2libGUgR3JhcGhRTFxuICAgICAgICAvLyBzZXJ2aWNlIGFkaGVyZXMgdG8gdGhlIHNwZWMuXG4gICAgICAgIGVudW1lcmFibGU6IF9leHRlbnNpb25zICE9IG51bGxcbiAgICAgIH1cbiAgICB9KTsgLy8gSW5jbHVkZSAobm9uLWVudW1lcmFibGUpIHN0YWNrIHRyYWNlLlxuXG4gICAgaWYgKG9yaWdpbmFsRXJyb3IgIT09IG51bGwgJiYgb3JpZ2luYWxFcnJvciAhPT0gdm9pZCAwICYmIG9yaWdpbmFsRXJyb3Iuc3RhY2spIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgJ3N0YWNrJywge1xuICAgICAgICB2YWx1ZTogb3JpZ2luYWxFcnJvci5zdGFjayxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMpO1xuICAgIH0gLy8gaXN0YW5idWwgaWdub3JlIG5leHQgKFNlZTogJ2h0dHBzOi8vZ2l0aHViLmNvbS9ncmFwaHFsL2dyYXBocWwtanMvaXNzdWVzLzIzMTcnKVxuXG5cbiAgICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBHcmFwaFFMRXJyb3IpO1xuICAgIH0gZWxzZSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICdzdGFjaycsIHtcbiAgICAgICAgdmFsdWU6IEVycm9yKCkuc3RhY2ssXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhHcmFwaFFMRXJyb3IsIFt7XG4gICAga2V5OiBcInRvU3RyaW5nXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgcmV0dXJuIHByaW50RXJyb3IodGhpcyk7XG4gICAgfSAvLyBGSVhNRTogd29ya2Fyb3VuZCB0byBub3QgYnJlYWsgY2hhaSBjb21wYXJpc29ucywgc2hvdWxkIGJlIHJlbW92ZSBpbiB2MTZcbiAgICAvLyAkRmxvd0ZpeE1lW3Vuc3VwcG9ydGVkLXN5bnRheF0gRmxvdyBkb2Vzbid0IHN1cHBvcnQgY29tcHV0ZWQgcHJvcGVydGllcyB5ZXRcblxuICB9LCB7XG4gICAga2V5OiBTWU1CT0xfVE9fU1RSSU5HX1RBRyxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiAnT2JqZWN0JztcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gR3JhcGhRTEVycm9yO1xufSggLyojX19QVVJFX18qL193cmFwTmF0aXZlU3VwZXIoRXJyb3IpKTtcbi8qKlxuICogUHJpbnRzIGEgR3JhcGhRTEVycm9yIHRvIGEgc3RyaW5nLCByZXByZXNlbnRpbmcgdXNlZnVsIGxvY2F0aW9uIGluZm9ybWF0aW9uXG4gKiBhYm91dCB0aGUgZXJyb3IncyBwb3NpdGlvbiBpbiB0aGUgc291cmNlLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBwcmludEVycm9yKGVycm9yKSB7XG4gIHZhciBvdXRwdXQgPSBlcnJvci5tZXNzYWdlO1xuXG4gIGlmIChlcnJvci5ub2Rlcykge1xuICAgIGZvciAodmFyIF9pMiA9IDAsIF9lcnJvciRub2RlczIgPSBlcnJvci5ub2RlczsgX2kyIDwgX2Vycm9yJG5vZGVzMi5sZW5ndGg7IF9pMisrKSB7XG4gICAgICB2YXIgbm9kZSA9IF9lcnJvciRub2RlczJbX2kyXTtcblxuICAgICAgaWYgKG5vZGUubG9jKSB7XG4gICAgICAgIG91dHB1dCArPSAnXFxuXFxuJyArIHByaW50TG9jYXRpb24obm9kZS5sb2MpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChlcnJvci5zb3VyY2UgJiYgZXJyb3IubG9jYXRpb25zKSB7XG4gICAgZm9yICh2YXIgX2k0ID0gMCwgX2Vycm9yJGxvY2F0aW9uczIgPSBlcnJvci5sb2NhdGlvbnM7IF9pNCA8IF9lcnJvciRsb2NhdGlvbnMyLmxlbmd0aDsgX2k0KyspIHtcbiAgICAgIHZhciBsb2NhdGlvbiA9IF9lcnJvciRsb2NhdGlvbnMyW19pNF07XG4gICAgICBvdXRwdXQgKz0gJ1xcblxcbicgKyBwcmludFNvdXJjZUxvY2F0aW9uKGVycm9yLnNvdXJjZSwgbG9jYXRpb24pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvdXRwdXQ7XG59XG4iLCJpbXBvcnQgZGV2QXNzZXJ0IGZyb20gXCIuLi9qc3V0aWxzL2RldkFzc2VydC5tanNcIjtcblxuLyoqXG4gKiBHaXZlbiBhIEdyYXBoUUxFcnJvciwgZm9ybWF0IGl0IGFjY29yZGluZyB0byB0aGUgcnVsZXMgZGVzY3JpYmVkIGJ5IHRoZVxuICogUmVzcG9uc2UgRm9ybWF0LCBFcnJvcnMgc2VjdGlvbiBvZiB0aGUgR3JhcGhRTCBTcGVjaWZpY2F0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0RXJyb3IoZXJyb3IpIHtcbiAgdmFyIF9lcnJvciRtZXNzYWdlO1xuXG4gIGVycm9yIHx8IGRldkFzc2VydCgwLCAnUmVjZWl2ZWQgbnVsbCBvciB1bmRlZmluZWQgZXJyb3IuJyk7XG4gIHZhciBtZXNzYWdlID0gKF9lcnJvciRtZXNzYWdlID0gZXJyb3IubWVzc2FnZSkgIT09IG51bGwgJiYgX2Vycm9yJG1lc3NhZ2UgIT09IHZvaWQgMCA/IF9lcnJvciRtZXNzYWdlIDogJ0FuIHVua25vd24gZXJyb3Igb2NjdXJyZWQuJztcbiAgdmFyIGxvY2F0aW9ucyA9IGVycm9yLmxvY2F0aW9ucztcbiAgdmFyIHBhdGggPSBlcnJvci5wYXRoO1xuICB2YXIgZXh0ZW5zaW9ucyA9IGVycm9yLmV4dGVuc2lvbnM7XG4gIHJldHVybiBleHRlbnNpb25zID8ge1xuICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgbG9jYXRpb25zOiBsb2NhdGlvbnMsXG4gICAgcGF0aDogcGF0aCxcbiAgICBleHRlbnNpb25zOiBleHRlbnNpb25zXG4gIH0gOiB7XG4gICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICBsb2NhdGlvbnM6IGxvY2F0aW9ucyxcbiAgICBwYXRoOiBwYXRoXG4gIH07XG59XG4vKipcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2dyYXBocWwvZ3JhcGhxbC1zcGVjL2Jsb2IvbWFzdGVyL3NwZWMvU2VjdGlvbiUyMDclMjAtLSUyMFJlc3BvbnNlLm1kI2Vycm9yc1xuICovXG4iLCJpbXBvcnQgaW5zcGVjdCBmcm9tIFwiLi4vanN1dGlscy9pbnNwZWN0Lm1qc1wiO1xuaW1wb3J0IHsgR3JhcGhRTEVycm9yIH0gZnJvbSBcIi4vR3JhcGhRTEVycm9yLm1qc1wiO1xuLyoqXG4gKiBHaXZlbiBhbiBhcmJpdHJhcnkgdmFsdWUsIHByZXN1bWFibHkgdGhyb3duIHdoaWxlIGF0dGVtcHRpbmcgdG8gZXhlY3V0ZSBhXG4gKiBHcmFwaFFMIG9wZXJhdGlvbiwgcHJvZHVjZSBhIG5ldyBHcmFwaFFMRXJyb3IgYXdhcmUgb2YgdGhlIGxvY2F0aW9uIGluIHRoZVxuICogZG9jdW1lbnQgcmVzcG9uc2libGUgZm9yIHRoZSBvcmlnaW5hbCBFcnJvci5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbG9jYXRlZEVycm9yKHJhd09yaWdpbmFsRXJyb3IsIG5vZGVzLCBwYXRoKSB7XG4gIHZhciBfbm9kZXM7XG5cbiAgLy8gU29tZXRpbWVzIGEgbm9uLWVycm9yIGlzIHRocm93biwgd3JhcCBpdCBhcyBhbiBFcnJvciBpbnN0YW5jZSB0byBlbnN1cmUgYSBjb25zaXN0ZW50IEVycm9yIGludGVyZmFjZS5cbiAgdmFyIG9yaWdpbmFsRXJyb3IgPSByYXdPcmlnaW5hbEVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyByYXdPcmlnaW5hbEVycm9yIDogbmV3IEVycm9yKCdVbmV4cGVjdGVkIGVycm9yIHZhbHVlOiAnICsgaW5zcGVjdChyYXdPcmlnaW5hbEVycm9yKSk7IC8vIE5vdGU6IHRoaXMgdXNlcyBhIGJyYW5kLWNoZWNrIHRvIHN1cHBvcnQgR3JhcGhRTCBlcnJvcnMgb3JpZ2luYXRpbmcgZnJvbSBvdGhlciBjb250ZXh0cy5cblxuICBpZiAoQXJyYXkuaXNBcnJheShvcmlnaW5hbEVycm9yLnBhdGgpKSB7XG4gICAgcmV0dXJuIG9yaWdpbmFsRXJyb3I7XG4gIH1cblxuICByZXR1cm4gbmV3IEdyYXBoUUxFcnJvcihvcmlnaW5hbEVycm9yLm1lc3NhZ2UsIChfbm9kZXMgPSBvcmlnaW5hbEVycm9yLm5vZGVzKSAhPT0gbnVsbCAmJiBfbm9kZXMgIT09IHZvaWQgMCA/IF9ub2RlcyA6IG5vZGVzLCBvcmlnaW5hbEVycm9yLnNvdXJjZSwgb3JpZ2luYWxFcnJvci5wb3NpdGlvbnMsIHBhdGgsIG9yaWdpbmFsRXJyb3IpO1xufVxuIiwiaW1wb3J0IHsgR3JhcGhRTEVycm9yIH0gZnJvbSBcIi4vR3JhcGhRTEVycm9yLm1qc1wiO1xuLyoqXG4gKiBQcm9kdWNlcyBhIEdyYXBoUUxFcnJvciByZXByZXNlbnRpbmcgYSBzeW50YXggZXJyb3IsIGNvbnRhaW5pbmcgdXNlZnVsXG4gKiBkZXNjcmlwdGl2ZSBpbmZvcm1hdGlvbiBhYm91dCB0aGUgc3ludGF4IGVycm9yJ3MgcG9zaXRpb24gaW4gdGhlIHNvdXJjZS5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc3ludGF4RXJyb3Ioc291cmNlLCBwb3NpdGlvbiwgZGVzY3JpcHRpb24pIHtcbiAgcmV0dXJuIG5ldyBHcmFwaFFMRXJyb3IoXCJTeW50YXggRXJyb3I6IFwiLmNvbmNhdChkZXNjcmlwdGlvbiksIHVuZGVmaW5lZCwgc291cmNlLCBbcG9zaXRpb25dKTtcbn1cbiIsImltcG9ydCBpbnNwZWN0IGZyb20gXCIuLi9qc3V0aWxzL2luc3BlY3QubWpzXCI7XG5pbXBvcnQgbWVtb2l6ZTMgZnJvbSBcIi4uL2pzdXRpbHMvbWVtb2l6ZTMubWpzXCI7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gXCIuLi9qc3V0aWxzL2ludmFyaWFudC5tanNcIjtcbmltcG9ydCBkZXZBc3NlcnQgZnJvbSBcIi4uL2pzdXRpbHMvZGV2QXNzZXJ0Lm1qc1wiO1xuaW1wb3J0IGlzUHJvbWlzZSBmcm9tIFwiLi4vanN1dGlscy9pc1Byb21pc2UubWpzXCI7XG5pbXBvcnQgaXNPYmplY3RMaWtlIGZyb20gXCIuLi9qc3V0aWxzL2lzT2JqZWN0TGlrZS5tanNcIjtcbmltcG9ydCBzYWZlQXJyYXlGcm9tIGZyb20gXCIuLi9qc3V0aWxzL3NhZmVBcnJheUZyb20ubWpzXCI7XG5pbXBvcnQgcHJvbWlzZVJlZHVjZSBmcm9tIFwiLi4vanN1dGlscy9wcm9taXNlUmVkdWNlLm1qc1wiO1xuaW1wb3J0IHByb21pc2VGb3JPYmplY3QgZnJvbSBcIi4uL2pzdXRpbHMvcHJvbWlzZUZvck9iamVjdC5tanNcIjtcbmltcG9ydCB7IGFkZFBhdGgsIHBhdGhUb0FycmF5IH0gZnJvbSBcIi4uL2pzdXRpbHMvUGF0aC5tanNcIjtcbmltcG9ydCB7IEdyYXBoUUxFcnJvciB9IGZyb20gXCIuLi9lcnJvci9HcmFwaFFMRXJyb3IubWpzXCI7XG5pbXBvcnQgeyBsb2NhdGVkRXJyb3IgfSBmcm9tIFwiLi4vZXJyb3IvbG9jYXRlZEVycm9yLm1qc1wiO1xuaW1wb3J0IHsgS2luZCB9IGZyb20gXCIuLi9sYW5ndWFnZS9raW5kcy5tanNcIjtcbmltcG9ydCB7IGFzc2VydFZhbGlkU2NoZW1hIH0gZnJvbSBcIi4uL3R5cGUvdmFsaWRhdGUubWpzXCI7XG5pbXBvcnQgeyBTY2hlbWFNZXRhRmllbGREZWYsIFR5cGVNZXRhRmllbGREZWYsIFR5cGVOYW1lTWV0YUZpZWxkRGVmIH0gZnJvbSBcIi4uL3R5cGUvaW50cm9zcGVjdGlvbi5tanNcIjtcbmltcG9ydCB7IEdyYXBoUUxJbmNsdWRlRGlyZWN0aXZlLCBHcmFwaFFMU2tpcERpcmVjdGl2ZSB9IGZyb20gXCIuLi90eXBlL2RpcmVjdGl2ZXMubWpzXCI7XG5pbXBvcnQgeyBpc05hbWVkVHlwZSwgaXNPYmplY3RUeXBlLCBpc0Fic3RyYWN0VHlwZSwgaXNMZWFmVHlwZSwgaXNMaXN0VHlwZSwgaXNOb25OdWxsVHlwZSB9IGZyb20gXCIuLi90eXBlL2RlZmluaXRpb24ubWpzXCI7XG5pbXBvcnQgeyB0eXBlRnJvbUFTVCB9IGZyb20gXCIuLi91dGlsaXRpZXMvdHlwZUZyb21BU1QubWpzXCI7XG5pbXBvcnQgeyBnZXRPcGVyYXRpb25Sb290VHlwZSB9IGZyb20gXCIuLi91dGlsaXRpZXMvZ2V0T3BlcmF0aW9uUm9vdFR5cGUubWpzXCI7XG5pbXBvcnQgeyBnZXRWYXJpYWJsZVZhbHVlcywgZ2V0QXJndW1lbnRWYWx1ZXMsIGdldERpcmVjdGl2ZVZhbHVlcyB9IGZyb20gXCIuL3ZhbHVlcy5tanNcIjtcbi8qKlxuICogVGVybWlub2xvZ3lcbiAqXG4gKiBcIkRlZmluaXRpb25zXCIgYXJlIHRoZSBnZW5lcmljIG5hbWUgZm9yIHRvcC1sZXZlbCBzdGF0ZW1lbnRzIGluIHRoZSBkb2N1bWVudC5cbiAqIEV4YW1wbGVzIG9mIHRoaXMgaW5jbHVkZTpcbiAqIDEpIE9wZXJhdGlvbnMgKHN1Y2ggYXMgYSBxdWVyeSlcbiAqIDIpIEZyYWdtZW50c1xuICpcbiAqIFwiT3BlcmF0aW9uc1wiIGFyZSBhIGdlbmVyaWMgbmFtZSBmb3IgcmVxdWVzdHMgaW4gdGhlIGRvY3VtZW50LlxuICogRXhhbXBsZXMgb2YgdGhpcyBpbmNsdWRlOlxuICogMSkgcXVlcnksXG4gKiAyKSBtdXRhdGlvblxuICpcbiAqIFwiU2VsZWN0aW9uc1wiIGFyZSB0aGUgZGVmaW5pdGlvbnMgdGhhdCBjYW4gYXBwZWFyIGxlZ2FsbHkgYW5kIGF0XG4gKiBzaW5nbGUgbGV2ZWwgb2YgdGhlIHF1ZXJ5LiBUaGVzZSBpbmNsdWRlOlxuICogMSkgZmllbGQgcmVmZXJlbmNlcyBlLmcgXCJhXCJcbiAqIDIpIGZyYWdtZW50IFwic3ByZWFkc1wiIGUuZy4gXCIuLi5jXCJcbiAqIDMpIGlubGluZSBmcmFnbWVudCBcInNwcmVhZHNcIiBlLmcuIFwiLi4ub24gVHlwZSB7IGEgfVwiXG4gKi9cblxuLyoqXG4gKiBEYXRhIHRoYXQgbXVzdCBiZSBhdmFpbGFibGUgYXQgYWxsIHBvaW50cyBkdXJpbmcgcXVlcnkgZXhlY3V0aW9uLlxuICpcbiAqIE5hbWVseSwgc2NoZW1hIG9mIHRoZSB0eXBlIHN5c3RlbSB0aGF0IGlzIGN1cnJlbnRseSBleGVjdXRpbmcsXG4gKiBhbmQgdGhlIGZyYWdtZW50cyBkZWZpbmVkIGluIHRoZSBxdWVyeSBkb2N1bWVudFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBleGVjdXRlKGFyZ3NPclNjaGVtYSwgZG9jdW1lbnQsIHJvb3RWYWx1ZSwgY29udGV4dFZhbHVlLCB2YXJpYWJsZVZhbHVlcywgb3BlcmF0aW9uTmFtZSwgZmllbGRSZXNvbHZlciwgdHlwZVJlc29sdmVyKSB7XG4gIC8qIGVzbGludC1lbmFibGUgbm8tcmVkZWNsYXJlICovXG4gIC8vIEV4dHJhY3QgYXJndW1lbnRzIGZyb20gb2JqZWN0IGFyZ3MgaWYgcHJvdmlkZWQuXG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gZXhlY3V0ZUltcGwoYXJnc09yU2NoZW1hKSA6IGV4ZWN1dGVJbXBsKHtcbiAgICBzY2hlbWE6IGFyZ3NPclNjaGVtYSxcbiAgICBkb2N1bWVudDogZG9jdW1lbnQsXG4gICAgcm9vdFZhbHVlOiByb290VmFsdWUsXG4gICAgY29udGV4dFZhbHVlOiBjb250ZXh0VmFsdWUsXG4gICAgdmFyaWFibGVWYWx1ZXM6IHZhcmlhYmxlVmFsdWVzLFxuICAgIG9wZXJhdGlvbk5hbWU6IG9wZXJhdGlvbk5hbWUsXG4gICAgZmllbGRSZXNvbHZlcjogZmllbGRSZXNvbHZlcixcbiAgICB0eXBlUmVzb2x2ZXI6IHR5cGVSZXNvbHZlclxuICB9KTtcbn1cbi8qKlxuICogQWxzbyBpbXBsZW1lbnRzIHRoZSBcIkV2YWx1YXRpbmcgcmVxdWVzdHNcIiBzZWN0aW9uIG9mIHRoZSBHcmFwaFFMIHNwZWNpZmljYXRpb24uXG4gKiBIb3dldmVyLCBpdCBndWFyYW50ZWVzIHRvIGNvbXBsZXRlIHN5bmNocm9ub3VzbHkgKG9yIHRocm93IGFuIGVycm9yKSBhc3N1bWluZ1xuICogdGhhdCBhbGwgZmllbGQgcmVzb2x2ZXJzIGFyZSBhbHNvIHN5bmNocm9ub3VzLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBleGVjdXRlU3luYyhhcmdzKSB7XG4gIHZhciByZXN1bHQgPSBleGVjdXRlSW1wbChhcmdzKTsgLy8gQXNzZXJ0IHRoYXQgdGhlIGV4ZWN1dGlvbiB3YXMgc3luY2hyb25vdXMuXG5cbiAgaWYgKGlzUHJvbWlzZShyZXN1bHQpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdHcmFwaFFMIGV4ZWN1dGlvbiBmYWlsZWQgdG8gY29tcGxldGUgc3luY2hyb25vdXNseS4nKTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGV4ZWN1dGVJbXBsKGFyZ3MpIHtcbiAgdmFyIHNjaGVtYSA9IGFyZ3Muc2NoZW1hLFxuICAgICAgZG9jdW1lbnQgPSBhcmdzLmRvY3VtZW50LFxuICAgICAgcm9vdFZhbHVlID0gYXJncy5yb290VmFsdWUsXG4gICAgICBjb250ZXh0VmFsdWUgPSBhcmdzLmNvbnRleHRWYWx1ZSxcbiAgICAgIHZhcmlhYmxlVmFsdWVzID0gYXJncy52YXJpYWJsZVZhbHVlcyxcbiAgICAgIG9wZXJhdGlvbk5hbWUgPSBhcmdzLm9wZXJhdGlvbk5hbWUsXG4gICAgICBmaWVsZFJlc29sdmVyID0gYXJncy5maWVsZFJlc29sdmVyLFxuICAgICAgdHlwZVJlc29sdmVyID0gYXJncy50eXBlUmVzb2x2ZXI7IC8vIElmIGFyZ3VtZW50cyBhcmUgbWlzc2luZyBvciBpbmNvcnJlY3QsIHRocm93IGFuIGVycm9yLlxuXG4gIGFzc2VydFZhbGlkRXhlY3V0aW9uQXJndW1lbnRzKHNjaGVtYSwgZG9jdW1lbnQsIHZhcmlhYmxlVmFsdWVzKTsgLy8gSWYgYSB2YWxpZCBleGVjdXRpb24gY29udGV4dCBjYW5ub3QgYmUgY3JlYXRlZCBkdWUgdG8gaW5jb3JyZWN0IGFyZ3VtZW50cyxcbiAgLy8gYSBcIlJlc3BvbnNlXCIgd2l0aCBvbmx5IGVycm9ycyBpcyByZXR1cm5lZC5cblxuICB2YXIgZXhlQ29udGV4dCA9IGJ1aWxkRXhlY3V0aW9uQ29udGV4dChzY2hlbWEsIGRvY3VtZW50LCByb290VmFsdWUsIGNvbnRleHRWYWx1ZSwgdmFyaWFibGVWYWx1ZXMsIG9wZXJhdGlvbk5hbWUsIGZpZWxkUmVzb2x2ZXIsIHR5cGVSZXNvbHZlcik7IC8vIFJldHVybiBlYXJseSBlcnJvcnMgaWYgZXhlY3V0aW9uIGNvbnRleHQgZmFpbGVkLlxuXG4gIGlmIChBcnJheS5pc0FycmF5KGV4ZUNvbnRleHQpKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGVycm9yczogZXhlQ29udGV4dFxuICAgIH07XG4gIH0gLy8gUmV0dXJuIGEgUHJvbWlzZSB0aGF0IHdpbGwgZXZlbnR1YWxseSByZXNvbHZlIHRvIHRoZSBkYXRhIGRlc2NyaWJlZCBieVxuICAvLyBUaGUgXCJSZXNwb25zZVwiIHNlY3Rpb24gb2YgdGhlIEdyYXBoUUwgc3BlY2lmaWNhdGlvbi5cbiAgLy9cbiAgLy8gSWYgZXJyb3JzIGFyZSBlbmNvdW50ZXJlZCB3aGlsZSBleGVjdXRpbmcgYSBHcmFwaFFMIGZpZWxkLCBvbmx5IHRoYXRcbiAgLy8gZmllbGQgYW5kIGl0cyBkZXNjZW5kYW50cyB3aWxsIGJlIG9taXR0ZWQsIGFuZCBzaWJsaW5nIGZpZWxkcyB3aWxsIHN0aWxsXG4gIC8vIGJlIGV4ZWN1dGVkLiBBbiBleGVjdXRpb24gd2hpY2ggZW5jb3VudGVycyBlcnJvcnMgd2lsbCBzdGlsbCByZXN1bHQgaW4gYVxuICAvLyByZXNvbHZlZCBQcm9taXNlLlxuXG5cbiAgdmFyIGRhdGEgPSBleGVjdXRlT3BlcmF0aW9uKGV4ZUNvbnRleHQsIGV4ZUNvbnRleHQub3BlcmF0aW9uLCByb290VmFsdWUpO1xuICByZXR1cm4gYnVpbGRSZXNwb25zZShleGVDb250ZXh0LCBkYXRhKTtcbn1cbi8qKlxuICogR2l2ZW4gYSBjb21wbGV0ZWQgZXhlY3V0aW9uIGNvbnRleHQgYW5kIGRhdGEsIGJ1aWxkIHRoZSB7IGVycm9ycywgZGF0YSB9XG4gKiByZXNwb25zZSBkZWZpbmVkIGJ5IHRoZSBcIlJlc3BvbnNlXCIgc2VjdGlvbiBvZiB0aGUgR3JhcGhRTCBzcGVjaWZpY2F0aW9uLlxuICovXG5cblxuZnVuY3Rpb24gYnVpbGRSZXNwb25zZShleGVDb250ZXh0LCBkYXRhKSB7XG4gIGlmIChpc1Byb21pc2UoZGF0YSkpIHtcbiAgICByZXR1cm4gZGF0YS50aGVuKGZ1bmN0aW9uIChyZXNvbHZlZCkge1xuICAgICAgcmV0dXJuIGJ1aWxkUmVzcG9uc2UoZXhlQ29udGV4dCwgcmVzb2x2ZWQpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGV4ZUNvbnRleHQuZXJyb3JzLmxlbmd0aCA9PT0gMCA/IHtcbiAgICBkYXRhOiBkYXRhXG4gIH0gOiB7XG4gICAgZXJyb3JzOiBleGVDb250ZXh0LmVycm9ycyxcbiAgICBkYXRhOiBkYXRhXG4gIH07XG59XG4vKipcbiAqIEVzc2VudGlhbCBhc3NlcnRpb25zIGJlZm9yZSBleGVjdXRpbmcgdG8gcHJvdmlkZSBkZXZlbG9wZXIgZmVlZGJhY2sgZm9yXG4gKiBpbXByb3BlciB1c2Ugb2YgdGhlIEdyYXBoUUwgbGlicmFyeS5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRWYWxpZEV4ZWN1dGlvbkFyZ3VtZW50cyhzY2hlbWEsIGRvY3VtZW50LCByYXdWYXJpYWJsZVZhbHVlcykge1xuICBkb2N1bWVudCB8fCBkZXZBc3NlcnQoMCwgJ011c3QgcHJvdmlkZSBkb2N1bWVudC4nKTsgLy8gSWYgdGhlIHNjaGVtYSB1c2VkIGZvciBleGVjdXRpb24gaXMgaW52YWxpZCwgdGhyb3cgYW4gZXJyb3IuXG5cbiAgYXNzZXJ0VmFsaWRTY2hlbWEoc2NoZW1hKTsgLy8gVmFyaWFibGVzLCBpZiBwcm92aWRlZCwgbXVzdCBiZSBhbiBvYmplY3QuXG5cbiAgcmF3VmFyaWFibGVWYWx1ZXMgPT0gbnVsbCB8fCBpc09iamVjdExpa2UocmF3VmFyaWFibGVWYWx1ZXMpIHx8IGRldkFzc2VydCgwLCAnVmFyaWFibGVzIG11c3QgYmUgcHJvdmlkZWQgYXMgYW4gT2JqZWN0IHdoZXJlIGVhY2ggcHJvcGVydHkgaXMgYSB2YXJpYWJsZSB2YWx1ZS4gUGVyaGFwcyBsb29rIHRvIHNlZSBpZiBhbiB1bnBhcnNlZCBKU09OIHN0cmluZyB3YXMgcHJvdmlkZWQuJyk7XG59XG4vKipcbiAqIENvbnN0cnVjdHMgYSBFeGVjdXRpb25Db250ZXh0IG9iamVjdCBmcm9tIHRoZSBhcmd1bWVudHMgcGFzc2VkIHRvXG4gKiBleGVjdXRlLCB3aGljaCB3ZSB3aWxsIHBhc3MgdGhyb3VnaG91dCB0aGUgb3RoZXIgZXhlY3V0aW9uIG1ldGhvZHMuXG4gKlxuICogVGhyb3dzIGEgR3JhcGhRTEVycm9yIGlmIGEgdmFsaWQgZXhlY3V0aW9uIGNvbnRleHQgY2Fubm90IGJlIGNyZWF0ZWQuXG4gKlxuICogQGludGVybmFsXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkRXhlY3V0aW9uQ29udGV4dChzY2hlbWEsIGRvY3VtZW50LCByb290VmFsdWUsIGNvbnRleHRWYWx1ZSwgcmF3VmFyaWFibGVWYWx1ZXMsIG9wZXJhdGlvbk5hbWUsIGZpZWxkUmVzb2x2ZXIsIHR5cGVSZXNvbHZlcikge1xuICB2YXIgX2RlZmluaXRpb24kbmFtZSwgX29wZXJhdGlvbiR2YXJpYWJsZURlO1xuXG4gIHZhciBvcGVyYXRpb247XG4gIHZhciBmcmFnbWVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gIGZvciAodmFyIF9pMiA9IDAsIF9kb2N1bWVudCRkZWZpbml0aW9uczIgPSBkb2N1bWVudC5kZWZpbml0aW9uczsgX2kyIDwgX2RvY3VtZW50JGRlZmluaXRpb25zMi5sZW5ndGg7IF9pMisrKSB7XG4gICAgdmFyIGRlZmluaXRpb24gPSBfZG9jdW1lbnQkZGVmaW5pdGlvbnMyW19pMl07XG5cbiAgICBzd2l0Y2ggKGRlZmluaXRpb24ua2luZCkge1xuICAgICAgY2FzZSBLaW5kLk9QRVJBVElPTl9ERUZJTklUSU9OOlxuICAgICAgICBpZiAob3BlcmF0aW9uTmFtZSA9PSBudWxsKSB7XG4gICAgICAgICAgaWYgKG9wZXJhdGlvbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gW25ldyBHcmFwaFFMRXJyb3IoJ011c3QgcHJvdmlkZSBvcGVyYXRpb24gbmFtZSBpZiBxdWVyeSBjb250YWlucyBtdWx0aXBsZSBvcGVyYXRpb25zLicpXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBvcGVyYXRpb24gPSBkZWZpbml0aW9uO1xuICAgICAgICB9IGVsc2UgaWYgKCgoX2RlZmluaXRpb24kbmFtZSA9IGRlZmluaXRpb24ubmFtZSkgPT09IG51bGwgfHwgX2RlZmluaXRpb24kbmFtZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2RlZmluaXRpb24kbmFtZS52YWx1ZSkgPT09IG9wZXJhdGlvbk5hbWUpIHtcbiAgICAgICAgICBvcGVyYXRpb24gPSBkZWZpbml0aW9uO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgS2luZC5GUkFHTUVOVF9ERUZJTklUSU9OOlxuICAgICAgICBmcmFnbWVudHNbZGVmaW5pdGlvbi5uYW1lLnZhbHVlXSA9IGRlZmluaXRpb247XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGlmICghb3BlcmF0aW9uKSB7XG4gICAgaWYgKG9wZXJhdGlvbk5hbWUgIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIFtuZXcgR3JhcGhRTEVycm9yKFwiVW5rbm93biBvcGVyYXRpb24gbmFtZWQgXFxcIlwiLmNvbmNhdChvcGVyYXRpb25OYW1lLCBcIlxcXCIuXCIpKV07XG4gICAgfVxuXG4gICAgcmV0dXJuIFtuZXcgR3JhcGhRTEVycm9yKCdNdXN0IHByb3ZpZGUgYW4gb3BlcmF0aW9uLicpXTtcbiAgfSAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAoU2VlOiAnaHR0cHM6Ly9naXRodWIuY29tL2dyYXBocWwvZ3JhcGhxbC1qcy9pc3N1ZXMvMjIwMycpXG5cblxuICB2YXIgdmFyaWFibGVEZWZpbml0aW9ucyA9IChfb3BlcmF0aW9uJHZhcmlhYmxlRGUgPSBvcGVyYXRpb24udmFyaWFibGVEZWZpbml0aW9ucykgIT09IG51bGwgJiYgX29wZXJhdGlvbiR2YXJpYWJsZURlICE9PSB2b2lkIDAgPyBfb3BlcmF0aW9uJHZhcmlhYmxlRGUgOiBbXTtcbiAgdmFyIGNvZXJjZWRWYXJpYWJsZVZhbHVlcyA9IGdldFZhcmlhYmxlVmFsdWVzKHNjaGVtYSwgdmFyaWFibGVEZWZpbml0aW9ucywgcmF3VmFyaWFibGVWYWx1ZXMgIT09IG51bGwgJiYgcmF3VmFyaWFibGVWYWx1ZXMgIT09IHZvaWQgMCA/IHJhd1ZhcmlhYmxlVmFsdWVzIDoge30sIHtcbiAgICBtYXhFcnJvcnM6IDUwXG4gIH0pO1xuXG4gIGlmIChjb2VyY2VkVmFyaWFibGVWYWx1ZXMuZXJyb3JzKSB7XG4gICAgcmV0dXJuIGNvZXJjZWRWYXJpYWJsZVZhbHVlcy5lcnJvcnM7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHNjaGVtYTogc2NoZW1hLFxuICAgIGZyYWdtZW50czogZnJhZ21lbnRzLFxuICAgIHJvb3RWYWx1ZTogcm9vdFZhbHVlLFxuICAgIGNvbnRleHRWYWx1ZTogY29udGV4dFZhbHVlLFxuICAgIG9wZXJhdGlvbjogb3BlcmF0aW9uLFxuICAgIHZhcmlhYmxlVmFsdWVzOiBjb2VyY2VkVmFyaWFibGVWYWx1ZXMuY29lcmNlZCxcbiAgICBmaWVsZFJlc29sdmVyOiBmaWVsZFJlc29sdmVyICE9PSBudWxsICYmIGZpZWxkUmVzb2x2ZXIgIT09IHZvaWQgMCA/IGZpZWxkUmVzb2x2ZXIgOiBkZWZhdWx0RmllbGRSZXNvbHZlcixcbiAgICB0eXBlUmVzb2x2ZXI6IHR5cGVSZXNvbHZlciAhPT0gbnVsbCAmJiB0eXBlUmVzb2x2ZXIgIT09IHZvaWQgMCA/IHR5cGVSZXNvbHZlciA6IGRlZmF1bHRUeXBlUmVzb2x2ZXIsXG4gICAgZXJyb3JzOiBbXVxuICB9O1xufVxuLyoqXG4gKiBJbXBsZW1lbnRzIHRoZSBcIkV2YWx1YXRpbmcgb3BlcmF0aW9uc1wiIHNlY3Rpb24gb2YgdGhlIHNwZWMuXG4gKi9cblxuZnVuY3Rpb24gZXhlY3V0ZU9wZXJhdGlvbihleGVDb250ZXh0LCBvcGVyYXRpb24sIHJvb3RWYWx1ZSkge1xuICB2YXIgdHlwZSA9IGdldE9wZXJhdGlvblJvb3RUeXBlKGV4ZUNvbnRleHQuc2NoZW1hLCBvcGVyYXRpb24pO1xuICB2YXIgZmllbGRzID0gY29sbGVjdEZpZWxkcyhleGVDb250ZXh0LCB0eXBlLCBvcGVyYXRpb24uc2VsZWN0aW9uU2V0LCBPYmplY3QuY3JlYXRlKG51bGwpLCBPYmplY3QuY3JlYXRlKG51bGwpKTtcbiAgdmFyIHBhdGggPSB1bmRlZmluZWQ7IC8vIEVycm9ycyBmcm9tIHN1Yi1maWVsZHMgb2YgYSBOb25OdWxsIHR5cGUgbWF5IHByb3BhZ2F0ZSB0byB0aGUgdG9wIGxldmVsLFxuICAvLyBhdCB3aGljaCBwb2ludCB3ZSBzdGlsbCBsb2cgdGhlIGVycm9yIGFuZCBudWxsIHRoZSBwYXJlbnQgZmllbGQsIHdoaWNoXG4gIC8vIGluIHRoaXMgY2FzZSBpcyB0aGUgZW50aXJlIHJlc3BvbnNlLlxuXG4gIHRyeSB7XG4gICAgdmFyIHJlc3VsdCA9IG9wZXJhdGlvbi5vcGVyYXRpb24gPT09ICdtdXRhdGlvbicgPyBleGVjdXRlRmllbGRzU2VyaWFsbHkoZXhlQ29udGV4dCwgdHlwZSwgcm9vdFZhbHVlLCBwYXRoLCBmaWVsZHMpIDogZXhlY3V0ZUZpZWxkcyhleGVDb250ZXh0LCB0eXBlLCByb290VmFsdWUsIHBhdGgsIGZpZWxkcyk7XG5cbiAgICBpZiAoaXNQcm9taXNlKHJlc3VsdCkpIHtcbiAgICAgIHJldHVybiByZXN1bHQudGhlbih1bmRlZmluZWQsIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICBleGVDb250ZXh0LmVycm9ycy5wdXNoKGVycm9yKTtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShudWxsKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZXhlQ29udGV4dC5lcnJvcnMucHVzaChlcnJvcik7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cbi8qKlxuICogSW1wbGVtZW50cyB0aGUgXCJFdmFsdWF0aW5nIHNlbGVjdGlvbiBzZXRzXCIgc2VjdGlvbiBvZiB0aGUgc3BlY1xuICogZm9yIFwid3JpdGVcIiBtb2RlLlxuICovXG5cblxuZnVuY3Rpb24gZXhlY3V0ZUZpZWxkc1NlcmlhbGx5KGV4ZUNvbnRleHQsIHBhcmVudFR5cGUsIHNvdXJjZVZhbHVlLCBwYXRoLCBmaWVsZHMpIHtcbiAgcmV0dXJuIHByb21pc2VSZWR1Y2UoT2JqZWN0LmtleXMoZmllbGRzKSwgZnVuY3Rpb24gKHJlc3VsdHMsIHJlc3BvbnNlTmFtZSkge1xuICAgIHZhciBmaWVsZE5vZGVzID0gZmllbGRzW3Jlc3BvbnNlTmFtZV07XG4gICAgdmFyIGZpZWxkUGF0aCA9IGFkZFBhdGgocGF0aCwgcmVzcG9uc2VOYW1lLCBwYXJlbnRUeXBlLm5hbWUpO1xuICAgIHZhciByZXN1bHQgPSByZXNvbHZlRmllbGQoZXhlQ29udGV4dCwgcGFyZW50VHlwZSwgc291cmNlVmFsdWUsIGZpZWxkTm9kZXMsIGZpZWxkUGF0aCk7XG5cbiAgICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiByZXN1bHRzO1xuICAgIH1cblxuICAgIGlmIChpc1Byb21pc2UocmVzdWx0KSkge1xuICAgICAgcmV0dXJuIHJlc3VsdC50aGVuKGZ1bmN0aW9uIChyZXNvbHZlZFJlc3VsdCkge1xuICAgICAgICByZXN1bHRzW3Jlc3BvbnNlTmFtZV0gPSByZXNvbHZlZFJlc3VsdDtcbiAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXN1bHRzW3Jlc3BvbnNlTmFtZV0gPSByZXN1bHQ7XG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH0sIE9iamVjdC5jcmVhdGUobnVsbCkpO1xufVxuLyoqXG4gKiBJbXBsZW1lbnRzIHRoZSBcIkV2YWx1YXRpbmcgc2VsZWN0aW9uIHNldHNcIiBzZWN0aW9uIG9mIHRoZSBzcGVjXG4gKiBmb3IgXCJyZWFkXCIgbW9kZS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGV4ZWN1dGVGaWVsZHMoZXhlQ29udGV4dCwgcGFyZW50VHlwZSwgc291cmNlVmFsdWUsIHBhdGgsIGZpZWxkcykge1xuICB2YXIgcmVzdWx0cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHZhciBjb250YWluc1Byb21pc2UgPSBmYWxzZTtcblxuICBmb3IgKHZhciBfaTQgPSAwLCBfT2JqZWN0JGtleXMyID0gT2JqZWN0LmtleXMoZmllbGRzKTsgX2k0IDwgX09iamVjdCRrZXlzMi5sZW5ndGg7IF9pNCsrKSB7XG4gICAgdmFyIHJlc3BvbnNlTmFtZSA9IF9PYmplY3Qka2V5czJbX2k0XTtcbiAgICB2YXIgZmllbGROb2RlcyA9IGZpZWxkc1tyZXNwb25zZU5hbWVdO1xuICAgIHZhciBmaWVsZFBhdGggPSBhZGRQYXRoKHBhdGgsIHJlc3BvbnNlTmFtZSwgcGFyZW50VHlwZS5uYW1lKTtcbiAgICB2YXIgcmVzdWx0ID0gcmVzb2x2ZUZpZWxkKGV4ZUNvbnRleHQsIHBhcmVudFR5cGUsIHNvdXJjZVZhbHVlLCBmaWVsZE5vZGVzLCBmaWVsZFBhdGgpO1xuXG4gICAgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXN1bHRzW3Jlc3BvbnNlTmFtZV0gPSByZXN1bHQ7XG5cbiAgICAgIGlmIChpc1Byb21pc2UocmVzdWx0KSkge1xuICAgICAgICBjb250YWluc1Byb21pc2UgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfSAvLyBJZiB0aGVyZSBhcmUgbm8gcHJvbWlzZXMsIHdlIGNhbiBqdXN0IHJldHVybiB0aGUgb2JqZWN0XG5cblxuICBpZiAoIWNvbnRhaW5zUHJvbWlzZSkge1xuICAgIHJldHVybiByZXN1bHRzO1xuICB9IC8vIE90aGVyd2lzZSwgcmVzdWx0cyBpcyBhIG1hcCBmcm9tIGZpZWxkIG5hbWUgdG8gdGhlIHJlc3VsdCBvZiByZXNvbHZpbmcgdGhhdFxuICAvLyBmaWVsZCwgd2hpY2ggaXMgcG9zc2libHkgYSBwcm9taXNlLiBSZXR1cm4gYSBwcm9taXNlIHRoYXQgd2lsbCByZXR1cm4gdGhpc1xuICAvLyBzYW1lIG1hcCwgYnV0IHdpdGggYW55IHByb21pc2VzIHJlcGxhY2VkIHdpdGggdGhlIHZhbHVlcyB0aGV5IHJlc29sdmVkIHRvLlxuXG5cbiAgcmV0dXJuIHByb21pc2VGb3JPYmplY3QocmVzdWx0cyk7XG59XG4vKipcbiAqIEdpdmVuIGEgc2VsZWN0aW9uU2V0LCBhZGRzIGFsbCBvZiB0aGUgZmllbGRzIGluIHRoYXQgc2VsZWN0aW9uIHRvXG4gKiB0aGUgcGFzc2VkIGluIG1hcCBvZiBmaWVsZHMsIGFuZCByZXR1cm5zIGl0IGF0IHRoZSBlbmQuXG4gKlxuICogQ29sbGVjdEZpZWxkcyByZXF1aXJlcyB0aGUgXCJydW50aW1lIHR5cGVcIiBvZiBhbiBvYmplY3QuIEZvciBhIGZpZWxkIHdoaWNoXG4gKiByZXR1cm5zIGFuIEludGVyZmFjZSBvciBVbmlvbiB0eXBlLCB0aGUgXCJydW50aW1lIHR5cGVcIiB3aWxsIGJlIHRoZSBhY3R1YWxcbiAqIE9iamVjdCB0eXBlIHJldHVybmVkIGJ5IHRoYXQgZmllbGQuXG4gKlxuICogQGludGVybmFsXG4gKi9cblxuXG5leHBvcnQgZnVuY3Rpb24gY29sbGVjdEZpZWxkcyhleGVDb250ZXh0LCBydW50aW1lVHlwZSwgc2VsZWN0aW9uU2V0LCBmaWVsZHMsIHZpc2l0ZWRGcmFnbWVudE5hbWVzKSB7XG4gIGZvciAodmFyIF9pNiA9IDAsIF9zZWxlY3Rpb25TZXQkc2VsZWN0aTIgPSBzZWxlY3Rpb25TZXQuc2VsZWN0aW9uczsgX2k2IDwgX3NlbGVjdGlvblNldCRzZWxlY3RpMi5sZW5ndGg7IF9pNisrKSB7XG4gICAgdmFyIHNlbGVjdGlvbiA9IF9zZWxlY3Rpb25TZXQkc2VsZWN0aTJbX2k2XTtcblxuICAgIHN3aXRjaCAoc2VsZWN0aW9uLmtpbmQpIHtcbiAgICAgIGNhc2UgS2luZC5GSUVMRDpcbiAgICAgICAge1xuICAgICAgICAgIGlmICghc2hvdWxkSW5jbHVkZU5vZGUoZXhlQ29udGV4dCwgc2VsZWN0aW9uKSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIG5hbWUgPSBnZXRGaWVsZEVudHJ5S2V5KHNlbGVjdGlvbik7XG5cbiAgICAgICAgICBpZiAoIWZpZWxkc1tuYW1lXSkge1xuICAgICAgICAgICAgZmllbGRzW25hbWVdID0gW107XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZmllbGRzW25hbWVdLnB1c2goc2VsZWN0aW9uKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICBjYXNlIEtpbmQuSU5MSU5FX0ZSQUdNRU5UOlxuICAgICAgICB7XG4gICAgICAgICAgaWYgKCFzaG91bGRJbmNsdWRlTm9kZShleGVDb250ZXh0LCBzZWxlY3Rpb24pIHx8ICFkb2VzRnJhZ21lbnRDb25kaXRpb25NYXRjaChleGVDb250ZXh0LCBzZWxlY3Rpb24sIHJ1bnRpbWVUeXBlKSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29sbGVjdEZpZWxkcyhleGVDb250ZXh0LCBydW50aW1lVHlwZSwgc2VsZWN0aW9uLnNlbGVjdGlvblNldCwgZmllbGRzLCB2aXNpdGVkRnJhZ21lbnROYW1lcyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgY2FzZSBLaW5kLkZSQUdNRU5UX1NQUkVBRDpcbiAgICAgICAge1xuICAgICAgICAgIHZhciBmcmFnTmFtZSA9IHNlbGVjdGlvbi5uYW1lLnZhbHVlO1xuXG4gICAgICAgICAgaWYgKHZpc2l0ZWRGcmFnbWVudE5hbWVzW2ZyYWdOYW1lXSB8fCAhc2hvdWxkSW5jbHVkZU5vZGUoZXhlQ29udGV4dCwgc2VsZWN0aW9uKSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmlzaXRlZEZyYWdtZW50TmFtZXNbZnJhZ05hbWVdID0gdHJ1ZTtcbiAgICAgICAgICB2YXIgZnJhZ21lbnQgPSBleGVDb250ZXh0LmZyYWdtZW50c1tmcmFnTmFtZV07XG5cbiAgICAgICAgICBpZiAoIWZyYWdtZW50IHx8ICFkb2VzRnJhZ21lbnRDb25kaXRpb25NYXRjaChleGVDb250ZXh0LCBmcmFnbWVudCwgcnVudGltZVR5cGUpKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb2xsZWN0RmllbGRzKGV4ZUNvbnRleHQsIHJ1bnRpbWVUeXBlLCBmcmFnbWVudC5zZWxlY3Rpb25TZXQsIGZpZWxkcywgdmlzaXRlZEZyYWdtZW50TmFtZXMpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZpZWxkcztcbn1cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiBhIGZpZWxkIHNob3VsZCBiZSBpbmNsdWRlZCBiYXNlZCBvbiB0aGUgQGluY2x1ZGUgYW5kIEBza2lwXG4gKiBkaXJlY3RpdmVzLCB3aGVyZSBAc2tpcCBoYXMgaGlnaGVyIHByZWNlZGVuY2UgdGhhbiBAaW5jbHVkZS5cbiAqL1xuXG5mdW5jdGlvbiBzaG91bGRJbmNsdWRlTm9kZShleGVDb250ZXh0LCBub2RlKSB7XG4gIHZhciBza2lwID0gZ2V0RGlyZWN0aXZlVmFsdWVzKEdyYXBoUUxTa2lwRGlyZWN0aXZlLCBub2RlLCBleGVDb250ZXh0LnZhcmlhYmxlVmFsdWVzKTtcblxuICBpZiAoKHNraXAgPT09IG51bGwgfHwgc2tpcCA9PT0gdm9pZCAwID8gdm9pZCAwIDogc2tpcC5pZikgPT09IHRydWUpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgaW5jbHVkZSA9IGdldERpcmVjdGl2ZVZhbHVlcyhHcmFwaFFMSW5jbHVkZURpcmVjdGl2ZSwgbm9kZSwgZXhlQ29udGV4dC52YXJpYWJsZVZhbHVlcyk7XG5cbiAgaWYgKChpbmNsdWRlID09PSBudWxsIHx8IGluY2x1ZGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGluY2x1ZGUuaWYpID09PSBmYWxzZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIGEgZnJhZ21lbnQgaXMgYXBwbGljYWJsZSB0byB0aGUgZ2l2ZW4gdHlwZS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGRvZXNGcmFnbWVudENvbmRpdGlvbk1hdGNoKGV4ZUNvbnRleHQsIGZyYWdtZW50LCB0eXBlKSB7XG4gIHZhciB0eXBlQ29uZGl0aW9uTm9kZSA9IGZyYWdtZW50LnR5cGVDb25kaXRpb247XG5cbiAgaWYgKCF0eXBlQ29uZGl0aW9uTm9kZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgdmFyIGNvbmRpdGlvbmFsVHlwZSA9IHR5cGVGcm9tQVNUKGV4ZUNvbnRleHQuc2NoZW1hLCB0eXBlQ29uZGl0aW9uTm9kZSk7XG5cbiAgaWYgKGNvbmRpdGlvbmFsVHlwZSA9PT0gdHlwZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKGlzQWJzdHJhY3RUeXBlKGNvbmRpdGlvbmFsVHlwZSkpIHtcbiAgICByZXR1cm4gZXhlQ29udGV4dC5zY2hlbWEuaXNTdWJUeXBlKGNvbmRpdGlvbmFsVHlwZSwgdHlwZSk7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG4vKipcbiAqIEltcGxlbWVudHMgdGhlIGxvZ2ljIHRvIGNvbXB1dGUgdGhlIGtleSBvZiBhIGdpdmVuIGZpZWxkJ3MgZW50cnlcbiAqL1xuXG5cbmZ1bmN0aW9uIGdldEZpZWxkRW50cnlLZXkobm9kZSkge1xuICByZXR1cm4gbm9kZS5hbGlhcyA/IG5vZGUuYWxpYXMudmFsdWUgOiBub2RlLm5hbWUudmFsdWU7XG59XG4vKipcbiAqIFJlc29sdmVzIHRoZSBmaWVsZCBvbiB0aGUgZ2l2ZW4gc291cmNlIG9iamVjdC4gSW4gcGFydGljdWxhciwgdGhpc1xuICogZmlndXJlcyBvdXQgdGhlIHZhbHVlIHRoYXQgdGhlIGZpZWxkIHJldHVybnMgYnkgY2FsbGluZyBpdHMgcmVzb2x2ZSBmdW5jdGlvbixcbiAqIHRoZW4gY2FsbHMgY29tcGxldGVWYWx1ZSB0byBjb21wbGV0ZSBwcm9taXNlcywgc2VyaWFsaXplIHNjYWxhcnMsIG9yIGV4ZWN1dGVcbiAqIHRoZSBzdWItc2VsZWN0aW9uLXNldCBmb3Igb2JqZWN0cy5cbiAqL1xuXG5cbmZ1bmN0aW9uIHJlc29sdmVGaWVsZChleGVDb250ZXh0LCBwYXJlbnRUeXBlLCBzb3VyY2UsIGZpZWxkTm9kZXMsIHBhdGgpIHtcbiAgdmFyIF9maWVsZERlZiRyZXNvbHZlO1xuXG4gIHZhciBmaWVsZE5vZGUgPSBmaWVsZE5vZGVzWzBdO1xuICB2YXIgZmllbGROYW1lID0gZmllbGROb2RlLm5hbWUudmFsdWU7XG4gIHZhciBmaWVsZERlZiA9IGdldEZpZWxkRGVmKGV4ZUNvbnRleHQuc2NoZW1hLCBwYXJlbnRUeXBlLCBmaWVsZE5hbWUpO1xuXG4gIGlmICghZmllbGREZWYpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgcmV0dXJuVHlwZSA9IGZpZWxkRGVmLnR5cGU7XG4gIHZhciByZXNvbHZlRm4gPSAoX2ZpZWxkRGVmJHJlc29sdmUgPSBmaWVsZERlZi5yZXNvbHZlKSAhPT0gbnVsbCAmJiBfZmllbGREZWYkcmVzb2x2ZSAhPT0gdm9pZCAwID8gX2ZpZWxkRGVmJHJlc29sdmUgOiBleGVDb250ZXh0LmZpZWxkUmVzb2x2ZXI7XG4gIHZhciBpbmZvID0gYnVpbGRSZXNvbHZlSW5mbyhleGVDb250ZXh0LCBmaWVsZERlZiwgZmllbGROb2RlcywgcGFyZW50VHlwZSwgcGF0aCk7IC8vIEdldCB0aGUgcmVzb2x2ZSBmdW5jdGlvbiwgcmVnYXJkbGVzcyBvZiBpZiBpdHMgcmVzdWx0IGlzIG5vcm1hbCBvciBhYnJ1cHQgKGVycm9yKS5cblxuICB0cnkge1xuICAgIC8vIEJ1aWxkIGEgSlMgb2JqZWN0IG9mIGFyZ3VtZW50cyBmcm9tIHRoZSBmaWVsZC5hcmd1bWVudHMgQVNULCB1c2luZyB0aGVcbiAgICAvLyB2YXJpYWJsZXMgc2NvcGUgdG8gZnVsZmlsbCBhbnkgdmFyaWFibGUgcmVmZXJlbmNlcy5cbiAgICAvLyBUT0RPOiBmaW5kIGEgd2F5IHRvIG1lbW9pemUsIGluIGNhc2UgdGhpcyBmaWVsZCBpcyB3aXRoaW4gYSBMaXN0IHR5cGUuXG4gICAgdmFyIGFyZ3MgPSBnZXRBcmd1bWVudFZhbHVlcyhmaWVsZERlZiwgZmllbGROb2Rlc1swXSwgZXhlQ29udGV4dC52YXJpYWJsZVZhbHVlcyk7IC8vIFRoZSByZXNvbHZlIGZ1bmN0aW9uJ3Mgb3B0aW9uYWwgdGhpcmQgYXJndW1lbnQgaXMgYSBjb250ZXh0IHZhbHVlIHRoYXRcbiAgICAvLyBpcyBwcm92aWRlZCB0byBldmVyeSByZXNvbHZlIGZ1bmN0aW9uIHdpdGhpbiBhbiBleGVjdXRpb24uIEl0IGlzIGNvbW1vbmx5XG4gICAgLy8gdXNlZCB0byByZXByZXNlbnQgYW4gYXV0aGVudGljYXRlZCB1c2VyLCBvciByZXF1ZXN0LXNwZWNpZmljIGNhY2hlcy5cblxuICAgIHZhciBfY29udGV4dFZhbHVlID0gZXhlQ29udGV4dC5jb250ZXh0VmFsdWU7XG4gICAgdmFyIHJlc3VsdCA9IHJlc29sdmVGbihzb3VyY2UsIGFyZ3MsIF9jb250ZXh0VmFsdWUsIGluZm8pO1xuICAgIHZhciBjb21wbGV0ZWQ7XG5cbiAgICBpZiAoaXNQcm9taXNlKHJlc3VsdCkpIHtcbiAgICAgIGNvbXBsZXRlZCA9IHJlc3VsdC50aGVuKGZ1bmN0aW9uIChyZXNvbHZlZCkge1xuICAgICAgICByZXR1cm4gY29tcGxldGVWYWx1ZShleGVDb250ZXh0LCByZXR1cm5UeXBlLCBmaWVsZE5vZGVzLCBpbmZvLCBwYXRoLCByZXNvbHZlZCk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29tcGxldGVkID0gY29tcGxldGVWYWx1ZShleGVDb250ZXh0LCByZXR1cm5UeXBlLCBmaWVsZE5vZGVzLCBpbmZvLCBwYXRoLCByZXN1bHQpO1xuICAgIH1cblxuICAgIGlmIChpc1Byb21pc2UoY29tcGxldGVkKSkge1xuICAgICAgLy8gTm90ZTogd2UgZG9uJ3QgcmVseSBvbiBhIGBjYXRjaGAgbWV0aG9kLCBidXQgd2UgZG8gZXhwZWN0IFwidGhlbmFibGVcIlxuICAgICAgLy8gdG8gdGFrZSBhIHNlY29uZCBjYWxsYmFjayBmb3IgdGhlIGVycm9yIGNhc2UuXG4gICAgICByZXR1cm4gY29tcGxldGVkLnRoZW4odW5kZWZpbmVkLCBmdW5jdGlvbiAocmF3RXJyb3IpIHtcbiAgICAgICAgdmFyIGVycm9yID0gbG9jYXRlZEVycm9yKHJhd0Vycm9yLCBmaWVsZE5vZGVzLCBwYXRoVG9BcnJheShwYXRoKSk7XG4gICAgICAgIHJldHVybiBoYW5kbGVGaWVsZEVycm9yKGVycm9yLCByZXR1cm5UeXBlLCBleGVDb250ZXh0KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBjb21wbGV0ZWQ7XG4gIH0gY2F0Y2ggKHJhd0Vycm9yKSB7XG4gICAgdmFyIGVycm9yID0gbG9jYXRlZEVycm9yKHJhd0Vycm9yLCBmaWVsZE5vZGVzLCBwYXRoVG9BcnJheShwYXRoKSk7XG4gICAgcmV0dXJuIGhhbmRsZUZpZWxkRXJyb3IoZXJyb3IsIHJldHVyblR5cGUsIGV4ZUNvbnRleHQpO1xuICB9XG59XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5cblxuZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkUmVzb2x2ZUluZm8oZXhlQ29udGV4dCwgZmllbGREZWYsIGZpZWxkTm9kZXMsIHBhcmVudFR5cGUsIHBhdGgpIHtcbiAgLy8gVGhlIHJlc29sdmUgZnVuY3Rpb24ncyBvcHRpb25hbCBmb3VydGggYXJndW1lbnQgaXMgYSBjb2xsZWN0aW9uIG9mXG4gIC8vIGluZm9ybWF0aW9uIGFib3V0IHRoZSBjdXJyZW50IGV4ZWN1dGlvbiBzdGF0ZS5cbiAgcmV0dXJuIHtcbiAgICBmaWVsZE5hbWU6IGZpZWxkRGVmLm5hbWUsXG4gICAgZmllbGROb2RlczogZmllbGROb2RlcyxcbiAgICByZXR1cm5UeXBlOiBmaWVsZERlZi50eXBlLFxuICAgIHBhcmVudFR5cGU6IHBhcmVudFR5cGUsXG4gICAgcGF0aDogcGF0aCxcbiAgICBzY2hlbWE6IGV4ZUNvbnRleHQuc2NoZW1hLFxuICAgIGZyYWdtZW50czogZXhlQ29udGV4dC5mcmFnbWVudHMsXG4gICAgcm9vdFZhbHVlOiBleGVDb250ZXh0LnJvb3RWYWx1ZSxcbiAgICBvcGVyYXRpb246IGV4ZUNvbnRleHQub3BlcmF0aW9uLFxuICAgIHZhcmlhYmxlVmFsdWVzOiBleGVDb250ZXh0LnZhcmlhYmxlVmFsdWVzXG4gIH07XG59XG5cbmZ1bmN0aW9uIGhhbmRsZUZpZWxkRXJyb3IoZXJyb3IsIHJldHVyblR5cGUsIGV4ZUNvbnRleHQpIHtcbiAgLy8gSWYgdGhlIGZpZWxkIHR5cGUgaXMgbm9uLW51bGxhYmxlLCB0aGVuIGl0IGlzIHJlc29sdmVkIHdpdGhvdXQgYW55XG4gIC8vIHByb3RlY3Rpb24gZnJvbSBlcnJvcnMsIGhvd2V2ZXIgaXQgc3RpbGwgcHJvcGVybHkgbG9jYXRlcyB0aGUgZXJyb3IuXG4gIGlmIChpc05vbk51bGxUeXBlKHJldHVyblR5cGUpKSB7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH0gLy8gT3RoZXJ3aXNlLCBlcnJvciBwcm90ZWN0aW9uIGlzIGFwcGxpZWQsIGxvZ2dpbmcgdGhlIGVycm9yIGFuZCByZXNvbHZpbmdcbiAgLy8gYSBudWxsIHZhbHVlIGZvciB0aGlzIGZpZWxkIGlmIG9uZSBpcyBlbmNvdW50ZXJlZC5cblxuXG4gIGV4ZUNvbnRleHQuZXJyb3JzLnB1c2goZXJyb3IpO1xuICByZXR1cm4gbnVsbDtcbn1cbi8qKlxuICogSW1wbGVtZW50cyB0aGUgaW5zdHJ1Y3Rpb25zIGZvciBjb21wbGV0ZVZhbHVlIGFzIGRlZmluZWQgaW4gdGhlXG4gKiBcIkZpZWxkIGVudHJpZXNcIiBzZWN0aW9uIG9mIHRoZSBzcGVjLlxuICpcbiAqIElmIHRoZSBmaWVsZCB0eXBlIGlzIE5vbi1OdWxsLCB0aGVuIHRoaXMgcmVjdXJzaXZlbHkgY29tcGxldGVzIHRoZSB2YWx1ZVxuICogZm9yIHRoZSBpbm5lciB0eXBlLiBJdCB0aHJvd3MgYSBmaWVsZCBlcnJvciBpZiB0aGF0IGNvbXBsZXRpb24gcmV0dXJucyBudWxsLFxuICogYXMgcGVyIHRoZSBcIk51bGxhYmlsaXR5XCIgc2VjdGlvbiBvZiB0aGUgc3BlYy5cbiAqXG4gKiBJZiB0aGUgZmllbGQgdHlwZSBpcyBhIExpc3QsIHRoZW4gdGhpcyByZWN1cnNpdmVseSBjb21wbGV0ZXMgdGhlIHZhbHVlXG4gKiBmb3IgdGhlIGlubmVyIHR5cGUgb24gZWFjaCBpdGVtIGluIHRoZSBsaXN0LlxuICpcbiAqIElmIHRoZSBmaWVsZCB0eXBlIGlzIGEgU2NhbGFyIG9yIEVudW0sIGVuc3VyZXMgdGhlIGNvbXBsZXRlZCB2YWx1ZSBpcyBhIGxlZ2FsXG4gKiB2YWx1ZSBvZiB0aGUgdHlwZSBieSBjYWxsaW5nIHRoZSBgc2VyaWFsaXplYCBtZXRob2Qgb2YgR3JhcGhRTCB0eXBlXG4gKiBkZWZpbml0aW9uLlxuICpcbiAqIElmIHRoZSBmaWVsZCBpcyBhbiBhYnN0cmFjdCB0eXBlLCBkZXRlcm1pbmUgdGhlIHJ1bnRpbWUgdHlwZSBvZiB0aGUgdmFsdWVcbiAqIGFuZCB0aGVuIGNvbXBsZXRlIGJhc2VkIG9uIHRoYXQgdHlwZVxuICpcbiAqIE90aGVyd2lzZSwgdGhlIGZpZWxkIHR5cGUgZXhwZWN0cyBhIHN1Yi1zZWxlY3Rpb24gc2V0LCBhbmQgd2lsbCBjb21wbGV0ZSB0aGVcbiAqIHZhbHVlIGJ5IGV2YWx1YXRpbmcgYWxsIHN1Yi1zZWxlY3Rpb25zLlxuICovXG5cblxuZnVuY3Rpb24gY29tcGxldGVWYWx1ZShleGVDb250ZXh0LCByZXR1cm5UeXBlLCBmaWVsZE5vZGVzLCBpbmZvLCBwYXRoLCByZXN1bHQpIHtcbiAgLy8gSWYgcmVzdWx0IGlzIGFuIEVycm9yLCB0aHJvdyBhIGxvY2F0ZWQgZXJyb3IuXG4gIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIHRocm93IHJlc3VsdDtcbiAgfSAvLyBJZiBmaWVsZCB0eXBlIGlzIE5vbk51bGwsIGNvbXBsZXRlIGZvciBpbm5lciB0eXBlLCBhbmQgdGhyb3cgZmllbGQgZXJyb3JcbiAgLy8gaWYgcmVzdWx0IGlzIG51bGwuXG5cblxuICBpZiAoaXNOb25OdWxsVHlwZShyZXR1cm5UeXBlKSkge1xuICAgIHZhciBjb21wbGV0ZWQgPSBjb21wbGV0ZVZhbHVlKGV4ZUNvbnRleHQsIHJldHVyblR5cGUub2ZUeXBlLCBmaWVsZE5vZGVzLCBpbmZvLCBwYXRoLCByZXN1bHQpO1xuXG4gICAgaWYgKGNvbXBsZXRlZCA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IHJldHVybiBudWxsIGZvciBub24tbnVsbGFibGUgZmllbGQgXCIuY29uY2F0KGluZm8ucGFyZW50VHlwZS5uYW1lLCBcIi5cIikuY29uY2F0KGluZm8uZmllbGROYW1lLCBcIi5cIikpO1xuICAgIH1cblxuICAgIHJldHVybiBjb21wbGV0ZWQ7XG4gIH0gLy8gSWYgcmVzdWx0IHZhbHVlIGlzIG51bGwgb3IgdW5kZWZpbmVkIHRoZW4gcmV0dXJuIG51bGwuXG5cblxuICBpZiAocmVzdWx0ID09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSAvLyBJZiBmaWVsZCB0eXBlIGlzIExpc3QsIGNvbXBsZXRlIGVhY2ggaXRlbSBpbiB0aGUgbGlzdCB3aXRoIHRoZSBpbm5lciB0eXBlXG5cblxuICBpZiAoaXNMaXN0VHlwZShyZXR1cm5UeXBlKSkge1xuICAgIHJldHVybiBjb21wbGV0ZUxpc3RWYWx1ZShleGVDb250ZXh0LCByZXR1cm5UeXBlLCBmaWVsZE5vZGVzLCBpbmZvLCBwYXRoLCByZXN1bHQpO1xuICB9IC8vIElmIGZpZWxkIHR5cGUgaXMgYSBsZWFmIHR5cGUsIFNjYWxhciBvciBFbnVtLCBzZXJpYWxpemUgdG8gYSB2YWxpZCB2YWx1ZSxcbiAgLy8gcmV0dXJuaW5nIG51bGwgaWYgc2VyaWFsaXphdGlvbiBpcyBub3QgcG9zc2libGUuXG5cblxuICBpZiAoaXNMZWFmVHlwZShyZXR1cm5UeXBlKSkge1xuICAgIHJldHVybiBjb21wbGV0ZUxlYWZWYWx1ZShyZXR1cm5UeXBlLCByZXN1bHQpO1xuICB9IC8vIElmIGZpZWxkIHR5cGUgaXMgYW4gYWJzdHJhY3QgdHlwZSwgSW50ZXJmYWNlIG9yIFVuaW9uLCBkZXRlcm1pbmUgdGhlXG4gIC8vIHJ1bnRpbWUgT2JqZWN0IHR5cGUgYW5kIGNvbXBsZXRlIGZvciB0aGF0IHR5cGUuXG5cblxuICBpZiAoaXNBYnN0cmFjdFR5cGUocmV0dXJuVHlwZSkpIHtcbiAgICByZXR1cm4gY29tcGxldGVBYnN0cmFjdFZhbHVlKGV4ZUNvbnRleHQsIHJldHVyblR5cGUsIGZpZWxkTm9kZXMsIGluZm8sIHBhdGgsIHJlc3VsdCk7XG4gIH0gLy8gSWYgZmllbGQgdHlwZSBpcyBPYmplY3QsIGV4ZWN1dGUgYW5kIGNvbXBsZXRlIGFsbCBzdWItc2VsZWN0aW9ucy5cbiAgLy8gaXN0YW5idWwgaWdub3JlIGVsc2UgKFNlZTogJ2h0dHBzOi8vZ2l0aHViLmNvbS9ncmFwaHFsL2dyYXBocWwtanMvaXNzdWVzLzI2MTgnKVxuXG5cbiAgaWYgKGlzT2JqZWN0VHlwZShyZXR1cm5UeXBlKSkge1xuICAgIHJldHVybiBjb21wbGV0ZU9iamVjdFZhbHVlKGV4ZUNvbnRleHQsIHJldHVyblR5cGUsIGZpZWxkTm9kZXMsIGluZm8sIHBhdGgsIHJlc3VsdCk7XG4gIH0gLy8gaXN0YW5idWwgaWdub3JlIG5leHQgKE5vdCByZWFjaGFibGUuIEFsbCBwb3NzaWJsZSBvdXRwdXQgdHlwZXMgaGF2ZSBiZWVuIGNvbnNpZGVyZWQpXG5cblxuICBmYWxzZSB8fCBpbnZhcmlhbnQoMCwgJ0Nhbm5vdCBjb21wbGV0ZSB2YWx1ZSBvZiB1bmV4cGVjdGVkIG91dHB1dCB0eXBlOiAnICsgaW5zcGVjdChyZXR1cm5UeXBlKSk7XG59XG4vKipcbiAqIENvbXBsZXRlIGEgbGlzdCB2YWx1ZSBieSBjb21wbGV0aW5nIGVhY2ggaXRlbSBpbiB0aGUgbGlzdCB3aXRoIHRoZVxuICogaW5uZXIgdHlwZVxuICovXG5cblxuZnVuY3Rpb24gY29tcGxldGVMaXN0VmFsdWUoZXhlQ29udGV4dCwgcmV0dXJuVHlwZSwgZmllbGROb2RlcywgaW5mbywgcGF0aCwgcmVzdWx0KSB7XG4gIC8vIFRoaXMgaXMgc3BlY2lmaWVkIGFzIGEgc2ltcGxlIG1hcCwgaG93ZXZlciB3ZSdyZSBvcHRpbWl6aW5nIHRoZSBwYXRoXG4gIC8vIHdoZXJlIHRoZSBsaXN0IGNvbnRhaW5zIG5vIFByb21pc2VzIGJ5IGF2b2lkaW5nIGNyZWF0aW5nIGFub3RoZXIgUHJvbWlzZS5cbiAgdmFyIGl0ZW1UeXBlID0gcmV0dXJuVHlwZS5vZlR5cGU7XG4gIHZhciBjb250YWluc1Byb21pc2UgPSBmYWxzZTtcbiAgdmFyIGNvbXBsZXRlZFJlc3VsdHMgPSBzYWZlQXJyYXlGcm9tKHJlc3VsdCwgZnVuY3Rpb24gKGl0ZW0sIGluZGV4KSB7XG4gICAgLy8gTm8gbmVlZCB0byBtb2RpZnkgdGhlIGluZm8gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHBhdGgsXG4gICAgLy8gc2luY2UgZnJvbSBoZXJlIG9uIGl0IGlzIG5vdCBldmVyIGFjY2Vzc2VkIGJ5IHJlc29sdmVyIGZ1bmN0aW9ucy5cbiAgICB2YXIgaXRlbVBhdGggPSBhZGRQYXRoKHBhdGgsIGluZGV4LCB1bmRlZmluZWQpO1xuXG4gICAgdHJ5IHtcbiAgICAgIHZhciBjb21wbGV0ZWRJdGVtO1xuXG4gICAgICBpZiAoaXNQcm9taXNlKGl0ZW0pKSB7XG4gICAgICAgIGNvbXBsZXRlZEl0ZW0gPSBpdGVtLnRoZW4oZnVuY3Rpb24gKHJlc29sdmVkKSB7XG4gICAgICAgICAgcmV0dXJuIGNvbXBsZXRlVmFsdWUoZXhlQ29udGV4dCwgaXRlbVR5cGUsIGZpZWxkTm9kZXMsIGluZm8sIGl0ZW1QYXRoLCByZXNvbHZlZCk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29tcGxldGVkSXRlbSA9IGNvbXBsZXRlVmFsdWUoZXhlQ29udGV4dCwgaXRlbVR5cGUsIGZpZWxkTm9kZXMsIGluZm8sIGl0ZW1QYXRoLCBpdGVtKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzUHJvbWlzZShjb21wbGV0ZWRJdGVtKSkge1xuICAgICAgICBjb250YWluc1Byb21pc2UgPSB0cnVlOyAvLyBOb3RlOiB3ZSBkb24ndCByZWx5IG9uIGEgYGNhdGNoYCBtZXRob2QsIGJ1dCB3ZSBkbyBleHBlY3QgXCJ0aGVuYWJsZVwiXG4gICAgICAgIC8vIHRvIHRha2UgYSBzZWNvbmQgY2FsbGJhY2sgZm9yIHRoZSBlcnJvciBjYXNlLlxuXG4gICAgICAgIHJldHVybiBjb21wbGV0ZWRJdGVtLnRoZW4odW5kZWZpbmVkLCBmdW5jdGlvbiAocmF3RXJyb3IpIHtcbiAgICAgICAgICB2YXIgZXJyb3IgPSBsb2NhdGVkRXJyb3IocmF3RXJyb3IsIGZpZWxkTm9kZXMsIHBhdGhUb0FycmF5KGl0ZW1QYXRoKSk7XG4gICAgICAgICAgcmV0dXJuIGhhbmRsZUZpZWxkRXJyb3IoZXJyb3IsIGl0ZW1UeXBlLCBleGVDb250ZXh0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb21wbGV0ZWRJdGVtO1xuICAgIH0gY2F0Y2ggKHJhd0Vycm9yKSB7XG4gICAgICB2YXIgZXJyb3IgPSBsb2NhdGVkRXJyb3IocmF3RXJyb3IsIGZpZWxkTm9kZXMsIHBhdGhUb0FycmF5KGl0ZW1QYXRoKSk7XG4gICAgICByZXR1cm4gaGFuZGxlRmllbGRFcnJvcihlcnJvciwgaXRlbVR5cGUsIGV4ZUNvbnRleHQpO1xuICAgIH1cbiAgfSk7XG5cbiAgaWYgKGNvbXBsZXRlZFJlc3VsdHMgPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBHcmFwaFFMRXJyb3IoXCJFeHBlY3RlZCBJdGVyYWJsZSwgYnV0IGRpZCBub3QgZmluZCBvbmUgZm9yIGZpZWxkIFxcXCJcIi5jb25jYXQoaW5mby5wYXJlbnRUeXBlLm5hbWUsIFwiLlwiKS5jb25jYXQoaW5mby5maWVsZE5hbWUsIFwiXFxcIi5cIikpO1xuICB9XG5cbiAgcmV0dXJuIGNvbnRhaW5zUHJvbWlzZSA/IFByb21pc2UuYWxsKGNvbXBsZXRlZFJlc3VsdHMpIDogY29tcGxldGVkUmVzdWx0cztcbn1cbi8qKlxuICogQ29tcGxldGUgYSBTY2FsYXIgb3IgRW51bSBieSBzZXJpYWxpemluZyB0byBhIHZhbGlkIHZhbHVlLCByZXR1cm5pbmdcbiAqIG51bGwgaWYgc2VyaWFsaXphdGlvbiBpcyBub3QgcG9zc2libGUuXG4gKi9cblxuXG5mdW5jdGlvbiBjb21wbGV0ZUxlYWZWYWx1ZShyZXR1cm5UeXBlLCByZXN1bHQpIHtcbiAgdmFyIHNlcmlhbGl6ZWRSZXN1bHQgPSByZXR1cm5UeXBlLnNlcmlhbGl6ZShyZXN1bHQpO1xuXG4gIGlmIChzZXJpYWxpemVkUmVzdWx0ID09PSB1bmRlZmluZWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RlZCBhIHZhbHVlIG9mIHR5cGUgXFxcIlwiLmNvbmNhdChpbnNwZWN0KHJldHVyblR5cGUpLCBcIlxcXCIgYnV0IFwiKSArIFwicmVjZWl2ZWQ6IFwiLmNvbmNhdChpbnNwZWN0KHJlc3VsdCkpKTtcbiAgfVxuXG4gIHJldHVybiBzZXJpYWxpemVkUmVzdWx0O1xufVxuLyoqXG4gKiBDb21wbGV0ZSBhIHZhbHVlIG9mIGFuIGFic3RyYWN0IHR5cGUgYnkgZGV0ZXJtaW5pbmcgdGhlIHJ1bnRpbWUgb2JqZWN0IHR5cGVcbiAqIG9mIHRoYXQgdmFsdWUsIHRoZW4gY29tcGxldGUgdGhlIHZhbHVlIGZvciB0aGF0IHR5cGUuXG4gKi9cblxuXG5mdW5jdGlvbiBjb21wbGV0ZUFic3RyYWN0VmFsdWUoZXhlQ29udGV4dCwgcmV0dXJuVHlwZSwgZmllbGROb2RlcywgaW5mbywgcGF0aCwgcmVzdWx0KSB7XG4gIHZhciBfcmV0dXJuVHlwZSRyZXNvbHZlVHk7XG5cbiAgdmFyIHJlc29sdmVUeXBlRm4gPSAoX3JldHVyblR5cGUkcmVzb2x2ZVR5ID0gcmV0dXJuVHlwZS5yZXNvbHZlVHlwZSkgIT09IG51bGwgJiYgX3JldHVyblR5cGUkcmVzb2x2ZVR5ICE9PSB2b2lkIDAgPyBfcmV0dXJuVHlwZSRyZXNvbHZlVHkgOiBleGVDb250ZXh0LnR5cGVSZXNvbHZlcjtcbiAgdmFyIGNvbnRleHRWYWx1ZSA9IGV4ZUNvbnRleHQuY29udGV4dFZhbHVlO1xuICB2YXIgcnVudGltZVR5cGUgPSByZXNvbHZlVHlwZUZuKHJlc3VsdCwgY29udGV4dFZhbHVlLCBpbmZvLCByZXR1cm5UeXBlKTtcblxuICBpZiAoaXNQcm9taXNlKHJ1bnRpbWVUeXBlKSkge1xuICAgIHJldHVybiBydW50aW1lVHlwZS50aGVuKGZ1bmN0aW9uIChyZXNvbHZlZFJ1bnRpbWVUeXBlKSB7XG4gICAgICByZXR1cm4gY29tcGxldGVPYmplY3RWYWx1ZShleGVDb250ZXh0LCBlbnN1cmVWYWxpZFJ1bnRpbWVUeXBlKHJlc29sdmVkUnVudGltZVR5cGUsIGV4ZUNvbnRleHQsIHJldHVyblR5cGUsIGZpZWxkTm9kZXMsIGluZm8sIHJlc3VsdCksIGZpZWxkTm9kZXMsIGluZm8sIHBhdGgsIHJlc3VsdCk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gY29tcGxldGVPYmplY3RWYWx1ZShleGVDb250ZXh0LCBlbnN1cmVWYWxpZFJ1bnRpbWVUeXBlKHJ1bnRpbWVUeXBlLCBleGVDb250ZXh0LCByZXR1cm5UeXBlLCBmaWVsZE5vZGVzLCBpbmZvLCByZXN1bHQpLCBmaWVsZE5vZGVzLCBpbmZvLCBwYXRoLCByZXN1bHQpO1xufVxuXG5mdW5jdGlvbiBlbnN1cmVWYWxpZFJ1bnRpbWVUeXBlKHJ1bnRpbWVUeXBlT3JOYW1lLCBleGVDb250ZXh0LCByZXR1cm5UeXBlLCBmaWVsZE5vZGVzLCBpbmZvLCByZXN1bHQpIHtcbiAgaWYgKHJ1bnRpbWVUeXBlT3JOYW1lID09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgR3JhcGhRTEVycm9yKFwiQWJzdHJhY3QgdHlwZSBcXFwiXCIuY29uY2F0KHJldHVyblR5cGUubmFtZSwgXCJcXFwiIG11c3QgcmVzb2x2ZSB0byBhbiBPYmplY3QgdHlwZSBhdCBydW50aW1lIGZvciBmaWVsZCBcXFwiXCIpLmNvbmNhdChpbmZvLnBhcmVudFR5cGUubmFtZSwgXCIuXCIpLmNvbmNhdChpbmZvLmZpZWxkTmFtZSwgXCJcXFwiLiBFaXRoZXIgdGhlIFxcXCJcIikuY29uY2F0KHJldHVyblR5cGUubmFtZSwgXCJcXFwiIHR5cGUgc2hvdWxkIHByb3ZpZGUgYSBcXFwicmVzb2x2ZVR5cGVcXFwiIGZ1bmN0aW9uIG9yIGVhY2ggcG9zc2libGUgdHlwZSBzaG91bGQgcHJvdmlkZSBhbiBcXFwiaXNUeXBlT2ZcXFwiIGZ1bmN0aW9uLlwiKSwgZmllbGROb2Rlcyk7XG4gIH0gLy8gRklYTUU6IHRlbXBvcmFyeSB3b3JrYXJvdW5kIHVudGlsIHN1cHBvcnQgZm9yIHBhc3Npbmcgb2JqZWN0IHR5cGVzIHdvdWxkIGJlIHJlbW92ZWQgaW4gdjE2LjAuMFxuXG5cbiAgdmFyIHJ1bnRpbWVUeXBlTmFtZSA9IGlzTmFtZWRUeXBlKHJ1bnRpbWVUeXBlT3JOYW1lKSA/IHJ1bnRpbWVUeXBlT3JOYW1lLm5hbWUgOiBydW50aW1lVHlwZU9yTmFtZTtcblxuICBpZiAodHlwZW9mIHJ1bnRpbWVUeXBlTmFtZSAhPT0gJ3N0cmluZycpIHtcbiAgICB0aHJvdyBuZXcgR3JhcGhRTEVycm9yKFwiQWJzdHJhY3QgdHlwZSBcXFwiXCIuY29uY2F0KHJldHVyblR5cGUubmFtZSwgXCJcXFwiIG11c3QgcmVzb2x2ZSB0byBhbiBPYmplY3QgdHlwZSBhdCBydW50aW1lIGZvciBmaWVsZCBcXFwiXCIpLmNvbmNhdChpbmZvLnBhcmVudFR5cGUubmFtZSwgXCIuXCIpLmNvbmNhdChpbmZvLmZpZWxkTmFtZSwgXCJcXFwiIHdpdGggXCIpICsgXCJ2YWx1ZSBcIi5jb25jYXQoaW5zcGVjdChyZXN1bHQpLCBcIiwgcmVjZWl2ZWQgXFxcIlwiKS5jb25jYXQoaW5zcGVjdChydW50aW1lVHlwZU9yTmFtZSksIFwiXFxcIi5cIikpO1xuICB9XG5cbiAgdmFyIHJ1bnRpbWVUeXBlID0gZXhlQ29udGV4dC5zY2hlbWEuZ2V0VHlwZShydW50aW1lVHlwZU5hbWUpO1xuXG4gIGlmIChydW50aW1lVHlwZSA9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEdyYXBoUUxFcnJvcihcIkFic3RyYWN0IHR5cGUgXFxcIlwiLmNvbmNhdChyZXR1cm5UeXBlLm5hbWUsIFwiXFxcIiB3YXMgcmVzb2x2ZSB0byBhIHR5cGUgXFxcIlwiKS5jb25jYXQocnVudGltZVR5cGVOYW1lLCBcIlxcXCIgdGhhdCBkb2VzIG5vdCBleGlzdCBpbnNpZGUgc2NoZW1hLlwiKSwgZmllbGROb2Rlcyk7XG4gIH1cblxuICBpZiAoIWlzT2JqZWN0VHlwZShydW50aW1lVHlwZSkpIHtcbiAgICB0aHJvdyBuZXcgR3JhcGhRTEVycm9yKFwiQWJzdHJhY3QgdHlwZSBcXFwiXCIuY29uY2F0KHJldHVyblR5cGUubmFtZSwgXCJcXFwiIHdhcyByZXNvbHZlIHRvIGEgbm9uLW9iamVjdCB0eXBlIFxcXCJcIikuY29uY2F0KHJ1bnRpbWVUeXBlTmFtZSwgXCJcXFwiLlwiKSwgZmllbGROb2Rlcyk7XG4gIH1cblxuICBpZiAoIWV4ZUNvbnRleHQuc2NoZW1hLmlzU3ViVHlwZShyZXR1cm5UeXBlLCBydW50aW1lVHlwZSkpIHtcbiAgICB0aHJvdyBuZXcgR3JhcGhRTEVycm9yKFwiUnVudGltZSBPYmplY3QgdHlwZSBcXFwiXCIuY29uY2F0KHJ1bnRpbWVUeXBlLm5hbWUsIFwiXFxcIiBpcyBub3QgYSBwb3NzaWJsZSB0eXBlIGZvciBcXFwiXCIpLmNvbmNhdChyZXR1cm5UeXBlLm5hbWUsIFwiXFxcIi5cIiksIGZpZWxkTm9kZXMpO1xuICB9XG5cbiAgcmV0dXJuIHJ1bnRpbWVUeXBlO1xufVxuLyoqXG4gKiBDb21wbGV0ZSBhbiBPYmplY3QgdmFsdWUgYnkgZXhlY3V0aW5nIGFsbCBzdWItc2VsZWN0aW9ucy5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNvbXBsZXRlT2JqZWN0VmFsdWUoZXhlQ29udGV4dCwgcmV0dXJuVHlwZSwgZmllbGROb2RlcywgaW5mbywgcGF0aCwgcmVzdWx0KSB7XG4gIC8vIElmIHRoZXJlIGlzIGFuIGlzVHlwZU9mIHByZWRpY2F0ZSBmdW5jdGlvbiwgY2FsbCBpdCB3aXRoIHRoZVxuICAvLyBjdXJyZW50IHJlc3VsdC4gSWYgaXNUeXBlT2YgcmV0dXJucyBmYWxzZSwgdGhlbiByYWlzZSBhbiBlcnJvciByYXRoZXJcbiAgLy8gdGhhbiBjb250aW51aW5nIGV4ZWN1dGlvbi5cbiAgaWYgKHJldHVyblR5cGUuaXNUeXBlT2YpIHtcbiAgICB2YXIgaXNUeXBlT2YgPSByZXR1cm5UeXBlLmlzVHlwZU9mKHJlc3VsdCwgZXhlQ29udGV4dC5jb250ZXh0VmFsdWUsIGluZm8pO1xuXG4gICAgaWYgKGlzUHJvbWlzZShpc1R5cGVPZikpIHtcbiAgICAgIHJldHVybiBpc1R5cGVPZi50aGVuKGZ1bmN0aW9uIChyZXNvbHZlZElzVHlwZU9mKSB7XG4gICAgICAgIGlmICghcmVzb2x2ZWRJc1R5cGVPZikge1xuICAgICAgICAgIHRocm93IGludmFsaWRSZXR1cm5UeXBlRXJyb3IocmV0dXJuVHlwZSwgcmVzdWx0LCBmaWVsZE5vZGVzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb2xsZWN0QW5kRXhlY3V0ZVN1YmZpZWxkcyhleGVDb250ZXh0LCByZXR1cm5UeXBlLCBmaWVsZE5vZGVzLCBwYXRoLCByZXN1bHQpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKCFpc1R5cGVPZikge1xuICAgICAgdGhyb3cgaW52YWxpZFJldHVyblR5cGVFcnJvcihyZXR1cm5UeXBlLCByZXN1bHQsIGZpZWxkTm9kZXMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjb2xsZWN0QW5kRXhlY3V0ZVN1YmZpZWxkcyhleGVDb250ZXh0LCByZXR1cm5UeXBlLCBmaWVsZE5vZGVzLCBwYXRoLCByZXN1bHQpO1xufVxuXG5mdW5jdGlvbiBpbnZhbGlkUmV0dXJuVHlwZUVycm9yKHJldHVyblR5cGUsIHJlc3VsdCwgZmllbGROb2Rlcykge1xuICByZXR1cm4gbmV3IEdyYXBoUUxFcnJvcihcIkV4cGVjdGVkIHZhbHVlIG9mIHR5cGUgXFxcIlwiLmNvbmNhdChyZXR1cm5UeXBlLm5hbWUsIFwiXFxcIiBidXQgZ290OiBcIikuY29uY2F0KGluc3BlY3QocmVzdWx0KSwgXCIuXCIpLCBmaWVsZE5vZGVzKTtcbn1cblxuZnVuY3Rpb24gY29sbGVjdEFuZEV4ZWN1dGVTdWJmaWVsZHMoZXhlQ29udGV4dCwgcmV0dXJuVHlwZSwgZmllbGROb2RlcywgcGF0aCwgcmVzdWx0KSB7XG4gIC8vIENvbGxlY3Qgc3ViLWZpZWxkcyB0byBleGVjdXRlIHRvIGNvbXBsZXRlIHRoaXMgdmFsdWUuXG4gIHZhciBzdWJGaWVsZE5vZGVzID0gY29sbGVjdFN1YmZpZWxkcyhleGVDb250ZXh0LCByZXR1cm5UeXBlLCBmaWVsZE5vZGVzKTtcbiAgcmV0dXJuIGV4ZWN1dGVGaWVsZHMoZXhlQ29udGV4dCwgcmV0dXJuVHlwZSwgcmVzdWx0LCBwYXRoLCBzdWJGaWVsZE5vZGVzKTtcbn1cbi8qKlxuICogQSBtZW1vaXplZCBjb2xsZWN0aW9uIG9mIHJlbGV2YW50IHN1YmZpZWxkcyB3aXRoIHJlZ2FyZCB0byB0aGUgcmV0dXJuXG4gKiB0eXBlLiBNZW1vaXppbmcgZW5zdXJlcyB0aGUgc3ViZmllbGRzIGFyZSBub3QgcmVwZWF0ZWRseSBjYWxjdWxhdGVkLCB3aGljaFxuICogc2F2ZXMgb3ZlcmhlYWQgd2hlbiByZXNvbHZpbmcgbGlzdHMgb2YgdmFsdWVzLlxuICovXG5cblxudmFyIGNvbGxlY3RTdWJmaWVsZHMgPSBtZW1vaXplMyhfY29sbGVjdFN1YmZpZWxkcyk7XG5cbmZ1bmN0aW9uIF9jb2xsZWN0U3ViZmllbGRzKGV4ZUNvbnRleHQsIHJldHVyblR5cGUsIGZpZWxkTm9kZXMpIHtcbiAgdmFyIHN1YkZpZWxkTm9kZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2YXIgdmlzaXRlZEZyYWdtZW50TmFtZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gIGZvciAodmFyIF9pOCA9IDA7IF9pOCA8IGZpZWxkTm9kZXMubGVuZ3RoOyBfaTgrKykge1xuICAgIHZhciBub2RlID0gZmllbGROb2Rlc1tfaThdO1xuXG4gICAgaWYgKG5vZGUuc2VsZWN0aW9uU2V0KSB7XG4gICAgICBzdWJGaWVsZE5vZGVzID0gY29sbGVjdEZpZWxkcyhleGVDb250ZXh0LCByZXR1cm5UeXBlLCBub2RlLnNlbGVjdGlvblNldCwgc3ViRmllbGROb2RlcywgdmlzaXRlZEZyYWdtZW50TmFtZXMpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzdWJGaWVsZE5vZGVzO1xufVxuLyoqXG4gKiBJZiBhIHJlc29sdmVUeXBlIGZ1bmN0aW9uIGlzIG5vdCBnaXZlbiwgdGhlbiBhIGRlZmF1bHQgcmVzb2x2ZSBiZWhhdmlvciBpc1xuICogdXNlZCB3aGljaCBhdHRlbXB0cyB0d28gc3RyYXRlZ2llczpcbiAqXG4gKiBGaXJzdCwgU2VlIGlmIHRoZSBwcm92aWRlZCB2YWx1ZSBoYXMgYSBgX190eXBlbmFtZWAgZmllbGQgZGVmaW5lZCwgaWYgc28sIHVzZVxuICogdGhhdCB2YWx1ZSBhcyBuYW1lIG9mIHRoZSByZXNvbHZlZCB0eXBlLlxuICpcbiAqIE90aGVyd2lzZSwgdGVzdCBlYWNoIHBvc3NpYmxlIHR5cGUgZm9yIHRoZSBhYnN0cmFjdCB0eXBlIGJ5IGNhbGxpbmdcbiAqIGlzVHlwZU9mIGZvciB0aGUgb2JqZWN0IGJlaW5nIGNvZXJjZWQsIHJldHVybmluZyB0aGUgZmlyc3QgdHlwZSB0aGF0IG1hdGNoZXMuXG4gKi9cblxuXG5leHBvcnQgdmFyIGRlZmF1bHRUeXBlUmVzb2x2ZXIgPSBmdW5jdGlvbiBkZWZhdWx0VHlwZVJlc29sdmVyKHZhbHVlLCBjb250ZXh0VmFsdWUsIGluZm8sIGFic3RyYWN0VHlwZSkge1xuICAvLyBGaXJzdCwgbG9vayBmb3IgYF9fdHlwZW5hbWVgLlxuICBpZiAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiB0eXBlb2YgdmFsdWUuX190eXBlbmFtZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWUuX190eXBlbmFtZTtcbiAgfSAvLyBPdGhlcndpc2UsIHRlc3QgZWFjaCBwb3NzaWJsZSB0eXBlLlxuXG5cbiAgdmFyIHBvc3NpYmxlVHlwZXMgPSBpbmZvLnNjaGVtYS5nZXRQb3NzaWJsZVR5cGVzKGFic3RyYWN0VHlwZSk7XG4gIHZhciBwcm9taXNlZElzVHlwZU9mUmVzdWx0cyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcG9zc2libGVUeXBlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB0eXBlID0gcG9zc2libGVUeXBlc1tpXTtcblxuICAgIGlmICh0eXBlLmlzVHlwZU9mKSB7XG4gICAgICB2YXIgaXNUeXBlT2ZSZXN1bHQgPSB0eXBlLmlzVHlwZU9mKHZhbHVlLCBjb250ZXh0VmFsdWUsIGluZm8pO1xuXG4gICAgICBpZiAoaXNQcm9taXNlKGlzVHlwZU9mUmVzdWx0KSkge1xuICAgICAgICBwcm9taXNlZElzVHlwZU9mUmVzdWx0c1tpXSA9IGlzVHlwZU9mUmVzdWx0O1xuICAgICAgfSBlbHNlIGlmIChpc1R5cGVPZlJlc3VsdCkge1xuICAgICAgICByZXR1cm4gdHlwZS5uYW1lO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChwcm9taXNlZElzVHlwZU9mUmVzdWx0cy5sZW5ndGgpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZWRJc1R5cGVPZlJlc3VsdHMpLnRoZW4oZnVuY3Rpb24gKGlzVHlwZU9mUmVzdWx0cykge1xuICAgICAgZm9yICh2YXIgX2k5ID0gMDsgX2k5IDwgaXNUeXBlT2ZSZXN1bHRzLmxlbmd0aDsgX2k5KyspIHtcbiAgICAgICAgaWYgKGlzVHlwZU9mUmVzdWx0c1tfaTldKSB7XG4gICAgICAgICAgcmV0dXJuIHBvc3NpYmxlVHlwZXNbX2k5XS5uYW1lO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn07XG4vKipcbiAqIElmIGEgcmVzb2x2ZSBmdW5jdGlvbiBpcyBub3QgZ2l2ZW4sIHRoZW4gYSBkZWZhdWx0IHJlc29sdmUgYmVoYXZpb3IgaXMgdXNlZFxuICogd2hpY2ggdGFrZXMgdGhlIHByb3BlcnR5IG9mIHRoZSBzb3VyY2Ugb2JqZWN0IG9mIHRoZSBzYW1lIG5hbWUgYXMgdGhlIGZpZWxkXG4gKiBhbmQgcmV0dXJucyBpdCBhcyB0aGUgcmVzdWx0LCBvciBpZiBpdCdzIGEgZnVuY3Rpb24sIHJldHVybnMgdGhlIHJlc3VsdFxuICogb2YgY2FsbGluZyB0aGF0IGZ1bmN0aW9uIHdoaWxlIHBhc3NpbmcgYWxvbmcgYXJncyBhbmQgY29udGV4dCB2YWx1ZS5cbiAqL1xuXG5leHBvcnQgdmFyIGRlZmF1bHRGaWVsZFJlc29sdmVyID0gZnVuY3Rpb24gZGVmYXVsdEZpZWxkUmVzb2x2ZXIoc291cmNlLCBhcmdzLCBjb250ZXh0VmFsdWUsIGluZm8pIHtcbiAgLy8gZW5zdXJlIHNvdXJjZSBpcyBhIHZhbHVlIGZvciB3aGljaCBwcm9wZXJ0eSBhY2Nlc3MgaXMgYWNjZXB0YWJsZS5cbiAgaWYgKGlzT2JqZWN0TGlrZShzb3VyY2UpIHx8IHR5cGVvZiBzb3VyY2UgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgcHJvcGVydHkgPSBzb3VyY2VbaW5mby5maWVsZE5hbWVdO1xuXG4gICAgaWYgKHR5cGVvZiBwcm9wZXJ0eSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIHNvdXJjZVtpbmZvLmZpZWxkTmFtZV0oYXJncywgY29udGV4dFZhbHVlLCBpbmZvKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvcGVydHk7XG4gIH1cbn07XG4vKipcbiAqIFRoaXMgbWV0aG9kIGxvb2tzIHVwIHRoZSBmaWVsZCBvbiB0aGUgZ2l2ZW4gdHlwZSBkZWZpbml0aW9uLlxuICogSXQgaGFzIHNwZWNpYWwgY2FzaW5nIGZvciB0aGUgdGhyZWUgaW50cm9zcGVjdGlvbiBmaWVsZHMsXG4gKiBfX3NjaGVtYSwgX190eXBlIGFuZCBfX3R5cGVuYW1lLiBfX3R5cGVuYW1lIGlzIHNwZWNpYWwgYmVjYXVzZVxuICogaXQgY2FuIGFsd2F5cyBiZSBxdWVyaWVkIGFzIGEgZmllbGQsIGV2ZW4gaW4gc2l0dWF0aW9ucyB3aGVyZSBub1xuICogb3RoZXIgZmllbGRzIGFyZSBhbGxvd2VkLCBsaWtlIG9uIGEgVW5pb24uIF9fc2NoZW1hIGFuZCBfX3R5cGVcbiAqIGNvdWxkIGdldCBhdXRvbWF0aWNhbGx5IGFkZGVkIHRvIHRoZSBxdWVyeSB0eXBlLCBidXQgdGhhdCB3b3VsZFxuICogcmVxdWlyZSBtdXRhdGluZyB0eXBlIGRlZmluaXRpb25zLCB3aGljaCB3b3VsZCBjYXVzZSBpc3N1ZXMuXG4gKlxuICogQGludGVybmFsXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEZpZWxkRGVmKHNjaGVtYSwgcGFyZW50VHlwZSwgZmllbGROYW1lKSB7XG4gIGlmIChmaWVsZE5hbWUgPT09IFNjaGVtYU1ldGFGaWVsZERlZi5uYW1lICYmIHNjaGVtYS5nZXRRdWVyeVR5cGUoKSA9PT0gcGFyZW50VHlwZSkge1xuICAgIHJldHVybiBTY2hlbWFNZXRhRmllbGREZWY7XG4gIH0gZWxzZSBpZiAoZmllbGROYW1lID09PSBUeXBlTWV0YUZpZWxkRGVmLm5hbWUgJiYgc2NoZW1hLmdldFF1ZXJ5VHlwZSgpID09PSBwYXJlbnRUeXBlKSB7XG4gICAgcmV0dXJuIFR5cGVNZXRhRmllbGREZWY7XG4gIH0gZWxzZSBpZiAoZmllbGROYW1lID09PSBUeXBlTmFtZU1ldGFGaWVsZERlZi5uYW1lKSB7XG4gICAgcmV0dXJuIFR5cGVOYW1lTWV0YUZpZWxkRGVmO1xuICB9XG5cbiAgcmV0dXJuIHBhcmVudFR5cGUuZ2V0RmllbGRzKClbZmllbGROYW1lXTtcbn1cbiIsImltcG9ydCBmaW5kIGZyb20gXCIuLi9wb2x5ZmlsbHMvZmluZC5tanNcIjtcbmltcG9ydCBrZXlNYXAgZnJvbSBcIi4uL2pzdXRpbHMva2V5TWFwLm1qc1wiO1xuaW1wb3J0IGluc3BlY3QgZnJvbSBcIi4uL2pzdXRpbHMvaW5zcGVjdC5tanNcIjtcbmltcG9ydCBwcmludFBhdGhBcnJheSBmcm9tIFwiLi4vanN1dGlscy9wcmludFBhdGhBcnJheS5tanNcIjtcbmltcG9ydCB7IEdyYXBoUUxFcnJvciB9IGZyb20gXCIuLi9lcnJvci9HcmFwaFFMRXJyb3IubWpzXCI7XG5pbXBvcnQgeyBLaW5kIH0gZnJvbSBcIi4uL2xhbmd1YWdlL2tpbmRzLm1qc1wiO1xuaW1wb3J0IHsgcHJpbnQgfSBmcm9tIFwiLi4vbGFuZ3VhZ2UvcHJpbnRlci5tanNcIjtcbmltcG9ydCB7IGlzSW5wdXRUeXBlLCBpc05vbk51bGxUeXBlIH0gZnJvbSBcIi4uL3R5cGUvZGVmaW5pdGlvbi5tanNcIjtcbmltcG9ydCB7IHR5cGVGcm9tQVNUIH0gZnJvbSBcIi4uL3V0aWxpdGllcy90eXBlRnJvbUFTVC5tanNcIjtcbmltcG9ydCB7IHZhbHVlRnJvbUFTVCB9IGZyb20gXCIuLi91dGlsaXRpZXMvdmFsdWVGcm9tQVNULm1qc1wiO1xuaW1wb3J0IHsgY29lcmNlSW5wdXRWYWx1ZSB9IGZyb20gXCIuLi91dGlsaXRpZXMvY29lcmNlSW5wdXRWYWx1ZS5tanNcIjtcblxuLyoqXG4gKiBQcmVwYXJlcyBhbiBvYmplY3QgbWFwIG9mIHZhcmlhYmxlVmFsdWVzIG9mIHRoZSBjb3JyZWN0IHR5cGUgYmFzZWQgb24gdGhlXG4gKiBwcm92aWRlZCB2YXJpYWJsZSBkZWZpbml0aW9ucyBhbmQgYXJiaXRyYXJ5IGlucHV0LiBJZiB0aGUgaW5wdXQgY2Fubm90IGJlXG4gKiBwYXJzZWQgdG8gbWF0Y2ggdGhlIHZhcmlhYmxlIGRlZmluaXRpb25zLCBhIEdyYXBoUUxFcnJvciB3aWxsIGJlIHRocm93bi5cbiAqXG4gKiBOb3RlOiBUaGUgcmV0dXJuZWQgdmFsdWUgaXMgYSBwbGFpbiBPYmplY3Qgd2l0aCBhIHByb3RvdHlwZSwgc2luY2UgaXQgaXNcbiAqIGV4cG9zZWQgdG8gdXNlciBjb2RlLiBDYXJlIHNob3VsZCBiZSB0YWtlbiB0byBub3QgcHVsbCB2YWx1ZXMgZnJvbSB0aGVcbiAqIE9iamVjdCBwcm90b3R5cGUuXG4gKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRWYXJpYWJsZVZhbHVlcyhzY2hlbWEsIHZhckRlZk5vZGVzLCBpbnB1dHMsIG9wdGlvbnMpIHtcbiAgdmFyIGVycm9ycyA9IFtdO1xuICB2YXIgbWF4RXJyb3JzID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLm1heEVycm9ycztcblxuICB0cnkge1xuICAgIHZhciBjb2VyY2VkID0gY29lcmNlVmFyaWFibGVWYWx1ZXMoc2NoZW1hLCB2YXJEZWZOb2RlcywgaW5wdXRzLCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgIGlmIChtYXhFcnJvcnMgIT0gbnVsbCAmJiBlcnJvcnMubGVuZ3RoID49IG1heEVycm9ycykge1xuICAgICAgICB0aHJvdyBuZXcgR3JhcGhRTEVycm9yKCdUb28gbWFueSBlcnJvcnMgcHJvY2Vzc2luZyB2YXJpYWJsZXMsIGVycm9yIGxpbWl0IHJlYWNoZWQuIEV4ZWN1dGlvbiBhYm9ydGVkLicpO1xuICAgICAgfVxuXG4gICAgICBlcnJvcnMucHVzaChlcnJvcik7XG4gICAgfSk7XG5cbiAgICBpZiAoZXJyb3JzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY29lcmNlZDogY29lcmNlZFxuICAgICAgfTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZXJyb3JzLnB1c2goZXJyb3IpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBlcnJvcnM6IGVycm9yc1xuICB9O1xufVxuXG5mdW5jdGlvbiBjb2VyY2VWYXJpYWJsZVZhbHVlcyhzY2hlbWEsIHZhckRlZk5vZGVzLCBpbnB1dHMsIG9uRXJyb3IpIHtcbiAgdmFyIGNvZXJjZWRWYWx1ZXMgPSB7fTtcblxuICB2YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcChfaTIpIHtcbiAgICB2YXIgdmFyRGVmTm9kZSA9IHZhckRlZk5vZGVzW19pMl07XG4gICAgdmFyIHZhck5hbWUgPSB2YXJEZWZOb2RlLnZhcmlhYmxlLm5hbWUudmFsdWU7XG4gICAgdmFyIHZhclR5cGUgPSB0eXBlRnJvbUFTVChzY2hlbWEsIHZhckRlZk5vZGUudHlwZSk7XG5cbiAgICBpZiAoIWlzSW5wdXRUeXBlKHZhclR5cGUpKSB7XG4gICAgICAvLyBNdXN0IHVzZSBpbnB1dCB0eXBlcyBmb3IgdmFyaWFibGVzLiBUaGlzIHNob3VsZCBiZSBjYXVnaHQgZHVyaW5nXG4gICAgICAvLyB2YWxpZGF0aW9uLCBob3dldmVyIGlzIGNoZWNrZWQgYWdhaW4gaGVyZSBmb3Igc2FmZXR5LlxuICAgICAgdmFyIHZhclR5cGVTdHIgPSBwcmludCh2YXJEZWZOb2RlLnR5cGUpO1xuICAgICAgb25FcnJvcihuZXcgR3JhcGhRTEVycm9yKFwiVmFyaWFibGUgXFxcIiRcIi5jb25jYXQodmFyTmFtZSwgXCJcXFwiIGV4cGVjdGVkIHZhbHVlIG9mIHR5cGUgXFxcIlwiKS5jb25jYXQodmFyVHlwZVN0ciwgXCJcXFwiIHdoaWNoIGNhbm5vdCBiZSB1c2VkIGFzIGFuIGlucHV0IHR5cGUuXCIpLCB2YXJEZWZOb2RlLnR5cGUpKTtcbiAgICAgIHJldHVybiBcImNvbnRpbnVlXCI7XG4gICAgfVxuXG4gICAgaWYgKCFoYXNPd25Qcm9wZXJ0eShpbnB1dHMsIHZhck5hbWUpKSB7XG4gICAgICBpZiAodmFyRGVmTm9kZS5kZWZhdWx0VmFsdWUpIHtcbiAgICAgICAgY29lcmNlZFZhbHVlc1t2YXJOYW1lXSA9IHZhbHVlRnJvbUFTVCh2YXJEZWZOb2RlLmRlZmF1bHRWYWx1ZSwgdmFyVHlwZSk7XG4gICAgICB9IGVsc2UgaWYgKGlzTm9uTnVsbFR5cGUodmFyVHlwZSkpIHtcbiAgICAgICAgdmFyIF92YXJUeXBlU3RyID0gaW5zcGVjdCh2YXJUeXBlKTtcblxuICAgICAgICBvbkVycm9yKG5ldyBHcmFwaFFMRXJyb3IoXCJWYXJpYWJsZSBcXFwiJFwiLmNvbmNhdCh2YXJOYW1lLCBcIlxcXCIgb2YgcmVxdWlyZWQgdHlwZSBcXFwiXCIpLmNvbmNhdChfdmFyVHlwZVN0ciwgXCJcXFwiIHdhcyBub3QgcHJvdmlkZWQuXCIpLCB2YXJEZWZOb2RlKSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBcImNvbnRpbnVlXCI7XG4gICAgfVxuXG4gICAgdmFyIHZhbHVlID0gaW5wdXRzW3Zhck5hbWVdO1xuXG4gICAgaWYgKHZhbHVlID09PSBudWxsICYmIGlzTm9uTnVsbFR5cGUodmFyVHlwZSkpIHtcbiAgICAgIHZhciBfdmFyVHlwZVN0cjIgPSBpbnNwZWN0KHZhclR5cGUpO1xuXG4gICAgICBvbkVycm9yKG5ldyBHcmFwaFFMRXJyb3IoXCJWYXJpYWJsZSBcXFwiJFwiLmNvbmNhdCh2YXJOYW1lLCBcIlxcXCIgb2Ygbm9uLW51bGwgdHlwZSBcXFwiXCIpLmNvbmNhdChfdmFyVHlwZVN0cjIsIFwiXFxcIiBtdXN0IG5vdCBiZSBudWxsLlwiKSwgdmFyRGVmTm9kZSkpO1xuICAgICAgcmV0dXJuIFwiY29udGludWVcIjtcbiAgICB9XG5cbiAgICBjb2VyY2VkVmFsdWVzW3Zhck5hbWVdID0gY29lcmNlSW5wdXRWYWx1ZSh2YWx1ZSwgdmFyVHlwZSwgZnVuY3Rpb24gKHBhdGgsIGludmFsaWRWYWx1ZSwgZXJyb3IpIHtcbiAgICAgIHZhciBwcmVmaXggPSBcIlZhcmlhYmxlIFxcXCIkXCIuY29uY2F0KHZhck5hbWUsIFwiXFxcIiBnb3QgaW52YWxpZCB2YWx1ZSBcIikgKyBpbnNwZWN0KGludmFsaWRWYWx1ZSk7XG5cbiAgICAgIGlmIChwYXRoLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcHJlZml4ICs9IFwiIGF0IFxcXCJcIi5jb25jYXQodmFyTmFtZSkuY29uY2F0KHByaW50UGF0aEFycmF5KHBhdGgpLCBcIlxcXCJcIik7XG4gICAgICB9XG5cbiAgICAgIG9uRXJyb3IobmV3IEdyYXBoUUxFcnJvcihwcmVmaXggKyAnOyAnICsgZXJyb3IubWVzc2FnZSwgdmFyRGVmTm9kZSwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgZXJyb3Iub3JpZ2luYWxFcnJvcikpO1xuICAgIH0pO1xuICB9O1xuXG4gIGZvciAodmFyIF9pMiA9IDA7IF9pMiA8IHZhckRlZk5vZGVzLmxlbmd0aDsgX2kyKyspIHtcbiAgICB2YXIgX3JldCA9IF9sb29wKF9pMik7XG5cbiAgICBpZiAoX3JldCA9PT0gXCJjb250aW51ZVwiKSBjb250aW51ZTtcbiAgfVxuXG4gIHJldHVybiBjb2VyY2VkVmFsdWVzO1xufVxuLyoqXG4gKiBQcmVwYXJlcyBhbiBvYmplY3QgbWFwIG9mIGFyZ3VtZW50IHZhbHVlcyBnaXZlbiBhIGxpc3Qgb2YgYXJndW1lbnRcbiAqIGRlZmluaXRpb25zIGFuZCBsaXN0IG9mIGFyZ3VtZW50IEFTVCBub2Rlcy5cbiAqXG4gKiBOb3RlOiBUaGUgcmV0dXJuZWQgdmFsdWUgaXMgYSBwbGFpbiBPYmplY3Qgd2l0aCBhIHByb3RvdHlwZSwgc2luY2UgaXQgaXNcbiAqIGV4cG9zZWQgdG8gdXNlciBjb2RlLiBDYXJlIHNob3VsZCBiZSB0YWtlbiB0byBub3QgcHVsbCB2YWx1ZXMgZnJvbSB0aGVcbiAqIE9iamVjdCBwcm90b3R5cGUuXG4gKlxuICogQGludGVybmFsXG4gKi9cblxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QXJndW1lbnRWYWx1ZXMoZGVmLCBub2RlLCB2YXJpYWJsZVZhbHVlcykge1xuICB2YXIgX25vZGUkYXJndW1lbnRzO1xuXG4gIHZhciBjb2VyY2VkVmFsdWVzID0ge307IC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0IChTZWU6ICdodHRwczovL2dpdGh1Yi5jb20vZ3JhcGhxbC9ncmFwaHFsLWpzL2lzc3Vlcy8yMjAzJylcblxuICB2YXIgYXJndW1lbnROb2RlcyA9IChfbm9kZSRhcmd1bWVudHMgPSBub2RlLmFyZ3VtZW50cykgIT09IG51bGwgJiYgX25vZGUkYXJndW1lbnRzICE9PSB2b2lkIDAgPyBfbm9kZSRhcmd1bWVudHMgOiBbXTtcbiAgdmFyIGFyZ05vZGVNYXAgPSBrZXlNYXAoYXJndW1lbnROb2RlcywgZnVuY3Rpb24gKGFyZykge1xuICAgIHJldHVybiBhcmcubmFtZS52YWx1ZTtcbiAgfSk7XG5cbiAgZm9yICh2YXIgX2k0ID0gMCwgX2RlZiRhcmdzMiA9IGRlZi5hcmdzOyBfaTQgPCBfZGVmJGFyZ3MyLmxlbmd0aDsgX2k0KyspIHtcbiAgICB2YXIgYXJnRGVmID0gX2RlZiRhcmdzMltfaTRdO1xuICAgIHZhciBuYW1lID0gYXJnRGVmLm5hbWU7XG4gICAgdmFyIGFyZ1R5cGUgPSBhcmdEZWYudHlwZTtcbiAgICB2YXIgYXJndW1lbnROb2RlID0gYXJnTm9kZU1hcFtuYW1lXTtcblxuICAgIGlmICghYXJndW1lbnROb2RlKSB7XG4gICAgICBpZiAoYXJnRGVmLmRlZmF1bHRWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvZXJjZWRWYWx1ZXNbbmFtZV0gPSBhcmdEZWYuZGVmYXVsdFZhbHVlO1xuICAgICAgfSBlbHNlIGlmIChpc05vbk51bGxUeXBlKGFyZ1R5cGUpKSB7XG4gICAgICAgIHRocm93IG5ldyBHcmFwaFFMRXJyb3IoXCJBcmd1bWVudCBcXFwiXCIuY29uY2F0KG5hbWUsIFwiXFxcIiBvZiByZXF1aXJlZCB0eXBlIFxcXCJcIikuY29uY2F0KGluc3BlY3QoYXJnVHlwZSksIFwiXFxcIiBcIikgKyAnd2FzIG5vdCBwcm92aWRlZC4nLCBub2RlKTtcbiAgICAgIH1cblxuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgdmFyIHZhbHVlTm9kZSA9IGFyZ3VtZW50Tm9kZS52YWx1ZTtcbiAgICB2YXIgaXNOdWxsID0gdmFsdWVOb2RlLmtpbmQgPT09IEtpbmQuTlVMTDtcblxuICAgIGlmICh2YWx1ZU5vZGUua2luZCA9PT0gS2luZC5WQVJJQUJMRSkge1xuICAgICAgdmFyIHZhcmlhYmxlTmFtZSA9IHZhbHVlTm9kZS5uYW1lLnZhbHVlO1xuXG4gICAgICBpZiAodmFyaWFibGVWYWx1ZXMgPT0gbnVsbCB8fCAhaGFzT3duUHJvcGVydHkodmFyaWFibGVWYWx1ZXMsIHZhcmlhYmxlTmFtZSkpIHtcbiAgICAgICAgaWYgKGFyZ0RlZi5kZWZhdWx0VmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGNvZXJjZWRWYWx1ZXNbbmFtZV0gPSBhcmdEZWYuZGVmYXVsdFZhbHVlO1xuICAgICAgICB9IGVsc2UgaWYgKGlzTm9uTnVsbFR5cGUoYXJnVHlwZSkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgR3JhcGhRTEVycm9yKFwiQXJndW1lbnQgXFxcIlwiLmNvbmNhdChuYW1lLCBcIlxcXCIgb2YgcmVxdWlyZWQgdHlwZSBcXFwiXCIpLmNvbmNhdChpbnNwZWN0KGFyZ1R5cGUpLCBcIlxcXCIgXCIpICsgXCJ3YXMgcHJvdmlkZWQgdGhlIHZhcmlhYmxlIFxcXCIkXCIuY29uY2F0KHZhcmlhYmxlTmFtZSwgXCJcXFwiIHdoaWNoIHdhcyBub3QgcHJvdmlkZWQgYSBydW50aW1lIHZhbHVlLlwiKSwgdmFsdWVOb2RlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpc051bGwgPSB2YXJpYWJsZVZhbHVlc1t2YXJpYWJsZU5hbWVdID09IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKGlzTnVsbCAmJiBpc05vbk51bGxUeXBlKGFyZ1R5cGUpKSB7XG4gICAgICB0aHJvdyBuZXcgR3JhcGhRTEVycm9yKFwiQXJndW1lbnQgXFxcIlwiLmNvbmNhdChuYW1lLCBcIlxcXCIgb2Ygbm9uLW51bGwgdHlwZSBcXFwiXCIpLmNvbmNhdChpbnNwZWN0KGFyZ1R5cGUpLCBcIlxcXCIgXCIpICsgJ211c3Qgbm90IGJlIG51bGwuJywgdmFsdWVOb2RlKTtcbiAgICB9XG5cbiAgICB2YXIgY29lcmNlZFZhbHVlID0gdmFsdWVGcm9tQVNUKHZhbHVlTm9kZSwgYXJnVHlwZSwgdmFyaWFibGVWYWx1ZXMpO1xuXG4gICAgaWYgKGNvZXJjZWRWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBOb3RlOiBWYWx1ZXNPZkNvcnJlY3RUeXBlUnVsZSB2YWxpZGF0aW9uIHNob3VsZCBjYXRjaCB0aGlzIGJlZm9yZVxuICAgICAgLy8gZXhlY3V0aW9uLiBUaGlzIGlzIGEgcnVudGltZSBjaGVjayB0byBlbnN1cmUgZXhlY3V0aW9uIGRvZXMgbm90XG4gICAgICAvLyBjb250aW51ZSB3aXRoIGFuIGludmFsaWQgYXJndW1lbnQgdmFsdWUuXG4gICAgICB0aHJvdyBuZXcgR3JhcGhRTEVycm9yKFwiQXJndW1lbnQgXFxcIlwiLmNvbmNhdChuYW1lLCBcIlxcXCIgaGFzIGludmFsaWQgdmFsdWUgXCIpLmNvbmNhdChwcmludCh2YWx1ZU5vZGUpLCBcIi5cIiksIHZhbHVlTm9kZSk7XG4gICAgfVxuXG4gICAgY29lcmNlZFZhbHVlc1tuYW1lXSA9IGNvZXJjZWRWYWx1ZTtcbiAgfVxuXG4gIHJldHVybiBjb2VyY2VkVmFsdWVzO1xufVxuLyoqXG4gKiBQcmVwYXJlcyBhbiBvYmplY3QgbWFwIG9mIGFyZ3VtZW50IHZhbHVlcyBnaXZlbiBhIGRpcmVjdGl2ZSBkZWZpbml0aW9uXG4gKiBhbmQgYSBBU1Qgbm9kZSB3aGljaCBtYXkgY29udGFpbiBkaXJlY3RpdmVzLiBPcHRpb25hbGx5IGFsc28gYWNjZXB0cyBhIG1hcFxuICogb2YgdmFyaWFibGUgdmFsdWVzLlxuICpcbiAqIElmIHRoZSBkaXJlY3RpdmUgZG9lcyBub3QgZXhpc3Qgb24gdGhlIG5vZGUsIHJldHVybnMgdW5kZWZpbmVkLlxuICpcbiAqIE5vdGU6IFRoZSByZXR1cm5lZCB2YWx1ZSBpcyBhIHBsYWluIE9iamVjdCB3aXRoIGEgcHJvdG90eXBlLCBzaW5jZSBpdCBpc1xuICogZXhwb3NlZCB0byB1c2VyIGNvZGUuIENhcmUgc2hvdWxkIGJlIHRha2VuIHRvIG5vdCBwdWxsIHZhbHVlcyBmcm9tIHRoZVxuICogT2JqZWN0IHByb3RvdHlwZS5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGlyZWN0aXZlVmFsdWVzKGRpcmVjdGl2ZURlZiwgbm9kZSwgdmFyaWFibGVWYWx1ZXMpIHtcbiAgdmFyIGRpcmVjdGl2ZU5vZGUgPSBub2RlLmRpcmVjdGl2ZXMgJiYgZmluZChub2RlLmRpcmVjdGl2ZXMsIGZ1bmN0aW9uIChkaXJlY3RpdmUpIHtcbiAgICByZXR1cm4gZGlyZWN0aXZlLm5hbWUudmFsdWUgPT09IGRpcmVjdGl2ZURlZi5uYW1lO1xuICB9KTtcblxuICBpZiAoZGlyZWN0aXZlTm9kZSkge1xuICAgIHJldHVybiBnZXRBcmd1bWVudFZhbHVlcyhkaXJlY3RpdmVEZWYsIGRpcmVjdGl2ZU5vZGUsIHZhcmlhYmxlVmFsdWVzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBoYXNPd25Qcm9wZXJ0eShvYmosIHByb3ApIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApO1xufVxuIiwiaW1wb3J0IGlzUHJvbWlzZSBmcm9tIFwiLi9qc3V0aWxzL2lzUHJvbWlzZS5tanNcIjtcbmltcG9ydCB7IHBhcnNlIH0gZnJvbSBcIi4vbGFuZ3VhZ2UvcGFyc2VyLm1qc1wiO1xuaW1wb3J0IHsgdmFsaWRhdGUgfSBmcm9tIFwiLi92YWxpZGF0aW9uL3ZhbGlkYXRlLm1qc1wiO1xuaW1wb3J0IHsgdmFsaWRhdGVTY2hlbWEgfSBmcm9tIFwiLi90eXBlL3ZhbGlkYXRlLm1qc1wiO1xuaW1wb3J0IHsgZXhlY3V0ZSB9IGZyb20gXCIuL2V4ZWN1dGlvbi9leGVjdXRlLm1qc1wiO1xuLyoqXG4gKiBUaGlzIGlzIHRoZSBwcmltYXJ5IGVudHJ5IHBvaW50IGZ1bmN0aW9uIGZvciBmdWxmaWxsaW5nIEdyYXBoUUwgb3BlcmF0aW9uc1xuICogYnkgcGFyc2luZywgdmFsaWRhdGluZywgYW5kIGV4ZWN1dGluZyBhIEdyYXBoUUwgZG9jdW1lbnQgYWxvbmcgc2lkZSBhXG4gKiBHcmFwaFFMIHNjaGVtYS5cbiAqXG4gKiBNb3JlIHNvcGhpc3RpY2F0ZWQgR3JhcGhRTCBzZXJ2ZXJzLCBzdWNoIGFzIHRob3NlIHdoaWNoIHBlcnNpc3QgcXVlcmllcyxcbiAqIG1heSB3aXNoIHRvIHNlcGFyYXRlIHRoZSB2YWxpZGF0aW9uIGFuZCBleGVjdXRpb24gcGhhc2VzIHRvIGEgc3RhdGljIHRpbWVcbiAqIHRvb2xpbmcgc3RlcCwgYW5kIGEgc2VydmVyIHJ1bnRpbWUgc3RlcC5cbiAqXG4gKiBBY2NlcHRzIGVpdGhlciBhbiBvYmplY3Qgd2l0aCBuYW1lZCBhcmd1bWVudHMsIG9yIGluZGl2aWR1YWwgYXJndW1lbnRzOlxuICpcbiAqIHNjaGVtYTpcbiAqICAgIFRoZSBHcmFwaFFMIHR5cGUgc3lzdGVtIHRvIHVzZSB3aGVuIHZhbGlkYXRpbmcgYW5kIGV4ZWN1dGluZyBhIHF1ZXJ5LlxuICogc291cmNlOlxuICogICAgQSBHcmFwaFFMIGxhbmd1YWdlIGZvcm1hdHRlZCBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSByZXF1ZXN0ZWQgb3BlcmF0aW9uLlxuICogcm9vdFZhbHVlOlxuICogICAgVGhlIHZhbHVlIHByb3ZpZGVkIGFzIHRoZSBmaXJzdCBhcmd1bWVudCB0byByZXNvbHZlciBmdW5jdGlvbnMgb24gdGhlIHRvcFxuICogICAgbGV2ZWwgdHlwZSAoZS5nLiB0aGUgcXVlcnkgb2JqZWN0IHR5cGUpLlxuICogY29udGV4dFZhbHVlOlxuICogICAgVGhlIGNvbnRleHQgdmFsdWUgaXMgcHJvdmlkZWQgYXMgYW4gYXJndW1lbnQgdG8gcmVzb2x2ZXIgZnVuY3Rpb25zIGFmdGVyXG4gKiAgICBmaWVsZCBhcmd1bWVudHMuIEl0IGlzIHVzZWQgdG8gcGFzcyBzaGFyZWQgaW5mb3JtYXRpb24gdXNlZnVsIGF0IGFueSBwb2ludFxuICogICAgZHVyaW5nIGV4ZWN1dGluZyB0aGlzIHF1ZXJ5LCBmb3IgZXhhbXBsZSB0aGUgY3VycmVudGx5IGxvZ2dlZCBpbiB1c2VyIGFuZFxuICogICAgY29ubmVjdGlvbnMgdG8gZGF0YWJhc2VzIG9yIG90aGVyIHNlcnZpY2VzLlxuICogdmFyaWFibGVWYWx1ZXM6XG4gKiAgICBBIG1hcHBpbmcgb2YgdmFyaWFibGUgbmFtZSB0byBydW50aW1lIHZhbHVlIHRvIHVzZSBmb3IgYWxsIHZhcmlhYmxlc1xuICogICAgZGVmaW5lZCBpbiB0aGUgcmVxdWVzdFN0cmluZy5cbiAqIG9wZXJhdGlvbk5hbWU6XG4gKiAgICBUaGUgbmFtZSBvZiB0aGUgb3BlcmF0aW9uIHRvIHVzZSBpZiByZXF1ZXN0U3RyaW5nIGNvbnRhaW5zIG11bHRpcGxlXG4gKiAgICBwb3NzaWJsZSBvcGVyYXRpb25zLiBDYW4gYmUgb21pdHRlZCBpZiByZXF1ZXN0U3RyaW5nIGNvbnRhaW5zIG9ubHlcbiAqICAgIG9uZSBvcGVyYXRpb24uXG4gKiBmaWVsZFJlc29sdmVyOlxuICogICAgQSByZXNvbHZlciBmdW5jdGlvbiB0byB1c2Ugd2hlbiBvbmUgaXMgbm90IHByb3ZpZGVkIGJ5IHRoZSBzY2hlbWEuXG4gKiAgICBJZiBub3QgcHJvdmlkZWQsIHRoZSBkZWZhdWx0IGZpZWxkIHJlc29sdmVyIGlzIHVzZWQgKHdoaWNoIGxvb2tzIGZvciBhXG4gKiAgICB2YWx1ZSBvciBtZXRob2Qgb24gdGhlIHNvdXJjZSB2YWx1ZSB3aXRoIHRoZSBmaWVsZCdzIG5hbWUpLlxuICogdHlwZVJlc29sdmVyOlxuICogICAgQSB0eXBlIHJlc29sdmVyIGZ1bmN0aW9uIHRvIHVzZSB3aGVuIG5vbmUgaXMgcHJvdmlkZWQgYnkgdGhlIHNjaGVtYS5cbiAqICAgIElmIG5vdCBwcm92aWRlZCwgdGhlIGRlZmF1bHQgdHlwZSByZXNvbHZlciBpcyB1c2VkICh3aGljaCBsb29rcyBmb3IgYVxuICogICAgYF9fdHlwZW5hbWVgIGZpZWxkIG9yIGFsdGVybmF0aXZlbHkgY2FsbHMgdGhlIGBpc1R5cGVPZmAgbWV0aG9kKS5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZ3JhcGhxbChhcmdzT3JTY2hlbWEsIHNvdXJjZSwgcm9vdFZhbHVlLCBjb250ZXh0VmFsdWUsIHZhcmlhYmxlVmFsdWVzLCBvcGVyYXRpb25OYW1lLCBmaWVsZFJlc29sdmVyLCB0eXBlUmVzb2x2ZXIpIHtcbiAgdmFyIF9hcmd1bWVudHMgPSBhcmd1bWVudHM7XG5cbiAgLyogZXNsaW50LWVuYWJsZSBuby1yZWRlY2xhcmUgKi9cbiAgLy8gQWx3YXlzIHJldHVybiBhIFByb21pc2UgZm9yIGEgY29uc2lzdGVudCBBUEkuXG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgIHJldHVybiByZXNvbHZlKCAvLyBFeHRyYWN0IGFyZ3VtZW50cyBmcm9tIG9iamVjdCBhcmdzIGlmIHByb3ZpZGVkLlxuICAgIF9hcmd1bWVudHMubGVuZ3RoID09PSAxID8gZ3JhcGhxbEltcGwoYXJnc09yU2NoZW1hKSA6IGdyYXBocWxJbXBsKHtcbiAgICAgIHNjaGVtYTogYXJnc09yU2NoZW1hLFxuICAgICAgc291cmNlOiBzb3VyY2UsXG4gICAgICByb290VmFsdWU6IHJvb3RWYWx1ZSxcbiAgICAgIGNvbnRleHRWYWx1ZTogY29udGV4dFZhbHVlLFxuICAgICAgdmFyaWFibGVWYWx1ZXM6IHZhcmlhYmxlVmFsdWVzLFxuICAgICAgb3BlcmF0aW9uTmFtZTogb3BlcmF0aW9uTmFtZSxcbiAgICAgIGZpZWxkUmVzb2x2ZXI6IGZpZWxkUmVzb2x2ZXIsXG4gICAgICB0eXBlUmVzb2x2ZXI6IHR5cGVSZXNvbHZlclxuICAgIH0pKTtcbiAgfSk7XG59XG4vKipcbiAqIFRoZSBncmFwaHFsU3luYyBmdW5jdGlvbiBhbHNvIGZ1bGZpbGxzIEdyYXBoUUwgb3BlcmF0aW9ucyBieSBwYXJzaW5nLFxuICogdmFsaWRhdGluZywgYW5kIGV4ZWN1dGluZyBhIEdyYXBoUUwgZG9jdW1lbnQgYWxvbmcgc2lkZSBhIEdyYXBoUUwgc2NoZW1hLlxuICogSG93ZXZlciwgaXQgZ3VhcmFudGVlcyB0byBjb21wbGV0ZSBzeW5jaHJvbm91c2x5IChvciB0aHJvdyBhbiBlcnJvcikgYXNzdW1pbmdcbiAqIHRoYXQgYWxsIGZpZWxkIHJlc29sdmVycyBhcmUgYWxzbyBzeW5jaHJvbm91cy5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZ3JhcGhxbFN5bmMoYXJnc09yU2NoZW1hLCBzb3VyY2UsIHJvb3RWYWx1ZSwgY29udGV4dFZhbHVlLCB2YXJpYWJsZVZhbHVlcywgb3BlcmF0aW9uTmFtZSwgZmllbGRSZXNvbHZlciwgdHlwZVJlc29sdmVyKSB7XG4gIC8qIGVzbGludC1lbmFibGUgbm8tcmVkZWNsYXJlICovXG4gIC8vIEV4dHJhY3QgYXJndW1lbnRzIGZyb20gb2JqZWN0IGFyZ3MgaWYgcHJvdmlkZWQuXG4gIHZhciByZXN1bHQgPSBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gZ3JhcGhxbEltcGwoYXJnc09yU2NoZW1hKSA6IGdyYXBocWxJbXBsKHtcbiAgICBzY2hlbWE6IGFyZ3NPclNjaGVtYSxcbiAgICBzb3VyY2U6IHNvdXJjZSxcbiAgICByb290VmFsdWU6IHJvb3RWYWx1ZSxcbiAgICBjb250ZXh0VmFsdWU6IGNvbnRleHRWYWx1ZSxcbiAgICB2YXJpYWJsZVZhbHVlczogdmFyaWFibGVWYWx1ZXMsXG4gICAgb3BlcmF0aW9uTmFtZTogb3BlcmF0aW9uTmFtZSxcbiAgICBmaWVsZFJlc29sdmVyOiBmaWVsZFJlc29sdmVyLFxuICAgIHR5cGVSZXNvbHZlcjogdHlwZVJlc29sdmVyXG4gIH0pOyAvLyBBc3NlcnQgdGhhdCB0aGUgZXhlY3V0aW9uIHdhcyBzeW5jaHJvbm91cy5cblxuICBpZiAoaXNQcm9taXNlKHJlc3VsdCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0dyYXBoUUwgZXhlY3V0aW9uIGZhaWxlZCB0byBjb21wbGV0ZSBzeW5jaHJvbm91c2x5LicpO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gZ3JhcGhxbEltcGwoYXJncykge1xuICB2YXIgc2NoZW1hID0gYXJncy5zY2hlbWEsXG4gICAgICBzb3VyY2UgPSBhcmdzLnNvdXJjZSxcbiAgICAgIHJvb3RWYWx1ZSA9IGFyZ3Mucm9vdFZhbHVlLFxuICAgICAgY29udGV4dFZhbHVlID0gYXJncy5jb250ZXh0VmFsdWUsXG4gICAgICB2YXJpYWJsZVZhbHVlcyA9IGFyZ3MudmFyaWFibGVWYWx1ZXMsXG4gICAgICBvcGVyYXRpb25OYW1lID0gYXJncy5vcGVyYXRpb25OYW1lLFxuICAgICAgZmllbGRSZXNvbHZlciA9IGFyZ3MuZmllbGRSZXNvbHZlcixcbiAgICAgIHR5cGVSZXNvbHZlciA9IGFyZ3MudHlwZVJlc29sdmVyOyAvLyBWYWxpZGF0ZSBTY2hlbWFcblxuICB2YXIgc2NoZW1hVmFsaWRhdGlvbkVycm9ycyA9IHZhbGlkYXRlU2NoZW1hKHNjaGVtYSk7XG5cbiAgaWYgKHNjaGVtYVZhbGlkYXRpb25FcnJvcnMubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiB7XG4gICAgICBlcnJvcnM6IHNjaGVtYVZhbGlkYXRpb25FcnJvcnNcbiAgICB9O1xuICB9IC8vIFBhcnNlXG5cblxuICB2YXIgZG9jdW1lbnQ7XG5cbiAgdHJ5IHtcbiAgICBkb2N1bWVudCA9IHBhcnNlKHNvdXJjZSk7XG4gIH0gY2F0Y2ggKHN5bnRheEVycm9yKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGVycm9yczogW3N5bnRheEVycm9yXVxuICAgIH07XG4gIH0gLy8gVmFsaWRhdGVcblxuXG4gIHZhciB2YWxpZGF0aW9uRXJyb3JzID0gdmFsaWRhdGUoc2NoZW1hLCBkb2N1bWVudCk7XG5cbiAgaWYgKHZhbGlkYXRpb25FcnJvcnMubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiB7XG4gICAgICBlcnJvcnM6IHZhbGlkYXRpb25FcnJvcnNcbiAgICB9O1xuICB9IC8vIEV4ZWN1dGVcblxuXG4gIHJldHVybiBleGVjdXRlKHtcbiAgICBzY2hlbWE6IHNjaGVtYSxcbiAgICBkb2N1bWVudDogZG9jdW1lbnQsXG4gICAgcm9vdFZhbHVlOiByb290VmFsdWUsXG4gICAgY29udGV4dFZhbHVlOiBjb250ZXh0VmFsdWUsXG4gICAgdmFyaWFibGVWYWx1ZXM6IHZhcmlhYmxlVmFsdWVzLFxuICAgIG9wZXJhdGlvbk5hbWU6IG9wZXJhdGlvbk5hbWUsXG4gICAgZmllbGRSZXNvbHZlcjogZmllbGRSZXNvbHZlcixcbiAgICB0eXBlUmVzb2x2ZXI6IHR5cGVSZXNvbHZlclxuICB9KTtcbn1cbiIsIi8qKlxuICogR2l2ZW4gYSBQYXRoIGFuZCBhIGtleSwgcmV0dXJuIGEgbmV3IFBhdGggY29udGFpbmluZyB0aGUgbmV3IGtleS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFkZFBhdGgocHJldiwga2V5LCB0eXBlbmFtZSkge1xuICByZXR1cm4ge1xuICAgIHByZXY6IHByZXYsXG4gICAga2V5OiBrZXksXG4gICAgdHlwZW5hbWU6IHR5cGVuYW1lXG4gIH07XG59XG4vKipcbiAqIEdpdmVuIGEgUGF0aCwgcmV0dXJuIGFuIEFycmF5IG9mIHRoZSBwYXRoIGtleXMuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHBhdGhUb0FycmF5KHBhdGgpIHtcbiAgdmFyIGZsYXR0ZW5lZCA9IFtdO1xuICB2YXIgY3VyciA9IHBhdGg7XG5cbiAgd2hpbGUgKGN1cnIpIHtcbiAgICBmbGF0dGVuZWQucHVzaChjdXJyLmtleSk7XG4gICAgY3VyciA9IGN1cnIucHJldjtcbiAgfVxuXG4gIHJldHVybiBmbGF0dGVuZWQucmV2ZXJzZSgpO1xufVxuIiwiaW1wb3J0IGludmFyaWFudCBmcm9tIFwiLi9pbnZhcmlhbnQubWpzXCI7XG5pbXBvcnQgbm9kZWpzQ3VzdG9tSW5zcGVjdFN5bWJvbCBmcm9tIFwiLi9ub2RlanNDdXN0b21JbnNwZWN0U3ltYm9sLm1qc1wiO1xuLyoqXG4gKiBUaGUgYGRlZmluZUluc3BlY3QoKWAgZnVuY3Rpb24gZGVmaW5lcyBgaW5zcGVjdCgpYCBwcm90b3R5cGUgbWV0aG9kIGFzIGFsaWFzIG9mIGB0b0pTT05gXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVmaW5lSW5zcGVjdChjbGFzc09iamVjdCkge1xuICB2YXIgZm4gPSBjbGFzc09iamVjdC5wcm90b3R5cGUudG9KU09OO1xuICB0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicgfHwgaW52YXJpYW50KDApO1xuICBjbGFzc09iamVjdC5wcm90b3R5cGUuaW5zcGVjdCA9IGZuOyAvLyBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAoU2VlOiAnaHR0cHM6Ly9naXRodWIuY29tL2dyYXBocWwvZ3JhcGhxbC1qcy9pc3N1ZXMvMjMxNycpXG5cbiAgaWYgKG5vZGVqc0N1c3RvbUluc3BlY3RTeW1ib2wpIHtcbiAgICBjbGFzc09iamVjdC5wcm90b3R5cGVbbm9kZWpzQ3VzdG9tSW5zcGVjdFN5bWJvbF0gPSBmbjtcbiAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGV2QXNzZXJ0KGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuICB2YXIgYm9vbGVhbkNvbmRpdGlvbiA9IEJvb2xlYW4oY29uZGl0aW9uKTsgLy8gaXN0YW5idWwgaWdub3JlIGVsc2UgKFNlZSB0cmFuc2Zvcm1hdGlvbiBkb25lIGluICcuL3Jlc291cmNlcy9pbmxpbmVJbnZhcmlhbnQuanMnKVxuXG4gIGlmICghYm9vbGVhbkNvbmRpdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgfVxufVxuIiwidmFyIE1BWF9TVUdHRVNUSU9OUyA9IDU7XG4vKipcbiAqIEdpdmVuIFsgQSwgQiwgQyBdIHJldHVybiAnIERpZCB5b3UgbWVhbiBBLCBCLCBvciBDPycuXG4gKi9cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlZGVjbGFyZVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGlkWW91TWVhbihmaXJzdEFyZywgc2Vjb25kQXJnKSB7XG4gIHZhciBfcmVmID0gdHlwZW9mIGZpcnN0QXJnID09PSAnc3RyaW5nJyA/IFtmaXJzdEFyZywgc2Vjb25kQXJnXSA6IFt1bmRlZmluZWQsIGZpcnN0QXJnXSxcbiAgICAgIHN1Yk1lc3NhZ2UgPSBfcmVmWzBdLFxuICAgICAgc3VnZ2VzdGlvbnNBcmcgPSBfcmVmWzFdO1xuXG4gIHZhciBtZXNzYWdlID0gJyBEaWQgeW91IG1lYW4gJztcblxuICBpZiAoc3ViTWVzc2FnZSkge1xuICAgIG1lc3NhZ2UgKz0gc3ViTWVzc2FnZSArICcgJztcbiAgfVxuXG4gIHZhciBzdWdnZXN0aW9ucyA9IHN1Z2dlc3Rpb25zQXJnLm1hcChmdW5jdGlvbiAoeCkge1xuICAgIHJldHVybiBcIlxcXCJcIi5jb25jYXQoeCwgXCJcXFwiXCIpO1xuICB9KTtcblxuICBzd2l0Y2ggKHN1Z2dlc3Rpb25zLmxlbmd0aCkge1xuICAgIGNhc2UgMDpcbiAgICAgIHJldHVybiAnJztcblxuICAgIGNhc2UgMTpcbiAgICAgIHJldHVybiBtZXNzYWdlICsgc3VnZ2VzdGlvbnNbMF0gKyAnPyc7XG5cbiAgICBjYXNlIDI6XG4gICAgICByZXR1cm4gbWVzc2FnZSArIHN1Z2dlc3Rpb25zWzBdICsgJyBvciAnICsgc3VnZ2VzdGlvbnNbMV0gKyAnPyc7XG4gIH1cblxuICB2YXIgc2VsZWN0ZWQgPSBzdWdnZXN0aW9ucy5zbGljZSgwLCBNQVhfU1VHR0VTVElPTlMpO1xuICB2YXIgbGFzdEl0ZW0gPSBzZWxlY3RlZC5wb3AoKTtcbiAgcmV0dXJuIG1lc3NhZ2UgKyBzZWxlY3RlZC5qb2luKCcsICcpICsgJywgb3IgJyArIGxhc3RJdGVtICsgJz8nO1xufVxuIiwiLyoqXG4gKiBSZXR1cm5zIHRoZSBmaXJzdCBhcmd1bWVudCBpdCByZWNlaXZlcy5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaWRlbnRpdHlGdW5jKHgpIHtcbiAgcmV0dXJuIHg7XG59XG4iLCJmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbi8qIGVzbGludC1kaXNhYmxlIGZsb3d0eXBlL25vLXdlYWstdHlwZXMgKi9cbmltcG9ydCBub2RlanNDdXN0b21JbnNwZWN0U3ltYm9sIGZyb20gXCIuL25vZGVqc0N1c3RvbUluc3BlY3RTeW1ib2wubWpzXCI7XG52YXIgTUFYX0FSUkFZX0xFTkdUSCA9IDEwO1xudmFyIE1BWF9SRUNVUlNJVkVfREVQVEggPSAyO1xuLyoqXG4gKiBVc2VkIHRvIHByaW50IHZhbHVlcyBpbiBlcnJvciBtZXNzYWdlcy5cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpbnNwZWN0KHZhbHVlKSB7XG4gIHJldHVybiBmb3JtYXRWYWx1ZSh2YWx1ZSwgW10pO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRWYWx1ZSh2YWx1ZSwgc2VlblZhbHVlcykge1xuICBzd2l0Y2ggKF90eXBlb2YodmFsdWUpKSB7XG4gICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG5cbiAgICBjYXNlICdmdW5jdGlvbic6XG4gICAgICByZXR1cm4gdmFsdWUubmFtZSA/IFwiW2Z1bmN0aW9uIFwiLmNvbmNhdCh2YWx1ZS5uYW1lLCBcIl1cIikgOiAnW2Z1bmN0aW9uXSc7XG5cbiAgICBjYXNlICdvYmplY3QnOlxuICAgICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiAnbnVsbCc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmb3JtYXRPYmplY3RWYWx1ZSh2YWx1ZSwgc2VlblZhbHVlcyk7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIFN0cmluZyh2YWx1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZm9ybWF0T2JqZWN0VmFsdWUodmFsdWUsIHByZXZpb3VzbHlTZWVuVmFsdWVzKSB7XG4gIGlmIChwcmV2aW91c2x5U2VlblZhbHVlcy5pbmRleE9mKHZhbHVlKSAhPT0gLTEpIHtcbiAgICByZXR1cm4gJ1tDaXJjdWxhcl0nO1xuICB9XG5cbiAgdmFyIHNlZW5WYWx1ZXMgPSBbXS5jb25jYXQocHJldmlvdXNseVNlZW5WYWx1ZXMsIFt2YWx1ZV0pO1xuICB2YXIgY3VzdG9tSW5zcGVjdEZuID0gZ2V0Q3VzdG9tRm4odmFsdWUpO1xuXG4gIGlmIChjdXN0b21JbnNwZWN0Rm4gIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBjdXN0b21WYWx1ZSA9IGN1c3RvbUluc3BlY3RGbi5jYWxsKHZhbHVlKTsgLy8gY2hlY2sgZm9yIGluZmluaXRlIHJlY3Vyc2lvblxuXG4gICAgaWYgKGN1c3RvbVZhbHVlICE9PSB2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiBjdXN0b21WYWx1ZSA9PT0gJ3N0cmluZycgPyBjdXN0b21WYWx1ZSA6IGZvcm1hdFZhbHVlKGN1c3RvbVZhbHVlLCBzZWVuVmFsdWVzKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZm9ybWF0QXJyYXkodmFsdWUsIHNlZW5WYWx1ZXMpO1xuICB9XG5cbiAgcmV0dXJuIGZvcm1hdE9iamVjdCh2YWx1ZSwgc2VlblZhbHVlcyk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdE9iamVjdChvYmplY3QsIHNlZW5WYWx1ZXMpIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuXG4gIGlmIChrZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiAne30nO1xuICB9XG5cbiAgaWYgKHNlZW5WYWx1ZXMubGVuZ3RoID4gTUFYX1JFQ1VSU0lWRV9ERVBUSCkge1xuICAgIHJldHVybiAnWycgKyBnZXRPYmplY3RUYWcob2JqZWN0KSArICddJztcbiAgfVxuXG4gIHZhciBwcm9wZXJ0aWVzID0ga2V5cy5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciB2YWx1ZSA9IGZvcm1hdFZhbHVlKG9iamVjdFtrZXldLCBzZWVuVmFsdWVzKTtcbiAgICByZXR1cm4ga2V5ICsgJzogJyArIHZhbHVlO1xuICB9KTtcbiAgcmV0dXJuICd7ICcgKyBwcm9wZXJ0aWVzLmpvaW4oJywgJykgKyAnIH0nO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRBcnJheShhcnJheSwgc2VlblZhbHVlcykge1xuICBpZiAoYXJyYXkubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuICdbXSc7XG4gIH1cblxuICBpZiAoc2VlblZhbHVlcy5sZW5ndGggPiBNQVhfUkVDVVJTSVZFX0RFUFRIKSB7XG4gICAgcmV0dXJuICdbQXJyYXldJztcbiAgfVxuXG4gIHZhciBsZW4gPSBNYXRoLm1pbihNQVhfQVJSQVlfTEVOR1RILCBhcnJheS5sZW5ndGgpO1xuICB2YXIgcmVtYWluaW5nID0gYXJyYXkubGVuZ3RoIC0gbGVuO1xuICB2YXIgaXRlbXMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgaXRlbXMucHVzaChmb3JtYXRWYWx1ZShhcnJheVtpXSwgc2VlblZhbHVlcykpO1xuICB9XG5cbiAgaWYgKHJlbWFpbmluZyA9PT0gMSkge1xuICAgIGl0ZW1zLnB1c2goJy4uLiAxIG1vcmUgaXRlbScpO1xuICB9IGVsc2UgaWYgKHJlbWFpbmluZyA+IDEpIHtcbiAgICBpdGVtcy5wdXNoKFwiLi4uIFwiLmNvbmNhdChyZW1haW5pbmcsIFwiIG1vcmUgaXRlbXNcIikpO1xuICB9XG5cbiAgcmV0dXJuICdbJyArIGl0ZW1zLmpvaW4oJywgJykgKyAnXSc7XG59XG5cbmZ1bmN0aW9uIGdldEN1c3RvbUZuKG9iamVjdCkge1xuICB2YXIgY3VzdG9tSW5zcGVjdEZuID0gb2JqZWN0W1N0cmluZyhub2RlanNDdXN0b21JbnNwZWN0U3ltYm9sKV07XG5cbiAgaWYgKHR5cGVvZiBjdXN0b21JbnNwZWN0Rm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gY3VzdG9tSW5zcGVjdEZuO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvYmplY3QuaW5zcGVjdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBvYmplY3QuaW5zcGVjdDtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRPYmplY3RUYWcob2JqZWN0KSB7XG4gIHZhciB0YWcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqZWN0KS5yZXBsYWNlKC9eXFxbb2JqZWN0IC8sICcnKS5yZXBsYWNlKC9dJC8sICcnKTtcblxuICBpZiAodGFnID09PSAnT2JqZWN0JyAmJiB0eXBlb2Ygb2JqZWN0LmNvbnN0cnVjdG9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIG5hbWUgPSBvYmplY3QuY29uc3RydWN0b3IubmFtZTtcblxuICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycgJiYgbmFtZSAhPT0gJycpIHtcbiAgICAgIHJldHVybiBuYW1lO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YWc7XG59XG4iLCJmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmltcG9ydCBpbnNwZWN0IGZyb20gXCIuL2luc3BlY3QubWpzXCI7XG4vKipcbiAqIEEgcmVwbGFjZW1lbnQgZm9yIGluc3RhbmNlb2Ygd2hpY2ggaW5jbHVkZXMgYW4gZXJyb3Igd2FybmluZyB3aGVuIG11bHRpLXJlYWxtXG4gKiBjb25zdHJ1Y3RvcnMgYXJlIGRldGVjdGVkLlxuICovXG5cbi8vIFNlZTogaHR0cHM6Ly9leHByZXNzanMuY29tL2VuL2FkdmFuY2VkL2Jlc3QtcHJhY3RpY2UtcGVyZm9ybWFuY2UuaHRtbCNzZXQtbm9kZV9lbnYtdG8tcHJvZHVjdGlvblxuLy8gU2VlOiBodHRwczovL3dlYnBhY2suanMub3JnL2d1aWRlcy9wcm9kdWN0aW9uL1xuZXhwb3J0IGRlZmF1bHQgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJyA/IC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0IChTZWU6ICdodHRwczovL2dpdGh1Yi5jb20vZ3JhcGhxbC9ncmFwaHFsLWpzL2lzc3Vlcy8yMzE3Jylcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zaGFkb3dcbmZ1bmN0aW9uIGluc3RhbmNlT2YodmFsdWUsIGNvbnN0cnVjdG9yKSB7XG4gIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIGNvbnN0cnVjdG9yO1xufSA6IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zaGFkb3dcbmZ1bmN0aW9uIGluc3RhbmNlT2YodmFsdWUsIGNvbnN0cnVjdG9yKSB7XG4gIGlmICh2YWx1ZSBpbnN0YW5jZW9mIGNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoX3R5cGVvZih2YWx1ZSkgPT09ICdvYmplY3QnICYmIHZhbHVlICE9PSBudWxsKSB7XG4gICAgdmFyIF92YWx1ZSRjb25zdHJ1Y3RvcjtcblxuICAgIHZhciBjbGFzc05hbWUgPSBjb25zdHJ1Y3Rvci5wcm90b3R5cGVbU3ltYm9sLnRvU3RyaW5nVGFnXTtcbiAgICB2YXIgdmFsdWVDbGFzc05hbWUgPSAvLyBXZSBzdGlsbCBuZWVkIHRvIHN1cHBvcnQgY29uc3RydWN0b3IncyBuYW1lIHRvIGRldGVjdCBjb25mbGljdHMgd2l0aCBvbGRlciB2ZXJzaW9ucyBvZiB0aGlzIGxpYnJhcnkuXG4gICAgU3ltYm9sLnRvU3RyaW5nVGFnIGluIHZhbHVlID8gdmFsdWVbU3ltYm9sLnRvU3RyaW5nVGFnXSA6IChfdmFsdWUkY29uc3RydWN0b3IgPSB2YWx1ZS5jb25zdHJ1Y3RvcikgPT09IG51bGwgfHwgX3ZhbHVlJGNvbnN0cnVjdG9yID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdmFsdWUkY29uc3RydWN0b3IubmFtZTtcblxuICAgIGlmIChjbGFzc05hbWUgPT09IHZhbHVlQ2xhc3NOYW1lKSB7XG4gICAgICB2YXIgc3RyaW5naWZpZWRWYWx1ZSA9IGluc3BlY3QodmFsdWUpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IHVzZSBcIi5jb25jYXQoY2xhc3NOYW1lLCBcIiBcXFwiXCIpLmNvbmNhdChzdHJpbmdpZmllZFZhbHVlLCBcIlxcXCIgZnJvbSBhbm90aGVyIG1vZHVsZSBvciByZWFsbS5cXG5cXG5FbnN1cmUgdGhhdCB0aGVyZSBpcyBvbmx5IG9uZSBpbnN0YW5jZSBvZiBcXFwiZ3JhcGhxbFxcXCIgaW4gdGhlIG5vZGVfbW9kdWxlc1xcbmRpcmVjdG9yeS4gSWYgZGlmZmVyZW50IHZlcnNpb25zIG9mIFxcXCJncmFwaHFsXFxcIiBhcmUgdGhlIGRlcGVuZGVuY2llcyBvZiBvdGhlclxcbnJlbGllZCBvbiBtb2R1bGVzLCB1c2UgXFxcInJlc29sdXRpb25zXFxcIiB0byBlbnN1cmUgb25seSBvbmUgdmVyc2lvbiBpcyBpbnN0YWxsZWQuXFxuXFxuaHR0cHM6Ly95YXJucGtnLmNvbS9lbi9kb2NzL3NlbGVjdGl2ZS12ZXJzaW9uLXJlc29sdXRpb25zXFxuXFxuRHVwbGljYXRlIFxcXCJncmFwaHFsXFxcIiBtb2R1bGVzIGNhbm5vdCBiZSB1c2VkIGF0IHRoZSBzYW1lIHRpbWUgc2luY2UgZGlmZmVyZW50XFxudmVyc2lvbnMgbWF5IGhhdmUgZGlmZmVyZW50IGNhcGFiaWxpdGllcyBhbmQgYmVoYXZpb3IuIFRoZSBkYXRhIGZyb20gb25lXFxudmVyc2lvbiB1c2VkIGluIHRoZSBmdW5jdGlvbiBmcm9tIGFub3RoZXIgY291bGQgcHJvZHVjZSBjb25mdXNpbmcgYW5kXFxuc3B1cmlvdXMgcmVzdWx0cy5cIikpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn07XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uLCBtZXNzYWdlKSB7XG4gIHZhciBib29sZWFuQ29uZGl0aW9uID0gQm9vbGVhbihjb25kaXRpb24pOyAvLyBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAoU2VlIHRyYW5zZm9ybWF0aW9uIGRvbmUgaW4gJy4vcmVzb3VyY2VzL2lubGluZUludmFyaWFudC5qcycpXG5cbiAgaWYgKCFib29sZWFuQ29uZGl0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UgIT0gbnVsbCA/IG1lc3NhZ2UgOiAnVW5leHBlY3RlZCBpbnZhcmlhbnQgdHJpZ2dlcmVkLicpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBTWU1CT0xfQVNZTkNfSVRFUkFUT1IgfSBmcm9tIFwiLi4vcG9seWZpbGxzL3N5bWJvbHMubWpzXCI7XG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgcHJvdmlkZWQgb2JqZWN0IGltcGxlbWVudHMgdGhlIEFzeW5jSXRlcmF0b3IgcHJvdG9jb2wgdmlhXG4gKiBlaXRoZXIgaW1wbGVtZW50aW5nIGEgYFN5bWJvbC5hc3luY0l0ZXJhdG9yYCBvciBgXCJAQGFzeW5jSXRlcmF0b3JcImAgbWV0aG9kLlxuICovXG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZWRlY2xhcmVcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzQXN5bmNJdGVyYWJsZShtYXliZUFzeW5jSXRlcmFibGUpIHtcbiAgcmV0dXJuIHR5cGVvZiAobWF5YmVBc3luY0l0ZXJhYmxlID09PSBudWxsIHx8IG1heWJlQXN5bmNJdGVyYWJsZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogbWF5YmVBc3luY0l0ZXJhYmxlW1NZTUJPTF9BU1lOQ19JVEVSQVRPUl0pID09PSAnZnVuY3Rpb24nO1xufVxuIiwiZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG4vKipcbiAqIFJldHVybiB0cnVlIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3RcbiAqIGBudWxsYCBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gX3R5cGVvZih2YWx1ZSkgPT0gJ29iamVjdCcgJiYgdmFsdWUgIT09IG51bGw7XG59XG4iLCIvKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgdmFsdWUgYWN0cyBsaWtlIGEgUHJvbWlzZSwgaS5lLiBoYXMgYSBcInRoZW5cIiBmdW5jdGlvbixcbiAqIG90aGVyd2lzZSByZXR1cm5zIGZhbHNlLlxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVkZWNsYXJlXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc1Byb21pc2UodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHZhbHVlLnRoZW4pID09PSAnZnVuY3Rpb24nO1xufVxuIiwiLyoqXG4gKiBDcmVhdGVzIGEga2V5ZWQgSlMgb2JqZWN0IGZyb20gYW4gYXJyYXksIGdpdmVuIGEgZnVuY3Rpb24gdG8gcHJvZHVjZSB0aGUga2V5c1xuICogZm9yIGVhY2ggdmFsdWUgaW4gdGhlIGFycmF5LlxuICpcbiAqIFRoaXMgcHJvdmlkZXMgYSBjb252ZW5pZW50IGxvb2t1cCBmb3IgdGhlIGFycmF5IGl0ZW1zIGlmIHRoZSBrZXkgZnVuY3Rpb25cbiAqIHByb2R1Y2VzIHVuaXF1ZSByZXN1bHRzLlxuICpcbiAqICAgICBjb25zdCBwaG9uZUJvb2sgPSBbXG4gKiAgICAgICB7IG5hbWU6ICdKb24nLCBudW06ICc1NTUtMTIzNCcgfSxcbiAqICAgICAgIHsgbmFtZTogJ0plbm55JywgbnVtOiAnODY3LTUzMDknIH1cbiAqICAgICBdXG4gKlxuICogICAgIC8vIHsgSm9uOiB7IG5hbWU6ICdKb24nLCBudW06ICc1NTUtMTIzNCcgfSxcbiAqICAgICAvLyAgIEplbm55OiB7IG5hbWU6ICdKZW5ueScsIG51bTogJzg2Ny01MzA5JyB9IH1cbiAqICAgICBjb25zdCBlbnRyaWVzQnlOYW1lID0ga2V5TWFwKFxuICogICAgICAgcGhvbmVCb29rLFxuICogICAgICAgZW50cnkgPT4gZW50cnkubmFtZVxuICogICAgIClcbiAqXG4gKiAgICAgLy8geyBuYW1lOiAnSmVubnknLCBudW06ICc4NTctNjMwOScgfVxuICogICAgIGNvbnN0IGplbm55RW50cnkgPSBlbnRyaWVzQnlOYW1lWydKZW5ueSddXG4gKlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBrZXlNYXAobGlzdCwga2V5Rm4pIHtcbiAgcmV0dXJuIGxpc3QucmVkdWNlKGZ1bmN0aW9uIChtYXAsIGl0ZW0pIHtcbiAgICBtYXBba2V5Rm4oaXRlbSldID0gaXRlbTtcbiAgICByZXR1cm4gbWFwO1xuICB9LCBPYmplY3QuY3JlYXRlKG51bGwpKTtcbn1cbiIsIi8qKlxuICogQ3JlYXRlcyBhIGtleWVkIEpTIG9iamVjdCBmcm9tIGFuIGFycmF5LCBnaXZlbiBhIGZ1bmN0aW9uIHRvIHByb2R1Y2UgdGhlIGtleXNcbiAqIGFuZCBhIGZ1bmN0aW9uIHRvIHByb2R1Y2UgdGhlIHZhbHVlcyBmcm9tIGVhY2ggaXRlbSBpbiB0aGUgYXJyYXkuXG4gKlxuICogICAgIGNvbnN0IHBob25lQm9vayA9IFtcbiAqICAgICAgIHsgbmFtZTogJ0pvbicsIG51bTogJzU1NS0xMjM0JyB9LFxuICogICAgICAgeyBuYW1lOiAnSmVubnknLCBudW06ICc4NjctNTMwOScgfVxuICogICAgIF1cbiAqXG4gKiAgICAgLy8geyBKb246ICc1NTUtMTIzNCcsIEplbm55OiAnODY3LTUzMDknIH1cbiAqICAgICBjb25zdCBwaG9uZXNCeU5hbWUgPSBrZXlWYWxNYXAoXG4gKiAgICAgICBwaG9uZUJvb2ssXG4gKiAgICAgICBlbnRyeSA9PiBlbnRyeS5uYW1lLFxuICogICAgICAgZW50cnkgPT4gZW50cnkubnVtXG4gKiAgICAgKVxuICpcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ga2V5VmFsTWFwKGxpc3QsIGtleUZuLCB2YWxGbikge1xuICByZXR1cm4gbGlzdC5yZWR1Y2UoZnVuY3Rpb24gKG1hcCwgaXRlbSkge1xuICAgIG1hcFtrZXlGbihpdGVtKV0gPSB2YWxGbihpdGVtKTtcbiAgICByZXR1cm4gbWFwO1xuICB9LCBPYmplY3QuY3JlYXRlKG51bGwpKTtcbn1cbiIsImltcG9ydCBvYmplY3RFbnRyaWVzIGZyb20gXCIuLi9wb2x5ZmlsbHMvb2JqZWN0RW50cmllcy5tanNcIjtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIG9iamVjdCBtYXAgd2l0aCB0aGUgc2FtZSBrZXlzIGFzIGBtYXBgIGFuZCB2YWx1ZXMgZ2VuZXJhdGVkIGJ5XG4gKiBydW5uaW5nIGVhY2ggdmFsdWUgb2YgYG1hcGAgdGhydSBgZm5gLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtYXBWYWx1ZShtYXAsIGZuKSB7XG4gIHZhciByZXN1bHQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gIGZvciAodmFyIF9pMiA9IDAsIF9vYmplY3RFbnRyaWVzMiA9IG9iamVjdEVudHJpZXMobWFwKTsgX2kyIDwgX29iamVjdEVudHJpZXMyLmxlbmd0aDsgX2kyKyspIHtcbiAgICB2YXIgX3JlZjIgPSBfb2JqZWN0RW50cmllczJbX2kyXTtcbiAgICB2YXIgX2tleSA9IF9yZWYyWzBdO1xuICAgIHZhciBfdmFsdWUgPSBfcmVmMlsxXTtcbiAgICByZXN1bHRbX2tleV0gPSBmbihfdmFsdWUsIF9rZXkpO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbiIsIi8qKlxuICogTWVtb2l6ZXMgdGhlIHByb3ZpZGVkIHRocmVlLWFyZ3VtZW50IGZ1bmN0aW9uLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtZW1vaXplMyhmbikge1xuICB2YXIgY2FjaGUwO1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb2l6ZWQoYTEsIGEyLCBhMykge1xuICAgIGlmICghY2FjaGUwKSB7XG4gICAgICBjYWNoZTAgPSBuZXcgV2Vha01hcCgpO1xuICAgIH1cblxuICAgIHZhciBjYWNoZTEgPSBjYWNoZTAuZ2V0KGExKTtcbiAgICB2YXIgY2FjaGUyO1xuXG4gICAgaWYgKGNhY2hlMSkge1xuICAgICAgY2FjaGUyID0gY2FjaGUxLmdldChhMik7XG5cbiAgICAgIGlmIChjYWNoZTIpIHtcbiAgICAgICAgdmFyIGNhY2hlZFZhbHVlID0gY2FjaGUyLmdldChhMyk7XG5cbiAgICAgICAgaWYgKGNhY2hlZFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICByZXR1cm4gY2FjaGVkVmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY2FjaGUxID0gbmV3IFdlYWtNYXAoKTtcbiAgICAgIGNhY2hlMC5zZXQoYTEsIGNhY2hlMSk7XG4gICAgfVxuXG4gICAgaWYgKCFjYWNoZTIpIHtcbiAgICAgIGNhY2hlMiA9IG5ldyBXZWFrTWFwKCk7XG4gICAgICBjYWNoZTEuc2V0KGEyLCBjYWNoZTIpO1xuICAgIH1cblxuICAgIHZhciBuZXdWYWx1ZSA9IGZuKGExLCBhMiwgYTMpO1xuICAgIGNhY2hlMi5zZXQoYTMsIG5ld1ZhbHVlKTtcbiAgICByZXR1cm4gbmV3VmFsdWU7XG4gIH07XG59XG4iLCIvKipcbiAqIFJldHVybnMgYSBudW1iZXIgaW5kaWNhdGluZyB3aGV0aGVyIGEgcmVmZXJlbmNlIHN0cmluZyBjb21lcyBiZWZvcmUsIG9yIGFmdGVyLFxuICogb3IgaXMgdGhlIHNhbWUgYXMgdGhlIGdpdmVuIHN0cmluZyBpbiBuYXR1cmFsIHNvcnQgb3JkZXIuXG4gKlxuICogU2VlOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9OYXR1cmFsX3NvcnRfb3JkZXJcbiAqXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5hdHVyYWxDb21wYXJlKGFTdHIsIGJTdHIpIHtcbiAgdmFyIGFJZHggPSAwO1xuICB2YXIgYklkeCA9IDA7XG5cbiAgd2hpbGUgKGFJZHggPCBhU3RyLmxlbmd0aCAmJiBiSWR4IDwgYlN0ci5sZW5ndGgpIHtcbiAgICB2YXIgYUNoYXIgPSBhU3RyLmNoYXJDb2RlQXQoYUlkeCk7XG4gICAgdmFyIGJDaGFyID0gYlN0ci5jaGFyQ29kZUF0KGJJZHgpO1xuXG4gICAgaWYgKGlzRGlnaXQoYUNoYXIpICYmIGlzRGlnaXQoYkNoYXIpKSB7XG4gICAgICB2YXIgYU51bSA9IDA7XG5cbiAgICAgIGRvIHtcbiAgICAgICAgKythSWR4O1xuICAgICAgICBhTnVtID0gYU51bSAqIDEwICsgYUNoYXIgLSBESUdJVF8wO1xuICAgICAgICBhQ2hhciA9IGFTdHIuY2hhckNvZGVBdChhSWR4KTtcbiAgICAgIH0gd2hpbGUgKGlzRGlnaXQoYUNoYXIpICYmIGFOdW0gPiAwKTtcblxuICAgICAgdmFyIGJOdW0gPSAwO1xuXG4gICAgICBkbyB7XG4gICAgICAgICsrYklkeDtcbiAgICAgICAgYk51bSA9IGJOdW0gKiAxMCArIGJDaGFyIC0gRElHSVRfMDtcbiAgICAgICAgYkNoYXIgPSBiU3RyLmNoYXJDb2RlQXQoYklkeCk7XG4gICAgICB9IHdoaWxlIChpc0RpZ2l0KGJDaGFyKSAmJiBiTnVtID4gMCk7XG5cbiAgICAgIGlmIChhTnVtIDwgYk51bSkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG5cbiAgICAgIGlmIChhTnVtID4gYk51bSkge1xuICAgICAgICByZXR1cm4gMTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGFDaGFyIDwgYkNoYXIpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuXG4gICAgICBpZiAoYUNoYXIgPiBiQ2hhcikge1xuICAgICAgICByZXR1cm4gMTtcbiAgICAgIH1cblxuICAgICAgKythSWR4O1xuICAgICAgKytiSWR4O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhU3RyLmxlbmd0aCAtIGJTdHIubGVuZ3RoO1xufVxudmFyIERJR0lUXzAgPSA0ODtcbnZhciBESUdJVF85ID0gNTc7XG5cbmZ1bmN0aW9uIGlzRGlnaXQoY29kZSkge1xuICByZXR1cm4gIWlzTmFOKGNvZGUpICYmIERJR0lUXzAgPD0gY29kZSAmJiBjb2RlIDw9IERJR0lUXzk7XG59XG4iLCIvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAoU2VlOiAnaHR0cHM6Ly9naXRodWIuY29tL2dyYXBocWwvZ3JhcGhxbC1qcy9pc3N1ZXMvMjMxNycpXG52YXIgbm9kZWpzQ3VzdG9tSW5zcGVjdFN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFN5bWJvbC5mb3IgPT09ICdmdW5jdGlvbicgPyBTeW1ib2wuZm9yKCdub2RlanMudXRpbC5pbnNwZWN0LmN1c3RvbScpIDogdW5kZWZpbmVkO1xuZXhwb3J0IGRlZmF1bHQgbm9kZWpzQ3VzdG9tSW5zcGVjdFN5bWJvbDtcbiIsIi8qKlxuICogQnVpbGQgYSBzdHJpbmcgZGVzY3JpYmluZyB0aGUgcGF0aC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcHJpbnRQYXRoQXJyYXkocGF0aCkge1xuICByZXR1cm4gcGF0aC5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiB0eXBlb2Yga2V5ID09PSAnbnVtYmVyJyA/ICdbJyArIGtleS50b1N0cmluZygpICsgJ10nIDogJy4nICsga2V5O1xuICB9KS5qb2luKCcnKTtcbn1cbiIsIi8qKlxuICogVGhpcyBmdW5jdGlvbiB0cmFuc2Zvcm1zIGEgSlMgb2JqZWN0IGBPYmpNYXA8UHJvbWlzZTxUPj5gIGludG9cbiAqIGEgYFByb21pc2U8T2JqTWFwPFQ+PmBcbiAqXG4gKiBUaGlzIGlzIGFraW4gdG8gYmx1ZWJpcmQncyBgUHJvbWlzZS5wcm9wc2AsIGJ1dCBpbXBsZW1lbnRlZCBvbmx5IHVzaW5nXG4gKiBgUHJvbWlzZS5hbGxgIHNvIGl0IHdpbGwgd29yayB3aXRoIGFueSBpbXBsZW1lbnRhdGlvbiBvZiBFUzYgcHJvbWlzZXMuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHByb21pc2VGb3JPYmplY3Qob2JqZWN0KSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTtcbiAgdmFyIHZhbHVlc0FuZFByb21pc2VzID0ga2V5cy5tYXAoZnVuY3Rpb24gKG5hbWUpIHtcbiAgICByZXR1cm4gb2JqZWN0W25hbWVdO1xuICB9KTtcbiAgcmV0dXJuIFByb21pc2UuYWxsKHZhbHVlc0FuZFByb21pc2VzKS50aGVuKGZ1bmN0aW9uICh2YWx1ZXMpIHtcbiAgICByZXR1cm4gdmFsdWVzLnJlZHVjZShmdW5jdGlvbiAocmVzb2x2ZWRPYmplY3QsIHZhbHVlLCBpKSB7XG4gICAgICByZXNvbHZlZE9iamVjdFtrZXlzW2ldXSA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHJlc29sdmVkT2JqZWN0O1xuICAgIH0sIE9iamVjdC5jcmVhdGUobnVsbCkpO1xuICB9KTtcbn1cbiIsImltcG9ydCBpc1Byb21pc2UgZnJvbSBcIi4vaXNQcm9taXNlLm1qc1wiO1xuLyoqXG4gKiBTaW1pbGFyIHRvIEFycmF5LnByb3RvdHlwZS5yZWR1Y2UoKSwgaG93ZXZlciB0aGUgcmVkdWNpbmcgY2FsbGJhY2sgbWF5IHJldHVyblxuICogYSBQcm9taXNlLCBpbiB3aGljaCBjYXNlIHJlZHVjdGlvbiB3aWxsIGNvbnRpbnVlIGFmdGVyIGVhY2ggcHJvbWlzZSByZXNvbHZlcy5cbiAqXG4gKiBJZiB0aGUgY2FsbGJhY2sgZG9lcyBub3QgcmV0dXJuIGEgUHJvbWlzZSwgdGhlbiB0aGlzIGZ1bmN0aW9uIHdpbGwgYWxzbyBub3RcbiAqIHJldHVybiBhIFByb21pc2UuXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcHJvbWlzZVJlZHVjZSh2YWx1ZXMsIGNhbGxiYWNrLCBpbml0aWFsVmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlcy5yZWR1Y2UoZnVuY3Rpb24gKHByZXZpb3VzLCB2YWx1ZSkge1xuICAgIHJldHVybiBpc1Byb21pc2UocHJldmlvdXMpID8gcHJldmlvdXMudGhlbihmdW5jdGlvbiAocmVzb2x2ZWQpIHtcbiAgICAgIHJldHVybiBjYWxsYmFjayhyZXNvbHZlZCwgdmFsdWUpO1xuICAgIH0pIDogY2FsbGJhY2socHJldmlvdXMsIHZhbHVlKTtcbiAgfSwgaW5pdGlhbFZhbHVlKTtcbn1cbiIsImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuaW1wb3J0IHsgU1lNQk9MX0lURVJBVE9SIH0gZnJvbSBcIi4uL3BvbHlmaWxscy9zeW1ib2xzLm1qc1wiO1xuLyoqXG4gKiBTYWZlciB2ZXJzaW9uIG9mIGBBcnJheS5mcm9tYCB0aGF0IHJldHVybiBgbnVsbGAgaWYgdmFsdWUgaXNuJ3QgY29udmVydGlibGUgdG8gYXJyYXkuXG4gKiBBbHNvIHByb3RlY3RzIGFnYWluc3QgQXJyYXktbGlrZSBvYmplY3RzIHdpdGhvdXQgaXRlbXMuXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiBzYWZlQXJyYXlGcm9tKFsgMSwgMiwgMyBdKSAvLyBbMSwgMiwgM11cbiAqIHNhZmVBcnJheUZyb20oJ0FCQycpIC8vIG51bGxcbiAqIHNhZmVBcnJheUZyb20oeyBsZW5ndGg6IDEgfSkgLy8gbnVsbFxuICogc2FmZUFycmF5RnJvbSh7IGxlbmd0aDogMSwgMDogJ0FscGhhJyB9KSAvLyBbJ0FscGhhJ11cbiAqIHNhZmVBcnJheUZyb20oeyBrZXk6ICd2YWx1ZScgfSkgLy8gbnVsbFxuICogc2FmZUFycmF5RnJvbShuZXcgTWFwKCkpIC8vIFtdXG4gKlxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNhZmVBcnJheUZyb20oY29sbGVjdGlvbikge1xuICB2YXIgbWFwRm4gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgcmV0dXJuIGl0ZW07XG4gIH07XG5cbiAgaWYgKGNvbGxlY3Rpb24gPT0gbnVsbCB8fCBfdHlwZW9mKGNvbGxlY3Rpb24pICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkoY29sbGVjdGlvbikpIHtcbiAgICByZXR1cm4gY29sbGVjdGlvbi5tYXAobWFwRm4pO1xuICB9IC8vIElzIEl0ZXJhYmxlP1xuXG5cbiAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gY29sbGVjdGlvbltTWU1CT0xfSVRFUkFUT1JdO1xuXG4gIGlmICh0eXBlb2YgaXRlcmF0b3JNZXRob2QgPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS11c2VdXG4gICAgdmFyIGl0ZXJhdG9yID0gaXRlcmF0b3JNZXRob2QuY2FsbChjb2xsZWN0aW9uKTtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIHN0ZXA7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyArK2kpIHtcbiAgICAgIHJlc3VsdC5wdXNoKG1hcEZuKHN0ZXAudmFsdWUsIGkpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9IC8vIElzIEFycmF5IGxpa2U/XG5cblxuICB2YXIgbGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGg7XG5cbiAgaWYgKHR5cGVvZiBsZW5ndGggPT09ICdudW1iZXInICYmIGxlbmd0aCA+PSAwICYmIGxlbmd0aCAlIDEgPT09IDApIHtcbiAgICB2YXIgX3Jlc3VsdCA9IFtdO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxlbmd0aDsgKytfaSkge1xuICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoY29sbGVjdGlvbiwgX2kpKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICBfcmVzdWx0LnB1c2gobWFwRm4oY29sbGVjdGlvbltTdHJpbmcoX2kpXSwgX2kpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3Jlc3VsdDtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuIiwiaW1wb3J0IG5hdHVyYWxDb21wYXJlIGZyb20gXCIuL25hdHVyYWxDb21wYXJlLm1qc1wiO1xuLyoqXG4gKiBHaXZlbiBhbiBpbnZhbGlkIGlucHV0IHN0cmluZyBhbmQgYSBsaXN0IG9mIHZhbGlkIG9wdGlvbnMsIHJldHVybnMgYSBmaWx0ZXJlZFxuICogbGlzdCBvZiB2YWxpZCBvcHRpb25zIHNvcnRlZCBiYXNlZCBvbiB0aGVpciBzaW1pbGFyaXR5IHdpdGggdGhlIGlucHV0LlxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN1Z2dlc3Rpb25MaXN0KGlucHV0LCBvcHRpb25zKSB7XG4gIHZhciBvcHRpb25zQnlEaXN0YW5jZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHZhciBsZXhpY2FsRGlzdGFuY2UgPSBuZXcgTGV4aWNhbERpc3RhbmNlKGlucHV0KTtcbiAgdmFyIHRocmVzaG9sZCA9IE1hdGguZmxvb3IoaW5wdXQubGVuZ3RoICogMC40KSArIDE7XG5cbiAgZm9yICh2YXIgX2kyID0gMDsgX2kyIDwgb3B0aW9ucy5sZW5ndGg7IF9pMisrKSB7XG4gICAgdmFyIG9wdGlvbiA9IG9wdGlvbnNbX2kyXTtcbiAgICB2YXIgZGlzdGFuY2UgPSBsZXhpY2FsRGlzdGFuY2UubWVhc3VyZShvcHRpb24sIHRocmVzaG9sZCk7XG5cbiAgICBpZiAoZGlzdGFuY2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgb3B0aW9uc0J5RGlzdGFuY2Vbb3B0aW9uXSA9IGRpc3RhbmNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBPYmplY3Qua2V5cyhvcHRpb25zQnlEaXN0YW5jZSkuc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgIHZhciBkaXN0YW5jZURpZmYgPSBvcHRpb25zQnlEaXN0YW5jZVthXSAtIG9wdGlvbnNCeURpc3RhbmNlW2JdO1xuICAgIHJldHVybiBkaXN0YW5jZURpZmYgIT09IDAgPyBkaXN0YW5jZURpZmYgOiBuYXR1cmFsQ29tcGFyZShhLCBiKTtcbiAgfSk7XG59XG4vKipcbiAqIENvbXB1dGVzIHRoZSBsZXhpY2FsIGRpc3RhbmNlIGJldHdlZW4gc3RyaW5ncyBBIGFuZCBCLlxuICpcbiAqIFRoZSBcImRpc3RhbmNlXCIgYmV0d2VlbiB0d28gc3RyaW5ncyBpcyBnaXZlbiBieSBjb3VudGluZyB0aGUgbWluaW11bSBudW1iZXJcbiAqIG9mIGVkaXRzIG5lZWRlZCB0byB0cmFuc2Zvcm0gc3RyaW5nIEEgaW50byBzdHJpbmcgQi4gQW4gZWRpdCBjYW4gYmUgYW5cbiAqIGluc2VydGlvbiwgZGVsZXRpb24sIG9yIHN1YnN0aXR1dGlvbiBvZiBhIHNpbmdsZSBjaGFyYWN0ZXIsIG9yIGEgc3dhcCBvZiB0d29cbiAqIGFkamFjZW50IGNoYXJhY3RlcnMuXG4gKlxuICogSW5jbHVkZXMgYSBjdXN0b20gYWx0ZXJhdGlvbiBmcm9tIERhbWVyYXUtTGV2ZW5zaHRlaW4gdG8gdHJlYXQgY2FzZSBjaGFuZ2VzXG4gKiBhcyBhIHNpbmdsZSBlZGl0IHdoaWNoIGhlbHBzIGlkZW50aWZ5IG1pcy1jYXNlZCB2YWx1ZXMgd2l0aCBhbiBlZGl0IGRpc3RhbmNlXG4gKiBvZiAxLlxuICpcbiAqIFRoaXMgZGlzdGFuY2UgY2FuIGJlIHVzZWZ1bCBmb3IgZGV0ZWN0aW5nIHR5cG9zIGluIGlucHV0IG9yIHNvcnRpbmdcbiAqL1xuXG52YXIgTGV4aWNhbERpc3RhbmNlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gTGV4aWNhbERpc3RhbmNlKGlucHV0KSB7XG4gICAgdGhpcy5faW5wdXQgPSBpbnB1dDtcbiAgICB0aGlzLl9pbnB1dExvd2VyQ2FzZSA9IGlucHV0LnRvTG93ZXJDYXNlKCk7XG4gICAgdGhpcy5faW5wdXRBcnJheSA9IHN0cmluZ1RvQXJyYXkodGhpcy5faW5wdXRMb3dlckNhc2UpO1xuICAgIHRoaXMuX3Jvd3MgPSBbbmV3IEFycmF5KGlucHV0Lmxlbmd0aCArIDEpLmZpbGwoMCksIG5ldyBBcnJheShpbnB1dC5sZW5ndGggKyAxKS5maWxsKDApLCBuZXcgQXJyYXkoaW5wdXQubGVuZ3RoICsgMSkuZmlsbCgwKV07XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTGV4aWNhbERpc3RhbmNlLnByb3RvdHlwZTtcblxuICBfcHJvdG8ubWVhc3VyZSA9IGZ1bmN0aW9uIG1lYXN1cmUob3B0aW9uLCB0aHJlc2hvbGQpIHtcbiAgICBpZiAodGhpcy5faW5wdXQgPT09IG9wdGlvbikge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgdmFyIG9wdGlvbkxvd2VyQ2FzZSA9IG9wdGlvbi50b0xvd2VyQ2FzZSgpOyAvLyBBbnkgY2FzZSBjaGFuZ2UgY291bnRzIGFzIGEgc2luZ2xlIGVkaXRcblxuICAgIGlmICh0aGlzLl9pbnB1dExvd2VyQ2FzZSA9PT0gb3B0aW9uTG93ZXJDYXNlKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9XG5cbiAgICB2YXIgYSA9IHN0cmluZ1RvQXJyYXkob3B0aW9uTG93ZXJDYXNlKTtcbiAgICB2YXIgYiA9IHRoaXMuX2lucHV0QXJyYXk7XG5cbiAgICBpZiAoYS5sZW5ndGggPCBiLmxlbmd0aCkge1xuICAgICAgdmFyIHRtcCA9IGE7XG4gICAgICBhID0gYjtcbiAgICAgIGIgPSB0bXA7XG4gICAgfVxuXG4gICAgdmFyIGFMZW5ndGggPSBhLmxlbmd0aDtcbiAgICB2YXIgYkxlbmd0aCA9IGIubGVuZ3RoO1xuXG4gICAgaWYgKGFMZW5ndGggLSBiTGVuZ3RoID4gdGhyZXNob2xkKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHZhciByb3dzID0gdGhpcy5fcm93cztcblxuICAgIGZvciAodmFyIGogPSAwOyBqIDw9IGJMZW5ndGg7IGorKykge1xuICAgICAgcm93c1swXVtqXSA9IGo7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPD0gYUxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdXBSb3cgPSByb3dzWyhpIC0gMSkgJSAzXTtcbiAgICAgIHZhciBjdXJyZW50Um93ID0gcm93c1tpICUgM107XG4gICAgICB2YXIgc21hbGxlc3RDZWxsID0gY3VycmVudFJvd1swXSA9IGk7XG5cbiAgICAgIGZvciAodmFyIF9qID0gMTsgX2ogPD0gYkxlbmd0aDsgX2orKykge1xuICAgICAgICB2YXIgY29zdCA9IGFbaSAtIDFdID09PSBiW19qIC0gMV0gPyAwIDogMTtcbiAgICAgICAgdmFyIGN1cnJlbnRDZWxsID0gTWF0aC5taW4odXBSb3dbX2pdICsgMSwgLy8gZGVsZXRlXG4gICAgICAgIGN1cnJlbnRSb3dbX2ogLSAxXSArIDEsIC8vIGluc2VydFxuICAgICAgICB1cFJvd1tfaiAtIDFdICsgY29zdCAvLyBzdWJzdGl0dXRlXG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKGkgPiAxICYmIF9qID4gMSAmJiBhW2kgLSAxXSA9PT0gYltfaiAtIDJdICYmIGFbaSAtIDJdID09PSBiW19qIC0gMV0pIHtcbiAgICAgICAgICAvLyB0cmFuc3Bvc2l0aW9uXG4gICAgICAgICAgdmFyIGRvdWJsZURpYWdvbmFsQ2VsbCA9IHJvd3NbKGkgLSAyKSAlIDNdW19qIC0gMl07XG4gICAgICAgICAgY3VycmVudENlbGwgPSBNYXRoLm1pbihjdXJyZW50Q2VsbCwgZG91YmxlRGlhZ29uYWxDZWxsICsgMSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY3VycmVudENlbGwgPCBzbWFsbGVzdENlbGwpIHtcbiAgICAgICAgICBzbWFsbGVzdENlbGwgPSBjdXJyZW50Q2VsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGN1cnJlbnRSb3dbX2pdID0gY3VycmVudENlbGw7XG4gICAgICB9IC8vIEVhcmx5IGV4aXQsIHNpbmNlIGRpc3RhbmNlIGNhbid0IGdvIHNtYWxsZXIgdGhhbiBzbWFsbGVzdCBlbGVtZW50IG9mIHRoZSBwcmV2aW91cyByb3cuXG5cblxuICAgICAgaWYgKHNtYWxsZXN0Q2VsbCA+IHRocmVzaG9sZCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBkaXN0YW5jZSA9IHJvd3NbYUxlbmd0aCAlIDNdW2JMZW5ndGhdO1xuICAgIHJldHVybiBkaXN0YW5jZSA8PSB0aHJlc2hvbGQgPyBkaXN0YW5jZSA6IHVuZGVmaW5lZDtcbiAgfTtcblxuICByZXR1cm4gTGV4aWNhbERpc3RhbmNlO1xufSgpO1xuXG5mdW5jdGlvbiBzdHJpbmdUb0FycmF5KHN0cikge1xuICB2YXIgc3RyTGVuZ3RoID0gc3RyLmxlbmd0aDtcbiAgdmFyIGFycmF5ID0gbmV3IEFycmF5KHN0ckxlbmd0aCk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHJMZW5ndGg7ICsraSkge1xuICAgIGFycmF5W2ldID0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gIH1cblxuICByZXR1cm4gYXJyYXk7XG59XG4iLCJpbXBvcnQgb2JqZWN0RW50cmllcyBmcm9tIFwiLi4vcG9seWZpbGxzL29iamVjdEVudHJpZXMubWpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0b09iak1hcChvYmopIHtcbiAgLyogZXNsaW50LWVuYWJsZSBuby1yZWRlY2xhcmUgKi9cbiAgaWYgKE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopID09PSBudWxsKSB7XG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIHZhciBtYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gIGZvciAodmFyIF9pMiA9IDAsIF9vYmplY3RFbnRyaWVzMiA9IG9iamVjdEVudHJpZXMob2JqKTsgX2kyIDwgX29iamVjdEVudHJpZXMyLmxlbmd0aDsgX2kyKyspIHtcbiAgICB2YXIgX3JlZjIgPSBfb2JqZWN0RW50cmllczJbX2kyXTtcbiAgICB2YXIga2V5ID0gX3JlZjJbMF07XG4gICAgdmFyIHZhbHVlID0gX3JlZjJbMV07XG4gICAgbWFwW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBtYXA7XG59XG4iLCJpbXBvcnQgZGVmaW5lSW5zcGVjdCBmcm9tIFwiLi4vanN1dGlscy9kZWZpbmVJbnNwZWN0Lm1qc1wiO1xuXG4vKipcbiAqIENvbnRhaW5zIGEgcmFuZ2Ugb2YgVVRGLTggY2hhcmFjdGVyIG9mZnNldHMgYW5kIHRva2VuIHJlZmVyZW5jZXMgdGhhdFxuICogaWRlbnRpZnkgdGhlIHJlZ2lvbiBvZiB0aGUgc291cmNlIGZyb20gd2hpY2ggdGhlIEFTVCBkZXJpdmVkLlxuICovXG5leHBvcnQgdmFyIExvY2F0aW9uID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgLyoqXG4gICAqIFRoZSBjaGFyYWN0ZXIgb2Zmc2V0IGF0IHdoaWNoIHRoaXMgTm9kZSBiZWdpbnMuXG4gICAqL1xuXG4gIC8qKlxuICAgKiBUaGUgY2hhcmFjdGVyIG9mZnNldCBhdCB3aGljaCB0aGlzIE5vZGUgZW5kcy5cbiAgICovXG5cbiAgLyoqXG4gICAqIFRoZSBUb2tlbiBhdCB3aGljaCB0aGlzIE5vZGUgYmVnaW5zLlxuICAgKi9cblxuICAvKipcbiAgICogVGhlIFRva2VuIGF0IHdoaWNoIHRoaXMgTm9kZSBlbmRzLlxuICAgKi9cblxuICAvKipcbiAgICogVGhlIFNvdXJjZSBkb2N1bWVudCB0aGUgQVNUIHJlcHJlc2VudHMuXG4gICAqL1xuICBmdW5jdGlvbiBMb2NhdGlvbihzdGFydFRva2VuLCBlbmRUb2tlbiwgc291cmNlKSB7XG4gICAgdGhpcy5zdGFydCA9IHN0YXJ0VG9rZW4uc3RhcnQ7XG4gICAgdGhpcy5lbmQgPSBlbmRUb2tlbi5lbmQ7XG4gICAgdGhpcy5zdGFydFRva2VuID0gc3RhcnRUb2tlbjtcbiAgICB0aGlzLmVuZFRva2VuID0gZW5kVG9rZW47XG4gICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTG9jYXRpb24ucHJvdG90eXBlO1xuXG4gIF9wcm90by50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXJ0OiB0aGlzLnN0YXJ0LFxuICAgICAgZW5kOiB0aGlzLmVuZFxuICAgIH07XG4gIH07XG5cbiAgcmV0dXJuIExvY2F0aW9uO1xufSgpOyAvLyBQcmludCBhIHNpbXBsaWZpZWQgZm9ybSB3aGVuIGFwcGVhcmluZyBpbiBgaW5zcGVjdGAgYW5kIGB1dGlsLmluc3BlY3RgLlxuXG5kZWZpbmVJbnNwZWN0KExvY2F0aW9uKTtcbi8qKlxuICogUmVwcmVzZW50cyBhIHJhbmdlIG9mIGNoYXJhY3RlcnMgcmVwcmVzZW50ZWQgYnkgYSBsZXhpY2FsIHRva2VuXG4gKiB3aXRoaW4gYSBTb3VyY2UuXG4gKi9cblxuZXhwb3J0IHZhciBUb2tlbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIC8qKlxuICAgKiBUaGUga2luZCBvZiBUb2tlbi5cbiAgICovXG5cbiAgLyoqXG4gICAqIFRoZSBjaGFyYWN0ZXIgb2Zmc2V0IGF0IHdoaWNoIHRoaXMgTm9kZSBiZWdpbnMuXG4gICAqL1xuXG4gIC8qKlxuICAgKiBUaGUgY2hhcmFjdGVyIG9mZnNldCBhdCB3aGljaCB0aGlzIE5vZGUgZW5kcy5cbiAgICovXG5cbiAgLyoqXG4gICAqIFRoZSAxLWluZGV4ZWQgbGluZSBudW1iZXIgb24gd2hpY2ggdGhpcyBUb2tlbiBhcHBlYXJzLlxuICAgKi9cblxuICAvKipcbiAgICogVGhlIDEtaW5kZXhlZCBjb2x1bW4gbnVtYmVyIGF0IHdoaWNoIHRoaXMgVG9rZW4gYmVnaW5zLlxuICAgKi9cblxuICAvKipcbiAgICogRm9yIG5vbi1wdW5jdHVhdGlvbiB0b2tlbnMsIHJlcHJlc2VudHMgdGhlIGludGVycHJldGVkIHZhbHVlIG9mIHRoZSB0b2tlbi5cbiAgICovXG5cbiAgLyoqXG4gICAqIFRva2VucyBleGlzdCBhcyBub2RlcyBpbiBhIGRvdWJsZS1saW5rZWQtbGlzdCBhbW9uZ3N0IGFsbCB0b2tlbnNcbiAgICogaW5jbHVkaW5nIGlnbm9yZWQgdG9rZW5zLiA8U09GPiBpcyBhbHdheXMgdGhlIGZpcnN0IG5vZGUgYW5kIDxFT0Y+XG4gICAqIHRoZSBsYXN0LlxuICAgKi9cbiAgZnVuY3Rpb24gVG9rZW4oa2luZCwgc3RhcnQsIGVuZCwgbGluZSwgY29sdW1uLCBwcmV2LCB2YWx1ZSkge1xuICAgIHRoaXMua2luZCA9IGtpbmQ7XG4gICAgdGhpcy5zdGFydCA9IHN0YXJ0O1xuICAgIHRoaXMuZW5kID0gZW5kO1xuICAgIHRoaXMubGluZSA9IGxpbmU7XG4gICAgdGhpcy5jb2x1bW4gPSBjb2x1bW47XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIHRoaXMucHJldiA9IHByZXY7XG4gICAgdGhpcy5uZXh0ID0gbnVsbDtcbiAgfVxuXG4gIHZhciBfcHJvdG8yID0gVG9rZW4ucHJvdG90eXBlO1xuXG4gIF9wcm90bzIudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgIHJldHVybiB7XG4gICAgICBraW5kOiB0aGlzLmtpbmQsXG4gICAgICB2YWx1ZTogdGhpcy52YWx1ZSxcbiAgICAgIGxpbmU6IHRoaXMubGluZSxcbiAgICAgIGNvbHVtbjogdGhpcy5jb2x1bW5cbiAgICB9O1xuICB9O1xuXG4gIHJldHVybiBUb2tlbjtcbn0oKTsgLy8gUHJpbnQgYSBzaW1wbGlmaWVkIGZvcm0gd2hlbiBhcHBlYXJpbmcgaW4gYGluc3BlY3RgIGFuZCBgdXRpbC5pbnNwZWN0YC5cblxuZGVmaW5lSW5zcGVjdChUb2tlbik7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBpc05vZGUobWF5YmVOb2RlKSB7XG4gIHJldHVybiBtYXliZU5vZGUgIT0gbnVsbCAmJiB0eXBlb2YgbWF5YmVOb2RlLmtpbmQgPT09ICdzdHJpbmcnO1xufVxuLyoqXG4gKiBUaGUgbGlzdCBvZiBhbGwgcG9zc2libGUgQVNUIG5vZGUgdHlwZXMuXG4gKi9cbiIsIi8qKlxuICogUHJvZHVjZXMgdGhlIHZhbHVlIG9mIGEgYmxvY2sgc3RyaW5nIGZyb20gaXRzIHBhcnNlZCByYXcgdmFsdWUsIHNpbWlsYXIgdG9cbiAqIENvZmZlZVNjcmlwdCdzIGJsb2NrIHN0cmluZywgUHl0aG9uJ3MgZG9jc3RyaW5nIHRyaW0gb3IgUnVieSdzIHN0cmlwX2hlcmVkb2MuXG4gKlxuICogVGhpcyBpbXBsZW1lbnRzIHRoZSBHcmFwaFFMIHNwZWMncyBCbG9ja1N0cmluZ1ZhbHVlKCkgc3RhdGljIGFsZ29yaXRobS5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlZGVudEJsb2NrU3RyaW5nVmFsdWUocmF3U3RyaW5nKSB7XG4gIC8vIEV4cGFuZCBhIGJsb2NrIHN0cmluZydzIHJhdyB2YWx1ZSBpbnRvIGluZGVwZW5kZW50IGxpbmVzLlxuICB2YXIgbGluZXMgPSByYXdTdHJpbmcuc3BsaXQoL1xcclxcbnxbXFxuXFxyXS9nKTsgLy8gUmVtb3ZlIGNvbW1vbiBpbmRlbnRhdGlvbiBmcm9tIGFsbCBsaW5lcyBidXQgZmlyc3QuXG5cbiAgdmFyIGNvbW1vbkluZGVudCA9IGdldEJsb2NrU3RyaW5nSW5kZW50YXRpb24ocmF3U3RyaW5nKTtcblxuICBpZiAoY29tbW9uSW5kZW50ICE9PSAwKSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xuICAgICAgbGluZXNbaV0gPSBsaW5lc1tpXS5zbGljZShjb21tb25JbmRlbnQpO1xuICAgIH1cbiAgfSAvLyBSZW1vdmUgbGVhZGluZyBhbmQgdHJhaWxpbmcgYmxhbmsgbGluZXMuXG5cblxuICB2YXIgc3RhcnRMaW5lID0gMDtcblxuICB3aGlsZSAoc3RhcnRMaW5lIDwgbGluZXMubGVuZ3RoICYmIGlzQmxhbmsobGluZXNbc3RhcnRMaW5lXSkpIHtcbiAgICArK3N0YXJ0TGluZTtcbiAgfVxuXG4gIHZhciBlbmRMaW5lID0gbGluZXMubGVuZ3RoO1xuXG4gIHdoaWxlIChlbmRMaW5lID4gc3RhcnRMaW5lICYmIGlzQmxhbmsobGluZXNbZW5kTGluZSAtIDFdKSkge1xuICAgIC0tZW5kTGluZTtcbiAgfSAvLyBSZXR1cm4gYSBzdHJpbmcgb2YgdGhlIGxpbmVzIGpvaW5lZCB3aXRoIFUrMDAwQS5cblxuXG4gIHJldHVybiBsaW5lcy5zbGljZShzdGFydExpbmUsIGVuZExpbmUpLmpvaW4oJ1xcbicpO1xufVxuXG5mdW5jdGlvbiBpc0JsYW5rKHN0cikge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIGlmIChzdHJbaV0gIT09ICcgJyAmJiBzdHJbaV0gIT09ICdcXHQnKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEJsb2NrU3RyaW5nSW5kZW50YXRpb24odmFsdWUpIHtcbiAgdmFyIF9jb21tb25JbmRlbnQ7XG5cbiAgdmFyIGlzRmlyc3RMaW5lID0gdHJ1ZTtcbiAgdmFyIGlzRW1wdHlMaW5lID0gdHJ1ZTtcbiAgdmFyIGluZGVudCA9IDA7XG4gIHZhciBjb21tb25JbmRlbnQgPSBudWxsO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyArK2kpIHtcbiAgICBzd2l0Y2ggKHZhbHVlLmNoYXJDb2RlQXQoaSkpIHtcbiAgICAgIGNhc2UgMTM6XG4gICAgICAgIC8vICBcXHJcbiAgICAgICAgaWYgKHZhbHVlLmNoYXJDb2RlQXQoaSArIDEpID09PSAxMCkge1xuICAgICAgICAgICsraTsgLy8gc2tpcCBcXHJcXG4gYXMgb25lIHN5bWJvbFxuICAgICAgICB9XG5cbiAgICAgIC8vIGZhbGxzIHRocm91Z2hcblxuICAgICAgY2FzZSAxMDpcbiAgICAgICAgLy8gIFxcblxuICAgICAgICBpc0ZpcnN0TGluZSA9IGZhbHNlO1xuICAgICAgICBpc0VtcHR5TGluZSA9IHRydWU7XG4gICAgICAgIGluZGVudCA9IDA7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIDk6IC8vICAgXFx0XG5cbiAgICAgIGNhc2UgMzI6XG4gICAgICAgIC8vICA8c3BhY2U+XG4gICAgICAgICsraW5kZW50O1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGlzRW1wdHlMaW5lICYmICFpc0ZpcnN0TGluZSAmJiAoY29tbW9uSW5kZW50ID09PSBudWxsIHx8IGluZGVudCA8IGNvbW1vbkluZGVudCkpIHtcbiAgICAgICAgICBjb21tb25JbmRlbnQgPSBpbmRlbnQ7XG4gICAgICAgIH1cblxuICAgICAgICBpc0VtcHR5TGluZSA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAoX2NvbW1vbkluZGVudCA9IGNvbW1vbkluZGVudCkgIT09IG51bGwgJiYgX2NvbW1vbkluZGVudCAhPT0gdm9pZCAwID8gX2NvbW1vbkluZGVudCA6IDA7XG59XG4vKipcbiAqIFByaW50IGEgYmxvY2sgc3RyaW5nIGluIHRoZSBpbmRlbnRlZCBibG9jayBmb3JtIGJ5IGFkZGluZyBhIGxlYWRpbmcgYW5kXG4gKiB0cmFpbGluZyBibGFuayBsaW5lLiBIb3dldmVyLCBpZiBhIGJsb2NrIHN0cmluZyBzdGFydHMgd2l0aCB3aGl0ZXNwYWNlIGFuZCBpc1xuICogYSBzaW5nbGUtbGluZSwgYWRkaW5nIGEgbGVhZGluZyBibGFuayBsaW5lIHdvdWxkIHN0cmlwIHRoYXQgd2hpdGVzcGFjZS5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcHJpbnRCbG9ja1N0cmluZyh2YWx1ZSkge1xuICB2YXIgaW5kZW50YXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICcnO1xuICB2YXIgcHJlZmVyTXVsdGlwbGVMaW5lcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogZmFsc2U7XG4gIHZhciBpc1NpbmdsZUxpbmUgPSB2YWx1ZS5pbmRleE9mKCdcXG4nKSA9PT0gLTE7XG4gIHZhciBoYXNMZWFkaW5nU3BhY2UgPSB2YWx1ZVswXSA9PT0gJyAnIHx8IHZhbHVlWzBdID09PSAnXFx0JztcbiAgdmFyIGhhc1RyYWlsaW5nUXVvdGUgPSB2YWx1ZVt2YWx1ZS5sZW5ndGggLSAxXSA9PT0gJ1wiJztcbiAgdmFyIGhhc1RyYWlsaW5nU2xhc2ggPSB2YWx1ZVt2YWx1ZS5sZW5ndGggLSAxXSA9PT0gJ1xcXFwnO1xuICB2YXIgcHJpbnRBc011bHRpcGxlTGluZXMgPSAhaXNTaW5nbGVMaW5lIHx8IGhhc1RyYWlsaW5nUXVvdGUgfHwgaGFzVHJhaWxpbmdTbGFzaCB8fCBwcmVmZXJNdWx0aXBsZUxpbmVzO1xuICB2YXIgcmVzdWx0ID0gJyc7IC8vIEZvcm1hdCBhIG11bHRpLWxpbmUgYmxvY2sgcXVvdGUgdG8gYWNjb3VudCBmb3IgbGVhZGluZyBzcGFjZS5cblxuICBpZiAocHJpbnRBc011bHRpcGxlTGluZXMgJiYgIShpc1NpbmdsZUxpbmUgJiYgaGFzTGVhZGluZ1NwYWNlKSkge1xuICAgIHJlc3VsdCArPSAnXFxuJyArIGluZGVudGF0aW9uO1xuICB9XG5cbiAgcmVzdWx0ICs9IGluZGVudGF0aW9uID8gdmFsdWUucmVwbGFjZSgvXFxuL2csICdcXG4nICsgaW5kZW50YXRpb24pIDogdmFsdWU7XG5cbiAgaWYgKHByaW50QXNNdWx0aXBsZUxpbmVzKSB7XG4gICAgcmVzdWx0ICs9ICdcXG4nO1xuICB9XG5cbiAgcmV0dXJuICdcIlwiXCInICsgcmVzdWx0LnJlcGxhY2UoL1wiXCJcIi9nLCAnXFxcXFwiXCJcIicpICsgJ1wiXCJcIic7XG59XG4iLCIvKipcbiAqIFRoZSBzZXQgb2YgYWxsb3dlZCBkaXJlY3RpdmUgbG9jYXRpb24gdmFsdWVzLlxuICovXG5leHBvcnQgdmFyIERpcmVjdGl2ZUxvY2F0aW9uID0gT2JqZWN0LmZyZWV6ZSh7XG4gIC8vIFJlcXVlc3QgRGVmaW5pdGlvbnNcbiAgUVVFUlk6ICdRVUVSWScsXG4gIE1VVEFUSU9OOiAnTVVUQVRJT04nLFxuICBTVUJTQ1JJUFRJT046ICdTVUJTQ1JJUFRJT04nLFxuICBGSUVMRDogJ0ZJRUxEJyxcbiAgRlJBR01FTlRfREVGSU5JVElPTjogJ0ZSQUdNRU5UX0RFRklOSVRJT04nLFxuICBGUkFHTUVOVF9TUFJFQUQ6ICdGUkFHTUVOVF9TUFJFQUQnLFxuICBJTkxJTkVfRlJBR01FTlQ6ICdJTkxJTkVfRlJBR01FTlQnLFxuICBWQVJJQUJMRV9ERUZJTklUSU9OOiAnVkFSSUFCTEVfREVGSU5JVElPTicsXG4gIC8vIFR5cGUgU3lzdGVtIERlZmluaXRpb25zXG4gIFNDSEVNQTogJ1NDSEVNQScsXG4gIFNDQUxBUjogJ1NDQUxBUicsXG4gIE9CSkVDVDogJ09CSkVDVCcsXG4gIEZJRUxEX0RFRklOSVRJT046ICdGSUVMRF9ERUZJTklUSU9OJyxcbiAgQVJHVU1FTlRfREVGSU5JVElPTjogJ0FSR1VNRU5UX0RFRklOSVRJT04nLFxuICBJTlRFUkZBQ0U6ICdJTlRFUkZBQ0UnLFxuICBVTklPTjogJ1VOSU9OJyxcbiAgRU5VTTogJ0VOVU0nLFxuICBFTlVNX1ZBTFVFOiAnRU5VTV9WQUxVRScsXG4gIElOUFVUX09CSkVDVDogJ0lOUFVUX09CSkVDVCcsXG4gIElOUFVUX0ZJRUxEX0RFRklOSVRJT046ICdJTlBVVF9GSUVMRF9ERUZJTklUSU9OJ1xufSk7XG4vKipcbiAqIFRoZSBlbnVtIHR5cGUgcmVwcmVzZW50aW5nIHRoZSBkaXJlY3RpdmUgbG9jYXRpb24gdmFsdWVzLlxuICovXG4iLCIvKipcbiAqIFRoZSBzZXQgb2YgYWxsb3dlZCBraW5kIHZhbHVlcyBmb3IgQVNUIG5vZGVzLlxuICovXG5leHBvcnQgdmFyIEtpbmQgPSBPYmplY3QuZnJlZXplKHtcbiAgLy8gTmFtZVxuICBOQU1FOiAnTmFtZScsXG4gIC8vIERvY3VtZW50XG4gIERPQ1VNRU5UOiAnRG9jdW1lbnQnLFxuICBPUEVSQVRJT05fREVGSU5JVElPTjogJ09wZXJhdGlvbkRlZmluaXRpb24nLFxuICBWQVJJQUJMRV9ERUZJTklUSU9OOiAnVmFyaWFibGVEZWZpbml0aW9uJyxcbiAgU0VMRUNUSU9OX1NFVDogJ1NlbGVjdGlvblNldCcsXG4gIEZJRUxEOiAnRmllbGQnLFxuICBBUkdVTUVOVDogJ0FyZ3VtZW50JyxcbiAgLy8gRnJhZ21lbnRzXG4gIEZSQUdNRU5UX1NQUkVBRDogJ0ZyYWdtZW50U3ByZWFkJyxcbiAgSU5MSU5FX0ZSQUdNRU5UOiAnSW5saW5lRnJhZ21lbnQnLFxuICBGUkFHTUVOVF9ERUZJTklUSU9OOiAnRnJhZ21lbnREZWZpbml0aW9uJyxcbiAgLy8gVmFsdWVzXG4gIFZBUklBQkxFOiAnVmFyaWFibGUnLFxuICBJTlQ6ICdJbnRWYWx1ZScsXG4gIEZMT0FUOiAnRmxvYXRWYWx1ZScsXG4gIFNUUklORzogJ1N0cmluZ1ZhbHVlJyxcbiAgQk9PTEVBTjogJ0Jvb2xlYW5WYWx1ZScsXG4gIE5VTEw6ICdOdWxsVmFsdWUnLFxuICBFTlVNOiAnRW51bVZhbHVlJyxcbiAgTElTVDogJ0xpc3RWYWx1ZScsXG4gIE9CSkVDVDogJ09iamVjdFZhbHVlJyxcbiAgT0JKRUNUX0ZJRUxEOiAnT2JqZWN0RmllbGQnLFxuICAvLyBEaXJlY3RpdmVzXG4gIERJUkVDVElWRTogJ0RpcmVjdGl2ZScsXG4gIC8vIFR5cGVzXG4gIE5BTUVEX1RZUEU6ICdOYW1lZFR5cGUnLFxuICBMSVNUX1RZUEU6ICdMaXN0VHlwZScsXG4gIE5PTl9OVUxMX1RZUEU6ICdOb25OdWxsVHlwZScsXG4gIC8vIFR5cGUgU3lzdGVtIERlZmluaXRpb25zXG4gIFNDSEVNQV9ERUZJTklUSU9OOiAnU2NoZW1hRGVmaW5pdGlvbicsXG4gIE9QRVJBVElPTl9UWVBFX0RFRklOSVRJT046ICdPcGVyYXRpb25UeXBlRGVmaW5pdGlvbicsXG4gIC8vIFR5cGUgRGVmaW5pdGlvbnNcbiAgU0NBTEFSX1RZUEVfREVGSU5JVElPTjogJ1NjYWxhclR5cGVEZWZpbml0aW9uJyxcbiAgT0JKRUNUX1RZUEVfREVGSU5JVElPTjogJ09iamVjdFR5cGVEZWZpbml0aW9uJyxcbiAgRklFTERfREVGSU5JVElPTjogJ0ZpZWxkRGVmaW5pdGlvbicsXG4gIElOUFVUX1ZBTFVFX0RFRklOSVRJT046ICdJbnB1dFZhbHVlRGVmaW5pdGlvbicsXG4gIElOVEVSRkFDRV9UWVBFX0RFRklOSVRJT046ICdJbnRlcmZhY2VUeXBlRGVmaW5pdGlvbicsXG4gIFVOSU9OX1RZUEVfREVGSU5JVElPTjogJ1VuaW9uVHlwZURlZmluaXRpb24nLFxuICBFTlVNX1RZUEVfREVGSU5JVElPTjogJ0VudW1UeXBlRGVmaW5pdGlvbicsXG4gIEVOVU1fVkFMVUVfREVGSU5JVElPTjogJ0VudW1WYWx1ZURlZmluaXRpb24nLFxuICBJTlBVVF9PQkpFQ1RfVFlQRV9ERUZJTklUSU9OOiAnSW5wdXRPYmplY3RUeXBlRGVmaW5pdGlvbicsXG4gIC8vIERpcmVjdGl2ZSBEZWZpbml0aW9uc1xuICBESVJFQ1RJVkVfREVGSU5JVElPTjogJ0RpcmVjdGl2ZURlZmluaXRpb24nLFxuICAvLyBUeXBlIFN5c3RlbSBFeHRlbnNpb25zXG4gIFNDSEVNQV9FWFRFTlNJT046ICdTY2hlbWFFeHRlbnNpb24nLFxuICAvLyBUeXBlIEV4dGVuc2lvbnNcbiAgU0NBTEFSX1RZUEVfRVhURU5TSU9OOiAnU2NhbGFyVHlwZUV4dGVuc2lvbicsXG4gIE9CSkVDVF9UWVBFX0VYVEVOU0lPTjogJ09iamVjdFR5cGVFeHRlbnNpb24nLFxuICBJTlRFUkZBQ0VfVFlQRV9FWFRFTlNJT046ICdJbnRlcmZhY2VUeXBlRXh0ZW5zaW9uJyxcbiAgVU5JT05fVFlQRV9FWFRFTlNJT046ICdVbmlvblR5cGVFeHRlbnNpb24nLFxuICBFTlVNX1RZUEVfRVhURU5TSU9OOiAnRW51bVR5cGVFeHRlbnNpb24nLFxuICBJTlBVVF9PQkpFQ1RfVFlQRV9FWFRFTlNJT046ICdJbnB1dE9iamVjdFR5cGVFeHRlbnNpb24nXG59KTtcbi8qKlxuICogVGhlIGVudW0gdHlwZSByZXByZXNlbnRpbmcgdGhlIHBvc3NpYmxlIGtpbmQgdmFsdWVzIG9mIEFTVCBub2Rlcy5cbiAqL1xuIiwiaW1wb3J0IHsgc3ludGF4RXJyb3IgfSBmcm9tIFwiLi4vZXJyb3Ivc3ludGF4RXJyb3IubWpzXCI7XG5pbXBvcnQgeyBUb2tlbiB9IGZyb20gXCIuL2FzdC5tanNcIjtcbmltcG9ydCB7IFRva2VuS2luZCB9IGZyb20gXCIuL3Rva2VuS2luZC5tanNcIjtcbmltcG9ydCB7IGRlZGVudEJsb2NrU3RyaW5nVmFsdWUgfSBmcm9tIFwiLi9ibG9ja1N0cmluZy5tanNcIjtcbi8qKlxuICogR2l2ZW4gYSBTb3VyY2Ugb2JqZWN0LCBjcmVhdGVzIGEgTGV4ZXIgZm9yIHRoYXQgc291cmNlLlxuICogQSBMZXhlciBpcyBhIHN0YXRlZnVsIHN0cmVhbSBnZW5lcmF0b3IgaW4gdGhhdCBldmVyeSB0aW1lXG4gKiBpdCBpcyBhZHZhbmNlZCwgaXQgcmV0dXJucyB0aGUgbmV4dCB0b2tlbiBpbiB0aGUgU291cmNlLiBBc3N1bWluZyB0aGVcbiAqIHNvdXJjZSBsZXhlcywgdGhlIGZpbmFsIFRva2VuIGVtaXR0ZWQgYnkgdGhlIGxleGVyIHdpbGwgYmUgb2Yga2luZFxuICogRU9GLCBhZnRlciB3aGljaCB0aGUgbGV4ZXIgd2lsbCByZXBlYXRlZGx5IHJldHVybiB0aGUgc2FtZSBFT0YgdG9rZW5cbiAqIHdoZW5ldmVyIGNhbGxlZC5cbiAqL1xuXG5leHBvcnQgdmFyIExleGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgLyoqXG4gICAqIFRoZSBwcmV2aW91c2x5IGZvY3VzZWQgbm9uLWlnbm9yZWQgdG9rZW4uXG4gICAqL1xuXG4gIC8qKlxuICAgKiBUaGUgY3VycmVudGx5IGZvY3VzZWQgbm9uLWlnbm9yZWQgdG9rZW4uXG4gICAqL1xuXG4gIC8qKlxuICAgKiBUaGUgKDEtaW5kZXhlZCkgbGluZSBjb250YWluaW5nIHRoZSBjdXJyZW50IHRva2VuLlxuICAgKi9cblxuICAvKipcbiAgICogVGhlIGNoYXJhY3RlciBvZmZzZXQgYXQgd2hpY2ggdGhlIGN1cnJlbnQgbGluZSBiZWdpbnMuXG4gICAqL1xuICBmdW5jdGlvbiBMZXhlcihzb3VyY2UpIHtcbiAgICB2YXIgc3RhcnRPZkZpbGVUb2tlbiA9IG5ldyBUb2tlbihUb2tlbktpbmQuU09GLCAwLCAwLCAwLCAwLCBudWxsKTtcbiAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLmxhc3RUb2tlbiA9IHN0YXJ0T2ZGaWxlVG9rZW47XG4gICAgdGhpcy50b2tlbiA9IHN0YXJ0T2ZGaWxlVG9rZW47XG4gICAgdGhpcy5saW5lID0gMTtcbiAgICB0aGlzLmxpbmVTdGFydCA9IDA7XG4gIH1cbiAgLyoqXG4gICAqIEFkdmFuY2VzIHRoZSB0b2tlbiBzdHJlYW0gdG8gdGhlIG5leHQgbm9uLWlnbm9yZWQgdG9rZW4uXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IExleGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uYWR2YW5jZSA9IGZ1bmN0aW9uIGFkdmFuY2UoKSB7XG4gICAgdGhpcy5sYXN0VG9rZW4gPSB0aGlzLnRva2VuO1xuICAgIHZhciB0b2tlbiA9IHRoaXMudG9rZW4gPSB0aGlzLmxvb2thaGVhZCgpO1xuICAgIHJldHVybiB0b2tlbjtcbiAgfVxuICAvKipcbiAgICogTG9va3MgYWhlYWQgYW5kIHJldHVybnMgdGhlIG5leHQgbm9uLWlnbm9yZWQgdG9rZW4sIGJ1dCBkb2VzIG5vdCBjaGFuZ2VcbiAgICogdGhlIHN0YXRlIG9mIExleGVyLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5sb29rYWhlYWQgPSBmdW5jdGlvbiBsb29rYWhlYWQoKSB7XG4gICAgdmFyIHRva2VuID0gdGhpcy50b2tlbjtcblxuICAgIGlmICh0b2tlbi5raW5kICE9PSBUb2tlbktpbmQuRU9GKSB7XG4gICAgICBkbyB7XG4gICAgICAgIHZhciBfdG9rZW4kbmV4dDtcblxuICAgICAgICAvLyBOb3RlOiBuZXh0IGlzIG9ubHkgbXV0YWJsZSBkdXJpbmcgcGFyc2luZywgc28gd2UgY2FzdCB0byBhbGxvdyB0aGlzLlxuICAgICAgICB0b2tlbiA9IChfdG9rZW4kbmV4dCA9IHRva2VuLm5leHQpICE9PSBudWxsICYmIF90b2tlbiRuZXh0ICE9PSB2b2lkIDAgPyBfdG9rZW4kbmV4dCA6IHRva2VuLm5leHQgPSByZWFkVG9rZW4odGhpcywgdG9rZW4pO1xuICAgICAgfSB3aGlsZSAodG9rZW4ua2luZCA9PT0gVG9rZW5LaW5kLkNPTU1FTlQpO1xuICAgIH1cblxuICAgIHJldHVybiB0b2tlbjtcbiAgfTtcblxuICByZXR1cm4gTGV4ZXI7XG59KCk7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBpc1B1bmN0dWF0b3JUb2tlbktpbmQoa2luZCkge1xuICByZXR1cm4ga2luZCA9PT0gVG9rZW5LaW5kLkJBTkcgfHwga2luZCA9PT0gVG9rZW5LaW5kLkRPTExBUiB8fCBraW5kID09PSBUb2tlbktpbmQuQU1QIHx8IGtpbmQgPT09IFRva2VuS2luZC5QQVJFTl9MIHx8IGtpbmQgPT09IFRva2VuS2luZC5QQVJFTl9SIHx8IGtpbmQgPT09IFRva2VuS2luZC5TUFJFQUQgfHwga2luZCA9PT0gVG9rZW5LaW5kLkNPTE9OIHx8IGtpbmQgPT09IFRva2VuS2luZC5FUVVBTFMgfHwga2luZCA9PT0gVG9rZW5LaW5kLkFUIHx8IGtpbmQgPT09IFRva2VuS2luZC5CUkFDS0VUX0wgfHwga2luZCA9PT0gVG9rZW5LaW5kLkJSQUNLRVRfUiB8fCBraW5kID09PSBUb2tlbktpbmQuQlJBQ0VfTCB8fCBraW5kID09PSBUb2tlbktpbmQuUElQRSB8fCBraW5kID09PSBUb2tlbktpbmQuQlJBQ0VfUjtcbn1cblxuZnVuY3Rpb24gcHJpbnRDaGFyQ29kZShjb2RlKSB7XG4gIHJldHVybiAoLy8gTmFOL3VuZGVmaW5lZCByZXByZXNlbnRzIGFjY2VzcyBiZXlvbmQgdGhlIGVuZCBvZiB0aGUgZmlsZS5cbiAgICBpc05hTihjb2RlKSA/IFRva2VuS2luZC5FT0YgOiAvLyBUcnVzdCBKU09OIGZvciBBU0NJSS5cbiAgICBjb2RlIDwgMHgwMDdmID8gSlNPTi5zdHJpbmdpZnkoU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlKSkgOiAvLyBPdGhlcndpc2UgcHJpbnQgdGhlIGVzY2FwZWQgZm9ybS5cbiAgICBcIlxcXCJcXFxcdVwiLmNvbmNhdCgoJzAwJyArIGNvZGUudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCkpLnNsaWNlKC00KSwgXCJcXFwiXCIpXG4gICk7XG59XG4vKipcbiAqIEdldHMgdGhlIG5leHQgdG9rZW4gZnJvbSB0aGUgc291cmNlIHN0YXJ0aW5nIGF0IHRoZSBnaXZlbiBwb3NpdGlvbi5cbiAqXG4gKiBUaGlzIHNraXBzIG92ZXIgd2hpdGVzcGFjZSB1bnRpbCBpdCBmaW5kcyB0aGUgbmV4dCBsZXhhYmxlIHRva2VuLCB0aGVuIGxleGVzXG4gKiBwdW5jdHVhdG9ycyBpbW1lZGlhdGVseSBvciBjYWxscyB0aGUgYXBwcm9wcmlhdGUgaGVscGVyIGZ1bmN0aW9uIGZvciBtb3JlXG4gKiBjb21wbGljYXRlZCB0b2tlbnMuXG4gKi9cblxuXG5mdW5jdGlvbiByZWFkVG9rZW4obGV4ZXIsIHByZXYpIHtcbiAgdmFyIHNvdXJjZSA9IGxleGVyLnNvdXJjZTtcbiAgdmFyIGJvZHkgPSBzb3VyY2UuYm9keTtcbiAgdmFyIGJvZHlMZW5ndGggPSBib2R5Lmxlbmd0aDtcbiAgdmFyIHBvcyA9IHByZXYuZW5kO1xuXG4gIHdoaWxlIChwb3MgPCBib2R5TGVuZ3RoKSB7XG4gICAgdmFyIGNvZGUgPSBib2R5LmNoYXJDb2RlQXQocG9zKTtcbiAgICB2YXIgX2xpbmUgPSBsZXhlci5saW5lO1xuXG4gICAgdmFyIF9jb2wgPSAxICsgcG9zIC0gbGV4ZXIubGluZVN0YXJ0OyAvLyBTb3VyY2VDaGFyYWN0ZXJcblxuXG4gICAgc3dpdGNoIChjb2RlKSB7XG4gICAgICBjYXNlIDB4ZmVmZjogLy8gPEJPTT5cblxuICAgICAgY2FzZSA5OiAvLyAgIFxcdFxuXG4gICAgICBjYXNlIDMyOiAvLyAgPHNwYWNlPlxuXG4gICAgICBjYXNlIDQ0OlxuICAgICAgICAvLyAgLFxuICAgICAgICArK3BvcztcbiAgICAgICAgY29udGludWU7XG5cbiAgICAgIGNhc2UgMTA6XG4gICAgICAgIC8vICBcXG5cbiAgICAgICAgKytwb3M7XG4gICAgICAgICsrbGV4ZXIubGluZTtcbiAgICAgICAgbGV4ZXIubGluZVN0YXJ0ID0gcG9zO1xuICAgICAgICBjb250aW51ZTtcblxuICAgICAgY2FzZSAxMzpcbiAgICAgICAgLy8gIFxcclxuICAgICAgICBpZiAoYm9keS5jaGFyQ29kZUF0KHBvcyArIDEpID09PSAxMCkge1xuICAgICAgICAgIHBvcyArPSAyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICsrcG9zO1xuICAgICAgICB9XG5cbiAgICAgICAgKytsZXhlci5saW5lO1xuICAgICAgICBsZXhlci5saW5lU3RhcnQgPSBwb3M7XG4gICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICBjYXNlIDMzOlxuICAgICAgICAvLyAgIVxuICAgICAgICByZXR1cm4gbmV3IFRva2VuKFRva2VuS2luZC5CQU5HLCBwb3MsIHBvcyArIDEsIF9saW5lLCBfY29sLCBwcmV2KTtcblxuICAgICAgY2FzZSAzNTpcbiAgICAgICAgLy8gICNcbiAgICAgICAgcmV0dXJuIHJlYWRDb21tZW50KHNvdXJjZSwgcG9zLCBfbGluZSwgX2NvbCwgcHJldik7XG5cbiAgICAgIGNhc2UgMzY6XG4gICAgICAgIC8vICAkXG4gICAgICAgIHJldHVybiBuZXcgVG9rZW4oVG9rZW5LaW5kLkRPTExBUiwgcG9zLCBwb3MgKyAxLCBfbGluZSwgX2NvbCwgcHJldik7XG5cbiAgICAgIGNhc2UgMzg6XG4gICAgICAgIC8vICAmXG4gICAgICAgIHJldHVybiBuZXcgVG9rZW4oVG9rZW5LaW5kLkFNUCwgcG9zLCBwb3MgKyAxLCBfbGluZSwgX2NvbCwgcHJldik7XG5cbiAgICAgIGNhc2UgNDA6XG4gICAgICAgIC8vICAoXG4gICAgICAgIHJldHVybiBuZXcgVG9rZW4oVG9rZW5LaW5kLlBBUkVOX0wsIHBvcywgcG9zICsgMSwgX2xpbmUsIF9jb2wsIHByZXYpO1xuXG4gICAgICBjYXNlIDQxOlxuICAgICAgICAvLyAgKVxuICAgICAgICByZXR1cm4gbmV3IFRva2VuKFRva2VuS2luZC5QQVJFTl9SLCBwb3MsIHBvcyArIDEsIF9saW5lLCBfY29sLCBwcmV2KTtcblxuICAgICAgY2FzZSA0NjpcbiAgICAgICAgLy8gIC5cbiAgICAgICAgaWYgKGJvZHkuY2hhckNvZGVBdChwb3MgKyAxKSA9PT0gNDYgJiYgYm9keS5jaGFyQ29kZUF0KHBvcyArIDIpID09PSA0Nikge1xuICAgICAgICAgIHJldHVybiBuZXcgVG9rZW4oVG9rZW5LaW5kLlNQUkVBRCwgcG9zLCBwb3MgKyAzLCBfbGluZSwgX2NvbCwgcHJldik7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSA1ODpcbiAgICAgICAgLy8gIDpcbiAgICAgICAgcmV0dXJuIG5ldyBUb2tlbihUb2tlbktpbmQuQ09MT04sIHBvcywgcG9zICsgMSwgX2xpbmUsIF9jb2wsIHByZXYpO1xuXG4gICAgICBjYXNlIDYxOlxuICAgICAgICAvLyAgPVxuICAgICAgICByZXR1cm4gbmV3IFRva2VuKFRva2VuS2luZC5FUVVBTFMsIHBvcywgcG9zICsgMSwgX2xpbmUsIF9jb2wsIHByZXYpO1xuXG4gICAgICBjYXNlIDY0OlxuICAgICAgICAvLyAgQFxuICAgICAgICByZXR1cm4gbmV3IFRva2VuKFRva2VuS2luZC5BVCwgcG9zLCBwb3MgKyAxLCBfbGluZSwgX2NvbCwgcHJldik7XG5cbiAgICAgIGNhc2UgOTE6XG4gICAgICAgIC8vICBbXG4gICAgICAgIHJldHVybiBuZXcgVG9rZW4oVG9rZW5LaW5kLkJSQUNLRVRfTCwgcG9zLCBwb3MgKyAxLCBfbGluZSwgX2NvbCwgcHJldik7XG5cbiAgICAgIGNhc2UgOTM6XG4gICAgICAgIC8vICBdXG4gICAgICAgIHJldHVybiBuZXcgVG9rZW4oVG9rZW5LaW5kLkJSQUNLRVRfUiwgcG9zLCBwb3MgKyAxLCBfbGluZSwgX2NvbCwgcHJldik7XG5cbiAgICAgIGNhc2UgMTIzOlxuICAgICAgICAvLyB7XG4gICAgICAgIHJldHVybiBuZXcgVG9rZW4oVG9rZW5LaW5kLkJSQUNFX0wsIHBvcywgcG9zICsgMSwgX2xpbmUsIF9jb2wsIHByZXYpO1xuXG4gICAgICBjYXNlIDEyNDpcbiAgICAgICAgLy8gfFxuICAgICAgICByZXR1cm4gbmV3IFRva2VuKFRva2VuS2luZC5QSVBFLCBwb3MsIHBvcyArIDEsIF9saW5lLCBfY29sLCBwcmV2KTtcblxuICAgICAgY2FzZSAxMjU6XG4gICAgICAgIC8vIH1cbiAgICAgICAgcmV0dXJuIG5ldyBUb2tlbihUb2tlbktpbmQuQlJBQ0VfUiwgcG9zLCBwb3MgKyAxLCBfbGluZSwgX2NvbCwgcHJldik7XG5cbiAgICAgIGNhc2UgMzQ6XG4gICAgICAgIC8vICBcIlxuICAgICAgICBpZiAoYm9keS5jaGFyQ29kZUF0KHBvcyArIDEpID09PSAzNCAmJiBib2R5LmNoYXJDb2RlQXQocG9zICsgMikgPT09IDM0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlYWRCbG9ja1N0cmluZyhzb3VyY2UsIHBvcywgX2xpbmUsIF9jb2wsIHByZXYsIGxleGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZWFkU3RyaW5nKHNvdXJjZSwgcG9zLCBfbGluZSwgX2NvbCwgcHJldik7XG5cbiAgICAgIGNhc2UgNDU6IC8vICAtXG5cbiAgICAgIGNhc2UgNDg6IC8vICAwXG5cbiAgICAgIGNhc2UgNDk6IC8vICAxXG5cbiAgICAgIGNhc2UgNTA6IC8vICAyXG5cbiAgICAgIGNhc2UgNTE6IC8vICAzXG5cbiAgICAgIGNhc2UgNTI6IC8vICA0XG5cbiAgICAgIGNhc2UgNTM6IC8vICA1XG5cbiAgICAgIGNhc2UgNTQ6IC8vICA2XG5cbiAgICAgIGNhc2UgNTU6IC8vICA3XG5cbiAgICAgIGNhc2UgNTY6IC8vICA4XG5cbiAgICAgIGNhc2UgNTc6XG4gICAgICAgIC8vICA5XG4gICAgICAgIHJldHVybiByZWFkTnVtYmVyKHNvdXJjZSwgcG9zLCBjb2RlLCBfbGluZSwgX2NvbCwgcHJldik7XG5cbiAgICAgIGNhc2UgNjU6IC8vICBBXG5cbiAgICAgIGNhc2UgNjY6IC8vICBCXG5cbiAgICAgIGNhc2UgNjc6IC8vICBDXG5cbiAgICAgIGNhc2UgNjg6IC8vICBEXG5cbiAgICAgIGNhc2UgNjk6IC8vICBFXG5cbiAgICAgIGNhc2UgNzA6IC8vICBGXG5cbiAgICAgIGNhc2UgNzE6IC8vICBHXG5cbiAgICAgIGNhc2UgNzI6IC8vICBIXG5cbiAgICAgIGNhc2UgNzM6IC8vICBJXG5cbiAgICAgIGNhc2UgNzQ6IC8vICBKXG5cbiAgICAgIGNhc2UgNzU6IC8vICBLXG5cbiAgICAgIGNhc2UgNzY6IC8vICBMXG5cbiAgICAgIGNhc2UgNzc6IC8vICBNXG5cbiAgICAgIGNhc2UgNzg6IC8vICBOXG5cbiAgICAgIGNhc2UgNzk6IC8vICBPXG5cbiAgICAgIGNhc2UgODA6IC8vICBQXG5cbiAgICAgIGNhc2UgODE6IC8vICBRXG5cbiAgICAgIGNhc2UgODI6IC8vICBSXG5cbiAgICAgIGNhc2UgODM6IC8vICBTXG5cbiAgICAgIGNhc2UgODQ6IC8vICBUXG5cbiAgICAgIGNhc2UgODU6IC8vICBVXG5cbiAgICAgIGNhc2UgODY6IC8vICBWXG5cbiAgICAgIGNhc2UgODc6IC8vICBXXG5cbiAgICAgIGNhc2UgODg6IC8vICBYXG5cbiAgICAgIGNhc2UgODk6IC8vICBZXG5cbiAgICAgIGNhc2UgOTA6IC8vICBaXG5cbiAgICAgIGNhc2UgOTU6IC8vICBfXG5cbiAgICAgIGNhc2UgOTc6IC8vICBhXG5cbiAgICAgIGNhc2UgOTg6IC8vICBiXG5cbiAgICAgIGNhc2UgOTk6IC8vICBjXG5cbiAgICAgIGNhc2UgMTAwOiAvLyBkXG5cbiAgICAgIGNhc2UgMTAxOiAvLyBlXG5cbiAgICAgIGNhc2UgMTAyOiAvLyBmXG5cbiAgICAgIGNhc2UgMTAzOiAvLyBnXG5cbiAgICAgIGNhc2UgMTA0OiAvLyBoXG5cbiAgICAgIGNhc2UgMTA1OiAvLyBpXG5cbiAgICAgIGNhc2UgMTA2OiAvLyBqXG5cbiAgICAgIGNhc2UgMTA3OiAvLyBrXG5cbiAgICAgIGNhc2UgMTA4OiAvLyBsXG5cbiAgICAgIGNhc2UgMTA5OiAvLyBtXG5cbiAgICAgIGNhc2UgMTEwOiAvLyBuXG5cbiAgICAgIGNhc2UgMTExOiAvLyBvXG5cbiAgICAgIGNhc2UgMTEyOiAvLyBwXG5cbiAgICAgIGNhc2UgMTEzOiAvLyBxXG5cbiAgICAgIGNhc2UgMTE0OiAvLyByXG5cbiAgICAgIGNhc2UgMTE1OiAvLyBzXG5cbiAgICAgIGNhc2UgMTE2OiAvLyB0XG5cbiAgICAgIGNhc2UgMTE3OiAvLyB1XG5cbiAgICAgIGNhc2UgMTE4OiAvLyB2XG5cbiAgICAgIGNhc2UgMTE5OiAvLyB3XG5cbiAgICAgIGNhc2UgMTIwOiAvLyB4XG5cbiAgICAgIGNhc2UgMTIxOiAvLyB5XG5cbiAgICAgIGNhc2UgMTIyOlxuICAgICAgICAvLyB6XG4gICAgICAgIHJldHVybiByZWFkTmFtZShzb3VyY2UsIHBvcywgX2xpbmUsIF9jb2wsIHByZXYpO1xuICAgIH1cblxuICAgIHRocm93IHN5bnRheEVycm9yKHNvdXJjZSwgcG9zLCB1bmV4cGVjdGVkQ2hhcmFjdGVyTWVzc2FnZShjb2RlKSk7XG4gIH1cblxuICB2YXIgbGluZSA9IGxleGVyLmxpbmU7XG4gIHZhciBjb2wgPSAxICsgcG9zIC0gbGV4ZXIubGluZVN0YXJ0O1xuICByZXR1cm4gbmV3IFRva2VuKFRva2VuS2luZC5FT0YsIGJvZHlMZW5ndGgsIGJvZHlMZW5ndGgsIGxpbmUsIGNvbCwgcHJldik7XG59XG4vKipcbiAqIFJlcG9ydCBhIG1lc3NhZ2UgdGhhdCBhbiB1bmV4cGVjdGVkIGNoYXJhY3RlciB3YXMgZW5jb3VudGVyZWQuXG4gKi9cblxuXG5mdW5jdGlvbiB1bmV4cGVjdGVkQ2hhcmFjdGVyTWVzc2FnZShjb2RlKSB7XG4gIGlmIChjb2RlIDwgMHgwMDIwICYmIGNvZGUgIT09IDB4MDAwOSAmJiBjb2RlICE9PSAweDAwMGEgJiYgY29kZSAhPT0gMHgwMDBkKSB7XG4gICAgcmV0dXJuIFwiQ2Fubm90IGNvbnRhaW4gdGhlIGludmFsaWQgY2hhcmFjdGVyIFwiLmNvbmNhdChwcmludENoYXJDb2RlKGNvZGUpLCBcIi5cIik7XG4gIH1cblxuICBpZiAoY29kZSA9PT0gMzkpIHtcbiAgICAvLyAnXG4gICAgcmV0dXJuICdVbmV4cGVjdGVkIHNpbmdsZSBxdW90ZSBjaGFyYWN0ZXIgKFxcJyksIGRpZCB5b3UgbWVhbiB0byB1c2UgYSBkb3VibGUgcXVvdGUgKFwiKT8nO1xuICB9XG5cbiAgcmV0dXJuIFwiQ2Fubm90IHBhcnNlIHRoZSB1bmV4cGVjdGVkIGNoYXJhY3RlciBcIi5jb25jYXQocHJpbnRDaGFyQ29kZShjb2RlKSwgXCIuXCIpO1xufVxuLyoqXG4gKiBSZWFkcyBhIGNvbW1lbnQgdG9rZW4gZnJvbSB0aGUgc291cmNlIGZpbGUuXG4gKlxuICogI1tcXHUwMDA5XFx1MDAyMC1cXHVGRkZGXSpcbiAqL1xuXG5cbmZ1bmN0aW9uIHJlYWRDb21tZW50KHNvdXJjZSwgc3RhcnQsIGxpbmUsIGNvbCwgcHJldikge1xuICB2YXIgYm9keSA9IHNvdXJjZS5ib2R5O1xuICB2YXIgY29kZTtcbiAgdmFyIHBvc2l0aW9uID0gc3RhcnQ7XG5cbiAgZG8ge1xuICAgIGNvZGUgPSBib2R5LmNoYXJDb2RlQXQoKytwb3NpdGlvbik7XG4gIH0gd2hpbGUgKCFpc05hTihjb2RlKSAmJiAoIC8vIFNvdXJjZUNoYXJhY3RlciBidXQgbm90IExpbmVUZXJtaW5hdG9yXG4gIGNvZGUgPiAweDAwMWYgfHwgY29kZSA9PT0gMHgwMDA5KSk7XG5cbiAgcmV0dXJuIG5ldyBUb2tlbihUb2tlbktpbmQuQ09NTUVOVCwgc3RhcnQsIHBvc2l0aW9uLCBsaW5lLCBjb2wsIHByZXYsIGJvZHkuc2xpY2Uoc3RhcnQgKyAxLCBwb3NpdGlvbikpO1xufVxuLyoqXG4gKiBSZWFkcyBhIG51bWJlciB0b2tlbiBmcm9tIHRoZSBzb3VyY2UgZmlsZSwgZWl0aGVyIGEgZmxvYXRcbiAqIG9yIGFuIGludCBkZXBlbmRpbmcgb24gd2hldGhlciBhIGRlY2ltYWwgcG9pbnQgYXBwZWFycy5cbiAqXG4gKiBJbnQ6ICAgLT8oMHxbMS05XVswLTldKilcbiAqIEZsb2F0OiAtPygwfFsxLTldWzAtOV0qKShcXC5bMC05XSspPygoRXxlKSgrfC0pP1swLTldKyk/XG4gKi9cblxuXG5mdW5jdGlvbiByZWFkTnVtYmVyKHNvdXJjZSwgc3RhcnQsIGZpcnN0Q29kZSwgbGluZSwgY29sLCBwcmV2KSB7XG4gIHZhciBib2R5ID0gc291cmNlLmJvZHk7XG4gIHZhciBjb2RlID0gZmlyc3RDb2RlO1xuICB2YXIgcG9zaXRpb24gPSBzdGFydDtcbiAgdmFyIGlzRmxvYXQgPSBmYWxzZTtcblxuICBpZiAoY29kZSA9PT0gNDUpIHtcbiAgICAvLyAtXG4gICAgY29kZSA9IGJvZHkuY2hhckNvZGVBdCgrK3Bvc2l0aW9uKTtcbiAgfVxuXG4gIGlmIChjb2RlID09PSA0OCkge1xuICAgIC8vIDBcbiAgICBjb2RlID0gYm9keS5jaGFyQ29kZUF0KCsrcG9zaXRpb24pO1xuXG4gICAgaWYgKGNvZGUgPj0gNDggJiYgY29kZSA8PSA1Nykge1xuICAgICAgdGhyb3cgc3ludGF4RXJyb3Ioc291cmNlLCBwb3NpdGlvbiwgXCJJbnZhbGlkIG51bWJlciwgdW5leHBlY3RlZCBkaWdpdCBhZnRlciAwOiBcIi5jb25jYXQocHJpbnRDaGFyQ29kZShjb2RlKSwgXCIuXCIpKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcG9zaXRpb24gPSByZWFkRGlnaXRzKHNvdXJjZSwgcG9zaXRpb24sIGNvZGUpO1xuICAgIGNvZGUgPSBib2R5LmNoYXJDb2RlQXQocG9zaXRpb24pO1xuICB9XG5cbiAgaWYgKGNvZGUgPT09IDQ2KSB7XG4gICAgLy8gLlxuICAgIGlzRmxvYXQgPSB0cnVlO1xuICAgIGNvZGUgPSBib2R5LmNoYXJDb2RlQXQoKytwb3NpdGlvbik7XG4gICAgcG9zaXRpb24gPSByZWFkRGlnaXRzKHNvdXJjZSwgcG9zaXRpb24sIGNvZGUpO1xuICAgIGNvZGUgPSBib2R5LmNoYXJDb2RlQXQocG9zaXRpb24pO1xuICB9XG5cbiAgaWYgKGNvZGUgPT09IDY5IHx8IGNvZGUgPT09IDEwMSkge1xuICAgIC8vIEUgZVxuICAgIGlzRmxvYXQgPSB0cnVlO1xuICAgIGNvZGUgPSBib2R5LmNoYXJDb2RlQXQoKytwb3NpdGlvbik7XG5cbiAgICBpZiAoY29kZSA9PT0gNDMgfHwgY29kZSA9PT0gNDUpIHtcbiAgICAgIC8vICsgLVxuICAgICAgY29kZSA9IGJvZHkuY2hhckNvZGVBdCgrK3Bvc2l0aW9uKTtcbiAgICB9XG5cbiAgICBwb3NpdGlvbiA9IHJlYWREaWdpdHMoc291cmNlLCBwb3NpdGlvbiwgY29kZSk7XG4gICAgY29kZSA9IGJvZHkuY2hhckNvZGVBdChwb3NpdGlvbik7XG4gIH0gLy8gTnVtYmVycyBjYW5ub3QgYmUgZm9sbG93ZWQgYnkgLiBvciBOYW1lU3RhcnRcblxuXG4gIGlmIChjb2RlID09PSA0NiB8fCBpc05hbWVTdGFydChjb2RlKSkge1xuICAgIHRocm93IHN5bnRheEVycm9yKHNvdXJjZSwgcG9zaXRpb24sIFwiSW52YWxpZCBudW1iZXIsIGV4cGVjdGVkIGRpZ2l0IGJ1dCBnb3Q6IFwiLmNvbmNhdChwcmludENoYXJDb2RlKGNvZGUpLCBcIi5cIikpO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBUb2tlbihpc0Zsb2F0ID8gVG9rZW5LaW5kLkZMT0FUIDogVG9rZW5LaW5kLklOVCwgc3RhcnQsIHBvc2l0aW9uLCBsaW5lLCBjb2wsIHByZXYsIGJvZHkuc2xpY2Uoc3RhcnQsIHBvc2l0aW9uKSk7XG59XG4vKipcbiAqIFJldHVybnMgdGhlIG5ldyBwb3NpdGlvbiBpbiB0aGUgc291cmNlIGFmdGVyIHJlYWRpbmcgZGlnaXRzLlxuICovXG5cblxuZnVuY3Rpb24gcmVhZERpZ2l0cyhzb3VyY2UsIHN0YXJ0LCBmaXJzdENvZGUpIHtcbiAgdmFyIGJvZHkgPSBzb3VyY2UuYm9keTtcbiAgdmFyIHBvc2l0aW9uID0gc3RhcnQ7XG4gIHZhciBjb2RlID0gZmlyc3RDb2RlO1xuXG4gIGlmIChjb2RlID49IDQ4ICYmIGNvZGUgPD0gNTcpIHtcbiAgICAvLyAwIC0gOVxuICAgIGRvIHtcbiAgICAgIGNvZGUgPSBib2R5LmNoYXJDb2RlQXQoKytwb3NpdGlvbik7XG4gICAgfSB3aGlsZSAoY29kZSA+PSA0OCAmJiBjb2RlIDw9IDU3KTsgLy8gMCAtIDlcblxuXG4gICAgcmV0dXJuIHBvc2l0aW9uO1xuICB9XG5cbiAgdGhyb3cgc3ludGF4RXJyb3Ioc291cmNlLCBwb3NpdGlvbiwgXCJJbnZhbGlkIG51bWJlciwgZXhwZWN0ZWQgZGlnaXQgYnV0IGdvdDogXCIuY29uY2F0KHByaW50Q2hhckNvZGUoY29kZSksIFwiLlwiKSk7XG59XG4vKipcbiAqIFJlYWRzIGEgc3RyaW5nIHRva2VuIGZyb20gdGhlIHNvdXJjZSBmaWxlLlxuICpcbiAqIFwiKFteXCJcXFxcXFx1MDAwQVxcdTAwMERdfChcXFxcKHVbMC05YS1mQS1GXXs0fXxbXCJcXFxcL2JmbnJ0XSkpKSpcIlxuICovXG5cblxuZnVuY3Rpb24gcmVhZFN0cmluZyhzb3VyY2UsIHN0YXJ0LCBsaW5lLCBjb2wsIHByZXYpIHtcbiAgdmFyIGJvZHkgPSBzb3VyY2UuYm9keTtcbiAgdmFyIHBvc2l0aW9uID0gc3RhcnQgKyAxO1xuICB2YXIgY2h1bmtTdGFydCA9IHBvc2l0aW9uO1xuICB2YXIgY29kZSA9IDA7XG4gIHZhciB2YWx1ZSA9ICcnO1xuXG4gIHdoaWxlIChwb3NpdGlvbiA8IGJvZHkubGVuZ3RoICYmICFpc05hTihjb2RlID0gYm9keS5jaGFyQ29kZUF0KHBvc2l0aW9uKSkgJiYgLy8gbm90IExpbmVUZXJtaW5hdG9yXG4gIGNvZGUgIT09IDB4MDAwYSAmJiBjb2RlICE9PSAweDAwMGQpIHtcbiAgICAvLyBDbG9zaW5nIFF1b3RlIChcIilcbiAgICBpZiAoY29kZSA9PT0gMzQpIHtcbiAgICAgIHZhbHVlICs9IGJvZHkuc2xpY2UoY2h1bmtTdGFydCwgcG9zaXRpb24pO1xuICAgICAgcmV0dXJuIG5ldyBUb2tlbihUb2tlbktpbmQuU1RSSU5HLCBzdGFydCwgcG9zaXRpb24gKyAxLCBsaW5lLCBjb2wsIHByZXYsIHZhbHVlKTtcbiAgICB9IC8vIFNvdXJjZUNoYXJhY3RlclxuXG5cbiAgICBpZiAoY29kZSA8IDB4MDAyMCAmJiBjb2RlICE9PSAweDAwMDkpIHtcbiAgICAgIHRocm93IHN5bnRheEVycm9yKHNvdXJjZSwgcG9zaXRpb24sIFwiSW52YWxpZCBjaGFyYWN0ZXIgd2l0aGluIFN0cmluZzogXCIuY29uY2F0KHByaW50Q2hhckNvZGUoY29kZSksIFwiLlwiKSk7XG4gICAgfVxuXG4gICAgKytwb3NpdGlvbjtcblxuICAgIGlmIChjb2RlID09PSA5Mikge1xuICAgICAgLy8gXFxcbiAgICAgIHZhbHVlICs9IGJvZHkuc2xpY2UoY2h1bmtTdGFydCwgcG9zaXRpb24gLSAxKTtcbiAgICAgIGNvZGUgPSBib2R5LmNoYXJDb2RlQXQocG9zaXRpb24pO1xuXG4gICAgICBzd2l0Y2ggKGNvZGUpIHtcbiAgICAgICAgY2FzZSAzNDpcbiAgICAgICAgICB2YWx1ZSArPSAnXCInO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgNDc6XG4gICAgICAgICAgdmFsdWUgKz0gJy8nO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgOTI6XG4gICAgICAgICAgdmFsdWUgKz0gJ1xcXFwnO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgOTg6XG4gICAgICAgICAgdmFsdWUgKz0gJ1xcYic7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAxMDI6XG4gICAgICAgICAgdmFsdWUgKz0gJ1xcZic7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAxMTA6XG4gICAgICAgICAgdmFsdWUgKz0gJ1xcbic7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAxMTQ6XG4gICAgICAgICAgdmFsdWUgKz0gJ1xccic7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAxMTY6XG4gICAgICAgICAgdmFsdWUgKz0gJ1xcdCc7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAxMTc6XG4gICAgICAgICAge1xuICAgICAgICAgICAgLy8gdVhYWFhcbiAgICAgICAgICAgIHZhciBjaGFyQ29kZSA9IHVuaUNoYXJDb2RlKGJvZHkuY2hhckNvZGVBdChwb3NpdGlvbiArIDEpLCBib2R5LmNoYXJDb2RlQXQocG9zaXRpb24gKyAyKSwgYm9keS5jaGFyQ29kZUF0KHBvc2l0aW9uICsgMyksIGJvZHkuY2hhckNvZGVBdChwb3NpdGlvbiArIDQpKTtcblxuICAgICAgICAgICAgaWYgKGNoYXJDb2RlIDwgMCkge1xuICAgICAgICAgICAgICB2YXIgaW52YWxpZFNlcXVlbmNlID0gYm9keS5zbGljZShwb3NpdGlvbiArIDEsIHBvc2l0aW9uICsgNSk7XG4gICAgICAgICAgICAgIHRocm93IHN5bnRheEVycm9yKHNvdXJjZSwgcG9zaXRpb24sIFwiSW52YWxpZCBjaGFyYWN0ZXIgZXNjYXBlIHNlcXVlbmNlOiBcXFxcdVwiLmNvbmNhdChpbnZhbGlkU2VxdWVuY2UsIFwiLlwiKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhbHVlICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoY2hhckNvZGUpO1xuICAgICAgICAgICAgcG9zaXRpb24gKz0gNDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93IHN5bnRheEVycm9yKHNvdXJjZSwgcG9zaXRpb24sIFwiSW52YWxpZCBjaGFyYWN0ZXIgZXNjYXBlIHNlcXVlbmNlOiBcXFxcXCIuY29uY2F0KFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSksIFwiLlwiKSk7XG4gICAgICB9XG5cbiAgICAgICsrcG9zaXRpb247XG4gICAgICBjaHVua1N0YXJ0ID0gcG9zaXRpb247XG4gICAgfVxuICB9XG5cbiAgdGhyb3cgc3ludGF4RXJyb3Ioc291cmNlLCBwb3NpdGlvbiwgJ1VudGVybWluYXRlZCBzdHJpbmcuJyk7XG59XG4vKipcbiAqIFJlYWRzIGEgYmxvY2sgc3RyaW5nIHRva2VuIGZyb20gdGhlIHNvdXJjZSBmaWxlLlxuICpcbiAqIFwiXCJcIihcIj9cIj8oXFxcXFwiXCJcInxcXFxcKD8hPVwiXCJcIil8W15cIlxcXFxdKSkqXCJcIlwiXG4gKi9cblxuXG5mdW5jdGlvbiByZWFkQmxvY2tTdHJpbmcoc291cmNlLCBzdGFydCwgbGluZSwgY29sLCBwcmV2LCBsZXhlcikge1xuICB2YXIgYm9keSA9IHNvdXJjZS5ib2R5O1xuICB2YXIgcG9zaXRpb24gPSBzdGFydCArIDM7XG4gIHZhciBjaHVua1N0YXJ0ID0gcG9zaXRpb247XG4gIHZhciBjb2RlID0gMDtcbiAgdmFyIHJhd1ZhbHVlID0gJyc7XG5cbiAgd2hpbGUgKHBvc2l0aW9uIDwgYm9keS5sZW5ndGggJiYgIWlzTmFOKGNvZGUgPSBib2R5LmNoYXJDb2RlQXQocG9zaXRpb24pKSkge1xuICAgIC8vIENsb3NpbmcgVHJpcGxlLVF1b3RlIChcIlwiXCIpXG4gICAgaWYgKGNvZGUgPT09IDM0ICYmIGJvZHkuY2hhckNvZGVBdChwb3NpdGlvbiArIDEpID09PSAzNCAmJiBib2R5LmNoYXJDb2RlQXQocG9zaXRpb24gKyAyKSA9PT0gMzQpIHtcbiAgICAgIHJhd1ZhbHVlICs9IGJvZHkuc2xpY2UoY2h1bmtTdGFydCwgcG9zaXRpb24pO1xuICAgICAgcmV0dXJuIG5ldyBUb2tlbihUb2tlbktpbmQuQkxPQ0tfU1RSSU5HLCBzdGFydCwgcG9zaXRpb24gKyAzLCBsaW5lLCBjb2wsIHByZXYsIGRlZGVudEJsb2NrU3RyaW5nVmFsdWUocmF3VmFsdWUpKTtcbiAgICB9IC8vIFNvdXJjZUNoYXJhY3RlclxuXG5cbiAgICBpZiAoY29kZSA8IDB4MDAyMCAmJiBjb2RlICE9PSAweDAwMDkgJiYgY29kZSAhPT0gMHgwMDBhICYmIGNvZGUgIT09IDB4MDAwZCkge1xuICAgICAgdGhyb3cgc3ludGF4RXJyb3Ioc291cmNlLCBwb3NpdGlvbiwgXCJJbnZhbGlkIGNoYXJhY3RlciB3aXRoaW4gU3RyaW5nOiBcIi5jb25jYXQocHJpbnRDaGFyQ29kZShjb2RlKSwgXCIuXCIpKTtcbiAgICB9XG5cbiAgICBpZiAoY29kZSA9PT0gMTApIHtcbiAgICAgIC8vIG5ldyBsaW5lXG4gICAgICArK3Bvc2l0aW9uO1xuICAgICAgKytsZXhlci5saW5lO1xuICAgICAgbGV4ZXIubGluZVN0YXJ0ID0gcG9zaXRpb247XG4gICAgfSBlbHNlIGlmIChjb2RlID09PSAxMykge1xuICAgICAgLy8gY2FycmlhZ2UgcmV0dXJuXG4gICAgICBpZiAoYm9keS5jaGFyQ29kZUF0KHBvc2l0aW9uICsgMSkgPT09IDEwKSB7XG4gICAgICAgIHBvc2l0aW9uICs9IDI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICArK3Bvc2l0aW9uO1xuICAgICAgfVxuXG4gICAgICArK2xleGVyLmxpbmU7XG4gICAgICBsZXhlci5saW5lU3RhcnQgPSBwb3NpdGlvbjtcbiAgICB9IGVsc2UgaWYgKCAvLyBFc2NhcGUgVHJpcGxlLVF1b3RlIChcXFwiXCJcIilcbiAgICBjb2RlID09PSA5MiAmJiBib2R5LmNoYXJDb2RlQXQocG9zaXRpb24gKyAxKSA9PT0gMzQgJiYgYm9keS5jaGFyQ29kZUF0KHBvc2l0aW9uICsgMikgPT09IDM0ICYmIGJvZHkuY2hhckNvZGVBdChwb3NpdGlvbiArIDMpID09PSAzNCkge1xuICAgICAgcmF3VmFsdWUgKz0gYm9keS5zbGljZShjaHVua1N0YXJ0LCBwb3NpdGlvbikgKyAnXCJcIlwiJztcbiAgICAgIHBvc2l0aW9uICs9IDQ7XG4gICAgICBjaHVua1N0YXJ0ID0gcG9zaXRpb247XG4gICAgfSBlbHNlIHtcbiAgICAgICsrcG9zaXRpb247XG4gICAgfVxuICB9XG5cbiAgdGhyb3cgc3ludGF4RXJyb3Ioc291cmNlLCBwb3NpdGlvbiwgJ1VudGVybWluYXRlZCBzdHJpbmcuJyk7XG59XG4vKipcbiAqIENvbnZlcnRzIGZvdXIgaGV4YWRlY2ltYWwgY2hhcnMgdG8gdGhlIGludGVnZXIgdGhhdCB0aGVcbiAqIHN0cmluZyByZXByZXNlbnRzLiBGb3IgZXhhbXBsZSwgdW5pQ2hhckNvZGUoJzAnLCcwJywnMCcsJ2YnKVxuICogd2lsbCByZXR1cm4gMTUsIGFuZCB1bmlDaGFyQ29kZSgnMCcsJzAnLCdmJywnZicpIHJldHVybnMgMjU1LlxuICpcbiAqIFJldHVybnMgYSBuZWdhdGl2ZSBudW1iZXIgb24gZXJyb3IsIGlmIGEgY2hhciB3YXMgaW52YWxpZC5cbiAqXG4gKiBUaGlzIGlzIGltcGxlbWVudGVkIGJ5IG5vdGluZyB0aGF0IGNoYXIyaGV4KCkgcmV0dXJucyAtMSBvbiBlcnJvcixcbiAqIHdoaWNoIG1lYW5zIHRoZSByZXN1bHQgb2YgT1JpbmcgdGhlIGNoYXIyaGV4KCkgd2lsbCBhbHNvIGJlIG5lZ2F0aXZlLlxuICovXG5cblxuZnVuY3Rpb24gdW5pQ2hhckNvZGUoYSwgYiwgYywgZCkge1xuICByZXR1cm4gY2hhcjJoZXgoYSkgPDwgMTIgfCBjaGFyMmhleChiKSA8PCA4IHwgY2hhcjJoZXgoYykgPDwgNCB8IGNoYXIyaGV4KGQpO1xufVxuLyoqXG4gKiBDb252ZXJ0cyBhIGhleCBjaGFyYWN0ZXIgdG8gaXRzIGludGVnZXIgdmFsdWUuXG4gKiAnMCcgYmVjb21lcyAwLCAnOScgYmVjb21lcyA5XG4gKiAnQScgYmVjb21lcyAxMCwgJ0YnIGJlY29tZXMgMTVcbiAqICdhJyBiZWNvbWVzIDEwLCAnZicgYmVjb21lcyAxNVxuICpcbiAqIFJldHVybnMgLTEgb24gZXJyb3IuXG4gKi9cblxuXG5mdW5jdGlvbiBjaGFyMmhleChhKSB7XG4gIHJldHVybiBhID49IDQ4ICYmIGEgPD0gNTcgPyBhIC0gNDggLy8gMC05XG4gIDogYSA+PSA2NSAmJiBhIDw9IDcwID8gYSAtIDU1IC8vIEEtRlxuICA6IGEgPj0gOTcgJiYgYSA8PSAxMDIgPyBhIC0gODcgLy8gYS1mXG4gIDogLTE7XG59XG4vKipcbiAqIFJlYWRzIGFuIGFscGhhbnVtZXJpYyArIHVuZGVyc2NvcmUgbmFtZSBmcm9tIHRoZSBzb3VyY2UuXG4gKlxuICogW19BLVphLXpdW18wLTlBLVphLXpdKlxuICovXG5cblxuZnVuY3Rpb24gcmVhZE5hbWUoc291cmNlLCBzdGFydCwgbGluZSwgY29sLCBwcmV2KSB7XG4gIHZhciBib2R5ID0gc291cmNlLmJvZHk7XG4gIHZhciBib2R5TGVuZ3RoID0gYm9keS5sZW5ndGg7XG4gIHZhciBwb3NpdGlvbiA9IHN0YXJ0ICsgMTtcbiAgdmFyIGNvZGUgPSAwO1xuXG4gIHdoaWxlIChwb3NpdGlvbiAhPT0gYm9keUxlbmd0aCAmJiAhaXNOYU4oY29kZSA9IGJvZHkuY2hhckNvZGVBdChwb3NpdGlvbikpICYmIChjb2RlID09PSA5NSB8fCAvLyBfXG4gIGNvZGUgPj0gNDggJiYgY29kZSA8PSA1NyB8fCAvLyAwLTlcbiAgY29kZSA+PSA2NSAmJiBjb2RlIDw9IDkwIHx8IC8vIEEtWlxuICBjb2RlID49IDk3ICYmIGNvZGUgPD0gMTIyKSAvLyBhLXpcbiAgKSB7XG4gICAgKytwb3NpdGlvbjtcbiAgfVxuXG4gIHJldHVybiBuZXcgVG9rZW4oVG9rZW5LaW5kLk5BTUUsIHN0YXJ0LCBwb3NpdGlvbiwgbGluZSwgY29sLCBwcmV2LCBib2R5LnNsaWNlKHN0YXJ0LCBwb3NpdGlvbikpO1xufSAvLyBfIEEtWiBhLXpcblxuXG5mdW5jdGlvbiBpc05hbWVTdGFydChjb2RlKSB7XG4gIHJldHVybiBjb2RlID09PSA5NSB8fCBjb2RlID49IDY1ICYmIGNvZGUgPD0gOTAgfHwgY29kZSA+PSA5NyAmJiBjb2RlIDw9IDEyMjtcbn1cbiIsIi8qKlxuICogUmVwcmVzZW50cyBhIGxvY2F0aW9uIGluIGEgU291cmNlLlxuICovXG5cbi8qKlxuICogVGFrZXMgYSBTb3VyY2UgYW5kIGEgVVRGLTggY2hhcmFjdGVyIG9mZnNldCwgYW5kIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmdcbiAqIGxpbmUgYW5kIGNvbHVtbiBhcyBhIFNvdXJjZUxvY2F0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TG9jYXRpb24oc291cmNlLCBwb3NpdGlvbikge1xuICB2YXIgbGluZVJlZ2V4cCA9IC9cXHJcXG58W1xcblxccl0vZztcbiAgdmFyIGxpbmUgPSAxO1xuICB2YXIgY29sdW1uID0gcG9zaXRpb24gKyAxO1xuICB2YXIgbWF0Y2g7XG5cbiAgd2hpbGUgKChtYXRjaCA9IGxpbmVSZWdleHAuZXhlYyhzb3VyY2UuYm9keSkpICYmIG1hdGNoLmluZGV4IDwgcG9zaXRpb24pIHtcbiAgICBsaW5lICs9IDE7XG4gICAgY29sdW1uID0gcG9zaXRpb24gKyAxIC0gKG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbGluZTogbGluZSxcbiAgICBjb2x1bW46IGNvbHVtblxuICB9O1xufVxuIiwiaW1wb3J0IHsgc3ludGF4RXJyb3IgfSBmcm9tIFwiLi4vZXJyb3Ivc3ludGF4RXJyb3IubWpzXCI7XG5pbXBvcnQgeyBLaW5kIH0gZnJvbSBcIi4va2luZHMubWpzXCI7XG5pbXBvcnQgeyBMb2NhdGlvbiB9IGZyb20gXCIuL2FzdC5tanNcIjtcbmltcG9ydCB7IFRva2VuS2luZCB9IGZyb20gXCIuL3Rva2VuS2luZC5tanNcIjtcbmltcG9ydCB7IFNvdXJjZSwgaXNTb3VyY2UgfSBmcm9tIFwiLi9zb3VyY2UubWpzXCI7XG5pbXBvcnQgeyBEaXJlY3RpdmVMb2NhdGlvbiB9IGZyb20gXCIuL2RpcmVjdGl2ZUxvY2F0aW9uLm1qc1wiO1xuaW1wb3J0IHsgTGV4ZXIsIGlzUHVuY3R1YXRvclRva2VuS2luZCB9IGZyb20gXCIuL2xleGVyLm1qc1wiO1xuLyoqXG4gKiBDb25maWd1cmF0aW9uIG9wdGlvbnMgdG8gY29udHJvbCBwYXJzZXIgYmVoYXZpb3JcbiAqL1xuXG4vKipcbiAqIEdpdmVuIGEgR3JhcGhRTCBzb3VyY2UsIHBhcnNlcyBpdCBpbnRvIGEgRG9jdW1lbnQuXG4gKiBUaHJvd3MgR3JhcGhRTEVycm9yIGlmIGEgc3ludGF4IGVycm9yIGlzIGVuY291bnRlcmVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2Uoc291cmNlLCBvcHRpb25zKSB7XG4gIHZhciBwYXJzZXIgPSBuZXcgUGFyc2VyKHNvdXJjZSwgb3B0aW9ucyk7XG4gIHJldHVybiBwYXJzZXIucGFyc2VEb2N1bWVudCgpO1xufVxuLyoqXG4gKiBHaXZlbiBhIHN0cmluZyBjb250YWluaW5nIGEgR3JhcGhRTCB2YWx1ZSAoZXguIGBbNDJdYCksIHBhcnNlIHRoZSBBU1QgZm9yXG4gKiB0aGF0IHZhbHVlLlxuICogVGhyb3dzIEdyYXBoUUxFcnJvciBpZiBhIHN5bnRheCBlcnJvciBpcyBlbmNvdW50ZXJlZC5cbiAqXG4gKiBUaGlzIGlzIHVzZWZ1bCB3aXRoaW4gdG9vbHMgdGhhdCBvcGVyYXRlIHVwb24gR3JhcGhRTCBWYWx1ZXMgZGlyZWN0bHkgYW5kXG4gKiBpbiBpc29sYXRpb24gb2YgY29tcGxldGUgR3JhcGhRTCBkb2N1bWVudHMuXG4gKlxuICogQ29uc2lkZXIgcHJvdmlkaW5nIHRoZSByZXN1bHRzIHRvIHRoZSB1dGlsaXR5IGZ1bmN0aW9uOiB2YWx1ZUZyb21BU1QoKS5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VWYWx1ZShzb3VyY2UsIG9wdGlvbnMpIHtcbiAgdmFyIHBhcnNlciA9IG5ldyBQYXJzZXIoc291cmNlLCBvcHRpb25zKTtcbiAgcGFyc2VyLmV4cGVjdFRva2VuKFRva2VuS2luZC5TT0YpO1xuICB2YXIgdmFsdWUgPSBwYXJzZXIucGFyc2VWYWx1ZUxpdGVyYWwoZmFsc2UpO1xuICBwYXJzZXIuZXhwZWN0VG9rZW4oVG9rZW5LaW5kLkVPRik7XG4gIHJldHVybiB2YWx1ZTtcbn1cbi8qKlxuICogR2l2ZW4gYSBzdHJpbmcgY29udGFpbmluZyBhIEdyYXBoUUwgVHlwZSAoZXguIGBbSW50IV1gKSwgcGFyc2UgdGhlIEFTVCBmb3JcbiAqIHRoYXQgdHlwZS5cbiAqIFRocm93cyBHcmFwaFFMRXJyb3IgaWYgYSBzeW50YXggZXJyb3IgaXMgZW5jb3VudGVyZWQuXG4gKlxuICogVGhpcyBpcyB1c2VmdWwgd2l0aGluIHRvb2xzIHRoYXQgb3BlcmF0ZSB1cG9uIEdyYXBoUUwgVHlwZXMgZGlyZWN0bHkgYW5kXG4gKiBpbiBpc29sYXRpb24gb2YgY29tcGxldGUgR3JhcGhRTCBkb2N1bWVudHMuXG4gKlxuICogQ29uc2lkZXIgcHJvdmlkaW5nIHRoZSByZXN1bHRzIHRvIHRoZSB1dGlsaXR5IGZ1bmN0aW9uOiB0eXBlRnJvbUFTVCgpLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVR5cGUoc291cmNlLCBvcHRpb25zKSB7XG4gIHZhciBwYXJzZXIgPSBuZXcgUGFyc2VyKHNvdXJjZSwgb3B0aW9ucyk7XG4gIHBhcnNlci5leHBlY3RUb2tlbihUb2tlbktpbmQuU09GKTtcbiAgdmFyIHR5cGUgPSBwYXJzZXIucGFyc2VUeXBlUmVmZXJlbmNlKCk7XG4gIHBhcnNlci5leHBlY3RUb2tlbihUb2tlbktpbmQuRU9GKTtcbiAgcmV0dXJuIHR5cGU7XG59XG4vKipcbiAqIFRoaXMgY2xhc3MgaXMgZXhwb3J0ZWQgb25seSB0byBhc3Npc3QgcGVvcGxlIGluIGltcGxlbWVudGluZyB0aGVpciBvd24gcGFyc2Vyc1xuICogd2l0aG91dCBkdXBsaWNhdGluZyB0b28gbXVjaCBjb2RlIGFuZCBzaG91bGQgYmUgdXNlZCBvbmx5IGFzIGxhc3QgcmVzb3J0IGZvciBjYXNlc1xuICogc3VjaCBhcyBleHBlcmltZW50YWwgc3ludGF4IG9yIGlmIGNlcnRhaW4gZmVhdHVyZXMgY291bGQgbm90IGJlIGNvbnRyaWJ1dGVkIHVwc3RyZWFtLlxuICpcbiAqIEl0IGlzIHN0aWxsIHBhcnQgb2YgdGhlIGludGVybmFsIEFQSSBhbmQgaXMgdmVyc2lvbmVkLCBzbyBhbnkgY2hhbmdlcyB0byBpdCBhcmUgbmV2ZXJcbiAqIGNvbnNpZGVyZWQgYnJlYWtpbmcgY2hhbmdlcy4gSWYgeW91IHN0aWxsIG5lZWQgdG8gc3VwcG9ydCBtdWx0aXBsZSB2ZXJzaW9ucyBvZiB0aGVcbiAqIGxpYnJhcnksIHBsZWFzZSB1c2UgdGhlIGB2ZXJzaW9uSW5mb2AgdmFyaWFibGUgZm9yIHZlcnNpb24gZGV0ZWN0aW9uLlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5cbmV4cG9ydCB2YXIgUGFyc2VyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUGFyc2VyKHNvdXJjZSwgb3B0aW9ucykge1xuICAgIHZhciBzb3VyY2VPYmogPSBpc1NvdXJjZShzb3VyY2UpID8gc291cmNlIDogbmV3IFNvdXJjZShzb3VyY2UpO1xuICAgIHRoaXMuX2xleGVyID0gbmV3IExleGVyKHNvdXJjZU9iaik7XG4gICAgdGhpcy5fb3B0aW9ucyA9IG9wdGlvbnM7XG4gIH1cbiAgLyoqXG4gICAqIENvbnZlcnRzIGEgbmFtZSBsZXggdG9rZW4gaW50byBhIG5hbWUgcGFyc2Ugbm9kZS5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gUGFyc2VyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucGFyc2VOYW1lID0gZnVuY3Rpb24gcGFyc2VOYW1lKCkge1xuICAgIHZhciB0b2tlbiA9IHRoaXMuZXhwZWN0VG9rZW4oVG9rZW5LaW5kLk5BTUUpO1xuICAgIHJldHVybiB7XG4gICAgICBraW5kOiBLaW5kLk5BTUUsXG4gICAgICB2YWx1ZTogdG9rZW4udmFsdWUsXG4gICAgICBsb2M6IHRoaXMubG9jKHRva2VuKVxuICAgIH07XG4gIH0gLy8gSW1wbGVtZW50cyB0aGUgcGFyc2luZyBydWxlcyBpbiB0aGUgRG9jdW1lbnQgc2VjdGlvbi5cblxuICAvKipcbiAgICogRG9jdW1lbnQgOiBEZWZpbml0aW9uK1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wYXJzZURvY3VtZW50ID0gZnVuY3Rpb24gcGFyc2VEb2N1bWVudCgpIHtcbiAgICB2YXIgc3RhcnQgPSB0aGlzLl9sZXhlci50b2tlbjtcbiAgICByZXR1cm4ge1xuICAgICAga2luZDogS2luZC5ET0NVTUVOVCxcbiAgICAgIGRlZmluaXRpb25zOiB0aGlzLm1hbnkoVG9rZW5LaW5kLlNPRiwgdGhpcy5wYXJzZURlZmluaXRpb24sIFRva2VuS2luZC5FT0YpLFxuICAgICAgbG9jOiB0aGlzLmxvYyhzdGFydClcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBEZWZpbml0aW9uIDpcbiAgICogICAtIEV4ZWN1dGFibGVEZWZpbml0aW9uXG4gICAqICAgLSBUeXBlU3lzdGVtRGVmaW5pdGlvblxuICAgKiAgIC0gVHlwZVN5c3RlbUV4dGVuc2lvblxuICAgKlxuICAgKiBFeGVjdXRhYmxlRGVmaW5pdGlvbiA6XG4gICAqICAgLSBPcGVyYXRpb25EZWZpbml0aW9uXG4gICAqICAgLSBGcmFnbWVudERlZmluaXRpb25cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFyc2VEZWZpbml0aW9uID0gZnVuY3Rpb24gcGFyc2VEZWZpbml0aW9uKCkge1xuICAgIGlmICh0aGlzLnBlZWsoVG9rZW5LaW5kLk5BTUUpKSB7XG4gICAgICBzd2l0Y2ggKHRoaXMuX2xleGVyLnRva2VuLnZhbHVlKSB7XG4gICAgICAgIGNhc2UgJ3F1ZXJ5JzpcbiAgICAgICAgY2FzZSAnbXV0YXRpb24nOlxuICAgICAgICBjYXNlICdzdWJzY3JpcHRpb24nOlxuICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlT3BlcmF0aW9uRGVmaW5pdGlvbigpO1xuXG4gICAgICAgIGNhc2UgJ2ZyYWdtZW50JzpcbiAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZUZyYWdtZW50RGVmaW5pdGlvbigpO1xuXG4gICAgICAgIGNhc2UgJ3NjaGVtYSc6XG4gICAgICAgIGNhc2UgJ3NjYWxhcic6XG4gICAgICAgIGNhc2UgJ3R5cGUnOlxuICAgICAgICBjYXNlICdpbnRlcmZhY2UnOlxuICAgICAgICBjYXNlICd1bmlvbic6XG4gICAgICAgIGNhc2UgJ2VudW0nOlxuICAgICAgICBjYXNlICdpbnB1dCc6XG4gICAgICAgIGNhc2UgJ2RpcmVjdGl2ZSc6XG4gICAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VUeXBlU3lzdGVtRGVmaW5pdGlvbigpO1xuXG4gICAgICAgIGNhc2UgJ2V4dGVuZCc6XG4gICAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VUeXBlU3lzdGVtRXh0ZW5zaW9uKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0aGlzLnBlZWsoVG9rZW5LaW5kLkJSQUNFX0wpKSB7XG4gICAgICByZXR1cm4gdGhpcy5wYXJzZU9wZXJhdGlvbkRlZmluaXRpb24oKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMucGVla0Rlc2NyaXB0aW9uKCkpIHtcbiAgICAgIHJldHVybiB0aGlzLnBhcnNlVHlwZVN5c3RlbURlZmluaXRpb24oKTtcbiAgICB9XG5cbiAgICB0aHJvdyB0aGlzLnVuZXhwZWN0ZWQoKTtcbiAgfSAvLyBJbXBsZW1lbnRzIHRoZSBwYXJzaW5nIHJ1bGVzIGluIHRoZSBPcGVyYXRpb25zIHNlY3Rpb24uXG5cbiAgLyoqXG4gICAqIE9wZXJhdGlvbkRlZmluaXRpb24gOlxuICAgKiAgLSBTZWxlY3Rpb25TZXRcbiAgICogIC0gT3BlcmF0aW9uVHlwZSBOYW1lPyBWYXJpYWJsZURlZmluaXRpb25zPyBEaXJlY3RpdmVzPyBTZWxlY3Rpb25TZXRcbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFyc2VPcGVyYXRpb25EZWZpbml0aW9uID0gZnVuY3Rpb24gcGFyc2VPcGVyYXRpb25EZWZpbml0aW9uKCkge1xuICAgIHZhciBzdGFydCA9IHRoaXMuX2xleGVyLnRva2VuO1xuXG4gICAgaWYgKHRoaXMucGVlayhUb2tlbktpbmQuQlJBQ0VfTCkpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGtpbmQ6IEtpbmQuT1BFUkFUSU9OX0RFRklOSVRJT04sXG4gICAgICAgIG9wZXJhdGlvbjogJ3F1ZXJ5JyxcbiAgICAgICAgbmFtZTogdW5kZWZpbmVkLFxuICAgICAgICB2YXJpYWJsZURlZmluaXRpb25zOiBbXSxcbiAgICAgICAgZGlyZWN0aXZlczogW10sXG4gICAgICAgIHNlbGVjdGlvblNldDogdGhpcy5wYXJzZVNlbGVjdGlvblNldCgpLFxuICAgICAgICBsb2M6IHRoaXMubG9jKHN0YXJ0KVxuICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgb3BlcmF0aW9uID0gdGhpcy5wYXJzZU9wZXJhdGlvblR5cGUoKTtcbiAgICB2YXIgbmFtZTtcblxuICAgIGlmICh0aGlzLnBlZWsoVG9rZW5LaW5kLk5BTUUpKSB7XG4gICAgICBuYW1lID0gdGhpcy5wYXJzZU5hbWUoKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAga2luZDogS2luZC5PUEVSQVRJT05fREVGSU5JVElPTixcbiAgICAgIG9wZXJhdGlvbjogb3BlcmF0aW9uLFxuICAgICAgbmFtZTogbmFtZSxcbiAgICAgIHZhcmlhYmxlRGVmaW5pdGlvbnM6IHRoaXMucGFyc2VWYXJpYWJsZURlZmluaXRpb25zKCksXG4gICAgICBkaXJlY3RpdmVzOiB0aGlzLnBhcnNlRGlyZWN0aXZlcyhmYWxzZSksXG4gICAgICBzZWxlY3Rpb25TZXQ6IHRoaXMucGFyc2VTZWxlY3Rpb25TZXQoKSxcbiAgICAgIGxvYzogdGhpcy5sb2Moc3RhcnQpXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogT3BlcmF0aW9uVHlwZSA6IG9uZSBvZiBxdWVyeSBtdXRhdGlvbiBzdWJzY3JpcHRpb25cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFyc2VPcGVyYXRpb25UeXBlID0gZnVuY3Rpb24gcGFyc2VPcGVyYXRpb25UeXBlKCkge1xuICAgIHZhciBvcGVyYXRpb25Ub2tlbiA9IHRoaXMuZXhwZWN0VG9rZW4oVG9rZW5LaW5kLk5BTUUpO1xuXG4gICAgc3dpdGNoIChvcGVyYXRpb25Ub2tlbi52YWx1ZSkge1xuICAgICAgY2FzZSAncXVlcnknOlxuICAgICAgICByZXR1cm4gJ3F1ZXJ5JztcblxuICAgICAgY2FzZSAnbXV0YXRpb24nOlxuICAgICAgICByZXR1cm4gJ211dGF0aW9uJztcblxuICAgICAgY2FzZSAnc3Vic2NyaXB0aW9uJzpcbiAgICAgICAgcmV0dXJuICdzdWJzY3JpcHRpb24nO1xuICAgIH1cblxuICAgIHRocm93IHRoaXMudW5leHBlY3RlZChvcGVyYXRpb25Ub2tlbik7XG4gIH1cbiAgLyoqXG4gICAqIFZhcmlhYmxlRGVmaW5pdGlvbnMgOiAoIFZhcmlhYmxlRGVmaW5pdGlvbisgKVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wYXJzZVZhcmlhYmxlRGVmaW5pdGlvbnMgPSBmdW5jdGlvbiBwYXJzZVZhcmlhYmxlRGVmaW5pdGlvbnMoKSB7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9uYWxNYW55KFRva2VuS2luZC5QQVJFTl9MLCB0aGlzLnBhcnNlVmFyaWFibGVEZWZpbml0aW9uLCBUb2tlbktpbmQuUEFSRU5fUik7XG4gIH1cbiAgLyoqXG4gICAqIFZhcmlhYmxlRGVmaW5pdGlvbiA6IFZhcmlhYmxlIDogVHlwZSBEZWZhdWx0VmFsdWU/IERpcmVjdGl2ZXNbQ29uc3RdP1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wYXJzZVZhcmlhYmxlRGVmaW5pdGlvbiA9IGZ1bmN0aW9uIHBhcnNlVmFyaWFibGVEZWZpbml0aW9uKCkge1xuICAgIHZhciBzdGFydCA9IHRoaXMuX2xleGVyLnRva2VuO1xuICAgIHJldHVybiB7XG4gICAgICBraW5kOiBLaW5kLlZBUklBQkxFX0RFRklOSVRJT04sXG4gICAgICB2YXJpYWJsZTogdGhpcy5wYXJzZVZhcmlhYmxlKCksXG4gICAgICB0eXBlOiAodGhpcy5leHBlY3RUb2tlbihUb2tlbktpbmQuQ09MT04pLCB0aGlzLnBhcnNlVHlwZVJlZmVyZW5jZSgpKSxcbiAgICAgIGRlZmF1bHRWYWx1ZTogdGhpcy5leHBlY3RPcHRpb25hbFRva2VuKFRva2VuS2luZC5FUVVBTFMpID8gdGhpcy5wYXJzZVZhbHVlTGl0ZXJhbCh0cnVlKSA6IHVuZGVmaW5lZCxcbiAgICAgIGRpcmVjdGl2ZXM6IHRoaXMucGFyc2VEaXJlY3RpdmVzKHRydWUpLFxuICAgICAgbG9jOiB0aGlzLmxvYyhzdGFydClcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBWYXJpYWJsZSA6ICQgTmFtZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wYXJzZVZhcmlhYmxlID0gZnVuY3Rpb24gcGFyc2VWYXJpYWJsZSgpIHtcbiAgICB2YXIgc3RhcnQgPSB0aGlzLl9sZXhlci50b2tlbjtcbiAgICB0aGlzLmV4cGVjdFRva2VuKFRva2VuS2luZC5ET0xMQVIpO1xuICAgIHJldHVybiB7XG4gICAgICBraW5kOiBLaW5kLlZBUklBQkxFLFxuICAgICAgbmFtZTogdGhpcy5wYXJzZU5hbWUoKSxcbiAgICAgIGxvYzogdGhpcy5sb2Moc3RhcnQpXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogU2VsZWN0aW9uU2V0IDogeyBTZWxlY3Rpb24rIH1cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFyc2VTZWxlY3Rpb25TZXQgPSBmdW5jdGlvbiBwYXJzZVNlbGVjdGlvblNldCgpIHtcbiAgICB2YXIgc3RhcnQgPSB0aGlzLl9sZXhlci50b2tlbjtcbiAgICByZXR1cm4ge1xuICAgICAga2luZDogS2luZC5TRUxFQ1RJT05fU0VULFxuICAgICAgc2VsZWN0aW9uczogdGhpcy5tYW55KFRva2VuS2luZC5CUkFDRV9MLCB0aGlzLnBhcnNlU2VsZWN0aW9uLCBUb2tlbktpbmQuQlJBQ0VfUiksXG4gICAgICBsb2M6IHRoaXMubG9jKHN0YXJ0KVxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIFNlbGVjdGlvbiA6XG4gICAqICAgLSBGaWVsZFxuICAgKiAgIC0gRnJhZ21lbnRTcHJlYWRcbiAgICogICAtIElubGluZUZyYWdtZW50XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBhcnNlU2VsZWN0aW9uID0gZnVuY3Rpb24gcGFyc2VTZWxlY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucGVlayhUb2tlbktpbmQuU1BSRUFEKSA/IHRoaXMucGFyc2VGcmFnbWVudCgpIDogdGhpcy5wYXJzZUZpZWxkKCk7XG4gIH1cbiAgLyoqXG4gICAqIEZpZWxkIDogQWxpYXM/IE5hbWUgQXJndW1lbnRzPyBEaXJlY3RpdmVzPyBTZWxlY3Rpb25TZXQ/XG4gICAqXG4gICAqIEFsaWFzIDogTmFtZSA6XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBhcnNlRmllbGQgPSBmdW5jdGlvbiBwYXJzZUZpZWxkKCkge1xuICAgIHZhciBzdGFydCA9IHRoaXMuX2xleGVyLnRva2VuO1xuICAgIHZhciBuYW1lT3JBbGlhcyA9IHRoaXMucGFyc2VOYW1lKCk7XG4gICAgdmFyIGFsaWFzO1xuICAgIHZhciBuYW1lO1xuXG4gICAgaWYgKHRoaXMuZXhwZWN0T3B0aW9uYWxUb2tlbihUb2tlbktpbmQuQ09MT04pKSB7XG4gICAgICBhbGlhcyA9IG5hbWVPckFsaWFzO1xuICAgICAgbmFtZSA9IHRoaXMucGFyc2VOYW1lKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5hbWUgPSBuYW1lT3JBbGlhcztcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAga2luZDogS2luZC5GSUVMRCxcbiAgICAgIGFsaWFzOiBhbGlhcyxcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICBhcmd1bWVudHM6IHRoaXMucGFyc2VBcmd1bWVudHMoZmFsc2UpLFxuICAgICAgZGlyZWN0aXZlczogdGhpcy5wYXJzZURpcmVjdGl2ZXMoZmFsc2UpLFxuICAgICAgc2VsZWN0aW9uU2V0OiB0aGlzLnBlZWsoVG9rZW5LaW5kLkJSQUNFX0wpID8gdGhpcy5wYXJzZVNlbGVjdGlvblNldCgpIDogdW5kZWZpbmVkLFxuICAgICAgbG9jOiB0aGlzLmxvYyhzdGFydClcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBBcmd1bWVudHNbQ29uc3RdIDogKCBBcmd1bWVudFs/Q29uc3RdKyApXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBhcnNlQXJndW1lbnRzID0gZnVuY3Rpb24gcGFyc2VBcmd1bWVudHMoaXNDb25zdCkge1xuICAgIHZhciBpdGVtID0gaXNDb25zdCA/IHRoaXMucGFyc2VDb25zdEFyZ3VtZW50IDogdGhpcy5wYXJzZUFyZ3VtZW50O1xuICAgIHJldHVybiB0aGlzLm9wdGlvbmFsTWFueShUb2tlbktpbmQuUEFSRU5fTCwgaXRlbSwgVG9rZW5LaW5kLlBBUkVOX1IpO1xuICB9XG4gIC8qKlxuICAgKiBBcmd1bWVudFtDb25zdF0gOiBOYW1lIDogVmFsdWVbP0NvbnN0XVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wYXJzZUFyZ3VtZW50ID0gZnVuY3Rpb24gcGFyc2VBcmd1bWVudCgpIHtcbiAgICB2YXIgc3RhcnQgPSB0aGlzLl9sZXhlci50b2tlbjtcbiAgICB2YXIgbmFtZSA9IHRoaXMucGFyc2VOYW1lKCk7XG4gICAgdGhpcy5leHBlY3RUb2tlbihUb2tlbktpbmQuQ09MT04pO1xuICAgIHJldHVybiB7XG4gICAgICBraW5kOiBLaW5kLkFSR1VNRU5ULFxuICAgICAgbmFtZTogbmFtZSxcbiAgICAgIHZhbHVlOiB0aGlzLnBhcnNlVmFsdWVMaXRlcmFsKGZhbHNlKSxcbiAgICAgIGxvYzogdGhpcy5sb2Moc3RhcnQpXG4gICAgfTtcbiAgfTtcblxuICBfcHJvdG8ucGFyc2VDb25zdEFyZ3VtZW50ID0gZnVuY3Rpb24gcGFyc2VDb25zdEFyZ3VtZW50KCkge1xuICAgIHZhciBzdGFydCA9IHRoaXMuX2xleGVyLnRva2VuO1xuICAgIHJldHVybiB7XG4gICAgICBraW5kOiBLaW5kLkFSR1VNRU5ULFxuICAgICAgbmFtZTogdGhpcy5wYXJzZU5hbWUoKSxcbiAgICAgIHZhbHVlOiAodGhpcy5leHBlY3RUb2tlbihUb2tlbktpbmQuQ09MT04pLCB0aGlzLnBhcnNlVmFsdWVMaXRlcmFsKHRydWUpKSxcbiAgICAgIGxvYzogdGhpcy5sb2Moc3RhcnQpXG4gICAgfTtcbiAgfSAvLyBJbXBsZW1lbnRzIHRoZSBwYXJzaW5nIHJ1bGVzIGluIHRoZSBGcmFnbWVudHMgc2VjdGlvbi5cblxuICAvKipcbiAgICogQ29ycmVzcG9uZHMgdG8gYm90aCBGcmFnbWVudFNwcmVhZCBhbmQgSW5saW5lRnJhZ21lbnQgaW4gdGhlIHNwZWMuXG4gICAqXG4gICAqIEZyYWdtZW50U3ByZWFkIDogLi4uIEZyYWdtZW50TmFtZSBEaXJlY3RpdmVzP1xuICAgKlxuICAgKiBJbmxpbmVGcmFnbWVudCA6IC4uLiBUeXBlQ29uZGl0aW9uPyBEaXJlY3RpdmVzPyBTZWxlY3Rpb25TZXRcbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFyc2VGcmFnbWVudCA9IGZ1bmN0aW9uIHBhcnNlRnJhZ21lbnQoKSB7XG4gICAgdmFyIHN0YXJ0ID0gdGhpcy5fbGV4ZXIudG9rZW47XG4gICAgdGhpcy5leHBlY3RUb2tlbihUb2tlbktpbmQuU1BSRUFEKTtcbiAgICB2YXIgaGFzVHlwZUNvbmRpdGlvbiA9IHRoaXMuZXhwZWN0T3B0aW9uYWxLZXl3b3JkKCdvbicpO1xuXG4gICAgaWYgKCFoYXNUeXBlQ29uZGl0aW9uICYmIHRoaXMucGVlayhUb2tlbktpbmQuTkFNRSkpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGtpbmQ6IEtpbmQuRlJBR01FTlRfU1BSRUFELFxuICAgICAgICBuYW1lOiB0aGlzLnBhcnNlRnJhZ21lbnROYW1lKCksXG4gICAgICAgIGRpcmVjdGl2ZXM6IHRoaXMucGFyc2VEaXJlY3RpdmVzKGZhbHNlKSxcbiAgICAgICAgbG9jOiB0aGlzLmxvYyhzdGFydClcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGtpbmQ6IEtpbmQuSU5MSU5FX0ZSQUdNRU5ULFxuICAgICAgdHlwZUNvbmRpdGlvbjogaGFzVHlwZUNvbmRpdGlvbiA/IHRoaXMucGFyc2VOYW1lZFR5cGUoKSA6IHVuZGVmaW5lZCxcbiAgICAgIGRpcmVjdGl2ZXM6IHRoaXMucGFyc2VEaXJlY3RpdmVzKGZhbHNlKSxcbiAgICAgIHNlbGVjdGlvblNldDogdGhpcy5wYXJzZVNlbGVjdGlvblNldCgpLFxuICAgICAgbG9jOiB0aGlzLmxvYyhzdGFydClcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBGcmFnbWVudERlZmluaXRpb24gOlxuICAgKiAgIC0gZnJhZ21lbnQgRnJhZ21lbnROYW1lIG9uIFR5cGVDb25kaXRpb24gRGlyZWN0aXZlcz8gU2VsZWN0aW9uU2V0XG4gICAqXG4gICAqIFR5cGVDb25kaXRpb24gOiBOYW1lZFR5cGVcbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFyc2VGcmFnbWVudERlZmluaXRpb24gPSBmdW5jdGlvbiBwYXJzZUZyYWdtZW50RGVmaW5pdGlvbigpIHtcbiAgICB2YXIgX3RoaXMkX29wdGlvbnM7XG5cbiAgICB2YXIgc3RhcnQgPSB0aGlzLl9sZXhlci50b2tlbjtcbiAgICB0aGlzLmV4cGVjdEtleXdvcmQoJ2ZyYWdtZW50Jyk7IC8vIEV4cGVyaW1lbnRhbCBzdXBwb3J0IGZvciBkZWZpbmluZyB2YXJpYWJsZXMgd2l0aGluIGZyYWdtZW50cyBjaGFuZ2VzXG4gICAgLy8gdGhlIGdyYW1tYXIgb2YgRnJhZ21lbnREZWZpbml0aW9uOlxuICAgIC8vICAgLSBmcmFnbWVudCBGcmFnbWVudE5hbWUgVmFyaWFibGVEZWZpbml0aW9ucz8gb24gVHlwZUNvbmRpdGlvbiBEaXJlY3RpdmVzPyBTZWxlY3Rpb25TZXRcblxuICAgIGlmICgoKF90aGlzJF9vcHRpb25zID0gdGhpcy5fb3B0aW9ucykgPT09IG51bGwgfHwgX3RoaXMkX29wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF90aGlzJF9vcHRpb25zLmV4cGVyaW1lbnRhbEZyYWdtZW50VmFyaWFibGVzKSA9PT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAga2luZDogS2luZC5GUkFHTUVOVF9ERUZJTklUSU9OLFxuICAgICAgICBuYW1lOiB0aGlzLnBhcnNlRnJhZ21lbnROYW1lKCksXG4gICAgICAgIHZhcmlhYmxlRGVmaW5pdGlvbnM6IHRoaXMucGFyc2VWYXJpYWJsZURlZmluaXRpb25zKCksXG4gICAgICAgIHR5cGVDb25kaXRpb246ICh0aGlzLmV4cGVjdEtleXdvcmQoJ29uJyksIHRoaXMucGFyc2VOYW1lZFR5cGUoKSksXG4gICAgICAgIGRpcmVjdGl2ZXM6IHRoaXMucGFyc2VEaXJlY3RpdmVzKGZhbHNlKSxcbiAgICAgICAgc2VsZWN0aW9uU2V0OiB0aGlzLnBhcnNlU2VsZWN0aW9uU2V0KCksXG4gICAgICAgIGxvYzogdGhpcy5sb2Moc3RhcnQpXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBraW5kOiBLaW5kLkZSQUdNRU5UX0RFRklOSVRJT04sXG4gICAgICBuYW1lOiB0aGlzLnBhcnNlRnJhZ21lbnROYW1lKCksXG4gICAgICB0eXBlQ29uZGl0aW9uOiAodGhpcy5leHBlY3RLZXl3b3JkKCdvbicpLCB0aGlzLnBhcnNlTmFtZWRUeXBlKCkpLFxuICAgICAgZGlyZWN0aXZlczogdGhpcy5wYXJzZURpcmVjdGl2ZXMoZmFsc2UpLFxuICAgICAgc2VsZWN0aW9uU2V0OiB0aGlzLnBhcnNlU2VsZWN0aW9uU2V0KCksXG4gICAgICBsb2M6IHRoaXMubG9jKHN0YXJ0KVxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIEZyYWdtZW50TmFtZSA6IE5hbWUgYnV0IG5vdCBgb25gXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBhcnNlRnJhZ21lbnROYW1lID0gZnVuY3Rpb24gcGFyc2VGcmFnbWVudE5hbWUoKSB7XG4gICAgaWYgKHRoaXMuX2xleGVyLnRva2VuLnZhbHVlID09PSAnb24nKSB7XG4gICAgICB0aHJvdyB0aGlzLnVuZXhwZWN0ZWQoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5wYXJzZU5hbWUoKTtcbiAgfSAvLyBJbXBsZW1lbnRzIHRoZSBwYXJzaW5nIHJ1bGVzIGluIHRoZSBWYWx1ZXMgc2VjdGlvbi5cblxuICAvKipcbiAgICogVmFsdWVbQ29uc3RdIDpcbiAgICogICAtIFt+Q29uc3RdIFZhcmlhYmxlXG4gICAqICAgLSBJbnRWYWx1ZVxuICAgKiAgIC0gRmxvYXRWYWx1ZVxuICAgKiAgIC0gU3RyaW5nVmFsdWVcbiAgICogICAtIEJvb2xlYW5WYWx1ZVxuICAgKiAgIC0gTnVsbFZhbHVlXG4gICAqICAgLSBFbnVtVmFsdWVcbiAgICogICAtIExpc3RWYWx1ZVs/Q29uc3RdXG4gICAqICAgLSBPYmplY3RWYWx1ZVs/Q29uc3RdXG4gICAqXG4gICAqIEJvb2xlYW5WYWx1ZSA6IG9uZSBvZiBgdHJ1ZWAgYGZhbHNlYFxuICAgKlxuICAgKiBOdWxsVmFsdWUgOiBgbnVsbGBcbiAgICpcbiAgICogRW51bVZhbHVlIDogTmFtZSBidXQgbm90IGB0cnVlYCwgYGZhbHNlYCBvciBgbnVsbGBcbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFyc2VWYWx1ZUxpdGVyYWwgPSBmdW5jdGlvbiBwYXJzZVZhbHVlTGl0ZXJhbChpc0NvbnN0KSB7XG4gICAgdmFyIHRva2VuID0gdGhpcy5fbGV4ZXIudG9rZW47XG5cbiAgICBzd2l0Y2ggKHRva2VuLmtpbmQpIHtcbiAgICAgIGNhc2UgVG9rZW5LaW5kLkJSQUNLRVRfTDpcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VMaXN0KGlzQ29uc3QpO1xuXG4gICAgICBjYXNlIFRva2VuS2luZC5CUkFDRV9MOlxuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZU9iamVjdChpc0NvbnN0KTtcblxuICAgICAgY2FzZSBUb2tlbktpbmQuSU5UOlxuICAgICAgICB0aGlzLl9sZXhlci5hZHZhbmNlKCk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBraW5kOiBLaW5kLklOVCxcbiAgICAgICAgICB2YWx1ZTogdG9rZW4udmFsdWUsXG4gICAgICAgICAgbG9jOiB0aGlzLmxvYyh0b2tlbilcbiAgICAgICAgfTtcblxuICAgICAgY2FzZSBUb2tlbktpbmQuRkxPQVQ6XG4gICAgICAgIHRoaXMuX2xleGVyLmFkdmFuY2UoKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGtpbmQ6IEtpbmQuRkxPQVQsXG4gICAgICAgICAgdmFsdWU6IHRva2VuLnZhbHVlLFxuICAgICAgICAgIGxvYzogdGhpcy5sb2ModG9rZW4pXG4gICAgICAgIH07XG5cbiAgICAgIGNhc2UgVG9rZW5LaW5kLlNUUklORzpcbiAgICAgIGNhc2UgVG9rZW5LaW5kLkJMT0NLX1NUUklORzpcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VTdHJpbmdMaXRlcmFsKCk7XG5cbiAgICAgIGNhc2UgVG9rZW5LaW5kLk5BTUU6XG4gICAgICAgIHRoaXMuX2xleGVyLmFkdmFuY2UoKTtcblxuICAgICAgICBzd2l0Y2ggKHRva2VuLnZhbHVlKSB7XG4gICAgICAgICAgY2FzZSAndHJ1ZSc6XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBraW5kOiBLaW5kLkJPT0xFQU4sXG4gICAgICAgICAgICAgIHZhbHVlOiB0cnVlLFxuICAgICAgICAgICAgICBsb2M6IHRoaXMubG9jKHRva2VuKVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgIGNhc2UgJ2ZhbHNlJzpcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIGtpbmQ6IEtpbmQuQk9PTEVBTixcbiAgICAgICAgICAgICAgdmFsdWU6IGZhbHNlLFxuICAgICAgICAgICAgICBsb2M6IHRoaXMubG9jKHRva2VuKVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgIGNhc2UgJ251bGwnOlxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAga2luZDogS2luZC5OVUxMLFxuICAgICAgICAgICAgICBsb2M6IHRoaXMubG9jKHRva2VuKVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBraW5kOiBLaW5kLkVOVU0sXG4gICAgICAgICAgICAgIHZhbHVlOiB0b2tlbi52YWx1ZSxcbiAgICAgICAgICAgICAgbG9jOiB0aGlzLmxvYyh0b2tlbilcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgY2FzZSBUb2tlbktpbmQuRE9MTEFSOlxuICAgICAgICBpZiAoIWlzQ29uc3QpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZVZhcmlhYmxlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICB0aHJvdyB0aGlzLnVuZXhwZWN0ZWQoKTtcbiAgfTtcblxuICBfcHJvdG8ucGFyc2VTdHJpbmdMaXRlcmFsID0gZnVuY3Rpb24gcGFyc2VTdHJpbmdMaXRlcmFsKCkge1xuICAgIHZhciB0b2tlbiA9IHRoaXMuX2xleGVyLnRva2VuO1xuXG4gICAgdGhpcy5fbGV4ZXIuYWR2YW5jZSgpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGtpbmQ6IEtpbmQuU1RSSU5HLFxuICAgICAgdmFsdWU6IHRva2VuLnZhbHVlLFxuICAgICAgYmxvY2s6IHRva2VuLmtpbmQgPT09IFRva2VuS2luZC5CTE9DS19TVFJJTkcsXG4gICAgICBsb2M6IHRoaXMubG9jKHRva2VuKVxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIExpc3RWYWx1ZVtDb25zdF0gOlxuICAgKiAgIC0gWyBdXG4gICAqICAgLSBbIFZhbHVlWz9Db25zdF0rIF1cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFyc2VMaXN0ID0gZnVuY3Rpb24gcGFyc2VMaXN0KGlzQ29uc3QpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIHN0YXJ0ID0gdGhpcy5fbGV4ZXIudG9rZW47XG5cbiAgICB2YXIgaXRlbSA9IGZ1bmN0aW9uIGl0ZW0oKSB7XG4gICAgICByZXR1cm4gX3RoaXMucGFyc2VWYWx1ZUxpdGVyYWwoaXNDb25zdCk7XG4gICAgfTtcblxuICAgIHJldHVybiB7XG4gICAgICBraW5kOiBLaW5kLkxJU1QsXG4gICAgICB2YWx1ZXM6IHRoaXMuYW55KFRva2VuS2luZC5CUkFDS0VUX0wsIGl0ZW0sIFRva2VuS2luZC5CUkFDS0VUX1IpLFxuICAgICAgbG9jOiB0aGlzLmxvYyhzdGFydClcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBPYmplY3RWYWx1ZVtDb25zdF0gOlxuICAgKiAgIC0geyB9XG4gICAqICAgLSB7IE9iamVjdEZpZWxkWz9Db25zdF0rIH1cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFyc2VPYmplY3QgPSBmdW5jdGlvbiBwYXJzZU9iamVjdChpc0NvbnN0KSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgc3RhcnQgPSB0aGlzLl9sZXhlci50b2tlbjtcblxuICAgIHZhciBpdGVtID0gZnVuY3Rpb24gaXRlbSgpIHtcbiAgICAgIHJldHVybiBfdGhpczIucGFyc2VPYmplY3RGaWVsZChpc0NvbnN0KTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGtpbmQ6IEtpbmQuT0JKRUNULFxuICAgICAgZmllbGRzOiB0aGlzLmFueShUb2tlbktpbmQuQlJBQ0VfTCwgaXRlbSwgVG9rZW5LaW5kLkJSQUNFX1IpLFxuICAgICAgbG9jOiB0aGlzLmxvYyhzdGFydClcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBPYmplY3RGaWVsZFtDb25zdF0gOiBOYW1lIDogVmFsdWVbP0NvbnN0XVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wYXJzZU9iamVjdEZpZWxkID0gZnVuY3Rpb24gcGFyc2VPYmplY3RGaWVsZChpc0NvbnN0KSB7XG4gICAgdmFyIHN0YXJ0ID0gdGhpcy5fbGV4ZXIudG9rZW47XG4gICAgdmFyIG5hbWUgPSB0aGlzLnBhcnNlTmFtZSgpO1xuICAgIHRoaXMuZXhwZWN0VG9rZW4oVG9rZW5LaW5kLkNPTE9OKTtcbiAgICByZXR1cm4ge1xuICAgICAga2luZDogS2luZC5PQkpFQ1RfRklFTEQsXG4gICAgICBuYW1lOiBuYW1lLFxuICAgICAgdmFsdWU6IHRoaXMucGFyc2VWYWx1ZUxpdGVyYWwoaXNDb25zdCksXG4gICAgICBsb2M6IHRoaXMubG9jKHN0YXJ0KVxuICAgIH07XG4gIH0gLy8gSW1wbGVtZW50cyB0aGUgcGFyc2luZyBydWxlcyBpbiB0aGUgRGlyZWN0aXZlcyBzZWN0aW9uLlxuXG4gIC8qKlxuICAgKiBEaXJlY3RpdmVzW0NvbnN0XSA6IERpcmVjdGl2ZVs/Q29uc3RdK1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wYXJzZURpcmVjdGl2ZXMgPSBmdW5jdGlvbiBwYXJzZURpcmVjdGl2ZXMoaXNDb25zdCkge1xuICAgIHZhciBkaXJlY3RpdmVzID0gW107XG5cbiAgICB3aGlsZSAodGhpcy5wZWVrKFRva2VuS2luZC5BVCkpIHtcbiAgICAgIGRpcmVjdGl2ZXMucHVzaCh0aGlzLnBhcnNlRGlyZWN0aXZlKGlzQ29uc3QpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGlyZWN0aXZlcztcbiAgfVxuICAvKipcbiAgICogRGlyZWN0aXZlW0NvbnN0XSA6IEAgTmFtZSBBcmd1bWVudHNbP0NvbnN0XT9cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFyc2VEaXJlY3RpdmUgPSBmdW5jdGlvbiBwYXJzZURpcmVjdGl2ZShpc0NvbnN0KSB7XG4gICAgdmFyIHN0YXJ0ID0gdGhpcy5fbGV4ZXIudG9rZW47XG4gICAgdGhpcy5leHBlY3RUb2tlbihUb2tlbktpbmQuQVQpO1xuICAgIHJldHVybiB7XG4gICAgICBraW5kOiBLaW5kLkRJUkVDVElWRSxcbiAgICAgIG5hbWU6IHRoaXMucGFyc2VOYW1lKCksXG4gICAgICBhcmd1bWVudHM6IHRoaXMucGFyc2VBcmd1bWVudHMoaXNDb25zdCksXG4gICAgICBsb2M6IHRoaXMubG9jKHN0YXJ0KVxuICAgIH07XG4gIH0gLy8gSW1wbGVtZW50cyB0aGUgcGFyc2luZyBydWxlcyBpbiB0aGUgVHlwZXMgc2VjdGlvbi5cblxuICAvKipcbiAgICogVHlwZSA6XG4gICAqICAgLSBOYW1lZFR5cGVcbiAgICogICAtIExpc3RUeXBlXG4gICAqICAgLSBOb25OdWxsVHlwZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wYXJzZVR5cGVSZWZlcmVuY2UgPSBmdW5jdGlvbiBwYXJzZVR5cGVSZWZlcmVuY2UoKSB7XG4gICAgdmFyIHN0YXJ0ID0gdGhpcy5fbGV4ZXIudG9rZW47XG4gICAgdmFyIHR5cGU7XG5cbiAgICBpZiAodGhpcy5leHBlY3RPcHRpb25hbFRva2VuKFRva2VuS2luZC5CUkFDS0VUX0wpKSB7XG4gICAgICB0eXBlID0gdGhpcy5wYXJzZVR5cGVSZWZlcmVuY2UoKTtcbiAgICAgIHRoaXMuZXhwZWN0VG9rZW4oVG9rZW5LaW5kLkJSQUNLRVRfUik7XG4gICAgICB0eXBlID0ge1xuICAgICAgICBraW5kOiBLaW5kLkxJU1RfVFlQRSxcbiAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAgbG9jOiB0aGlzLmxvYyhzdGFydClcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHR5cGUgPSB0aGlzLnBhcnNlTmFtZWRUeXBlKCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZXhwZWN0T3B0aW9uYWxUb2tlbihUb2tlbktpbmQuQkFORykpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGtpbmQ6IEtpbmQuTk9OX05VTExfVFlQRSxcbiAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAgbG9jOiB0aGlzLmxvYyhzdGFydClcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHR5cGU7XG4gIH1cbiAgLyoqXG4gICAqIE5hbWVkVHlwZSA6IE5hbWVcbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFyc2VOYW1lZFR5cGUgPSBmdW5jdGlvbiBwYXJzZU5hbWVkVHlwZSgpIHtcbiAgICB2YXIgc3RhcnQgPSB0aGlzLl9sZXhlci50b2tlbjtcbiAgICByZXR1cm4ge1xuICAgICAga2luZDogS2luZC5OQU1FRF9UWVBFLFxuICAgICAgbmFtZTogdGhpcy5wYXJzZU5hbWUoKSxcbiAgICAgIGxvYzogdGhpcy5sb2Moc3RhcnQpXG4gICAgfTtcbiAgfSAvLyBJbXBsZW1lbnRzIHRoZSBwYXJzaW5nIHJ1bGVzIGluIHRoZSBUeXBlIERlZmluaXRpb24gc2VjdGlvbi5cblxuICAvKipcbiAgICogVHlwZVN5c3RlbURlZmluaXRpb24gOlxuICAgKiAgIC0gU2NoZW1hRGVmaW5pdGlvblxuICAgKiAgIC0gVHlwZURlZmluaXRpb25cbiAgICogICAtIERpcmVjdGl2ZURlZmluaXRpb25cbiAgICpcbiAgICogVHlwZURlZmluaXRpb24gOlxuICAgKiAgIC0gU2NhbGFyVHlwZURlZmluaXRpb25cbiAgICogICAtIE9iamVjdFR5cGVEZWZpbml0aW9uXG4gICAqICAgLSBJbnRlcmZhY2VUeXBlRGVmaW5pdGlvblxuICAgKiAgIC0gVW5pb25UeXBlRGVmaW5pdGlvblxuICAgKiAgIC0gRW51bVR5cGVEZWZpbml0aW9uXG4gICAqICAgLSBJbnB1dE9iamVjdFR5cGVEZWZpbml0aW9uXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBhcnNlVHlwZVN5c3RlbURlZmluaXRpb24gPSBmdW5jdGlvbiBwYXJzZVR5cGVTeXN0ZW1EZWZpbml0aW9uKCkge1xuICAgIC8vIE1hbnkgZGVmaW5pdGlvbnMgYmVnaW4gd2l0aCBhIGRlc2NyaXB0aW9uIGFuZCByZXF1aXJlIGEgbG9va2FoZWFkLlxuICAgIHZhciBrZXl3b3JkVG9rZW4gPSB0aGlzLnBlZWtEZXNjcmlwdGlvbigpID8gdGhpcy5fbGV4ZXIubG9va2FoZWFkKCkgOiB0aGlzLl9sZXhlci50b2tlbjtcblxuICAgIGlmIChrZXl3b3JkVG9rZW4ua2luZCA9PT0gVG9rZW5LaW5kLk5BTUUpIHtcbiAgICAgIHN3aXRjaCAoa2V5d29yZFRva2VuLnZhbHVlKSB7XG4gICAgICAgIGNhc2UgJ3NjaGVtYSc6XG4gICAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VTY2hlbWFEZWZpbml0aW9uKCk7XG5cbiAgICAgICAgY2FzZSAnc2NhbGFyJzpcbiAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZVNjYWxhclR5cGVEZWZpbml0aW9uKCk7XG5cbiAgICAgICAgY2FzZSAndHlwZSc6XG4gICAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VPYmplY3RUeXBlRGVmaW5pdGlvbigpO1xuXG4gICAgICAgIGNhc2UgJ2ludGVyZmFjZSc6XG4gICAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VJbnRlcmZhY2VUeXBlRGVmaW5pdGlvbigpO1xuXG4gICAgICAgIGNhc2UgJ3VuaW9uJzpcbiAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZVVuaW9uVHlwZURlZmluaXRpb24oKTtcblxuICAgICAgICBjYXNlICdlbnVtJzpcbiAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZUVudW1UeXBlRGVmaW5pdGlvbigpO1xuXG4gICAgICAgIGNhc2UgJ2lucHV0JzpcbiAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZUlucHV0T2JqZWN0VHlwZURlZmluaXRpb24oKTtcblxuICAgICAgICBjYXNlICdkaXJlY3RpdmUnOlxuICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlRGlyZWN0aXZlRGVmaW5pdGlvbigpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRocm93IHRoaXMudW5leHBlY3RlZChrZXl3b3JkVG9rZW4pO1xuICB9O1xuXG4gIF9wcm90by5wZWVrRGVzY3JpcHRpb24gPSBmdW5jdGlvbiBwZWVrRGVzY3JpcHRpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucGVlayhUb2tlbktpbmQuU1RSSU5HKSB8fCB0aGlzLnBlZWsoVG9rZW5LaW5kLkJMT0NLX1NUUklORyk7XG4gIH1cbiAgLyoqXG4gICAqIERlc2NyaXB0aW9uIDogU3RyaW5nVmFsdWVcbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFyc2VEZXNjcmlwdGlvbiA9IGZ1bmN0aW9uIHBhcnNlRGVzY3JpcHRpb24oKSB7XG4gICAgaWYgKHRoaXMucGVla0Rlc2NyaXB0aW9uKCkpIHtcbiAgICAgIHJldHVybiB0aGlzLnBhcnNlU3RyaW5nTGl0ZXJhbCgpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogU2NoZW1hRGVmaW5pdGlvbiA6IERlc2NyaXB0aW9uPyBzY2hlbWEgRGlyZWN0aXZlc1tDb25zdF0/IHsgT3BlcmF0aW9uVHlwZURlZmluaXRpb24rIH1cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFyc2VTY2hlbWFEZWZpbml0aW9uID0gZnVuY3Rpb24gcGFyc2VTY2hlbWFEZWZpbml0aW9uKCkge1xuICAgIHZhciBzdGFydCA9IHRoaXMuX2xleGVyLnRva2VuO1xuICAgIHZhciBkZXNjcmlwdGlvbiA9IHRoaXMucGFyc2VEZXNjcmlwdGlvbigpO1xuICAgIHRoaXMuZXhwZWN0S2V5d29yZCgnc2NoZW1hJyk7XG4gICAgdmFyIGRpcmVjdGl2ZXMgPSB0aGlzLnBhcnNlRGlyZWN0aXZlcyh0cnVlKTtcbiAgICB2YXIgb3BlcmF0aW9uVHlwZXMgPSB0aGlzLm1hbnkoVG9rZW5LaW5kLkJSQUNFX0wsIHRoaXMucGFyc2VPcGVyYXRpb25UeXBlRGVmaW5pdGlvbiwgVG9rZW5LaW5kLkJSQUNFX1IpO1xuICAgIHJldHVybiB7XG4gICAgICBraW5kOiBLaW5kLlNDSEVNQV9ERUZJTklUSU9OLFxuICAgICAgZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uLFxuICAgICAgZGlyZWN0aXZlczogZGlyZWN0aXZlcyxcbiAgICAgIG9wZXJhdGlvblR5cGVzOiBvcGVyYXRpb25UeXBlcyxcbiAgICAgIGxvYzogdGhpcy5sb2Moc3RhcnQpXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogT3BlcmF0aW9uVHlwZURlZmluaXRpb24gOiBPcGVyYXRpb25UeXBlIDogTmFtZWRUeXBlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBhcnNlT3BlcmF0aW9uVHlwZURlZmluaXRpb24gPSBmdW5jdGlvbiBwYXJzZU9wZXJhdGlvblR5cGVEZWZpbml0aW9uKCkge1xuICAgIHZhciBzdGFydCA9IHRoaXMuX2xleGVyLnRva2VuO1xuICAgIHZhciBvcGVyYXRpb24gPSB0aGlzLnBhcnNlT3BlcmF0aW9uVHlwZSgpO1xuICAgIHRoaXMuZXhwZWN0VG9rZW4oVG9rZW5LaW5kLkNPTE9OKTtcbiAgICB2YXIgdHlwZSA9IHRoaXMucGFyc2VOYW1lZFR5cGUoKTtcbiAgICByZXR1cm4ge1xuICAgICAga2luZDogS2luZC5PUEVSQVRJT05fVFlQRV9ERUZJTklUSU9OLFxuICAgICAgb3BlcmF0aW9uOiBvcGVyYXRpb24sXG4gICAgICB0eXBlOiB0eXBlLFxuICAgICAgbG9jOiB0aGlzLmxvYyhzdGFydClcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBTY2FsYXJUeXBlRGVmaW5pdGlvbiA6IERlc2NyaXB0aW9uPyBzY2FsYXIgTmFtZSBEaXJlY3RpdmVzW0NvbnN0XT9cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFyc2VTY2FsYXJUeXBlRGVmaW5pdGlvbiA9IGZ1bmN0aW9uIHBhcnNlU2NhbGFyVHlwZURlZmluaXRpb24oKSB7XG4gICAgdmFyIHN0YXJ0ID0gdGhpcy5fbGV4ZXIudG9rZW47XG4gICAgdmFyIGRlc2NyaXB0aW9uID0gdGhpcy5wYXJzZURlc2NyaXB0aW9uKCk7XG4gICAgdGhpcy5leHBlY3RLZXl3b3JkKCdzY2FsYXInKTtcbiAgICB2YXIgbmFtZSA9IHRoaXMucGFyc2VOYW1lKCk7XG4gICAgdmFyIGRpcmVjdGl2ZXMgPSB0aGlzLnBhcnNlRGlyZWN0aXZlcyh0cnVlKTtcbiAgICByZXR1cm4ge1xuICAgICAga2luZDogS2luZC5TQ0FMQVJfVFlQRV9ERUZJTklUSU9OLFxuICAgICAgZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uLFxuICAgICAgbmFtZTogbmFtZSxcbiAgICAgIGRpcmVjdGl2ZXM6IGRpcmVjdGl2ZXMsXG4gICAgICBsb2M6IHRoaXMubG9jKHN0YXJ0KVxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIE9iamVjdFR5cGVEZWZpbml0aW9uIDpcbiAgICogICBEZXNjcmlwdGlvbj9cbiAgICogICB0eXBlIE5hbWUgSW1wbGVtZW50c0ludGVyZmFjZXM/IERpcmVjdGl2ZXNbQ29uc3RdPyBGaWVsZHNEZWZpbml0aW9uP1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wYXJzZU9iamVjdFR5cGVEZWZpbml0aW9uID0gZnVuY3Rpb24gcGFyc2VPYmplY3RUeXBlRGVmaW5pdGlvbigpIHtcbiAgICB2YXIgc3RhcnQgPSB0aGlzLl9sZXhlci50b2tlbjtcbiAgICB2YXIgZGVzY3JpcHRpb24gPSB0aGlzLnBhcnNlRGVzY3JpcHRpb24oKTtcbiAgICB0aGlzLmV4cGVjdEtleXdvcmQoJ3R5cGUnKTtcbiAgICB2YXIgbmFtZSA9IHRoaXMucGFyc2VOYW1lKCk7XG4gICAgdmFyIGludGVyZmFjZXMgPSB0aGlzLnBhcnNlSW1wbGVtZW50c0ludGVyZmFjZXMoKTtcbiAgICB2YXIgZGlyZWN0aXZlcyA9IHRoaXMucGFyc2VEaXJlY3RpdmVzKHRydWUpO1xuICAgIHZhciBmaWVsZHMgPSB0aGlzLnBhcnNlRmllbGRzRGVmaW5pdGlvbigpO1xuICAgIHJldHVybiB7XG4gICAgICBraW5kOiBLaW5kLk9CSkVDVF9UWVBFX0RFRklOSVRJT04sXG4gICAgICBkZXNjcmlwdGlvbjogZGVzY3JpcHRpb24sXG4gICAgICBuYW1lOiBuYW1lLFxuICAgICAgaW50ZXJmYWNlczogaW50ZXJmYWNlcyxcbiAgICAgIGRpcmVjdGl2ZXM6IGRpcmVjdGl2ZXMsXG4gICAgICBmaWVsZHM6IGZpZWxkcyxcbiAgICAgIGxvYzogdGhpcy5sb2Moc3RhcnQpXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogSW1wbGVtZW50c0ludGVyZmFjZXMgOlxuICAgKiAgIC0gaW1wbGVtZW50cyBgJmA/IE5hbWVkVHlwZVxuICAgKiAgIC0gSW1wbGVtZW50c0ludGVyZmFjZXMgJiBOYW1lZFR5cGVcbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFyc2VJbXBsZW1lbnRzSW50ZXJmYWNlcyA9IGZ1bmN0aW9uIHBhcnNlSW1wbGVtZW50c0ludGVyZmFjZXMoKSB7XG4gICAgdmFyIF90aGlzJF9vcHRpb25zMjtcblxuICAgIGlmICghdGhpcy5leHBlY3RPcHRpb25hbEtleXdvcmQoJ2ltcGxlbWVudHMnKSkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIGlmICgoKF90aGlzJF9vcHRpb25zMiA9IHRoaXMuX29wdGlvbnMpID09PSBudWxsIHx8IF90aGlzJF9vcHRpb25zMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3RoaXMkX29wdGlvbnMyLmFsbG93TGVnYWN5U0RMSW1wbGVtZW50c0ludGVyZmFjZXMpID09PSB0cnVlKSB7XG4gICAgICB2YXIgdHlwZXMgPSBbXTsgLy8gT3B0aW9uYWwgbGVhZGluZyBhbXBlcnNhbmRcblxuICAgICAgdGhpcy5leHBlY3RPcHRpb25hbFRva2VuKFRva2VuS2luZC5BTVApO1xuXG4gICAgICBkbyB7XG4gICAgICAgIHR5cGVzLnB1c2godGhpcy5wYXJzZU5hbWVkVHlwZSgpKTtcbiAgICAgIH0gd2hpbGUgKHRoaXMuZXhwZWN0T3B0aW9uYWxUb2tlbihUb2tlbktpbmQuQU1QKSB8fCB0aGlzLnBlZWsoVG9rZW5LaW5kLk5BTUUpKTtcblxuICAgICAgcmV0dXJuIHR5cGVzO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmRlbGltaXRlZE1hbnkoVG9rZW5LaW5kLkFNUCwgdGhpcy5wYXJzZU5hbWVkVHlwZSk7XG4gIH1cbiAgLyoqXG4gICAqIEZpZWxkc0RlZmluaXRpb24gOiB7IEZpZWxkRGVmaW5pdGlvbisgfVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wYXJzZUZpZWxkc0RlZmluaXRpb24gPSBmdW5jdGlvbiBwYXJzZUZpZWxkc0RlZmluaXRpb24oKSB7XG4gICAgdmFyIF90aGlzJF9vcHRpb25zMztcblxuICAgIC8vIExlZ2FjeSBzdXBwb3J0IGZvciB0aGUgU0RMP1xuICAgIGlmICgoKF90aGlzJF9vcHRpb25zMyA9IHRoaXMuX29wdGlvbnMpID09PSBudWxsIHx8IF90aGlzJF9vcHRpb25zMyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3RoaXMkX29wdGlvbnMzLmFsbG93TGVnYWN5U0RMRW1wdHlGaWVsZHMpID09PSB0cnVlICYmIHRoaXMucGVlayhUb2tlbktpbmQuQlJBQ0VfTCkgJiYgdGhpcy5fbGV4ZXIubG9va2FoZWFkKCkua2luZCA9PT0gVG9rZW5LaW5kLkJSQUNFX1IpIHtcbiAgICAgIHRoaXMuX2xleGVyLmFkdmFuY2UoKTtcblxuICAgICAgdGhpcy5fbGV4ZXIuYWR2YW5jZSgpO1xuXG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMub3B0aW9uYWxNYW55KFRva2VuS2luZC5CUkFDRV9MLCB0aGlzLnBhcnNlRmllbGREZWZpbml0aW9uLCBUb2tlbktpbmQuQlJBQ0VfUik7XG4gIH1cbiAgLyoqXG4gICAqIEZpZWxkRGVmaW5pdGlvbiA6XG4gICAqICAgLSBEZXNjcmlwdGlvbj8gTmFtZSBBcmd1bWVudHNEZWZpbml0aW9uPyA6IFR5cGUgRGlyZWN0aXZlc1tDb25zdF0/XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBhcnNlRmllbGREZWZpbml0aW9uID0gZnVuY3Rpb24gcGFyc2VGaWVsZERlZmluaXRpb24oKSB7XG4gICAgdmFyIHN0YXJ0ID0gdGhpcy5fbGV4ZXIudG9rZW47XG4gICAgdmFyIGRlc2NyaXB0aW9uID0gdGhpcy5wYXJzZURlc2NyaXB0aW9uKCk7XG4gICAgdmFyIG5hbWUgPSB0aGlzLnBhcnNlTmFtZSgpO1xuICAgIHZhciBhcmdzID0gdGhpcy5wYXJzZUFyZ3VtZW50RGVmcygpO1xuICAgIHRoaXMuZXhwZWN0VG9rZW4oVG9rZW5LaW5kLkNPTE9OKTtcbiAgICB2YXIgdHlwZSA9IHRoaXMucGFyc2VUeXBlUmVmZXJlbmNlKCk7XG4gICAgdmFyIGRpcmVjdGl2ZXMgPSB0aGlzLnBhcnNlRGlyZWN0aXZlcyh0cnVlKTtcbiAgICByZXR1cm4ge1xuICAgICAga2luZDogS2luZC5GSUVMRF9ERUZJTklUSU9OLFxuICAgICAgZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uLFxuICAgICAgbmFtZTogbmFtZSxcbiAgICAgIGFyZ3VtZW50czogYXJncyxcbiAgICAgIHR5cGU6IHR5cGUsXG4gICAgICBkaXJlY3RpdmVzOiBkaXJlY3RpdmVzLFxuICAgICAgbG9jOiB0aGlzLmxvYyhzdGFydClcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBBcmd1bWVudHNEZWZpbml0aW9uIDogKCBJbnB1dFZhbHVlRGVmaW5pdGlvbisgKVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wYXJzZUFyZ3VtZW50RGVmcyA9IGZ1bmN0aW9uIHBhcnNlQXJndW1lbnREZWZzKCkge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbmFsTWFueShUb2tlbktpbmQuUEFSRU5fTCwgdGhpcy5wYXJzZUlucHV0VmFsdWVEZWYsIFRva2VuS2luZC5QQVJFTl9SKTtcbiAgfVxuICAvKipcbiAgICogSW5wdXRWYWx1ZURlZmluaXRpb24gOlxuICAgKiAgIC0gRGVzY3JpcHRpb24/IE5hbWUgOiBUeXBlIERlZmF1bHRWYWx1ZT8gRGlyZWN0aXZlc1tDb25zdF0/XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBhcnNlSW5wdXRWYWx1ZURlZiA9IGZ1bmN0aW9uIHBhcnNlSW5wdXRWYWx1ZURlZigpIHtcbiAgICB2YXIgc3RhcnQgPSB0aGlzLl9sZXhlci50b2tlbjtcbiAgICB2YXIgZGVzY3JpcHRpb24gPSB0aGlzLnBhcnNlRGVzY3JpcHRpb24oKTtcbiAgICB2YXIgbmFtZSA9IHRoaXMucGFyc2VOYW1lKCk7XG4gICAgdGhpcy5leHBlY3RUb2tlbihUb2tlbktpbmQuQ09MT04pO1xuICAgIHZhciB0eXBlID0gdGhpcy5wYXJzZVR5cGVSZWZlcmVuY2UoKTtcbiAgICB2YXIgZGVmYXVsdFZhbHVlO1xuXG4gICAgaWYgKHRoaXMuZXhwZWN0T3B0aW9uYWxUb2tlbihUb2tlbktpbmQuRVFVQUxTKSkge1xuICAgICAgZGVmYXVsdFZhbHVlID0gdGhpcy5wYXJzZVZhbHVlTGl0ZXJhbCh0cnVlKTtcbiAgICB9XG5cbiAgICB2YXIgZGlyZWN0aXZlcyA9IHRoaXMucGFyc2VEaXJlY3RpdmVzKHRydWUpO1xuICAgIHJldHVybiB7XG4gICAgICBraW5kOiBLaW5kLklOUFVUX1ZBTFVFX0RFRklOSVRJT04sXG4gICAgICBkZXNjcmlwdGlvbjogZGVzY3JpcHRpb24sXG4gICAgICBuYW1lOiBuYW1lLFxuICAgICAgdHlwZTogdHlwZSxcbiAgICAgIGRlZmF1bHRWYWx1ZTogZGVmYXVsdFZhbHVlLFxuICAgICAgZGlyZWN0aXZlczogZGlyZWN0aXZlcyxcbiAgICAgIGxvYzogdGhpcy5sb2Moc3RhcnQpXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogSW50ZXJmYWNlVHlwZURlZmluaXRpb24gOlxuICAgKiAgIC0gRGVzY3JpcHRpb24/IGludGVyZmFjZSBOYW1lIERpcmVjdGl2ZXNbQ29uc3RdPyBGaWVsZHNEZWZpbml0aW9uP1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wYXJzZUludGVyZmFjZVR5cGVEZWZpbml0aW9uID0gZnVuY3Rpb24gcGFyc2VJbnRlcmZhY2VUeXBlRGVmaW5pdGlvbigpIHtcbiAgICB2YXIgc3RhcnQgPSB0aGlzLl9sZXhlci50b2tlbjtcbiAgICB2YXIgZGVzY3JpcHRpb24gPSB0aGlzLnBhcnNlRGVzY3JpcHRpb24oKTtcbiAgICB0aGlzLmV4cGVjdEtleXdvcmQoJ2ludGVyZmFjZScpO1xuICAgIHZhciBuYW1lID0gdGhpcy5wYXJzZU5hbWUoKTtcbiAgICB2YXIgaW50ZXJmYWNlcyA9IHRoaXMucGFyc2VJbXBsZW1lbnRzSW50ZXJmYWNlcygpO1xuICAgIHZhciBkaXJlY3RpdmVzID0gdGhpcy5wYXJzZURpcmVjdGl2ZXModHJ1ZSk7XG4gICAgdmFyIGZpZWxkcyA9IHRoaXMucGFyc2VGaWVsZHNEZWZpbml0aW9uKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGtpbmQ6IEtpbmQuSU5URVJGQUNFX1RZUEVfREVGSU5JVElPTixcbiAgICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbixcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICBpbnRlcmZhY2VzOiBpbnRlcmZhY2VzLFxuICAgICAgZGlyZWN0aXZlczogZGlyZWN0aXZlcyxcbiAgICAgIGZpZWxkczogZmllbGRzLFxuICAgICAgbG9jOiB0aGlzLmxvYyhzdGFydClcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBVbmlvblR5cGVEZWZpbml0aW9uIDpcbiAgICogICAtIERlc2NyaXB0aW9uPyB1bmlvbiBOYW1lIERpcmVjdGl2ZXNbQ29uc3RdPyBVbmlvbk1lbWJlclR5cGVzP1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wYXJzZVVuaW9uVHlwZURlZmluaXRpb24gPSBmdW5jdGlvbiBwYXJzZVVuaW9uVHlwZURlZmluaXRpb24oKSB7XG4gICAgdmFyIHN0YXJ0ID0gdGhpcy5fbGV4ZXIudG9rZW47XG4gICAgdmFyIGRlc2NyaXB0aW9uID0gdGhpcy5wYXJzZURlc2NyaXB0aW9uKCk7XG4gICAgdGhpcy5leHBlY3RLZXl3b3JkKCd1bmlvbicpO1xuICAgIHZhciBuYW1lID0gdGhpcy5wYXJzZU5hbWUoKTtcbiAgICB2YXIgZGlyZWN0aXZlcyA9IHRoaXMucGFyc2VEaXJlY3RpdmVzKHRydWUpO1xuICAgIHZhciB0eXBlcyA9IHRoaXMucGFyc2VVbmlvbk1lbWJlclR5cGVzKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGtpbmQ6IEtpbmQuVU5JT05fVFlQRV9ERUZJTklUSU9OLFxuICAgICAgZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uLFxuICAgICAgbmFtZTogbmFtZSxcbiAgICAgIGRpcmVjdGl2ZXM6IGRpcmVjdGl2ZXMsXG4gICAgICB0eXBlczogdHlwZXMsXG4gICAgICBsb2M6IHRoaXMubG9jKHN0YXJ0KVxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIFVuaW9uTWVtYmVyVHlwZXMgOlxuICAgKiAgIC0gPSBgfGA/IE5hbWVkVHlwZVxuICAgKiAgIC0gVW5pb25NZW1iZXJUeXBlcyB8IE5hbWVkVHlwZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wYXJzZVVuaW9uTWVtYmVyVHlwZXMgPSBmdW5jdGlvbiBwYXJzZVVuaW9uTWVtYmVyVHlwZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuZXhwZWN0T3B0aW9uYWxUb2tlbihUb2tlbktpbmQuRVFVQUxTKSA/IHRoaXMuZGVsaW1pdGVkTWFueShUb2tlbktpbmQuUElQRSwgdGhpcy5wYXJzZU5hbWVkVHlwZSkgOiBbXTtcbiAgfVxuICAvKipcbiAgICogRW51bVR5cGVEZWZpbml0aW9uIDpcbiAgICogICAtIERlc2NyaXB0aW9uPyBlbnVtIE5hbWUgRGlyZWN0aXZlc1tDb25zdF0/IEVudW1WYWx1ZXNEZWZpbml0aW9uP1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wYXJzZUVudW1UeXBlRGVmaW5pdGlvbiA9IGZ1bmN0aW9uIHBhcnNlRW51bVR5cGVEZWZpbml0aW9uKCkge1xuICAgIHZhciBzdGFydCA9IHRoaXMuX2xleGVyLnRva2VuO1xuICAgIHZhciBkZXNjcmlwdGlvbiA9IHRoaXMucGFyc2VEZXNjcmlwdGlvbigpO1xuICAgIHRoaXMuZXhwZWN0S2V5d29yZCgnZW51bScpO1xuICAgIHZhciBuYW1lID0gdGhpcy5wYXJzZU5hbWUoKTtcbiAgICB2YXIgZGlyZWN0aXZlcyA9IHRoaXMucGFyc2VEaXJlY3RpdmVzKHRydWUpO1xuICAgIHZhciB2YWx1ZXMgPSB0aGlzLnBhcnNlRW51bVZhbHVlc0RlZmluaXRpb24oKTtcbiAgICByZXR1cm4ge1xuICAgICAga2luZDogS2luZC5FTlVNX1RZUEVfREVGSU5JVElPTixcbiAgICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbixcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICBkaXJlY3RpdmVzOiBkaXJlY3RpdmVzLFxuICAgICAgdmFsdWVzOiB2YWx1ZXMsXG4gICAgICBsb2M6IHRoaXMubG9jKHN0YXJ0KVxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIEVudW1WYWx1ZXNEZWZpbml0aW9uIDogeyBFbnVtVmFsdWVEZWZpbml0aW9uKyB9XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBhcnNlRW51bVZhbHVlc0RlZmluaXRpb24gPSBmdW5jdGlvbiBwYXJzZUVudW1WYWx1ZXNEZWZpbml0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbmFsTWFueShUb2tlbktpbmQuQlJBQ0VfTCwgdGhpcy5wYXJzZUVudW1WYWx1ZURlZmluaXRpb24sIFRva2VuS2luZC5CUkFDRV9SKTtcbiAgfVxuICAvKipcbiAgICogRW51bVZhbHVlRGVmaW5pdGlvbiA6IERlc2NyaXB0aW9uPyBFbnVtVmFsdWUgRGlyZWN0aXZlc1tDb25zdF0/XG4gICAqXG4gICAqIEVudW1WYWx1ZSA6IE5hbWVcbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFyc2VFbnVtVmFsdWVEZWZpbml0aW9uID0gZnVuY3Rpb24gcGFyc2VFbnVtVmFsdWVEZWZpbml0aW9uKCkge1xuICAgIHZhciBzdGFydCA9IHRoaXMuX2xleGVyLnRva2VuO1xuICAgIHZhciBkZXNjcmlwdGlvbiA9IHRoaXMucGFyc2VEZXNjcmlwdGlvbigpO1xuICAgIHZhciBuYW1lID0gdGhpcy5wYXJzZU5hbWUoKTtcbiAgICB2YXIgZGlyZWN0aXZlcyA9IHRoaXMucGFyc2VEaXJlY3RpdmVzKHRydWUpO1xuICAgIHJldHVybiB7XG4gICAgICBraW5kOiBLaW5kLkVOVU1fVkFMVUVfREVGSU5JVElPTixcbiAgICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbixcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICBkaXJlY3RpdmVzOiBkaXJlY3RpdmVzLFxuICAgICAgbG9jOiB0aGlzLmxvYyhzdGFydClcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBJbnB1dE9iamVjdFR5cGVEZWZpbml0aW9uIDpcbiAgICogICAtIERlc2NyaXB0aW9uPyBpbnB1dCBOYW1lIERpcmVjdGl2ZXNbQ29uc3RdPyBJbnB1dEZpZWxkc0RlZmluaXRpb24/XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBhcnNlSW5wdXRPYmplY3RUeXBlRGVmaW5pdGlvbiA9IGZ1bmN0aW9uIHBhcnNlSW5wdXRPYmplY3RUeXBlRGVmaW5pdGlvbigpIHtcbiAgICB2YXIgc3RhcnQgPSB0aGlzLl9sZXhlci50b2tlbjtcbiAgICB2YXIgZGVzY3JpcHRpb24gPSB0aGlzLnBhcnNlRGVzY3JpcHRpb24oKTtcbiAgICB0aGlzLmV4cGVjdEtleXdvcmQoJ2lucHV0Jyk7XG4gICAgdmFyIG5hbWUgPSB0aGlzLnBhcnNlTmFtZSgpO1xuICAgIHZhciBkaXJlY3RpdmVzID0gdGhpcy5wYXJzZURpcmVjdGl2ZXModHJ1ZSk7XG4gICAgdmFyIGZpZWxkcyA9IHRoaXMucGFyc2VJbnB1dEZpZWxkc0RlZmluaXRpb24oKTtcbiAgICByZXR1cm4ge1xuICAgICAga2luZDogS2luZC5JTlBVVF9PQkpFQ1RfVFlQRV9ERUZJTklUSU9OLFxuICAgICAgZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uLFxuICAgICAgbmFtZTogbmFtZSxcbiAgICAgIGRpcmVjdGl2ZXM6IGRpcmVjdGl2ZXMsXG4gICAgICBmaWVsZHM6IGZpZWxkcyxcbiAgICAgIGxvYzogdGhpcy5sb2Moc3RhcnQpXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogSW5wdXRGaWVsZHNEZWZpbml0aW9uIDogeyBJbnB1dFZhbHVlRGVmaW5pdGlvbisgfVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wYXJzZUlucHV0RmllbGRzRGVmaW5pdGlvbiA9IGZ1bmN0aW9uIHBhcnNlSW5wdXRGaWVsZHNEZWZpbml0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbmFsTWFueShUb2tlbktpbmQuQlJBQ0VfTCwgdGhpcy5wYXJzZUlucHV0VmFsdWVEZWYsIFRva2VuS2luZC5CUkFDRV9SKTtcbiAgfVxuICAvKipcbiAgICogVHlwZVN5c3RlbUV4dGVuc2lvbiA6XG4gICAqICAgLSBTY2hlbWFFeHRlbnNpb25cbiAgICogICAtIFR5cGVFeHRlbnNpb25cbiAgICpcbiAgICogVHlwZUV4dGVuc2lvbiA6XG4gICAqICAgLSBTY2FsYXJUeXBlRXh0ZW5zaW9uXG4gICAqICAgLSBPYmplY3RUeXBlRXh0ZW5zaW9uXG4gICAqICAgLSBJbnRlcmZhY2VUeXBlRXh0ZW5zaW9uXG4gICAqICAgLSBVbmlvblR5cGVFeHRlbnNpb25cbiAgICogICAtIEVudW1UeXBlRXh0ZW5zaW9uXG4gICAqICAgLSBJbnB1dE9iamVjdFR5cGVEZWZpbml0aW9uXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBhcnNlVHlwZVN5c3RlbUV4dGVuc2lvbiA9IGZ1bmN0aW9uIHBhcnNlVHlwZVN5c3RlbUV4dGVuc2lvbigpIHtcbiAgICB2YXIga2V5d29yZFRva2VuID0gdGhpcy5fbGV4ZXIubG9va2FoZWFkKCk7XG5cbiAgICBpZiAoa2V5d29yZFRva2VuLmtpbmQgPT09IFRva2VuS2luZC5OQU1FKSB7XG4gICAgICBzd2l0Y2ggKGtleXdvcmRUb2tlbi52YWx1ZSkge1xuICAgICAgICBjYXNlICdzY2hlbWEnOlxuICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlU2NoZW1hRXh0ZW5zaW9uKCk7XG5cbiAgICAgICAgY2FzZSAnc2NhbGFyJzpcbiAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZVNjYWxhclR5cGVFeHRlbnNpb24oKTtcblxuICAgICAgICBjYXNlICd0eXBlJzpcbiAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZU9iamVjdFR5cGVFeHRlbnNpb24oKTtcblxuICAgICAgICBjYXNlICdpbnRlcmZhY2UnOlxuICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlSW50ZXJmYWNlVHlwZUV4dGVuc2lvbigpO1xuXG4gICAgICAgIGNhc2UgJ3VuaW9uJzpcbiAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZVVuaW9uVHlwZUV4dGVuc2lvbigpO1xuXG4gICAgICAgIGNhc2UgJ2VudW0nOlxuICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlRW51bVR5cGVFeHRlbnNpb24oKTtcblxuICAgICAgICBjYXNlICdpbnB1dCc6XG4gICAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VJbnB1dE9iamVjdFR5cGVFeHRlbnNpb24oKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aHJvdyB0aGlzLnVuZXhwZWN0ZWQoa2V5d29yZFRva2VuKTtcbiAgfVxuICAvKipcbiAgICogU2NoZW1hRXh0ZW5zaW9uIDpcbiAgICogIC0gZXh0ZW5kIHNjaGVtYSBEaXJlY3RpdmVzW0NvbnN0XT8geyBPcGVyYXRpb25UeXBlRGVmaW5pdGlvbisgfVxuICAgKiAgLSBleHRlbmQgc2NoZW1hIERpcmVjdGl2ZXNbQ29uc3RdXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBhcnNlU2NoZW1hRXh0ZW5zaW9uID0gZnVuY3Rpb24gcGFyc2VTY2hlbWFFeHRlbnNpb24oKSB7XG4gICAgdmFyIHN0YXJ0ID0gdGhpcy5fbGV4ZXIudG9rZW47XG4gICAgdGhpcy5leHBlY3RLZXl3b3JkKCdleHRlbmQnKTtcbiAgICB0aGlzLmV4cGVjdEtleXdvcmQoJ3NjaGVtYScpO1xuICAgIHZhciBkaXJlY3RpdmVzID0gdGhpcy5wYXJzZURpcmVjdGl2ZXModHJ1ZSk7XG4gICAgdmFyIG9wZXJhdGlvblR5cGVzID0gdGhpcy5vcHRpb25hbE1hbnkoVG9rZW5LaW5kLkJSQUNFX0wsIHRoaXMucGFyc2VPcGVyYXRpb25UeXBlRGVmaW5pdGlvbiwgVG9rZW5LaW5kLkJSQUNFX1IpO1xuXG4gICAgaWYgKGRpcmVjdGl2ZXMubGVuZ3RoID09PSAwICYmIG9wZXJhdGlvblR5cGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhyb3cgdGhpcy51bmV4cGVjdGVkKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGtpbmQ6IEtpbmQuU0NIRU1BX0VYVEVOU0lPTixcbiAgICAgIGRpcmVjdGl2ZXM6IGRpcmVjdGl2ZXMsXG4gICAgICBvcGVyYXRpb25UeXBlczogb3BlcmF0aW9uVHlwZXMsXG4gICAgICBsb2M6IHRoaXMubG9jKHN0YXJ0KVxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIFNjYWxhclR5cGVFeHRlbnNpb24gOlxuICAgKiAgIC0gZXh0ZW5kIHNjYWxhciBOYW1lIERpcmVjdGl2ZXNbQ29uc3RdXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBhcnNlU2NhbGFyVHlwZUV4dGVuc2lvbiA9IGZ1bmN0aW9uIHBhcnNlU2NhbGFyVHlwZUV4dGVuc2lvbigpIHtcbiAgICB2YXIgc3RhcnQgPSB0aGlzLl9sZXhlci50b2tlbjtcbiAgICB0aGlzLmV4cGVjdEtleXdvcmQoJ2V4dGVuZCcpO1xuICAgIHRoaXMuZXhwZWN0S2V5d29yZCgnc2NhbGFyJyk7XG4gICAgdmFyIG5hbWUgPSB0aGlzLnBhcnNlTmFtZSgpO1xuICAgIHZhciBkaXJlY3RpdmVzID0gdGhpcy5wYXJzZURpcmVjdGl2ZXModHJ1ZSk7XG5cbiAgICBpZiAoZGlyZWN0aXZlcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRocm93IHRoaXMudW5leHBlY3RlZCgpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBraW5kOiBLaW5kLlNDQUxBUl9UWVBFX0VYVEVOU0lPTixcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICBkaXJlY3RpdmVzOiBkaXJlY3RpdmVzLFxuICAgICAgbG9jOiB0aGlzLmxvYyhzdGFydClcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBPYmplY3RUeXBlRXh0ZW5zaW9uIDpcbiAgICogIC0gZXh0ZW5kIHR5cGUgTmFtZSBJbXBsZW1lbnRzSW50ZXJmYWNlcz8gRGlyZWN0aXZlc1tDb25zdF0/IEZpZWxkc0RlZmluaXRpb25cbiAgICogIC0gZXh0ZW5kIHR5cGUgTmFtZSBJbXBsZW1lbnRzSW50ZXJmYWNlcz8gRGlyZWN0aXZlc1tDb25zdF1cbiAgICogIC0gZXh0ZW5kIHR5cGUgTmFtZSBJbXBsZW1lbnRzSW50ZXJmYWNlc1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wYXJzZU9iamVjdFR5cGVFeHRlbnNpb24gPSBmdW5jdGlvbiBwYXJzZU9iamVjdFR5cGVFeHRlbnNpb24oKSB7XG4gICAgdmFyIHN0YXJ0ID0gdGhpcy5fbGV4ZXIudG9rZW47XG4gICAgdGhpcy5leHBlY3RLZXl3b3JkKCdleHRlbmQnKTtcbiAgICB0aGlzLmV4cGVjdEtleXdvcmQoJ3R5cGUnKTtcbiAgICB2YXIgbmFtZSA9IHRoaXMucGFyc2VOYW1lKCk7XG4gICAgdmFyIGludGVyZmFjZXMgPSB0aGlzLnBhcnNlSW1wbGVtZW50c0ludGVyZmFjZXMoKTtcbiAgICB2YXIgZGlyZWN0aXZlcyA9IHRoaXMucGFyc2VEaXJlY3RpdmVzKHRydWUpO1xuICAgIHZhciBmaWVsZHMgPSB0aGlzLnBhcnNlRmllbGRzRGVmaW5pdGlvbigpO1xuXG4gICAgaWYgKGludGVyZmFjZXMubGVuZ3RoID09PSAwICYmIGRpcmVjdGl2ZXMubGVuZ3RoID09PSAwICYmIGZpZWxkcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRocm93IHRoaXMudW5leHBlY3RlZCgpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBraW5kOiBLaW5kLk9CSkVDVF9UWVBFX0VYVEVOU0lPTixcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICBpbnRlcmZhY2VzOiBpbnRlcmZhY2VzLFxuICAgICAgZGlyZWN0aXZlczogZGlyZWN0aXZlcyxcbiAgICAgIGZpZWxkczogZmllbGRzLFxuICAgICAgbG9jOiB0aGlzLmxvYyhzdGFydClcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBJbnRlcmZhY2VUeXBlRXh0ZW5zaW9uIDpcbiAgICogIC0gZXh0ZW5kIGludGVyZmFjZSBOYW1lIEltcGxlbWVudHNJbnRlcmZhY2VzPyBEaXJlY3RpdmVzW0NvbnN0XT8gRmllbGRzRGVmaW5pdGlvblxuICAgKiAgLSBleHRlbmQgaW50ZXJmYWNlIE5hbWUgSW1wbGVtZW50c0ludGVyZmFjZXM/IERpcmVjdGl2ZXNbQ29uc3RdXG4gICAqICAtIGV4dGVuZCBpbnRlcmZhY2UgTmFtZSBJbXBsZW1lbnRzSW50ZXJmYWNlc1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wYXJzZUludGVyZmFjZVR5cGVFeHRlbnNpb24gPSBmdW5jdGlvbiBwYXJzZUludGVyZmFjZVR5cGVFeHRlbnNpb24oKSB7XG4gICAgdmFyIHN0YXJ0ID0gdGhpcy5fbGV4ZXIudG9rZW47XG4gICAgdGhpcy5leHBlY3RLZXl3b3JkKCdleHRlbmQnKTtcbiAgICB0aGlzLmV4cGVjdEtleXdvcmQoJ2ludGVyZmFjZScpO1xuICAgIHZhciBuYW1lID0gdGhpcy5wYXJzZU5hbWUoKTtcbiAgICB2YXIgaW50ZXJmYWNlcyA9IHRoaXMucGFyc2VJbXBsZW1lbnRzSW50ZXJmYWNlcygpO1xuICAgIHZhciBkaXJlY3RpdmVzID0gdGhpcy5wYXJzZURpcmVjdGl2ZXModHJ1ZSk7XG4gICAgdmFyIGZpZWxkcyA9IHRoaXMucGFyc2VGaWVsZHNEZWZpbml0aW9uKCk7XG5cbiAgICBpZiAoaW50ZXJmYWNlcy5sZW5ndGggPT09IDAgJiYgZGlyZWN0aXZlcy5sZW5ndGggPT09IDAgJiYgZmllbGRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhyb3cgdGhpcy51bmV4cGVjdGVkKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGtpbmQ6IEtpbmQuSU5URVJGQUNFX1RZUEVfRVhURU5TSU9OLFxuICAgICAgbmFtZTogbmFtZSxcbiAgICAgIGludGVyZmFjZXM6IGludGVyZmFjZXMsXG4gICAgICBkaXJlY3RpdmVzOiBkaXJlY3RpdmVzLFxuICAgICAgZmllbGRzOiBmaWVsZHMsXG4gICAgICBsb2M6IHRoaXMubG9jKHN0YXJ0KVxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIFVuaW9uVHlwZUV4dGVuc2lvbiA6XG4gICAqICAgLSBleHRlbmQgdW5pb24gTmFtZSBEaXJlY3RpdmVzW0NvbnN0XT8gVW5pb25NZW1iZXJUeXBlc1xuICAgKiAgIC0gZXh0ZW5kIHVuaW9uIE5hbWUgRGlyZWN0aXZlc1tDb25zdF1cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFyc2VVbmlvblR5cGVFeHRlbnNpb24gPSBmdW5jdGlvbiBwYXJzZVVuaW9uVHlwZUV4dGVuc2lvbigpIHtcbiAgICB2YXIgc3RhcnQgPSB0aGlzLl9sZXhlci50b2tlbjtcbiAgICB0aGlzLmV4cGVjdEtleXdvcmQoJ2V4dGVuZCcpO1xuICAgIHRoaXMuZXhwZWN0S2V5d29yZCgndW5pb24nKTtcbiAgICB2YXIgbmFtZSA9IHRoaXMucGFyc2VOYW1lKCk7XG4gICAgdmFyIGRpcmVjdGl2ZXMgPSB0aGlzLnBhcnNlRGlyZWN0aXZlcyh0cnVlKTtcbiAgICB2YXIgdHlwZXMgPSB0aGlzLnBhcnNlVW5pb25NZW1iZXJUeXBlcygpO1xuXG4gICAgaWYgKGRpcmVjdGl2ZXMubGVuZ3RoID09PSAwICYmIHR5cGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhyb3cgdGhpcy51bmV4cGVjdGVkKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGtpbmQ6IEtpbmQuVU5JT05fVFlQRV9FWFRFTlNJT04sXG4gICAgICBuYW1lOiBuYW1lLFxuICAgICAgZGlyZWN0aXZlczogZGlyZWN0aXZlcyxcbiAgICAgIHR5cGVzOiB0eXBlcyxcbiAgICAgIGxvYzogdGhpcy5sb2Moc3RhcnQpXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogRW51bVR5cGVFeHRlbnNpb24gOlxuICAgKiAgIC0gZXh0ZW5kIGVudW0gTmFtZSBEaXJlY3RpdmVzW0NvbnN0XT8gRW51bVZhbHVlc0RlZmluaXRpb25cbiAgICogICAtIGV4dGVuZCBlbnVtIE5hbWUgRGlyZWN0aXZlc1tDb25zdF1cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFyc2VFbnVtVHlwZUV4dGVuc2lvbiA9IGZ1bmN0aW9uIHBhcnNlRW51bVR5cGVFeHRlbnNpb24oKSB7XG4gICAgdmFyIHN0YXJ0ID0gdGhpcy5fbGV4ZXIudG9rZW47XG4gICAgdGhpcy5leHBlY3RLZXl3b3JkKCdleHRlbmQnKTtcbiAgICB0aGlzLmV4cGVjdEtleXdvcmQoJ2VudW0nKTtcbiAgICB2YXIgbmFtZSA9IHRoaXMucGFyc2VOYW1lKCk7XG4gICAgdmFyIGRpcmVjdGl2ZXMgPSB0aGlzLnBhcnNlRGlyZWN0aXZlcyh0cnVlKTtcbiAgICB2YXIgdmFsdWVzID0gdGhpcy5wYXJzZUVudW1WYWx1ZXNEZWZpbml0aW9uKCk7XG5cbiAgICBpZiAoZGlyZWN0aXZlcy5sZW5ndGggPT09IDAgJiYgdmFsdWVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhyb3cgdGhpcy51bmV4cGVjdGVkKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGtpbmQ6IEtpbmQuRU5VTV9UWVBFX0VYVEVOU0lPTixcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICBkaXJlY3RpdmVzOiBkaXJlY3RpdmVzLFxuICAgICAgdmFsdWVzOiB2YWx1ZXMsXG4gICAgICBsb2M6IHRoaXMubG9jKHN0YXJ0KVxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIElucHV0T2JqZWN0VHlwZUV4dGVuc2lvbiA6XG4gICAqICAgLSBleHRlbmQgaW5wdXQgTmFtZSBEaXJlY3RpdmVzW0NvbnN0XT8gSW5wdXRGaWVsZHNEZWZpbml0aW9uXG4gICAqICAgLSBleHRlbmQgaW5wdXQgTmFtZSBEaXJlY3RpdmVzW0NvbnN0XVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wYXJzZUlucHV0T2JqZWN0VHlwZUV4dGVuc2lvbiA9IGZ1bmN0aW9uIHBhcnNlSW5wdXRPYmplY3RUeXBlRXh0ZW5zaW9uKCkge1xuICAgIHZhciBzdGFydCA9IHRoaXMuX2xleGVyLnRva2VuO1xuICAgIHRoaXMuZXhwZWN0S2V5d29yZCgnZXh0ZW5kJyk7XG4gICAgdGhpcy5leHBlY3RLZXl3b3JkKCdpbnB1dCcpO1xuICAgIHZhciBuYW1lID0gdGhpcy5wYXJzZU5hbWUoKTtcbiAgICB2YXIgZGlyZWN0aXZlcyA9IHRoaXMucGFyc2VEaXJlY3RpdmVzKHRydWUpO1xuICAgIHZhciBmaWVsZHMgPSB0aGlzLnBhcnNlSW5wdXRGaWVsZHNEZWZpbml0aW9uKCk7XG5cbiAgICBpZiAoZGlyZWN0aXZlcy5sZW5ndGggPT09IDAgJiYgZmllbGRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhyb3cgdGhpcy51bmV4cGVjdGVkKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGtpbmQ6IEtpbmQuSU5QVVRfT0JKRUNUX1RZUEVfRVhURU5TSU9OLFxuICAgICAgbmFtZTogbmFtZSxcbiAgICAgIGRpcmVjdGl2ZXM6IGRpcmVjdGl2ZXMsXG4gICAgICBmaWVsZHM6IGZpZWxkcyxcbiAgICAgIGxvYzogdGhpcy5sb2Moc3RhcnQpXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogRGlyZWN0aXZlRGVmaW5pdGlvbiA6XG4gICAqICAgLSBEZXNjcmlwdGlvbj8gZGlyZWN0aXZlIEAgTmFtZSBBcmd1bWVudHNEZWZpbml0aW9uPyBgcmVwZWF0YWJsZWA/IG9uIERpcmVjdGl2ZUxvY2F0aW9uc1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wYXJzZURpcmVjdGl2ZURlZmluaXRpb24gPSBmdW5jdGlvbiBwYXJzZURpcmVjdGl2ZURlZmluaXRpb24oKSB7XG4gICAgdmFyIHN0YXJ0ID0gdGhpcy5fbGV4ZXIudG9rZW47XG4gICAgdmFyIGRlc2NyaXB0aW9uID0gdGhpcy5wYXJzZURlc2NyaXB0aW9uKCk7XG4gICAgdGhpcy5leHBlY3RLZXl3b3JkKCdkaXJlY3RpdmUnKTtcbiAgICB0aGlzLmV4cGVjdFRva2VuKFRva2VuS2luZC5BVCk7XG4gICAgdmFyIG5hbWUgPSB0aGlzLnBhcnNlTmFtZSgpO1xuICAgIHZhciBhcmdzID0gdGhpcy5wYXJzZUFyZ3VtZW50RGVmcygpO1xuICAgIHZhciByZXBlYXRhYmxlID0gdGhpcy5leHBlY3RPcHRpb25hbEtleXdvcmQoJ3JlcGVhdGFibGUnKTtcbiAgICB0aGlzLmV4cGVjdEtleXdvcmQoJ29uJyk7XG4gICAgdmFyIGxvY2F0aW9ucyA9IHRoaXMucGFyc2VEaXJlY3RpdmVMb2NhdGlvbnMoKTtcbiAgICByZXR1cm4ge1xuICAgICAga2luZDogS2luZC5ESVJFQ1RJVkVfREVGSU5JVElPTixcbiAgICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbixcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICBhcmd1bWVudHM6IGFyZ3MsXG4gICAgICByZXBlYXRhYmxlOiByZXBlYXRhYmxlLFxuICAgICAgbG9jYXRpb25zOiBsb2NhdGlvbnMsXG4gICAgICBsb2M6IHRoaXMubG9jKHN0YXJ0KVxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIERpcmVjdGl2ZUxvY2F0aW9ucyA6XG4gICAqICAgLSBgfGA/IERpcmVjdGl2ZUxvY2F0aW9uXG4gICAqICAgLSBEaXJlY3RpdmVMb2NhdGlvbnMgfCBEaXJlY3RpdmVMb2NhdGlvblxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wYXJzZURpcmVjdGl2ZUxvY2F0aW9ucyA9IGZ1bmN0aW9uIHBhcnNlRGlyZWN0aXZlTG9jYXRpb25zKCkge1xuICAgIHJldHVybiB0aGlzLmRlbGltaXRlZE1hbnkoVG9rZW5LaW5kLlBJUEUsIHRoaXMucGFyc2VEaXJlY3RpdmVMb2NhdGlvbik7XG4gIH1cbiAgLypcbiAgICogRGlyZWN0aXZlTG9jYXRpb24gOlxuICAgKiAgIC0gRXhlY3V0YWJsZURpcmVjdGl2ZUxvY2F0aW9uXG4gICAqICAgLSBUeXBlU3lzdGVtRGlyZWN0aXZlTG9jYXRpb25cbiAgICpcbiAgICogRXhlY3V0YWJsZURpcmVjdGl2ZUxvY2F0aW9uIDogb25lIG9mXG4gICAqICAgYFFVRVJZYFxuICAgKiAgIGBNVVRBVElPTmBcbiAgICogICBgU1VCU0NSSVBUSU9OYFxuICAgKiAgIGBGSUVMRGBcbiAgICogICBgRlJBR01FTlRfREVGSU5JVElPTmBcbiAgICogICBgRlJBR01FTlRfU1BSRUFEYFxuICAgKiAgIGBJTkxJTkVfRlJBR01FTlRgXG4gICAqXG4gICAqIFR5cGVTeXN0ZW1EaXJlY3RpdmVMb2NhdGlvbiA6IG9uZSBvZlxuICAgKiAgIGBTQ0hFTUFgXG4gICAqICAgYFNDQUxBUmBcbiAgICogICBgT0JKRUNUYFxuICAgKiAgIGBGSUVMRF9ERUZJTklUSU9OYFxuICAgKiAgIGBBUkdVTUVOVF9ERUZJTklUSU9OYFxuICAgKiAgIGBJTlRFUkZBQ0VgXG4gICAqICAgYFVOSU9OYFxuICAgKiAgIGBFTlVNYFxuICAgKiAgIGBFTlVNX1ZBTFVFYFxuICAgKiAgIGBJTlBVVF9PQkpFQ1RgXG4gICAqICAgYElOUFVUX0ZJRUxEX0RFRklOSVRJT05gXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBhcnNlRGlyZWN0aXZlTG9jYXRpb24gPSBmdW5jdGlvbiBwYXJzZURpcmVjdGl2ZUxvY2F0aW9uKCkge1xuICAgIHZhciBzdGFydCA9IHRoaXMuX2xleGVyLnRva2VuO1xuICAgIHZhciBuYW1lID0gdGhpcy5wYXJzZU5hbWUoKTtcblxuICAgIGlmIChEaXJlY3RpdmVMb2NhdGlvbltuYW1lLnZhbHVlXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gbmFtZTtcbiAgICB9XG5cbiAgICB0aHJvdyB0aGlzLnVuZXhwZWN0ZWQoc3RhcnQpO1xuICB9IC8vIENvcmUgcGFyc2luZyB1dGlsaXR5IGZ1bmN0aW9uc1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbG9jYXRpb24gb2JqZWN0LCB1c2VkIHRvIGlkZW50aWZ5IHRoZSBwbGFjZSBpbiB0aGUgc291cmNlIHRoYXQgY3JlYXRlZCBhIGdpdmVuIHBhcnNlZCBvYmplY3QuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmxvYyA9IGZ1bmN0aW9uIGxvYyhzdGFydFRva2VuKSB7XG4gICAgdmFyIF90aGlzJF9vcHRpb25zNDtcblxuICAgIGlmICgoKF90aGlzJF9vcHRpb25zNCA9IHRoaXMuX29wdGlvbnMpID09PSBudWxsIHx8IF90aGlzJF9vcHRpb25zNCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3RoaXMkX29wdGlvbnM0Lm5vTG9jYXRpb24pICE9PSB0cnVlKSB7XG4gICAgICByZXR1cm4gbmV3IExvY2F0aW9uKHN0YXJ0VG9rZW4sIHRoaXMuX2xleGVyLmxhc3RUb2tlbiwgdGhpcy5fbGV4ZXIuc291cmNlKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIERldGVybWluZXMgaWYgdGhlIG5leHQgdG9rZW4gaXMgb2YgYSBnaXZlbiBraW5kXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBlZWsgPSBmdW5jdGlvbiBwZWVrKGtpbmQpIHtcbiAgICByZXR1cm4gdGhpcy5fbGV4ZXIudG9rZW4ua2luZCA9PT0ga2luZDtcbiAgfVxuICAvKipcbiAgICogSWYgdGhlIG5leHQgdG9rZW4gaXMgb2YgdGhlIGdpdmVuIGtpbmQsIHJldHVybiB0aGF0IHRva2VuIGFmdGVyIGFkdmFuY2luZyB0aGUgbGV4ZXIuXG4gICAqIE90aGVyd2lzZSwgZG8gbm90IGNoYW5nZSB0aGUgcGFyc2VyIHN0YXRlIGFuZCB0aHJvdyBhbiBlcnJvci5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZXhwZWN0VG9rZW4gPSBmdW5jdGlvbiBleHBlY3RUb2tlbihraW5kKSB7XG4gICAgdmFyIHRva2VuID0gdGhpcy5fbGV4ZXIudG9rZW47XG5cbiAgICBpZiAodG9rZW4ua2luZCA9PT0ga2luZCkge1xuICAgICAgdGhpcy5fbGV4ZXIuYWR2YW5jZSgpO1xuXG4gICAgICByZXR1cm4gdG9rZW47XG4gICAgfVxuXG4gICAgdGhyb3cgc3ludGF4RXJyb3IodGhpcy5fbGV4ZXIuc291cmNlLCB0b2tlbi5zdGFydCwgXCJFeHBlY3RlZCBcIi5jb25jYXQoZ2V0VG9rZW5LaW5kRGVzYyhraW5kKSwgXCIsIGZvdW5kIFwiKS5jb25jYXQoZ2V0VG9rZW5EZXNjKHRva2VuKSwgXCIuXCIpKTtcbiAgfVxuICAvKipcbiAgICogSWYgdGhlIG5leHQgdG9rZW4gaXMgb2YgdGhlIGdpdmVuIGtpbmQsIHJldHVybiB0aGF0IHRva2VuIGFmdGVyIGFkdmFuY2luZyB0aGUgbGV4ZXIuXG4gICAqIE90aGVyd2lzZSwgZG8gbm90IGNoYW5nZSB0aGUgcGFyc2VyIHN0YXRlIGFuZCByZXR1cm4gdW5kZWZpbmVkLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5leHBlY3RPcHRpb25hbFRva2VuID0gZnVuY3Rpb24gZXhwZWN0T3B0aW9uYWxUb2tlbihraW5kKSB7XG4gICAgdmFyIHRva2VuID0gdGhpcy5fbGV4ZXIudG9rZW47XG5cbiAgICBpZiAodG9rZW4ua2luZCA9PT0ga2luZCkge1xuICAgICAgdGhpcy5fbGV4ZXIuYWR2YW5jZSgpO1xuXG4gICAgICByZXR1cm4gdG9rZW47XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuICAvKipcbiAgICogSWYgdGhlIG5leHQgdG9rZW4gaXMgYSBnaXZlbiBrZXl3b3JkLCBhZHZhbmNlIHRoZSBsZXhlci5cbiAgICogT3RoZXJ3aXNlLCBkbyBub3QgY2hhbmdlIHRoZSBwYXJzZXIgc3RhdGUgYW5kIHRocm93IGFuIGVycm9yLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5leHBlY3RLZXl3b3JkID0gZnVuY3Rpb24gZXhwZWN0S2V5d29yZCh2YWx1ZSkge1xuICAgIHZhciB0b2tlbiA9IHRoaXMuX2xleGVyLnRva2VuO1xuXG4gICAgaWYgKHRva2VuLmtpbmQgPT09IFRva2VuS2luZC5OQU1FICYmIHRva2VuLnZhbHVlID09PSB2YWx1ZSkge1xuICAgICAgdGhpcy5fbGV4ZXIuYWR2YW5jZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBzeW50YXhFcnJvcih0aGlzLl9sZXhlci5zb3VyY2UsIHRva2VuLnN0YXJ0LCBcIkV4cGVjdGVkIFxcXCJcIi5jb25jYXQodmFsdWUsIFwiXFxcIiwgZm91bmQgXCIpLmNvbmNhdChnZXRUb2tlbkRlc2ModG9rZW4pLCBcIi5cIikpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogSWYgdGhlIG5leHQgdG9rZW4gaXMgYSBnaXZlbiBrZXl3b3JkLCByZXR1cm4gXCJ0cnVlXCIgYWZ0ZXIgYWR2YW5jaW5nIHRoZSBsZXhlci5cbiAgICogT3RoZXJ3aXNlLCBkbyBub3QgY2hhbmdlIHRoZSBwYXJzZXIgc3RhdGUgYW5kIHJldHVybiBcImZhbHNlXCIuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmV4cGVjdE9wdGlvbmFsS2V5d29yZCA9IGZ1bmN0aW9uIGV4cGVjdE9wdGlvbmFsS2V5d29yZCh2YWx1ZSkge1xuICAgIHZhciB0b2tlbiA9IHRoaXMuX2xleGVyLnRva2VuO1xuXG4gICAgaWYgKHRva2VuLmtpbmQgPT09IFRva2VuS2luZC5OQU1FICYmIHRva2VuLnZhbHVlID09PSB2YWx1ZSkge1xuICAgICAgdGhpcy5fbGV4ZXIuYWR2YW5jZSgpO1xuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLyoqXG4gICAqIEhlbHBlciBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgYW4gZXJyb3Igd2hlbiBhbiB1bmV4cGVjdGVkIGxleGVkIHRva2VuIGlzIGVuY291bnRlcmVkLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by51bmV4cGVjdGVkID0gZnVuY3Rpb24gdW5leHBlY3RlZChhdFRva2VuKSB7XG4gICAgdmFyIHRva2VuID0gYXRUb2tlbiAhPT0gbnVsbCAmJiBhdFRva2VuICE9PSB2b2lkIDAgPyBhdFRva2VuIDogdGhpcy5fbGV4ZXIudG9rZW47XG4gICAgcmV0dXJuIHN5bnRheEVycm9yKHRoaXMuX2xleGVyLnNvdXJjZSwgdG9rZW4uc3RhcnQsIFwiVW5leHBlY3RlZCBcIi5jb25jYXQoZ2V0VG9rZW5EZXNjKHRva2VuKSwgXCIuXCIpKTtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhIHBvc3NpYmx5IGVtcHR5IGxpc3Qgb2YgcGFyc2Ugbm9kZXMsIGRldGVybWluZWQgYnkgdGhlIHBhcnNlRm4uXG4gICAqIFRoaXMgbGlzdCBiZWdpbnMgd2l0aCBhIGxleCB0b2tlbiBvZiBvcGVuS2luZCBhbmQgZW5kcyB3aXRoIGEgbGV4IHRva2VuIG9mIGNsb3NlS2luZC5cbiAgICogQWR2YW5jZXMgdGhlIHBhcnNlciB0byB0aGUgbmV4dCBsZXggdG9rZW4gYWZ0ZXIgdGhlIGNsb3NpbmcgdG9rZW4uXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmFueSA9IGZ1bmN0aW9uIGFueShvcGVuS2luZCwgcGFyc2VGbiwgY2xvc2VLaW5kKSB7XG4gICAgdGhpcy5leHBlY3RUb2tlbihvcGVuS2luZCk7XG4gICAgdmFyIG5vZGVzID0gW107XG5cbiAgICB3aGlsZSAoIXRoaXMuZXhwZWN0T3B0aW9uYWxUb2tlbihjbG9zZUtpbmQpKSB7XG4gICAgICBub2Rlcy5wdXNoKHBhcnNlRm4uY2FsbCh0aGlzKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5vZGVzO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbGlzdCBvZiBwYXJzZSBub2RlcywgZGV0ZXJtaW5lZCBieSB0aGUgcGFyc2VGbi5cbiAgICogSXQgY2FuIGJlIGVtcHR5IG9ubHkgaWYgb3BlbiB0b2tlbiBpcyBtaXNzaW5nIG90aGVyd2lzZSBpdCB3aWxsIGFsd2F5cyByZXR1cm4gbm9uLWVtcHR5IGxpc3RcbiAgICogdGhhdCBiZWdpbnMgd2l0aCBhIGxleCB0b2tlbiBvZiBvcGVuS2luZCBhbmQgZW5kcyB3aXRoIGEgbGV4IHRva2VuIG9mIGNsb3NlS2luZC5cbiAgICogQWR2YW5jZXMgdGhlIHBhcnNlciB0byB0aGUgbmV4dCBsZXggdG9rZW4gYWZ0ZXIgdGhlIGNsb3NpbmcgdG9rZW4uXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLm9wdGlvbmFsTWFueSA9IGZ1bmN0aW9uIG9wdGlvbmFsTWFueShvcGVuS2luZCwgcGFyc2VGbiwgY2xvc2VLaW5kKSB7XG4gICAgaWYgKHRoaXMuZXhwZWN0T3B0aW9uYWxUb2tlbihvcGVuS2luZCkpIHtcbiAgICAgIHZhciBub2RlcyA9IFtdO1xuXG4gICAgICBkbyB7XG4gICAgICAgIG5vZGVzLnB1c2gocGFyc2VGbi5jYWxsKHRoaXMpKTtcbiAgICAgIH0gd2hpbGUgKCF0aGlzLmV4cGVjdE9wdGlvbmFsVG9rZW4oY2xvc2VLaW5kKSk7XG5cbiAgICAgIHJldHVybiBub2RlcztcbiAgICB9XG5cbiAgICByZXR1cm4gW107XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYSBub24tZW1wdHkgbGlzdCBvZiBwYXJzZSBub2RlcywgZGV0ZXJtaW5lZCBieSB0aGUgcGFyc2VGbi5cbiAgICogVGhpcyBsaXN0IGJlZ2lucyB3aXRoIGEgbGV4IHRva2VuIG9mIG9wZW5LaW5kIGFuZCBlbmRzIHdpdGggYSBsZXggdG9rZW4gb2YgY2xvc2VLaW5kLlxuICAgKiBBZHZhbmNlcyB0aGUgcGFyc2VyIHRvIHRoZSBuZXh0IGxleCB0b2tlbiBhZnRlciB0aGUgY2xvc2luZyB0b2tlbi5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ubWFueSA9IGZ1bmN0aW9uIG1hbnkob3BlbktpbmQsIHBhcnNlRm4sIGNsb3NlS2luZCkge1xuICAgIHRoaXMuZXhwZWN0VG9rZW4ob3BlbktpbmQpO1xuICAgIHZhciBub2RlcyA9IFtdO1xuXG4gICAgZG8ge1xuICAgICAgbm9kZXMucHVzaChwYXJzZUZuLmNhbGwodGhpcykpO1xuICAgIH0gd2hpbGUgKCF0aGlzLmV4cGVjdE9wdGlvbmFsVG9rZW4oY2xvc2VLaW5kKSk7XG5cbiAgICByZXR1cm4gbm9kZXM7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYSBub24tZW1wdHkgbGlzdCBvZiBwYXJzZSBub2RlcywgZGV0ZXJtaW5lZCBieSB0aGUgcGFyc2VGbi5cbiAgICogVGhpcyBsaXN0IG1heSBiZWdpbiB3aXRoIGEgbGV4IHRva2VuIG9mIGRlbGltaXRlcktpbmQgZm9sbG93ZWQgYnkgaXRlbXMgc2VwYXJhdGVkIGJ5IGxleCB0b2tlbnMgb2YgdG9rZW5LaW5kLlxuICAgKiBBZHZhbmNlcyB0aGUgcGFyc2VyIHRvIHRoZSBuZXh0IGxleCB0b2tlbiBhZnRlciBsYXN0IGl0ZW0gaW4gdGhlIGxpc3QuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmRlbGltaXRlZE1hbnkgPSBmdW5jdGlvbiBkZWxpbWl0ZWRNYW55KGRlbGltaXRlcktpbmQsIHBhcnNlRm4pIHtcbiAgICB0aGlzLmV4cGVjdE9wdGlvbmFsVG9rZW4oZGVsaW1pdGVyS2luZCk7XG4gICAgdmFyIG5vZGVzID0gW107XG5cbiAgICBkbyB7XG4gICAgICBub2Rlcy5wdXNoKHBhcnNlRm4uY2FsbCh0aGlzKSk7XG4gICAgfSB3aGlsZSAodGhpcy5leHBlY3RPcHRpb25hbFRva2VuKGRlbGltaXRlcktpbmQpKTtcblxuICAgIHJldHVybiBub2RlcztcbiAgfTtcblxuICByZXR1cm4gUGFyc2VyO1xufSgpO1xuLyoqXG4gKiBBIGhlbHBlciBmdW5jdGlvbiB0byBkZXNjcmliZSBhIHRva2VuIGFzIGEgc3RyaW5nIGZvciBkZWJ1Z2dpbmcuXG4gKi9cblxuZnVuY3Rpb24gZ2V0VG9rZW5EZXNjKHRva2VuKSB7XG4gIHZhciB2YWx1ZSA9IHRva2VuLnZhbHVlO1xuICByZXR1cm4gZ2V0VG9rZW5LaW5kRGVzYyh0b2tlbi5raW5kKSArICh2YWx1ZSAhPSBudWxsID8gXCIgXFxcIlwiLmNvbmNhdCh2YWx1ZSwgXCJcXFwiXCIpIDogJycpO1xufVxuLyoqXG4gKiBBIGhlbHBlciBmdW5jdGlvbiB0byBkZXNjcmliZSBhIHRva2VuIGtpbmQgYXMgYSBzdHJpbmcgZm9yIGRlYnVnZ2luZy5cbiAqL1xuXG5cbmZ1bmN0aW9uIGdldFRva2VuS2luZERlc2Moa2luZCkge1xuICByZXR1cm4gaXNQdW5jdHVhdG9yVG9rZW5LaW5kKGtpbmQpID8gXCJcXFwiXCIuY29uY2F0KGtpbmQsIFwiXFxcIlwiKSA6IGtpbmQ7XG59XG4iLCJpbXBvcnQgeyBLaW5kIH0gZnJvbSBcIi4va2luZHMubWpzXCI7XG5leHBvcnQgZnVuY3Rpb24gaXNEZWZpbml0aW9uTm9kZShub2RlKSB7XG4gIHJldHVybiBpc0V4ZWN1dGFibGVEZWZpbml0aW9uTm9kZShub2RlKSB8fCBpc1R5cGVTeXN0ZW1EZWZpbml0aW9uTm9kZShub2RlKSB8fCBpc1R5cGVTeXN0ZW1FeHRlbnNpb25Ob2RlKG5vZGUpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzRXhlY3V0YWJsZURlZmluaXRpb25Ob2RlKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUua2luZCA9PT0gS2luZC5PUEVSQVRJT05fREVGSU5JVElPTiB8fCBub2RlLmtpbmQgPT09IEtpbmQuRlJBR01FTlRfREVGSU5JVElPTjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1NlbGVjdGlvbk5vZGUobm9kZSkge1xuICByZXR1cm4gbm9kZS5raW5kID09PSBLaW5kLkZJRUxEIHx8IG5vZGUua2luZCA9PT0gS2luZC5GUkFHTUVOVF9TUFJFQUQgfHwgbm9kZS5raW5kID09PSBLaW5kLklOTElORV9GUkFHTUVOVDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1ZhbHVlTm9kZShub2RlKSB7XG4gIHJldHVybiBub2RlLmtpbmQgPT09IEtpbmQuVkFSSUFCTEUgfHwgbm9kZS5raW5kID09PSBLaW5kLklOVCB8fCBub2RlLmtpbmQgPT09IEtpbmQuRkxPQVQgfHwgbm9kZS5raW5kID09PSBLaW5kLlNUUklORyB8fCBub2RlLmtpbmQgPT09IEtpbmQuQk9PTEVBTiB8fCBub2RlLmtpbmQgPT09IEtpbmQuTlVMTCB8fCBub2RlLmtpbmQgPT09IEtpbmQuRU5VTSB8fCBub2RlLmtpbmQgPT09IEtpbmQuTElTVCB8fCBub2RlLmtpbmQgPT09IEtpbmQuT0JKRUNUO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzVHlwZU5vZGUobm9kZSkge1xuICByZXR1cm4gbm9kZS5raW5kID09PSBLaW5kLk5BTUVEX1RZUEUgfHwgbm9kZS5raW5kID09PSBLaW5kLkxJU1RfVFlQRSB8fCBub2RlLmtpbmQgPT09IEtpbmQuTk9OX05VTExfVFlQRTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1R5cGVTeXN0ZW1EZWZpbml0aW9uTm9kZShub2RlKSB7XG4gIHJldHVybiBub2RlLmtpbmQgPT09IEtpbmQuU0NIRU1BX0RFRklOSVRJT04gfHwgaXNUeXBlRGVmaW5pdGlvbk5vZGUobm9kZSkgfHwgbm9kZS5raW5kID09PSBLaW5kLkRJUkVDVElWRV9ERUZJTklUSU9OO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzVHlwZURlZmluaXRpb25Ob2RlKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUua2luZCA9PT0gS2luZC5TQ0FMQVJfVFlQRV9ERUZJTklUSU9OIHx8IG5vZGUua2luZCA9PT0gS2luZC5PQkpFQ1RfVFlQRV9ERUZJTklUSU9OIHx8IG5vZGUua2luZCA9PT0gS2luZC5JTlRFUkZBQ0VfVFlQRV9ERUZJTklUSU9OIHx8IG5vZGUua2luZCA9PT0gS2luZC5VTklPTl9UWVBFX0RFRklOSVRJT04gfHwgbm9kZS5raW5kID09PSBLaW5kLkVOVU1fVFlQRV9ERUZJTklUSU9OIHx8IG5vZGUua2luZCA9PT0gS2luZC5JTlBVVF9PQkpFQ1RfVFlQRV9ERUZJTklUSU9OO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzVHlwZVN5c3RlbUV4dGVuc2lvbk5vZGUobm9kZSkge1xuICByZXR1cm4gbm9kZS5raW5kID09PSBLaW5kLlNDSEVNQV9FWFRFTlNJT04gfHwgaXNUeXBlRXh0ZW5zaW9uTm9kZShub2RlKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1R5cGVFeHRlbnNpb25Ob2RlKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUua2luZCA9PT0gS2luZC5TQ0FMQVJfVFlQRV9FWFRFTlNJT04gfHwgbm9kZS5raW5kID09PSBLaW5kLk9CSkVDVF9UWVBFX0VYVEVOU0lPTiB8fCBub2RlLmtpbmQgPT09IEtpbmQuSU5URVJGQUNFX1RZUEVfRVhURU5TSU9OIHx8IG5vZGUua2luZCA9PT0gS2luZC5VTklPTl9UWVBFX0VYVEVOU0lPTiB8fCBub2RlLmtpbmQgPT09IEtpbmQuRU5VTV9UWVBFX0VYVEVOU0lPTiB8fCBub2RlLmtpbmQgPT09IEtpbmQuSU5QVVRfT0JKRUNUX1RZUEVfRVhURU5TSU9OO1xufVxuIiwiaW1wb3J0IHsgZ2V0TG9jYXRpb24gfSBmcm9tIFwiLi9sb2NhdGlvbi5tanNcIjtcbi8qKlxuICogUmVuZGVyIGEgaGVscGZ1bCBkZXNjcmlwdGlvbiBvZiB0aGUgbG9jYXRpb24gaW4gdGhlIEdyYXBoUUwgU291cmNlIGRvY3VtZW50LlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBwcmludExvY2F0aW9uKGxvY2F0aW9uKSB7XG4gIHJldHVybiBwcmludFNvdXJjZUxvY2F0aW9uKGxvY2F0aW9uLnNvdXJjZSwgZ2V0TG9jYXRpb24obG9jYXRpb24uc291cmNlLCBsb2NhdGlvbi5zdGFydCkpO1xufVxuLyoqXG4gKiBSZW5kZXIgYSBoZWxwZnVsIGRlc2NyaXB0aW9uIG9mIHRoZSBsb2NhdGlvbiBpbiB0aGUgR3JhcGhRTCBTb3VyY2UgZG9jdW1lbnQuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHByaW50U291cmNlTG9jYXRpb24oc291cmNlLCBzb3VyY2VMb2NhdGlvbikge1xuICB2YXIgZmlyc3RMaW5lQ29sdW1uT2Zmc2V0ID0gc291cmNlLmxvY2F0aW9uT2Zmc2V0LmNvbHVtbiAtIDE7XG4gIHZhciBib2R5ID0gd2hpdGVzcGFjZShmaXJzdExpbmVDb2x1bW5PZmZzZXQpICsgc291cmNlLmJvZHk7XG4gIHZhciBsaW5lSW5kZXggPSBzb3VyY2VMb2NhdGlvbi5saW5lIC0gMTtcbiAgdmFyIGxpbmVPZmZzZXQgPSBzb3VyY2UubG9jYXRpb25PZmZzZXQubGluZSAtIDE7XG4gIHZhciBsaW5lTnVtID0gc291cmNlTG9jYXRpb24ubGluZSArIGxpbmVPZmZzZXQ7XG4gIHZhciBjb2x1bW5PZmZzZXQgPSBzb3VyY2VMb2NhdGlvbi5saW5lID09PSAxID8gZmlyc3RMaW5lQ29sdW1uT2Zmc2V0IDogMDtcbiAgdmFyIGNvbHVtbk51bSA9IHNvdXJjZUxvY2F0aW9uLmNvbHVtbiArIGNvbHVtbk9mZnNldDtcbiAgdmFyIGxvY2F0aW9uU3RyID0gXCJcIi5jb25jYXQoc291cmNlLm5hbWUsIFwiOlwiKS5jb25jYXQobGluZU51bSwgXCI6XCIpLmNvbmNhdChjb2x1bW5OdW0sIFwiXFxuXCIpO1xuICB2YXIgbGluZXMgPSBib2R5LnNwbGl0KC9cXHJcXG58W1xcblxccl0vZyk7XG4gIHZhciBsb2NhdGlvbkxpbmUgPSBsaW5lc1tsaW5lSW5kZXhdOyAvLyBTcGVjaWFsIGNhc2UgZm9yIG1pbmlmaWVkIGRvY3VtZW50c1xuXG4gIGlmIChsb2NhdGlvbkxpbmUubGVuZ3RoID4gMTIwKSB7XG4gICAgdmFyIHN1YkxpbmVJbmRleCA9IE1hdGguZmxvb3IoY29sdW1uTnVtIC8gODApO1xuICAgIHZhciBzdWJMaW5lQ29sdW1uTnVtID0gY29sdW1uTnVtICUgODA7XG4gICAgdmFyIHN1YkxpbmVzID0gW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxvY2F0aW9uTGluZS5sZW5ndGg7IGkgKz0gODApIHtcbiAgICAgIHN1YkxpbmVzLnB1c2gobG9jYXRpb25MaW5lLnNsaWNlKGksIGkgKyA4MCkpO1xuICAgIH1cblxuICAgIHJldHVybiBsb2NhdGlvblN0ciArIHByaW50UHJlZml4ZWRMaW5lcyhbW1wiXCIuY29uY2F0KGxpbmVOdW0pLCBzdWJMaW5lc1swXV1dLmNvbmNhdChzdWJMaW5lcy5zbGljZSgxLCBzdWJMaW5lSW5kZXggKyAxKS5tYXAoZnVuY3Rpb24gKHN1YkxpbmUpIHtcbiAgICAgIHJldHVybiBbJycsIHN1YkxpbmVdO1xuICAgIH0pLCBbWycgJywgd2hpdGVzcGFjZShzdWJMaW5lQ29sdW1uTnVtIC0gMSkgKyAnXiddLCBbJycsIHN1YkxpbmVzW3N1YkxpbmVJbmRleCArIDFdXV0pKTtcbiAgfVxuXG4gIHJldHVybiBsb2NhdGlvblN0ciArIHByaW50UHJlZml4ZWRMaW5lcyhbLy8gTGluZXMgc3BlY2lmaWVkIGxpa2UgdGhpczogW1wicHJlZml4XCIsIFwic3RyaW5nXCJdLFxuICBbXCJcIi5jb25jYXQobGluZU51bSAtIDEpLCBsaW5lc1tsaW5lSW5kZXggLSAxXV0sIFtcIlwiLmNvbmNhdChsaW5lTnVtKSwgbG9jYXRpb25MaW5lXSwgWycnLCB3aGl0ZXNwYWNlKGNvbHVtbk51bSAtIDEpICsgJ14nXSwgW1wiXCIuY29uY2F0KGxpbmVOdW0gKyAxKSwgbGluZXNbbGluZUluZGV4ICsgMV1dXSk7XG59XG5cbmZ1bmN0aW9uIHByaW50UHJlZml4ZWRMaW5lcyhsaW5lcykge1xuICB2YXIgZXhpc3RpbmdMaW5lcyA9IGxpbmVzLmZpbHRlcihmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBfID0gX3JlZlswXSxcbiAgICAgICAgbGluZSA9IF9yZWZbMV07XG4gICAgcmV0dXJuIGxpbmUgIT09IHVuZGVmaW5lZDtcbiAgfSk7XG4gIHZhciBwYWRMZW4gPSBNYXRoLm1heC5hcHBseShNYXRoLCBleGlzdGluZ0xpbmVzLm1hcChmdW5jdGlvbiAoX3JlZjIpIHtcbiAgICB2YXIgcHJlZml4ID0gX3JlZjJbMF07XG4gICAgcmV0dXJuIHByZWZpeC5sZW5ndGg7XG4gIH0pKTtcbiAgcmV0dXJuIGV4aXN0aW5nTGluZXMubWFwKGZ1bmN0aW9uIChfcmVmMykge1xuICAgIHZhciBwcmVmaXggPSBfcmVmM1swXSxcbiAgICAgICAgbGluZSA9IF9yZWYzWzFdO1xuICAgIHJldHVybiBsZWZ0UGFkKHBhZExlbiwgcHJlZml4KSArIChsaW5lID8gJyB8ICcgKyBsaW5lIDogJyB8Jyk7XG4gIH0pLmpvaW4oJ1xcbicpO1xufVxuXG5mdW5jdGlvbiB3aGl0ZXNwYWNlKGxlbikge1xuICByZXR1cm4gQXJyYXkobGVuICsgMSkuam9pbignICcpO1xufVxuXG5mdW5jdGlvbiBsZWZ0UGFkKGxlbiwgc3RyKSB7XG4gIHJldHVybiB3aGl0ZXNwYWNlKGxlbiAtIHN0ci5sZW5ndGgpICsgc3RyO1xufVxuIiwiaW1wb3J0IHsgdmlzaXQgfSBmcm9tIFwiLi92aXNpdG9yLm1qc1wiO1xuaW1wb3J0IHsgcHJpbnRCbG9ja1N0cmluZyB9IGZyb20gXCIuL2Jsb2NrU3RyaW5nLm1qc1wiO1xuLyoqXG4gKiBDb252ZXJ0cyBhbiBBU1QgaW50byBhIHN0cmluZywgdXNpbmcgb25lIHNldCBvZiByZWFzb25hYmxlXG4gKiBmb3JtYXR0aW5nIHJ1bGVzLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBwcmludChhc3QpIHtcbiAgcmV0dXJuIHZpc2l0KGFzdCwge1xuICAgIGxlYXZlOiBwcmludERvY0FTVFJlZHVjZXJcbiAgfSk7XG59XG52YXIgTUFYX0xJTkVfTEVOR1RIID0gODA7IC8vIFRPRE86IHByb3ZpZGUgYmV0dGVyIHR5cGUgY292ZXJhZ2UgaW4gZnV0dXJlXG5cbnZhciBwcmludERvY0FTVFJlZHVjZXIgPSB7XG4gIE5hbWU6IGZ1bmN0aW9uIE5hbWUobm9kZSkge1xuICAgIHJldHVybiBub2RlLnZhbHVlO1xuICB9LFxuICBWYXJpYWJsZTogZnVuY3Rpb24gVmFyaWFibGUobm9kZSkge1xuICAgIHJldHVybiAnJCcgKyBub2RlLm5hbWU7XG4gIH0sXG4gIC8vIERvY3VtZW50XG4gIERvY3VtZW50OiBmdW5jdGlvbiBEb2N1bWVudChub2RlKSB7XG4gICAgcmV0dXJuIGpvaW4obm9kZS5kZWZpbml0aW9ucywgJ1xcblxcbicpICsgJ1xcbic7XG4gIH0sXG4gIE9wZXJhdGlvbkRlZmluaXRpb246IGZ1bmN0aW9uIE9wZXJhdGlvbkRlZmluaXRpb24obm9kZSkge1xuICAgIHZhciBvcCA9IG5vZGUub3BlcmF0aW9uO1xuICAgIHZhciBuYW1lID0gbm9kZS5uYW1lO1xuICAgIHZhciB2YXJEZWZzID0gd3JhcCgnKCcsIGpvaW4obm9kZS52YXJpYWJsZURlZmluaXRpb25zLCAnLCAnKSwgJyknKTtcbiAgICB2YXIgZGlyZWN0aXZlcyA9IGpvaW4obm9kZS5kaXJlY3RpdmVzLCAnICcpO1xuICAgIHZhciBzZWxlY3Rpb25TZXQgPSBub2RlLnNlbGVjdGlvblNldDsgLy8gQW5vbnltb3VzIHF1ZXJpZXMgd2l0aCBubyBkaXJlY3RpdmVzIG9yIHZhcmlhYmxlIGRlZmluaXRpb25zIGNhbiB1c2VcbiAgICAvLyB0aGUgcXVlcnkgc2hvcnQgZm9ybS5cblxuICAgIHJldHVybiAhbmFtZSAmJiAhZGlyZWN0aXZlcyAmJiAhdmFyRGVmcyAmJiBvcCA9PT0gJ3F1ZXJ5JyA/IHNlbGVjdGlvblNldCA6IGpvaW4oW29wLCBqb2luKFtuYW1lLCB2YXJEZWZzXSksIGRpcmVjdGl2ZXMsIHNlbGVjdGlvblNldF0sICcgJyk7XG4gIH0sXG4gIFZhcmlhYmxlRGVmaW5pdGlvbjogZnVuY3Rpb24gVmFyaWFibGVEZWZpbml0aW9uKF9yZWYpIHtcbiAgICB2YXIgdmFyaWFibGUgPSBfcmVmLnZhcmlhYmxlLFxuICAgICAgICB0eXBlID0gX3JlZi50eXBlLFxuICAgICAgICBkZWZhdWx0VmFsdWUgPSBfcmVmLmRlZmF1bHRWYWx1ZSxcbiAgICAgICAgZGlyZWN0aXZlcyA9IF9yZWYuZGlyZWN0aXZlcztcbiAgICByZXR1cm4gdmFyaWFibGUgKyAnOiAnICsgdHlwZSArIHdyYXAoJyA9ICcsIGRlZmF1bHRWYWx1ZSkgKyB3cmFwKCcgJywgam9pbihkaXJlY3RpdmVzLCAnICcpKTtcbiAgfSxcbiAgU2VsZWN0aW9uU2V0OiBmdW5jdGlvbiBTZWxlY3Rpb25TZXQoX3JlZjIpIHtcbiAgICB2YXIgc2VsZWN0aW9ucyA9IF9yZWYyLnNlbGVjdGlvbnM7XG4gICAgcmV0dXJuIGJsb2NrKHNlbGVjdGlvbnMpO1xuICB9LFxuICBGaWVsZDogZnVuY3Rpb24gRmllbGQoX3JlZjMpIHtcbiAgICB2YXIgYWxpYXMgPSBfcmVmMy5hbGlhcyxcbiAgICAgICAgbmFtZSA9IF9yZWYzLm5hbWUsXG4gICAgICAgIGFyZ3MgPSBfcmVmMy5hcmd1bWVudHMsXG4gICAgICAgIGRpcmVjdGl2ZXMgPSBfcmVmMy5kaXJlY3RpdmVzLFxuICAgICAgICBzZWxlY3Rpb25TZXQgPSBfcmVmMy5zZWxlY3Rpb25TZXQ7XG4gICAgdmFyIHByZWZpeCA9IHdyYXAoJycsIGFsaWFzLCAnOiAnKSArIG5hbWU7XG4gICAgdmFyIGFyZ3NMaW5lID0gcHJlZml4ICsgd3JhcCgnKCcsIGpvaW4oYXJncywgJywgJyksICcpJyk7XG5cbiAgICBpZiAoYXJnc0xpbmUubGVuZ3RoID4gTUFYX0xJTkVfTEVOR1RIKSB7XG4gICAgICBhcmdzTGluZSA9IHByZWZpeCArIHdyYXAoJyhcXG4nLCBpbmRlbnQoam9pbihhcmdzLCAnXFxuJykpLCAnXFxuKScpO1xuICAgIH1cblxuICAgIHJldHVybiBqb2luKFthcmdzTGluZSwgam9pbihkaXJlY3RpdmVzLCAnICcpLCBzZWxlY3Rpb25TZXRdLCAnICcpO1xuICB9LFxuICBBcmd1bWVudDogZnVuY3Rpb24gQXJndW1lbnQoX3JlZjQpIHtcbiAgICB2YXIgbmFtZSA9IF9yZWY0Lm5hbWUsXG4gICAgICAgIHZhbHVlID0gX3JlZjQudmFsdWU7XG4gICAgcmV0dXJuIG5hbWUgKyAnOiAnICsgdmFsdWU7XG4gIH0sXG4gIC8vIEZyYWdtZW50c1xuICBGcmFnbWVudFNwcmVhZDogZnVuY3Rpb24gRnJhZ21lbnRTcHJlYWQoX3JlZjUpIHtcbiAgICB2YXIgbmFtZSA9IF9yZWY1Lm5hbWUsXG4gICAgICAgIGRpcmVjdGl2ZXMgPSBfcmVmNS5kaXJlY3RpdmVzO1xuICAgIHJldHVybiAnLi4uJyArIG5hbWUgKyB3cmFwKCcgJywgam9pbihkaXJlY3RpdmVzLCAnICcpKTtcbiAgfSxcbiAgSW5saW5lRnJhZ21lbnQ6IGZ1bmN0aW9uIElubGluZUZyYWdtZW50KF9yZWY2KSB7XG4gICAgdmFyIHR5cGVDb25kaXRpb24gPSBfcmVmNi50eXBlQ29uZGl0aW9uLFxuICAgICAgICBkaXJlY3RpdmVzID0gX3JlZjYuZGlyZWN0aXZlcyxcbiAgICAgICAgc2VsZWN0aW9uU2V0ID0gX3JlZjYuc2VsZWN0aW9uU2V0O1xuICAgIHJldHVybiBqb2luKFsnLi4uJywgd3JhcCgnb24gJywgdHlwZUNvbmRpdGlvbiksIGpvaW4oZGlyZWN0aXZlcywgJyAnKSwgc2VsZWN0aW9uU2V0XSwgJyAnKTtcbiAgfSxcbiAgRnJhZ21lbnREZWZpbml0aW9uOiBmdW5jdGlvbiBGcmFnbWVudERlZmluaXRpb24oX3JlZjcpIHtcbiAgICB2YXIgbmFtZSA9IF9yZWY3Lm5hbWUsXG4gICAgICAgIHR5cGVDb25kaXRpb24gPSBfcmVmNy50eXBlQ29uZGl0aW9uLFxuICAgICAgICB2YXJpYWJsZURlZmluaXRpb25zID0gX3JlZjcudmFyaWFibGVEZWZpbml0aW9ucyxcbiAgICAgICAgZGlyZWN0aXZlcyA9IF9yZWY3LmRpcmVjdGl2ZXMsXG4gICAgICAgIHNlbGVjdGlvblNldCA9IF9yZWY3LnNlbGVjdGlvblNldDtcbiAgICByZXR1cm4gKC8vIE5vdGU6IGZyYWdtZW50IHZhcmlhYmxlIGRlZmluaXRpb25zIGFyZSBleHBlcmltZW50YWwgYW5kIG1heSBiZSBjaGFuZ2VkXG4gICAgICAvLyBvciByZW1vdmVkIGluIHRoZSBmdXR1cmUuXG4gICAgICBcImZyYWdtZW50IFwiLmNvbmNhdChuYW1lKS5jb25jYXQod3JhcCgnKCcsIGpvaW4odmFyaWFibGVEZWZpbml0aW9ucywgJywgJyksICcpJyksIFwiIFwiKSArIFwib24gXCIuY29uY2F0KHR5cGVDb25kaXRpb24sIFwiIFwiKS5jb25jYXQod3JhcCgnJywgam9pbihkaXJlY3RpdmVzLCAnICcpLCAnICcpKSArIHNlbGVjdGlvblNldFxuICAgICk7XG4gIH0sXG4gIC8vIFZhbHVlXG4gIEludFZhbHVlOiBmdW5jdGlvbiBJbnRWYWx1ZShfcmVmOCkge1xuICAgIHZhciB2YWx1ZSA9IF9yZWY4LnZhbHVlO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfSxcbiAgRmxvYXRWYWx1ZTogZnVuY3Rpb24gRmxvYXRWYWx1ZShfcmVmOSkge1xuICAgIHZhciB2YWx1ZSA9IF9yZWY5LnZhbHVlO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfSxcbiAgU3RyaW5nVmFsdWU6IGZ1bmN0aW9uIFN0cmluZ1ZhbHVlKF9yZWYxMCwga2V5KSB7XG4gICAgdmFyIHZhbHVlID0gX3JlZjEwLnZhbHVlLFxuICAgICAgICBpc0Jsb2NrU3RyaW5nID0gX3JlZjEwLmJsb2NrO1xuICAgIHJldHVybiBpc0Jsb2NrU3RyaW5nID8gcHJpbnRCbG9ja1N0cmluZyh2YWx1ZSwga2V5ID09PSAnZGVzY3JpcHRpb24nID8gJycgOiAnICAnKSA6IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcbiAgfSxcbiAgQm9vbGVhblZhbHVlOiBmdW5jdGlvbiBCb29sZWFuVmFsdWUoX3JlZjExKSB7XG4gICAgdmFyIHZhbHVlID0gX3JlZjExLnZhbHVlO1xuICAgIHJldHVybiB2YWx1ZSA/ICd0cnVlJyA6ICdmYWxzZSc7XG4gIH0sXG4gIE51bGxWYWx1ZTogZnVuY3Rpb24gTnVsbFZhbHVlKCkge1xuICAgIHJldHVybiAnbnVsbCc7XG4gIH0sXG4gIEVudW1WYWx1ZTogZnVuY3Rpb24gRW51bVZhbHVlKF9yZWYxMikge1xuICAgIHZhciB2YWx1ZSA9IF9yZWYxMi52YWx1ZTtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH0sXG4gIExpc3RWYWx1ZTogZnVuY3Rpb24gTGlzdFZhbHVlKF9yZWYxMykge1xuICAgIHZhciB2YWx1ZXMgPSBfcmVmMTMudmFsdWVzO1xuICAgIHJldHVybiAnWycgKyBqb2luKHZhbHVlcywgJywgJykgKyAnXSc7XG4gIH0sXG4gIE9iamVjdFZhbHVlOiBmdW5jdGlvbiBPYmplY3RWYWx1ZShfcmVmMTQpIHtcbiAgICB2YXIgZmllbGRzID0gX3JlZjE0LmZpZWxkcztcbiAgICByZXR1cm4gJ3snICsgam9pbihmaWVsZHMsICcsICcpICsgJ30nO1xuICB9LFxuICBPYmplY3RGaWVsZDogZnVuY3Rpb24gT2JqZWN0RmllbGQoX3JlZjE1KSB7XG4gICAgdmFyIG5hbWUgPSBfcmVmMTUubmFtZSxcbiAgICAgICAgdmFsdWUgPSBfcmVmMTUudmFsdWU7XG4gICAgcmV0dXJuIG5hbWUgKyAnOiAnICsgdmFsdWU7XG4gIH0sXG4gIC8vIERpcmVjdGl2ZVxuICBEaXJlY3RpdmU6IGZ1bmN0aW9uIERpcmVjdGl2ZShfcmVmMTYpIHtcbiAgICB2YXIgbmFtZSA9IF9yZWYxNi5uYW1lLFxuICAgICAgICBhcmdzID0gX3JlZjE2LmFyZ3VtZW50cztcbiAgICByZXR1cm4gJ0AnICsgbmFtZSArIHdyYXAoJygnLCBqb2luKGFyZ3MsICcsICcpLCAnKScpO1xuICB9LFxuICAvLyBUeXBlXG4gIE5hbWVkVHlwZTogZnVuY3Rpb24gTmFtZWRUeXBlKF9yZWYxNykge1xuICAgIHZhciBuYW1lID0gX3JlZjE3Lm5hbWU7XG4gICAgcmV0dXJuIG5hbWU7XG4gIH0sXG4gIExpc3RUeXBlOiBmdW5jdGlvbiBMaXN0VHlwZShfcmVmMTgpIHtcbiAgICB2YXIgdHlwZSA9IF9yZWYxOC50eXBlO1xuICAgIHJldHVybiAnWycgKyB0eXBlICsgJ10nO1xuICB9LFxuICBOb25OdWxsVHlwZTogZnVuY3Rpb24gTm9uTnVsbFR5cGUoX3JlZjE5KSB7XG4gICAgdmFyIHR5cGUgPSBfcmVmMTkudHlwZTtcbiAgICByZXR1cm4gdHlwZSArICchJztcbiAgfSxcbiAgLy8gVHlwZSBTeXN0ZW0gRGVmaW5pdGlvbnNcbiAgU2NoZW1hRGVmaW5pdGlvbjogYWRkRGVzY3JpcHRpb24oZnVuY3Rpb24gKF9yZWYyMCkge1xuICAgIHZhciBkaXJlY3RpdmVzID0gX3JlZjIwLmRpcmVjdGl2ZXMsXG4gICAgICAgIG9wZXJhdGlvblR5cGVzID0gX3JlZjIwLm9wZXJhdGlvblR5cGVzO1xuICAgIHJldHVybiBqb2luKFsnc2NoZW1hJywgam9pbihkaXJlY3RpdmVzLCAnICcpLCBibG9jayhvcGVyYXRpb25UeXBlcyldLCAnICcpO1xuICB9KSxcbiAgT3BlcmF0aW9uVHlwZURlZmluaXRpb246IGZ1bmN0aW9uIE9wZXJhdGlvblR5cGVEZWZpbml0aW9uKF9yZWYyMSkge1xuICAgIHZhciBvcGVyYXRpb24gPSBfcmVmMjEub3BlcmF0aW9uLFxuICAgICAgICB0eXBlID0gX3JlZjIxLnR5cGU7XG4gICAgcmV0dXJuIG9wZXJhdGlvbiArICc6ICcgKyB0eXBlO1xuICB9LFxuICBTY2FsYXJUeXBlRGVmaW5pdGlvbjogYWRkRGVzY3JpcHRpb24oZnVuY3Rpb24gKF9yZWYyMikge1xuICAgIHZhciBuYW1lID0gX3JlZjIyLm5hbWUsXG4gICAgICAgIGRpcmVjdGl2ZXMgPSBfcmVmMjIuZGlyZWN0aXZlcztcbiAgICByZXR1cm4gam9pbihbJ3NjYWxhcicsIG5hbWUsIGpvaW4oZGlyZWN0aXZlcywgJyAnKV0sICcgJyk7XG4gIH0pLFxuICBPYmplY3RUeXBlRGVmaW5pdGlvbjogYWRkRGVzY3JpcHRpb24oZnVuY3Rpb24gKF9yZWYyMykge1xuICAgIHZhciBuYW1lID0gX3JlZjIzLm5hbWUsXG4gICAgICAgIGludGVyZmFjZXMgPSBfcmVmMjMuaW50ZXJmYWNlcyxcbiAgICAgICAgZGlyZWN0aXZlcyA9IF9yZWYyMy5kaXJlY3RpdmVzLFxuICAgICAgICBmaWVsZHMgPSBfcmVmMjMuZmllbGRzO1xuICAgIHJldHVybiBqb2luKFsndHlwZScsIG5hbWUsIHdyYXAoJ2ltcGxlbWVudHMgJywgam9pbihpbnRlcmZhY2VzLCAnICYgJykpLCBqb2luKGRpcmVjdGl2ZXMsICcgJyksIGJsb2NrKGZpZWxkcyldLCAnICcpO1xuICB9KSxcbiAgRmllbGREZWZpbml0aW9uOiBhZGREZXNjcmlwdGlvbihmdW5jdGlvbiAoX3JlZjI0KSB7XG4gICAgdmFyIG5hbWUgPSBfcmVmMjQubmFtZSxcbiAgICAgICAgYXJncyA9IF9yZWYyNC5hcmd1bWVudHMsXG4gICAgICAgIHR5cGUgPSBfcmVmMjQudHlwZSxcbiAgICAgICAgZGlyZWN0aXZlcyA9IF9yZWYyNC5kaXJlY3RpdmVzO1xuICAgIHJldHVybiBuYW1lICsgKGhhc011bHRpbGluZUl0ZW1zKGFyZ3MpID8gd3JhcCgnKFxcbicsIGluZGVudChqb2luKGFyZ3MsICdcXG4nKSksICdcXG4pJykgOiB3cmFwKCcoJywgam9pbihhcmdzLCAnLCAnKSwgJyknKSkgKyAnOiAnICsgdHlwZSArIHdyYXAoJyAnLCBqb2luKGRpcmVjdGl2ZXMsICcgJykpO1xuICB9KSxcbiAgSW5wdXRWYWx1ZURlZmluaXRpb246IGFkZERlc2NyaXB0aW9uKGZ1bmN0aW9uIChfcmVmMjUpIHtcbiAgICB2YXIgbmFtZSA9IF9yZWYyNS5uYW1lLFxuICAgICAgICB0eXBlID0gX3JlZjI1LnR5cGUsXG4gICAgICAgIGRlZmF1bHRWYWx1ZSA9IF9yZWYyNS5kZWZhdWx0VmFsdWUsXG4gICAgICAgIGRpcmVjdGl2ZXMgPSBfcmVmMjUuZGlyZWN0aXZlcztcbiAgICByZXR1cm4gam9pbihbbmFtZSArICc6ICcgKyB0eXBlLCB3cmFwKCc9ICcsIGRlZmF1bHRWYWx1ZSksIGpvaW4oZGlyZWN0aXZlcywgJyAnKV0sICcgJyk7XG4gIH0pLFxuICBJbnRlcmZhY2VUeXBlRGVmaW5pdGlvbjogYWRkRGVzY3JpcHRpb24oZnVuY3Rpb24gKF9yZWYyNikge1xuICAgIHZhciBuYW1lID0gX3JlZjI2Lm5hbWUsXG4gICAgICAgIGludGVyZmFjZXMgPSBfcmVmMjYuaW50ZXJmYWNlcyxcbiAgICAgICAgZGlyZWN0aXZlcyA9IF9yZWYyNi5kaXJlY3RpdmVzLFxuICAgICAgICBmaWVsZHMgPSBfcmVmMjYuZmllbGRzO1xuICAgIHJldHVybiBqb2luKFsnaW50ZXJmYWNlJywgbmFtZSwgd3JhcCgnaW1wbGVtZW50cyAnLCBqb2luKGludGVyZmFjZXMsICcgJiAnKSksIGpvaW4oZGlyZWN0aXZlcywgJyAnKSwgYmxvY2soZmllbGRzKV0sICcgJyk7XG4gIH0pLFxuICBVbmlvblR5cGVEZWZpbml0aW9uOiBhZGREZXNjcmlwdGlvbihmdW5jdGlvbiAoX3JlZjI3KSB7XG4gICAgdmFyIG5hbWUgPSBfcmVmMjcubmFtZSxcbiAgICAgICAgZGlyZWN0aXZlcyA9IF9yZWYyNy5kaXJlY3RpdmVzLFxuICAgICAgICB0eXBlcyA9IF9yZWYyNy50eXBlcztcbiAgICByZXR1cm4gam9pbihbJ3VuaW9uJywgbmFtZSwgam9pbihkaXJlY3RpdmVzLCAnICcpLCB0eXBlcyAmJiB0eXBlcy5sZW5ndGggIT09IDAgPyAnPSAnICsgam9pbih0eXBlcywgJyB8ICcpIDogJyddLCAnICcpO1xuICB9KSxcbiAgRW51bVR5cGVEZWZpbml0aW9uOiBhZGREZXNjcmlwdGlvbihmdW5jdGlvbiAoX3JlZjI4KSB7XG4gICAgdmFyIG5hbWUgPSBfcmVmMjgubmFtZSxcbiAgICAgICAgZGlyZWN0aXZlcyA9IF9yZWYyOC5kaXJlY3RpdmVzLFxuICAgICAgICB2YWx1ZXMgPSBfcmVmMjgudmFsdWVzO1xuICAgIHJldHVybiBqb2luKFsnZW51bScsIG5hbWUsIGpvaW4oZGlyZWN0aXZlcywgJyAnKSwgYmxvY2sodmFsdWVzKV0sICcgJyk7XG4gIH0pLFxuICBFbnVtVmFsdWVEZWZpbml0aW9uOiBhZGREZXNjcmlwdGlvbihmdW5jdGlvbiAoX3JlZjI5KSB7XG4gICAgdmFyIG5hbWUgPSBfcmVmMjkubmFtZSxcbiAgICAgICAgZGlyZWN0aXZlcyA9IF9yZWYyOS5kaXJlY3RpdmVzO1xuICAgIHJldHVybiBqb2luKFtuYW1lLCBqb2luKGRpcmVjdGl2ZXMsICcgJyldLCAnICcpO1xuICB9KSxcbiAgSW5wdXRPYmplY3RUeXBlRGVmaW5pdGlvbjogYWRkRGVzY3JpcHRpb24oZnVuY3Rpb24gKF9yZWYzMCkge1xuICAgIHZhciBuYW1lID0gX3JlZjMwLm5hbWUsXG4gICAgICAgIGRpcmVjdGl2ZXMgPSBfcmVmMzAuZGlyZWN0aXZlcyxcbiAgICAgICAgZmllbGRzID0gX3JlZjMwLmZpZWxkcztcbiAgICByZXR1cm4gam9pbihbJ2lucHV0JywgbmFtZSwgam9pbihkaXJlY3RpdmVzLCAnICcpLCBibG9jayhmaWVsZHMpXSwgJyAnKTtcbiAgfSksXG4gIERpcmVjdGl2ZURlZmluaXRpb246IGFkZERlc2NyaXB0aW9uKGZ1bmN0aW9uIChfcmVmMzEpIHtcbiAgICB2YXIgbmFtZSA9IF9yZWYzMS5uYW1lLFxuICAgICAgICBhcmdzID0gX3JlZjMxLmFyZ3VtZW50cyxcbiAgICAgICAgcmVwZWF0YWJsZSA9IF9yZWYzMS5yZXBlYXRhYmxlLFxuICAgICAgICBsb2NhdGlvbnMgPSBfcmVmMzEubG9jYXRpb25zO1xuICAgIHJldHVybiAnZGlyZWN0aXZlIEAnICsgbmFtZSArIChoYXNNdWx0aWxpbmVJdGVtcyhhcmdzKSA/IHdyYXAoJyhcXG4nLCBpbmRlbnQoam9pbihhcmdzLCAnXFxuJykpLCAnXFxuKScpIDogd3JhcCgnKCcsIGpvaW4oYXJncywgJywgJyksICcpJykpICsgKHJlcGVhdGFibGUgPyAnIHJlcGVhdGFibGUnIDogJycpICsgJyBvbiAnICsgam9pbihsb2NhdGlvbnMsICcgfCAnKTtcbiAgfSksXG4gIFNjaGVtYUV4dGVuc2lvbjogZnVuY3Rpb24gU2NoZW1hRXh0ZW5zaW9uKF9yZWYzMikge1xuICAgIHZhciBkaXJlY3RpdmVzID0gX3JlZjMyLmRpcmVjdGl2ZXMsXG4gICAgICAgIG9wZXJhdGlvblR5cGVzID0gX3JlZjMyLm9wZXJhdGlvblR5cGVzO1xuICAgIHJldHVybiBqb2luKFsnZXh0ZW5kIHNjaGVtYScsIGpvaW4oZGlyZWN0aXZlcywgJyAnKSwgYmxvY2sob3BlcmF0aW9uVHlwZXMpXSwgJyAnKTtcbiAgfSxcbiAgU2NhbGFyVHlwZUV4dGVuc2lvbjogZnVuY3Rpb24gU2NhbGFyVHlwZUV4dGVuc2lvbihfcmVmMzMpIHtcbiAgICB2YXIgbmFtZSA9IF9yZWYzMy5uYW1lLFxuICAgICAgICBkaXJlY3RpdmVzID0gX3JlZjMzLmRpcmVjdGl2ZXM7XG4gICAgcmV0dXJuIGpvaW4oWydleHRlbmQgc2NhbGFyJywgbmFtZSwgam9pbihkaXJlY3RpdmVzLCAnICcpXSwgJyAnKTtcbiAgfSxcbiAgT2JqZWN0VHlwZUV4dGVuc2lvbjogZnVuY3Rpb24gT2JqZWN0VHlwZUV4dGVuc2lvbihfcmVmMzQpIHtcbiAgICB2YXIgbmFtZSA9IF9yZWYzNC5uYW1lLFxuICAgICAgICBpbnRlcmZhY2VzID0gX3JlZjM0LmludGVyZmFjZXMsXG4gICAgICAgIGRpcmVjdGl2ZXMgPSBfcmVmMzQuZGlyZWN0aXZlcyxcbiAgICAgICAgZmllbGRzID0gX3JlZjM0LmZpZWxkcztcbiAgICByZXR1cm4gam9pbihbJ2V4dGVuZCB0eXBlJywgbmFtZSwgd3JhcCgnaW1wbGVtZW50cyAnLCBqb2luKGludGVyZmFjZXMsICcgJiAnKSksIGpvaW4oZGlyZWN0aXZlcywgJyAnKSwgYmxvY2soZmllbGRzKV0sICcgJyk7XG4gIH0sXG4gIEludGVyZmFjZVR5cGVFeHRlbnNpb246IGZ1bmN0aW9uIEludGVyZmFjZVR5cGVFeHRlbnNpb24oX3JlZjM1KSB7XG4gICAgdmFyIG5hbWUgPSBfcmVmMzUubmFtZSxcbiAgICAgICAgaW50ZXJmYWNlcyA9IF9yZWYzNS5pbnRlcmZhY2VzLFxuICAgICAgICBkaXJlY3RpdmVzID0gX3JlZjM1LmRpcmVjdGl2ZXMsXG4gICAgICAgIGZpZWxkcyA9IF9yZWYzNS5maWVsZHM7XG4gICAgcmV0dXJuIGpvaW4oWydleHRlbmQgaW50ZXJmYWNlJywgbmFtZSwgd3JhcCgnaW1wbGVtZW50cyAnLCBqb2luKGludGVyZmFjZXMsICcgJiAnKSksIGpvaW4oZGlyZWN0aXZlcywgJyAnKSwgYmxvY2soZmllbGRzKV0sICcgJyk7XG4gIH0sXG4gIFVuaW9uVHlwZUV4dGVuc2lvbjogZnVuY3Rpb24gVW5pb25UeXBlRXh0ZW5zaW9uKF9yZWYzNikge1xuICAgIHZhciBuYW1lID0gX3JlZjM2Lm5hbWUsXG4gICAgICAgIGRpcmVjdGl2ZXMgPSBfcmVmMzYuZGlyZWN0aXZlcyxcbiAgICAgICAgdHlwZXMgPSBfcmVmMzYudHlwZXM7XG4gICAgcmV0dXJuIGpvaW4oWydleHRlbmQgdW5pb24nLCBuYW1lLCBqb2luKGRpcmVjdGl2ZXMsICcgJyksIHR5cGVzICYmIHR5cGVzLmxlbmd0aCAhPT0gMCA/ICc9ICcgKyBqb2luKHR5cGVzLCAnIHwgJykgOiAnJ10sICcgJyk7XG4gIH0sXG4gIEVudW1UeXBlRXh0ZW5zaW9uOiBmdW5jdGlvbiBFbnVtVHlwZUV4dGVuc2lvbihfcmVmMzcpIHtcbiAgICB2YXIgbmFtZSA9IF9yZWYzNy5uYW1lLFxuICAgICAgICBkaXJlY3RpdmVzID0gX3JlZjM3LmRpcmVjdGl2ZXMsXG4gICAgICAgIHZhbHVlcyA9IF9yZWYzNy52YWx1ZXM7XG4gICAgcmV0dXJuIGpvaW4oWydleHRlbmQgZW51bScsIG5hbWUsIGpvaW4oZGlyZWN0aXZlcywgJyAnKSwgYmxvY2sodmFsdWVzKV0sICcgJyk7XG4gIH0sXG4gIElucHV0T2JqZWN0VHlwZUV4dGVuc2lvbjogZnVuY3Rpb24gSW5wdXRPYmplY3RUeXBlRXh0ZW5zaW9uKF9yZWYzOCkge1xuICAgIHZhciBuYW1lID0gX3JlZjM4Lm5hbWUsXG4gICAgICAgIGRpcmVjdGl2ZXMgPSBfcmVmMzguZGlyZWN0aXZlcyxcbiAgICAgICAgZmllbGRzID0gX3JlZjM4LmZpZWxkcztcbiAgICByZXR1cm4gam9pbihbJ2V4dGVuZCBpbnB1dCcsIG5hbWUsIGpvaW4oZGlyZWN0aXZlcywgJyAnKSwgYmxvY2soZmllbGRzKV0sICcgJyk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGFkZERlc2NyaXB0aW9uKGNiKSB7XG4gIHJldHVybiBmdW5jdGlvbiAobm9kZSkge1xuICAgIHJldHVybiBqb2luKFtub2RlLmRlc2NyaXB0aW9uLCBjYihub2RlKV0sICdcXG4nKTtcbiAgfTtcbn1cbi8qKlxuICogR2l2ZW4gbWF5YmVBcnJheSwgcHJpbnQgYW4gZW1wdHkgc3RyaW5nIGlmIGl0IGlzIG51bGwgb3IgZW1wdHksIG90aGVyd2lzZVxuICogcHJpbnQgYWxsIGl0ZW1zIHRvZ2V0aGVyIHNlcGFyYXRlZCBieSBzZXBhcmF0b3IgaWYgcHJvdmlkZWRcbiAqL1xuXG5cbmZ1bmN0aW9uIGpvaW4obWF5YmVBcnJheSkge1xuICB2YXIgX21heWJlQXJyYXkkZmlsdGVyJGpvO1xuXG4gIHZhciBzZXBhcmF0b3IgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICcnO1xuICByZXR1cm4gKF9tYXliZUFycmF5JGZpbHRlciRqbyA9IG1heWJlQXJyYXkgPT09IG51bGwgfHwgbWF5YmVBcnJheSA9PT0gdm9pZCAwID8gdm9pZCAwIDogbWF5YmVBcnJheS5maWx0ZXIoZnVuY3Rpb24gKHgpIHtcbiAgICByZXR1cm4geDtcbiAgfSkuam9pbihzZXBhcmF0b3IpKSAhPT0gbnVsbCAmJiBfbWF5YmVBcnJheSRmaWx0ZXIkam8gIT09IHZvaWQgMCA/IF9tYXliZUFycmF5JGZpbHRlciRqbyA6ICcnO1xufVxuLyoqXG4gKiBHaXZlbiBhcnJheSwgcHJpbnQgZWFjaCBpdGVtIG9uIGl0cyBvd24gbGluZSwgd3JhcHBlZCBpbiBhblxuICogaW5kZW50ZWQgXCJ7IH1cIiBibG9jay5cbiAqL1xuXG5cbmZ1bmN0aW9uIGJsb2NrKGFycmF5KSB7XG4gIHJldHVybiB3cmFwKCd7XFxuJywgaW5kZW50KGpvaW4oYXJyYXksICdcXG4nKSksICdcXG59Jyk7XG59XG4vKipcbiAqIElmIG1heWJlU3RyaW5nIGlzIG5vdCBudWxsIG9yIGVtcHR5LCB0aGVuIHdyYXAgd2l0aCBzdGFydCBhbmQgZW5kLCBvdGhlcndpc2UgcHJpbnQgYW4gZW1wdHkgc3RyaW5nLlxuICovXG5cblxuZnVuY3Rpb24gd3JhcChzdGFydCwgbWF5YmVTdHJpbmcpIHtcbiAgdmFyIGVuZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogJyc7XG4gIHJldHVybiBtYXliZVN0cmluZyAhPSBudWxsICYmIG1heWJlU3RyaW5nICE9PSAnJyA/IHN0YXJ0ICsgbWF5YmVTdHJpbmcgKyBlbmQgOiAnJztcbn1cblxuZnVuY3Rpb24gaW5kZW50KHN0cikge1xuICByZXR1cm4gd3JhcCgnICAnLCBzdHIucmVwbGFjZSgvXFxuL2csICdcXG4gICcpKTtcbn1cblxuZnVuY3Rpb24gaXNNdWx0aWxpbmUoc3RyKSB7XG4gIHJldHVybiBzdHIuaW5kZXhPZignXFxuJykgIT09IC0xO1xufVxuXG5mdW5jdGlvbiBoYXNNdWx0aWxpbmVJdGVtcyhtYXliZUFycmF5KSB7XG4gIHJldHVybiBtYXliZUFycmF5ICE9IG51bGwgJiYgbWF5YmVBcnJheS5zb21lKGlzTXVsdGlsaW5lKTtcbn1cbiIsImZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuaW1wb3J0IHsgU1lNQk9MX1RPX1NUUklOR19UQUcgfSBmcm9tIFwiLi4vcG9seWZpbGxzL3N5bWJvbHMubWpzXCI7XG5pbXBvcnQgaW5zcGVjdCBmcm9tIFwiLi4vanN1dGlscy9pbnNwZWN0Lm1qc1wiO1xuaW1wb3J0IGRldkFzc2VydCBmcm9tIFwiLi4vanN1dGlscy9kZXZBc3NlcnQubWpzXCI7XG5pbXBvcnQgaW5zdGFuY2VPZiBmcm9tIFwiLi4vanN1dGlscy9pbnN0YW5jZU9mLm1qc1wiO1xuXG4vKipcbiAqIEEgcmVwcmVzZW50YXRpb24gb2Ygc291cmNlIGlucHV0IHRvIEdyYXBoUUwuIFRoZSBgbmFtZWAgYW5kIGBsb2NhdGlvbk9mZnNldGAgcGFyYW1ldGVycyBhcmVcbiAqIG9wdGlvbmFsLCBidXQgdGhleSBhcmUgdXNlZnVsIGZvciBjbGllbnRzIHdobyBzdG9yZSBHcmFwaFFMIGRvY3VtZW50cyBpbiBzb3VyY2UgZmlsZXMuXG4gKiBGb3IgZXhhbXBsZSwgaWYgdGhlIEdyYXBoUUwgaW5wdXQgc3RhcnRzIGF0IGxpbmUgNDAgaW4gYSBmaWxlIG5hbWVkIGBGb28uZ3JhcGhxbGAsIGl0IG1pZ2h0XG4gKiBiZSB1c2VmdWwgZm9yIGBuYW1lYCB0byBiZSBgXCJGb28uZ3JhcGhxbFwiYCBhbmQgbG9jYXRpb24gdG8gYmUgYHsgbGluZTogNDAsIGNvbHVtbjogMSB9YC5cbiAqIFRoZSBgbGluZWAgYW5kIGBjb2x1bW5gIHByb3BlcnRpZXMgaW4gYGxvY2F0aW9uT2Zmc2V0YCBhcmUgMS1pbmRleGVkLlxuICovXG5leHBvcnQgdmFyIFNvdXJjZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFNvdXJjZShib2R5KSB7XG4gICAgdmFyIG5hbWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICdHcmFwaFFMIHJlcXVlc3QnO1xuICAgIHZhciBsb2NhdGlvbk9mZnNldCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge1xuICAgICAgbGluZTogMSxcbiAgICAgIGNvbHVtbjogMVxuICAgIH07XG4gICAgdHlwZW9mIGJvZHkgPT09ICdzdHJpbmcnIHx8IGRldkFzc2VydCgwLCBcIkJvZHkgbXVzdCBiZSBhIHN0cmluZy4gUmVjZWl2ZWQ6IFwiLmNvbmNhdChpbnNwZWN0KGJvZHkpLCBcIi5cIikpO1xuICAgIHRoaXMuYm9keSA9IGJvZHk7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLmxvY2F0aW9uT2Zmc2V0ID0gbG9jYXRpb25PZmZzZXQ7XG4gICAgdGhpcy5sb2NhdGlvbk9mZnNldC5saW5lID4gMCB8fCBkZXZBc3NlcnQoMCwgJ2xpbmUgaW4gbG9jYXRpb25PZmZzZXQgaXMgMS1pbmRleGVkIGFuZCBtdXN0IGJlIHBvc2l0aXZlLicpO1xuICAgIHRoaXMubG9jYXRpb25PZmZzZXQuY29sdW1uID4gMCB8fCBkZXZBc3NlcnQoMCwgJ2NvbHVtbiBpbiBsb2NhdGlvbk9mZnNldCBpcyAxLWluZGV4ZWQgYW5kIG11c3QgYmUgcG9zaXRpdmUuJyk7XG4gIH0gLy8gJEZsb3dGaXhNZVt1bnN1cHBvcnRlZC1zeW50YXhdIEZsb3cgZG9lc24ndCBzdXBwb3J0IGNvbXB1dGVkIHByb3BlcnRpZXMgeWV0XG5cblxuICBfY3JlYXRlQ2xhc3MoU291cmNlLCBbe1xuICAgIGtleTogU1lNQk9MX1RPX1NUUklOR19UQUcsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gJ1NvdXJjZSc7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFNvdXJjZTtcbn0oKTtcbi8qKlxuICogVGVzdCBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgYSBTb3VyY2Ugb2JqZWN0LlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZWRlY2xhcmVcbmV4cG9ydCBmdW5jdGlvbiBpc1NvdXJjZShzb3VyY2UpIHtcbiAgcmV0dXJuIGluc3RhbmNlT2Yoc291cmNlLCBTb3VyY2UpO1xufVxuIiwiLyoqXG4gKiBBbiBleHBvcnRlZCBlbnVtIGRlc2NyaWJpbmcgdGhlIGRpZmZlcmVudCBraW5kcyBvZiB0b2tlbnMgdGhhdCB0aGVcbiAqIGxleGVyIGVtaXRzLlxuICovXG5leHBvcnQgdmFyIFRva2VuS2luZCA9IE9iamVjdC5mcmVlemUoe1xuICBTT0Y6ICc8U09GPicsXG4gIEVPRjogJzxFT0Y+JyxcbiAgQkFORzogJyEnLFxuICBET0xMQVI6ICckJyxcbiAgQU1QOiAnJicsXG4gIFBBUkVOX0w6ICcoJyxcbiAgUEFSRU5fUjogJyknLFxuICBTUFJFQUQ6ICcuLi4nLFxuICBDT0xPTjogJzonLFxuICBFUVVBTFM6ICc9JyxcbiAgQVQ6ICdAJyxcbiAgQlJBQ0tFVF9MOiAnWycsXG4gIEJSQUNLRVRfUjogJ10nLFxuICBCUkFDRV9MOiAneycsXG4gIFBJUEU6ICd8JyxcbiAgQlJBQ0VfUjogJ30nLFxuICBOQU1FOiAnTmFtZScsXG4gIElOVDogJ0ludCcsXG4gIEZMT0FUOiAnRmxvYXQnLFxuICBTVFJJTkc6ICdTdHJpbmcnLFxuICBCTE9DS19TVFJJTkc6ICdCbG9ja1N0cmluZycsXG4gIENPTU1FTlQ6ICdDb21tZW50J1xufSk7XG4vKipcbiAqIFRoZSBlbnVtIHR5cGUgcmVwcmVzZW50aW5nIHRoZSB0b2tlbiBraW5kcyB2YWx1ZXMuXG4gKi9cbiIsImltcG9ydCBpbnNwZWN0IGZyb20gXCIuLi9qc3V0aWxzL2luc3BlY3QubWpzXCI7XG5pbXBvcnQgeyBpc05vZGUgfSBmcm9tIFwiLi9hc3QubWpzXCI7XG4vKipcbiAqIEEgdmlzaXRvciBpcyBwcm92aWRlZCB0byB2aXNpdCwgaXQgY29udGFpbnMgdGhlIGNvbGxlY3Rpb24gb2ZcbiAqIHJlbGV2YW50IGZ1bmN0aW9ucyB0byBiZSBjYWxsZWQgZHVyaW5nIHRoZSB2aXNpdG9yJ3MgdHJhdmVyc2FsLlxuICovXG5cbmV4cG9ydCB2YXIgUXVlcnlEb2N1bWVudEtleXMgPSB7XG4gIE5hbWU6IFtdLFxuICBEb2N1bWVudDogWydkZWZpbml0aW9ucyddLFxuICBPcGVyYXRpb25EZWZpbml0aW9uOiBbJ25hbWUnLCAndmFyaWFibGVEZWZpbml0aW9ucycsICdkaXJlY3RpdmVzJywgJ3NlbGVjdGlvblNldCddLFxuICBWYXJpYWJsZURlZmluaXRpb246IFsndmFyaWFibGUnLCAndHlwZScsICdkZWZhdWx0VmFsdWUnLCAnZGlyZWN0aXZlcyddLFxuICBWYXJpYWJsZTogWyduYW1lJ10sXG4gIFNlbGVjdGlvblNldDogWydzZWxlY3Rpb25zJ10sXG4gIEZpZWxkOiBbJ2FsaWFzJywgJ25hbWUnLCAnYXJndW1lbnRzJywgJ2RpcmVjdGl2ZXMnLCAnc2VsZWN0aW9uU2V0J10sXG4gIEFyZ3VtZW50OiBbJ25hbWUnLCAndmFsdWUnXSxcbiAgRnJhZ21lbnRTcHJlYWQ6IFsnbmFtZScsICdkaXJlY3RpdmVzJ10sXG4gIElubGluZUZyYWdtZW50OiBbJ3R5cGVDb25kaXRpb24nLCAnZGlyZWN0aXZlcycsICdzZWxlY3Rpb25TZXQnXSxcbiAgRnJhZ21lbnREZWZpbml0aW9uOiBbJ25hbWUnLCAvLyBOb3RlOiBmcmFnbWVudCB2YXJpYWJsZSBkZWZpbml0aW9ucyBhcmUgZXhwZXJpbWVudGFsIGFuZCBtYXkgYmUgY2hhbmdlZFxuICAvLyBvciByZW1vdmVkIGluIHRoZSBmdXR1cmUuXG4gICd2YXJpYWJsZURlZmluaXRpb25zJywgJ3R5cGVDb25kaXRpb24nLCAnZGlyZWN0aXZlcycsICdzZWxlY3Rpb25TZXQnXSxcbiAgSW50VmFsdWU6IFtdLFxuICBGbG9hdFZhbHVlOiBbXSxcbiAgU3RyaW5nVmFsdWU6IFtdLFxuICBCb29sZWFuVmFsdWU6IFtdLFxuICBOdWxsVmFsdWU6IFtdLFxuICBFbnVtVmFsdWU6IFtdLFxuICBMaXN0VmFsdWU6IFsndmFsdWVzJ10sXG4gIE9iamVjdFZhbHVlOiBbJ2ZpZWxkcyddLFxuICBPYmplY3RGaWVsZDogWyduYW1lJywgJ3ZhbHVlJ10sXG4gIERpcmVjdGl2ZTogWyduYW1lJywgJ2FyZ3VtZW50cyddLFxuICBOYW1lZFR5cGU6IFsnbmFtZSddLFxuICBMaXN0VHlwZTogWyd0eXBlJ10sXG4gIE5vbk51bGxUeXBlOiBbJ3R5cGUnXSxcbiAgU2NoZW1hRGVmaW5pdGlvbjogWydkZXNjcmlwdGlvbicsICdkaXJlY3RpdmVzJywgJ29wZXJhdGlvblR5cGVzJ10sXG4gIE9wZXJhdGlvblR5cGVEZWZpbml0aW9uOiBbJ3R5cGUnXSxcbiAgU2NhbGFyVHlwZURlZmluaXRpb246IFsnZGVzY3JpcHRpb24nLCAnbmFtZScsICdkaXJlY3RpdmVzJ10sXG4gIE9iamVjdFR5cGVEZWZpbml0aW9uOiBbJ2Rlc2NyaXB0aW9uJywgJ25hbWUnLCAnaW50ZXJmYWNlcycsICdkaXJlY3RpdmVzJywgJ2ZpZWxkcyddLFxuICBGaWVsZERlZmluaXRpb246IFsnZGVzY3JpcHRpb24nLCAnbmFtZScsICdhcmd1bWVudHMnLCAndHlwZScsICdkaXJlY3RpdmVzJ10sXG4gIElucHV0VmFsdWVEZWZpbml0aW9uOiBbJ2Rlc2NyaXB0aW9uJywgJ25hbWUnLCAndHlwZScsICdkZWZhdWx0VmFsdWUnLCAnZGlyZWN0aXZlcyddLFxuICBJbnRlcmZhY2VUeXBlRGVmaW5pdGlvbjogWydkZXNjcmlwdGlvbicsICduYW1lJywgJ2ludGVyZmFjZXMnLCAnZGlyZWN0aXZlcycsICdmaWVsZHMnXSxcbiAgVW5pb25UeXBlRGVmaW5pdGlvbjogWydkZXNjcmlwdGlvbicsICduYW1lJywgJ2RpcmVjdGl2ZXMnLCAndHlwZXMnXSxcbiAgRW51bVR5cGVEZWZpbml0aW9uOiBbJ2Rlc2NyaXB0aW9uJywgJ25hbWUnLCAnZGlyZWN0aXZlcycsICd2YWx1ZXMnXSxcbiAgRW51bVZhbHVlRGVmaW5pdGlvbjogWydkZXNjcmlwdGlvbicsICduYW1lJywgJ2RpcmVjdGl2ZXMnXSxcbiAgSW5wdXRPYmplY3RUeXBlRGVmaW5pdGlvbjogWydkZXNjcmlwdGlvbicsICduYW1lJywgJ2RpcmVjdGl2ZXMnLCAnZmllbGRzJ10sXG4gIERpcmVjdGl2ZURlZmluaXRpb246IFsnZGVzY3JpcHRpb24nLCAnbmFtZScsICdhcmd1bWVudHMnLCAnbG9jYXRpb25zJ10sXG4gIFNjaGVtYUV4dGVuc2lvbjogWydkaXJlY3RpdmVzJywgJ29wZXJhdGlvblR5cGVzJ10sXG4gIFNjYWxhclR5cGVFeHRlbnNpb246IFsnbmFtZScsICdkaXJlY3RpdmVzJ10sXG4gIE9iamVjdFR5cGVFeHRlbnNpb246IFsnbmFtZScsICdpbnRlcmZhY2VzJywgJ2RpcmVjdGl2ZXMnLCAnZmllbGRzJ10sXG4gIEludGVyZmFjZVR5cGVFeHRlbnNpb246IFsnbmFtZScsICdpbnRlcmZhY2VzJywgJ2RpcmVjdGl2ZXMnLCAnZmllbGRzJ10sXG4gIFVuaW9uVHlwZUV4dGVuc2lvbjogWyduYW1lJywgJ2RpcmVjdGl2ZXMnLCAndHlwZXMnXSxcbiAgRW51bVR5cGVFeHRlbnNpb246IFsnbmFtZScsICdkaXJlY3RpdmVzJywgJ3ZhbHVlcyddLFxuICBJbnB1dE9iamVjdFR5cGVFeHRlbnNpb246IFsnbmFtZScsICdkaXJlY3RpdmVzJywgJ2ZpZWxkcyddXG59O1xuZXhwb3J0IHZhciBCUkVBSyA9IE9iamVjdC5mcmVlemUoe30pO1xuLyoqXG4gKiB2aXNpdCgpIHdpbGwgd2FsayB0aHJvdWdoIGFuIEFTVCB1c2luZyBhIGRlcHRoLWZpcnN0IHRyYXZlcnNhbCwgY2FsbGluZ1xuICogdGhlIHZpc2l0b3IncyBlbnRlciBmdW5jdGlvbiBhdCBlYWNoIG5vZGUgaW4gdGhlIHRyYXZlcnNhbCwgYW5kIGNhbGxpbmcgdGhlXG4gKiBsZWF2ZSBmdW5jdGlvbiBhZnRlciB2aXNpdGluZyB0aGF0IG5vZGUgYW5kIGFsbCBvZiBpdHMgY2hpbGQgbm9kZXMuXG4gKlxuICogQnkgcmV0dXJuaW5nIGRpZmZlcmVudCB2YWx1ZXMgZnJvbSB0aGUgZW50ZXIgYW5kIGxlYXZlIGZ1bmN0aW9ucywgdGhlXG4gKiBiZWhhdmlvciBvZiB0aGUgdmlzaXRvciBjYW4gYmUgYWx0ZXJlZCwgaW5jbHVkaW5nIHNraXBwaW5nIG92ZXIgYSBzdWItdHJlZSBvZlxuICogdGhlIEFTVCAoYnkgcmV0dXJuaW5nIGZhbHNlKSwgZWRpdGluZyB0aGUgQVNUIGJ5IHJldHVybmluZyBhIHZhbHVlIG9yIG51bGxcbiAqIHRvIHJlbW92ZSB0aGUgdmFsdWUsIG9yIHRvIHN0b3AgdGhlIHdob2xlIHRyYXZlcnNhbCBieSByZXR1cm5pbmcgQlJFQUsuXG4gKlxuICogV2hlbiB1c2luZyB2aXNpdCgpIHRvIGVkaXQgYW4gQVNULCB0aGUgb3JpZ2luYWwgQVNUIHdpbGwgbm90IGJlIG1vZGlmaWVkLCBhbmRcbiAqIGEgbmV3IHZlcnNpb24gb2YgdGhlIEFTVCB3aXRoIHRoZSBjaGFuZ2VzIGFwcGxpZWQgd2lsbCBiZSByZXR1cm5lZCBmcm9tIHRoZVxuICogdmlzaXQgZnVuY3Rpb24uXG4gKlxuICogICAgIGNvbnN0IGVkaXRlZEFTVCA9IHZpc2l0KGFzdCwge1xuICogICAgICAgZW50ZXIobm9kZSwga2V5LCBwYXJlbnQsIHBhdGgsIGFuY2VzdG9ycykge1xuICogICAgICAgICAvLyBAcmV0dXJuXG4gKiAgICAgICAgIC8vICAgdW5kZWZpbmVkOiBubyBhY3Rpb25cbiAqICAgICAgICAgLy8gICBmYWxzZTogc2tpcCB2aXNpdGluZyB0aGlzIG5vZGVcbiAqICAgICAgICAgLy8gICB2aXNpdG9yLkJSRUFLOiBzdG9wIHZpc2l0aW5nIGFsdG9nZXRoZXJcbiAqICAgICAgICAgLy8gICBudWxsOiBkZWxldGUgdGhpcyBub2RlXG4gKiAgICAgICAgIC8vICAgYW55IHZhbHVlOiByZXBsYWNlIHRoaXMgbm9kZSB3aXRoIHRoZSByZXR1cm5lZCB2YWx1ZVxuICogICAgICAgfSxcbiAqICAgICAgIGxlYXZlKG5vZGUsIGtleSwgcGFyZW50LCBwYXRoLCBhbmNlc3RvcnMpIHtcbiAqICAgICAgICAgLy8gQHJldHVyblxuICogICAgICAgICAvLyAgIHVuZGVmaW5lZDogbm8gYWN0aW9uXG4gKiAgICAgICAgIC8vICAgZmFsc2U6IG5vIGFjdGlvblxuICogICAgICAgICAvLyAgIHZpc2l0b3IuQlJFQUs6IHN0b3AgdmlzaXRpbmcgYWx0b2dldGhlclxuICogICAgICAgICAvLyAgIG51bGw6IGRlbGV0ZSB0aGlzIG5vZGVcbiAqICAgICAgICAgLy8gICBhbnkgdmFsdWU6IHJlcGxhY2UgdGhpcyBub2RlIHdpdGggdGhlIHJldHVybmVkIHZhbHVlXG4gKiAgICAgICB9XG4gKiAgICAgfSk7XG4gKlxuICogQWx0ZXJuYXRpdmVseSB0byBwcm92aWRpbmcgZW50ZXIoKSBhbmQgbGVhdmUoKSBmdW5jdGlvbnMsIGEgdmlzaXRvciBjYW5cbiAqIGluc3RlYWQgcHJvdmlkZSBmdW5jdGlvbnMgbmFtZWQgdGhlIHNhbWUgYXMgdGhlIGtpbmRzIG9mIEFTVCBub2Rlcywgb3JcbiAqIGVudGVyL2xlYXZlIHZpc2l0b3JzIGF0IGEgbmFtZWQga2V5LCBsZWFkaW5nIHRvIGZvdXIgcGVybXV0YXRpb25zIG9mIHRoZVxuICogdmlzaXRvciBBUEk6XG4gKlxuICogMSkgTmFtZWQgdmlzaXRvcnMgdHJpZ2dlcmVkIHdoZW4gZW50ZXJpbmcgYSBub2RlIG9mIGEgc3BlY2lmaWMga2luZC5cbiAqXG4gKiAgICAgdmlzaXQoYXN0LCB7XG4gKiAgICAgICBLaW5kKG5vZGUpIHtcbiAqICAgICAgICAgLy8gZW50ZXIgdGhlIFwiS2luZFwiIG5vZGVcbiAqICAgICAgIH1cbiAqICAgICB9KVxuICpcbiAqIDIpIE5hbWVkIHZpc2l0b3JzIHRoYXQgdHJpZ2dlciB1cG9uIGVudGVyaW5nIGFuZCBsZWF2aW5nIGEgbm9kZSBvZlxuICogICAgYSBzcGVjaWZpYyBraW5kLlxuICpcbiAqICAgICB2aXNpdChhc3QsIHtcbiAqICAgICAgIEtpbmQ6IHtcbiAqICAgICAgICAgZW50ZXIobm9kZSkge1xuICogICAgICAgICAgIC8vIGVudGVyIHRoZSBcIktpbmRcIiBub2RlXG4gKiAgICAgICAgIH1cbiAqICAgICAgICAgbGVhdmUobm9kZSkge1xuICogICAgICAgICAgIC8vIGxlYXZlIHRoZSBcIktpbmRcIiBub2RlXG4gKiAgICAgICAgIH1cbiAqICAgICAgIH1cbiAqICAgICB9KVxuICpcbiAqIDMpIEdlbmVyaWMgdmlzaXRvcnMgdGhhdCB0cmlnZ2VyIHVwb24gZW50ZXJpbmcgYW5kIGxlYXZpbmcgYW55IG5vZGUuXG4gKlxuICogICAgIHZpc2l0KGFzdCwge1xuICogICAgICAgZW50ZXIobm9kZSkge1xuICogICAgICAgICAvLyBlbnRlciBhbnkgbm9kZVxuICogICAgICAgfSxcbiAqICAgICAgIGxlYXZlKG5vZGUpIHtcbiAqICAgICAgICAgLy8gbGVhdmUgYW55IG5vZGVcbiAqICAgICAgIH1cbiAqICAgICB9KVxuICpcbiAqIDQpIFBhcmFsbGVsIHZpc2l0b3JzIGZvciBlbnRlcmluZyBhbmQgbGVhdmluZyBub2RlcyBvZiBhIHNwZWNpZmljIGtpbmQuXG4gKlxuICogICAgIHZpc2l0KGFzdCwge1xuICogICAgICAgZW50ZXI6IHtcbiAqICAgICAgICAgS2luZChub2RlKSB7XG4gKiAgICAgICAgICAgLy8gZW50ZXIgdGhlIFwiS2luZFwiIG5vZGVcbiAqICAgICAgICAgfVxuICogICAgICAgfSxcbiAqICAgICAgIGxlYXZlOiB7XG4gKiAgICAgICAgIEtpbmQobm9kZSkge1xuICogICAgICAgICAgIC8vIGxlYXZlIHRoZSBcIktpbmRcIiBub2RlXG4gKiAgICAgICAgIH1cbiAqICAgICAgIH1cbiAqICAgICB9KVxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB2aXNpdChyb290LCB2aXNpdG9yKSB7XG4gIHZhciB2aXNpdG9yS2V5cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogUXVlcnlEb2N1bWVudEtleXM7XG5cbiAgLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZWYtaW5pdCAqL1xuICB2YXIgc3RhY2sgPSB1bmRlZmluZWQ7XG4gIHZhciBpbkFycmF5ID0gQXJyYXkuaXNBcnJheShyb290KTtcbiAgdmFyIGtleXMgPSBbcm9vdF07XG4gIHZhciBpbmRleCA9IC0xO1xuICB2YXIgZWRpdHMgPSBbXTtcbiAgdmFyIG5vZGUgPSB1bmRlZmluZWQ7XG4gIHZhciBrZXkgPSB1bmRlZmluZWQ7XG4gIHZhciBwYXJlbnQgPSB1bmRlZmluZWQ7XG4gIHZhciBwYXRoID0gW107XG4gIHZhciBhbmNlc3RvcnMgPSBbXTtcbiAgdmFyIG5ld1Jvb3QgPSByb290O1xuICAvKiBlc2xpbnQtZW5hYmxlIG5vLXVuZGVmLWluaXQgKi9cblxuICBkbyB7XG4gICAgaW5kZXgrKztcbiAgICB2YXIgaXNMZWF2aW5nID0gaW5kZXggPT09IGtleXMubGVuZ3RoO1xuICAgIHZhciBpc0VkaXRlZCA9IGlzTGVhdmluZyAmJiBlZGl0cy5sZW5ndGggIT09IDA7XG5cbiAgICBpZiAoaXNMZWF2aW5nKSB7XG4gICAgICBrZXkgPSBhbmNlc3RvcnMubGVuZ3RoID09PSAwID8gdW5kZWZpbmVkIDogcGF0aFtwYXRoLmxlbmd0aCAtIDFdO1xuICAgICAgbm9kZSA9IHBhcmVudDtcbiAgICAgIHBhcmVudCA9IGFuY2VzdG9ycy5wb3AoKTtcblxuICAgICAgaWYgKGlzRWRpdGVkKSB7XG4gICAgICAgIGlmIChpbkFycmF5KSB7XG4gICAgICAgICAgbm9kZSA9IG5vZGUuc2xpY2UoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgY2xvbmUgPSB7fTtcblxuICAgICAgICAgIGZvciAodmFyIF9pMiA9IDAsIF9PYmplY3Qka2V5czIgPSBPYmplY3Qua2V5cyhub2RlKTsgX2kyIDwgX09iamVjdCRrZXlzMi5sZW5ndGg7IF9pMisrKSB7XG4gICAgICAgICAgICB2YXIgayA9IF9PYmplY3Qka2V5czJbX2kyXTtcbiAgICAgICAgICAgIGNsb25lW2tdID0gbm9kZVtrXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBub2RlID0gY2xvbmU7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZWRpdE9mZnNldCA9IDA7XG5cbiAgICAgICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IGVkaXRzLmxlbmd0aDsgaWkrKykge1xuICAgICAgICAgIHZhciBlZGl0S2V5ID0gZWRpdHNbaWldWzBdO1xuICAgICAgICAgIHZhciBlZGl0VmFsdWUgPSBlZGl0c1tpaV1bMV07XG5cbiAgICAgICAgICBpZiAoaW5BcnJheSkge1xuICAgICAgICAgICAgZWRpdEtleSAtPSBlZGl0T2Zmc2V0O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChpbkFycmF5ICYmIGVkaXRWYWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgbm9kZS5zcGxpY2UoZWRpdEtleSwgMSk7XG4gICAgICAgICAgICBlZGl0T2Zmc2V0Kys7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5vZGVbZWRpdEtleV0gPSBlZGl0VmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGluZGV4ID0gc3RhY2suaW5kZXg7XG4gICAgICBrZXlzID0gc3RhY2sua2V5cztcbiAgICAgIGVkaXRzID0gc3RhY2suZWRpdHM7XG4gICAgICBpbkFycmF5ID0gc3RhY2suaW5BcnJheTtcbiAgICAgIHN0YWNrID0gc3RhY2sucHJldjtcbiAgICB9IGVsc2Uge1xuICAgICAga2V5ID0gcGFyZW50ID8gaW5BcnJheSA/IGluZGV4IDoga2V5c1tpbmRleF0gOiB1bmRlZmluZWQ7XG4gICAgICBub2RlID0gcGFyZW50ID8gcGFyZW50W2tleV0gOiBuZXdSb290O1xuXG4gICAgICBpZiAobm9kZSA9PT0gbnVsbCB8fCBub2RlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgcGF0aC5wdXNoKGtleSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHJlc3VsdCA9IHZvaWQgMDtcblxuICAgIGlmICghQXJyYXkuaXNBcnJheShub2RlKSkge1xuICAgICAgaWYgKCFpc05vZGUobm9kZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBBU1QgTm9kZTogXCIuY29uY2F0KGluc3BlY3Qobm9kZSksIFwiLlwiKSk7XG4gICAgICB9XG5cbiAgICAgIHZhciB2aXNpdEZuID0gZ2V0VmlzaXRGbih2aXNpdG9yLCBub2RlLmtpbmQsIGlzTGVhdmluZyk7XG5cbiAgICAgIGlmICh2aXNpdEZuKSB7XG4gICAgICAgIHJlc3VsdCA9IHZpc2l0Rm4uY2FsbCh2aXNpdG9yLCBub2RlLCBrZXksIHBhcmVudCwgcGF0aCwgYW5jZXN0b3JzKTtcblxuICAgICAgICBpZiAocmVzdWx0ID09PSBCUkVBSykge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJlc3VsdCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBpZiAoIWlzTGVhdmluZykge1xuICAgICAgICAgICAgcGF0aC5wb3AoKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChyZXN1bHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGVkaXRzLnB1c2goW2tleSwgcmVzdWx0XSk7XG5cbiAgICAgICAgICBpZiAoIWlzTGVhdmluZykge1xuICAgICAgICAgICAgaWYgKGlzTm9kZShyZXN1bHQpKSB7XG4gICAgICAgICAgICAgIG5vZGUgPSByZXN1bHQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBwYXRoLnBvcCgpO1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQgJiYgaXNFZGl0ZWQpIHtcbiAgICAgIGVkaXRzLnB1c2goW2tleSwgbm9kZV0pO1xuICAgIH1cblxuICAgIGlmIChpc0xlYXZpbmcpIHtcbiAgICAgIHBhdGgucG9wKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBfdmlzaXRvcktleXMkbm9kZSRraW47XG5cbiAgICAgIHN0YWNrID0ge1xuICAgICAgICBpbkFycmF5OiBpbkFycmF5LFxuICAgICAgICBpbmRleDogaW5kZXgsXG4gICAgICAgIGtleXM6IGtleXMsXG4gICAgICAgIGVkaXRzOiBlZGl0cyxcbiAgICAgICAgcHJldjogc3RhY2tcbiAgICAgIH07XG4gICAgICBpbkFycmF5ID0gQXJyYXkuaXNBcnJheShub2RlKTtcbiAgICAgIGtleXMgPSBpbkFycmF5ID8gbm9kZSA6IChfdmlzaXRvcktleXMkbm9kZSRraW4gPSB2aXNpdG9yS2V5c1tub2RlLmtpbmRdKSAhPT0gbnVsbCAmJiBfdmlzaXRvcktleXMkbm9kZSRraW4gIT09IHZvaWQgMCA/IF92aXNpdG9yS2V5cyRub2RlJGtpbiA6IFtdO1xuICAgICAgaW5kZXggPSAtMTtcbiAgICAgIGVkaXRzID0gW107XG5cbiAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgYW5jZXN0b3JzLnB1c2gocGFyZW50KTtcbiAgICAgIH1cblxuICAgICAgcGFyZW50ID0gbm9kZTtcbiAgICB9XG4gIH0gd2hpbGUgKHN0YWNrICE9PSB1bmRlZmluZWQpO1xuXG4gIGlmIChlZGl0cy5sZW5ndGggIT09IDApIHtcbiAgICBuZXdSb290ID0gZWRpdHNbZWRpdHMubGVuZ3RoIC0gMV1bMV07XG4gIH1cblxuICByZXR1cm4gbmV3Um9vdDtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyB2aXNpdG9yIGluc3RhbmNlIHdoaWNoIGRlbGVnYXRlcyB0byBtYW55IHZpc2l0b3JzIHRvIHJ1biBpblxuICogcGFyYWxsZWwuIEVhY2ggdmlzaXRvciB3aWxsIGJlIHZpc2l0ZWQgZm9yIGVhY2ggbm9kZSBiZWZvcmUgbW92aW5nIG9uLlxuICpcbiAqIElmIGEgcHJpb3IgdmlzaXRvciBlZGl0cyBhIG5vZGUsIG5vIGZvbGxvd2luZyB2aXNpdG9ycyB3aWxsIHNlZSB0aGF0IG5vZGUuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHZpc2l0SW5QYXJhbGxlbCh2aXNpdG9ycykge1xuICB2YXIgc2tpcHBpbmcgPSBuZXcgQXJyYXkodmlzaXRvcnMubGVuZ3RoKTtcbiAgcmV0dXJuIHtcbiAgICBlbnRlcjogZnVuY3Rpb24gZW50ZXIobm9kZSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2aXNpdG9ycy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoc2tpcHBpbmdbaV0gPT0gbnVsbCkge1xuICAgICAgICAgIHZhciBmbiA9IGdldFZpc2l0Rm4odmlzaXRvcnNbaV0sIG5vZGUua2luZCxcbiAgICAgICAgICAvKiBpc0xlYXZpbmcgKi9cbiAgICAgICAgICBmYWxzZSk7XG5cbiAgICAgICAgICBpZiAoZm4pIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBmbi5hcHBseSh2aXNpdG9yc1tpXSwgYXJndW1lbnRzKTtcblxuICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgc2tpcHBpbmdbaV0gPSBub2RlO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChyZXN1bHQgPT09IEJSRUFLKSB7XG4gICAgICAgICAgICAgIHNraXBwaW5nW2ldID0gQlJFQUs7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBsZWF2ZTogZnVuY3Rpb24gbGVhdmUobm9kZSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2aXNpdG9ycy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoc2tpcHBpbmdbaV0gPT0gbnVsbCkge1xuICAgICAgICAgIHZhciBmbiA9IGdldFZpc2l0Rm4odmlzaXRvcnNbaV0sIG5vZGUua2luZCxcbiAgICAgICAgICAvKiBpc0xlYXZpbmcgKi9cbiAgICAgICAgICB0cnVlKTtcblxuICAgICAgICAgIGlmIChmbikge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGZuLmFwcGx5KHZpc2l0b3JzW2ldLCBhcmd1bWVudHMpO1xuXG4gICAgICAgICAgICBpZiAocmVzdWx0ID09PSBCUkVBSykge1xuICAgICAgICAgICAgICBza2lwcGluZ1tpXSA9IEJSRUFLO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChyZXN1bHQgIT09IHVuZGVmaW5lZCAmJiByZXN1bHQgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHNraXBwaW5nW2ldID09PSBub2RlKSB7XG4gICAgICAgICAgc2tpcHBpbmdbaV0gPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuLyoqXG4gKiBHaXZlbiBhIHZpc2l0b3IgaW5zdGFuY2UsIGlmIGl0IGlzIGxlYXZpbmcgb3Igbm90LCBhbmQgYSBub2RlIGtpbmQsIHJldHVyblxuICogdGhlIGZ1bmN0aW9uIHRoZSB2aXNpdG9yIHJ1bnRpbWUgc2hvdWxkIGNhbGwuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFZpc2l0Rm4odmlzaXRvciwga2luZCwgaXNMZWF2aW5nKSB7XG4gIHZhciBraW5kVmlzaXRvciA9IHZpc2l0b3Jba2luZF07XG5cbiAgaWYgKGtpbmRWaXNpdG9yKSB7XG4gICAgaWYgKCFpc0xlYXZpbmcgJiYgdHlwZW9mIGtpbmRWaXNpdG9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAvLyB7IEtpbmQoKSB7fSB9XG4gICAgICByZXR1cm4ga2luZFZpc2l0b3I7XG4gICAgfVxuXG4gICAgdmFyIGtpbmRTcGVjaWZpY1Zpc2l0b3IgPSBpc0xlYXZpbmcgPyBraW5kVmlzaXRvci5sZWF2ZSA6IGtpbmRWaXNpdG9yLmVudGVyO1xuXG4gICAgaWYgKHR5cGVvZiBraW5kU3BlY2lmaWNWaXNpdG9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAvLyB7IEtpbmQ6IHsgZW50ZXIoKSB7fSwgbGVhdmUoKSB7fSB9IH1cbiAgICAgIHJldHVybiBraW5kU3BlY2lmaWNWaXNpdG9yO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgc3BlY2lmaWNWaXNpdG9yID0gaXNMZWF2aW5nID8gdmlzaXRvci5sZWF2ZSA6IHZpc2l0b3IuZW50ZXI7XG5cbiAgICBpZiAoc3BlY2lmaWNWaXNpdG9yKSB7XG4gICAgICBpZiAodHlwZW9mIHNwZWNpZmljVmlzaXRvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAvLyB7IGVudGVyKCkge30sIGxlYXZlKCkge30gfVxuICAgICAgICByZXR1cm4gc3BlY2lmaWNWaXNpdG9yO1xuICAgICAgfVxuXG4gICAgICB2YXIgc3BlY2lmaWNLaW5kVmlzaXRvciA9IHNwZWNpZmljVmlzaXRvcltraW5kXTtcblxuICAgICAgaWYgKHR5cGVvZiBzcGVjaWZpY0tpbmRWaXNpdG9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vIHsgZW50ZXI6IHsgS2luZCgpIHt9IH0sIGxlYXZlOiB7IEtpbmQoKSB7fSB9IH1cbiAgICAgICAgcmV0dXJuIHNwZWNpZmljS2luZFZpc2l0b3I7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBTWU1CT0xfSVRFUkFUT1IgfSBmcm9tIFwiLi9zeW1ib2xzLm1qc1wiO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1yZWRlY2xhcmUgKi9cbi8vICRGbG93Rml4TWVbbmFtZS1hbHJlYWR5LWJvdW5kXVxudmFyIGFycmF5RnJvbSA9IEFycmF5LmZyb20gfHwgZnVuY3Rpb24gKG9iaiwgbWFwRm4sIHRoaXNBcmcpIHtcbiAgaWYgKG9iaiA9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJyYXkuZnJvbSByZXF1aXJlcyBhbiBhcnJheS1saWtlIG9iamVjdCAtIG5vdCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuICB9IC8vIElzIEl0ZXJhYmxlP1xuXG5cbiAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gb2JqW1NZTUJPTF9JVEVSQVRPUl07XG5cbiAgaWYgKHR5cGVvZiBpdGVyYXRvck1ldGhvZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhdG9yTWV0aG9kLmNhbGwob2JqKTtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIHN0ZXA7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyArK2kpIHtcbiAgICAgIHJlc3VsdC5wdXNoKG1hcEZuLmNhbGwodGhpc0FyZywgc3RlcC52YWx1ZSwgaSkpOyAvLyBJbmZpbml0ZSBJdGVyYXRvcnMgY291bGQgY2F1c2UgZm9yRWFjaCB0byBydW4gZm9yZXZlci5cbiAgICAgIC8vIEFmdGVyIGEgdmVyeSBsYXJnZSBudW1iZXIgb2YgaXRlcmF0aW9ucywgcHJvZHVjZSBhbiBlcnJvci5cbiAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBpZiAoVG9vIGJpZyB0byBhY3R1YWxseSB0ZXN0KVxuXG4gICAgICBpZiAoaSA+IDk5OTk5OTkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignTmVhci1pbmZpbml0ZSBpdGVyYXRpb24uJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSAvLyBJcyBBcnJheSBsaWtlP1xuXG5cbiAgdmFyIGxlbmd0aCA9IG9iai5sZW5ndGg7XG5cbiAgaWYgKHR5cGVvZiBsZW5ndGggPT09ICdudW1iZXInICYmIGxlbmd0aCA+PSAwICYmIGxlbmd0aCAlIDEgPT09IDApIHtcbiAgICB2YXIgX3Jlc3VsdCA9IFtdO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxlbmd0aDsgKytfaSkge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIF9pKSkge1xuICAgICAgICBfcmVzdWx0LnB1c2gobWFwRm4uY2FsbCh0aGlzQXJnLCBvYmpbX2ldLCBfaSkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBfcmVzdWx0O1xuICB9XG5cbiAgcmV0dXJuIFtdO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgYXJyYXlGcm9tO1xuIiwiLyogZXNsaW50LWRpc2FibGUgbm8tcmVkZWNsYXJlICovXG4vLyAkRmxvd0ZpeE1lW25hbWUtYWxyZWFkeS1ib3VuZF1cbnZhciBmaW5kID0gQXJyYXkucHJvdG90eXBlLmZpbmQgPyBmdW5jdGlvbiAobGlzdCwgcHJlZGljYXRlKSB7XG4gIHJldHVybiBBcnJheS5wcm90b3R5cGUuZmluZC5jYWxsKGxpc3QsIHByZWRpY2F0ZSk7XG59IDogZnVuY3Rpb24gKGxpc3QsIHByZWRpY2F0ZSkge1xuICBmb3IgKHZhciBfaTIgPSAwOyBfaTIgPCBsaXN0Lmxlbmd0aDsgX2kyKyspIHtcbiAgICB2YXIgdmFsdWUgPSBsaXN0W19pMl07XG5cbiAgICBpZiAocHJlZGljYXRlKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGZpbmQ7XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBuby1yZWRlY2xhcmUgKi9cbi8vICRGbG93Rml4TWVbbmFtZS1hbHJlYWR5LWJvdW5kXSB3b3JrYXJvdW5kIGZvcjogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2Zsb3cvaXNzdWVzLzQ0NDFcbnZhciBpc0Zpbml0ZVBvbHlmaWxsID0gTnVtYmVyLmlzRmluaXRlIHx8IGZ1bmN0aW9uICh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiBpc0Zpbml0ZSh2YWx1ZSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBpc0Zpbml0ZVBvbHlmaWxsO1xuIiwiLyogZXNsaW50LWRpc2FibGUgbm8tcmVkZWNsYXJlICovXG4vLyAkRmxvd0ZpeE1lW25hbWUtYWxyZWFkeS1ib3VuZF0gd29ya2Fyb3VuZCBmb3I6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mbG93L2lzc3Vlcy80NDQxXG52YXIgaXNJbnRlZ2VyID0gTnVtYmVyLmlzSW50ZWdlciB8fCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgaXNGaW5pdGUodmFsdWUpICYmIE1hdGguZmxvb3IodmFsdWUpID09PSB2YWx1ZTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGlzSW50ZWdlcjtcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXJlZGVjbGFyZSAqL1xuLy8gJEZsb3dGaXhNZVtuYW1lLWFscmVhZHktYm91bmRdIHdvcmthcm91bmQgZm9yOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmxvdy9pc3N1ZXMvNDQ0MVxudmFyIG9iamVjdEVudHJpZXMgPSBPYmplY3QuZW50cmllcyB8fCBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhvYmopLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIFtrZXksIG9ialtrZXldXTtcbiAgfSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBvYmplY3RFbnRyaWVzO1xuIiwiLyogZXNsaW50LWRpc2FibGUgbm8tcmVkZWNsYXJlICovXG4vLyAkRmxvd0ZpeE1lW25hbWUtYWxyZWFkeS1ib3VuZF0gd29ya2Fyb3VuZCBmb3I6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mbG93L2lzc3Vlcy80NDQxXG52YXIgb2JqZWN0VmFsdWVzID0gT2JqZWN0LnZhbHVlcyB8fCBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhvYmopLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIG9ialtrZXldO1xuICB9KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IG9iamVjdFZhbHVlcztcbiIsIi8vIEluIEVTMjAxNSAob3IgYSBwb2x5ZmlsbGVkKSBlbnZpcm9ubWVudCwgdGhpcyB3aWxsIGJlIFN5bWJvbC5pdGVyYXRvclxuLy8gaXN0YW5idWwgaWdub3JlIG5leHQgKFNlZTogJ2h0dHBzOi8vZ2l0aHViLmNvbS9ncmFwaHFsL2dyYXBocWwtanMvaXNzdWVzLzIzMTcnKVxuZXhwb3J0IHZhciBTWU1CT0xfSVRFUkFUT1IgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5pdGVyYXRvciAhPSBudWxsID8gU3ltYm9sLml0ZXJhdG9yIDogJ0BAaXRlcmF0b3InOyAvLyBJbiBFUzIwMTcgKG9yIGEgcG9seWZpbGxlZCkgZW52aXJvbm1lbnQsIHRoaXMgd2lsbCBiZSBTeW1ib2wuYXN5bmNJdGVyYXRvclxuLy8gaXN0YW5idWwgaWdub3JlIG5leHQgKFNlZTogJ2h0dHBzOi8vZ2l0aHViLmNvbS9ncmFwaHFsL2dyYXBocWwtanMvaXNzdWVzLzIzMTcnKVxuXG5leHBvcnQgdmFyIFNZTUJPTF9BU1lOQ19JVEVSQVRPUiA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLmFzeW5jSXRlcmF0b3IgIT0gbnVsbCA/IFN5bWJvbC5hc3luY0l0ZXJhdG9yIDogJ0BAYXN5bmNJdGVyYXRvcic7IC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0IChTZWU6ICdodHRwczovL2dpdGh1Yi5jb20vZ3JhcGhxbC9ncmFwaHFsLWpzL2lzc3Vlcy8yMzE3JylcblxuZXhwb3J0IHZhciBTWU1CT0xfVE9fU1RSSU5HX1RBRyA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLnRvU3RyaW5nVGFnICE9IG51bGwgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiAnQEB0b1N0cmluZ1RhZyc7XG4iLCJmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5pbXBvcnQgeyBTWU1CT0xfQVNZTkNfSVRFUkFUT1IgfSBmcm9tIFwiLi4vcG9seWZpbGxzL3N5bWJvbHMubWpzXCI7XG5cbi8qKlxuICogR2l2ZW4gYW4gQXN5bmNJdGVyYWJsZSBhbmQgYSBjYWxsYmFjayBmdW5jdGlvbiwgcmV0dXJuIGFuIEFzeW5jSXRlcmF0b3JcbiAqIHdoaWNoIHByb2R1Y2VzIHZhbHVlcyBtYXBwZWQgdmlhIGNhbGxpbmcgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtYXBBc3luY0l0ZXJhdG9yKGl0ZXJhYmxlLCBjYWxsYmFjaywgcmVqZWN0Q2FsbGJhY2spIHtcbiAgLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG4gIHZhciBpdGVyYXRvck1ldGhvZCA9IGl0ZXJhYmxlW1NZTUJPTF9BU1lOQ19JVEVSQVRPUl07XG4gIHZhciBpdGVyYXRvciA9IGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICB2YXIgJHJldHVybjtcbiAgdmFyIGFicnVwdENsb3NlO1xuXG4gIGlmICh0eXBlb2YgaXRlcmF0b3IucmV0dXJuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgJHJldHVybiA9IGl0ZXJhdG9yLnJldHVybjtcblxuICAgIGFicnVwdENsb3NlID0gZnVuY3Rpb24gYWJydXB0Q2xvc2UoZXJyb3IpIHtcbiAgICAgIHZhciByZXRocm93ID0gZnVuY3Rpb24gcmV0aHJvdygpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiAkcmV0dXJuLmNhbGwoaXRlcmF0b3IpLnRoZW4ocmV0aHJvdywgcmV0aHJvdyk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1hcFJlc3VsdChyZXN1bHQpIHtcbiAgICByZXR1cm4gcmVzdWx0LmRvbmUgPyByZXN1bHQgOiBhc3luY01hcFZhbHVlKHJlc3VsdC52YWx1ZSwgY2FsbGJhY2spLnRoZW4oaXRlcmF0b3JSZXN1bHQsIGFicnVwdENsb3NlKTtcbiAgfVxuXG4gIHZhciBtYXBSZWplY3Q7XG5cbiAgaWYgKHJlamVjdENhbGxiYWNrKSB7XG4gICAgLy8gQ2FwdHVyZSByZWplY3RDYWxsYmFjayB0byBlbnN1cmUgaXQgY2Fubm90IGJlIG51bGwuXG4gICAgdmFyIHJlamVjdCA9IHJlamVjdENhbGxiYWNrO1xuXG4gICAgbWFwUmVqZWN0ID0gZnVuY3Rpb24gbWFwUmVqZWN0KGVycm9yKSB7XG4gICAgICByZXR1cm4gYXN5bmNNYXBWYWx1ZShlcnJvciwgcmVqZWN0KS50aGVuKGl0ZXJhdG9yUmVzdWx0LCBhYnJ1cHRDbG9zZSk7XG4gICAgfTtcbiAgfVxuICAvKiBUT0RPOiBGbG93IGRvZXNuJ3Qgc3VwcG9ydCBzeW1ib2xzIGFzIGtleXM6XG4gICAgIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mbG93L2lzc3Vlcy8zMjU4ICovXG5cblxuICByZXR1cm4gX2RlZmluZVByb3BlcnR5KHtcbiAgICBuZXh0OiBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgcmV0dXJuIGl0ZXJhdG9yLm5leHQoKS50aGVuKG1hcFJlc3VsdCwgbWFwUmVqZWN0KTtcbiAgICB9LFxuICAgIHJldHVybjogZnVuY3Rpb24gX3JldHVybigpIHtcbiAgICAgIHJldHVybiAkcmV0dXJuID8gJHJldHVybi5jYWxsKGl0ZXJhdG9yKS50aGVuKG1hcFJlc3VsdCwgbWFwUmVqZWN0KSA6IFByb21pc2UucmVzb2x2ZSh7XG4gICAgICAgIHZhbHVlOiB1bmRlZmluZWQsXG4gICAgICAgIGRvbmU6IHRydWVcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgdGhyb3c6IGZ1bmN0aW9uIF90aHJvdyhlcnJvcikge1xuICAgICAgaWYgKHR5cGVvZiBpdGVyYXRvci50aHJvdyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3IudGhyb3coZXJyb3IpLnRoZW4obWFwUmVzdWx0LCBtYXBSZWplY3QpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpLmNhdGNoKGFicnVwdENsb3NlKTtcbiAgICB9XG4gIH0sIFNZTUJPTF9BU1lOQ19JVEVSQVRPUiwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gYXN5bmNNYXBWYWx1ZSh2YWx1ZSwgY2FsbGJhY2spIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgcmV0dXJuIHJlc29sdmUoY2FsbGJhY2sodmFsdWUpKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGl0ZXJhdG9yUmVzdWx0KHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgdmFsdWU6IHZhbHVlLFxuICAgIGRvbmU6IGZhbHNlXG4gIH07XG59XG4iLCJpbXBvcnQgaW5zcGVjdCBmcm9tIFwiLi4vanN1dGlscy9pbnNwZWN0Lm1qc1wiO1xuaW1wb3J0IGlzQXN5bmNJdGVyYWJsZSBmcm9tIFwiLi4vanN1dGlscy9pc0FzeW5jSXRlcmFibGUubWpzXCI7XG5pbXBvcnQgeyBhZGRQYXRoLCBwYXRoVG9BcnJheSB9IGZyb20gXCIuLi9qc3V0aWxzL1BhdGgubWpzXCI7XG5pbXBvcnQgeyBHcmFwaFFMRXJyb3IgfSBmcm9tIFwiLi4vZXJyb3IvR3JhcGhRTEVycm9yLm1qc1wiO1xuaW1wb3J0IHsgbG9jYXRlZEVycm9yIH0gZnJvbSBcIi4uL2Vycm9yL2xvY2F0ZWRFcnJvci5tanNcIjtcbmltcG9ydCB7IGdldEFyZ3VtZW50VmFsdWVzIH0gZnJvbSBcIi4uL2V4ZWN1dGlvbi92YWx1ZXMubWpzXCI7XG5pbXBvcnQgeyBhc3NlcnRWYWxpZEV4ZWN1dGlvbkFyZ3VtZW50cywgYnVpbGRFeGVjdXRpb25Db250ZXh0LCBidWlsZFJlc29sdmVJbmZvLCBjb2xsZWN0RmllbGRzLCBleGVjdXRlLCBnZXRGaWVsZERlZiB9IGZyb20gXCIuLi9leGVjdXRpb24vZXhlY3V0ZS5tanNcIjtcbmltcG9ydCB7IGdldE9wZXJhdGlvblJvb3RUeXBlIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9nZXRPcGVyYXRpb25Sb290VHlwZS5tanNcIjtcbmltcG9ydCBtYXBBc3luY0l0ZXJhdG9yIGZyb20gXCIuL21hcEFzeW5jSXRlcmF0b3IubWpzXCI7XG5leHBvcnQgZnVuY3Rpb24gc3Vic2NyaWJlKGFyZ3NPclNjaGVtYSwgZG9jdW1lbnQsIHJvb3RWYWx1ZSwgY29udGV4dFZhbHVlLCB2YXJpYWJsZVZhbHVlcywgb3BlcmF0aW9uTmFtZSwgZmllbGRSZXNvbHZlciwgc3Vic2NyaWJlRmllbGRSZXNvbHZlcikge1xuICAvKiBlc2xpbnQtZW5hYmxlIG5vLXJlZGVjbGFyZSAqL1xuICAvLyBFeHRyYWN0IGFyZ3VtZW50cyBmcm9tIG9iamVjdCBhcmdzIGlmIHByb3ZpZGVkLlxuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IHN1YnNjcmliZUltcGwoYXJnc09yU2NoZW1hKSA6IHN1YnNjcmliZUltcGwoe1xuICAgIHNjaGVtYTogYXJnc09yU2NoZW1hLFxuICAgIGRvY3VtZW50OiBkb2N1bWVudCxcbiAgICByb290VmFsdWU6IHJvb3RWYWx1ZSxcbiAgICBjb250ZXh0VmFsdWU6IGNvbnRleHRWYWx1ZSxcbiAgICB2YXJpYWJsZVZhbHVlczogdmFyaWFibGVWYWx1ZXMsXG4gICAgb3BlcmF0aW9uTmFtZTogb3BlcmF0aW9uTmFtZSxcbiAgICBmaWVsZFJlc29sdmVyOiBmaWVsZFJlc29sdmVyLFxuICAgIHN1YnNjcmliZUZpZWxkUmVzb2x2ZXI6IHN1YnNjcmliZUZpZWxkUmVzb2x2ZXJcbiAgfSk7XG59XG4vKipcbiAqIFRoaXMgZnVuY3Rpb24gY2hlY2tzIGlmIHRoZSBlcnJvciBpcyBhIEdyYXBoUUxFcnJvci4gSWYgaXQgaXMsIHJlcG9ydCBpdCBhc1xuICogYW4gRXhlY3V0aW9uUmVzdWx0LCBjb250YWluaW5nIG9ubHkgZXJyb3JzIGFuZCBubyBkYXRhLiBPdGhlcndpc2UgdHJlYXQgdGhlXG4gKiBlcnJvciBhcyBhIHN5c3RlbS1jbGFzcyBlcnJvciBhbmQgcmUtdGhyb3cgaXQuXG4gKi9cblxuZnVuY3Rpb24gcmVwb3J0R3JhcGhRTEVycm9yKGVycm9yKSB7XG4gIGlmIChlcnJvciBpbnN0YW5jZW9mIEdyYXBoUUxFcnJvcikge1xuICAgIHJldHVybiB7XG4gICAgICBlcnJvcnM6IFtlcnJvcl1cbiAgICB9O1xuICB9XG5cbiAgdGhyb3cgZXJyb3I7XG59XG5cbmZ1bmN0aW9uIHN1YnNjcmliZUltcGwoYXJncykge1xuICB2YXIgc2NoZW1hID0gYXJncy5zY2hlbWEsXG4gICAgICBkb2N1bWVudCA9IGFyZ3MuZG9jdW1lbnQsXG4gICAgICByb290VmFsdWUgPSBhcmdzLnJvb3RWYWx1ZSxcbiAgICAgIGNvbnRleHRWYWx1ZSA9IGFyZ3MuY29udGV4dFZhbHVlLFxuICAgICAgdmFyaWFibGVWYWx1ZXMgPSBhcmdzLnZhcmlhYmxlVmFsdWVzLFxuICAgICAgb3BlcmF0aW9uTmFtZSA9IGFyZ3Mub3BlcmF0aW9uTmFtZSxcbiAgICAgIGZpZWxkUmVzb2x2ZXIgPSBhcmdzLmZpZWxkUmVzb2x2ZXIsXG4gICAgICBzdWJzY3JpYmVGaWVsZFJlc29sdmVyID0gYXJncy5zdWJzY3JpYmVGaWVsZFJlc29sdmVyO1xuICB2YXIgc291cmNlUHJvbWlzZSA9IGNyZWF0ZVNvdXJjZUV2ZW50U3RyZWFtKHNjaGVtYSwgZG9jdW1lbnQsIHJvb3RWYWx1ZSwgY29udGV4dFZhbHVlLCB2YXJpYWJsZVZhbHVlcywgb3BlcmF0aW9uTmFtZSwgc3Vic2NyaWJlRmllbGRSZXNvbHZlcik7IC8vIEZvciBlYWNoIHBheWxvYWQgeWllbGRlZCBmcm9tIGEgc3Vic2NyaXB0aW9uLCBtYXAgaXQgb3ZlciB0aGUgbm9ybWFsXG4gIC8vIEdyYXBoUUwgYGV4ZWN1dGVgIGZ1bmN0aW9uLCB3aXRoIGBwYXlsb2FkYCBhcyB0aGUgcm9vdFZhbHVlLlxuICAvLyBUaGlzIGltcGxlbWVudHMgdGhlIFwiTWFwU291cmNlVG9SZXNwb25zZUV2ZW50XCIgYWxnb3JpdGhtIGRlc2NyaWJlZCBpblxuICAvLyB0aGUgR3JhcGhRTCBzcGVjaWZpY2F0aW9uLiBUaGUgYGV4ZWN1dGVgIGZ1bmN0aW9uIHByb3ZpZGVzIHRoZVxuICAvLyBcIkV4ZWN1dGVTdWJzY3JpcHRpb25FdmVudFwiIGFsZ29yaXRobSwgYXMgaXQgaXMgbmVhcmx5IGlkZW50aWNhbCB0byB0aGVcbiAgLy8gXCJFeGVjdXRlUXVlcnlcIiBhbGdvcml0aG0sIGZvciB3aGljaCBgZXhlY3V0ZWAgaXMgYWxzbyB1c2VkLlxuXG4gIHZhciBtYXBTb3VyY2VUb1Jlc3BvbnNlID0gZnVuY3Rpb24gbWFwU291cmNlVG9SZXNwb25zZShwYXlsb2FkKSB7XG4gICAgcmV0dXJuIGV4ZWN1dGUoe1xuICAgICAgc2NoZW1hOiBzY2hlbWEsXG4gICAgICBkb2N1bWVudDogZG9jdW1lbnQsXG4gICAgICByb290VmFsdWU6IHBheWxvYWQsXG4gICAgICBjb250ZXh0VmFsdWU6IGNvbnRleHRWYWx1ZSxcbiAgICAgIHZhcmlhYmxlVmFsdWVzOiB2YXJpYWJsZVZhbHVlcyxcbiAgICAgIG9wZXJhdGlvbk5hbWU6IG9wZXJhdGlvbk5hbWUsXG4gICAgICBmaWVsZFJlc29sdmVyOiBmaWVsZFJlc29sdmVyXG4gICAgfSk7XG4gIH07IC8vIFJlc29sdmUgdGhlIFNvdXJjZSBTdHJlYW0sIHRoZW4gbWFwIGV2ZXJ5IHNvdXJjZSB2YWx1ZSB0byBhXG4gIC8vIEV4ZWN1dGlvblJlc3VsdCB2YWx1ZSBhcyBkZXNjcmliZWQgYWJvdmUuXG5cblxuICByZXR1cm4gc291cmNlUHJvbWlzZS50aGVuKGZ1bmN0aW9uIChyZXN1bHRPclN0cmVhbSkge1xuICAgIHJldHVybiAoLy8gTm90ZTogRmxvdyBjYW4ndCByZWZpbmUgaXNBc3luY0l0ZXJhYmxlLCBzbyBleHBsaWNpdCBjYXN0cyBhcmUgdXNlZC5cbiAgICAgIGlzQXN5bmNJdGVyYWJsZShyZXN1bHRPclN0cmVhbSkgPyBtYXBBc3luY0l0ZXJhdG9yKHJlc3VsdE9yU3RyZWFtLCBtYXBTb3VyY2VUb1Jlc3BvbnNlLCByZXBvcnRHcmFwaFFMRXJyb3IpIDogcmVzdWx0T3JTdHJlYW1cbiAgICApO1xuICB9KTtcbn1cbi8qKlxuICogSW1wbGVtZW50cyB0aGUgXCJDcmVhdGVTb3VyY2VFdmVudFN0cmVhbVwiIGFsZ29yaXRobSBkZXNjcmliZWQgaW4gdGhlXG4gKiBHcmFwaFFMIHNwZWNpZmljYXRpb24sIHJlc29sdmluZyB0aGUgc3Vic2NyaXB0aW9uIHNvdXJjZSBldmVudCBzdHJlYW0uXG4gKlxuICogUmV0dXJucyBhIFByb21pc2Ugd2hpY2ggcmVzb2x2ZXMgdG8gZWl0aGVyIGFuIEFzeW5jSXRlcmFibGUgKGlmIHN1Y2Nlc3NmdWwpXG4gKiBvciBhbiBFeGVjdXRpb25SZXN1bHQgKGVycm9yKS4gVGhlIHByb21pc2Ugd2lsbCBiZSByZWplY3RlZCBpZiB0aGUgc2NoZW1hIG9yXG4gKiBvdGhlciBhcmd1bWVudHMgdG8gdGhpcyBmdW5jdGlvbiBhcmUgaW52YWxpZCwgb3IgaWYgdGhlIHJlc29sdmVkIGV2ZW50IHN0cmVhbVxuICogaXMgbm90IGFuIGFzeW5jIGl0ZXJhYmxlLlxuICpcbiAqIElmIHRoZSBjbGllbnQtcHJvdmlkZWQgYXJndW1lbnRzIHRvIHRoaXMgZnVuY3Rpb24gZG8gbm90IHJlc3VsdCBpbiBhXG4gKiBjb21wbGlhbnQgc3Vic2NyaXB0aW9uLCBhIEdyYXBoUUwgUmVzcG9uc2UgKEV4ZWN1dGlvblJlc3VsdCkgd2l0aFxuICogZGVzY3JpcHRpdmUgZXJyb3JzIGFuZCBubyBkYXRhIHdpbGwgYmUgcmV0dXJuZWQuXG4gKlxuICogSWYgdGhlIHRoZSBzb3VyY2Ugc3RyZWFtIGNvdWxkIG5vdCBiZSBjcmVhdGVkIGR1ZSB0byBmYXVsdHkgc3Vic2NyaXB0aW9uXG4gKiByZXNvbHZlciBsb2dpYyBvciB1bmRlcmx5aW5nIHN5c3RlbXMsIHRoZSBwcm9taXNlIHdpbGwgcmVzb2x2ZSB0byBhIHNpbmdsZVxuICogRXhlY3V0aW9uUmVzdWx0IGNvbnRhaW5pbmcgYGVycm9yc2AgYW5kIG5vIGBkYXRhYC5cbiAqXG4gKiBJZiB0aGUgb3BlcmF0aW9uIHN1Y2NlZWRlZCwgdGhlIHByb21pc2UgcmVzb2x2ZXMgdG8gdGhlIEFzeW5jSXRlcmFibGUgZm9yIHRoZVxuICogZXZlbnQgc3RyZWFtIHJldHVybmVkIGJ5IHRoZSByZXNvbHZlci5cbiAqXG4gKiBBIFNvdXJjZSBFdmVudCBTdHJlYW0gcmVwcmVzZW50cyBhIHNlcXVlbmNlIG9mIGV2ZW50cywgZWFjaCBvZiB3aGljaCB0cmlnZ2Vyc1xuICogYSBHcmFwaFFMIGV4ZWN1dGlvbiBmb3IgdGhhdCBldmVudC5cbiAqXG4gKiBUaGlzIG1heSBiZSB1c2VmdWwgd2hlbiBob3N0aW5nIHRoZSBzdGF0ZWZ1bCBzdWJzY3JpcHRpb24gc2VydmljZSBpbiBhXG4gKiBkaWZmZXJlbnQgcHJvY2VzcyBvciBtYWNoaW5lIHRoYW4gdGhlIHN0YXRlbGVzcyBHcmFwaFFMIGV4ZWN1dGlvbiBlbmdpbmUsXG4gKiBvciBvdGhlcndpc2Ugc2VwYXJhdGluZyB0aGVzZSB0d28gc3RlcHMuIEZvciBtb3JlIG9uIHRoaXMsIHNlZSB0aGVcbiAqIFwiU3VwcG9ydGluZyBTdWJzY3JpcHRpb25zIGF0IFNjYWxlXCIgaW5mb3JtYXRpb24gaW4gdGhlIEdyYXBoUUwgc3BlY2lmaWNhdGlvbi5cbiAqL1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTb3VyY2VFdmVudFN0cmVhbShzY2hlbWEsIGRvY3VtZW50LCByb290VmFsdWUsIGNvbnRleHRWYWx1ZSwgdmFyaWFibGVWYWx1ZXMsIG9wZXJhdGlvbk5hbWUsIGZpZWxkUmVzb2x2ZXIpIHtcbiAgLy8gSWYgYXJndW1lbnRzIGFyZSBtaXNzaW5nIG9yIGluY29ycmVjdGx5IHR5cGVkLCB0aGlzIGlzIGFuIGludGVybmFsXG4gIC8vIGRldmVsb3BlciBtaXN0YWtlIHdoaWNoIHNob3VsZCB0aHJvdyBhbiBlYXJseSBlcnJvci5cbiAgYXNzZXJ0VmFsaWRFeGVjdXRpb25Bcmd1bWVudHMoc2NoZW1hLCBkb2N1bWVudCwgdmFyaWFibGVWYWx1ZXMpO1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAvLyBJZiBhIHZhbGlkIGNvbnRleHQgY2Fubm90IGJlIGNyZWF0ZWQgZHVlIHRvIGluY29ycmVjdCBhcmd1bWVudHMsXG4gICAgLy8gdGhpcyB3aWxsIHRocm93IGFuIGVycm9yLlxuICAgIHZhciBleGVDb250ZXh0ID0gYnVpbGRFeGVjdXRpb25Db250ZXh0KHNjaGVtYSwgZG9jdW1lbnQsIHJvb3RWYWx1ZSwgY29udGV4dFZhbHVlLCB2YXJpYWJsZVZhbHVlcywgb3BlcmF0aW9uTmFtZSwgZmllbGRSZXNvbHZlcik7XG4gICAgcmVzb2x2ZSggLy8gUmV0dXJuIGVhcmx5IGVycm9ycyBpZiBleGVjdXRpb24gY29udGV4dCBmYWlsZWQuXG4gICAgQXJyYXkuaXNBcnJheShleGVDb250ZXh0KSA/IHtcbiAgICAgIGVycm9yczogZXhlQ29udGV4dFxuICAgIH0gOiBleGVjdXRlU3Vic2NyaXB0aW9uKGV4ZUNvbnRleHQpKTtcbiAgfSkuY2F0Y2gocmVwb3J0R3JhcGhRTEVycm9yKTtcbn1cblxuZnVuY3Rpb24gZXhlY3V0ZVN1YnNjcmlwdGlvbihleGVDb250ZXh0KSB7XG4gIHZhciBzY2hlbWEgPSBleGVDb250ZXh0LnNjaGVtYSxcbiAgICAgIG9wZXJhdGlvbiA9IGV4ZUNvbnRleHQub3BlcmF0aW9uLFxuICAgICAgdmFyaWFibGVWYWx1ZXMgPSBleGVDb250ZXh0LnZhcmlhYmxlVmFsdWVzLFxuICAgICAgcm9vdFZhbHVlID0gZXhlQ29udGV4dC5yb290VmFsdWU7XG4gIHZhciB0eXBlID0gZ2V0T3BlcmF0aW9uUm9vdFR5cGUoc2NoZW1hLCBvcGVyYXRpb24pO1xuICB2YXIgZmllbGRzID0gY29sbGVjdEZpZWxkcyhleGVDb250ZXh0LCB0eXBlLCBvcGVyYXRpb24uc2VsZWN0aW9uU2V0LCBPYmplY3QuY3JlYXRlKG51bGwpLCBPYmplY3QuY3JlYXRlKG51bGwpKTtcbiAgdmFyIHJlc3BvbnNlTmFtZXMgPSBPYmplY3Qua2V5cyhmaWVsZHMpO1xuICB2YXIgcmVzcG9uc2VOYW1lID0gcmVzcG9uc2VOYW1lc1swXTtcbiAgdmFyIGZpZWxkTm9kZXMgPSBmaWVsZHNbcmVzcG9uc2VOYW1lXTtcbiAgdmFyIGZpZWxkTm9kZSA9IGZpZWxkTm9kZXNbMF07XG4gIHZhciBmaWVsZE5hbWUgPSBmaWVsZE5vZGUubmFtZS52YWx1ZTtcbiAgdmFyIGZpZWxkRGVmID0gZ2V0RmllbGREZWYoc2NoZW1hLCB0eXBlLCBmaWVsZE5hbWUpO1xuXG4gIGlmICghZmllbGREZWYpIHtcbiAgICB0aHJvdyBuZXcgR3JhcGhRTEVycm9yKFwiVGhlIHN1YnNjcmlwdGlvbiBmaWVsZCBcXFwiXCIuY29uY2F0KGZpZWxkTmFtZSwgXCJcXFwiIGlzIG5vdCBkZWZpbmVkLlwiKSwgZmllbGROb2Rlcyk7XG4gIH1cblxuICB2YXIgcGF0aCA9IGFkZFBhdGgodW5kZWZpbmVkLCByZXNwb25zZU5hbWUsIHR5cGUubmFtZSk7XG4gIHZhciBpbmZvID0gYnVpbGRSZXNvbHZlSW5mbyhleGVDb250ZXh0LCBmaWVsZERlZiwgZmllbGROb2RlcywgdHlwZSwgcGF0aCk7IC8vIENvZXJjZSB0byBQcm9taXNlIGZvciBlYXNpZXIgZXJyb3IgaGFuZGxpbmcgYW5kIGNvbnNpc3RlbnQgcmV0dXJuIHR5cGUuXG5cbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlUmVzdWx0KSB7XG4gICAgdmFyIF9maWVsZERlZiRzdWJzY3JpYmU7XG5cbiAgICAvLyBJbXBsZW1lbnRzIHRoZSBcIlJlc29sdmVGaWVsZEV2ZW50U3RyZWFtXCIgYWxnb3JpdGhtIGZyb20gR3JhcGhRTCBzcGVjaWZpY2F0aW9uLlxuICAgIC8vIEl0IGRpZmZlcnMgZnJvbSBcIlJlc29sdmVGaWVsZFZhbHVlXCIgZHVlIHRvIHByb3ZpZGluZyBhIGRpZmZlcmVudCBgcmVzb2x2ZUZuYC5cbiAgICAvLyBCdWlsZCBhIEpTIG9iamVjdCBvZiBhcmd1bWVudHMgZnJvbSB0aGUgZmllbGQuYXJndW1lbnRzIEFTVCwgdXNpbmcgdGhlXG4gICAgLy8gdmFyaWFibGVzIHNjb3BlIHRvIGZ1bGZpbGwgYW55IHZhcmlhYmxlIHJlZmVyZW5jZXMuXG4gICAgdmFyIGFyZ3MgPSBnZXRBcmd1bWVudFZhbHVlcyhmaWVsZERlZiwgZmllbGROb2Rlc1swXSwgdmFyaWFibGVWYWx1ZXMpOyAvLyBUaGUgcmVzb2x2ZSBmdW5jdGlvbidzIG9wdGlvbmFsIHRoaXJkIGFyZ3VtZW50IGlzIGEgY29udGV4dCB2YWx1ZSB0aGF0XG4gICAgLy8gaXMgcHJvdmlkZWQgdG8gZXZlcnkgcmVzb2x2ZSBmdW5jdGlvbiB3aXRoaW4gYW4gZXhlY3V0aW9uLiBJdCBpcyBjb21tb25seVxuICAgIC8vIHVzZWQgdG8gcmVwcmVzZW50IGFuIGF1dGhlbnRpY2F0ZWQgdXNlciwgb3IgcmVxdWVzdC1zcGVjaWZpYyBjYWNoZXMuXG5cbiAgICB2YXIgY29udGV4dFZhbHVlID0gZXhlQ29udGV4dC5jb250ZXh0VmFsdWU7IC8vIENhbGwgdGhlIGBzdWJzY3JpYmUoKWAgcmVzb2x2ZXIgb3IgdGhlIGRlZmF1bHQgcmVzb2x2ZXIgdG8gcHJvZHVjZSBhblxuICAgIC8vIEFzeW5jSXRlcmFibGUgeWllbGRpbmcgcmF3IHBheWxvYWRzLlxuXG4gICAgdmFyIHJlc29sdmVGbiA9IChfZmllbGREZWYkc3Vic2NyaWJlID0gZmllbGREZWYuc3Vic2NyaWJlKSAhPT0gbnVsbCAmJiBfZmllbGREZWYkc3Vic2NyaWJlICE9PSB2b2lkIDAgPyBfZmllbGREZWYkc3Vic2NyaWJlIDogZXhlQ29udGV4dC5maWVsZFJlc29sdmVyO1xuICAgIHJlc29sdmVSZXN1bHQocmVzb2x2ZUZuKHJvb3RWYWx1ZSwgYXJncywgY29udGV4dFZhbHVlLCBpbmZvKSk7XG4gIH0pLnRoZW4oZnVuY3Rpb24gKGV2ZW50U3RyZWFtKSB7XG4gICAgaWYgKGV2ZW50U3RyZWFtIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIHRocm93IGxvY2F0ZWRFcnJvcihldmVudFN0cmVhbSwgZmllbGROb2RlcywgcGF0aFRvQXJyYXkocGF0aCkpO1xuICAgIH0gLy8gQXNzZXJ0IGZpZWxkIHJldHVybmVkIGFuIGV2ZW50IHN0cmVhbSwgb3RoZXJ3aXNlIHlpZWxkIGFuIGVycm9yLlxuXG5cbiAgICBpZiAoIWlzQXN5bmNJdGVyYWJsZShldmVudFN0cmVhbSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignU3Vic2NyaXB0aW9uIGZpZWxkIG11c3QgcmV0dXJuIEFzeW5jIEl0ZXJhYmxlLiAnICsgXCJSZWNlaXZlZDogXCIuY29uY2F0KGluc3BlY3QoZXZlbnRTdHJlYW0pLCBcIi5cIikpO1xuICAgIH1cblxuICAgIHJldHVybiBldmVudFN0cmVhbTtcbiAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgdGhyb3cgbG9jYXRlZEVycm9yKGVycm9yLCBmaWVsZE5vZGVzLCBwYXRoVG9BcnJheShwYXRoKSk7XG4gIH0pO1xufVxuIiwiZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5pbXBvcnQgb2JqZWN0RW50cmllcyBmcm9tIFwiLi4vcG9seWZpbGxzL29iamVjdEVudHJpZXMubWpzXCI7XG5pbXBvcnQgeyBTWU1CT0xfVE9fU1RSSU5HX1RBRyB9IGZyb20gXCIuLi9wb2x5ZmlsbHMvc3ltYm9scy5tanNcIjtcbmltcG9ydCBpbnNwZWN0IGZyb20gXCIuLi9qc3V0aWxzL2luc3BlY3QubWpzXCI7XG5pbXBvcnQga2V5TWFwIGZyb20gXCIuLi9qc3V0aWxzL2tleU1hcC5tanNcIjtcbmltcG9ydCBtYXBWYWx1ZSBmcm9tIFwiLi4vanN1dGlscy9tYXBWYWx1ZS5tanNcIjtcbmltcG9ydCB0b09iak1hcCBmcm9tIFwiLi4vanN1dGlscy90b09iak1hcC5tanNcIjtcbmltcG9ydCBkZXZBc3NlcnQgZnJvbSBcIi4uL2pzdXRpbHMvZGV2QXNzZXJ0Lm1qc1wiO1xuaW1wb3J0IGtleVZhbE1hcCBmcm9tIFwiLi4vanN1dGlscy9rZXlWYWxNYXAubWpzXCI7XG5pbXBvcnQgaW5zdGFuY2VPZiBmcm9tIFwiLi4vanN1dGlscy9pbnN0YW5jZU9mLm1qc1wiO1xuaW1wb3J0IGRpZFlvdU1lYW4gZnJvbSBcIi4uL2pzdXRpbHMvZGlkWW91TWVhbi5tanNcIjtcbmltcG9ydCBpc09iamVjdExpa2UgZnJvbSBcIi4uL2pzdXRpbHMvaXNPYmplY3RMaWtlLm1qc1wiO1xuaW1wb3J0IGlkZW50aXR5RnVuYyBmcm9tIFwiLi4vanN1dGlscy9pZGVudGl0eUZ1bmMubWpzXCI7XG5pbXBvcnQgZGVmaW5lSW5zcGVjdCBmcm9tIFwiLi4vanN1dGlscy9kZWZpbmVJbnNwZWN0Lm1qc1wiO1xuaW1wb3J0IHN1Z2dlc3Rpb25MaXN0IGZyb20gXCIuLi9qc3V0aWxzL3N1Z2dlc3Rpb25MaXN0Lm1qc1wiO1xuaW1wb3J0IHsgR3JhcGhRTEVycm9yIH0gZnJvbSBcIi4uL2Vycm9yL0dyYXBoUUxFcnJvci5tanNcIjtcbmltcG9ydCB7IEtpbmQgfSBmcm9tIFwiLi4vbGFuZ3VhZ2Uva2luZHMubWpzXCI7XG5pbXBvcnQgeyBwcmludCB9IGZyb20gXCIuLi9sYW5ndWFnZS9wcmludGVyLm1qc1wiO1xuaW1wb3J0IHsgdmFsdWVGcm9tQVNUVW50eXBlZCB9IGZyb20gXCIuLi91dGlsaXRpZXMvdmFsdWVGcm9tQVNUVW50eXBlZC5tanNcIjtcbmV4cG9ydCBmdW5jdGlvbiBpc1R5cGUodHlwZSkge1xuICByZXR1cm4gaXNTY2FsYXJUeXBlKHR5cGUpIHx8IGlzT2JqZWN0VHlwZSh0eXBlKSB8fCBpc0ludGVyZmFjZVR5cGUodHlwZSkgfHwgaXNVbmlvblR5cGUodHlwZSkgfHwgaXNFbnVtVHlwZSh0eXBlKSB8fCBpc0lucHV0T2JqZWN0VHlwZSh0eXBlKSB8fCBpc0xpc3RUeXBlKHR5cGUpIHx8IGlzTm9uTnVsbFR5cGUodHlwZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0VHlwZSh0eXBlKSB7XG4gIGlmICghaXNUeXBlKHR5cGUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRXhwZWN0ZWQgXCIuY29uY2F0KGluc3BlY3QodHlwZSksIFwiIHRvIGJlIGEgR3JhcGhRTCB0eXBlLlwiKSk7XG4gIH1cblxuICByZXR1cm4gdHlwZTtcbn1cbi8qKlxuICogVGhlcmUgYXJlIHByZWRpY2F0ZXMgZm9yIGVhY2gga2luZCBvZiBHcmFwaFFMIHR5cGUuXG4gKi9cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlZGVjbGFyZVxuZXhwb3J0IGZ1bmN0aW9uIGlzU2NhbGFyVHlwZSh0eXBlKSB7XG4gIHJldHVybiBpbnN0YW5jZU9mKHR5cGUsIEdyYXBoUUxTY2FsYXJUeXBlKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRTY2FsYXJUeXBlKHR5cGUpIHtcbiAgaWYgKCFpc1NjYWxhclR5cGUodHlwZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RlZCBcIi5jb25jYXQoaW5zcGVjdCh0eXBlKSwgXCIgdG8gYmUgYSBHcmFwaFFMIFNjYWxhciB0eXBlLlwiKSk7XG4gIH1cblxuICByZXR1cm4gdHlwZTtcbn1cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZWRlY2xhcmVcbmV4cG9ydCBmdW5jdGlvbiBpc09iamVjdFR5cGUodHlwZSkge1xuICByZXR1cm4gaW5zdGFuY2VPZih0eXBlLCBHcmFwaFFMT2JqZWN0VHlwZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0T2JqZWN0VHlwZSh0eXBlKSB7XG4gIGlmICghaXNPYmplY3RUeXBlKHR5cGUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRXhwZWN0ZWQgXCIuY29uY2F0KGluc3BlY3QodHlwZSksIFwiIHRvIGJlIGEgR3JhcGhRTCBPYmplY3QgdHlwZS5cIikpO1xuICB9XG5cbiAgcmV0dXJuIHR5cGU7XG59XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVkZWNsYXJlXG5leHBvcnQgZnVuY3Rpb24gaXNJbnRlcmZhY2VUeXBlKHR5cGUpIHtcbiAgcmV0dXJuIGluc3RhbmNlT2YodHlwZSwgR3JhcGhRTEludGVyZmFjZVR5cGUpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydEludGVyZmFjZVR5cGUodHlwZSkge1xuICBpZiAoIWlzSW50ZXJmYWNlVHlwZSh0eXBlKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkV4cGVjdGVkIFwiLmNvbmNhdChpbnNwZWN0KHR5cGUpLCBcIiB0byBiZSBhIEdyYXBoUUwgSW50ZXJmYWNlIHR5cGUuXCIpKTtcbiAgfVxuXG4gIHJldHVybiB0eXBlO1xufVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlZGVjbGFyZVxuZXhwb3J0IGZ1bmN0aW9uIGlzVW5pb25UeXBlKHR5cGUpIHtcbiAgcmV0dXJuIGluc3RhbmNlT2YodHlwZSwgR3JhcGhRTFVuaW9uVHlwZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0VW5pb25UeXBlKHR5cGUpIHtcbiAgaWYgKCFpc1VuaW9uVHlwZSh0eXBlKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkV4cGVjdGVkIFwiLmNvbmNhdChpbnNwZWN0KHR5cGUpLCBcIiB0byBiZSBhIEdyYXBoUUwgVW5pb24gdHlwZS5cIikpO1xuICB9XG5cbiAgcmV0dXJuIHR5cGU7XG59XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVkZWNsYXJlXG5leHBvcnQgZnVuY3Rpb24gaXNFbnVtVHlwZSh0eXBlKSB7XG4gIHJldHVybiBpbnN0YW5jZU9mKHR5cGUsIEdyYXBoUUxFbnVtVHlwZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0RW51bVR5cGUodHlwZSkge1xuICBpZiAoIWlzRW51bVR5cGUodHlwZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RlZCBcIi5jb25jYXQoaW5zcGVjdCh0eXBlKSwgXCIgdG8gYmUgYSBHcmFwaFFMIEVudW0gdHlwZS5cIikpO1xuICB9XG5cbiAgcmV0dXJuIHR5cGU7XG59XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVkZWNsYXJlXG5leHBvcnQgZnVuY3Rpb24gaXNJbnB1dE9iamVjdFR5cGUodHlwZSkge1xuICByZXR1cm4gaW5zdGFuY2VPZih0eXBlLCBHcmFwaFFMSW5wdXRPYmplY3RUeXBlKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRJbnB1dE9iamVjdFR5cGUodHlwZSkge1xuICBpZiAoIWlzSW5wdXRPYmplY3RUeXBlKHR5cGUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRXhwZWN0ZWQgXCIuY29uY2F0KGluc3BlY3QodHlwZSksIFwiIHRvIGJlIGEgR3JhcGhRTCBJbnB1dCBPYmplY3QgdHlwZS5cIikpO1xuICB9XG5cbiAgcmV0dXJuIHR5cGU7XG59XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVkZWNsYXJlXG5leHBvcnQgZnVuY3Rpb24gaXNMaXN0VHlwZSh0eXBlKSB7XG4gIHJldHVybiBpbnN0YW5jZU9mKHR5cGUsIEdyYXBoUUxMaXN0KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRMaXN0VHlwZSh0eXBlKSB7XG4gIGlmICghaXNMaXN0VHlwZSh0eXBlKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkV4cGVjdGVkIFwiLmNvbmNhdChpbnNwZWN0KHR5cGUpLCBcIiB0byBiZSBhIEdyYXBoUUwgTGlzdCB0eXBlLlwiKSk7XG4gIH1cblxuICByZXR1cm4gdHlwZTtcbn1cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZWRlY2xhcmVcbmV4cG9ydCBmdW5jdGlvbiBpc05vbk51bGxUeXBlKHR5cGUpIHtcbiAgcmV0dXJuIGluc3RhbmNlT2YodHlwZSwgR3JhcGhRTE5vbk51bGwpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydE5vbk51bGxUeXBlKHR5cGUpIHtcbiAgaWYgKCFpc05vbk51bGxUeXBlKHR5cGUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRXhwZWN0ZWQgXCIuY29uY2F0KGluc3BlY3QodHlwZSksIFwiIHRvIGJlIGEgR3JhcGhRTCBOb24tTnVsbCB0eXBlLlwiKSk7XG4gIH1cblxuICByZXR1cm4gdHlwZTtcbn1cbi8qKlxuICogVGhlc2UgdHlwZXMgbWF5IGJlIHVzZWQgYXMgaW5wdXQgdHlwZXMgZm9yIGFyZ3VtZW50cyBhbmQgZGlyZWN0aXZlcy5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaXNJbnB1dFR5cGUodHlwZSkge1xuICByZXR1cm4gaXNTY2FsYXJUeXBlKHR5cGUpIHx8IGlzRW51bVR5cGUodHlwZSkgfHwgaXNJbnB1dE9iamVjdFR5cGUodHlwZSkgfHwgaXNXcmFwcGluZ1R5cGUodHlwZSkgJiYgaXNJbnB1dFR5cGUodHlwZS5vZlR5cGUpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydElucHV0VHlwZSh0eXBlKSB7XG4gIGlmICghaXNJbnB1dFR5cGUodHlwZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RlZCBcIi5jb25jYXQoaW5zcGVjdCh0eXBlKSwgXCIgdG8gYmUgYSBHcmFwaFFMIGlucHV0IHR5cGUuXCIpKTtcbiAgfVxuXG4gIHJldHVybiB0eXBlO1xufVxuLyoqXG4gKiBUaGVzZSB0eXBlcyBtYXkgYmUgdXNlZCBhcyBvdXRwdXQgdHlwZXMgYXMgdGhlIHJlc3VsdCBvZiBmaWVsZHMuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGlzT3V0cHV0VHlwZSh0eXBlKSB7XG4gIHJldHVybiBpc1NjYWxhclR5cGUodHlwZSkgfHwgaXNPYmplY3RUeXBlKHR5cGUpIHx8IGlzSW50ZXJmYWNlVHlwZSh0eXBlKSB8fCBpc1VuaW9uVHlwZSh0eXBlKSB8fCBpc0VudW1UeXBlKHR5cGUpIHx8IGlzV3JhcHBpbmdUeXBlKHR5cGUpICYmIGlzT3V0cHV0VHlwZSh0eXBlLm9mVHlwZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0T3V0cHV0VHlwZSh0eXBlKSB7XG4gIGlmICghaXNPdXRwdXRUeXBlKHR5cGUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRXhwZWN0ZWQgXCIuY29uY2F0KGluc3BlY3QodHlwZSksIFwiIHRvIGJlIGEgR3JhcGhRTCBvdXRwdXQgdHlwZS5cIikpO1xuICB9XG5cbiAgcmV0dXJuIHR5cGU7XG59XG4vKipcbiAqIFRoZXNlIHR5cGVzIG1heSBkZXNjcmliZSB0eXBlcyB3aGljaCBtYXkgYmUgbGVhZiB2YWx1ZXMuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTGVhZlR5cGUodHlwZSkge1xuICByZXR1cm4gaXNTY2FsYXJUeXBlKHR5cGUpIHx8IGlzRW51bVR5cGUodHlwZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0TGVhZlR5cGUodHlwZSkge1xuICBpZiAoIWlzTGVhZlR5cGUodHlwZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RlZCBcIi5jb25jYXQoaW5zcGVjdCh0eXBlKSwgXCIgdG8gYmUgYSBHcmFwaFFMIGxlYWYgdHlwZS5cIikpO1xuICB9XG5cbiAgcmV0dXJuIHR5cGU7XG59XG4vKipcbiAqIFRoZXNlIHR5cGVzIG1heSBkZXNjcmliZSB0aGUgcGFyZW50IGNvbnRleHQgb2YgYSBzZWxlY3Rpb24gc2V0LlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBpc0NvbXBvc2l0ZVR5cGUodHlwZSkge1xuICByZXR1cm4gaXNPYmplY3RUeXBlKHR5cGUpIHx8IGlzSW50ZXJmYWNlVHlwZSh0eXBlKSB8fCBpc1VuaW9uVHlwZSh0eXBlKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRDb21wb3NpdGVUeXBlKHR5cGUpIHtcbiAgaWYgKCFpc0NvbXBvc2l0ZVR5cGUodHlwZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RlZCBcIi5jb25jYXQoaW5zcGVjdCh0eXBlKSwgXCIgdG8gYmUgYSBHcmFwaFFMIGNvbXBvc2l0ZSB0eXBlLlwiKSk7XG4gIH1cblxuICByZXR1cm4gdHlwZTtcbn1cbi8qKlxuICogVGhlc2UgdHlwZXMgbWF5IGRlc2NyaWJlIHRoZSBwYXJlbnQgY29udGV4dCBvZiBhIHNlbGVjdGlvbiBzZXQuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQWJzdHJhY3RUeXBlKHR5cGUpIHtcbiAgcmV0dXJuIGlzSW50ZXJmYWNlVHlwZSh0eXBlKSB8fCBpc1VuaW9uVHlwZSh0eXBlKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRBYnN0cmFjdFR5cGUodHlwZSkge1xuICBpZiAoIWlzQWJzdHJhY3RUeXBlKHR5cGUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRXhwZWN0ZWQgXCIuY29uY2F0KGluc3BlY3QodHlwZSksIFwiIHRvIGJlIGEgR3JhcGhRTCBhYnN0cmFjdCB0eXBlLlwiKSk7XG4gIH1cblxuICByZXR1cm4gdHlwZTtcbn1cbi8qKlxuICogTGlzdCBUeXBlIFdyYXBwZXJcbiAqXG4gKiBBIGxpc3QgaXMgYSB3cmFwcGluZyB0eXBlIHdoaWNoIHBvaW50cyB0byBhbm90aGVyIHR5cGUuXG4gKiBMaXN0cyBhcmUgb2Z0ZW4gY3JlYXRlZCB3aXRoaW4gdGhlIGNvbnRleHQgb2YgZGVmaW5pbmcgdGhlIGZpZWxkcyBvZlxuICogYW4gb2JqZWN0IHR5cGUuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiAgICAgY29uc3QgUGVyc29uVHlwZSA9IG5ldyBHcmFwaFFMT2JqZWN0VHlwZSh7XG4gKiAgICAgICBuYW1lOiAnUGVyc29uJyxcbiAqICAgICAgIGZpZWxkczogKCkgPT4gKHtcbiAqICAgICAgICAgcGFyZW50czogeyB0eXBlOiBuZXcgR3JhcGhRTExpc3QoUGVyc29uVHlwZSkgfSxcbiAqICAgICAgICAgY2hpbGRyZW46IHsgdHlwZTogbmV3IEdyYXBoUUxMaXN0KFBlcnNvblR5cGUpIH0sXG4gKiAgICAgICB9KVxuICogICAgIH0pXG4gKlxuICovXG4vLyBGSVhNRTogd29ya2Fyb3VuZCB0byBmaXggaXNzdWUgd2l0aCBCYWJlbCBwYXJzZXJcblxuLyogOjpcbmRlY2xhcmUgY2xhc3MgR3JhcGhRTExpc3Q8K1Q6IEdyYXBoUUxUeXBlPiB7XG4gICtvZlR5cGU6IFQ7XG4gIHN0YXRpYyA8VD4ob2ZUeXBlOiBUKTogR3JhcGhRTExpc3Q8VD47XG4gIC8vIE5vdGU6IGNvbnN0cnVjdG9ycyBjYW5ub3QgYmUgdXNlZCBmb3IgY292YXJpYW50IHR5cGVzLiBEcm9wIHRoZSBcIm5ld1wiLlxuICBjb25zdHJ1Y3RvcihvZlR5cGU6IEdyYXBoUUxUeXBlKTogdm9pZDtcbn1cbiovXG5cbmV4cG9ydCBmdW5jdGlvbiBHcmFwaFFMTGlzdChvZlR5cGUpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGVsc2UgKHRvIGJlIHJlbW92ZWQgaW4gdjE2LjAuMClcbiAgaWYgKHRoaXMgaW5zdGFuY2VvZiBHcmFwaFFMTGlzdCkge1xuICAgIHRoaXMub2ZUeXBlID0gYXNzZXJ0VHlwZShvZlR5cGUpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuZXcgR3JhcGhRTExpc3Qob2ZUeXBlKTtcbiAgfVxufSAvLyBOZWVkIHRvIGNhc3QgdGhyb3VnaCBhbnkgdG8gYWx0ZXIgdGhlIHByb3RvdHlwZS5cblxuR3JhcGhRTExpc3QucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiAnWycgKyBTdHJpbmcodGhpcy5vZlR5cGUpICsgJ10nO1xufTtcblxuR3JhcGhRTExpc3QucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgcmV0dXJuIHRoaXMudG9TdHJpbmcoKTtcbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShHcmFwaFFMTGlzdC5wcm90b3R5cGUsIFNZTUJPTF9UT19TVFJJTkdfVEFHLCB7XG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiAnR3JhcGhRTExpc3QnO1xuICB9XG59KTsgLy8gUHJpbnQgYSBzaW1wbGlmaWVkIGZvcm0gd2hlbiBhcHBlYXJpbmcgaW4gYGluc3BlY3RgIGFuZCBgdXRpbC5pbnNwZWN0YC5cblxuZGVmaW5lSW5zcGVjdChHcmFwaFFMTGlzdCk7XG4vKipcbiAqIE5vbi1OdWxsIFR5cGUgV3JhcHBlclxuICpcbiAqIEEgbm9uLW51bGwgaXMgYSB3cmFwcGluZyB0eXBlIHdoaWNoIHBvaW50cyB0byBhbm90aGVyIHR5cGUuXG4gKiBOb24tbnVsbCB0eXBlcyBlbmZvcmNlIHRoYXQgdGhlaXIgdmFsdWVzIGFyZSBuZXZlciBudWxsIGFuZCBjYW4gZW5zdXJlXG4gKiBhbiBlcnJvciBpcyByYWlzZWQgaWYgdGhpcyBldmVyIG9jY3VycyBkdXJpbmcgYSByZXF1ZXN0LiBJdCBpcyB1c2VmdWwgZm9yXG4gKiBmaWVsZHMgd2hpY2ggeW91IGNhbiBtYWtlIGEgc3Ryb25nIGd1YXJhbnRlZSBvbiBub24tbnVsbGFiaWxpdHksIGZvciBleGFtcGxlXG4gKiB1c3VhbGx5IHRoZSBpZCBmaWVsZCBvZiBhIGRhdGFiYXNlIHJvdyB3aWxsIG5ldmVyIGJlIG51bGwuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiAgICAgY29uc3QgUm93VHlwZSA9IG5ldyBHcmFwaFFMT2JqZWN0VHlwZSh7XG4gKiAgICAgICBuYW1lOiAnUm93JyxcbiAqICAgICAgIGZpZWxkczogKCkgPT4gKHtcbiAqICAgICAgICAgaWQ6IHsgdHlwZTogbmV3IEdyYXBoUUxOb25OdWxsKEdyYXBoUUxTdHJpbmcpIH0sXG4gKiAgICAgICB9KVxuICogICAgIH0pXG4gKlxuICogTm90ZTogdGhlIGVuZm9yY2VtZW50IG9mIG5vbi1udWxsYWJpbGl0eSBvY2N1cnMgd2l0aGluIHRoZSBleGVjdXRvci5cbiAqL1xuLy8gRklYTUU6IHdvcmthcm91bmQgdG8gZml4IGlzc3VlIHdpdGggQmFiZWwgcGFyc2VyXG5cbi8qIDo6XG5kZWNsYXJlIGNsYXNzIEdyYXBoUUxOb25OdWxsPCtUOiBHcmFwaFFMTnVsbGFibGVUeXBlPiB7XG4gICtvZlR5cGU6IFQ7XG4gIHN0YXRpYyA8VD4ob2ZUeXBlOiBUKTogR3JhcGhRTE5vbk51bGw8VD47XG4gIC8vIE5vdGU6IGNvbnN0cnVjdG9ycyBjYW5ub3QgYmUgdXNlZCBmb3IgY292YXJpYW50IHR5cGVzLiBEcm9wIHRoZSBcIm5ld1wiLlxuICBjb25zdHJ1Y3RvcihvZlR5cGU6IEdyYXBoUUxUeXBlKTogdm9pZDtcbn1cbiovXG5cbmV4cG9ydCBmdW5jdGlvbiBHcmFwaFFMTm9uTnVsbChvZlR5cGUpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGVsc2UgKHRvIGJlIHJlbW92ZWQgaW4gdjE2LjAuMClcbiAgaWYgKHRoaXMgaW5zdGFuY2VvZiBHcmFwaFFMTm9uTnVsbCkge1xuICAgIHRoaXMub2ZUeXBlID0gYXNzZXJ0TnVsbGFibGVUeXBlKG9mVHlwZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5ldyBHcmFwaFFMTm9uTnVsbChvZlR5cGUpO1xuICB9XG59IC8vIE5lZWQgdG8gY2FzdCB0aHJvdWdoIGFueSB0byBhbHRlciB0aGUgcHJvdG90eXBlLlxuXG5HcmFwaFFMTm9uTnVsbC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuIFN0cmluZyh0aGlzLm9mVHlwZSkgKyAnISc7XG59O1xuXG5HcmFwaFFMTm9uTnVsbC5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICByZXR1cm4gdGhpcy50b1N0cmluZygpO1xufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEdyYXBoUUxOb25OdWxsLnByb3RvdHlwZSwgU1lNQk9MX1RPX1NUUklOR19UQUcsIHtcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuICdHcmFwaFFMTm9uTnVsbCc7XG4gIH1cbn0pOyAvLyBQcmludCBhIHNpbXBsaWZpZWQgZm9ybSB3aGVuIGFwcGVhcmluZyBpbiBgaW5zcGVjdGAgYW5kIGB1dGlsLmluc3BlY3RgLlxuXG5kZWZpbmVJbnNwZWN0KEdyYXBoUUxOb25OdWxsKTtcbi8qKlxuICogVGhlc2UgdHlwZXMgd3JhcCBhbmQgbW9kaWZ5IG90aGVyIHR5cGVzXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGlzV3JhcHBpbmdUeXBlKHR5cGUpIHtcbiAgcmV0dXJuIGlzTGlzdFR5cGUodHlwZSkgfHwgaXNOb25OdWxsVHlwZSh0eXBlKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRXcmFwcGluZ1R5cGUodHlwZSkge1xuICBpZiAoIWlzV3JhcHBpbmdUeXBlKHR5cGUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRXhwZWN0ZWQgXCIuY29uY2F0KGluc3BlY3QodHlwZSksIFwiIHRvIGJlIGEgR3JhcGhRTCB3cmFwcGluZyB0eXBlLlwiKSk7XG4gIH1cblxuICByZXR1cm4gdHlwZTtcbn1cbi8qKlxuICogVGhlc2UgdHlwZXMgY2FuIGFsbCBhY2NlcHQgbnVsbCBhcyBhIHZhbHVlLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBpc051bGxhYmxlVHlwZSh0eXBlKSB7XG4gIHJldHVybiBpc1R5cGUodHlwZSkgJiYgIWlzTm9uTnVsbFR5cGUodHlwZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0TnVsbGFibGVUeXBlKHR5cGUpIHtcbiAgaWYgKCFpc051bGxhYmxlVHlwZSh0eXBlKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkV4cGVjdGVkIFwiLmNvbmNhdChpbnNwZWN0KHR5cGUpLCBcIiB0byBiZSBhIEdyYXBoUUwgbnVsbGFibGUgdHlwZS5cIikpO1xuICB9XG5cbiAgcmV0dXJuIHR5cGU7XG59XG4vKiBlc2xpbnQtZGlzYWJsZSBuby1yZWRlY2xhcmUgKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE51bGxhYmxlVHlwZSh0eXBlKSB7XG4gIC8qIGVzbGludC1lbmFibGUgbm8tcmVkZWNsYXJlICovXG4gIGlmICh0eXBlKSB7XG4gICAgcmV0dXJuIGlzTm9uTnVsbFR5cGUodHlwZSkgPyB0eXBlLm9mVHlwZSA6IHR5cGU7XG4gIH1cbn1cbi8qKlxuICogVGhlc2UgbmFtZWQgdHlwZXMgZG8gbm90IGluY2x1ZGUgbW9kaWZpZXJzIGxpa2UgTGlzdCBvciBOb25OdWxsLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBpc05hbWVkVHlwZSh0eXBlKSB7XG4gIHJldHVybiBpc1NjYWxhclR5cGUodHlwZSkgfHwgaXNPYmplY3RUeXBlKHR5cGUpIHx8IGlzSW50ZXJmYWNlVHlwZSh0eXBlKSB8fCBpc1VuaW9uVHlwZSh0eXBlKSB8fCBpc0VudW1UeXBlKHR5cGUpIHx8IGlzSW5wdXRPYmplY3RUeXBlKHR5cGUpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydE5hbWVkVHlwZSh0eXBlKSB7XG4gIGlmICghaXNOYW1lZFR5cGUodHlwZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RlZCBcIi5jb25jYXQoaW5zcGVjdCh0eXBlKSwgXCIgdG8gYmUgYSBHcmFwaFFMIG5hbWVkIHR5cGUuXCIpKTtcbiAgfVxuXG4gIHJldHVybiB0eXBlO1xufVxuLyogZXNsaW50LWRpc2FibGUgbm8tcmVkZWNsYXJlICovXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXROYW1lZFR5cGUodHlwZSkge1xuICAvKiBlc2xpbnQtZW5hYmxlIG5vLXJlZGVjbGFyZSAqL1xuICBpZiAodHlwZSkge1xuICAgIHZhciB1bndyYXBwZWRUeXBlID0gdHlwZTtcblxuICAgIHdoaWxlIChpc1dyYXBwaW5nVHlwZSh1bndyYXBwZWRUeXBlKSkge1xuICAgICAgdW53cmFwcGVkVHlwZSA9IHVud3JhcHBlZFR5cGUub2ZUeXBlO1xuICAgIH1cblxuICAgIHJldHVybiB1bndyYXBwZWRUeXBlO1xuICB9XG59XG4vKipcbiAqIFVzZWQgd2hpbGUgZGVmaW5pbmcgR3JhcGhRTCB0eXBlcyB0byBhbGxvdyBmb3IgY2lyY3VsYXIgcmVmZXJlbmNlcyBpblxuICogb3RoZXJ3aXNlIGltbXV0YWJsZSB0eXBlIGRlZmluaXRpb25zLlxuICovXG5cbmZ1bmN0aW9uIHJlc29sdmVUaHVuayh0aHVuaykge1xuICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS11c2VdXG4gIHJldHVybiB0eXBlb2YgdGh1bmsgPT09ICdmdW5jdGlvbicgPyB0aHVuaygpIDogdGh1bms7XG59XG5cbmZ1bmN0aW9uIHVuZGVmaW5lSWZFbXB0eShhcnIpIHtcbiAgcmV0dXJuIGFyciAmJiBhcnIubGVuZ3RoID4gMCA/IGFyciA6IHVuZGVmaW5lZDtcbn1cbi8qKlxuICogU2NhbGFyIFR5cGUgRGVmaW5pdGlvblxuICpcbiAqIFRoZSBsZWFmIHZhbHVlcyBvZiBhbnkgcmVxdWVzdCBhbmQgaW5wdXQgdmFsdWVzIHRvIGFyZ3VtZW50cyBhcmVcbiAqIFNjYWxhcnMgKG9yIEVudW1zKSBhbmQgYXJlIGRlZmluZWQgd2l0aCBhIG5hbWUgYW5kIGEgc2VyaWVzIG9mIGZ1bmN0aW9uc1xuICogdXNlZCB0byBwYXJzZSBpbnB1dCBmcm9tIGFzdCBvciB2YXJpYWJsZXMgYW5kIHRvIGVuc3VyZSB2YWxpZGl0eS5cbiAqXG4gKiBJZiBhIHR5cGUncyBzZXJpYWxpemUgZnVuY3Rpb24gZG9lcyBub3QgcmV0dXJuIGEgdmFsdWUgKGkuZS4gaXQgcmV0dXJuc1xuICogYHVuZGVmaW5lZGApIHRoZW4gYW4gZXJyb3Igd2lsbCBiZSByYWlzZWQgYW5kIGEgYG51bGxgIHZhbHVlIHdpbGwgYmUgcmV0dXJuZWRcbiAqIGluIHRoZSByZXNwb25zZS4gSWYgdGhlIHNlcmlhbGl6ZSBmdW5jdGlvbiByZXR1cm5zIGBudWxsYCwgdGhlbiBubyBlcnJvciB3aWxsXG4gKiBiZSBpbmNsdWRlZCBpbiB0aGUgcmVzcG9uc2UuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiAgICAgY29uc3QgT2RkVHlwZSA9IG5ldyBHcmFwaFFMU2NhbGFyVHlwZSh7XG4gKiAgICAgICBuYW1lOiAnT2RkJyxcbiAqICAgICAgIHNlcmlhbGl6ZSh2YWx1ZSkge1xuICogICAgICAgICBpZiAodmFsdWUgJSAyID09PSAxKSB7XG4gKiAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICogICAgICAgICB9XG4gKiAgICAgICB9XG4gKiAgICAgfSk7XG4gKlxuICovXG5cblxuZXhwb3J0IHZhciBHcmFwaFFMU2NhbGFyVHlwZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEdyYXBoUUxTY2FsYXJUeXBlKGNvbmZpZykge1xuICAgIHZhciBfY29uZmlnJHBhcnNlVmFsdWUsIF9jb25maWckc2VyaWFsaXplLCBfY29uZmlnJHBhcnNlTGl0ZXJhbDtcblxuICAgIHZhciBwYXJzZVZhbHVlID0gKF9jb25maWckcGFyc2VWYWx1ZSA9IGNvbmZpZy5wYXJzZVZhbHVlKSAhPT0gbnVsbCAmJiBfY29uZmlnJHBhcnNlVmFsdWUgIT09IHZvaWQgMCA/IF9jb25maWckcGFyc2VWYWx1ZSA6IGlkZW50aXR5RnVuYztcbiAgICB0aGlzLm5hbWUgPSBjb25maWcubmFtZTtcbiAgICB0aGlzLmRlc2NyaXB0aW9uID0gY29uZmlnLmRlc2NyaXB0aW9uO1xuICAgIHRoaXMuc3BlY2lmaWVkQnlVcmwgPSBjb25maWcuc3BlY2lmaWVkQnlVcmw7XG4gICAgdGhpcy5zZXJpYWxpemUgPSAoX2NvbmZpZyRzZXJpYWxpemUgPSBjb25maWcuc2VyaWFsaXplKSAhPT0gbnVsbCAmJiBfY29uZmlnJHNlcmlhbGl6ZSAhPT0gdm9pZCAwID8gX2NvbmZpZyRzZXJpYWxpemUgOiBpZGVudGl0eUZ1bmM7XG4gICAgdGhpcy5wYXJzZVZhbHVlID0gcGFyc2VWYWx1ZTtcbiAgICB0aGlzLnBhcnNlTGl0ZXJhbCA9IChfY29uZmlnJHBhcnNlTGl0ZXJhbCA9IGNvbmZpZy5wYXJzZUxpdGVyYWwpICE9PSBudWxsICYmIF9jb25maWckcGFyc2VMaXRlcmFsICE9PSB2b2lkIDAgPyBfY29uZmlnJHBhcnNlTGl0ZXJhbCA6IGZ1bmN0aW9uIChub2RlLCB2YXJpYWJsZXMpIHtcbiAgICAgIHJldHVybiBwYXJzZVZhbHVlKHZhbHVlRnJvbUFTVFVudHlwZWQobm9kZSwgdmFyaWFibGVzKSk7XG4gICAgfTtcbiAgICB0aGlzLmV4dGVuc2lvbnMgPSBjb25maWcuZXh0ZW5zaW9ucyAmJiB0b09iak1hcChjb25maWcuZXh0ZW5zaW9ucyk7XG4gICAgdGhpcy5hc3ROb2RlID0gY29uZmlnLmFzdE5vZGU7XG4gICAgdGhpcy5leHRlbnNpb25BU1ROb2RlcyA9IHVuZGVmaW5lSWZFbXB0eShjb25maWcuZXh0ZW5zaW9uQVNUTm9kZXMpO1xuICAgIHR5cGVvZiBjb25maWcubmFtZSA9PT0gJ3N0cmluZycgfHwgZGV2QXNzZXJ0KDAsICdNdXN0IHByb3ZpZGUgbmFtZS4nKTtcbiAgICBjb25maWcuc3BlY2lmaWVkQnlVcmwgPT0gbnVsbCB8fCB0eXBlb2YgY29uZmlnLnNwZWNpZmllZEJ5VXJsID09PSAnc3RyaW5nJyB8fCBkZXZBc3NlcnQoMCwgXCJcIi5jb25jYXQodGhpcy5uYW1lLCBcIiBtdXN0IHByb3ZpZGUgXFxcInNwZWNpZmllZEJ5VXJsXFxcIiBhcyBhIHN0cmluZywgXCIpICsgXCJidXQgZ290OiBcIi5jb25jYXQoaW5zcGVjdChjb25maWcuc3BlY2lmaWVkQnlVcmwpLCBcIi5cIikpO1xuICAgIGNvbmZpZy5zZXJpYWxpemUgPT0gbnVsbCB8fCB0eXBlb2YgY29uZmlnLnNlcmlhbGl6ZSA9PT0gJ2Z1bmN0aW9uJyB8fCBkZXZBc3NlcnQoMCwgXCJcIi5jb25jYXQodGhpcy5uYW1lLCBcIiBtdXN0IHByb3ZpZGUgXFxcInNlcmlhbGl6ZVxcXCIgZnVuY3Rpb24uIElmIHRoaXMgY3VzdG9tIFNjYWxhciBpcyBhbHNvIHVzZWQgYXMgYW4gaW5wdXQgdHlwZSwgZW5zdXJlIFxcXCJwYXJzZVZhbHVlXFxcIiBhbmQgXFxcInBhcnNlTGl0ZXJhbFxcXCIgZnVuY3Rpb25zIGFyZSBhbHNvIHByb3ZpZGVkLlwiKSk7XG5cbiAgICBpZiAoY29uZmlnLnBhcnNlTGl0ZXJhbCkge1xuICAgICAgdHlwZW9mIGNvbmZpZy5wYXJzZVZhbHVlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBjb25maWcucGFyc2VMaXRlcmFsID09PSAnZnVuY3Rpb24nIHx8IGRldkFzc2VydCgwLCBcIlwiLmNvbmNhdCh0aGlzLm5hbWUsIFwiIG11c3QgcHJvdmlkZSBib3RoIFxcXCJwYXJzZVZhbHVlXFxcIiBhbmQgXFxcInBhcnNlTGl0ZXJhbFxcXCIgZnVuY3Rpb25zLlwiKSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIF9wcm90byA9IEdyYXBoUUxTY2FsYXJUeXBlLnByb3RvdHlwZTtcblxuICBfcHJvdG8udG9Db25maWcgPSBmdW5jdGlvbiB0b0NvbmZpZygpIHtcbiAgICB2YXIgX3RoaXMkZXh0ZW5zaW9uQVNUTm9kO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLmRlc2NyaXB0aW9uLFxuICAgICAgc3BlY2lmaWVkQnlVcmw6IHRoaXMuc3BlY2lmaWVkQnlVcmwsXG4gICAgICBzZXJpYWxpemU6IHRoaXMuc2VyaWFsaXplLFxuICAgICAgcGFyc2VWYWx1ZTogdGhpcy5wYXJzZVZhbHVlLFxuICAgICAgcGFyc2VMaXRlcmFsOiB0aGlzLnBhcnNlTGl0ZXJhbCxcbiAgICAgIGV4dGVuc2lvbnM6IHRoaXMuZXh0ZW5zaW9ucyxcbiAgICAgIGFzdE5vZGU6IHRoaXMuYXN0Tm9kZSxcbiAgICAgIGV4dGVuc2lvbkFTVE5vZGVzOiAoX3RoaXMkZXh0ZW5zaW9uQVNUTm9kID0gdGhpcy5leHRlbnNpb25BU1ROb2RlcykgIT09IG51bGwgJiYgX3RoaXMkZXh0ZW5zaW9uQVNUTm9kICE9PSB2b2lkIDAgPyBfdGhpcyRleHRlbnNpb25BU1ROb2QgOiBbXVxuICAgIH07XG4gIH07XG5cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubmFtZTtcbiAgfTtcblxuICBfcHJvdG8udG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKCk7XG4gIH0gLy8gJEZsb3dGaXhNZVt1bnN1cHBvcnRlZC1zeW50YXhdIEZsb3cgZG9lc24ndCBzdXBwb3J0IGNvbXB1dGVkIHByb3BlcnRpZXMgeWV0XG4gIDtcblxuICBfY3JlYXRlQ2xhc3MoR3JhcGhRTFNjYWxhclR5cGUsIFt7XG4gICAga2V5OiBTWU1CT0xfVE9fU1RSSU5HX1RBRyxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiAnR3JhcGhRTFNjYWxhclR5cGUnO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBHcmFwaFFMU2NhbGFyVHlwZTtcbn0oKTsgLy8gUHJpbnQgYSBzaW1wbGlmaWVkIGZvcm0gd2hlbiBhcHBlYXJpbmcgaW4gYGluc3BlY3RgIGFuZCBgdXRpbC5pbnNwZWN0YC5cblxuZGVmaW5lSW5zcGVjdChHcmFwaFFMU2NhbGFyVHlwZSk7XG5cbi8qKlxuICogT2JqZWN0IFR5cGUgRGVmaW5pdGlvblxuICpcbiAqIEFsbW9zdCBhbGwgb2YgdGhlIEdyYXBoUUwgdHlwZXMgeW91IGRlZmluZSB3aWxsIGJlIG9iamVjdCB0eXBlcy4gT2JqZWN0IHR5cGVzXG4gKiBoYXZlIGEgbmFtZSwgYnV0IG1vc3QgaW1wb3J0YW50bHkgZGVzY3JpYmUgdGhlaXIgZmllbGRzLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogICAgIGNvbnN0IEFkZHJlc3NUeXBlID0gbmV3IEdyYXBoUUxPYmplY3RUeXBlKHtcbiAqICAgICAgIG5hbWU6ICdBZGRyZXNzJyxcbiAqICAgICAgIGZpZWxkczoge1xuICogICAgICAgICBzdHJlZXQ6IHsgdHlwZTogR3JhcGhRTFN0cmluZyB9LFxuICogICAgICAgICBudW1iZXI6IHsgdHlwZTogR3JhcGhRTEludCB9LFxuICogICAgICAgICBmb3JtYXR0ZWQ6IHtcbiAqICAgICAgICAgICB0eXBlOiBHcmFwaFFMU3RyaW5nLFxuICogICAgICAgICAgIHJlc29sdmUob2JqKSB7XG4gKiAgICAgICAgICAgICByZXR1cm4gb2JqLm51bWJlciArICcgJyArIG9iai5zdHJlZXRcbiAqICAgICAgICAgICB9XG4gKiAgICAgICAgIH1cbiAqICAgICAgIH1cbiAqICAgICB9KTtcbiAqXG4gKiBXaGVuIHR3byB0eXBlcyBuZWVkIHRvIHJlZmVyIHRvIGVhY2ggb3RoZXIsIG9yIGEgdHlwZSBuZWVkcyB0byByZWZlciB0b1xuICogaXRzZWxmIGluIGEgZmllbGQsIHlvdSBjYW4gdXNlIGEgZnVuY3Rpb24gZXhwcmVzc2lvbiAoYWthIGEgY2xvc3VyZSBvciBhXG4gKiB0aHVuaykgdG8gc3VwcGx5IHRoZSBmaWVsZHMgbGF6aWx5LlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogICAgIGNvbnN0IFBlcnNvblR5cGUgPSBuZXcgR3JhcGhRTE9iamVjdFR5cGUoe1xuICogICAgICAgbmFtZTogJ1BlcnNvbicsXG4gKiAgICAgICBmaWVsZHM6ICgpID0+ICh7XG4gKiAgICAgICAgIG5hbWU6IHsgdHlwZTogR3JhcGhRTFN0cmluZyB9LFxuICogICAgICAgICBiZXN0RnJpZW5kOiB7IHR5cGU6IFBlcnNvblR5cGUgfSxcbiAqICAgICAgIH0pXG4gKiAgICAgfSk7XG4gKlxuICovXG5leHBvcnQgdmFyIEdyYXBoUUxPYmplY3RUeXBlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gR3JhcGhRTE9iamVjdFR5cGUoY29uZmlnKSB7XG4gICAgdGhpcy5uYW1lID0gY29uZmlnLm5hbWU7XG4gICAgdGhpcy5kZXNjcmlwdGlvbiA9IGNvbmZpZy5kZXNjcmlwdGlvbjtcbiAgICB0aGlzLmlzVHlwZU9mID0gY29uZmlnLmlzVHlwZU9mO1xuICAgIHRoaXMuZXh0ZW5zaW9ucyA9IGNvbmZpZy5leHRlbnNpb25zICYmIHRvT2JqTWFwKGNvbmZpZy5leHRlbnNpb25zKTtcbiAgICB0aGlzLmFzdE5vZGUgPSBjb25maWcuYXN0Tm9kZTtcbiAgICB0aGlzLmV4dGVuc2lvbkFTVE5vZGVzID0gdW5kZWZpbmVJZkVtcHR5KGNvbmZpZy5leHRlbnNpb25BU1ROb2Rlcyk7XG4gICAgdGhpcy5fZmllbGRzID0gZGVmaW5lRmllbGRNYXAuYmluZCh1bmRlZmluZWQsIGNvbmZpZyk7XG4gICAgdGhpcy5faW50ZXJmYWNlcyA9IGRlZmluZUludGVyZmFjZXMuYmluZCh1bmRlZmluZWQsIGNvbmZpZyk7XG4gICAgdHlwZW9mIGNvbmZpZy5uYW1lID09PSAnc3RyaW5nJyB8fCBkZXZBc3NlcnQoMCwgJ011c3QgcHJvdmlkZSBuYW1lLicpO1xuICAgIGNvbmZpZy5pc1R5cGVPZiA9PSBudWxsIHx8IHR5cGVvZiBjb25maWcuaXNUeXBlT2YgPT09ICdmdW5jdGlvbicgfHwgZGV2QXNzZXJ0KDAsIFwiXCIuY29uY2F0KHRoaXMubmFtZSwgXCIgbXVzdCBwcm92aWRlIFxcXCJpc1R5cGVPZlxcXCIgYXMgYSBmdW5jdGlvbiwgXCIpICsgXCJidXQgZ290OiBcIi5jb25jYXQoaW5zcGVjdChjb25maWcuaXNUeXBlT2YpLCBcIi5cIikpO1xuICB9XG5cbiAgdmFyIF9wcm90bzIgPSBHcmFwaFFMT2JqZWN0VHlwZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvMi5nZXRGaWVsZHMgPSBmdW5jdGlvbiBnZXRGaWVsZHMoKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLl9maWVsZHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRoaXMuX2ZpZWxkcyA9IHRoaXMuX2ZpZWxkcygpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9maWVsZHM7XG4gIH07XG5cbiAgX3Byb3RvMi5nZXRJbnRlcmZhY2VzID0gZnVuY3Rpb24gZ2V0SW50ZXJmYWNlcygpIHtcbiAgICBpZiAodHlwZW9mIHRoaXMuX2ludGVyZmFjZXMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRoaXMuX2ludGVyZmFjZXMgPSB0aGlzLl9pbnRlcmZhY2VzKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2ludGVyZmFjZXM7XG4gIH07XG5cbiAgX3Byb3RvMi50b0NvbmZpZyA9IGZ1bmN0aW9uIHRvQ29uZmlnKCkge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICBkZXNjcmlwdGlvbjogdGhpcy5kZXNjcmlwdGlvbixcbiAgICAgIGludGVyZmFjZXM6IHRoaXMuZ2V0SW50ZXJmYWNlcygpLFxuICAgICAgZmllbGRzOiBmaWVsZHNUb0ZpZWxkc0NvbmZpZyh0aGlzLmdldEZpZWxkcygpKSxcbiAgICAgIGlzVHlwZU9mOiB0aGlzLmlzVHlwZU9mLFxuICAgICAgZXh0ZW5zaW9uczogdGhpcy5leHRlbnNpb25zLFxuICAgICAgYXN0Tm9kZTogdGhpcy5hc3ROb2RlLFxuICAgICAgZXh0ZW5zaW9uQVNUTm9kZXM6IHRoaXMuZXh0ZW5zaW9uQVNUTm9kZXMgfHwgW11cbiAgICB9O1xuICB9O1xuXG4gIF9wcm90bzIudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5uYW1lO1xuICB9O1xuXG4gIF9wcm90bzIudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKCk7XG4gIH0gLy8gJEZsb3dGaXhNZVt1bnN1cHBvcnRlZC1zeW50YXhdIEZsb3cgZG9lc24ndCBzdXBwb3J0IGNvbXB1dGVkIHByb3BlcnRpZXMgeWV0XG4gIDtcblxuICBfY3JlYXRlQ2xhc3MoR3JhcGhRTE9iamVjdFR5cGUsIFt7XG4gICAga2V5OiBTWU1CT0xfVE9fU1RSSU5HX1RBRyxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiAnR3JhcGhRTE9iamVjdFR5cGUnO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBHcmFwaFFMT2JqZWN0VHlwZTtcbn0oKTsgLy8gUHJpbnQgYSBzaW1wbGlmaWVkIGZvcm0gd2hlbiBhcHBlYXJpbmcgaW4gYGluc3BlY3RgIGFuZCBgdXRpbC5pbnNwZWN0YC5cblxuZGVmaW5lSW5zcGVjdChHcmFwaFFMT2JqZWN0VHlwZSk7XG5cbmZ1bmN0aW9uIGRlZmluZUludGVyZmFjZXMoY29uZmlnKSB7XG4gIHZhciBfcmVzb2x2ZVRodW5rO1xuXG4gIHZhciBpbnRlcmZhY2VzID0gKF9yZXNvbHZlVGh1bmsgPSByZXNvbHZlVGh1bmsoY29uZmlnLmludGVyZmFjZXMpKSAhPT0gbnVsbCAmJiBfcmVzb2x2ZVRodW5rICE9PSB2b2lkIDAgPyBfcmVzb2x2ZVRodW5rIDogW107XG4gIEFycmF5LmlzQXJyYXkoaW50ZXJmYWNlcykgfHwgZGV2QXNzZXJ0KDAsIFwiXCIuY29uY2F0KGNvbmZpZy5uYW1lLCBcIiBpbnRlcmZhY2VzIG11c3QgYmUgYW4gQXJyYXkgb3IgYSBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGFuIEFycmF5LlwiKSk7XG4gIHJldHVybiBpbnRlcmZhY2VzO1xufVxuXG5mdW5jdGlvbiBkZWZpbmVGaWVsZE1hcChjb25maWcpIHtcbiAgdmFyIGZpZWxkTWFwID0gcmVzb2x2ZVRodW5rKGNvbmZpZy5maWVsZHMpO1xuICBpc1BsYWluT2JqKGZpZWxkTWFwKSB8fCBkZXZBc3NlcnQoMCwgXCJcIi5jb25jYXQoY29uZmlnLm5hbWUsIFwiIGZpZWxkcyBtdXN0IGJlIGFuIG9iamVjdCB3aXRoIGZpZWxkIG5hbWVzIGFzIGtleXMgb3IgYSBmdW5jdGlvbiB3aGljaCByZXR1cm5zIHN1Y2ggYW4gb2JqZWN0LlwiKSk7XG4gIHJldHVybiBtYXBWYWx1ZShmaWVsZE1hcCwgZnVuY3Rpb24gKGZpZWxkQ29uZmlnLCBmaWVsZE5hbWUpIHtcbiAgICB2YXIgX2ZpZWxkQ29uZmlnJGFyZ3M7XG5cbiAgICBpc1BsYWluT2JqKGZpZWxkQ29uZmlnKSB8fCBkZXZBc3NlcnQoMCwgXCJcIi5jb25jYXQoY29uZmlnLm5hbWUsIFwiLlwiKS5jb25jYXQoZmllbGROYW1lLCBcIiBmaWVsZCBjb25maWcgbXVzdCBiZSBhbiBvYmplY3QuXCIpKTtcbiAgICAhKCdpc0RlcHJlY2F0ZWQnIGluIGZpZWxkQ29uZmlnKSB8fCBkZXZBc3NlcnQoMCwgXCJcIi5jb25jYXQoY29uZmlnLm5hbWUsIFwiLlwiKS5jb25jYXQoZmllbGROYW1lLCBcIiBzaG91bGQgcHJvdmlkZSBcXFwiZGVwcmVjYXRpb25SZWFzb25cXFwiIGluc3RlYWQgb2YgXFxcImlzRGVwcmVjYXRlZFxcXCIuXCIpKTtcbiAgICBmaWVsZENvbmZpZy5yZXNvbHZlID09IG51bGwgfHwgdHlwZW9mIGZpZWxkQ29uZmlnLnJlc29sdmUgPT09ICdmdW5jdGlvbicgfHwgZGV2QXNzZXJ0KDAsIFwiXCIuY29uY2F0KGNvbmZpZy5uYW1lLCBcIi5cIikuY29uY2F0KGZpZWxkTmFtZSwgXCIgZmllbGQgcmVzb2x2ZXIgbXVzdCBiZSBhIGZ1bmN0aW9uIGlmIFwiKSArIFwicHJvdmlkZWQsIGJ1dCBnb3Q6IFwiLmNvbmNhdChpbnNwZWN0KGZpZWxkQ29uZmlnLnJlc29sdmUpLCBcIi5cIikpO1xuICAgIHZhciBhcmdzQ29uZmlnID0gKF9maWVsZENvbmZpZyRhcmdzID0gZmllbGRDb25maWcuYXJncykgIT09IG51bGwgJiYgX2ZpZWxkQ29uZmlnJGFyZ3MgIT09IHZvaWQgMCA/IF9maWVsZENvbmZpZyRhcmdzIDoge307XG4gICAgaXNQbGFpbk9iaihhcmdzQ29uZmlnKSB8fCBkZXZBc3NlcnQoMCwgXCJcIi5jb25jYXQoY29uZmlnLm5hbWUsIFwiLlwiKS5jb25jYXQoZmllbGROYW1lLCBcIiBhcmdzIG11c3QgYmUgYW4gb2JqZWN0IHdpdGggYXJndW1lbnQgbmFtZXMgYXMga2V5cy5cIikpO1xuICAgIHZhciBhcmdzID0gb2JqZWN0RW50cmllcyhhcmdzQ29uZmlnKS5tYXAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgIHZhciBhcmdOYW1lID0gX3JlZlswXSxcbiAgICAgICAgICBhcmdDb25maWcgPSBfcmVmWzFdO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbmFtZTogYXJnTmFtZSxcbiAgICAgICAgZGVzY3JpcHRpb246IGFyZ0NvbmZpZy5kZXNjcmlwdGlvbixcbiAgICAgICAgdHlwZTogYXJnQ29uZmlnLnR5cGUsXG4gICAgICAgIGRlZmF1bHRWYWx1ZTogYXJnQ29uZmlnLmRlZmF1bHRWYWx1ZSxcbiAgICAgICAgZGVwcmVjYXRpb25SZWFzb246IGFyZ0NvbmZpZy5kZXByZWNhdGlvblJlYXNvbixcbiAgICAgICAgZXh0ZW5zaW9uczogYXJnQ29uZmlnLmV4dGVuc2lvbnMgJiYgdG9PYmpNYXAoYXJnQ29uZmlnLmV4dGVuc2lvbnMpLFxuICAgICAgICBhc3ROb2RlOiBhcmdDb25maWcuYXN0Tm9kZVxuICAgICAgfTtcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogZmllbGROYW1lLFxuICAgICAgZGVzY3JpcHRpb246IGZpZWxkQ29uZmlnLmRlc2NyaXB0aW9uLFxuICAgICAgdHlwZTogZmllbGRDb25maWcudHlwZSxcbiAgICAgIGFyZ3M6IGFyZ3MsXG4gICAgICByZXNvbHZlOiBmaWVsZENvbmZpZy5yZXNvbHZlLFxuICAgICAgc3Vic2NyaWJlOiBmaWVsZENvbmZpZy5zdWJzY3JpYmUsXG4gICAgICBpc0RlcHJlY2F0ZWQ6IGZpZWxkQ29uZmlnLmRlcHJlY2F0aW9uUmVhc29uICE9IG51bGwsXG4gICAgICBkZXByZWNhdGlvblJlYXNvbjogZmllbGRDb25maWcuZGVwcmVjYXRpb25SZWFzb24sXG4gICAgICBleHRlbnNpb25zOiBmaWVsZENvbmZpZy5leHRlbnNpb25zICYmIHRvT2JqTWFwKGZpZWxkQ29uZmlnLmV4dGVuc2lvbnMpLFxuICAgICAgYXN0Tm9kZTogZmllbGRDb25maWcuYXN0Tm9kZVxuICAgIH07XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBpc1BsYWluT2JqKG9iaikge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKG9iaikgJiYgIUFycmF5LmlzQXJyYXkob2JqKTtcbn1cblxuZnVuY3Rpb24gZmllbGRzVG9GaWVsZHNDb25maWcoZmllbGRzKSB7XG4gIHJldHVybiBtYXBWYWx1ZShmaWVsZHMsIGZ1bmN0aW9uIChmaWVsZCkge1xuICAgIHJldHVybiB7XG4gICAgICBkZXNjcmlwdGlvbjogZmllbGQuZGVzY3JpcHRpb24sXG4gICAgICB0eXBlOiBmaWVsZC50eXBlLFxuICAgICAgYXJnczogYXJnc1RvQXJnc0NvbmZpZyhmaWVsZC5hcmdzKSxcbiAgICAgIHJlc29sdmU6IGZpZWxkLnJlc29sdmUsXG4gICAgICBzdWJzY3JpYmU6IGZpZWxkLnN1YnNjcmliZSxcbiAgICAgIGRlcHJlY2F0aW9uUmVhc29uOiBmaWVsZC5kZXByZWNhdGlvblJlYXNvbixcbiAgICAgIGV4dGVuc2lvbnM6IGZpZWxkLmV4dGVuc2lvbnMsXG4gICAgICBhc3ROb2RlOiBmaWVsZC5hc3ROb2RlXG4gICAgfTtcbiAgfSk7XG59XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5cblxuZXhwb3J0IGZ1bmN0aW9uIGFyZ3NUb0FyZ3NDb25maWcoYXJncykge1xuICByZXR1cm4ga2V5VmFsTWFwKGFyZ3MsIGZ1bmN0aW9uIChhcmcpIHtcbiAgICByZXR1cm4gYXJnLm5hbWU7XG4gIH0sIGZ1bmN0aW9uIChhcmcpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZGVzY3JpcHRpb246IGFyZy5kZXNjcmlwdGlvbixcbiAgICAgIHR5cGU6IGFyZy50eXBlLFxuICAgICAgZGVmYXVsdFZhbHVlOiBhcmcuZGVmYXVsdFZhbHVlLFxuICAgICAgZGVwcmVjYXRpb25SZWFzb246IGFyZy5kZXByZWNhdGlvblJlYXNvbixcbiAgICAgIGV4dGVuc2lvbnM6IGFyZy5leHRlbnNpb25zLFxuICAgICAgYXN0Tm9kZTogYXJnLmFzdE5vZGVcbiAgICB9O1xuICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1JlcXVpcmVkQXJndW1lbnQoYXJnKSB7XG4gIHJldHVybiBpc05vbk51bGxUeXBlKGFyZy50eXBlKSAmJiBhcmcuZGVmYXVsdFZhbHVlID09PSB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogSW50ZXJmYWNlIFR5cGUgRGVmaW5pdGlvblxuICpcbiAqIFdoZW4gYSBmaWVsZCBjYW4gcmV0dXJuIG9uZSBvZiBhIGhldGVyb2dlbmVvdXMgc2V0IG9mIHR5cGVzLCBhIEludGVyZmFjZSB0eXBlXG4gKiBpcyB1c2VkIHRvIGRlc2NyaWJlIHdoYXQgdHlwZXMgYXJlIHBvc3NpYmxlLCB3aGF0IGZpZWxkcyBhcmUgaW4gY29tbW9uIGFjcm9zc1xuICogYWxsIHR5cGVzLCBhcyB3ZWxsIGFzIGEgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIHdoaWNoIHR5cGUgaXMgYWN0dWFsbHkgdXNlZFxuICogd2hlbiB0aGUgZmllbGQgaXMgcmVzb2x2ZWQuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiAgICAgY29uc3QgRW50aXR5VHlwZSA9IG5ldyBHcmFwaFFMSW50ZXJmYWNlVHlwZSh7XG4gKiAgICAgICBuYW1lOiAnRW50aXR5JyxcbiAqICAgICAgIGZpZWxkczoge1xuICogICAgICAgICBuYW1lOiB7IHR5cGU6IEdyYXBoUUxTdHJpbmcgfVxuICogICAgICAgfVxuICogICAgIH0pO1xuICpcbiAqL1xuZXhwb3J0IHZhciBHcmFwaFFMSW50ZXJmYWNlVHlwZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEdyYXBoUUxJbnRlcmZhY2VUeXBlKGNvbmZpZykge1xuICAgIHRoaXMubmFtZSA9IGNvbmZpZy5uYW1lO1xuICAgIHRoaXMuZGVzY3JpcHRpb24gPSBjb25maWcuZGVzY3JpcHRpb247XG4gICAgdGhpcy5yZXNvbHZlVHlwZSA9IGNvbmZpZy5yZXNvbHZlVHlwZTtcbiAgICB0aGlzLmV4dGVuc2lvbnMgPSBjb25maWcuZXh0ZW5zaW9ucyAmJiB0b09iak1hcChjb25maWcuZXh0ZW5zaW9ucyk7XG4gICAgdGhpcy5hc3ROb2RlID0gY29uZmlnLmFzdE5vZGU7XG4gICAgdGhpcy5leHRlbnNpb25BU1ROb2RlcyA9IHVuZGVmaW5lSWZFbXB0eShjb25maWcuZXh0ZW5zaW9uQVNUTm9kZXMpO1xuICAgIHRoaXMuX2ZpZWxkcyA9IGRlZmluZUZpZWxkTWFwLmJpbmQodW5kZWZpbmVkLCBjb25maWcpO1xuICAgIHRoaXMuX2ludGVyZmFjZXMgPSBkZWZpbmVJbnRlcmZhY2VzLmJpbmQodW5kZWZpbmVkLCBjb25maWcpO1xuICAgIHR5cGVvZiBjb25maWcubmFtZSA9PT0gJ3N0cmluZycgfHwgZGV2QXNzZXJ0KDAsICdNdXN0IHByb3ZpZGUgbmFtZS4nKTtcbiAgICBjb25maWcucmVzb2x2ZVR5cGUgPT0gbnVsbCB8fCB0eXBlb2YgY29uZmlnLnJlc29sdmVUeXBlID09PSAnZnVuY3Rpb24nIHx8IGRldkFzc2VydCgwLCBcIlwiLmNvbmNhdCh0aGlzLm5hbWUsIFwiIG11c3QgcHJvdmlkZSBcXFwicmVzb2x2ZVR5cGVcXFwiIGFzIGEgZnVuY3Rpb24sIFwiKSArIFwiYnV0IGdvdDogXCIuY29uY2F0KGluc3BlY3QoY29uZmlnLnJlc29sdmVUeXBlKSwgXCIuXCIpKTtcbiAgfVxuXG4gIHZhciBfcHJvdG8zID0gR3JhcGhRTEludGVyZmFjZVR5cGUucHJvdG90eXBlO1xuXG4gIF9wcm90bzMuZ2V0RmllbGRzID0gZnVuY3Rpb24gZ2V0RmllbGRzKCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5fZmllbGRzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzLl9maWVsZHMgPSB0aGlzLl9maWVsZHMoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fZmllbGRzO1xuICB9O1xuXG4gIF9wcm90bzMuZ2V0SW50ZXJmYWNlcyA9IGZ1bmN0aW9uIGdldEludGVyZmFjZXMoKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLl9pbnRlcmZhY2VzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzLl9pbnRlcmZhY2VzID0gdGhpcy5faW50ZXJmYWNlcygpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9pbnRlcmZhY2VzO1xuICB9O1xuXG4gIF9wcm90bzMudG9Db25maWcgPSBmdW5jdGlvbiB0b0NvbmZpZygpIHtcbiAgICB2YXIgX3RoaXMkZXh0ZW5zaW9uQVNUTm9kMjtcblxuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICBkZXNjcmlwdGlvbjogdGhpcy5kZXNjcmlwdGlvbixcbiAgICAgIGludGVyZmFjZXM6IHRoaXMuZ2V0SW50ZXJmYWNlcygpLFxuICAgICAgZmllbGRzOiBmaWVsZHNUb0ZpZWxkc0NvbmZpZyh0aGlzLmdldEZpZWxkcygpKSxcbiAgICAgIHJlc29sdmVUeXBlOiB0aGlzLnJlc29sdmVUeXBlLFxuICAgICAgZXh0ZW5zaW9uczogdGhpcy5leHRlbnNpb25zLFxuICAgICAgYXN0Tm9kZTogdGhpcy5hc3ROb2RlLFxuICAgICAgZXh0ZW5zaW9uQVNUTm9kZXM6IChfdGhpcyRleHRlbnNpb25BU1ROb2QyID0gdGhpcy5leHRlbnNpb25BU1ROb2RlcykgIT09IG51bGwgJiYgX3RoaXMkZXh0ZW5zaW9uQVNUTm9kMiAhPT0gdm9pZCAwID8gX3RoaXMkZXh0ZW5zaW9uQVNUTm9kMiA6IFtdXG4gICAgfTtcbiAgfTtcblxuICBfcHJvdG8zLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubmFtZTtcbiAgfTtcblxuICBfcHJvdG8zLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICByZXR1cm4gdGhpcy50b1N0cmluZygpO1xuICB9IC8vICRGbG93Rml4TWVbdW5zdXBwb3J0ZWQtc3ludGF4XSBGbG93IGRvZXNuJ3Qgc3VwcG9ydCBjb21wdXRlZCBwcm9wZXJ0aWVzIHlldFxuICA7XG5cbiAgX2NyZWF0ZUNsYXNzKEdyYXBoUUxJbnRlcmZhY2VUeXBlLCBbe1xuICAgIGtleTogU1lNQk9MX1RPX1NUUklOR19UQUcsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gJ0dyYXBoUUxJbnRlcmZhY2VUeXBlJztcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gR3JhcGhRTEludGVyZmFjZVR5cGU7XG59KCk7IC8vIFByaW50IGEgc2ltcGxpZmllZCBmb3JtIHdoZW4gYXBwZWFyaW5nIGluIGBpbnNwZWN0YCBhbmQgYHV0aWwuaW5zcGVjdGAuXG5cbmRlZmluZUluc3BlY3QoR3JhcGhRTEludGVyZmFjZVR5cGUpO1xuXG4vKipcbiAqIFVuaW9uIFR5cGUgRGVmaW5pdGlvblxuICpcbiAqIFdoZW4gYSBmaWVsZCBjYW4gcmV0dXJuIG9uZSBvZiBhIGhldGVyb2dlbmVvdXMgc2V0IG9mIHR5cGVzLCBhIFVuaW9uIHR5cGVcbiAqIGlzIHVzZWQgdG8gZGVzY3JpYmUgd2hhdCB0eXBlcyBhcmUgcG9zc2libGUgYXMgd2VsbCBhcyBwcm92aWRpbmcgYSBmdW5jdGlvblxuICogdG8gZGV0ZXJtaW5lIHdoaWNoIHR5cGUgaXMgYWN0dWFsbHkgdXNlZCB3aGVuIHRoZSBmaWVsZCBpcyByZXNvbHZlZC5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqICAgICBjb25zdCBQZXRUeXBlID0gbmV3IEdyYXBoUUxVbmlvblR5cGUoe1xuICogICAgICAgbmFtZTogJ1BldCcsXG4gKiAgICAgICB0eXBlczogWyBEb2dUeXBlLCBDYXRUeXBlIF0sXG4gKiAgICAgICByZXNvbHZlVHlwZSh2YWx1ZSkge1xuICogICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBEb2cpIHtcbiAqICAgICAgICAgICByZXR1cm4gRG9nVHlwZTtcbiAqICAgICAgICAgfVxuICogICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBDYXQpIHtcbiAqICAgICAgICAgICByZXR1cm4gQ2F0VHlwZTtcbiAqICAgICAgICAgfVxuICogICAgICAgfVxuICogICAgIH0pO1xuICpcbiAqL1xuZXhwb3J0IHZhciBHcmFwaFFMVW5pb25UeXBlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gR3JhcGhRTFVuaW9uVHlwZShjb25maWcpIHtcbiAgICB0aGlzLm5hbWUgPSBjb25maWcubmFtZTtcbiAgICB0aGlzLmRlc2NyaXB0aW9uID0gY29uZmlnLmRlc2NyaXB0aW9uO1xuICAgIHRoaXMucmVzb2x2ZVR5cGUgPSBjb25maWcucmVzb2x2ZVR5cGU7XG4gICAgdGhpcy5leHRlbnNpb25zID0gY29uZmlnLmV4dGVuc2lvbnMgJiYgdG9PYmpNYXAoY29uZmlnLmV4dGVuc2lvbnMpO1xuICAgIHRoaXMuYXN0Tm9kZSA9IGNvbmZpZy5hc3ROb2RlO1xuICAgIHRoaXMuZXh0ZW5zaW9uQVNUTm9kZXMgPSB1bmRlZmluZUlmRW1wdHkoY29uZmlnLmV4dGVuc2lvbkFTVE5vZGVzKTtcbiAgICB0aGlzLl90eXBlcyA9IGRlZmluZVR5cGVzLmJpbmQodW5kZWZpbmVkLCBjb25maWcpO1xuICAgIHR5cGVvZiBjb25maWcubmFtZSA9PT0gJ3N0cmluZycgfHwgZGV2QXNzZXJ0KDAsICdNdXN0IHByb3ZpZGUgbmFtZS4nKTtcbiAgICBjb25maWcucmVzb2x2ZVR5cGUgPT0gbnVsbCB8fCB0eXBlb2YgY29uZmlnLnJlc29sdmVUeXBlID09PSAnZnVuY3Rpb24nIHx8IGRldkFzc2VydCgwLCBcIlwiLmNvbmNhdCh0aGlzLm5hbWUsIFwiIG11c3QgcHJvdmlkZSBcXFwicmVzb2x2ZVR5cGVcXFwiIGFzIGEgZnVuY3Rpb24sIFwiKSArIFwiYnV0IGdvdDogXCIuY29uY2F0KGluc3BlY3QoY29uZmlnLnJlc29sdmVUeXBlKSwgXCIuXCIpKTtcbiAgfVxuXG4gIHZhciBfcHJvdG80ID0gR3JhcGhRTFVuaW9uVHlwZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvNC5nZXRUeXBlcyA9IGZ1bmN0aW9uIGdldFR5cGVzKCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5fdHlwZXMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRoaXMuX3R5cGVzID0gdGhpcy5fdHlwZXMoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fdHlwZXM7XG4gIH07XG5cbiAgX3Byb3RvNC50b0NvbmZpZyA9IGZ1bmN0aW9uIHRvQ29uZmlnKCkge1xuICAgIHZhciBfdGhpcyRleHRlbnNpb25BU1ROb2QzO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLmRlc2NyaXB0aW9uLFxuICAgICAgdHlwZXM6IHRoaXMuZ2V0VHlwZXMoKSxcbiAgICAgIHJlc29sdmVUeXBlOiB0aGlzLnJlc29sdmVUeXBlLFxuICAgICAgZXh0ZW5zaW9uczogdGhpcy5leHRlbnNpb25zLFxuICAgICAgYXN0Tm9kZTogdGhpcy5hc3ROb2RlLFxuICAgICAgZXh0ZW5zaW9uQVNUTm9kZXM6IChfdGhpcyRleHRlbnNpb25BU1ROb2QzID0gdGhpcy5leHRlbnNpb25BU1ROb2RlcykgIT09IG51bGwgJiYgX3RoaXMkZXh0ZW5zaW9uQVNUTm9kMyAhPT0gdm9pZCAwID8gX3RoaXMkZXh0ZW5zaW9uQVNUTm9kMyA6IFtdXG4gICAgfTtcbiAgfTtcblxuICBfcHJvdG80LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubmFtZTtcbiAgfTtcblxuICBfcHJvdG80LnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICByZXR1cm4gdGhpcy50b1N0cmluZygpO1xuICB9IC8vICRGbG93Rml4TWVbdW5zdXBwb3J0ZWQtc3ludGF4XSBGbG93IGRvZXNuJ3Qgc3VwcG9ydCBjb21wdXRlZCBwcm9wZXJ0aWVzIHlldFxuICA7XG5cbiAgX2NyZWF0ZUNsYXNzKEdyYXBoUUxVbmlvblR5cGUsIFt7XG4gICAga2V5OiBTWU1CT0xfVE9fU1RSSU5HX1RBRyxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiAnR3JhcGhRTFVuaW9uVHlwZSc7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEdyYXBoUUxVbmlvblR5cGU7XG59KCk7IC8vIFByaW50IGEgc2ltcGxpZmllZCBmb3JtIHdoZW4gYXBwZWFyaW5nIGluIGBpbnNwZWN0YCBhbmQgYHV0aWwuaW5zcGVjdGAuXG5cbmRlZmluZUluc3BlY3QoR3JhcGhRTFVuaW9uVHlwZSk7XG5cbmZ1bmN0aW9uIGRlZmluZVR5cGVzKGNvbmZpZykge1xuICB2YXIgdHlwZXMgPSByZXNvbHZlVGh1bmsoY29uZmlnLnR5cGVzKTtcbiAgQXJyYXkuaXNBcnJheSh0eXBlcykgfHwgZGV2QXNzZXJ0KDAsIFwiTXVzdCBwcm92aWRlIEFycmF5IG9mIHR5cGVzIG9yIGEgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBzdWNoIGFuIGFycmF5IGZvciBVbmlvbiBcIi5jb25jYXQoY29uZmlnLm5hbWUsIFwiLlwiKSk7XG4gIHJldHVybiB0eXBlcztcbn1cblxuLyoqXG4gKiBFbnVtIFR5cGUgRGVmaW5pdGlvblxuICpcbiAqIFNvbWUgbGVhZiB2YWx1ZXMgb2YgcmVxdWVzdHMgYW5kIGlucHV0IHZhbHVlcyBhcmUgRW51bXMuIEdyYXBoUUwgc2VyaWFsaXplc1xuICogRW51bSB2YWx1ZXMgYXMgc3RyaW5ncywgaG93ZXZlciBpbnRlcm5hbGx5IEVudW1zIGNhbiBiZSByZXByZXNlbnRlZCBieSBhbnlcbiAqIGtpbmQgb2YgdHlwZSwgb2Z0ZW4gaW50ZWdlcnMuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiAgICAgY29uc3QgUkdCVHlwZSA9IG5ldyBHcmFwaFFMRW51bVR5cGUoe1xuICogICAgICAgbmFtZTogJ1JHQicsXG4gKiAgICAgICB2YWx1ZXM6IHtcbiAqICAgICAgICAgUkVEOiB7IHZhbHVlOiAwIH0sXG4gKiAgICAgICAgIEdSRUVOOiB7IHZhbHVlOiAxIH0sXG4gKiAgICAgICAgIEJMVUU6IHsgdmFsdWU6IDIgfVxuICogICAgICAgfVxuICogICAgIH0pO1xuICpcbiAqIE5vdGU6IElmIGEgdmFsdWUgaXMgbm90IHByb3ZpZGVkIGluIGEgZGVmaW5pdGlvbiwgdGhlIG5hbWUgb2YgdGhlIGVudW0gdmFsdWVcbiAqIHdpbGwgYmUgdXNlZCBhcyBpdHMgaW50ZXJuYWwgdmFsdWUuXG4gKi9cbmV4cG9ydCB2YXIgR3JhcGhRTEVudW1UeXBlXG4vKiA8VD4gKi9cbj0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gR3JhcGhRTEVudW1UeXBlKGNvbmZpZykge1xuICAgIHRoaXMubmFtZSA9IGNvbmZpZy5uYW1lO1xuICAgIHRoaXMuZGVzY3JpcHRpb24gPSBjb25maWcuZGVzY3JpcHRpb247XG4gICAgdGhpcy5leHRlbnNpb25zID0gY29uZmlnLmV4dGVuc2lvbnMgJiYgdG9PYmpNYXAoY29uZmlnLmV4dGVuc2lvbnMpO1xuICAgIHRoaXMuYXN0Tm9kZSA9IGNvbmZpZy5hc3ROb2RlO1xuICAgIHRoaXMuZXh0ZW5zaW9uQVNUTm9kZXMgPSB1bmRlZmluZUlmRW1wdHkoY29uZmlnLmV4dGVuc2lvbkFTVE5vZGVzKTtcbiAgICB0aGlzLl92YWx1ZXMgPSBkZWZpbmVFbnVtVmFsdWVzKHRoaXMubmFtZSwgY29uZmlnLnZhbHVlcyk7XG4gICAgdGhpcy5fdmFsdWVMb29rdXAgPSBuZXcgTWFwKHRoaXMuX3ZhbHVlcy5tYXAoZnVuY3Rpb24gKGVudW1WYWx1ZSkge1xuICAgICAgcmV0dXJuIFtlbnVtVmFsdWUudmFsdWUsIGVudW1WYWx1ZV07XG4gICAgfSkpO1xuICAgIHRoaXMuX25hbWVMb29rdXAgPSBrZXlNYXAodGhpcy5fdmFsdWVzLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZS5uYW1lO1xuICAgIH0pO1xuICAgIHR5cGVvZiBjb25maWcubmFtZSA9PT0gJ3N0cmluZycgfHwgZGV2QXNzZXJ0KDAsICdNdXN0IHByb3ZpZGUgbmFtZS4nKTtcbiAgfVxuXG4gIHZhciBfcHJvdG81ID0gR3JhcGhRTEVudW1UeXBlLnByb3RvdHlwZTtcblxuICBfcHJvdG81LmdldFZhbHVlcyA9IGZ1bmN0aW9uIGdldFZhbHVlcygpIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWVzO1xuICB9O1xuXG4gIF9wcm90bzUuZ2V0VmFsdWUgPSBmdW5jdGlvbiBnZXRWYWx1ZShuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuX25hbWVMb29rdXBbbmFtZV07XG4gIH07XG5cbiAgX3Byb3RvNS5zZXJpYWxpemUgPSBmdW5jdGlvbiBzZXJpYWxpemUob3V0cHV0VmFsdWUpIHtcbiAgICB2YXIgZW51bVZhbHVlID0gdGhpcy5fdmFsdWVMb29rdXAuZ2V0KG91dHB1dFZhbHVlKTtcblxuICAgIGlmIChlbnVtVmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEdyYXBoUUxFcnJvcihcIkVudW0gXFxcIlwiLmNvbmNhdCh0aGlzLm5hbWUsIFwiXFxcIiBjYW5ub3QgcmVwcmVzZW50IHZhbHVlOiBcIikuY29uY2F0KGluc3BlY3Qob3V0cHV0VmFsdWUpKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVudW1WYWx1ZS5uYW1lO1xuICB9O1xuXG4gIF9wcm90bzUucGFyc2VWYWx1ZSA9IGZ1bmN0aW9uIHBhcnNlVmFsdWUoaW5wdXRWYWx1ZSlcbiAgLyogVCAqL1xuICB7XG4gICAgaWYgKHR5cGVvZiBpbnB1dFZhbHVlICE9PSAnc3RyaW5nJykge1xuICAgICAgdmFyIHZhbHVlU3RyID0gaW5zcGVjdChpbnB1dFZhbHVlKTtcbiAgICAgIHRocm93IG5ldyBHcmFwaFFMRXJyb3IoXCJFbnVtIFxcXCJcIi5jb25jYXQodGhpcy5uYW1lLCBcIlxcXCIgY2Fubm90IHJlcHJlc2VudCBub24tc3RyaW5nIHZhbHVlOiBcIikuY29uY2F0KHZhbHVlU3RyLCBcIi5cIikgKyBkaWRZb3VNZWFuRW51bVZhbHVlKHRoaXMsIHZhbHVlU3RyKSk7XG4gICAgfVxuXG4gICAgdmFyIGVudW1WYWx1ZSA9IHRoaXMuZ2V0VmFsdWUoaW5wdXRWYWx1ZSk7XG5cbiAgICBpZiAoZW51bVZhbHVlID09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBHcmFwaFFMRXJyb3IoXCJWYWx1ZSBcXFwiXCIuY29uY2F0KGlucHV0VmFsdWUsIFwiXFxcIiBkb2VzIG5vdCBleGlzdCBpbiBcXFwiXCIpLmNvbmNhdCh0aGlzLm5hbWUsIFwiXFxcIiBlbnVtLlwiKSArIGRpZFlvdU1lYW5FbnVtVmFsdWUodGhpcywgaW5wdXRWYWx1ZSkpO1xuICAgIH1cblxuICAgIHJldHVybiBlbnVtVmFsdWUudmFsdWU7XG4gIH07XG5cbiAgX3Byb3RvNS5wYXJzZUxpdGVyYWwgPSBmdW5jdGlvbiBwYXJzZUxpdGVyYWwodmFsdWVOb2RlLCBfdmFyaWFibGVzKVxuICAvKiBUICovXG4gIHtcbiAgICAvLyBOb3RlOiB2YXJpYWJsZXMgd2lsbCBiZSByZXNvbHZlZCB0byBhIHZhbHVlIGJlZm9yZSBjYWxsaW5nIHRoaXMgZnVuY3Rpb24uXG4gICAgaWYgKHZhbHVlTm9kZS5raW5kICE9PSBLaW5kLkVOVU0pIHtcbiAgICAgIHZhciB2YWx1ZVN0ciA9IHByaW50KHZhbHVlTm9kZSk7XG4gICAgICB0aHJvdyBuZXcgR3JhcGhRTEVycm9yKFwiRW51bSBcXFwiXCIuY29uY2F0KHRoaXMubmFtZSwgXCJcXFwiIGNhbm5vdCByZXByZXNlbnQgbm9uLWVudW0gdmFsdWU6IFwiKS5jb25jYXQodmFsdWVTdHIsIFwiLlwiKSArIGRpZFlvdU1lYW5FbnVtVmFsdWUodGhpcywgdmFsdWVTdHIpLCB2YWx1ZU5vZGUpO1xuICAgIH1cblxuICAgIHZhciBlbnVtVmFsdWUgPSB0aGlzLmdldFZhbHVlKHZhbHVlTm9kZS52YWx1ZSk7XG5cbiAgICBpZiAoZW51bVZhbHVlID09IG51bGwpIHtcbiAgICAgIHZhciBfdmFsdWVTdHIgPSBwcmludCh2YWx1ZU5vZGUpO1xuXG4gICAgICB0aHJvdyBuZXcgR3JhcGhRTEVycm9yKFwiVmFsdWUgXFxcIlwiLmNvbmNhdChfdmFsdWVTdHIsIFwiXFxcIiBkb2VzIG5vdCBleGlzdCBpbiBcXFwiXCIpLmNvbmNhdCh0aGlzLm5hbWUsIFwiXFxcIiBlbnVtLlwiKSArIGRpZFlvdU1lYW5FbnVtVmFsdWUodGhpcywgX3ZhbHVlU3RyKSwgdmFsdWVOb2RlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZW51bVZhbHVlLnZhbHVlO1xuICB9O1xuXG4gIF9wcm90bzUudG9Db25maWcgPSBmdW5jdGlvbiB0b0NvbmZpZygpIHtcbiAgICB2YXIgX3RoaXMkZXh0ZW5zaW9uQVNUTm9kNDtcblxuICAgIHZhciB2YWx1ZXMgPSBrZXlWYWxNYXAodGhpcy5nZXRWYWx1ZXMoKSwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUubmFtZTtcbiAgICB9LCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRlc2NyaXB0aW9uOiB2YWx1ZS5kZXNjcmlwdGlvbixcbiAgICAgICAgdmFsdWU6IHZhbHVlLnZhbHVlLFxuICAgICAgICBkZXByZWNhdGlvblJlYXNvbjogdmFsdWUuZGVwcmVjYXRpb25SZWFzb24sXG4gICAgICAgIGV4dGVuc2lvbnM6IHZhbHVlLmV4dGVuc2lvbnMsXG4gICAgICAgIGFzdE5vZGU6IHZhbHVlLmFzdE5vZGVcbiAgICAgIH07XG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLmRlc2NyaXB0aW9uLFxuICAgICAgdmFsdWVzOiB2YWx1ZXMsXG4gICAgICBleHRlbnNpb25zOiB0aGlzLmV4dGVuc2lvbnMsXG4gICAgICBhc3ROb2RlOiB0aGlzLmFzdE5vZGUsXG4gICAgICBleHRlbnNpb25BU1ROb2RlczogKF90aGlzJGV4dGVuc2lvbkFTVE5vZDQgPSB0aGlzLmV4dGVuc2lvbkFTVE5vZGVzKSAhPT0gbnVsbCAmJiBfdGhpcyRleHRlbnNpb25BU1ROb2Q0ICE9PSB2b2lkIDAgPyBfdGhpcyRleHRlbnNpb25BU1ROb2Q0IDogW11cbiAgICB9O1xuICB9O1xuXG4gIF9wcm90bzUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5uYW1lO1xuICB9O1xuXG4gIF9wcm90bzUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKCk7XG4gIH0gLy8gJEZsb3dGaXhNZVt1bnN1cHBvcnRlZC1zeW50YXhdIEZsb3cgZG9lc24ndCBzdXBwb3J0IGNvbXB1dGVkIHByb3BlcnRpZXMgeWV0XG4gIDtcblxuICBfY3JlYXRlQ2xhc3MoR3JhcGhRTEVudW1UeXBlLCBbe1xuICAgIGtleTogU1lNQk9MX1RPX1NUUklOR19UQUcsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gJ0dyYXBoUUxFbnVtVHlwZSc7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEdyYXBoUUxFbnVtVHlwZTtcbn0oKTsgLy8gUHJpbnQgYSBzaW1wbGlmaWVkIGZvcm0gd2hlbiBhcHBlYXJpbmcgaW4gYGluc3BlY3RgIGFuZCBgdXRpbC5pbnNwZWN0YC5cblxuZGVmaW5lSW5zcGVjdChHcmFwaFFMRW51bVR5cGUpO1xuXG5mdW5jdGlvbiBkaWRZb3VNZWFuRW51bVZhbHVlKGVudW1UeXBlLCB1bmtub3duVmFsdWVTdHIpIHtcbiAgdmFyIGFsbE5hbWVzID0gZW51bVR5cGUuZ2V0VmFsdWVzKCkubWFwKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZS5uYW1lO1xuICB9KTtcbiAgdmFyIHN1Z2dlc3RlZFZhbHVlcyA9IHN1Z2dlc3Rpb25MaXN0KHVua25vd25WYWx1ZVN0ciwgYWxsTmFtZXMpO1xuICByZXR1cm4gZGlkWW91TWVhbigndGhlIGVudW0gdmFsdWUnLCBzdWdnZXN0ZWRWYWx1ZXMpO1xufVxuXG5mdW5jdGlvbiBkZWZpbmVFbnVtVmFsdWVzKHR5cGVOYW1lLCB2YWx1ZU1hcCkge1xuICBpc1BsYWluT2JqKHZhbHVlTWFwKSB8fCBkZXZBc3NlcnQoMCwgXCJcIi5jb25jYXQodHlwZU5hbWUsIFwiIHZhbHVlcyBtdXN0IGJlIGFuIG9iamVjdCB3aXRoIHZhbHVlIG5hbWVzIGFzIGtleXMuXCIpKTtcbiAgcmV0dXJuIG9iamVjdEVudHJpZXModmFsdWVNYXApLm1hcChmdW5jdGlvbiAoX3JlZjIpIHtcbiAgICB2YXIgdmFsdWVOYW1lID0gX3JlZjJbMF0sXG4gICAgICAgIHZhbHVlQ29uZmlnID0gX3JlZjJbMV07XG4gICAgaXNQbGFpbk9iaih2YWx1ZUNvbmZpZykgfHwgZGV2QXNzZXJ0KDAsIFwiXCIuY29uY2F0KHR5cGVOYW1lLCBcIi5cIikuY29uY2F0KHZhbHVlTmFtZSwgXCIgbXVzdCByZWZlciB0byBhbiBvYmplY3Qgd2l0aCBhIFxcXCJ2YWx1ZVxcXCIga2V5IFwiKSArIFwicmVwcmVzZW50aW5nIGFuIGludGVybmFsIHZhbHVlIGJ1dCBnb3Q6IFwiLmNvbmNhdChpbnNwZWN0KHZhbHVlQ29uZmlnKSwgXCIuXCIpKTtcbiAgICAhKCdpc0RlcHJlY2F0ZWQnIGluIHZhbHVlQ29uZmlnKSB8fCBkZXZBc3NlcnQoMCwgXCJcIi5jb25jYXQodHlwZU5hbWUsIFwiLlwiKS5jb25jYXQodmFsdWVOYW1lLCBcIiBzaG91bGQgcHJvdmlkZSBcXFwiZGVwcmVjYXRpb25SZWFzb25cXFwiIGluc3RlYWQgb2YgXFxcImlzRGVwcmVjYXRlZFxcXCIuXCIpKTtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogdmFsdWVOYW1lLFxuICAgICAgZGVzY3JpcHRpb246IHZhbHVlQ29uZmlnLmRlc2NyaXB0aW9uLFxuICAgICAgdmFsdWU6IHZhbHVlQ29uZmlnLnZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZUNvbmZpZy52YWx1ZSA6IHZhbHVlTmFtZSxcbiAgICAgIGlzRGVwcmVjYXRlZDogdmFsdWVDb25maWcuZGVwcmVjYXRpb25SZWFzb24gIT0gbnVsbCxcbiAgICAgIGRlcHJlY2F0aW9uUmVhc29uOiB2YWx1ZUNvbmZpZy5kZXByZWNhdGlvblJlYXNvbixcbiAgICAgIGV4dGVuc2lvbnM6IHZhbHVlQ29uZmlnLmV4dGVuc2lvbnMgJiYgdG9PYmpNYXAodmFsdWVDb25maWcuZXh0ZW5zaW9ucyksXG4gICAgICBhc3ROb2RlOiB2YWx1ZUNvbmZpZy5hc3ROb2RlXG4gICAgfTtcbiAgfSk7XG59XG5cbi8qKlxuICogSW5wdXQgT2JqZWN0IFR5cGUgRGVmaW5pdGlvblxuICpcbiAqIEFuIGlucHV0IG9iamVjdCBkZWZpbmVzIGEgc3RydWN0dXJlZCBjb2xsZWN0aW9uIG9mIGZpZWxkcyB3aGljaCBtYXkgYmVcbiAqIHN1cHBsaWVkIHRvIGEgZmllbGQgYXJndW1lbnQuXG4gKlxuICogVXNpbmcgYE5vbk51bGxgIHdpbGwgZW5zdXJlIHRoYXQgYSB2YWx1ZSBtdXN0IGJlIHByb3ZpZGVkIGJ5IHRoZSBxdWVyeVxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogICAgIGNvbnN0IEdlb1BvaW50ID0gbmV3IEdyYXBoUUxJbnB1dE9iamVjdFR5cGUoe1xuICogICAgICAgbmFtZTogJ0dlb1BvaW50JyxcbiAqICAgICAgIGZpZWxkczoge1xuICogICAgICAgICBsYXQ6IHsgdHlwZTogbmV3IEdyYXBoUUxOb25OdWxsKEdyYXBoUUxGbG9hdCkgfSxcbiAqICAgICAgICAgbG9uOiB7IHR5cGU6IG5ldyBHcmFwaFFMTm9uTnVsbChHcmFwaFFMRmxvYXQpIH0sXG4gKiAgICAgICAgIGFsdDogeyB0eXBlOiBHcmFwaFFMRmxvYXQsIGRlZmF1bHRWYWx1ZTogMCB9LFxuICogICAgICAgfVxuICogICAgIH0pO1xuICpcbiAqL1xuZXhwb3J0IHZhciBHcmFwaFFMSW5wdXRPYmplY3RUeXBlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gR3JhcGhRTElucHV0T2JqZWN0VHlwZShjb25maWcpIHtcbiAgICB0aGlzLm5hbWUgPSBjb25maWcubmFtZTtcbiAgICB0aGlzLmRlc2NyaXB0aW9uID0gY29uZmlnLmRlc2NyaXB0aW9uO1xuICAgIHRoaXMuZXh0ZW5zaW9ucyA9IGNvbmZpZy5leHRlbnNpb25zICYmIHRvT2JqTWFwKGNvbmZpZy5leHRlbnNpb25zKTtcbiAgICB0aGlzLmFzdE5vZGUgPSBjb25maWcuYXN0Tm9kZTtcbiAgICB0aGlzLmV4dGVuc2lvbkFTVE5vZGVzID0gdW5kZWZpbmVJZkVtcHR5KGNvbmZpZy5leHRlbnNpb25BU1ROb2Rlcyk7XG4gICAgdGhpcy5fZmllbGRzID0gZGVmaW5lSW5wdXRGaWVsZE1hcC5iaW5kKHVuZGVmaW5lZCwgY29uZmlnKTtcbiAgICB0eXBlb2YgY29uZmlnLm5hbWUgPT09ICdzdHJpbmcnIHx8IGRldkFzc2VydCgwLCAnTXVzdCBwcm92aWRlIG5hbWUuJyk7XG4gIH1cblxuICB2YXIgX3Byb3RvNiA9IEdyYXBoUUxJbnB1dE9iamVjdFR5cGUucHJvdG90eXBlO1xuXG4gIF9wcm90bzYuZ2V0RmllbGRzID0gZnVuY3Rpb24gZ2V0RmllbGRzKCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5fZmllbGRzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzLl9maWVsZHMgPSB0aGlzLl9maWVsZHMoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fZmllbGRzO1xuICB9O1xuXG4gIF9wcm90bzYudG9Db25maWcgPSBmdW5jdGlvbiB0b0NvbmZpZygpIHtcbiAgICB2YXIgX3RoaXMkZXh0ZW5zaW9uQVNUTm9kNTtcblxuICAgIHZhciBmaWVsZHMgPSBtYXBWYWx1ZSh0aGlzLmdldEZpZWxkcygpLCBmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRlc2NyaXB0aW9uOiBmaWVsZC5kZXNjcmlwdGlvbixcbiAgICAgICAgdHlwZTogZmllbGQudHlwZSxcbiAgICAgICAgZGVmYXVsdFZhbHVlOiBmaWVsZC5kZWZhdWx0VmFsdWUsXG4gICAgICAgIGRlcHJlY2F0aW9uUmVhc29uOiBmaWVsZC5kZXByZWNhdGlvblJlYXNvbixcbiAgICAgICAgZXh0ZW5zaW9uczogZmllbGQuZXh0ZW5zaW9ucyxcbiAgICAgICAgYXN0Tm9kZTogZmllbGQuYXN0Tm9kZVxuICAgICAgfTtcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgZGVzY3JpcHRpb246IHRoaXMuZGVzY3JpcHRpb24sXG4gICAgICBmaWVsZHM6IGZpZWxkcyxcbiAgICAgIGV4dGVuc2lvbnM6IHRoaXMuZXh0ZW5zaW9ucyxcbiAgICAgIGFzdE5vZGU6IHRoaXMuYXN0Tm9kZSxcbiAgICAgIGV4dGVuc2lvbkFTVE5vZGVzOiAoX3RoaXMkZXh0ZW5zaW9uQVNUTm9kNSA9IHRoaXMuZXh0ZW5zaW9uQVNUTm9kZXMpICE9PSBudWxsICYmIF90aGlzJGV4dGVuc2lvbkFTVE5vZDUgIT09IHZvaWQgMCA/IF90aGlzJGV4dGVuc2lvbkFTVE5vZDUgOiBbXVxuICAgIH07XG4gIH07XG5cbiAgX3Byb3RvNi50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm5hbWU7XG4gIH07XG5cbiAgX3Byb3RvNi50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHRoaXMudG9TdHJpbmcoKTtcbiAgfSAvLyAkRmxvd0ZpeE1lW3Vuc3VwcG9ydGVkLXN5bnRheF0gRmxvdyBkb2Vzbid0IHN1cHBvcnQgY29tcHV0ZWQgcHJvcGVydGllcyB5ZXRcbiAgO1xuXG4gIF9jcmVhdGVDbGFzcyhHcmFwaFFMSW5wdXRPYmplY3RUeXBlLCBbe1xuICAgIGtleTogU1lNQk9MX1RPX1NUUklOR19UQUcsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gJ0dyYXBoUUxJbnB1dE9iamVjdFR5cGUnO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBHcmFwaFFMSW5wdXRPYmplY3RUeXBlO1xufSgpOyAvLyBQcmludCBhIHNpbXBsaWZpZWQgZm9ybSB3aGVuIGFwcGVhcmluZyBpbiBgaW5zcGVjdGAgYW5kIGB1dGlsLmluc3BlY3RgLlxuXG5kZWZpbmVJbnNwZWN0KEdyYXBoUUxJbnB1dE9iamVjdFR5cGUpO1xuXG5mdW5jdGlvbiBkZWZpbmVJbnB1dEZpZWxkTWFwKGNvbmZpZykge1xuICB2YXIgZmllbGRNYXAgPSByZXNvbHZlVGh1bmsoY29uZmlnLmZpZWxkcyk7XG4gIGlzUGxhaW5PYmooZmllbGRNYXApIHx8IGRldkFzc2VydCgwLCBcIlwiLmNvbmNhdChjb25maWcubmFtZSwgXCIgZmllbGRzIG11c3QgYmUgYW4gb2JqZWN0IHdpdGggZmllbGQgbmFtZXMgYXMga2V5cyBvciBhIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgc3VjaCBhbiBvYmplY3QuXCIpKTtcbiAgcmV0dXJuIG1hcFZhbHVlKGZpZWxkTWFwLCBmdW5jdGlvbiAoZmllbGRDb25maWcsIGZpZWxkTmFtZSkge1xuICAgICEoJ3Jlc29sdmUnIGluIGZpZWxkQ29uZmlnKSB8fCBkZXZBc3NlcnQoMCwgXCJcIi5jb25jYXQoY29uZmlnLm5hbWUsIFwiLlwiKS5jb25jYXQoZmllbGROYW1lLCBcIiBmaWVsZCBoYXMgYSByZXNvbHZlIHByb3BlcnR5LCBidXQgSW5wdXQgVHlwZXMgY2Fubm90IGRlZmluZSByZXNvbHZlcnMuXCIpKTtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogZmllbGROYW1lLFxuICAgICAgZGVzY3JpcHRpb246IGZpZWxkQ29uZmlnLmRlc2NyaXB0aW9uLFxuICAgICAgdHlwZTogZmllbGRDb25maWcudHlwZSxcbiAgICAgIGRlZmF1bHRWYWx1ZTogZmllbGRDb25maWcuZGVmYXVsdFZhbHVlLFxuICAgICAgZGVwcmVjYXRpb25SZWFzb246IGZpZWxkQ29uZmlnLmRlcHJlY2F0aW9uUmVhc29uLFxuICAgICAgZXh0ZW5zaW9uczogZmllbGRDb25maWcuZXh0ZW5zaW9ucyAmJiB0b09iak1hcChmaWVsZENvbmZpZy5leHRlbnNpb25zKSxcbiAgICAgIGFzdE5vZGU6IGZpZWxkQ29uZmlnLmFzdE5vZGVcbiAgICB9O1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzUmVxdWlyZWRJbnB1dEZpZWxkKGZpZWxkKSB7XG4gIHJldHVybiBpc05vbk51bGxUeXBlKGZpZWxkLnR5cGUpICYmIGZpZWxkLmRlZmF1bHRWYWx1ZSA9PT0gdW5kZWZpbmVkO1xufVxuIiwiZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5pbXBvcnQgb2JqZWN0RW50cmllcyBmcm9tIFwiLi4vcG9seWZpbGxzL29iamVjdEVudHJpZXMubWpzXCI7XG5pbXBvcnQgeyBTWU1CT0xfVE9fU1RSSU5HX1RBRyB9IGZyb20gXCIuLi9wb2x5ZmlsbHMvc3ltYm9scy5tanNcIjtcbmltcG9ydCBpbnNwZWN0IGZyb20gXCIuLi9qc3V0aWxzL2luc3BlY3QubWpzXCI7XG5pbXBvcnQgdG9PYmpNYXAgZnJvbSBcIi4uL2pzdXRpbHMvdG9PYmpNYXAubWpzXCI7XG5pbXBvcnQgZGV2QXNzZXJ0IGZyb20gXCIuLi9qc3V0aWxzL2RldkFzc2VydC5tanNcIjtcbmltcG9ydCBpbnN0YW5jZU9mIGZyb20gXCIuLi9qc3V0aWxzL2luc3RhbmNlT2YubWpzXCI7XG5pbXBvcnQgaXNPYmplY3RMaWtlIGZyb20gXCIuLi9qc3V0aWxzL2lzT2JqZWN0TGlrZS5tanNcIjtcbmltcG9ydCBkZWZpbmVJbnNwZWN0IGZyb20gXCIuLi9qc3V0aWxzL2RlZmluZUluc3BlY3QubWpzXCI7XG5pbXBvcnQgeyBEaXJlY3RpdmVMb2NhdGlvbiB9IGZyb20gXCIuLi9sYW5ndWFnZS9kaXJlY3RpdmVMb2NhdGlvbi5tanNcIjtcbmltcG9ydCB7IEdyYXBoUUxTdHJpbmcsIEdyYXBoUUxCb29sZWFuIH0gZnJvbSBcIi4vc2NhbGFycy5tanNcIjtcbmltcG9ydCB7IGFyZ3NUb0FyZ3NDb25maWcsIEdyYXBoUUxOb25OdWxsIH0gZnJvbSBcIi4vZGVmaW5pdGlvbi5tanNcIjtcbi8qKlxuICogVGVzdCBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgYSBHcmFwaFFMIGRpcmVjdGl2ZS5cbiAqL1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVkZWNsYXJlXG5leHBvcnQgZnVuY3Rpb24gaXNEaXJlY3RpdmUoZGlyZWN0aXZlKSB7XG4gIHJldHVybiBpbnN0YW5jZU9mKGRpcmVjdGl2ZSwgR3JhcGhRTERpcmVjdGl2ZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0RGlyZWN0aXZlKGRpcmVjdGl2ZSkge1xuICBpZiAoIWlzRGlyZWN0aXZlKGRpcmVjdGl2ZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RlZCBcIi5jb25jYXQoaW5zcGVjdChkaXJlY3RpdmUpLCBcIiB0byBiZSBhIEdyYXBoUUwgZGlyZWN0aXZlLlwiKSk7XG4gIH1cblxuICByZXR1cm4gZGlyZWN0aXZlO1xufVxuLyoqXG4gKiBEaXJlY3RpdmVzIGFyZSB1c2VkIGJ5IHRoZSBHcmFwaFFMIHJ1bnRpbWUgYXMgYSB3YXkgb2YgbW9kaWZ5aW5nIGV4ZWN1dGlvblxuICogYmVoYXZpb3IuIFR5cGUgc3lzdGVtIGNyZWF0b3JzIHdpbGwgdXN1YWxseSBub3QgY3JlYXRlIHRoZXNlIGRpcmVjdGx5LlxuICovXG5cbmV4cG9ydCB2YXIgR3JhcGhRTERpcmVjdGl2ZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEdyYXBoUUxEaXJlY3RpdmUoY29uZmlnKSB7XG4gICAgdmFyIF9jb25maWckaXNSZXBlYXRhYmxlLCBfY29uZmlnJGFyZ3M7XG5cbiAgICB0aGlzLm5hbWUgPSBjb25maWcubmFtZTtcbiAgICB0aGlzLmRlc2NyaXB0aW9uID0gY29uZmlnLmRlc2NyaXB0aW9uO1xuICAgIHRoaXMubG9jYXRpb25zID0gY29uZmlnLmxvY2F0aW9ucztcbiAgICB0aGlzLmlzUmVwZWF0YWJsZSA9IChfY29uZmlnJGlzUmVwZWF0YWJsZSA9IGNvbmZpZy5pc1JlcGVhdGFibGUpICE9PSBudWxsICYmIF9jb25maWckaXNSZXBlYXRhYmxlICE9PSB2b2lkIDAgPyBfY29uZmlnJGlzUmVwZWF0YWJsZSA6IGZhbHNlO1xuICAgIHRoaXMuZXh0ZW5zaW9ucyA9IGNvbmZpZy5leHRlbnNpb25zICYmIHRvT2JqTWFwKGNvbmZpZy5leHRlbnNpb25zKTtcbiAgICB0aGlzLmFzdE5vZGUgPSBjb25maWcuYXN0Tm9kZTtcbiAgICBjb25maWcubmFtZSB8fCBkZXZBc3NlcnQoMCwgJ0RpcmVjdGl2ZSBtdXN0IGJlIG5hbWVkLicpO1xuICAgIEFycmF5LmlzQXJyYXkoY29uZmlnLmxvY2F0aW9ucykgfHwgZGV2QXNzZXJ0KDAsIFwiQFwiLmNvbmNhdChjb25maWcubmFtZSwgXCIgbG9jYXRpb25zIG11c3QgYmUgYW4gQXJyYXkuXCIpKTtcbiAgICB2YXIgYXJncyA9IChfY29uZmlnJGFyZ3MgPSBjb25maWcuYXJncykgIT09IG51bGwgJiYgX2NvbmZpZyRhcmdzICE9PSB2b2lkIDAgPyBfY29uZmlnJGFyZ3MgOiB7fTtcbiAgICBpc09iamVjdExpa2UoYXJncykgJiYgIUFycmF5LmlzQXJyYXkoYXJncykgfHwgZGV2QXNzZXJ0KDAsIFwiQFwiLmNvbmNhdChjb25maWcubmFtZSwgXCIgYXJncyBtdXN0IGJlIGFuIG9iamVjdCB3aXRoIGFyZ3VtZW50IG5hbWVzIGFzIGtleXMuXCIpKTtcbiAgICB0aGlzLmFyZ3MgPSBvYmplY3RFbnRyaWVzKGFyZ3MpLm1hcChmdW5jdGlvbiAoX3JlZikge1xuICAgICAgdmFyIGFyZ05hbWUgPSBfcmVmWzBdLFxuICAgICAgICAgIGFyZ0NvbmZpZyA9IF9yZWZbMV07XG4gICAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiBhcmdOYW1lLFxuICAgICAgICBkZXNjcmlwdGlvbjogYXJnQ29uZmlnLmRlc2NyaXB0aW9uLFxuICAgICAgICB0eXBlOiBhcmdDb25maWcudHlwZSxcbiAgICAgICAgZGVmYXVsdFZhbHVlOiBhcmdDb25maWcuZGVmYXVsdFZhbHVlLFxuICAgICAgICBkZXByZWNhdGlvblJlYXNvbjogYXJnQ29uZmlnLmRlcHJlY2F0aW9uUmVhc29uLFxuICAgICAgICBleHRlbnNpb25zOiBhcmdDb25maWcuZXh0ZW5zaW9ucyAmJiB0b09iak1hcChhcmdDb25maWcuZXh0ZW5zaW9ucyksXG4gICAgICAgIGFzdE5vZGU6IGFyZ0NvbmZpZy5hc3ROb2RlXG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEdyYXBoUUxEaXJlY3RpdmUucHJvdG90eXBlO1xuXG4gIF9wcm90by50b0NvbmZpZyA9IGZ1bmN0aW9uIHRvQ29uZmlnKCkge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICBkZXNjcmlwdGlvbjogdGhpcy5kZXNjcmlwdGlvbixcbiAgICAgIGxvY2F0aW9uczogdGhpcy5sb2NhdGlvbnMsXG4gICAgICBhcmdzOiBhcmdzVG9BcmdzQ29uZmlnKHRoaXMuYXJncyksXG4gICAgICBpc1JlcGVhdGFibGU6IHRoaXMuaXNSZXBlYXRhYmxlLFxuICAgICAgZXh0ZW5zaW9uczogdGhpcy5leHRlbnNpb25zLFxuICAgICAgYXN0Tm9kZTogdGhpcy5hc3ROb2RlXG4gICAgfTtcbiAgfTtcblxuICBfcHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gJ0AnICsgdGhpcy5uYW1lO1xuICB9O1xuXG4gIF9wcm90by50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHRoaXMudG9TdHJpbmcoKTtcbiAgfSAvLyAkRmxvd0ZpeE1lW3Vuc3VwcG9ydGVkLXN5bnRheF0gRmxvdyBkb2Vzbid0IHN1cHBvcnQgY29tcHV0ZWQgcHJvcGVydGllcyB5ZXRcbiAgO1xuXG4gIF9jcmVhdGVDbGFzcyhHcmFwaFFMRGlyZWN0aXZlLCBbe1xuICAgIGtleTogU1lNQk9MX1RPX1NUUklOR19UQUcsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gJ0dyYXBoUUxEaXJlY3RpdmUnO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBHcmFwaFFMRGlyZWN0aXZlO1xufSgpOyAvLyBQcmludCBhIHNpbXBsaWZpZWQgZm9ybSB3aGVuIGFwcGVhcmluZyBpbiBgaW5zcGVjdGAgYW5kIGB1dGlsLmluc3BlY3RgLlxuXG5kZWZpbmVJbnNwZWN0KEdyYXBoUUxEaXJlY3RpdmUpO1xuXG4vKipcbiAqIFVzZWQgdG8gY29uZGl0aW9uYWxseSBpbmNsdWRlIGZpZWxkcyBvciBmcmFnbWVudHMuXG4gKi9cbmV4cG9ydCB2YXIgR3JhcGhRTEluY2x1ZGVEaXJlY3RpdmUgPSBuZXcgR3JhcGhRTERpcmVjdGl2ZSh7XG4gIG5hbWU6ICdpbmNsdWRlJyxcbiAgZGVzY3JpcHRpb246ICdEaXJlY3RzIHRoZSBleGVjdXRvciB0byBpbmNsdWRlIHRoaXMgZmllbGQgb3IgZnJhZ21lbnQgb25seSB3aGVuIHRoZSBgaWZgIGFyZ3VtZW50IGlzIHRydWUuJyxcbiAgbG9jYXRpb25zOiBbRGlyZWN0aXZlTG9jYXRpb24uRklFTEQsIERpcmVjdGl2ZUxvY2F0aW9uLkZSQUdNRU5UX1NQUkVBRCwgRGlyZWN0aXZlTG9jYXRpb24uSU5MSU5FX0ZSQUdNRU5UXSxcbiAgYXJnczoge1xuICAgIGlmOiB7XG4gICAgICB0eXBlOiBuZXcgR3JhcGhRTE5vbk51bGwoR3JhcGhRTEJvb2xlYW4pLFxuICAgICAgZGVzY3JpcHRpb246ICdJbmNsdWRlZCB3aGVuIHRydWUuJ1xuICAgIH1cbiAgfVxufSk7XG4vKipcbiAqIFVzZWQgdG8gY29uZGl0aW9uYWxseSBza2lwIChleGNsdWRlKSBmaWVsZHMgb3IgZnJhZ21lbnRzLlxuICovXG5cbmV4cG9ydCB2YXIgR3JhcGhRTFNraXBEaXJlY3RpdmUgPSBuZXcgR3JhcGhRTERpcmVjdGl2ZSh7XG4gIG5hbWU6ICdza2lwJyxcbiAgZGVzY3JpcHRpb246ICdEaXJlY3RzIHRoZSBleGVjdXRvciB0byBza2lwIHRoaXMgZmllbGQgb3IgZnJhZ21lbnQgd2hlbiB0aGUgYGlmYCBhcmd1bWVudCBpcyB0cnVlLicsXG4gIGxvY2F0aW9uczogW0RpcmVjdGl2ZUxvY2F0aW9uLkZJRUxELCBEaXJlY3RpdmVMb2NhdGlvbi5GUkFHTUVOVF9TUFJFQUQsIERpcmVjdGl2ZUxvY2F0aW9uLklOTElORV9GUkFHTUVOVF0sXG4gIGFyZ3M6IHtcbiAgICBpZjoge1xuICAgICAgdHlwZTogbmV3IEdyYXBoUUxOb25OdWxsKEdyYXBoUUxCb29sZWFuKSxcbiAgICAgIGRlc2NyaXB0aW9uOiAnU2tpcHBlZCB3aGVuIHRydWUuJ1xuICAgIH1cbiAgfVxufSk7XG4vKipcbiAqIENvbnN0YW50IHN0cmluZyB1c2VkIGZvciBkZWZhdWx0IHJlYXNvbiBmb3IgYSBkZXByZWNhdGlvbi5cbiAqL1xuXG5leHBvcnQgdmFyIERFRkFVTFRfREVQUkVDQVRJT05fUkVBU09OID0gJ05vIGxvbmdlciBzdXBwb3J0ZWQnO1xuLyoqXG4gKiBVc2VkIHRvIGRlY2xhcmUgZWxlbWVudCBvZiBhIEdyYXBoUUwgc2NoZW1hIGFzIGRlcHJlY2F0ZWQuXG4gKi9cblxuZXhwb3J0IHZhciBHcmFwaFFMRGVwcmVjYXRlZERpcmVjdGl2ZSA9IG5ldyBHcmFwaFFMRGlyZWN0aXZlKHtcbiAgbmFtZTogJ2RlcHJlY2F0ZWQnLFxuICBkZXNjcmlwdGlvbjogJ01hcmtzIGFuIGVsZW1lbnQgb2YgYSBHcmFwaFFMIHNjaGVtYSBhcyBubyBsb25nZXIgc3VwcG9ydGVkLicsXG4gIGxvY2F0aW9uczogW0RpcmVjdGl2ZUxvY2F0aW9uLkZJRUxEX0RFRklOSVRJT04sIERpcmVjdGl2ZUxvY2F0aW9uLkFSR1VNRU5UX0RFRklOSVRJT04sIERpcmVjdGl2ZUxvY2F0aW9uLklOUFVUX0ZJRUxEX0RFRklOSVRJT04sIERpcmVjdGl2ZUxvY2F0aW9uLkVOVU1fVkFMVUVdLFxuICBhcmdzOiB7XG4gICAgcmVhc29uOiB7XG4gICAgICB0eXBlOiBHcmFwaFFMU3RyaW5nLFxuICAgICAgZGVzY3JpcHRpb246ICdFeHBsYWlucyB3aHkgdGhpcyBlbGVtZW50IHdhcyBkZXByZWNhdGVkLCB1c3VhbGx5IGFsc28gaW5jbHVkaW5nIGEgc3VnZ2VzdGlvbiBmb3IgaG93IHRvIGFjY2VzcyBzdXBwb3J0ZWQgc2ltaWxhciBkYXRhLiBGb3JtYXR0ZWQgdXNpbmcgdGhlIE1hcmtkb3duIHN5bnRheCwgYXMgc3BlY2lmaWVkIGJ5IFtDb21tb25NYXJrXShodHRwczovL2NvbW1vbm1hcmsub3JnLykuJyxcbiAgICAgIGRlZmF1bHRWYWx1ZTogREVGQVVMVF9ERVBSRUNBVElPTl9SRUFTT05cbiAgICB9XG4gIH1cbn0pO1xuLyoqXG4gKiBVc2VkIHRvIHByb3ZpZGUgYSBVUkwgZm9yIHNwZWNpZnlpbmcgdGhlIGJlaGF2aW91ciBvZiBjdXN0b20gc2NhbGFyIGRlZmluaXRpb25zLlxuICovXG5cbmV4cG9ydCB2YXIgR3JhcGhRTFNwZWNpZmllZEJ5RGlyZWN0aXZlID0gbmV3IEdyYXBoUUxEaXJlY3RpdmUoe1xuICBuYW1lOiAnc3BlY2lmaWVkQnknLFxuICBkZXNjcmlwdGlvbjogJ0V4cG9zZXMgYSBVUkwgdGhhdCBzcGVjaWZpZXMgdGhlIGJlaGF2aW91ciBvZiB0aGlzIHNjYWxhci4nLFxuICBsb2NhdGlvbnM6IFtEaXJlY3RpdmVMb2NhdGlvbi5TQ0FMQVJdLFxuICBhcmdzOiB7XG4gICAgdXJsOiB7XG4gICAgICB0eXBlOiBuZXcgR3JhcGhRTE5vbk51bGwoR3JhcGhRTFN0cmluZyksXG4gICAgICBkZXNjcmlwdGlvbjogJ1RoZSBVUkwgdGhhdCBzcGVjaWZpZXMgdGhlIGJlaGF2aW91ciBvZiB0aGlzIHNjYWxhci4nXG4gICAgfVxuICB9XG59KTtcbi8qKlxuICogVGhlIGZ1bGwgbGlzdCBvZiBzcGVjaWZpZWQgZGlyZWN0aXZlcy5cbiAqL1xuXG5leHBvcnQgdmFyIHNwZWNpZmllZERpcmVjdGl2ZXMgPSBPYmplY3QuZnJlZXplKFtHcmFwaFFMSW5jbHVkZURpcmVjdGl2ZSwgR3JhcGhRTFNraXBEaXJlY3RpdmUsIEdyYXBoUUxEZXByZWNhdGVkRGlyZWN0aXZlLCBHcmFwaFFMU3BlY2lmaWVkQnlEaXJlY3RpdmVdKTtcbmV4cG9ydCBmdW5jdGlvbiBpc1NwZWNpZmllZERpcmVjdGl2ZShkaXJlY3RpdmUpIHtcbiAgcmV0dXJuIHNwZWNpZmllZERpcmVjdGl2ZXMuc29tZShmdW5jdGlvbiAoX3JlZjIpIHtcbiAgICB2YXIgbmFtZSA9IF9yZWYyLm5hbWU7XG4gICAgcmV0dXJuIG5hbWUgPT09IGRpcmVjdGl2ZS5uYW1lO1xuICB9KTtcbn1cbiIsImltcG9ydCBvYmplY3RWYWx1ZXMgZnJvbSBcIi4uL3BvbHlmaWxscy9vYmplY3RWYWx1ZXMubWpzXCI7XG5pbXBvcnQgaW5zcGVjdCBmcm9tIFwiLi4vanN1dGlscy9pbnNwZWN0Lm1qc1wiO1xuaW1wb3J0IGludmFyaWFudCBmcm9tIFwiLi4vanN1dGlscy9pbnZhcmlhbnQubWpzXCI7XG5pbXBvcnQgeyBwcmludCB9IGZyb20gXCIuLi9sYW5ndWFnZS9wcmludGVyLm1qc1wiO1xuaW1wb3J0IHsgRGlyZWN0aXZlTG9jYXRpb24gfSBmcm9tIFwiLi4vbGFuZ3VhZ2UvZGlyZWN0aXZlTG9jYXRpb24ubWpzXCI7XG5pbXBvcnQgeyBhc3RGcm9tVmFsdWUgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2FzdEZyb21WYWx1ZS5tanNcIjtcbmltcG9ydCB7IEdyYXBoUUxTdHJpbmcsIEdyYXBoUUxCb29sZWFuIH0gZnJvbSBcIi4vc2NhbGFycy5tanNcIjtcbmltcG9ydCB7IEdyYXBoUUxMaXN0LCBHcmFwaFFMTm9uTnVsbCwgR3JhcGhRTE9iamVjdFR5cGUsIEdyYXBoUUxFbnVtVHlwZSwgaXNTY2FsYXJUeXBlLCBpc09iamVjdFR5cGUsIGlzSW50ZXJmYWNlVHlwZSwgaXNVbmlvblR5cGUsIGlzRW51bVR5cGUsIGlzSW5wdXRPYmplY3RUeXBlLCBpc0xpc3RUeXBlLCBpc05vbk51bGxUeXBlLCBpc0Fic3RyYWN0VHlwZSB9IGZyb20gXCIuL2RlZmluaXRpb24ubWpzXCI7XG5leHBvcnQgdmFyIF9fU2NoZW1hID0gbmV3IEdyYXBoUUxPYmplY3RUeXBlKHtcbiAgbmFtZTogJ19fU2NoZW1hJyxcbiAgZGVzY3JpcHRpb246ICdBIEdyYXBoUUwgU2NoZW1hIGRlZmluZXMgdGhlIGNhcGFiaWxpdGllcyBvZiBhIEdyYXBoUUwgc2VydmVyLiBJdCBleHBvc2VzIGFsbCBhdmFpbGFibGUgdHlwZXMgYW5kIGRpcmVjdGl2ZXMgb24gdGhlIHNlcnZlciwgYXMgd2VsbCBhcyB0aGUgZW50cnkgcG9pbnRzIGZvciBxdWVyeSwgbXV0YXRpb24sIGFuZCBzdWJzY3JpcHRpb24gb3BlcmF0aW9ucy4nLFxuICBmaWVsZHM6IGZ1bmN0aW9uIGZpZWxkcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZGVzY3JpcHRpb246IHtcbiAgICAgICAgdHlwZTogR3JhcGhRTFN0cmluZyxcbiAgICAgICAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZShzY2hlbWEpIHtcbiAgICAgICAgICByZXR1cm4gc2NoZW1hLmRlc2NyaXB0aW9uO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdHlwZXM6IHtcbiAgICAgICAgZGVzY3JpcHRpb246ICdBIGxpc3Qgb2YgYWxsIHR5cGVzIHN1cHBvcnRlZCBieSB0aGlzIHNlcnZlci4nLFxuICAgICAgICB0eXBlOiBuZXcgR3JhcGhRTE5vbk51bGwobmV3IEdyYXBoUUxMaXN0KG5ldyBHcmFwaFFMTm9uTnVsbChfX1R5cGUpKSksXG4gICAgICAgIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoc2NoZW1hKSB7XG4gICAgICAgICAgcmV0dXJuIG9iamVjdFZhbHVlcyhzY2hlbWEuZ2V0VHlwZU1hcCgpKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHF1ZXJ5VHlwZToge1xuICAgICAgICBkZXNjcmlwdGlvbjogJ1RoZSB0eXBlIHRoYXQgcXVlcnkgb3BlcmF0aW9ucyB3aWxsIGJlIHJvb3RlZCBhdC4nLFxuICAgICAgICB0eXBlOiBuZXcgR3JhcGhRTE5vbk51bGwoX19UeXBlKSxcbiAgICAgICAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZShzY2hlbWEpIHtcbiAgICAgICAgICByZXR1cm4gc2NoZW1hLmdldFF1ZXJ5VHlwZSgpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgbXV0YXRpb25UeXBlOiB7XG4gICAgICAgIGRlc2NyaXB0aW9uOiAnSWYgdGhpcyBzZXJ2ZXIgc3VwcG9ydHMgbXV0YXRpb24sIHRoZSB0eXBlIHRoYXQgbXV0YXRpb24gb3BlcmF0aW9ucyB3aWxsIGJlIHJvb3RlZCBhdC4nLFxuICAgICAgICB0eXBlOiBfX1R5cGUsXG4gICAgICAgIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoc2NoZW1hKSB7XG4gICAgICAgICAgcmV0dXJuIHNjaGVtYS5nZXRNdXRhdGlvblR5cGUoKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHN1YnNjcmlwdGlvblR5cGU6IHtcbiAgICAgICAgZGVzY3JpcHRpb246ICdJZiB0aGlzIHNlcnZlciBzdXBwb3J0IHN1YnNjcmlwdGlvbiwgdGhlIHR5cGUgdGhhdCBzdWJzY3JpcHRpb24gb3BlcmF0aW9ucyB3aWxsIGJlIHJvb3RlZCBhdC4nLFxuICAgICAgICB0eXBlOiBfX1R5cGUsXG4gICAgICAgIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoc2NoZW1hKSB7XG4gICAgICAgICAgcmV0dXJuIHNjaGVtYS5nZXRTdWJzY3JpcHRpb25UeXBlKCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBkaXJlY3RpdmVzOiB7XG4gICAgICAgIGRlc2NyaXB0aW9uOiAnQSBsaXN0IG9mIGFsbCBkaXJlY3RpdmVzIHN1cHBvcnRlZCBieSB0aGlzIHNlcnZlci4nLFxuICAgICAgICB0eXBlOiBuZXcgR3JhcGhRTE5vbk51bGwobmV3IEdyYXBoUUxMaXN0KG5ldyBHcmFwaFFMTm9uTnVsbChfX0RpcmVjdGl2ZSkpKSxcbiAgICAgICAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZShzY2hlbWEpIHtcbiAgICAgICAgICByZXR1cm4gc2NoZW1hLmdldERpcmVjdGl2ZXMoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cbn0pO1xuZXhwb3J0IHZhciBfX0RpcmVjdGl2ZSA9IG5ldyBHcmFwaFFMT2JqZWN0VHlwZSh7XG4gIG5hbWU6ICdfX0RpcmVjdGl2ZScsXG4gIGRlc2NyaXB0aW9uOiBcIkEgRGlyZWN0aXZlIHByb3ZpZGVzIGEgd2F5IHRvIGRlc2NyaWJlIGFsdGVybmF0ZSBydW50aW1lIGV4ZWN1dGlvbiBhbmQgdHlwZSB2YWxpZGF0aW9uIGJlaGF2aW9yIGluIGEgR3JhcGhRTCBkb2N1bWVudC5cXG5cXG5JbiBzb21lIGNhc2VzLCB5b3UgbmVlZCB0byBwcm92aWRlIG9wdGlvbnMgdG8gYWx0ZXIgR3JhcGhRTCdzIGV4ZWN1dGlvbiBiZWhhdmlvciBpbiB3YXlzIGZpZWxkIGFyZ3VtZW50cyB3aWxsIG5vdCBzdWZmaWNlLCBzdWNoIGFzIGNvbmRpdGlvbmFsbHkgaW5jbHVkaW5nIG9yIHNraXBwaW5nIGEgZmllbGQuIERpcmVjdGl2ZXMgcHJvdmlkZSB0aGlzIGJ5IGRlc2NyaWJpbmcgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiB0byB0aGUgZXhlY3V0b3IuXCIsXG4gIGZpZWxkczogZnVuY3Rpb24gZmllbGRzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiB7XG4gICAgICAgIHR5cGU6IG5ldyBHcmFwaFFMTm9uTnVsbChHcmFwaFFMU3RyaW5nKSxcbiAgICAgICAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZShkaXJlY3RpdmUpIHtcbiAgICAgICAgICByZXR1cm4gZGlyZWN0aXZlLm5hbWU7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBkZXNjcmlwdGlvbjoge1xuICAgICAgICB0eXBlOiBHcmFwaFFMU3RyaW5nLFxuICAgICAgICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKGRpcmVjdGl2ZSkge1xuICAgICAgICAgIHJldHVybiBkaXJlY3RpdmUuZGVzY3JpcHRpb247XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBpc1JlcGVhdGFibGU6IHtcbiAgICAgICAgdHlwZTogbmV3IEdyYXBoUUxOb25OdWxsKEdyYXBoUUxCb29sZWFuKSxcbiAgICAgICAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZShkaXJlY3RpdmUpIHtcbiAgICAgICAgICByZXR1cm4gZGlyZWN0aXZlLmlzUmVwZWF0YWJsZTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGxvY2F0aW9uczoge1xuICAgICAgICB0eXBlOiBuZXcgR3JhcGhRTE5vbk51bGwobmV3IEdyYXBoUUxMaXN0KG5ldyBHcmFwaFFMTm9uTnVsbChfX0RpcmVjdGl2ZUxvY2F0aW9uKSkpLFxuICAgICAgICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKGRpcmVjdGl2ZSkge1xuICAgICAgICAgIHJldHVybiBkaXJlY3RpdmUubG9jYXRpb25zO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgYXJnczoge1xuICAgICAgICB0eXBlOiBuZXcgR3JhcGhRTE5vbk51bGwobmV3IEdyYXBoUUxMaXN0KG5ldyBHcmFwaFFMTm9uTnVsbChfX0lucHV0VmFsdWUpKSksXG4gICAgICAgIGFyZ3M6IHtcbiAgICAgICAgICBpbmNsdWRlRGVwcmVjYXRlZDoge1xuICAgICAgICAgICAgdHlwZTogR3JhcGhRTEJvb2xlYW4sXG4gICAgICAgICAgICBkZWZhdWx0VmFsdWU6IGZhbHNlXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKGZpZWxkLCBfcmVmKSB7XG4gICAgICAgICAgdmFyIGluY2x1ZGVEZXByZWNhdGVkID0gX3JlZi5pbmNsdWRlRGVwcmVjYXRlZDtcbiAgICAgICAgICByZXR1cm4gaW5jbHVkZURlcHJlY2F0ZWQgPyBmaWVsZC5hcmdzIDogZmllbGQuYXJncy5maWx0ZXIoZnVuY3Rpb24gKGFyZykge1xuICAgICAgICAgICAgcmV0dXJuIGFyZy5kZXByZWNhdGlvblJlYXNvbiA9PSBudWxsO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxufSk7XG5leHBvcnQgdmFyIF9fRGlyZWN0aXZlTG9jYXRpb24gPSBuZXcgR3JhcGhRTEVudW1UeXBlKHtcbiAgbmFtZTogJ19fRGlyZWN0aXZlTG9jYXRpb24nLFxuICBkZXNjcmlwdGlvbjogJ0EgRGlyZWN0aXZlIGNhbiBiZSBhZGphY2VudCB0byBtYW55IHBhcnRzIG9mIHRoZSBHcmFwaFFMIGxhbmd1YWdlLCBhIF9fRGlyZWN0aXZlTG9jYXRpb24gZGVzY3JpYmVzIG9uZSBzdWNoIHBvc3NpYmxlIGFkamFjZW5jaWVzLicsXG4gIHZhbHVlczoge1xuICAgIFFVRVJZOiB7XG4gICAgICB2YWx1ZTogRGlyZWN0aXZlTG9jYXRpb24uUVVFUlksXG4gICAgICBkZXNjcmlwdGlvbjogJ0xvY2F0aW9uIGFkamFjZW50IHRvIGEgcXVlcnkgb3BlcmF0aW9uLidcbiAgICB9LFxuICAgIE1VVEFUSU9OOiB7XG4gICAgICB2YWx1ZTogRGlyZWN0aXZlTG9jYXRpb24uTVVUQVRJT04sXG4gICAgICBkZXNjcmlwdGlvbjogJ0xvY2F0aW9uIGFkamFjZW50IHRvIGEgbXV0YXRpb24gb3BlcmF0aW9uLidcbiAgICB9LFxuICAgIFNVQlNDUklQVElPTjoge1xuICAgICAgdmFsdWU6IERpcmVjdGl2ZUxvY2F0aW9uLlNVQlNDUklQVElPTixcbiAgICAgIGRlc2NyaXB0aW9uOiAnTG9jYXRpb24gYWRqYWNlbnQgdG8gYSBzdWJzY3JpcHRpb24gb3BlcmF0aW9uLidcbiAgICB9LFxuICAgIEZJRUxEOiB7XG4gICAgICB2YWx1ZTogRGlyZWN0aXZlTG9jYXRpb24uRklFTEQsXG4gICAgICBkZXNjcmlwdGlvbjogJ0xvY2F0aW9uIGFkamFjZW50IHRvIGEgZmllbGQuJ1xuICAgIH0sXG4gICAgRlJBR01FTlRfREVGSU5JVElPTjoge1xuICAgICAgdmFsdWU6IERpcmVjdGl2ZUxvY2F0aW9uLkZSQUdNRU5UX0RFRklOSVRJT04sXG4gICAgICBkZXNjcmlwdGlvbjogJ0xvY2F0aW9uIGFkamFjZW50IHRvIGEgZnJhZ21lbnQgZGVmaW5pdGlvbi4nXG4gICAgfSxcbiAgICBGUkFHTUVOVF9TUFJFQUQ6IHtcbiAgICAgIHZhbHVlOiBEaXJlY3RpdmVMb2NhdGlvbi5GUkFHTUVOVF9TUFJFQUQsXG4gICAgICBkZXNjcmlwdGlvbjogJ0xvY2F0aW9uIGFkamFjZW50IHRvIGEgZnJhZ21lbnQgc3ByZWFkLidcbiAgICB9LFxuICAgIElOTElORV9GUkFHTUVOVDoge1xuICAgICAgdmFsdWU6IERpcmVjdGl2ZUxvY2F0aW9uLklOTElORV9GUkFHTUVOVCxcbiAgICAgIGRlc2NyaXB0aW9uOiAnTG9jYXRpb24gYWRqYWNlbnQgdG8gYW4gaW5saW5lIGZyYWdtZW50LidcbiAgICB9LFxuICAgIFZBUklBQkxFX0RFRklOSVRJT046IHtcbiAgICAgIHZhbHVlOiBEaXJlY3RpdmVMb2NhdGlvbi5WQVJJQUJMRV9ERUZJTklUSU9OLFxuICAgICAgZGVzY3JpcHRpb246ICdMb2NhdGlvbiBhZGphY2VudCB0byBhIHZhcmlhYmxlIGRlZmluaXRpb24uJ1xuICAgIH0sXG4gICAgU0NIRU1BOiB7XG4gICAgICB2YWx1ZTogRGlyZWN0aXZlTG9jYXRpb24uU0NIRU1BLFxuICAgICAgZGVzY3JpcHRpb246ICdMb2NhdGlvbiBhZGphY2VudCB0byBhIHNjaGVtYSBkZWZpbml0aW9uLidcbiAgICB9LFxuICAgIFNDQUxBUjoge1xuICAgICAgdmFsdWU6IERpcmVjdGl2ZUxvY2F0aW9uLlNDQUxBUixcbiAgICAgIGRlc2NyaXB0aW9uOiAnTG9jYXRpb24gYWRqYWNlbnQgdG8gYSBzY2FsYXIgZGVmaW5pdGlvbi4nXG4gICAgfSxcbiAgICBPQkpFQ1Q6IHtcbiAgICAgIHZhbHVlOiBEaXJlY3RpdmVMb2NhdGlvbi5PQkpFQ1QsXG4gICAgICBkZXNjcmlwdGlvbjogJ0xvY2F0aW9uIGFkamFjZW50IHRvIGFuIG9iamVjdCB0eXBlIGRlZmluaXRpb24uJ1xuICAgIH0sXG4gICAgRklFTERfREVGSU5JVElPTjoge1xuICAgICAgdmFsdWU6IERpcmVjdGl2ZUxvY2F0aW9uLkZJRUxEX0RFRklOSVRJT04sXG4gICAgICBkZXNjcmlwdGlvbjogJ0xvY2F0aW9uIGFkamFjZW50IHRvIGEgZmllbGQgZGVmaW5pdGlvbi4nXG4gICAgfSxcbiAgICBBUkdVTUVOVF9ERUZJTklUSU9OOiB7XG4gICAgICB2YWx1ZTogRGlyZWN0aXZlTG9jYXRpb24uQVJHVU1FTlRfREVGSU5JVElPTixcbiAgICAgIGRlc2NyaXB0aW9uOiAnTG9jYXRpb24gYWRqYWNlbnQgdG8gYW4gYXJndW1lbnQgZGVmaW5pdGlvbi4nXG4gICAgfSxcbiAgICBJTlRFUkZBQ0U6IHtcbiAgICAgIHZhbHVlOiBEaXJlY3RpdmVMb2NhdGlvbi5JTlRFUkZBQ0UsXG4gICAgICBkZXNjcmlwdGlvbjogJ0xvY2F0aW9uIGFkamFjZW50IHRvIGFuIGludGVyZmFjZSBkZWZpbml0aW9uLidcbiAgICB9LFxuICAgIFVOSU9OOiB7XG4gICAgICB2YWx1ZTogRGlyZWN0aXZlTG9jYXRpb24uVU5JT04sXG4gICAgICBkZXNjcmlwdGlvbjogJ0xvY2F0aW9uIGFkamFjZW50IHRvIGEgdW5pb24gZGVmaW5pdGlvbi4nXG4gICAgfSxcbiAgICBFTlVNOiB7XG4gICAgICB2YWx1ZTogRGlyZWN0aXZlTG9jYXRpb24uRU5VTSxcbiAgICAgIGRlc2NyaXB0aW9uOiAnTG9jYXRpb24gYWRqYWNlbnQgdG8gYW4gZW51bSBkZWZpbml0aW9uLidcbiAgICB9LFxuICAgIEVOVU1fVkFMVUU6IHtcbiAgICAgIHZhbHVlOiBEaXJlY3RpdmVMb2NhdGlvbi5FTlVNX1ZBTFVFLFxuICAgICAgZGVzY3JpcHRpb246ICdMb2NhdGlvbiBhZGphY2VudCB0byBhbiBlbnVtIHZhbHVlIGRlZmluaXRpb24uJ1xuICAgIH0sXG4gICAgSU5QVVRfT0JKRUNUOiB7XG4gICAgICB2YWx1ZTogRGlyZWN0aXZlTG9jYXRpb24uSU5QVVRfT0JKRUNULFxuICAgICAgZGVzY3JpcHRpb246ICdMb2NhdGlvbiBhZGphY2VudCB0byBhbiBpbnB1dCBvYmplY3QgdHlwZSBkZWZpbml0aW9uLidcbiAgICB9LFxuICAgIElOUFVUX0ZJRUxEX0RFRklOSVRJT046IHtcbiAgICAgIHZhbHVlOiBEaXJlY3RpdmVMb2NhdGlvbi5JTlBVVF9GSUVMRF9ERUZJTklUSU9OLFxuICAgICAgZGVzY3JpcHRpb246ICdMb2NhdGlvbiBhZGphY2VudCB0byBhbiBpbnB1dCBvYmplY3QgZmllbGQgZGVmaW5pdGlvbi4nXG4gICAgfVxuICB9XG59KTtcbmV4cG9ydCB2YXIgX19UeXBlID0gbmV3IEdyYXBoUUxPYmplY3RUeXBlKHtcbiAgbmFtZTogJ19fVHlwZScsXG4gIGRlc2NyaXB0aW9uOiAnVGhlIGZ1bmRhbWVudGFsIHVuaXQgb2YgYW55IEdyYXBoUUwgU2NoZW1hIGlzIHRoZSB0eXBlLiBUaGVyZSBhcmUgbWFueSBraW5kcyBvZiB0eXBlcyBpbiBHcmFwaFFMIGFzIHJlcHJlc2VudGVkIGJ5IHRoZSBgX19UeXBlS2luZGAgZW51bS5cXG5cXG5EZXBlbmRpbmcgb24gdGhlIGtpbmQgb2YgYSB0eXBlLCBjZXJ0YWluIGZpZWxkcyBkZXNjcmliZSBpbmZvcm1hdGlvbiBhYm91dCB0aGF0IHR5cGUuIFNjYWxhciB0eXBlcyBwcm92aWRlIG5vIGluZm9ybWF0aW9uIGJleW9uZCBhIG5hbWUsIGRlc2NyaXB0aW9uIGFuZCBvcHRpb25hbCBgc3BlY2lmaWVkQnlVcmxgLCB3aGlsZSBFbnVtIHR5cGVzIHByb3ZpZGUgdGhlaXIgdmFsdWVzLiBPYmplY3QgYW5kIEludGVyZmFjZSB0eXBlcyBwcm92aWRlIHRoZSBmaWVsZHMgdGhleSBkZXNjcmliZS4gQWJzdHJhY3QgdHlwZXMsIFVuaW9uIGFuZCBJbnRlcmZhY2UsIHByb3ZpZGUgdGhlIE9iamVjdCB0eXBlcyBwb3NzaWJsZSBhdCBydW50aW1lLiBMaXN0IGFuZCBOb25OdWxsIHR5cGVzIGNvbXBvc2Ugb3RoZXIgdHlwZXMuJyxcbiAgZmllbGRzOiBmdW5jdGlvbiBmaWVsZHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGtpbmQ6IHtcbiAgICAgICAgdHlwZTogbmV3IEdyYXBoUUxOb25OdWxsKF9fVHlwZUtpbmQpLFxuICAgICAgICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKHR5cGUpIHtcbiAgICAgICAgICBpZiAoaXNTY2FsYXJUeXBlKHR5cGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gVHlwZUtpbmQuU0NBTEFSO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChpc09iamVjdFR5cGUodHlwZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBUeXBlS2luZC5PQkpFQ1Q7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGlzSW50ZXJmYWNlVHlwZSh0eXBlKSkge1xuICAgICAgICAgICAgcmV0dXJuIFR5cGVLaW5kLklOVEVSRkFDRTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoaXNVbmlvblR5cGUodHlwZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBUeXBlS2luZC5VTklPTjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoaXNFbnVtVHlwZSh0eXBlKSkge1xuICAgICAgICAgICAgcmV0dXJuIFR5cGVLaW5kLkVOVU07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGlzSW5wdXRPYmplY3RUeXBlKHR5cGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gVHlwZUtpbmQuSU5QVVRfT0JKRUNUO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChpc0xpc3RUeXBlKHR5cGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gVHlwZUtpbmQuTElTVDtcbiAgICAgICAgICB9IC8vIGlzdGFuYnVsIGlnbm9yZSBlbHNlIChTZWU6ICdodHRwczovL2dpdGh1Yi5jb20vZ3JhcGhxbC9ncmFwaHFsLWpzL2lzc3Vlcy8yNjE4JylcblxuXG4gICAgICAgICAgaWYgKGlzTm9uTnVsbFR5cGUodHlwZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBUeXBlS2luZC5OT05fTlVMTDtcbiAgICAgICAgICB9IC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0IChOb3QgcmVhY2hhYmxlLiBBbGwgcG9zc2libGUgdHlwZXMgaGF2ZSBiZWVuIGNvbnNpZGVyZWQpXG5cblxuICAgICAgICAgIGZhbHNlIHx8IGludmFyaWFudCgwLCBcIlVuZXhwZWN0ZWQgdHlwZTogXFxcIlwiLmNvbmNhdChpbnNwZWN0KHR5cGUpLCBcIlxcXCIuXCIpKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG5hbWU6IHtcbiAgICAgICAgdHlwZTogR3JhcGhRTFN0cmluZyxcbiAgICAgICAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZSh0eXBlKSB7XG4gICAgICAgICAgcmV0dXJuIHR5cGUubmFtZSAhPT0gdW5kZWZpbmVkID8gdHlwZS5uYW1lIDogdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZGVzY3JpcHRpb246IHtcbiAgICAgICAgdHlwZTogR3JhcGhRTFN0cmluZyxcbiAgICAgICAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZSh0eXBlKSB7XG4gICAgICAgICAgcmV0dXJuIHR5cGUuZGVzY3JpcHRpb24gIT09IHVuZGVmaW5lZCA/IHR5cGUuZGVzY3JpcHRpb24gOiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBzcGVjaWZpZWRCeVVybDoge1xuICAgICAgICB0eXBlOiBHcmFwaFFMU3RyaW5nLFxuICAgICAgICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKG9iaikge1xuICAgICAgICAgIHJldHVybiBvYmouc3BlY2lmaWVkQnlVcmwgIT09IHVuZGVmaW5lZCA/IG9iai5zcGVjaWZpZWRCeVVybCA6IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGZpZWxkczoge1xuICAgICAgICB0eXBlOiBuZXcgR3JhcGhRTExpc3QobmV3IEdyYXBoUUxOb25OdWxsKF9fRmllbGQpKSxcbiAgICAgICAgYXJnczoge1xuICAgICAgICAgIGluY2x1ZGVEZXByZWNhdGVkOiB7XG4gICAgICAgICAgICB0eXBlOiBHcmFwaFFMQm9vbGVhbixcbiAgICAgICAgICAgIGRlZmF1bHRWYWx1ZTogZmFsc2VcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUodHlwZSwgX3JlZjIpIHtcbiAgICAgICAgICB2YXIgaW5jbHVkZURlcHJlY2F0ZWQgPSBfcmVmMi5pbmNsdWRlRGVwcmVjYXRlZDtcblxuICAgICAgICAgIGlmIChpc09iamVjdFR5cGUodHlwZSkgfHwgaXNJbnRlcmZhY2VUeXBlKHR5cGUpKSB7XG4gICAgICAgICAgICB2YXIgZmllbGRzID0gb2JqZWN0VmFsdWVzKHR5cGUuZ2V0RmllbGRzKCkpO1xuICAgICAgICAgICAgcmV0dXJuIGluY2x1ZGVEZXByZWNhdGVkID8gZmllbGRzIDogZmllbGRzLmZpbHRlcihmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZpZWxkLmRlcHJlY2F0aW9uUmVhc29uID09IG51bGw7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBpbnRlcmZhY2VzOiB7XG4gICAgICAgIHR5cGU6IG5ldyBHcmFwaFFMTGlzdChuZXcgR3JhcGhRTE5vbk51bGwoX19UeXBlKSksXG4gICAgICAgIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUodHlwZSkge1xuICAgICAgICAgIGlmIChpc09iamVjdFR5cGUodHlwZSkgfHwgaXNJbnRlcmZhY2VUeXBlKHR5cGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHlwZS5nZXRJbnRlcmZhY2VzKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcG9zc2libGVUeXBlczoge1xuICAgICAgICB0eXBlOiBuZXcgR3JhcGhRTExpc3QobmV3IEdyYXBoUUxOb25OdWxsKF9fVHlwZSkpLFxuICAgICAgICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKHR5cGUsIF9hcmdzLCBfY29udGV4dCwgX3JlZjMpIHtcbiAgICAgICAgICB2YXIgc2NoZW1hID0gX3JlZjMuc2NoZW1hO1xuXG4gICAgICAgICAgaWYgKGlzQWJzdHJhY3RUeXBlKHR5cGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZW1hLmdldFBvc3NpYmxlVHlwZXModHlwZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZW51bVZhbHVlczoge1xuICAgICAgICB0eXBlOiBuZXcgR3JhcGhRTExpc3QobmV3IEdyYXBoUUxOb25OdWxsKF9fRW51bVZhbHVlKSksXG4gICAgICAgIGFyZ3M6IHtcbiAgICAgICAgICBpbmNsdWRlRGVwcmVjYXRlZDoge1xuICAgICAgICAgICAgdHlwZTogR3JhcGhRTEJvb2xlYW4sXG4gICAgICAgICAgICBkZWZhdWx0VmFsdWU6IGZhbHNlXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKHR5cGUsIF9yZWY0KSB7XG4gICAgICAgICAgdmFyIGluY2x1ZGVEZXByZWNhdGVkID0gX3JlZjQuaW5jbHVkZURlcHJlY2F0ZWQ7XG5cbiAgICAgICAgICBpZiAoaXNFbnVtVHlwZSh0eXBlKSkge1xuICAgICAgICAgICAgdmFyIHZhbHVlcyA9IHR5cGUuZ2V0VmFsdWVzKCk7XG4gICAgICAgICAgICByZXR1cm4gaW5jbHVkZURlcHJlY2F0ZWQgPyB2YWx1ZXMgOiB2YWx1ZXMuZmlsdGVyKGZ1bmN0aW9uIChmaWVsZCkge1xuICAgICAgICAgICAgICByZXR1cm4gZmllbGQuZGVwcmVjYXRpb25SZWFzb24gPT0gbnVsbDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGlucHV0RmllbGRzOiB7XG4gICAgICAgIHR5cGU6IG5ldyBHcmFwaFFMTGlzdChuZXcgR3JhcGhRTE5vbk51bGwoX19JbnB1dFZhbHVlKSksXG4gICAgICAgIGFyZ3M6IHtcbiAgICAgICAgICBpbmNsdWRlRGVwcmVjYXRlZDoge1xuICAgICAgICAgICAgdHlwZTogR3JhcGhRTEJvb2xlYW4sXG4gICAgICAgICAgICBkZWZhdWx0VmFsdWU6IGZhbHNlXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKHR5cGUsIF9yZWY1KSB7XG4gICAgICAgICAgdmFyIGluY2x1ZGVEZXByZWNhdGVkID0gX3JlZjUuaW5jbHVkZURlcHJlY2F0ZWQ7XG5cbiAgICAgICAgICBpZiAoaXNJbnB1dE9iamVjdFR5cGUodHlwZSkpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZXMgPSBvYmplY3RWYWx1ZXModHlwZS5nZXRGaWVsZHMoKSk7XG4gICAgICAgICAgICByZXR1cm4gaW5jbHVkZURlcHJlY2F0ZWQgPyB2YWx1ZXMgOiB2YWx1ZXMuZmlsdGVyKGZ1bmN0aW9uIChmaWVsZCkge1xuICAgICAgICAgICAgICByZXR1cm4gZmllbGQuZGVwcmVjYXRpb25SZWFzb24gPT0gbnVsbDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG9mVHlwZToge1xuICAgICAgICB0eXBlOiBfX1R5cGUsXG4gICAgICAgIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUodHlwZSkge1xuICAgICAgICAgIHJldHVybiB0eXBlLm9mVHlwZSAhPT0gdW5kZWZpbmVkID8gdHlwZS5vZlR5cGUgOiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG59KTtcbmV4cG9ydCB2YXIgX19GaWVsZCA9IG5ldyBHcmFwaFFMT2JqZWN0VHlwZSh7XG4gIG5hbWU6ICdfX0ZpZWxkJyxcbiAgZGVzY3JpcHRpb246ICdPYmplY3QgYW5kIEludGVyZmFjZSB0eXBlcyBhcmUgZGVzY3JpYmVkIGJ5IGEgbGlzdCBvZiBGaWVsZHMsIGVhY2ggb2Ygd2hpY2ggaGFzIGEgbmFtZSwgcG90ZW50aWFsbHkgYSBsaXN0IG9mIGFyZ3VtZW50cywgYW5kIGEgcmV0dXJuIHR5cGUuJyxcbiAgZmllbGRzOiBmdW5jdGlvbiBmaWVsZHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IHtcbiAgICAgICAgdHlwZTogbmV3IEdyYXBoUUxOb25OdWxsKEdyYXBoUUxTdHJpbmcpLFxuICAgICAgICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKGZpZWxkKSB7XG4gICAgICAgICAgcmV0dXJuIGZpZWxkLm5hbWU7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBkZXNjcmlwdGlvbjoge1xuICAgICAgICB0eXBlOiBHcmFwaFFMU3RyaW5nLFxuICAgICAgICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKGZpZWxkKSB7XG4gICAgICAgICAgcmV0dXJuIGZpZWxkLmRlc2NyaXB0aW9uO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgYXJnczoge1xuICAgICAgICB0eXBlOiBuZXcgR3JhcGhRTE5vbk51bGwobmV3IEdyYXBoUUxMaXN0KG5ldyBHcmFwaFFMTm9uTnVsbChfX0lucHV0VmFsdWUpKSksXG4gICAgICAgIGFyZ3M6IHtcbiAgICAgICAgICBpbmNsdWRlRGVwcmVjYXRlZDoge1xuICAgICAgICAgICAgdHlwZTogR3JhcGhRTEJvb2xlYW4sXG4gICAgICAgICAgICBkZWZhdWx0VmFsdWU6IGZhbHNlXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKGZpZWxkLCBfcmVmNikge1xuICAgICAgICAgIHZhciBpbmNsdWRlRGVwcmVjYXRlZCA9IF9yZWY2LmluY2x1ZGVEZXByZWNhdGVkO1xuICAgICAgICAgIHJldHVybiBpbmNsdWRlRGVwcmVjYXRlZCA/IGZpZWxkLmFyZ3MgOiBmaWVsZC5hcmdzLmZpbHRlcihmdW5jdGlvbiAoYXJnKSB7XG4gICAgICAgICAgICByZXR1cm4gYXJnLmRlcHJlY2F0aW9uUmVhc29uID09IG51bGw7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB0eXBlOiB7XG4gICAgICAgIHR5cGU6IG5ldyBHcmFwaFFMTm9uTnVsbChfX1R5cGUpLFxuICAgICAgICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKGZpZWxkKSB7XG4gICAgICAgICAgcmV0dXJuIGZpZWxkLnR5cGU7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBpc0RlcHJlY2F0ZWQ6IHtcbiAgICAgICAgdHlwZTogbmV3IEdyYXBoUUxOb25OdWxsKEdyYXBoUUxCb29sZWFuKSxcbiAgICAgICAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZShmaWVsZCkge1xuICAgICAgICAgIHJldHVybiBmaWVsZC5kZXByZWNhdGlvblJlYXNvbiAhPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZGVwcmVjYXRpb25SZWFzb246IHtcbiAgICAgICAgdHlwZTogR3JhcGhRTFN0cmluZyxcbiAgICAgICAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZShmaWVsZCkge1xuICAgICAgICAgIHJldHVybiBmaWVsZC5kZXByZWNhdGlvblJlYXNvbjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cbn0pO1xuZXhwb3J0IHZhciBfX0lucHV0VmFsdWUgPSBuZXcgR3JhcGhRTE9iamVjdFR5cGUoe1xuICBuYW1lOiAnX19JbnB1dFZhbHVlJyxcbiAgZGVzY3JpcHRpb246ICdBcmd1bWVudHMgcHJvdmlkZWQgdG8gRmllbGRzIG9yIERpcmVjdGl2ZXMgYW5kIHRoZSBpbnB1dCBmaWVsZHMgb2YgYW4gSW5wdXRPYmplY3QgYXJlIHJlcHJlc2VudGVkIGFzIElucHV0IFZhbHVlcyB3aGljaCBkZXNjcmliZSB0aGVpciB0eXBlIGFuZCBvcHRpb25hbGx5IGEgZGVmYXVsdCB2YWx1ZS4nLFxuICBmaWVsZHM6IGZ1bmN0aW9uIGZpZWxkcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZToge1xuICAgICAgICB0eXBlOiBuZXcgR3JhcGhRTE5vbk51bGwoR3JhcGhRTFN0cmluZyksXG4gICAgICAgIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoaW5wdXRWYWx1ZSkge1xuICAgICAgICAgIHJldHVybiBpbnB1dFZhbHVlLm5hbWU7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBkZXNjcmlwdGlvbjoge1xuICAgICAgICB0eXBlOiBHcmFwaFFMU3RyaW5nLFxuICAgICAgICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKGlucHV0VmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gaW5wdXRWYWx1ZS5kZXNjcmlwdGlvbjtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHR5cGU6IHtcbiAgICAgICAgdHlwZTogbmV3IEdyYXBoUUxOb25OdWxsKF9fVHlwZSksXG4gICAgICAgIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoaW5wdXRWYWx1ZSkge1xuICAgICAgICAgIHJldHVybiBpbnB1dFZhbHVlLnR5cGU7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBkZWZhdWx0VmFsdWU6IHtcbiAgICAgICAgdHlwZTogR3JhcGhRTFN0cmluZyxcbiAgICAgICAgZGVzY3JpcHRpb246ICdBIEdyYXBoUUwtZm9ybWF0dGVkIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIGRlZmF1bHQgdmFsdWUgZm9yIHRoaXMgaW5wdXQgdmFsdWUuJyxcbiAgICAgICAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZShpbnB1dFZhbHVlKSB7XG4gICAgICAgICAgdmFyIHR5cGUgPSBpbnB1dFZhbHVlLnR5cGUsXG4gICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZSA9IGlucHV0VmFsdWUuZGVmYXVsdFZhbHVlO1xuICAgICAgICAgIHZhciB2YWx1ZUFTVCA9IGFzdEZyb21WYWx1ZShkZWZhdWx0VmFsdWUsIHR5cGUpO1xuICAgICAgICAgIHJldHVybiB2YWx1ZUFTVCA/IHByaW50KHZhbHVlQVNUKSA6IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBpc0RlcHJlY2F0ZWQ6IHtcbiAgICAgICAgdHlwZTogbmV3IEdyYXBoUUxOb25OdWxsKEdyYXBoUUxCb29sZWFuKSxcbiAgICAgICAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZShmaWVsZCkge1xuICAgICAgICAgIHJldHVybiBmaWVsZC5kZXByZWNhdGlvblJlYXNvbiAhPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZGVwcmVjYXRpb25SZWFzb246IHtcbiAgICAgICAgdHlwZTogR3JhcGhRTFN0cmluZyxcbiAgICAgICAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZShvYmopIHtcbiAgICAgICAgICByZXR1cm4gb2JqLmRlcHJlY2F0aW9uUmVhc29uO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxufSk7XG5leHBvcnQgdmFyIF9fRW51bVZhbHVlID0gbmV3IEdyYXBoUUxPYmplY3RUeXBlKHtcbiAgbmFtZTogJ19fRW51bVZhbHVlJyxcbiAgZGVzY3JpcHRpb246ICdPbmUgcG9zc2libGUgdmFsdWUgZm9yIGEgZ2l2ZW4gRW51bS4gRW51bSB2YWx1ZXMgYXJlIHVuaXF1ZSB2YWx1ZXMsIG5vdCBhIHBsYWNlaG9sZGVyIGZvciBhIHN0cmluZyBvciBudW1lcmljIHZhbHVlLiBIb3dldmVyIGFuIEVudW0gdmFsdWUgaXMgcmV0dXJuZWQgaW4gYSBKU09OIHJlc3BvbnNlIGFzIGEgc3RyaW5nLicsXG4gIGZpZWxkczogZnVuY3Rpb24gZmllbGRzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiB7XG4gICAgICAgIHR5cGU6IG5ldyBHcmFwaFFMTm9uTnVsbChHcmFwaFFMU3RyaW5nKSxcbiAgICAgICAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZShlbnVtVmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gZW51bVZhbHVlLm5hbWU7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBkZXNjcmlwdGlvbjoge1xuICAgICAgICB0eXBlOiBHcmFwaFFMU3RyaW5nLFxuICAgICAgICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKGVudW1WYWx1ZSkge1xuICAgICAgICAgIHJldHVybiBlbnVtVmFsdWUuZGVzY3JpcHRpb247XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBpc0RlcHJlY2F0ZWQ6IHtcbiAgICAgICAgdHlwZTogbmV3IEdyYXBoUUxOb25OdWxsKEdyYXBoUUxCb29sZWFuKSxcbiAgICAgICAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZShlbnVtVmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gZW51bVZhbHVlLmRlcHJlY2F0aW9uUmVhc29uICE9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBkZXByZWNhdGlvblJlYXNvbjoge1xuICAgICAgICB0eXBlOiBHcmFwaFFMU3RyaW5nLFxuICAgICAgICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKGVudW1WYWx1ZSkge1xuICAgICAgICAgIHJldHVybiBlbnVtVmFsdWUuZGVwcmVjYXRpb25SZWFzb247XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG59KTtcbmV4cG9ydCB2YXIgVHlwZUtpbmQgPSBPYmplY3QuZnJlZXplKHtcbiAgU0NBTEFSOiAnU0NBTEFSJyxcbiAgT0JKRUNUOiAnT0JKRUNUJyxcbiAgSU5URVJGQUNFOiAnSU5URVJGQUNFJyxcbiAgVU5JT046ICdVTklPTicsXG4gIEVOVU06ICdFTlVNJyxcbiAgSU5QVVRfT0JKRUNUOiAnSU5QVVRfT0JKRUNUJyxcbiAgTElTVDogJ0xJU1QnLFxuICBOT05fTlVMTDogJ05PTl9OVUxMJ1xufSk7XG5leHBvcnQgdmFyIF9fVHlwZUtpbmQgPSBuZXcgR3JhcGhRTEVudW1UeXBlKHtcbiAgbmFtZTogJ19fVHlwZUtpbmQnLFxuICBkZXNjcmlwdGlvbjogJ0FuIGVudW0gZGVzY3JpYmluZyB3aGF0IGtpbmQgb2YgdHlwZSBhIGdpdmVuIGBfX1R5cGVgIGlzLicsXG4gIHZhbHVlczoge1xuICAgIFNDQUxBUjoge1xuICAgICAgdmFsdWU6IFR5cGVLaW5kLlNDQUxBUixcbiAgICAgIGRlc2NyaXB0aW9uOiAnSW5kaWNhdGVzIHRoaXMgdHlwZSBpcyBhIHNjYWxhci4nXG4gICAgfSxcbiAgICBPQkpFQ1Q6IHtcbiAgICAgIHZhbHVlOiBUeXBlS2luZC5PQkpFQ1QsXG4gICAgICBkZXNjcmlwdGlvbjogJ0luZGljYXRlcyB0aGlzIHR5cGUgaXMgYW4gb2JqZWN0LiBgZmllbGRzYCBhbmQgYGludGVyZmFjZXNgIGFyZSB2YWxpZCBmaWVsZHMuJ1xuICAgIH0sXG4gICAgSU5URVJGQUNFOiB7XG4gICAgICB2YWx1ZTogVHlwZUtpbmQuSU5URVJGQUNFLFxuICAgICAgZGVzY3JpcHRpb246ICdJbmRpY2F0ZXMgdGhpcyB0eXBlIGlzIGFuIGludGVyZmFjZS4gYGZpZWxkc2AsIGBpbnRlcmZhY2VzYCwgYW5kIGBwb3NzaWJsZVR5cGVzYCBhcmUgdmFsaWQgZmllbGRzLidcbiAgICB9LFxuICAgIFVOSU9OOiB7XG4gICAgICB2YWx1ZTogVHlwZUtpbmQuVU5JT04sXG4gICAgICBkZXNjcmlwdGlvbjogJ0luZGljYXRlcyB0aGlzIHR5cGUgaXMgYSB1bmlvbi4gYHBvc3NpYmxlVHlwZXNgIGlzIGEgdmFsaWQgZmllbGQuJ1xuICAgIH0sXG4gICAgRU5VTToge1xuICAgICAgdmFsdWU6IFR5cGVLaW5kLkVOVU0sXG4gICAgICBkZXNjcmlwdGlvbjogJ0luZGljYXRlcyB0aGlzIHR5cGUgaXMgYW4gZW51bS4gYGVudW1WYWx1ZXNgIGlzIGEgdmFsaWQgZmllbGQuJ1xuICAgIH0sXG4gICAgSU5QVVRfT0JKRUNUOiB7XG4gICAgICB2YWx1ZTogVHlwZUtpbmQuSU5QVVRfT0JKRUNULFxuICAgICAgZGVzY3JpcHRpb246ICdJbmRpY2F0ZXMgdGhpcyB0eXBlIGlzIGFuIGlucHV0IG9iamVjdC4gYGlucHV0RmllbGRzYCBpcyBhIHZhbGlkIGZpZWxkLidcbiAgICB9LFxuICAgIExJU1Q6IHtcbiAgICAgIHZhbHVlOiBUeXBlS2luZC5MSVNULFxuICAgICAgZGVzY3JpcHRpb246ICdJbmRpY2F0ZXMgdGhpcyB0eXBlIGlzIGEgbGlzdC4gYG9mVHlwZWAgaXMgYSB2YWxpZCBmaWVsZC4nXG4gICAgfSxcbiAgICBOT05fTlVMTDoge1xuICAgICAgdmFsdWU6IFR5cGVLaW5kLk5PTl9OVUxMLFxuICAgICAgZGVzY3JpcHRpb246ICdJbmRpY2F0ZXMgdGhpcyB0eXBlIGlzIGEgbm9uLW51bGwuIGBvZlR5cGVgIGlzIGEgdmFsaWQgZmllbGQuJ1xuICAgIH1cbiAgfVxufSk7XG4vKipcbiAqIE5vdGUgdGhhdCB0aGVzZSBhcmUgR3JhcGhRTEZpZWxkIGFuZCBub3QgR3JhcGhRTEZpZWxkQ29uZmlnLFxuICogc28gdGhlIGZvcm1hdCBmb3IgYXJncyBpcyBkaWZmZXJlbnQuXG4gKi9cblxuZXhwb3J0IHZhciBTY2hlbWFNZXRhRmllbGREZWYgPSB7XG4gIG5hbWU6ICdfX3NjaGVtYScsXG4gIHR5cGU6IG5ldyBHcmFwaFFMTm9uTnVsbChfX1NjaGVtYSksXG4gIGRlc2NyaXB0aW9uOiAnQWNjZXNzIHRoZSBjdXJyZW50IHR5cGUgc2NoZW1hIG9mIHRoaXMgc2VydmVyLicsXG4gIGFyZ3M6IFtdLFxuICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKF9zb3VyY2UsIF9hcmdzLCBfY29udGV4dCwgX3JlZjcpIHtcbiAgICB2YXIgc2NoZW1hID0gX3JlZjcuc2NoZW1hO1xuICAgIHJldHVybiBzY2hlbWE7XG4gIH0sXG4gIGlzRGVwcmVjYXRlZDogZmFsc2UsXG4gIGRlcHJlY2F0aW9uUmVhc29uOiB1bmRlZmluZWQsXG4gIGV4dGVuc2lvbnM6IHVuZGVmaW5lZCxcbiAgYXN0Tm9kZTogdW5kZWZpbmVkXG59O1xuZXhwb3J0IHZhciBUeXBlTWV0YUZpZWxkRGVmID0ge1xuICBuYW1lOiAnX190eXBlJyxcbiAgdHlwZTogX19UeXBlLFxuICBkZXNjcmlwdGlvbjogJ1JlcXVlc3QgdGhlIHR5cGUgaW5mb3JtYXRpb24gb2YgYSBzaW5nbGUgdHlwZS4nLFxuICBhcmdzOiBbe1xuICAgIG5hbWU6ICduYW1lJyxcbiAgICBkZXNjcmlwdGlvbjogdW5kZWZpbmVkLFxuICAgIHR5cGU6IG5ldyBHcmFwaFFMTm9uTnVsbChHcmFwaFFMU3RyaW5nKSxcbiAgICBkZWZhdWx0VmFsdWU6IHVuZGVmaW5lZCxcbiAgICBkZXByZWNhdGlvblJlYXNvbjogdW5kZWZpbmVkLFxuICAgIGV4dGVuc2lvbnM6IHVuZGVmaW5lZCxcbiAgICBhc3ROb2RlOiB1bmRlZmluZWRcbiAgfV0sXG4gIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoX3NvdXJjZSwgX3JlZjgsIF9jb250ZXh0LCBfcmVmOSkge1xuICAgIHZhciBuYW1lID0gX3JlZjgubmFtZTtcbiAgICB2YXIgc2NoZW1hID0gX3JlZjkuc2NoZW1hO1xuICAgIHJldHVybiBzY2hlbWEuZ2V0VHlwZShuYW1lKTtcbiAgfSxcbiAgaXNEZXByZWNhdGVkOiBmYWxzZSxcbiAgZGVwcmVjYXRpb25SZWFzb246IHVuZGVmaW5lZCxcbiAgZXh0ZW5zaW9uczogdW5kZWZpbmVkLFxuICBhc3ROb2RlOiB1bmRlZmluZWRcbn07XG5leHBvcnQgdmFyIFR5cGVOYW1lTWV0YUZpZWxkRGVmID0ge1xuICBuYW1lOiAnX190eXBlbmFtZScsXG4gIHR5cGU6IG5ldyBHcmFwaFFMTm9uTnVsbChHcmFwaFFMU3RyaW5nKSxcbiAgZGVzY3JpcHRpb246ICdUaGUgbmFtZSBvZiB0aGUgY3VycmVudCBPYmplY3QgdHlwZSBhdCBydW50aW1lLicsXG4gIGFyZ3M6IFtdLFxuICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKF9zb3VyY2UsIF9hcmdzLCBfY29udGV4dCwgX3JlZjEwKSB7XG4gICAgdmFyIHBhcmVudFR5cGUgPSBfcmVmMTAucGFyZW50VHlwZTtcbiAgICByZXR1cm4gcGFyZW50VHlwZS5uYW1lO1xuICB9LFxuICBpc0RlcHJlY2F0ZWQ6IGZhbHNlLFxuICBkZXByZWNhdGlvblJlYXNvbjogdW5kZWZpbmVkLFxuICBleHRlbnNpb25zOiB1bmRlZmluZWQsXG4gIGFzdE5vZGU6IHVuZGVmaW5lZFxufTtcbmV4cG9ydCB2YXIgaW50cm9zcGVjdGlvblR5cGVzID0gT2JqZWN0LmZyZWV6ZShbX19TY2hlbWEsIF9fRGlyZWN0aXZlLCBfX0RpcmVjdGl2ZUxvY2F0aW9uLCBfX1R5cGUsIF9fRmllbGQsIF9fSW5wdXRWYWx1ZSwgX19FbnVtVmFsdWUsIF9fVHlwZUtpbmRdKTtcbmV4cG9ydCBmdW5jdGlvbiBpc0ludHJvc3BlY3Rpb25UeXBlKHR5cGUpIHtcbiAgcmV0dXJuIGludHJvc3BlY3Rpb25UeXBlcy5zb21lKGZ1bmN0aW9uIChfcmVmMTEpIHtcbiAgICB2YXIgbmFtZSA9IF9yZWYxMS5uYW1lO1xuICAgIHJldHVybiB0eXBlLm5hbWUgPT09IG5hbWU7XG4gIH0pO1xufVxuIiwiaW1wb3J0IGlzRmluaXRlIGZyb20gXCIuLi9wb2x5ZmlsbHMvaXNGaW5pdGUubWpzXCI7XG5pbXBvcnQgaXNJbnRlZ2VyIGZyb20gXCIuLi9wb2x5ZmlsbHMvaXNJbnRlZ2VyLm1qc1wiO1xuaW1wb3J0IGluc3BlY3QgZnJvbSBcIi4uL2pzdXRpbHMvaW5zcGVjdC5tanNcIjtcbmltcG9ydCBpc09iamVjdExpa2UgZnJvbSBcIi4uL2pzdXRpbHMvaXNPYmplY3RMaWtlLm1qc1wiO1xuaW1wb3J0IHsgS2luZCB9IGZyb20gXCIuLi9sYW5ndWFnZS9raW5kcy5tanNcIjtcbmltcG9ydCB7IHByaW50IH0gZnJvbSBcIi4uL2xhbmd1YWdlL3ByaW50ZXIubWpzXCI7XG5pbXBvcnQgeyBHcmFwaFFMRXJyb3IgfSBmcm9tIFwiLi4vZXJyb3IvR3JhcGhRTEVycm9yLm1qc1wiO1xuaW1wb3J0IHsgR3JhcGhRTFNjYWxhclR5cGUgfSBmcm9tIFwiLi9kZWZpbml0aW9uLm1qc1wiOyAvLyBBcyBwZXIgdGhlIEdyYXBoUUwgU3BlYywgSW50ZWdlcnMgYXJlIG9ubHkgdHJlYXRlZCBhcyB2YWxpZCB3aGVuIGEgdmFsaWRcbi8vIDMyLWJpdCBzaWduZWQgaW50ZWdlciwgcHJvdmlkaW5nIHRoZSBicm9hZGVzdCBzdXBwb3J0IGFjcm9zcyBwbGF0Zm9ybXMuXG4vL1xuLy8gbi5iLiBKYXZhU2NyaXB0J3MgaW50ZWdlcnMgYXJlIHNhZmUgYmV0d2VlbiAtKDJeNTMgLSAxKSBhbmQgMl41MyAtIDEgYmVjYXVzZVxuLy8gdGhleSBhcmUgaW50ZXJuYWxseSByZXByZXNlbnRlZCBhcyBJRUVFIDc1NCBkb3VibGVzLlxuXG52YXIgTUFYX0lOVCA9IDIxNDc0ODM2NDc7XG52YXIgTUlOX0lOVCA9IC0yMTQ3NDgzNjQ4O1xuXG5mdW5jdGlvbiBzZXJpYWxpemVJbnQob3V0cHV0VmFsdWUpIHtcbiAgdmFyIGNvZXJjZWRWYWx1ZSA9IHNlcmlhbGl6ZU9iamVjdChvdXRwdXRWYWx1ZSk7XG5cbiAgaWYgKHR5cGVvZiBjb2VyY2VkVmFsdWUgPT09ICdib29sZWFuJykge1xuICAgIHJldHVybiBjb2VyY2VkVmFsdWUgPyAxIDogMDtcbiAgfVxuXG4gIHZhciBudW0gPSBjb2VyY2VkVmFsdWU7XG5cbiAgaWYgKHR5cGVvZiBjb2VyY2VkVmFsdWUgPT09ICdzdHJpbmcnICYmIGNvZXJjZWRWYWx1ZSAhPT0gJycpIHtcbiAgICBudW0gPSBOdW1iZXIoY29lcmNlZFZhbHVlKTtcbiAgfVxuXG4gIGlmICghaXNJbnRlZ2VyKG51bSkpIHtcbiAgICB0aHJvdyBuZXcgR3JhcGhRTEVycm9yKFwiSW50IGNhbm5vdCByZXByZXNlbnQgbm9uLWludGVnZXIgdmFsdWU6IFwiLmNvbmNhdChpbnNwZWN0KGNvZXJjZWRWYWx1ZSkpKTtcbiAgfVxuXG4gIGlmIChudW0gPiBNQVhfSU5UIHx8IG51bSA8IE1JTl9JTlQpIHtcbiAgICB0aHJvdyBuZXcgR3JhcGhRTEVycm9yKCdJbnQgY2Fubm90IHJlcHJlc2VudCBub24gMzItYml0IHNpZ25lZCBpbnRlZ2VyIHZhbHVlOiAnICsgaW5zcGVjdChjb2VyY2VkVmFsdWUpKTtcbiAgfVxuXG4gIHJldHVybiBudW07XG59XG5cbmZ1bmN0aW9uIGNvZXJjZUludChpbnB1dFZhbHVlKSB7XG4gIGlmICghaXNJbnRlZ2VyKGlucHV0VmFsdWUpKSB7XG4gICAgdGhyb3cgbmV3IEdyYXBoUUxFcnJvcihcIkludCBjYW5ub3QgcmVwcmVzZW50IG5vbi1pbnRlZ2VyIHZhbHVlOiBcIi5jb25jYXQoaW5zcGVjdChpbnB1dFZhbHVlKSkpO1xuICB9XG5cbiAgaWYgKGlucHV0VmFsdWUgPiBNQVhfSU5UIHx8IGlucHV0VmFsdWUgPCBNSU5fSU5UKSB7XG4gICAgdGhyb3cgbmV3IEdyYXBoUUxFcnJvcihcIkludCBjYW5ub3QgcmVwcmVzZW50IG5vbiAzMi1iaXQgc2lnbmVkIGludGVnZXIgdmFsdWU6IFwiLmNvbmNhdChpbnB1dFZhbHVlKSk7XG4gIH1cblxuICByZXR1cm4gaW5wdXRWYWx1ZTtcbn1cblxuZXhwb3J0IHZhciBHcmFwaFFMSW50ID0gbmV3IEdyYXBoUUxTY2FsYXJUeXBlKHtcbiAgbmFtZTogJ0ludCcsXG4gIGRlc2NyaXB0aW9uOiAnVGhlIGBJbnRgIHNjYWxhciB0eXBlIHJlcHJlc2VudHMgbm9uLWZyYWN0aW9uYWwgc2lnbmVkIHdob2xlIG51bWVyaWMgdmFsdWVzLiBJbnQgY2FuIHJlcHJlc2VudCB2YWx1ZXMgYmV0d2VlbiAtKDJeMzEpIGFuZCAyXjMxIC0gMS4nLFxuICBzZXJpYWxpemU6IHNlcmlhbGl6ZUludCxcbiAgcGFyc2VWYWx1ZTogY29lcmNlSW50LFxuICBwYXJzZUxpdGVyYWw6IGZ1bmN0aW9uIHBhcnNlTGl0ZXJhbCh2YWx1ZU5vZGUpIHtcbiAgICBpZiAodmFsdWVOb2RlLmtpbmQgIT09IEtpbmQuSU5UKSB7XG4gICAgICB0aHJvdyBuZXcgR3JhcGhRTEVycm9yKFwiSW50IGNhbm5vdCByZXByZXNlbnQgbm9uLWludGVnZXIgdmFsdWU6IFwiLmNvbmNhdChwcmludCh2YWx1ZU5vZGUpKSwgdmFsdWVOb2RlKTtcbiAgICB9XG5cbiAgICB2YXIgbnVtID0gcGFyc2VJbnQodmFsdWVOb2RlLnZhbHVlLCAxMCk7XG5cbiAgICBpZiAobnVtID4gTUFYX0lOVCB8fCBudW0gPCBNSU5fSU5UKSB7XG4gICAgICB0aHJvdyBuZXcgR3JhcGhRTEVycm9yKFwiSW50IGNhbm5vdCByZXByZXNlbnQgbm9uIDMyLWJpdCBzaWduZWQgaW50ZWdlciB2YWx1ZTogXCIuY29uY2F0KHZhbHVlTm9kZS52YWx1ZSksIHZhbHVlTm9kZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bTtcbiAgfVxufSk7XG5cbmZ1bmN0aW9uIHNlcmlhbGl6ZUZsb2F0KG91dHB1dFZhbHVlKSB7XG4gIHZhciBjb2VyY2VkVmFsdWUgPSBzZXJpYWxpemVPYmplY3Qob3V0cHV0VmFsdWUpO1xuXG4gIGlmICh0eXBlb2YgY29lcmNlZFZhbHVlID09PSAnYm9vbGVhbicpIHtcbiAgICByZXR1cm4gY29lcmNlZFZhbHVlID8gMSA6IDA7XG4gIH1cblxuICB2YXIgbnVtID0gY29lcmNlZFZhbHVlO1xuXG4gIGlmICh0eXBlb2YgY29lcmNlZFZhbHVlID09PSAnc3RyaW5nJyAmJiBjb2VyY2VkVmFsdWUgIT09ICcnKSB7XG4gICAgbnVtID0gTnVtYmVyKGNvZXJjZWRWYWx1ZSk7XG4gIH1cblxuICBpZiAoIWlzRmluaXRlKG51bSkpIHtcbiAgICB0aHJvdyBuZXcgR3JhcGhRTEVycm9yKFwiRmxvYXQgY2Fubm90IHJlcHJlc2VudCBub24gbnVtZXJpYyB2YWx1ZTogXCIuY29uY2F0KGluc3BlY3QoY29lcmNlZFZhbHVlKSkpO1xuICB9XG5cbiAgcmV0dXJuIG51bTtcbn1cblxuZnVuY3Rpb24gY29lcmNlRmxvYXQoaW5wdXRWYWx1ZSkge1xuICBpZiAoIWlzRmluaXRlKGlucHV0VmFsdWUpKSB7XG4gICAgdGhyb3cgbmV3IEdyYXBoUUxFcnJvcihcIkZsb2F0IGNhbm5vdCByZXByZXNlbnQgbm9uIG51bWVyaWMgdmFsdWU6IFwiLmNvbmNhdChpbnNwZWN0KGlucHV0VmFsdWUpKSk7XG4gIH1cblxuICByZXR1cm4gaW5wdXRWYWx1ZTtcbn1cblxuZXhwb3J0IHZhciBHcmFwaFFMRmxvYXQgPSBuZXcgR3JhcGhRTFNjYWxhclR5cGUoe1xuICBuYW1lOiAnRmxvYXQnLFxuICBkZXNjcmlwdGlvbjogJ1RoZSBgRmxvYXRgIHNjYWxhciB0eXBlIHJlcHJlc2VudHMgc2lnbmVkIGRvdWJsZS1wcmVjaXNpb24gZnJhY3Rpb25hbCB2YWx1ZXMgYXMgc3BlY2lmaWVkIGJ5IFtJRUVFIDc1NF0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSUVFRV9mbG9hdGluZ19wb2ludCkuJyxcbiAgc2VyaWFsaXplOiBzZXJpYWxpemVGbG9hdCxcbiAgcGFyc2VWYWx1ZTogY29lcmNlRmxvYXQsXG4gIHBhcnNlTGl0ZXJhbDogZnVuY3Rpb24gcGFyc2VMaXRlcmFsKHZhbHVlTm9kZSkge1xuICAgIGlmICh2YWx1ZU5vZGUua2luZCAhPT0gS2luZC5GTE9BVCAmJiB2YWx1ZU5vZGUua2luZCAhPT0gS2luZC5JTlQpIHtcbiAgICAgIHRocm93IG5ldyBHcmFwaFFMRXJyb3IoXCJGbG9hdCBjYW5ub3QgcmVwcmVzZW50IG5vbiBudW1lcmljIHZhbHVlOiBcIi5jb25jYXQocHJpbnQodmFsdWVOb2RlKSksIHZhbHVlTm9kZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhcnNlRmxvYXQodmFsdWVOb2RlLnZhbHVlKTtcbiAgfVxufSk7IC8vIFN1cHBvcnQgc2VyaWFsaXppbmcgb2JqZWN0cyB3aXRoIGN1c3RvbSB2YWx1ZU9mKCkgb3IgdG9KU09OKCkgZnVuY3Rpb25zIC1cbi8vIGEgY29tbW9uIHdheSB0byByZXByZXNlbnQgYSBjb21wbGV4IHZhbHVlIHdoaWNoIGNhbiBiZSByZXByZXNlbnRlZCBhc1xuLy8gYSBzdHJpbmcgKGV4OiBNb25nb0RCIGlkIG9iamVjdHMpLlxuXG5mdW5jdGlvbiBzZXJpYWxpemVPYmplY3Qob3V0cHV0VmFsdWUpIHtcbiAgaWYgKGlzT2JqZWN0TGlrZShvdXRwdXRWYWx1ZSkpIHtcbiAgICBpZiAodHlwZW9mIG91dHB1dFZhbHVlLnZhbHVlT2YgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHZhciB2YWx1ZU9mUmVzdWx0ID0gb3V0cHV0VmFsdWUudmFsdWVPZigpO1xuXG4gICAgICBpZiAoIWlzT2JqZWN0TGlrZSh2YWx1ZU9mUmVzdWx0KSkge1xuICAgICAgICByZXR1cm4gdmFsdWVPZlJlc3VsdDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG91dHB1dFZhbHVlLnRvSlNPTiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtdXNlXVxuICAgICAgcmV0dXJuIG91dHB1dFZhbHVlLnRvSlNPTigpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvdXRwdXRWYWx1ZTtcbn1cblxuZnVuY3Rpb24gc2VyaWFsaXplU3RyaW5nKG91dHB1dFZhbHVlKSB7XG4gIHZhciBjb2VyY2VkVmFsdWUgPSBzZXJpYWxpemVPYmplY3Qob3V0cHV0VmFsdWUpOyAvLyBTZXJpYWxpemUgc3RyaW5nLCBib29sZWFuIGFuZCBudW1iZXIgdmFsdWVzIHRvIGEgc3RyaW5nLCBidXQgZG8gbm90XG4gIC8vIGF0dGVtcHQgdG8gY29lcmNlIG9iamVjdCwgZnVuY3Rpb24sIHN5bWJvbCwgb3Igb3RoZXIgdHlwZXMgYXMgc3RyaW5ncy5cblxuICBpZiAodHlwZW9mIGNvZXJjZWRWYWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gY29lcmNlZFZhbHVlO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBjb2VyY2VkVmFsdWUgPT09ICdib29sZWFuJykge1xuICAgIHJldHVybiBjb2VyY2VkVmFsdWUgPyAndHJ1ZScgOiAnZmFsc2UnO1xuICB9XG5cbiAgaWYgKGlzRmluaXRlKGNvZXJjZWRWYWx1ZSkpIHtcbiAgICByZXR1cm4gY29lcmNlZFZhbHVlLnRvU3RyaW5nKCk7XG4gIH1cblxuICB0aHJvdyBuZXcgR3JhcGhRTEVycm9yKFwiU3RyaW5nIGNhbm5vdCByZXByZXNlbnQgdmFsdWU6IFwiLmNvbmNhdChpbnNwZWN0KG91dHB1dFZhbHVlKSkpO1xufVxuXG5mdW5jdGlvbiBjb2VyY2VTdHJpbmcoaW5wdXRWYWx1ZSkge1xuICBpZiAodHlwZW9mIGlucHV0VmFsdWUgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IEdyYXBoUUxFcnJvcihcIlN0cmluZyBjYW5ub3QgcmVwcmVzZW50IGEgbm9uIHN0cmluZyB2YWx1ZTogXCIuY29uY2F0KGluc3BlY3QoaW5wdXRWYWx1ZSkpKTtcbiAgfVxuXG4gIHJldHVybiBpbnB1dFZhbHVlO1xufVxuXG5leHBvcnQgdmFyIEdyYXBoUUxTdHJpbmcgPSBuZXcgR3JhcGhRTFNjYWxhclR5cGUoe1xuICBuYW1lOiAnU3RyaW5nJyxcbiAgZGVzY3JpcHRpb246ICdUaGUgYFN0cmluZ2Agc2NhbGFyIHR5cGUgcmVwcmVzZW50cyB0ZXh0dWFsIGRhdGEsIHJlcHJlc2VudGVkIGFzIFVURi04IGNoYXJhY3RlciBzZXF1ZW5jZXMuIFRoZSBTdHJpbmcgdHlwZSBpcyBtb3N0IG9mdGVuIHVzZWQgYnkgR3JhcGhRTCB0byByZXByZXNlbnQgZnJlZS1mb3JtIGh1bWFuLXJlYWRhYmxlIHRleHQuJyxcbiAgc2VyaWFsaXplOiBzZXJpYWxpemVTdHJpbmcsXG4gIHBhcnNlVmFsdWU6IGNvZXJjZVN0cmluZyxcbiAgcGFyc2VMaXRlcmFsOiBmdW5jdGlvbiBwYXJzZUxpdGVyYWwodmFsdWVOb2RlKSB7XG4gICAgaWYgKHZhbHVlTm9kZS5raW5kICE9PSBLaW5kLlNUUklORykge1xuICAgICAgdGhyb3cgbmV3IEdyYXBoUUxFcnJvcihcIlN0cmluZyBjYW5ub3QgcmVwcmVzZW50IGEgbm9uIHN0cmluZyB2YWx1ZTogXCIuY29uY2F0KHByaW50KHZhbHVlTm9kZSkpLCB2YWx1ZU5vZGUpO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZU5vZGUudmFsdWU7XG4gIH1cbn0pO1xuXG5mdW5jdGlvbiBzZXJpYWxpemVCb29sZWFuKG91dHB1dFZhbHVlKSB7XG4gIHZhciBjb2VyY2VkVmFsdWUgPSBzZXJpYWxpemVPYmplY3Qob3V0cHV0VmFsdWUpO1xuXG4gIGlmICh0eXBlb2YgY29lcmNlZFZhbHVlID09PSAnYm9vbGVhbicpIHtcbiAgICByZXR1cm4gY29lcmNlZFZhbHVlO1xuICB9XG5cbiAgaWYgKGlzRmluaXRlKGNvZXJjZWRWYWx1ZSkpIHtcbiAgICByZXR1cm4gY29lcmNlZFZhbHVlICE9PSAwO1xuICB9XG5cbiAgdGhyb3cgbmV3IEdyYXBoUUxFcnJvcihcIkJvb2xlYW4gY2Fubm90IHJlcHJlc2VudCBhIG5vbiBib29sZWFuIHZhbHVlOiBcIi5jb25jYXQoaW5zcGVjdChjb2VyY2VkVmFsdWUpKSk7XG59XG5cbmZ1bmN0aW9uIGNvZXJjZUJvb2xlYW4oaW5wdXRWYWx1ZSkge1xuICBpZiAodHlwZW9mIGlucHV0VmFsdWUgIT09ICdib29sZWFuJykge1xuICAgIHRocm93IG5ldyBHcmFwaFFMRXJyb3IoXCJCb29sZWFuIGNhbm5vdCByZXByZXNlbnQgYSBub24gYm9vbGVhbiB2YWx1ZTogXCIuY29uY2F0KGluc3BlY3QoaW5wdXRWYWx1ZSkpKTtcbiAgfVxuXG4gIHJldHVybiBpbnB1dFZhbHVlO1xufVxuXG5leHBvcnQgdmFyIEdyYXBoUUxCb29sZWFuID0gbmV3IEdyYXBoUUxTY2FsYXJUeXBlKHtcbiAgbmFtZTogJ0Jvb2xlYW4nLFxuICBkZXNjcmlwdGlvbjogJ1RoZSBgQm9vbGVhbmAgc2NhbGFyIHR5cGUgcmVwcmVzZW50cyBgdHJ1ZWAgb3IgYGZhbHNlYC4nLFxuICBzZXJpYWxpemU6IHNlcmlhbGl6ZUJvb2xlYW4sXG4gIHBhcnNlVmFsdWU6IGNvZXJjZUJvb2xlYW4sXG4gIHBhcnNlTGl0ZXJhbDogZnVuY3Rpb24gcGFyc2VMaXRlcmFsKHZhbHVlTm9kZSkge1xuICAgIGlmICh2YWx1ZU5vZGUua2luZCAhPT0gS2luZC5CT09MRUFOKSB7XG4gICAgICB0aHJvdyBuZXcgR3JhcGhRTEVycm9yKFwiQm9vbGVhbiBjYW5ub3QgcmVwcmVzZW50IGEgbm9uIGJvb2xlYW4gdmFsdWU6IFwiLmNvbmNhdChwcmludCh2YWx1ZU5vZGUpKSwgdmFsdWVOb2RlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWVOb2RlLnZhbHVlO1xuICB9XG59KTtcblxuZnVuY3Rpb24gc2VyaWFsaXplSUQob3V0cHV0VmFsdWUpIHtcbiAgdmFyIGNvZXJjZWRWYWx1ZSA9IHNlcmlhbGl6ZU9iamVjdChvdXRwdXRWYWx1ZSk7XG5cbiAgaWYgKHR5cGVvZiBjb2VyY2VkVmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGNvZXJjZWRWYWx1ZTtcbiAgfVxuXG4gIGlmIChpc0ludGVnZXIoY29lcmNlZFZhbHVlKSkge1xuICAgIHJldHVybiBTdHJpbmcoY29lcmNlZFZhbHVlKTtcbiAgfVxuXG4gIHRocm93IG5ldyBHcmFwaFFMRXJyb3IoXCJJRCBjYW5ub3QgcmVwcmVzZW50IHZhbHVlOiBcIi5jb25jYXQoaW5zcGVjdChvdXRwdXRWYWx1ZSkpKTtcbn1cblxuZnVuY3Rpb24gY29lcmNlSUQoaW5wdXRWYWx1ZSkge1xuICBpZiAodHlwZW9mIGlucHV0VmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGlucHV0VmFsdWU7XG4gIH1cblxuICBpZiAoaXNJbnRlZ2VyKGlucHV0VmFsdWUpKSB7XG4gICAgcmV0dXJuIGlucHV0VmFsdWUudG9TdHJpbmcoKTtcbiAgfVxuXG4gIHRocm93IG5ldyBHcmFwaFFMRXJyb3IoXCJJRCBjYW5ub3QgcmVwcmVzZW50IHZhbHVlOiBcIi5jb25jYXQoaW5zcGVjdChpbnB1dFZhbHVlKSkpO1xufVxuXG5leHBvcnQgdmFyIEdyYXBoUUxJRCA9IG5ldyBHcmFwaFFMU2NhbGFyVHlwZSh7XG4gIG5hbWU6ICdJRCcsXG4gIGRlc2NyaXB0aW9uOiAnVGhlIGBJRGAgc2NhbGFyIHR5cGUgcmVwcmVzZW50cyBhIHVuaXF1ZSBpZGVudGlmaWVyLCBvZnRlbiB1c2VkIHRvIHJlZmV0Y2ggYW4gb2JqZWN0IG9yIGFzIGtleSBmb3IgYSBjYWNoZS4gVGhlIElEIHR5cGUgYXBwZWFycyBpbiBhIEpTT04gcmVzcG9uc2UgYXMgYSBTdHJpbmc7IGhvd2V2ZXIsIGl0IGlzIG5vdCBpbnRlbmRlZCB0byBiZSBodW1hbi1yZWFkYWJsZS4gV2hlbiBleHBlY3RlZCBhcyBhbiBpbnB1dCB0eXBlLCBhbnkgc3RyaW5nIChzdWNoIGFzIGBcIjRcImApIG9yIGludGVnZXIgKHN1Y2ggYXMgYDRgKSBpbnB1dCB2YWx1ZSB3aWxsIGJlIGFjY2VwdGVkIGFzIGFuIElELicsXG4gIHNlcmlhbGl6ZTogc2VyaWFsaXplSUQsXG4gIHBhcnNlVmFsdWU6IGNvZXJjZUlELFxuICBwYXJzZUxpdGVyYWw6IGZ1bmN0aW9uIHBhcnNlTGl0ZXJhbCh2YWx1ZU5vZGUpIHtcbiAgICBpZiAodmFsdWVOb2RlLmtpbmQgIT09IEtpbmQuU1RSSU5HICYmIHZhbHVlTm9kZS5raW5kICE9PSBLaW5kLklOVCkge1xuICAgICAgdGhyb3cgbmV3IEdyYXBoUUxFcnJvcignSUQgY2Fubm90IHJlcHJlc2VudCBhIG5vbi1zdHJpbmcgYW5kIG5vbi1pbnRlZ2VyIHZhbHVlOiAnICsgcHJpbnQodmFsdWVOb2RlKSwgdmFsdWVOb2RlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWVOb2RlLnZhbHVlO1xuICB9XG59KTtcbmV4cG9ydCB2YXIgc3BlY2lmaWVkU2NhbGFyVHlwZXMgPSBPYmplY3QuZnJlZXplKFtHcmFwaFFMU3RyaW5nLCBHcmFwaFFMSW50LCBHcmFwaFFMRmxvYXQsIEdyYXBoUUxCb29sZWFuLCBHcmFwaFFMSURdKTtcbmV4cG9ydCBmdW5jdGlvbiBpc1NwZWNpZmllZFNjYWxhclR5cGUodHlwZSkge1xuICByZXR1cm4gc3BlY2lmaWVkU2NhbGFyVHlwZXMuc29tZShmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBuYW1lID0gX3JlZi5uYW1lO1xuICAgIHJldHVybiB0eXBlLm5hbWUgPT09IG5hbWU7XG4gIH0pO1xufVxuIiwiZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5pbXBvcnQgZmluZCBmcm9tIFwiLi4vcG9seWZpbGxzL2ZpbmQubWpzXCI7XG5pbXBvcnQgYXJyYXlGcm9tIGZyb20gXCIuLi9wb2x5ZmlsbHMvYXJyYXlGcm9tLm1qc1wiO1xuaW1wb3J0IG9iamVjdFZhbHVlcyBmcm9tIFwiLi4vcG9seWZpbGxzL29iamVjdFZhbHVlcy5tanNcIjtcbmltcG9ydCB7IFNZTUJPTF9UT19TVFJJTkdfVEFHIH0gZnJvbSBcIi4uL3BvbHlmaWxscy9zeW1ib2xzLm1qc1wiO1xuaW1wb3J0IGluc3BlY3QgZnJvbSBcIi4uL2pzdXRpbHMvaW5zcGVjdC5tanNcIjtcbmltcG9ydCB0b09iak1hcCBmcm9tIFwiLi4vanN1dGlscy90b09iak1hcC5tanNcIjtcbmltcG9ydCBkZXZBc3NlcnQgZnJvbSBcIi4uL2pzdXRpbHMvZGV2QXNzZXJ0Lm1qc1wiO1xuaW1wb3J0IGluc3RhbmNlT2YgZnJvbSBcIi4uL2pzdXRpbHMvaW5zdGFuY2VPZi5tanNcIjtcbmltcG9ydCBpc09iamVjdExpa2UgZnJvbSBcIi4uL2pzdXRpbHMvaXNPYmplY3RMaWtlLm1qc1wiO1xuaW1wb3J0IHsgX19TY2hlbWEgfSBmcm9tIFwiLi9pbnRyb3NwZWN0aW9uLm1qc1wiO1xuaW1wb3J0IHsgR3JhcGhRTERpcmVjdGl2ZSwgaXNEaXJlY3RpdmUsIHNwZWNpZmllZERpcmVjdGl2ZXMgfSBmcm9tIFwiLi9kaXJlY3RpdmVzLm1qc1wiO1xuaW1wb3J0IHsgaXNPYmplY3RUeXBlLCBpc0ludGVyZmFjZVR5cGUsIGlzVW5pb25UeXBlLCBpc0lucHV0T2JqZWN0VHlwZSwgZ2V0TmFtZWRUeXBlIH0gZnJvbSBcIi4vZGVmaW5pdGlvbi5tanNcIjtcbi8qKlxuICogVGVzdCBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgYSBHcmFwaFFMIHNjaGVtYS5cbiAqL1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVkZWNsYXJlXG5leHBvcnQgZnVuY3Rpb24gaXNTY2hlbWEoc2NoZW1hKSB7XG4gIHJldHVybiBpbnN0YW5jZU9mKHNjaGVtYSwgR3JhcGhRTFNjaGVtYSk7XG59XG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0U2NoZW1hKHNjaGVtYSkge1xuICBpZiAoIWlzU2NoZW1hKHNjaGVtYSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RlZCBcIi5jb25jYXQoaW5zcGVjdChzY2hlbWEpLCBcIiB0byBiZSBhIEdyYXBoUUwgc2NoZW1hLlwiKSk7XG4gIH1cblxuICByZXR1cm4gc2NoZW1hO1xufVxuLyoqXG4gKiBTY2hlbWEgRGVmaW5pdGlvblxuICpcbiAqIEEgU2NoZW1hIGlzIGNyZWF0ZWQgYnkgc3VwcGx5aW5nIHRoZSByb290IHR5cGVzIG9mIGVhY2ggdHlwZSBvZiBvcGVyYXRpb24sXG4gKiBxdWVyeSBhbmQgbXV0YXRpb24gKG9wdGlvbmFsKS4gQSBzY2hlbWEgZGVmaW5pdGlvbiBpcyB0aGVuIHN1cHBsaWVkIHRvIHRoZVxuICogdmFsaWRhdG9yIGFuZCBleGVjdXRvci5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqICAgICBjb25zdCBNeUFwcFNjaGVtYSA9IG5ldyBHcmFwaFFMU2NoZW1hKHtcbiAqICAgICAgIHF1ZXJ5OiBNeUFwcFF1ZXJ5Um9vdFR5cGUsXG4gKiAgICAgICBtdXRhdGlvbjogTXlBcHBNdXRhdGlvblJvb3RUeXBlLFxuICogICAgIH0pXG4gKlxuICogTm90ZTogV2hlbiB0aGUgc2NoZW1hIGlzIGNvbnN0cnVjdGVkLCBieSBkZWZhdWx0IG9ubHkgdGhlIHR5cGVzIHRoYXQgYXJlXG4gKiByZWFjaGFibGUgYnkgdHJhdmVyc2luZyB0aGUgcm9vdCB0eXBlcyBhcmUgaW5jbHVkZWQsIG90aGVyIHR5cGVzIG11c3QgYmVcbiAqIGV4cGxpY2l0bHkgcmVmZXJlbmNlZC5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqICAgICBjb25zdCBjaGFyYWN0ZXJJbnRlcmZhY2UgPSBuZXcgR3JhcGhRTEludGVyZmFjZVR5cGUoe1xuICogICAgICAgbmFtZTogJ0NoYXJhY3RlcicsXG4gKiAgICAgICAuLi5cbiAqICAgICB9KTtcbiAqXG4gKiAgICAgY29uc3QgaHVtYW5UeXBlID0gbmV3IEdyYXBoUUxPYmplY3RUeXBlKHtcbiAqICAgICAgIG5hbWU6ICdIdW1hbicsXG4gKiAgICAgICBpbnRlcmZhY2VzOiBbY2hhcmFjdGVySW50ZXJmYWNlXSxcbiAqICAgICAgIC4uLlxuICogICAgIH0pO1xuICpcbiAqICAgICBjb25zdCBkcm9pZFR5cGUgPSBuZXcgR3JhcGhRTE9iamVjdFR5cGUoe1xuICogICAgICAgbmFtZTogJ0Ryb2lkJyxcbiAqICAgICAgIGludGVyZmFjZXM6IFtjaGFyYWN0ZXJJbnRlcmZhY2VdLFxuICogICAgICAgLi4uXG4gKiAgICAgfSk7XG4gKlxuICogICAgIGNvbnN0IHNjaGVtYSA9IG5ldyBHcmFwaFFMU2NoZW1hKHtcbiAqICAgICAgIHF1ZXJ5OiBuZXcgR3JhcGhRTE9iamVjdFR5cGUoe1xuICogICAgICAgICBuYW1lOiAnUXVlcnknLFxuICogICAgICAgICBmaWVsZHM6IHtcbiAqICAgICAgICAgICBoZXJvOiB7IHR5cGU6IGNoYXJhY3RlckludGVyZmFjZSwgLi4uIH0sXG4gKiAgICAgICAgIH1cbiAqICAgICAgIH0pLFxuICogICAgICAgLi4uXG4gKiAgICAgICAvLyBTaW5jZSB0aGlzIHNjaGVtYSByZWZlcmVuY2VzIG9ubHkgdGhlIGBDaGFyYWN0ZXJgIGludGVyZmFjZSBpdCdzXG4gKiAgICAgICAvLyBuZWNlc3NhcnkgdG8gZXhwbGljaXRseSBsaXN0IHRoZSB0eXBlcyB0aGF0IGltcGxlbWVudCBpdCBpZlxuICogICAgICAgLy8geW91IHdhbnQgdGhlbSB0byBiZSBpbmNsdWRlZCBpbiB0aGUgZmluYWwgc2NoZW1hLlxuICogICAgICAgdHlwZXM6IFtodW1hblR5cGUsIGRyb2lkVHlwZV0sXG4gKiAgICAgfSlcbiAqXG4gKiBOb3RlOiBJZiBhbiBhcnJheSBvZiBgZGlyZWN0aXZlc2AgYXJlIHByb3ZpZGVkIHRvIEdyYXBoUUxTY2hlbWEsIHRoYXQgd2lsbCBiZVxuICogdGhlIGV4YWN0IGxpc3Qgb2YgZGlyZWN0aXZlcyByZXByZXNlbnRlZCBhbmQgYWxsb3dlZC4gSWYgYGRpcmVjdGl2ZXNgIGlzIG5vdFxuICogcHJvdmlkZWQgdGhlbiBhIGRlZmF1bHQgc2V0IG9mIHRoZSBzcGVjaWZpZWQgZGlyZWN0aXZlcyAoZS5nLiBAaW5jbHVkZSBhbmRcbiAqIEBza2lwKSB3aWxsIGJlIHVzZWQuIElmIHlvdSB3aXNoIHRvIHByb3ZpZGUgKmFkZGl0aW9uYWwqIGRpcmVjdGl2ZXMgdG8gdGhlc2VcbiAqIHNwZWNpZmllZCBkaXJlY3RpdmVzLCB5b3UgbXVzdCBleHBsaWNpdGx5IGRlY2xhcmUgdGhlbS4gRXhhbXBsZTpcbiAqXG4gKiAgICAgY29uc3QgTXlBcHBTY2hlbWEgPSBuZXcgR3JhcGhRTFNjaGVtYSh7XG4gKiAgICAgICAuLi5cbiAqICAgICAgIGRpcmVjdGl2ZXM6IHNwZWNpZmllZERpcmVjdGl2ZXMuY29uY2F0KFsgbXlDdXN0b21EaXJlY3RpdmUgXSksXG4gKiAgICAgfSlcbiAqXG4gKi9cblxuZXhwb3J0IHZhciBHcmFwaFFMU2NoZW1hID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgLy8gVXNlZCBhcyBhIGNhY2hlIGZvciB2YWxpZGF0ZVNjaGVtYSgpLlxuICBmdW5jdGlvbiBHcmFwaFFMU2NoZW1hKGNvbmZpZykge1xuICAgIHZhciBfY29uZmlnJGRpcmVjdGl2ZXM7XG5cbiAgICAvLyBJZiB0aGlzIHNjaGVtYSB3YXMgYnVpbHQgZnJvbSBhIHNvdXJjZSBrbm93biB0byBiZSB2YWxpZCwgdGhlbiBpdCBtYXkgYmVcbiAgICAvLyBtYXJrZWQgd2l0aCBhc3N1bWVWYWxpZCB0byBhdm9pZCBhbiBhZGRpdGlvbmFsIHR5cGUgc3lzdGVtIHZhbGlkYXRpb24uXG4gICAgdGhpcy5fX3ZhbGlkYXRpb25FcnJvcnMgPSBjb25maWcuYXNzdW1lVmFsaWQgPT09IHRydWUgPyBbXSA6IHVuZGVmaW5lZDsgLy8gQ2hlY2sgZm9yIGNvbW1vbiBtaXN0YWtlcyBkdXJpbmcgY29uc3RydWN0aW9uIHRvIHByb2R1Y2UgZWFybHkgZXJyb3JzLlxuXG4gICAgaXNPYmplY3RMaWtlKGNvbmZpZykgfHwgZGV2QXNzZXJ0KDAsICdNdXN0IHByb3ZpZGUgY29uZmlndXJhdGlvbiBvYmplY3QuJyk7XG4gICAgIWNvbmZpZy50eXBlcyB8fCBBcnJheS5pc0FycmF5KGNvbmZpZy50eXBlcykgfHwgZGV2QXNzZXJ0KDAsIFwiXFxcInR5cGVzXFxcIiBtdXN0IGJlIEFycmF5IGlmIHByb3ZpZGVkIGJ1dCBnb3Q6IFwiLmNvbmNhdChpbnNwZWN0KGNvbmZpZy50eXBlcyksIFwiLlwiKSk7XG4gICAgIWNvbmZpZy5kaXJlY3RpdmVzIHx8IEFycmF5LmlzQXJyYXkoY29uZmlnLmRpcmVjdGl2ZXMpIHx8IGRldkFzc2VydCgwLCAnXCJkaXJlY3RpdmVzXCIgbXVzdCBiZSBBcnJheSBpZiBwcm92aWRlZCBidXQgZ290OiAnICsgXCJcIi5jb25jYXQoaW5zcGVjdChjb25maWcuZGlyZWN0aXZlcyksIFwiLlwiKSk7XG4gICAgdGhpcy5kZXNjcmlwdGlvbiA9IGNvbmZpZy5kZXNjcmlwdGlvbjtcbiAgICB0aGlzLmV4dGVuc2lvbnMgPSBjb25maWcuZXh0ZW5zaW9ucyAmJiB0b09iak1hcChjb25maWcuZXh0ZW5zaW9ucyk7XG4gICAgdGhpcy5hc3ROb2RlID0gY29uZmlnLmFzdE5vZGU7XG4gICAgdGhpcy5leHRlbnNpb25BU1ROb2RlcyA9IGNvbmZpZy5leHRlbnNpb25BU1ROb2RlcztcbiAgICB0aGlzLl9xdWVyeVR5cGUgPSBjb25maWcucXVlcnk7XG4gICAgdGhpcy5fbXV0YXRpb25UeXBlID0gY29uZmlnLm11dGF0aW9uO1xuICAgIHRoaXMuX3N1YnNjcmlwdGlvblR5cGUgPSBjb25maWcuc3Vic2NyaXB0aW9uOyAvLyBQcm92aWRlIHNwZWNpZmllZCBkaXJlY3RpdmVzIChlLmcuIEBpbmNsdWRlIGFuZCBAc2tpcCkgYnkgZGVmYXVsdC5cblxuICAgIHRoaXMuX2RpcmVjdGl2ZXMgPSAoX2NvbmZpZyRkaXJlY3RpdmVzID0gY29uZmlnLmRpcmVjdGl2ZXMpICE9PSBudWxsICYmIF9jb25maWckZGlyZWN0aXZlcyAhPT0gdm9pZCAwID8gX2NvbmZpZyRkaXJlY3RpdmVzIDogc3BlY2lmaWVkRGlyZWN0aXZlczsgLy8gVG8gcHJlc2VydmUgb3JkZXIgb2YgdXNlci1wcm92aWRlZCB0eXBlcywgd2UgYWRkIGZpcnN0IHRvIGFkZCB0aGVtIHRvXG4gICAgLy8gdGhlIHNldCBvZiBcImNvbGxlY3RlZFwiIHR5cGVzLCBzbyBgY29sbGVjdFJlZmVyZW5jZWRUeXBlc2AgaWdub3JlIHRoZW0uXG5cbiAgICB2YXIgYWxsUmVmZXJlbmNlZFR5cGVzID0gbmV3IFNldChjb25maWcudHlwZXMpO1xuXG4gICAgaWYgKGNvbmZpZy50eXBlcyAhPSBudWxsKSB7XG4gICAgICBmb3IgKHZhciBfaTIgPSAwLCBfY29uZmlnJHR5cGVzMiA9IGNvbmZpZy50eXBlczsgX2kyIDwgX2NvbmZpZyR0eXBlczIubGVuZ3RoOyBfaTIrKykge1xuICAgICAgICB2YXIgdHlwZSA9IF9jb25maWckdHlwZXMyW19pMl07XG4gICAgICAgIC8vIFdoZW4gd2UgcmVhZHkgdG8gcHJvY2VzcyB0aGlzIHR5cGUsIHdlIHJlbW92ZSBpdCBmcm9tIFwiY29sbGVjdGVkXCIgdHlwZXNcbiAgICAgICAgLy8gYW5kIHRoZW4gYWRkIGl0IHRvZ2V0aGVyIHdpdGggYWxsIGRlcGVuZGVudCB0eXBlcyBpbiB0aGUgY29ycmVjdCBwb3NpdGlvbi5cbiAgICAgICAgYWxsUmVmZXJlbmNlZFR5cGVzLmRlbGV0ZSh0eXBlKTtcbiAgICAgICAgY29sbGVjdFJlZmVyZW5jZWRUeXBlcyh0eXBlLCBhbGxSZWZlcmVuY2VkVHlwZXMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLl9xdWVyeVR5cGUgIT0gbnVsbCkge1xuICAgICAgY29sbGVjdFJlZmVyZW5jZWRUeXBlcyh0aGlzLl9xdWVyeVR5cGUsIGFsbFJlZmVyZW5jZWRUeXBlcyk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX211dGF0aW9uVHlwZSAhPSBudWxsKSB7XG4gICAgICBjb2xsZWN0UmVmZXJlbmNlZFR5cGVzKHRoaXMuX211dGF0aW9uVHlwZSwgYWxsUmVmZXJlbmNlZFR5cGVzKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fc3Vic2NyaXB0aW9uVHlwZSAhPSBudWxsKSB7XG4gICAgICBjb2xsZWN0UmVmZXJlbmNlZFR5cGVzKHRoaXMuX3N1YnNjcmlwdGlvblR5cGUsIGFsbFJlZmVyZW5jZWRUeXBlcyk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2k0ID0gMCwgX3RoaXMkX2RpcmVjdGl2ZXMyID0gdGhpcy5fZGlyZWN0aXZlczsgX2k0IDwgX3RoaXMkX2RpcmVjdGl2ZXMyLmxlbmd0aDsgX2k0KyspIHtcbiAgICAgIHZhciBkaXJlY3RpdmUgPSBfdGhpcyRfZGlyZWN0aXZlczJbX2k0XTtcblxuICAgICAgLy8gRGlyZWN0aXZlcyBhcmUgbm90IHZhbGlkYXRlZCB1bnRpbCB2YWxpZGF0ZVNjaGVtYSgpIGlzIGNhbGxlZC5cbiAgICAgIGlmIChpc0RpcmVjdGl2ZShkaXJlY3RpdmUpKSB7XG4gICAgICAgIGZvciAodmFyIF9pNiA9IDAsIF9kaXJlY3RpdmUkYXJnczIgPSBkaXJlY3RpdmUuYXJnczsgX2k2IDwgX2RpcmVjdGl2ZSRhcmdzMi5sZW5ndGg7IF9pNisrKSB7XG4gICAgICAgICAgdmFyIGFyZyA9IF9kaXJlY3RpdmUkYXJnczJbX2k2XTtcbiAgICAgICAgICBjb2xsZWN0UmVmZXJlbmNlZFR5cGVzKGFyZy50eXBlLCBhbGxSZWZlcmVuY2VkVHlwZXMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29sbGVjdFJlZmVyZW5jZWRUeXBlcyhfX1NjaGVtYSwgYWxsUmVmZXJlbmNlZFR5cGVzKTsgLy8gU3RvcmluZyB0aGUgcmVzdWx0aW5nIG1hcCBmb3IgcmVmZXJlbmNlIGJ5IHRoZSBzY2hlbWEuXG5cbiAgICB0aGlzLl90eXBlTWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLl9zdWJUeXBlTWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTsgLy8gS2VlcCB0cmFjayBvZiBhbGwgaW1wbGVtZW50YXRpb25zIGJ5IGludGVyZmFjZSBuYW1lLlxuXG4gICAgdGhpcy5faW1wbGVtZW50YXRpb25zTWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAgIGZvciAodmFyIF9pOCA9IDAsIF9hcnJheUZyb20yID0gYXJyYXlGcm9tKGFsbFJlZmVyZW5jZWRUeXBlcyk7IF9pOCA8IF9hcnJheUZyb20yLmxlbmd0aDsgX2k4KyspIHtcbiAgICAgIHZhciBuYW1lZFR5cGUgPSBfYXJyYXlGcm9tMltfaThdO1xuXG4gICAgICBpZiAobmFtZWRUeXBlID09IG51bGwpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIHZhciB0eXBlTmFtZSA9IG5hbWVkVHlwZS5uYW1lO1xuICAgICAgdHlwZU5hbWUgfHwgZGV2QXNzZXJ0KDAsICdPbmUgb2YgdGhlIHByb3ZpZGVkIHR5cGVzIGZvciBidWlsZGluZyB0aGUgU2NoZW1hIGlzIG1pc3NpbmcgYSBuYW1lLicpO1xuXG4gICAgICBpZiAodGhpcy5fdHlwZU1hcFt0eXBlTmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJTY2hlbWEgbXVzdCBjb250YWluIHVuaXF1ZWx5IG5hbWVkIHR5cGVzIGJ1dCBjb250YWlucyBtdWx0aXBsZSB0eXBlcyBuYW1lZCBcXFwiXCIuY29uY2F0KHR5cGVOYW1lLCBcIlxcXCIuXCIpKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fdHlwZU1hcFt0eXBlTmFtZV0gPSBuYW1lZFR5cGU7XG5cbiAgICAgIGlmIChpc0ludGVyZmFjZVR5cGUobmFtZWRUeXBlKSkge1xuICAgICAgICAvLyBTdG9yZSBpbXBsZW1lbnRhdGlvbnMgYnkgaW50ZXJmYWNlLlxuICAgICAgICBmb3IgKHZhciBfaTEwID0gMCwgX25hbWVkVHlwZSRnZXRJbnRlcmZhMiA9IG5hbWVkVHlwZS5nZXRJbnRlcmZhY2VzKCk7IF9pMTAgPCBfbmFtZWRUeXBlJGdldEludGVyZmEyLmxlbmd0aDsgX2kxMCsrKSB7XG4gICAgICAgICAgdmFyIGlmYWNlID0gX25hbWVkVHlwZSRnZXRJbnRlcmZhMltfaTEwXTtcblxuICAgICAgICAgIGlmIChpc0ludGVyZmFjZVR5cGUoaWZhY2UpKSB7XG4gICAgICAgICAgICB2YXIgaW1wbGVtZW50YXRpb25zID0gdGhpcy5faW1wbGVtZW50YXRpb25zTWFwW2lmYWNlLm5hbWVdO1xuXG4gICAgICAgICAgICBpZiAoaW1wbGVtZW50YXRpb25zID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgaW1wbGVtZW50YXRpb25zID0gdGhpcy5faW1wbGVtZW50YXRpb25zTWFwW2lmYWNlLm5hbWVdID0ge1xuICAgICAgICAgICAgICAgIG9iamVjdHM6IFtdLFxuICAgICAgICAgICAgICAgIGludGVyZmFjZXM6IFtdXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGltcGxlbWVudGF0aW9ucy5pbnRlcmZhY2VzLnB1c2gobmFtZWRUeXBlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3RUeXBlKG5hbWVkVHlwZSkpIHtcbiAgICAgICAgLy8gU3RvcmUgaW1wbGVtZW50YXRpb25zIGJ5IG9iamVjdHMuXG4gICAgICAgIGZvciAodmFyIF9pMTIgPSAwLCBfbmFtZWRUeXBlJGdldEludGVyZmE0ID0gbmFtZWRUeXBlLmdldEludGVyZmFjZXMoKTsgX2kxMiA8IF9uYW1lZFR5cGUkZ2V0SW50ZXJmYTQubGVuZ3RoOyBfaTEyKyspIHtcbiAgICAgICAgICB2YXIgX2lmYWNlID0gX25hbWVkVHlwZSRnZXRJbnRlcmZhNFtfaTEyXTtcblxuICAgICAgICAgIGlmIChpc0ludGVyZmFjZVR5cGUoX2lmYWNlKSkge1xuICAgICAgICAgICAgdmFyIF9pbXBsZW1lbnRhdGlvbnMgPSB0aGlzLl9pbXBsZW1lbnRhdGlvbnNNYXBbX2lmYWNlLm5hbWVdO1xuXG4gICAgICAgICAgICBpZiAoX2ltcGxlbWVudGF0aW9ucyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIF9pbXBsZW1lbnRhdGlvbnMgPSB0aGlzLl9pbXBsZW1lbnRhdGlvbnNNYXBbX2lmYWNlLm5hbWVdID0ge1xuICAgICAgICAgICAgICAgIG9iamVjdHM6IFtdLFxuICAgICAgICAgICAgICAgIGludGVyZmFjZXM6IFtdXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF9pbXBsZW1lbnRhdGlvbnMub2JqZWN0cy5wdXNoKG5hbWVkVHlwZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIF9wcm90byA9IEdyYXBoUUxTY2hlbWEucHJvdG90eXBlO1xuXG4gIF9wcm90by5nZXRRdWVyeVR5cGUgPSBmdW5jdGlvbiBnZXRRdWVyeVR5cGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3F1ZXJ5VHlwZTtcbiAgfTtcblxuICBfcHJvdG8uZ2V0TXV0YXRpb25UeXBlID0gZnVuY3Rpb24gZ2V0TXV0YXRpb25UeXBlKCkge1xuICAgIHJldHVybiB0aGlzLl9tdXRhdGlvblR5cGU7XG4gIH07XG5cbiAgX3Byb3RvLmdldFN1YnNjcmlwdGlvblR5cGUgPSBmdW5jdGlvbiBnZXRTdWJzY3JpcHRpb25UeXBlKCkge1xuICAgIHJldHVybiB0aGlzLl9zdWJzY3JpcHRpb25UeXBlO1xuICB9O1xuXG4gIF9wcm90by5nZXRUeXBlTWFwID0gZnVuY3Rpb24gZ2V0VHlwZU1hcCgpIHtcbiAgICByZXR1cm4gdGhpcy5fdHlwZU1hcDtcbiAgfTtcblxuICBfcHJvdG8uZ2V0VHlwZSA9IGZ1bmN0aW9uIGdldFR5cGUobmFtZSkge1xuICAgIHJldHVybiB0aGlzLmdldFR5cGVNYXAoKVtuYW1lXTtcbiAgfTtcblxuICBfcHJvdG8uZ2V0UG9zc2libGVUeXBlcyA9IGZ1bmN0aW9uIGdldFBvc3NpYmxlVHlwZXMoYWJzdHJhY3RUeXBlKSB7XG4gICAgcmV0dXJuIGlzVW5pb25UeXBlKGFic3RyYWN0VHlwZSkgPyBhYnN0cmFjdFR5cGUuZ2V0VHlwZXMoKSA6IHRoaXMuZ2V0SW1wbGVtZW50YXRpb25zKGFic3RyYWN0VHlwZSkub2JqZWN0cztcbiAgfTtcblxuICBfcHJvdG8uZ2V0SW1wbGVtZW50YXRpb25zID0gZnVuY3Rpb24gZ2V0SW1wbGVtZW50YXRpb25zKGludGVyZmFjZVR5cGUpIHtcbiAgICB2YXIgaW1wbGVtZW50YXRpb25zID0gdGhpcy5faW1wbGVtZW50YXRpb25zTWFwW2ludGVyZmFjZVR5cGUubmFtZV07XG4gICAgcmV0dXJuIGltcGxlbWVudGF0aW9ucyAhPT0gbnVsbCAmJiBpbXBsZW1lbnRhdGlvbnMgIT09IHZvaWQgMCA/IGltcGxlbWVudGF0aW9ucyA6IHtcbiAgICAgIG9iamVjdHM6IFtdLFxuICAgICAgaW50ZXJmYWNlczogW11cbiAgICB9O1xuICB9IC8vIEBkZXByZWNhdGVkOiB1c2UgaXNTdWJUeXBlIGluc3RlYWQgLSB3aWxsIGJlIHJlbW92ZWQgaW4gdjE2LlxuICA7XG5cbiAgX3Byb3RvLmlzUG9zc2libGVUeXBlID0gZnVuY3Rpb24gaXNQb3NzaWJsZVR5cGUoYWJzdHJhY3RUeXBlLCBwb3NzaWJsZVR5cGUpIHtcbiAgICByZXR1cm4gdGhpcy5pc1N1YlR5cGUoYWJzdHJhY3RUeXBlLCBwb3NzaWJsZVR5cGUpO1xuICB9O1xuXG4gIF9wcm90by5pc1N1YlR5cGUgPSBmdW5jdGlvbiBpc1N1YlR5cGUoYWJzdHJhY3RUeXBlLCBtYXliZVN1YlR5cGUpIHtcbiAgICB2YXIgbWFwID0gdGhpcy5fc3ViVHlwZU1hcFthYnN0cmFjdFR5cGUubmFtZV07XG5cbiAgICBpZiAobWFwID09PSB1bmRlZmluZWQpIHtcbiAgICAgIG1hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgICAgIGlmIChpc1VuaW9uVHlwZShhYnN0cmFjdFR5cGUpKSB7XG4gICAgICAgIGZvciAodmFyIF9pMTQgPSAwLCBfYWJzdHJhY3RUeXBlJGdldFR5cGUyID0gYWJzdHJhY3RUeXBlLmdldFR5cGVzKCk7IF9pMTQgPCBfYWJzdHJhY3RUeXBlJGdldFR5cGUyLmxlbmd0aDsgX2kxNCsrKSB7XG4gICAgICAgICAgdmFyIHR5cGUgPSBfYWJzdHJhY3RUeXBlJGdldFR5cGUyW19pMTRdO1xuICAgICAgICAgIG1hcFt0eXBlLm5hbWVdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGltcGxlbWVudGF0aW9ucyA9IHRoaXMuZ2V0SW1wbGVtZW50YXRpb25zKGFic3RyYWN0VHlwZSk7XG5cbiAgICAgICAgZm9yICh2YXIgX2kxNiA9IDAsIF9pbXBsZW1lbnRhdGlvbnMkb2JqZTIgPSBpbXBsZW1lbnRhdGlvbnMub2JqZWN0czsgX2kxNiA8IF9pbXBsZW1lbnRhdGlvbnMkb2JqZTIubGVuZ3RoOyBfaTE2KyspIHtcbiAgICAgICAgICB2YXIgX3R5cGUgPSBfaW1wbGVtZW50YXRpb25zJG9iamUyW19pMTZdO1xuICAgICAgICAgIG1hcFtfdHlwZS5uYW1lXSA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBfaTE4ID0gMCwgX2ltcGxlbWVudGF0aW9ucyRpbnRlMiA9IGltcGxlbWVudGF0aW9ucy5pbnRlcmZhY2VzOyBfaTE4IDwgX2ltcGxlbWVudGF0aW9ucyRpbnRlMi5sZW5ndGg7IF9pMTgrKykge1xuICAgICAgICAgIHZhciBfdHlwZTIgPSBfaW1wbGVtZW50YXRpb25zJGludGUyW19pMThdO1xuICAgICAgICAgIG1hcFtfdHlwZTIubmFtZV0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3N1YlR5cGVNYXBbYWJzdHJhY3RUeXBlLm5hbWVdID0gbWFwO1xuICAgIH1cblxuICAgIHJldHVybiBtYXBbbWF5YmVTdWJUeXBlLm5hbWVdICE9PSB1bmRlZmluZWQ7XG4gIH07XG5cbiAgX3Byb3RvLmdldERpcmVjdGl2ZXMgPSBmdW5jdGlvbiBnZXREaXJlY3RpdmVzKCkge1xuICAgIHJldHVybiB0aGlzLl9kaXJlY3RpdmVzO1xuICB9O1xuXG4gIF9wcm90by5nZXREaXJlY3RpdmUgPSBmdW5jdGlvbiBnZXREaXJlY3RpdmUobmFtZSkge1xuICAgIHJldHVybiBmaW5kKHRoaXMuZ2V0RGlyZWN0aXZlcygpLCBmdW5jdGlvbiAoZGlyZWN0aXZlKSB7XG4gICAgICByZXR1cm4gZGlyZWN0aXZlLm5hbWUgPT09IG5hbWU7XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLnRvQ29uZmlnID0gZnVuY3Rpb24gdG9Db25maWcoKSB7XG4gICAgdmFyIF90aGlzJGV4dGVuc2lvbkFTVE5vZDtcblxuICAgIHJldHVybiB7XG4gICAgICBkZXNjcmlwdGlvbjogdGhpcy5kZXNjcmlwdGlvbixcbiAgICAgIHF1ZXJ5OiB0aGlzLmdldFF1ZXJ5VHlwZSgpLFxuICAgICAgbXV0YXRpb246IHRoaXMuZ2V0TXV0YXRpb25UeXBlKCksXG4gICAgICBzdWJzY3JpcHRpb246IHRoaXMuZ2V0U3Vic2NyaXB0aW9uVHlwZSgpLFxuICAgICAgdHlwZXM6IG9iamVjdFZhbHVlcyh0aGlzLmdldFR5cGVNYXAoKSksXG4gICAgICBkaXJlY3RpdmVzOiB0aGlzLmdldERpcmVjdGl2ZXMoKS5zbGljZSgpLFxuICAgICAgZXh0ZW5zaW9uczogdGhpcy5leHRlbnNpb25zLFxuICAgICAgYXN0Tm9kZTogdGhpcy5hc3ROb2RlLFxuICAgICAgZXh0ZW5zaW9uQVNUTm9kZXM6IChfdGhpcyRleHRlbnNpb25BU1ROb2QgPSB0aGlzLmV4dGVuc2lvbkFTVE5vZGVzKSAhPT0gbnVsbCAmJiBfdGhpcyRleHRlbnNpb25BU1ROb2QgIT09IHZvaWQgMCA/IF90aGlzJGV4dGVuc2lvbkFTVE5vZCA6IFtdLFxuICAgICAgYXNzdW1lVmFsaWQ6IHRoaXMuX192YWxpZGF0aW9uRXJyb3JzICE9PSB1bmRlZmluZWRcbiAgICB9O1xuICB9IC8vICRGbG93Rml4TWVbdW5zdXBwb3J0ZWQtc3ludGF4XSBGbG93IGRvZXNuJ3Qgc3VwcG9ydCBjb21wdXRlZCBwcm9wZXJ0aWVzIHlldFxuICA7XG5cbiAgX2NyZWF0ZUNsYXNzKEdyYXBoUUxTY2hlbWEsIFt7XG4gICAga2V5OiBTWU1CT0xfVE9fU1RSSU5HX1RBRyxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiAnR3JhcGhRTFNjaGVtYSc7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEdyYXBoUUxTY2hlbWE7XG59KCk7XG5cbmZ1bmN0aW9uIGNvbGxlY3RSZWZlcmVuY2VkVHlwZXModHlwZSwgdHlwZVNldCkge1xuICB2YXIgbmFtZWRUeXBlID0gZ2V0TmFtZWRUeXBlKHR5cGUpO1xuXG4gIGlmICghdHlwZVNldC5oYXMobmFtZWRUeXBlKSkge1xuICAgIHR5cGVTZXQuYWRkKG5hbWVkVHlwZSk7XG5cbiAgICBpZiAoaXNVbmlvblR5cGUobmFtZWRUeXBlKSkge1xuICAgICAgZm9yICh2YXIgX2kyMCA9IDAsIF9uYW1lZFR5cGUkZ2V0VHlwZXMyID0gbmFtZWRUeXBlLmdldFR5cGVzKCk7IF9pMjAgPCBfbmFtZWRUeXBlJGdldFR5cGVzMi5sZW5ndGg7IF9pMjArKykge1xuICAgICAgICB2YXIgbWVtYmVyVHlwZSA9IF9uYW1lZFR5cGUkZ2V0VHlwZXMyW19pMjBdO1xuICAgICAgICBjb2xsZWN0UmVmZXJlbmNlZFR5cGVzKG1lbWJlclR5cGUsIHR5cGVTZXQpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNPYmplY3RUeXBlKG5hbWVkVHlwZSkgfHwgaXNJbnRlcmZhY2VUeXBlKG5hbWVkVHlwZSkpIHtcbiAgICAgIGZvciAodmFyIF9pMjIgPSAwLCBfbmFtZWRUeXBlJGdldEludGVyZmE2ID0gbmFtZWRUeXBlLmdldEludGVyZmFjZXMoKTsgX2kyMiA8IF9uYW1lZFR5cGUkZ2V0SW50ZXJmYTYubGVuZ3RoOyBfaTIyKyspIHtcbiAgICAgICAgdmFyIGludGVyZmFjZVR5cGUgPSBfbmFtZWRUeXBlJGdldEludGVyZmE2W19pMjJdO1xuICAgICAgICBjb2xsZWN0UmVmZXJlbmNlZFR5cGVzKGludGVyZmFjZVR5cGUsIHR5cGVTZXQpO1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBfaTI0ID0gMCwgX29iamVjdFZhbHVlczIgPSBvYmplY3RWYWx1ZXMobmFtZWRUeXBlLmdldEZpZWxkcygpKTsgX2kyNCA8IF9vYmplY3RWYWx1ZXMyLmxlbmd0aDsgX2kyNCsrKSB7XG4gICAgICAgIHZhciBmaWVsZCA9IF9vYmplY3RWYWx1ZXMyW19pMjRdO1xuICAgICAgICBjb2xsZWN0UmVmZXJlbmNlZFR5cGVzKGZpZWxkLnR5cGUsIHR5cGVTZXQpO1xuXG4gICAgICAgIGZvciAodmFyIF9pMjYgPSAwLCBfZmllbGQkYXJnczIgPSBmaWVsZC5hcmdzOyBfaTI2IDwgX2ZpZWxkJGFyZ3MyLmxlbmd0aDsgX2kyNisrKSB7XG4gICAgICAgICAgdmFyIGFyZyA9IF9maWVsZCRhcmdzMltfaTI2XTtcbiAgICAgICAgICBjb2xsZWN0UmVmZXJlbmNlZFR5cGVzKGFyZy50eXBlLCB0eXBlU2V0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNJbnB1dE9iamVjdFR5cGUobmFtZWRUeXBlKSkge1xuICAgICAgZm9yICh2YXIgX2kyOCA9IDAsIF9vYmplY3RWYWx1ZXM0ID0gb2JqZWN0VmFsdWVzKG5hbWVkVHlwZS5nZXRGaWVsZHMoKSk7IF9pMjggPCBfb2JqZWN0VmFsdWVzNC5sZW5ndGg7IF9pMjgrKykge1xuICAgICAgICB2YXIgX2ZpZWxkID0gX29iamVjdFZhbHVlczRbX2kyOF07XG4gICAgICAgIGNvbGxlY3RSZWZlcmVuY2VkVHlwZXMoX2ZpZWxkLnR5cGUsIHR5cGVTZXQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0eXBlU2V0O1xufVxuIiwiaW1wb3J0IGZpbmQgZnJvbSBcIi4uL3BvbHlmaWxscy9maW5kLm1qc1wiO1xuaW1wb3J0IG9iamVjdFZhbHVlcyBmcm9tIFwiLi4vcG9seWZpbGxzL29iamVjdFZhbHVlcy5tanNcIjtcbmltcG9ydCBpbnNwZWN0IGZyb20gXCIuLi9qc3V0aWxzL2luc3BlY3QubWpzXCI7XG5pbXBvcnQgeyBHcmFwaFFMRXJyb3IgfSBmcm9tIFwiLi4vZXJyb3IvR3JhcGhRTEVycm9yLm1qc1wiO1xuaW1wb3J0IHsgbG9jYXRlZEVycm9yIH0gZnJvbSBcIi4uL2Vycm9yL2xvY2F0ZWRFcnJvci5tanNcIjtcbmltcG9ydCB7IGlzVmFsaWROYW1lRXJyb3IgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2Fzc2VydFZhbGlkTmFtZS5tanNcIjtcbmltcG9ydCB7IGlzRXF1YWxUeXBlLCBpc1R5cGVTdWJUeXBlT2YgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3R5cGVDb21wYXJhdG9ycy5tanNcIjtcbmltcG9ydCB7IGFzc2VydFNjaGVtYSB9IGZyb20gXCIuL3NjaGVtYS5tanNcIjtcbmltcG9ydCB7IGlzSW50cm9zcGVjdGlvblR5cGUgfSBmcm9tIFwiLi9pbnRyb3NwZWN0aW9uLm1qc1wiO1xuaW1wb3J0IHsgaXNEaXJlY3RpdmUsIEdyYXBoUUxEZXByZWNhdGVkRGlyZWN0aXZlIH0gZnJvbSBcIi4vZGlyZWN0aXZlcy5tanNcIjtcbmltcG9ydCB7IGlzT2JqZWN0VHlwZSwgaXNJbnRlcmZhY2VUeXBlLCBpc1VuaW9uVHlwZSwgaXNFbnVtVHlwZSwgaXNJbnB1dE9iamVjdFR5cGUsIGlzTmFtZWRUeXBlLCBpc05vbk51bGxUeXBlLCBpc0lucHV0VHlwZSwgaXNPdXRwdXRUeXBlLCBpc1JlcXVpcmVkQXJndW1lbnQsIGlzUmVxdWlyZWRJbnB1dEZpZWxkIH0gZnJvbSBcIi4vZGVmaW5pdGlvbi5tanNcIjtcbi8qKlxuICogSW1wbGVtZW50cyB0aGUgXCJUeXBlIFZhbGlkYXRpb25cIiBzdWItc2VjdGlvbnMgb2YgdGhlIHNwZWNpZmljYXRpb24nc1xuICogXCJUeXBlIFN5c3RlbVwiIHNlY3Rpb24uXG4gKlxuICogVmFsaWRhdGlvbiBydW5zIHN5bmNocm9ub3VzbHksIHJldHVybmluZyBhbiBhcnJheSBvZiBlbmNvdW50ZXJlZCBlcnJvcnMsIG9yXG4gKiBhbiBlbXB0eSBhcnJheSBpZiBubyBlcnJvcnMgd2VyZSBlbmNvdW50ZXJlZCBhbmQgdGhlIFNjaGVtYSBpcyB2YWxpZC5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVTY2hlbWEoc2NoZW1hKSB7XG4gIC8vIEZpcnN0IGNoZWNrIHRvIGVuc3VyZSB0aGUgcHJvdmlkZWQgdmFsdWUgaXMgaW4gZmFjdCBhIEdyYXBoUUxTY2hlbWEuXG4gIGFzc2VydFNjaGVtYShzY2hlbWEpOyAvLyBJZiB0aGlzIFNjaGVtYSBoYXMgYWxyZWFkeSBiZWVuIHZhbGlkYXRlZCwgcmV0dXJuIHRoZSBwcmV2aW91cyByZXN1bHRzLlxuXG4gIGlmIChzY2hlbWEuX192YWxpZGF0aW9uRXJyb3JzKSB7XG4gICAgcmV0dXJuIHNjaGVtYS5fX3ZhbGlkYXRpb25FcnJvcnM7XG4gIH0gLy8gVmFsaWRhdGUgdGhlIHNjaGVtYSwgcHJvZHVjaW5nIGEgbGlzdCBvZiBlcnJvcnMuXG5cblxuICB2YXIgY29udGV4dCA9IG5ldyBTY2hlbWFWYWxpZGF0aW9uQ29udGV4dChzY2hlbWEpO1xuICB2YWxpZGF0ZVJvb3RUeXBlcyhjb250ZXh0KTtcbiAgdmFsaWRhdGVEaXJlY3RpdmVzKGNvbnRleHQpO1xuICB2YWxpZGF0ZVR5cGVzKGNvbnRleHQpOyAvLyBQZXJzaXN0IHRoZSByZXN1bHRzIG9mIHZhbGlkYXRpb24gYmVmb3JlIHJldHVybmluZyB0byBlbnN1cmUgdmFsaWRhdGlvblxuICAvLyBkb2VzIG5vdCBydW4gbXVsdGlwbGUgdGltZXMgZm9yIHRoaXMgc2NoZW1hLlxuXG4gIHZhciBlcnJvcnMgPSBjb250ZXh0LmdldEVycm9ycygpO1xuICBzY2hlbWEuX192YWxpZGF0aW9uRXJyb3JzID0gZXJyb3JzO1xuICByZXR1cm4gZXJyb3JzO1xufVxuLyoqXG4gKiBVdGlsaXR5IGZ1bmN0aW9uIHdoaWNoIGFzc2VydHMgYSBzY2hlbWEgaXMgdmFsaWQgYnkgdGhyb3dpbmcgYW4gZXJyb3IgaWZcbiAqIGl0IGlzIGludmFsaWQuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydFZhbGlkU2NoZW1hKHNjaGVtYSkge1xuICB2YXIgZXJyb3JzID0gdmFsaWRhdGVTY2hlbWEoc2NoZW1hKTtcblxuICBpZiAoZXJyb3JzLmxlbmd0aCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcihlcnJvcnMubWFwKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgcmV0dXJuIGVycm9yLm1lc3NhZ2U7XG4gICAgfSkuam9pbignXFxuXFxuJykpO1xuICB9XG59XG5cbnZhciBTY2hlbWFWYWxpZGF0aW9uQ29udGV4dCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFNjaGVtYVZhbGlkYXRpb25Db250ZXh0KHNjaGVtYSkge1xuICAgIHRoaXMuX2Vycm9ycyA9IFtdO1xuICAgIHRoaXMuc2NoZW1hID0gc2NoZW1hO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFNjaGVtYVZhbGlkYXRpb25Db250ZXh0LnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVwb3J0RXJyb3IgPSBmdW5jdGlvbiByZXBvcnRFcnJvcihtZXNzYWdlLCBub2Rlcykge1xuICAgIHZhciBfbm9kZXMgPSBBcnJheS5pc0FycmF5KG5vZGVzKSA/IG5vZGVzLmZpbHRlcihCb29sZWFuKSA6IG5vZGVzO1xuXG4gICAgdGhpcy5hZGRFcnJvcihuZXcgR3JhcGhRTEVycm9yKG1lc3NhZ2UsIF9ub2RlcykpO1xuICB9O1xuXG4gIF9wcm90by5hZGRFcnJvciA9IGZ1bmN0aW9uIGFkZEVycm9yKGVycm9yKSB7XG4gICAgdGhpcy5fZXJyb3JzLnB1c2goZXJyb3IpO1xuICB9O1xuXG4gIF9wcm90by5nZXRFcnJvcnMgPSBmdW5jdGlvbiBnZXRFcnJvcnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2Vycm9ycztcbiAgfTtcblxuICByZXR1cm4gU2NoZW1hVmFsaWRhdGlvbkNvbnRleHQ7XG59KCk7XG5cbmZ1bmN0aW9uIHZhbGlkYXRlUm9vdFR5cGVzKGNvbnRleHQpIHtcbiAgdmFyIHNjaGVtYSA9IGNvbnRleHQuc2NoZW1hO1xuICB2YXIgcXVlcnlUeXBlID0gc2NoZW1hLmdldFF1ZXJ5VHlwZSgpO1xuXG4gIGlmICghcXVlcnlUeXBlKSB7XG4gICAgY29udGV4dC5yZXBvcnRFcnJvcignUXVlcnkgcm9vdCB0eXBlIG11c3QgYmUgcHJvdmlkZWQuJywgc2NoZW1hLmFzdE5vZGUpO1xuICB9IGVsc2UgaWYgKCFpc09iamVjdFR5cGUocXVlcnlUeXBlKSkge1xuICAgIHZhciBfZ2V0T3BlcmF0aW9uVHlwZU5vZGU7XG5cbiAgICBjb250ZXh0LnJlcG9ydEVycm9yKFwiUXVlcnkgcm9vdCB0eXBlIG11c3QgYmUgT2JqZWN0IHR5cGUsIGl0IGNhbm5vdCBiZSBcIi5jb25jYXQoaW5zcGVjdChxdWVyeVR5cGUpLCBcIi5cIiksIChfZ2V0T3BlcmF0aW9uVHlwZU5vZGUgPSBnZXRPcGVyYXRpb25UeXBlTm9kZShzY2hlbWEsICdxdWVyeScpKSAhPT0gbnVsbCAmJiBfZ2V0T3BlcmF0aW9uVHlwZU5vZGUgIT09IHZvaWQgMCA/IF9nZXRPcGVyYXRpb25UeXBlTm9kZSA6IHF1ZXJ5VHlwZS5hc3ROb2RlKTtcbiAgfVxuXG4gIHZhciBtdXRhdGlvblR5cGUgPSBzY2hlbWEuZ2V0TXV0YXRpb25UeXBlKCk7XG5cbiAgaWYgKG11dGF0aW9uVHlwZSAmJiAhaXNPYmplY3RUeXBlKG11dGF0aW9uVHlwZSkpIHtcbiAgICB2YXIgX2dldE9wZXJhdGlvblR5cGVOb2RlMjtcblxuICAgIGNvbnRleHQucmVwb3J0RXJyb3IoJ011dGF0aW9uIHJvb3QgdHlwZSBtdXN0IGJlIE9iamVjdCB0eXBlIGlmIHByb3ZpZGVkLCBpdCBjYW5ub3QgYmUgJyArIFwiXCIuY29uY2F0KGluc3BlY3QobXV0YXRpb25UeXBlKSwgXCIuXCIpLCAoX2dldE9wZXJhdGlvblR5cGVOb2RlMiA9IGdldE9wZXJhdGlvblR5cGVOb2RlKHNjaGVtYSwgJ211dGF0aW9uJykpICE9PSBudWxsICYmIF9nZXRPcGVyYXRpb25UeXBlTm9kZTIgIT09IHZvaWQgMCA/IF9nZXRPcGVyYXRpb25UeXBlTm9kZTIgOiBtdXRhdGlvblR5cGUuYXN0Tm9kZSk7XG4gIH1cblxuICB2YXIgc3Vic2NyaXB0aW9uVHlwZSA9IHNjaGVtYS5nZXRTdWJzY3JpcHRpb25UeXBlKCk7XG5cbiAgaWYgKHN1YnNjcmlwdGlvblR5cGUgJiYgIWlzT2JqZWN0VHlwZShzdWJzY3JpcHRpb25UeXBlKSkge1xuICAgIHZhciBfZ2V0T3BlcmF0aW9uVHlwZU5vZGUzO1xuXG4gICAgY29udGV4dC5yZXBvcnRFcnJvcignU3Vic2NyaXB0aW9uIHJvb3QgdHlwZSBtdXN0IGJlIE9iamVjdCB0eXBlIGlmIHByb3ZpZGVkLCBpdCBjYW5ub3QgYmUgJyArIFwiXCIuY29uY2F0KGluc3BlY3Qoc3Vic2NyaXB0aW9uVHlwZSksIFwiLlwiKSwgKF9nZXRPcGVyYXRpb25UeXBlTm9kZTMgPSBnZXRPcGVyYXRpb25UeXBlTm9kZShzY2hlbWEsICdzdWJzY3JpcHRpb24nKSkgIT09IG51bGwgJiYgX2dldE9wZXJhdGlvblR5cGVOb2RlMyAhPT0gdm9pZCAwID8gX2dldE9wZXJhdGlvblR5cGVOb2RlMyA6IHN1YnNjcmlwdGlvblR5cGUuYXN0Tm9kZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0T3BlcmF0aW9uVHlwZU5vZGUoc2NoZW1hLCBvcGVyYXRpb24pIHtcbiAgdmFyIG9wZXJhdGlvbk5vZGVzID0gZ2V0QWxsU3ViTm9kZXMoc2NoZW1hLCBmdW5jdGlvbiAobm9kZSkge1xuICAgIHJldHVybiBub2RlLm9wZXJhdGlvblR5cGVzO1xuICB9KTtcblxuICBmb3IgKHZhciBfaTIgPSAwOyBfaTIgPCBvcGVyYXRpb25Ob2Rlcy5sZW5ndGg7IF9pMisrKSB7XG4gICAgdmFyIG5vZGUgPSBvcGVyYXRpb25Ob2Rlc1tfaTJdO1xuXG4gICAgaWYgKG5vZGUub3BlcmF0aW9uID09PSBvcGVyYXRpb24pIHtcbiAgICAgIHJldHVybiBub2RlLnR5cGU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVEaXJlY3RpdmVzKGNvbnRleHQpIHtcbiAgZm9yICh2YXIgX2k0ID0gMCwgX2NvbnRleHQkc2NoZW1hJGdldERpMiA9IGNvbnRleHQuc2NoZW1hLmdldERpcmVjdGl2ZXMoKTsgX2k0IDwgX2NvbnRleHQkc2NoZW1hJGdldERpMi5sZW5ndGg7IF9pNCsrKSB7XG4gICAgdmFyIGRpcmVjdGl2ZSA9IF9jb250ZXh0JHNjaGVtYSRnZXREaTJbX2k0XTtcblxuICAgIC8vIEVuc3VyZSBhbGwgZGlyZWN0aXZlcyBhcmUgaW4gZmFjdCBHcmFwaFFMIGRpcmVjdGl2ZXMuXG4gICAgaWYgKCFpc0RpcmVjdGl2ZShkaXJlY3RpdmUpKSB7XG4gICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFwiRXhwZWN0ZWQgZGlyZWN0aXZlIGJ1dCBnb3Q6IFwiLmNvbmNhdChpbnNwZWN0KGRpcmVjdGl2ZSksIFwiLlwiKSwgZGlyZWN0aXZlID09PSBudWxsIHx8IGRpcmVjdGl2ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGlyZWN0aXZlLmFzdE5vZGUpO1xuICAgICAgY29udGludWU7XG4gICAgfSAvLyBFbnN1cmUgdGhleSBhcmUgbmFtZWQgY29ycmVjdGx5LlxuXG5cbiAgICB2YWxpZGF0ZU5hbWUoY29udGV4dCwgZGlyZWN0aXZlKTsgLy8gVE9ETzogRW5zdXJlIHByb3BlciBsb2NhdGlvbnMuXG4gICAgLy8gRW5zdXJlIHRoZSBhcmd1bWVudHMgYXJlIHZhbGlkLlxuXG4gICAgZm9yICh2YXIgX2k2ID0gMCwgX2RpcmVjdGl2ZSRhcmdzMiA9IGRpcmVjdGl2ZS5hcmdzOyBfaTYgPCBfZGlyZWN0aXZlJGFyZ3MyLmxlbmd0aDsgX2k2KyspIHtcbiAgICAgIHZhciBhcmcgPSBfZGlyZWN0aXZlJGFyZ3MyW19pNl07XG4gICAgICAvLyBFbnN1cmUgdGhleSBhcmUgbmFtZWQgY29ycmVjdGx5LlxuICAgICAgdmFsaWRhdGVOYW1lKGNvbnRleHQsIGFyZyk7IC8vIEVuc3VyZSB0aGUgdHlwZSBpcyBhbiBpbnB1dCB0eXBlLlxuXG4gICAgICBpZiAoIWlzSW5wdXRUeXBlKGFyZy50eXBlKSkge1xuICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFwiVGhlIHR5cGUgb2YgQFwiLmNvbmNhdChkaXJlY3RpdmUubmFtZSwgXCIoXCIpLmNvbmNhdChhcmcubmFtZSwgXCI6KSBtdXN0IGJlIElucHV0IFR5cGUgXCIpICsgXCJidXQgZ290OiBcIi5jb25jYXQoaW5zcGVjdChhcmcudHlwZSksIFwiLlwiKSwgYXJnLmFzdE5vZGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNSZXF1aXJlZEFyZ3VtZW50KGFyZykgJiYgYXJnLmRlcHJlY2F0aW9uUmVhc29uICE9IG51bGwpIHtcbiAgICAgICAgdmFyIF9hcmckYXN0Tm9kZTtcblxuICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFwiUmVxdWlyZWQgYXJndW1lbnQgQFwiLmNvbmNhdChkaXJlY3RpdmUubmFtZSwgXCIoXCIpLmNvbmNhdChhcmcubmFtZSwgXCI6KSBjYW5ub3QgYmUgZGVwcmVjYXRlZC5cIiksIFtnZXREZXByZWNhdGVkRGlyZWN0aXZlTm9kZShhcmcuYXN0Tm9kZSksIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0IChUT0RPIG5lZWQgdG8gd3JpdGUgY292ZXJhZ2UgdGVzdHMpXG4gICAgICAgIChfYXJnJGFzdE5vZGUgPSBhcmcuYXN0Tm9kZSkgPT09IG51bGwgfHwgX2FyZyRhc3ROb2RlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYXJnJGFzdE5vZGUudHlwZV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZU5hbWUoY29udGV4dCwgbm9kZSkge1xuICAvLyBFbnN1cmUgbmFtZXMgYXJlIHZhbGlkLCBob3dldmVyIGludHJvc3BlY3Rpb24gdHlwZXMgb3B0IG91dC5cbiAgdmFyIGVycm9yID0gaXNWYWxpZE5hbWVFcnJvcihub2RlLm5hbWUpO1xuXG4gIGlmIChlcnJvcikge1xuICAgIGNvbnRleHQuYWRkRXJyb3IobG9jYXRlZEVycm9yKGVycm9yLCBub2RlLmFzdE5vZGUpKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZVR5cGVzKGNvbnRleHQpIHtcbiAgdmFyIHZhbGlkYXRlSW5wdXRPYmplY3RDaXJjdWxhclJlZnMgPSBjcmVhdGVJbnB1dE9iamVjdENpcmN1bGFyUmVmc1ZhbGlkYXRvcihjb250ZXh0KTtcbiAgdmFyIHR5cGVNYXAgPSBjb250ZXh0LnNjaGVtYS5nZXRUeXBlTWFwKCk7XG5cbiAgZm9yICh2YXIgX2k4ID0gMCwgX29iamVjdFZhbHVlczIgPSBvYmplY3RWYWx1ZXModHlwZU1hcCk7IF9pOCA8IF9vYmplY3RWYWx1ZXMyLmxlbmd0aDsgX2k4KyspIHtcbiAgICB2YXIgdHlwZSA9IF9vYmplY3RWYWx1ZXMyW19pOF07XG5cbiAgICAvLyBFbnN1cmUgYWxsIHByb3ZpZGVkIHR5cGVzIGFyZSBpbiBmYWN0IEdyYXBoUUwgdHlwZS5cbiAgICBpZiAoIWlzTmFtZWRUeXBlKHR5cGUpKSB7XG4gICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFwiRXhwZWN0ZWQgR3JhcGhRTCBuYW1lZCB0eXBlIGJ1dCBnb3Q6IFwiLmNvbmNhdChpbnNwZWN0KHR5cGUpLCBcIi5cIiksIHR5cGUuYXN0Tm9kZSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9IC8vIEVuc3VyZSBpdCBpcyBuYW1lZCBjb3JyZWN0bHkgKGV4Y2x1ZGluZyBpbnRyb3NwZWN0aW9uIHR5cGVzKS5cblxuXG4gICAgaWYgKCFpc0ludHJvc3BlY3Rpb25UeXBlKHR5cGUpKSB7XG4gICAgICB2YWxpZGF0ZU5hbWUoY29udGV4dCwgdHlwZSk7XG4gICAgfVxuXG4gICAgaWYgKGlzT2JqZWN0VHlwZSh0eXBlKSkge1xuICAgICAgLy8gRW5zdXJlIGZpZWxkcyBhcmUgdmFsaWRcbiAgICAgIHZhbGlkYXRlRmllbGRzKGNvbnRleHQsIHR5cGUpOyAvLyBFbnN1cmUgb2JqZWN0cyBpbXBsZW1lbnQgdGhlIGludGVyZmFjZXMgdGhleSBjbGFpbSB0by5cblxuICAgICAgdmFsaWRhdGVJbnRlcmZhY2VzKGNvbnRleHQsIHR5cGUpO1xuICAgIH0gZWxzZSBpZiAoaXNJbnRlcmZhY2VUeXBlKHR5cGUpKSB7XG4gICAgICAvLyBFbnN1cmUgZmllbGRzIGFyZSB2YWxpZC5cbiAgICAgIHZhbGlkYXRlRmllbGRzKGNvbnRleHQsIHR5cGUpOyAvLyBFbnN1cmUgaW50ZXJmYWNlcyBpbXBsZW1lbnQgdGhlIGludGVyZmFjZXMgdGhleSBjbGFpbSB0by5cblxuICAgICAgdmFsaWRhdGVJbnRlcmZhY2VzKGNvbnRleHQsIHR5cGUpO1xuICAgIH0gZWxzZSBpZiAoaXNVbmlvblR5cGUodHlwZSkpIHtcbiAgICAgIC8vIEVuc3VyZSBVbmlvbnMgaW5jbHVkZSB2YWxpZCBtZW1iZXIgdHlwZXMuXG4gICAgICB2YWxpZGF0ZVVuaW9uTWVtYmVycyhjb250ZXh0LCB0eXBlKTtcbiAgICB9IGVsc2UgaWYgKGlzRW51bVR5cGUodHlwZSkpIHtcbiAgICAgIC8vIEVuc3VyZSBFbnVtcyBoYXZlIHZhbGlkIHZhbHVlcy5cbiAgICAgIHZhbGlkYXRlRW51bVZhbHVlcyhjb250ZXh0LCB0eXBlKTtcbiAgICB9IGVsc2UgaWYgKGlzSW5wdXRPYmplY3RUeXBlKHR5cGUpKSB7XG4gICAgICAvLyBFbnN1cmUgSW5wdXQgT2JqZWN0IGZpZWxkcyBhcmUgdmFsaWQuXG4gICAgICB2YWxpZGF0ZUlucHV0RmllbGRzKGNvbnRleHQsIHR5cGUpOyAvLyBFbnN1cmUgSW5wdXQgT2JqZWN0cyBkbyBub3QgY29udGFpbiBub24tbnVsbGFibGUgY2lyY3VsYXIgcmVmZXJlbmNlc1xuXG4gICAgICB2YWxpZGF0ZUlucHV0T2JqZWN0Q2lyY3VsYXJSZWZzKHR5cGUpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZUZpZWxkcyhjb250ZXh0LCB0eXBlKSB7XG4gIHZhciBmaWVsZHMgPSBvYmplY3RWYWx1ZXModHlwZS5nZXRGaWVsZHMoKSk7IC8vIE9iamVjdHMgYW5kIEludGVyZmFjZXMgYm90aCBtdXN0IGRlZmluZSBvbmUgb3IgbW9yZSBmaWVsZHMuXG5cbiAgaWYgKGZpZWxkcy5sZW5ndGggPT09IDApIHtcbiAgICBjb250ZXh0LnJlcG9ydEVycm9yKFwiVHlwZSBcIi5jb25jYXQodHlwZS5uYW1lLCBcIiBtdXN0IGRlZmluZSBvbmUgb3IgbW9yZSBmaWVsZHMuXCIpLCBnZXRBbGxOb2Rlcyh0eXBlKSk7XG4gIH1cblxuICBmb3IgKHZhciBfaTEwID0gMDsgX2kxMCA8IGZpZWxkcy5sZW5ndGg7IF9pMTArKykge1xuICAgIHZhciBmaWVsZCA9IGZpZWxkc1tfaTEwXTtcbiAgICAvLyBFbnN1cmUgdGhleSBhcmUgbmFtZWQgY29ycmVjdGx5LlxuICAgIHZhbGlkYXRlTmFtZShjb250ZXh0LCBmaWVsZCk7IC8vIEVuc3VyZSB0aGUgdHlwZSBpcyBhbiBvdXRwdXQgdHlwZVxuXG4gICAgaWYgKCFpc091dHB1dFR5cGUoZmllbGQudHlwZSkpIHtcbiAgICAgIHZhciBfZmllbGQkYXN0Tm9kZTtcblxuICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcIlRoZSB0eXBlIG9mIFwiLmNvbmNhdCh0eXBlLm5hbWUsIFwiLlwiKS5jb25jYXQoZmllbGQubmFtZSwgXCIgbXVzdCBiZSBPdXRwdXQgVHlwZSBcIikgKyBcImJ1dCBnb3Q6IFwiLmNvbmNhdChpbnNwZWN0KGZpZWxkLnR5cGUpLCBcIi5cIiksIChfZmllbGQkYXN0Tm9kZSA9IGZpZWxkLmFzdE5vZGUpID09PSBudWxsIHx8IF9maWVsZCRhc3ROb2RlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZmllbGQkYXN0Tm9kZS50eXBlKTtcbiAgICB9IC8vIEVuc3VyZSB0aGUgYXJndW1lbnRzIGFyZSB2YWxpZFxuXG5cbiAgICBmb3IgKHZhciBfaTEyID0gMCwgX2ZpZWxkJGFyZ3MyID0gZmllbGQuYXJnczsgX2kxMiA8IF9maWVsZCRhcmdzMi5sZW5ndGg7IF9pMTIrKykge1xuICAgICAgdmFyIGFyZyA9IF9maWVsZCRhcmdzMltfaTEyXTtcbiAgICAgIHZhciBhcmdOYW1lID0gYXJnLm5hbWU7IC8vIEVuc3VyZSB0aGV5IGFyZSBuYW1lZCBjb3JyZWN0bHkuXG5cbiAgICAgIHZhbGlkYXRlTmFtZShjb250ZXh0LCBhcmcpOyAvLyBFbnN1cmUgdGhlIHR5cGUgaXMgYW4gaW5wdXQgdHlwZVxuXG4gICAgICBpZiAoIWlzSW5wdXRUeXBlKGFyZy50eXBlKSkge1xuICAgICAgICB2YXIgX2FyZyRhc3ROb2RlMjtcblxuICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFwiVGhlIHR5cGUgb2YgXCIuY29uY2F0KHR5cGUubmFtZSwgXCIuXCIpLmNvbmNhdChmaWVsZC5uYW1lLCBcIihcIikuY29uY2F0KGFyZ05hbWUsIFwiOikgbXVzdCBiZSBJbnB1dCBcIikgKyBcIlR5cGUgYnV0IGdvdDogXCIuY29uY2F0KGluc3BlY3QoYXJnLnR5cGUpLCBcIi5cIiksIChfYXJnJGFzdE5vZGUyID0gYXJnLmFzdE5vZGUpID09PSBudWxsIHx8IF9hcmckYXN0Tm9kZTIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hcmckYXN0Tm9kZTIudHlwZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc1JlcXVpcmVkQXJndW1lbnQoYXJnKSAmJiBhcmcuZGVwcmVjYXRpb25SZWFzb24gIT0gbnVsbCkge1xuICAgICAgICB2YXIgX2FyZyRhc3ROb2RlMztcblxuICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFwiUmVxdWlyZWQgYXJndW1lbnQgXCIuY29uY2F0KHR5cGUubmFtZSwgXCIuXCIpLmNvbmNhdChmaWVsZC5uYW1lLCBcIihcIikuY29uY2F0KGFyZ05hbWUsIFwiOikgY2Fubm90IGJlIGRlcHJlY2F0ZWQuXCIpLCBbZ2V0RGVwcmVjYXRlZERpcmVjdGl2ZU5vZGUoYXJnLmFzdE5vZGUpLCAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAoVE9ETyBuZWVkIHRvIHdyaXRlIGNvdmVyYWdlIHRlc3RzKVxuICAgICAgICAoX2FyZyRhc3ROb2RlMyA9IGFyZy5hc3ROb2RlKSA9PT0gbnVsbCB8fCBfYXJnJGFzdE5vZGUzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYXJnJGFzdE5vZGUzLnR5cGVdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVJbnRlcmZhY2VzKGNvbnRleHQsIHR5cGUpIHtcbiAgdmFyIGlmYWNlVHlwZU5hbWVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICBmb3IgKHZhciBfaTE0ID0gMCwgX3R5cGUkZ2V0SW50ZXJmYWNlczIgPSB0eXBlLmdldEludGVyZmFjZXMoKTsgX2kxNCA8IF90eXBlJGdldEludGVyZmFjZXMyLmxlbmd0aDsgX2kxNCsrKSB7XG4gICAgdmFyIGlmYWNlID0gX3R5cGUkZ2V0SW50ZXJmYWNlczJbX2kxNF07XG5cbiAgICBpZiAoIWlzSW50ZXJmYWNlVHlwZShpZmFjZSkpIHtcbiAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXCJUeXBlIFwiLmNvbmNhdChpbnNwZWN0KHR5cGUpLCBcIiBtdXN0IG9ubHkgaW1wbGVtZW50IEludGVyZmFjZSB0eXBlcywgXCIpICsgXCJpdCBjYW5ub3QgaW1wbGVtZW50IFwiLmNvbmNhdChpbnNwZWN0KGlmYWNlKSwgXCIuXCIpLCBnZXRBbGxJbXBsZW1lbnRzSW50ZXJmYWNlTm9kZXModHlwZSwgaWZhY2UpKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmICh0eXBlID09PSBpZmFjZSkge1xuICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcIlR5cGUgXCIuY29uY2F0KHR5cGUubmFtZSwgXCIgY2Fubm90IGltcGxlbWVudCBpdHNlbGYgYmVjYXVzZSBpdCB3b3VsZCBjcmVhdGUgYSBjaXJjdWxhciByZWZlcmVuY2UuXCIpLCBnZXRBbGxJbXBsZW1lbnRzSW50ZXJmYWNlTm9kZXModHlwZSwgaWZhY2UpKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmIChpZmFjZVR5cGVOYW1lc1tpZmFjZS5uYW1lXSkge1xuICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcIlR5cGUgXCIuY29uY2F0KHR5cGUubmFtZSwgXCIgY2FuIG9ubHkgaW1wbGVtZW50IFwiKS5jb25jYXQoaWZhY2UubmFtZSwgXCIgb25jZS5cIiksIGdldEFsbEltcGxlbWVudHNJbnRlcmZhY2VOb2Rlcyh0eXBlLCBpZmFjZSkpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWZhY2VUeXBlTmFtZXNbaWZhY2UubmFtZV0gPSB0cnVlO1xuICAgIHZhbGlkYXRlVHlwZUltcGxlbWVudHNBbmNlc3RvcnMoY29udGV4dCwgdHlwZSwgaWZhY2UpO1xuICAgIHZhbGlkYXRlVHlwZUltcGxlbWVudHNJbnRlcmZhY2UoY29udGV4dCwgdHlwZSwgaWZhY2UpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlVHlwZUltcGxlbWVudHNJbnRlcmZhY2UoY29udGV4dCwgdHlwZSwgaWZhY2UpIHtcbiAgdmFyIHR5cGVGaWVsZE1hcCA9IHR5cGUuZ2V0RmllbGRzKCk7IC8vIEFzc2VydCBlYWNoIGludGVyZmFjZSBmaWVsZCBpcyBpbXBsZW1lbnRlZC5cblxuICBmb3IgKHZhciBfaTE2ID0gMCwgX29iamVjdFZhbHVlczQgPSBvYmplY3RWYWx1ZXMoaWZhY2UuZ2V0RmllbGRzKCkpOyBfaTE2IDwgX29iamVjdFZhbHVlczQubGVuZ3RoOyBfaTE2KyspIHtcbiAgICB2YXIgaWZhY2VGaWVsZCA9IF9vYmplY3RWYWx1ZXM0W19pMTZdO1xuICAgIHZhciBmaWVsZE5hbWUgPSBpZmFjZUZpZWxkLm5hbWU7XG4gICAgdmFyIHR5cGVGaWVsZCA9IHR5cGVGaWVsZE1hcFtmaWVsZE5hbWVdOyAvLyBBc3NlcnQgaW50ZXJmYWNlIGZpZWxkIGV4aXN0cyBvbiB0eXBlLlxuXG4gICAgaWYgKCF0eXBlRmllbGQpIHtcbiAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXCJJbnRlcmZhY2UgZmllbGQgXCIuY29uY2F0KGlmYWNlLm5hbWUsIFwiLlwiKS5jb25jYXQoZmllbGROYW1lLCBcIiBleHBlY3RlZCBidXQgXCIpLmNvbmNhdCh0eXBlLm5hbWUsIFwiIGRvZXMgbm90IHByb3ZpZGUgaXQuXCIpLCBbaWZhY2VGaWVsZC5hc3ROb2RlXS5jb25jYXQoZ2V0QWxsTm9kZXModHlwZSkpKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH0gLy8gQXNzZXJ0IGludGVyZmFjZSBmaWVsZCB0eXBlIGlzIHNhdGlzZmllZCBieSB0eXBlIGZpZWxkIHR5cGUsIGJ5IGJlaW5nXG4gICAgLy8gYSB2YWxpZCBzdWJ0eXBlLiAoY292YXJpYW50KVxuXG5cbiAgICBpZiAoIWlzVHlwZVN1YlR5cGVPZihjb250ZXh0LnNjaGVtYSwgdHlwZUZpZWxkLnR5cGUsIGlmYWNlRmllbGQudHlwZSkpIHtcbiAgICAgIHZhciBfaWZhY2VGaWVsZCRhc3ROb2RlLCBfdHlwZUZpZWxkJGFzdE5vZGU7XG5cbiAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXCJJbnRlcmZhY2UgZmllbGQgXCIuY29uY2F0KGlmYWNlLm5hbWUsIFwiLlwiKS5jb25jYXQoZmllbGROYW1lLCBcIiBleHBlY3RzIHR5cGUgXCIpICsgXCJcIi5jb25jYXQoaW5zcGVjdChpZmFjZUZpZWxkLnR5cGUpLCBcIiBidXQgXCIpLmNvbmNhdCh0eXBlLm5hbWUsIFwiLlwiKS5jb25jYXQoZmllbGROYW1lLCBcIiBcIikgKyBcImlzIHR5cGUgXCIuY29uY2F0KGluc3BlY3QodHlwZUZpZWxkLnR5cGUpLCBcIi5cIiksIFsvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAoVE9ETyBuZWVkIHRvIHdyaXRlIGNvdmVyYWdlIHRlc3RzKVxuICAgICAgKF9pZmFjZUZpZWxkJGFzdE5vZGUgPSBpZmFjZUZpZWxkLmFzdE5vZGUpID09PSBudWxsIHx8IF9pZmFjZUZpZWxkJGFzdE5vZGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9pZmFjZUZpZWxkJGFzdE5vZGUudHlwZSwgLy8gaXN0YW5idWwgaWdub3JlIG5leHQgKFRPRE8gbmVlZCB0byB3cml0ZSBjb3ZlcmFnZSB0ZXN0cylcbiAgICAgIChfdHlwZUZpZWxkJGFzdE5vZGUgPSB0eXBlRmllbGQuYXN0Tm9kZSkgPT09IG51bGwgfHwgX3R5cGVGaWVsZCRhc3ROb2RlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdHlwZUZpZWxkJGFzdE5vZGUudHlwZV0pO1xuICAgIH0gLy8gQXNzZXJ0IGVhY2ggaW50ZXJmYWNlIGZpZWxkIGFyZyBpcyBpbXBsZW1lbnRlZC5cblxuXG4gICAgdmFyIF9sb29wID0gZnVuY3Rpb24gX2xvb3AoX2kxOCwgX2lmYWNlRmllbGQkYXJnczIpIHtcbiAgICAgIHZhciBpZmFjZUFyZyA9IF9pZmFjZUZpZWxkJGFyZ3MyW19pMThdO1xuICAgICAgdmFyIGFyZ05hbWUgPSBpZmFjZUFyZy5uYW1lO1xuICAgICAgdmFyIHR5cGVBcmcgPSBmaW5kKHR5cGVGaWVsZC5hcmdzLCBmdW5jdGlvbiAoYXJnKSB7XG4gICAgICAgIHJldHVybiBhcmcubmFtZSA9PT0gYXJnTmFtZTtcbiAgICAgIH0pOyAvLyBBc3NlcnQgaW50ZXJmYWNlIGZpZWxkIGFyZyBleGlzdHMgb24gb2JqZWN0IGZpZWxkLlxuXG4gICAgICBpZiAoIXR5cGVBcmcpIHtcbiAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcIkludGVyZmFjZSBmaWVsZCBhcmd1bWVudCBcIi5jb25jYXQoaWZhY2UubmFtZSwgXCIuXCIpLmNvbmNhdChmaWVsZE5hbWUsIFwiKFwiKS5jb25jYXQoYXJnTmFtZSwgXCI6KSBleHBlY3RlZCBidXQgXCIpLmNvbmNhdCh0eXBlLm5hbWUsIFwiLlwiKS5jb25jYXQoZmllbGROYW1lLCBcIiBkb2VzIG5vdCBwcm92aWRlIGl0LlwiKSwgW2lmYWNlQXJnLmFzdE5vZGUsIHR5cGVGaWVsZC5hc3ROb2RlXSk7XG4gICAgICAgIHJldHVybiBcImNvbnRpbnVlXCI7XG4gICAgICB9IC8vIEFzc2VydCBpbnRlcmZhY2UgZmllbGQgYXJnIHR5cGUgbWF0Y2hlcyBvYmplY3QgZmllbGQgYXJnIHR5cGUuXG4gICAgICAvLyAoaW52YXJpYW50KVxuICAgICAgLy8gVE9ETzogY2hhbmdlIHRvIGNvbnRyYXZhcmlhbnQ/XG5cblxuICAgICAgaWYgKCFpc0VxdWFsVHlwZShpZmFjZUFyZy50eXBlLCB0eXBlQXJnLnR5cGUpKSB7XG4gICAgICAgIHZhciBfaWZhY2VBcmckYXN0Tm9kZSwgX3R5cGVBcmckYXN0Tm9kZTtcblxuICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFwiSW50ZXJmYWNlIGZpZWxkIGFyZ3VtZW50IFwiLmNvbmNhdChpZmFjZS5uYW1lLCBcIi5cIikuY29uY2F0KGZpZWxkTmFtZSwgXCIoXCIpLmNvbmNhdChhcmdOYW1lLCBcIjopIFwiKSArIFwiZXhwZWN0cyB0eXBlIFwiLmNvbmNhdChpbnNwZWN0KGlmYWNlQXJnLnR5cGUpLCBcIiBidXQgXCIpICsgXCJcIi5jb25jYXQodHlwZS5uYW1lLCBcIi5cIikuY29uY2F0KGZpZWxkTmFtZSwgXCIoXCIpLmNvbmNhdChhcmdOYW1lLCBcIjopIGlzIHR5cGUgXCIpICsgXCJcIi5jb25jYXQoaW5zcGVjdCh0eXBlQXJnLnR5cGUpLCBcIi5cIiksIFsvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAoVE9ETyBuZWVkIHRvIHdyaXRlIGNvdmVyYWdlIHRlc3RzKVxuICAgICAgICAoX2lmYWNlQXJnJGFzdE5vZGUgPSBpZmFjZUFyZy5hc3ROb2RlKSA9PT0gbnVsbCB8fCBfaWZhY2VBcmckYXN0Tm9kZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2lmYWNlQXJnJGFzdE5vZGUudHlwZSwgLy8gaXN0YW5idWwgaWdub3JlIG5leHQgKFRPRE8gbmVlZCB0byB3cml0ZSBjb3ZlcmFnZSB0ZXN0cylcbiAgICAgICAgKF90eXBlQXJnJGFzdE5vZGUgPSB0eXBlQXJnLmFzdE5vZGUpID09PSBudWxsIHx8IF90eXBlQXJnJGFzdE5vZGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF90eXBlQXJnJGFzdE5vZGUudHlwZV0pO1xuICAgICAgfSAvLyBUT0RPOiB2YWxpZGF0ZSBkZWZhdWx0IHZhbHVlcz9cblxuICAgIH07XG5cbiAgICBmb3IgKHZhciBfaTE4ID0gMCwgX2lmYWNlRmllbGQkYXJnczIgPSBpZmFjZUZpZWxkLmFyZ3M7IF9pMTggPCBfaWZhY2VGaWVsZCRhcmdzMi5sZW5ndGg7IF9pMTgrKykge1xuICAgICAgdmFyIF9yZXQgPSBfbG9vcChfaTE4LCBfaWZhY2VGaWVsZCRhcmdzMik7XG5cbiAgICAgIGlmIChfcmV0ID09PSBcImNvbnRpbnVlXCIpIGNvbnRpbnVlO1xuICAgIH0gLy8gQXNzZXJ0IGFkZGl0aW9uYWwgYXJndW1lbnRzIG11c3Qgbm90IGJlIHJlcXVpcmVkLlxuXG5cbiAgICB2YXIgX2xvb3AyID0gZnVuY3Rpb24gX2xvb3AyKF9pMjAsIF90eXBlRmllbGQkYXJnczIpIHtcbiAgICAgIHZhciB0eXBlQXJnID0gX3R5cGVGaWVsZCRhcmdzMltfaTIwXTtcbiAgICAgIHZhciBhcmdOYW1lID0gdHlwZUFyZy5uYW1lO1xuICAgICAgdmFyIGlmYWNlQXJnID0gZmluZChpZmFjZUZpZWxkLmFyZ3MsIGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgICAgcmV0dXJuIGFyZy5uYW1lID09PSBhcmdOYW1lO1xuICAgICAgfSk7XG5cbiAgICAgIGlmICghaWZhY2VBcmcgJiYgaXNSZXF1aXJlZEFyZ3VtZW50KHR5cGVBcmcpKSB7XG4gICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXCJPYmplY3QgZmllbGQgXCIuY29uY2F0KHR5cGUubmFtZSwgXCIuXCIpLmNvbmNhdChmaWVsZE5hbWUsIFwiIGluY2x1ZGVzIHJlcXVpcmVkIGFyZ3VtZW50IFwiKS5jb25jYXQoYXJnTmFtZSwgXCIgdGhhdCBpcyBtaXNzaW5nIGZyb20gdGhlIEludGVyZmFjZSBmaWVsZCBcIikuY29uY2F0KGlmYWNlLm5hbWUsIFwiLlwiKS5jb25jYXQoZmllbGROYW1lLCBcIi5cIiksIFt0eXBlQXJnLmFzdE5vZGUsIGlmYWNlRmllbGQuYXN0Tm9kZV0pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBmb3IgKHZhciBfaTIwID0gMCwgX3R5cGVGaWVsZCRhcmdzMiA9IHR5cGVGaWVsZC5hcmdzOyBfaTIwIDwgX3R5cGVGaWVsZCRhcmdzMi5sZW5ndGg7IF9pMjArKykge1xuICAgICAgX2xvb3AyKF9pMjAsIF90eXBlRmllbGQkYXJnczIpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZVR5cGVJbXBsZW1lbnRzQW5jZXN0b3JzKGNvbnRleHQsIHR5cGUsIGlmYWNlKSB7XG4gIHZhciBpZmFjZUludGVyZmFjZXMgPSB0eXBlLmdldEludGVyZmFjZXMoKTtcblxuICBmb3IgKHZhciBfaTIyID0gMCwgX2lmYWNlJGdldEludGVyZmFjZXMyID0gaWZhY2UuZ2V0SW50ZXJmYWNlcygpOyBfaTIyIDwgX2lmYWNlJGdldEludGVyZmFjZXMyLmxlbmd0aDsgX2kyMisrKSB7XG4gICAgdmFyIHRyYW5zaXRpdmUgPSBfaWZhY2UkZ2V0SW50ZXJmYWNlczJbX2kyMl07XG5cbiAgICBpZiAoaWZhY2VJbnRlcmZhY2VzLmluZGV4T2YodHJhbnNpdGl2ZSkgPT09IC0xKSB7XG4gICAgICBjb250ZXh0LnJlcG9ydEVycm9yKHRyYW5zaXRpdmUgPT09IHR5cGUgPyBcIlR5cGUgXCIuY29uY2F0KHR5cGUubmFtZSwgXCIgY2Fubm90IGltcGxlbWVudCBcIikuY29uY2F0KGlmYWNlLm5hbWUsIFwiIGJlY2F1c2UgaXQgd291bGQgY3JlYXRlIGEgY2lyY3VsYXIgcmVmZXJlbmNlLlwiKSA6IFwiVHlwZSBcIi5jb25jYXQodHlwZS5uYW1lLCBcIiBtdXN0IGltcGxlbWVudCBcIikuY29uY2F0KHRyYW5zaXRpdmUubmFtZSwgXCIgYmVjYXVzZSBpdCBpcyBpbXBsZW1lbnRlZCBieSBcIikuY29uY2F0KGlmYWNlLm5hbWUsIFwiLlwiKSwgW10uY29uY2F0KGdldEFsbEltcGxlbWVudHNJbnRlcmZhY2VOb2RlcyhpZmFjZSwgdHJhbnNpdGl2ZSksIGdldEFsbEltcGxlbWVudHNJbnRlcmZhY2VOb2Rlcyh0eXBlLCBpZmFjZSkpKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVVbmlvbk1lbWJlcnMoY29udGV4dCwgdW5pb24pIHtcbiAgdmFyIG1lbWJlclR5cGVzID0gdW5pb24uZ2V0VHlwZXMoKTtcblxuICBpZiAobWVtYmVyVHlwZXMubGVuZ3RoID09PSAwKSB7XG4gICAgY29udGV4dC5yZXBvcnRFcnJvcihcIlVuaW9uIHR5cGUgXCIuY29uY2F0KHVuaW9uLm5hbWUsIFwiIG11c3QgZGVmaW5lIG9uZSBvciBtb3JlIG1lbWJlciB0eXBlcy5cIiksIGdldEFsbE5vZGVzKHVuaW9uKSk7XG4gIH1cblxuICB2YXIgaW5jbHVkZWRUeXBlTmFtZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gIGZvciAodmFyIF9pMjQgPSAwOyBfaTI0IDwgbWVtYmVyVHlwZXMubGVuZ3RoOyBfaTI0KyspIHtcbiAgICB2YXIgbWVtYmVyVHlwZSA9IG1lbWJlclR5cGVzW19pMjRdO1xuXG4gICAgaWYgKGluY2x1ZGVkVHlwZU5hbWVzW21lbWJlclR5cGUubmFtZV0pIHtcbiAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXCJVbmlvbiB0eXBlIFwiLmNvbmNhdCh1bmlvbi5uYW1lLCBcIiBjYW4gb25seSBpbmNsdWRlIHR5cGUgXCIpLmNvbmNhdChtZW1iZXJUeXBlLm5hbWUsIFwiIG9uY2UuXCIpLCBnZXRVbmlvbk1lbWJlclR5cGVOb2Rlcyh1bmlvbiwgbWVtYmVyVHlwZS5uYW1lKSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpbmNsdWRlZFR5cGVOYW1lc1ttZW1iZXJUeXBlLm5hbWVdID0gdHJ1ZTtcblxuICAgIGlmICghaXNPYmplY3RUeXBlKG1lbWJlclR5cGUpKSB7XG4gICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFwiVW5pb24gdHlwZSBcIi5jb25jYXQodW5pb24ubmFtZSwgXCIgY2FuIG9ubHkgaW5jbHVkZSBPYmplY3QgdHlwZXMsIFwiKSArIFwiaXQgY2Fubm90IGluY2x1ZGUgXCIuY29uY2F0KGluc3BlY3QobWVtYmVyVHlwZSksIFwiLlwiKSwgZ2V0VW5pb25NZW1iZXJUeXBlTm9kZXModW5pb24sIFN0cmluZyhtZW1iZXJUeXBlKSkpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZUVudW1WYWx1ZXMoY29udGV4dCwgZW51bVR5cGUpIHtcbiAgdmFyIGVudW1WYWx1ZXMgPSBlbnVtVHlwZS5nZXRWYWx1ZXMoKTtcblxuICBpZiAoZW51bVZhbHVlcy5sZW5ndGggPT09IDApIHtcbiAgICBjb250ZXh0LnJlcG9ydEVycm9yKFwiRW51bSB0eXBlIFwiLmNvbmNhdChlbnVtVHlwZS5uYW1lLCBcIiBtdXN0IGRlZmluZSBvbmUgb3IgbW9yZSB2YWx1ZXMuXCIpLCBnZXRBbGxOb2RlcyhlbnVtVHlwZSkpO1xuICB9XG5cbiAgZm9yICh2YXIgX2kyNiA9IDA7IF9pMjYgPCBlbnVtVmFsdWVzLmxlbmd0aDsgX2kyNisrKSB7XG4gICAgdmFyIGVudW1WYWx1ZSA9IGVudW1WYWx1ZXNbX2kyNl07XG4gICAgdmFyIHZhbHVlTmFtZSA9IGVudW1WYWx1ZS5uYW1lOyAvLyBFbnN1cmUgdmFsaWQgbmFtZS5cblxuICAgIHZhbGlkYXRlTmFtZShjb250ZXh0LCBlbnVtVmFsdWUpO1xuXG4gICAgaWYgKHZhbHVlTmFtZSA9PT0gJ3RydWUnIHx8IHZhbHVlTmFtZSA9PT0gJ2ZhbHNlJyB8fCB2YWx1ZU5hbWUgPT09ICdudWxsJykge1xuICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcIkVudW0gdHlwZSBcIi5jb25jYXQoZW51bVR5cGUubmFtZSwgXCIgY2Fubm90IGluY2x1ZGUgdmFsdWU6IFwiKS5jb25jYXQodmFsdWVOYW1lLCBcIi5cIiksIGVudW1WYWx1ZS5hc3ROb2RlKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVJbnB1dEZpZWxkcyhjb250ZXh0LCBpbnB1dE9iaikge1xuICB2YXIgZmllbGRzID0gb2JqZWN0VmFsdWVzKGlucHV0T2JqLmdldEZpZWxkcygpKTtcblxuICBpZiAoZmllbGRzLmxlbmd0aCA9PT0gMCkge1xuICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXCJJbnB1dCBPYmplY3QgdHlwZSBcIi5jb25jYXQoaW5wdXRPYmoubmFtZSwgXCIgbXVzdCBkZWZpbmUgb25lIG9yIG1vcmUgZmllbGRzLlwiKSwgZ2V0QWxsTm9kZXMoaW5wdXRPYmopKTtcbiAgfSAvLyBFbnN1cmUgdGhlIGFyZ3VtZW50cyBhcmUgdmFsaWRcblxuXG4gIGZvciAodmFyIF9pMjggPSAwOyBfaTI4IDwgZmllbGRzLmxlbmd0aDsgX2kyOCsrKSB7XG4gICAgdmFyIGZpZWxkID0gZmllbGRzW19pMjhdO1xuICAgIC8vIEVuc3VyZSB0aGV5IGFyZSBuYW1lZCBjb3JyZWN0bHkuXG4gICAgdmFsaWRhdGVOYW1lKGNvbnRleHQsIGZpZWxkKTsgLy8gRW5zdXJlIHRoZSB0eXBlIGlzIGFuIGlucHV0IHR5cGVcblxuICAgIGlmICghaXNJbnB1dFR5cGUoZmllbGQudHlwZSkpIHtcbiAgICAgIHZhciBfZmllbGQkYXN0Tm9kZTI7XG5cbiAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXCJUaGUgdHlwZSBvZiBcIi5jb25jYXQoaW5wdXRPYmoubmFtZSwgXCIuXCIpLmNvbmNhdChmaWVsZC5uYW1lLCBcIiBtdXN0IGJlIElucHV0IFR5cGUgXCIpICsgXCJidXQgZ290OiBcIi5jb25jYXQoaW5zcGVjdChmaWVsZC50eXBlKSwgXCIuXCIpLCAoX2ZpZWxkJGFzdE5vZGUyID0gZmllbGQuYXN0Tm9kZSkgPT09IG51bGwgfHwgX2ZpZWxkJGFzdE5vZGUyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZmllbGQkYXN0Tm9kZTIudHlwZSk7XG4gICAgfVxuXG4gICAgaWYgKGlzUmVxdWlyZWRJbnB1dEZpZWxkKGZpZWxkKSAmJiBmaWVsZC5kZXByZWNhdGlvblJlYXNvbiAhPSBudWxsKSB7XG4gICAgICB2YXIgX2ZpZWxkJGFzdE5vZGUzO1xuXG4gICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFwiUmVxdWlyZWQgaW5wdXQgZmllbGQgXCIuY29uY2F0KGlucHV0T2JqLm5hbWUsIFwiLlwiKS5jb25jYXQoZmllbGQubmFtZSwgXCIgY2Fubm90IGJlIGRlcHJlY2F0ZWQuXCIpLCBbZ2V0RGVwcmVjYXRlZERpcmVjdGl2ZU5vZGUoZmllbGQuYXN0Tm9kZSksIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0IChUT0RPIG5lZWQgdG8gd3JpdGUgY292ZXJhZ2UgdGVzdHMpXG4gICAgICAoX2ZpZWxkJGFzdE5vZGUzID0gZmllbGQuYXN0Tm9kZSkgPT09IG51bGwgfHwgX2ZpZWxkJGFzdE5vZGUzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZmllbGQkYXN0Tm9kZTMudHlwZV0pO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVJbnB1dE9iamVjdENpcmN1bGFyUmVmc1ZhbGlkYXRvcihjb250ZXh0KSB7XG4gIC8vIE1vZGlmaWVkIGNvcHkgb2YgYWxnb3JpdGhtIGZyb20gJ3NyYy92YWxpZGF0aW9uL3J1bGVzL05vRnJhZ21lbnRDeWNsZXMuanMnLlxuICAvLyBUcmFja3MgYWxyZWFkeSB2aXNpdGVkIHR5cGVzIHRvIG1haW50YWluIE8oTikgYW5kIHRvIGVuc3VyZSB0aGF0IGN5Y2xlc1xuICAvLyBhcmUgbm90IHJlZHVuZGFudGx5IHJlcG9ydGVkLlxuICB2YXIgdmlzaXRlZFR5cGVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTsgLy8gQXJyYXkgb2YgdHlwZXMgbm9kZXMgdXNlZCB0byBwcm9kdWNlIG1lYW5pbmdmdWwgZXJyb3JzXG5cbiAgdmFyIGZpZWxkUGF0aCA9IFtdOyAvLyBQb3NpdGlvbiBpbiB0aGUgdHlwZSBwYXRoXG5cbiAgdmFyIGZpZWxkUGF0aEluZGV4QnlUeXBlTmFtZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHJldHVybiBkZXRlY3RDeWNsZVJlY3Vyc2l2ZTsgLy8gVGhpcyBkb2VzIGEgc3RyYWlnaHQtZm9yd2FyZCBERlMgdG8gZmluZCBjeWNsZXMuXG4gIC8vIEl0IGRvZXMgbm90IHRlcm1pbmF0ZSB3aGVuIGEgY3ljbGUgd2FzIGZvdW5kIGJ1dCBjb250aW51ZXMgdG8gZXhwbG9yZVxuICAvLyB0aGUgZ3JhcGggdG8gZmluZCBhbGwgcG9zc2libGUgY3ljbGVzLlxuXG4gIGZ1bmN0aW9uIGRldGVjdEN5Y2xlUmVjdXJzaXZlKGlucHV0T2JqKSB7XG4gICAgaWYgKHZpc2l0ZWRUeXBlc1tpbnB1dE9iai5uYW1lXSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZpc2l0ZWRUeXBlc1tpbnB1dE9iai5uYW1lXSA9IHRydWU7XG4gICAgZmllbGRQYXRoSW5kZXhCeVR5cGVOYW1lW2lucHV0T2JqLm5hbWVdID0gZmllbGRQYXRoLmxlbmd0aDtcbiAgICB2YXIgZmllbGRzID0gb2JqZWN0VmFsdWVzKGlucHV0T2JqLmdldEZpZWxkcygpKTtcblxuICAgIGZvciAodmFyIF9pMzAgPSAwOyBfaTMwIDwgZmllbGRzLmxlbmd0aDsgX2kzMCsrKSB7XG4gICAgICB2YXIgZmllbGQgPSBmaWVsZHNbX2kzMF07XG5cbiAgICAgIGlmIChpc05vbk51bGxUeXBlKGZpZWxkLnR5cGUpICYmIGlzSW5wdXRPYmplY3RUeXBlKGZpZWxkLnR5cGUub2ZUeXBlKSkge1xuICAgICAgICB2YXIgZmllbGRUeXBlID0gZmllbGQudHlwZS5vZlR5cGU7XG4gICAgICAgIHZhciBjeWNsZUluZGV4ID0gZmllbGRQYXRoSW5kZXhCeVR5cGVOYW1lW2ZpZWxkVHlwZS5uYW1lXTtcbiAgICAgICAgZmllbGRQYXRoLnB1c2goZmllbGQpO1xuXG4gICAgICAgIGlmIChjeWNsZUluZGV4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBkZXRlY3RDeWNsZVJlY3Vyc2l2ZShmaWVsZFR5cGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBjeWNsZVBhdGggPSBmaWVsZFBhdGguc2xpY2UoY3ljbGVJbmRleCk7XG4gICAgICAgICAgdmFyIHBhdGhTdHIgPSBjeWNsZVBhdGgubWFwKGZ1bmN0aW9uIChmaWVsZE9iaikge1xuICAgICAgICAgICAgcmV0dXJuIGZpZWxkT2JqLm5hbWU7XG4gICAgICAgICAgfSkuam9pbignLicpO1xuICAgICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXCJDYW5ub3QgcmVmZXJlbmNlIElucHV0IE9iamVjdCBcXFwiXCIuY29uY2F0KGZpZWxkVHlwZS5uYW1lLCBcIlxcXCIgd2l0aGluIGl0c2VsZiB0aHJvdWdoIGEgc2VyaWVzIG9mIG5vbi1udWxsIGZpZWxkczogXFxcIlwiKS5jb25jYXQocGF0aFN0ciwgXCJcXFwiLlwiKSwgY3ljbGVQYXRoLm1hcChmdW5jdGlvbiAoZmllbGRPYmopIHtcbiAgICAgICAgICAgIHJldHVybiBmaWVsZE9iai5hc3ROb2RlO1xuICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZpZWxkUGF0aC5wb3AoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmaWVsZFBhdGhJbmRleEJ5VHlwZU5hbWVbaW5wdXRPYmoubmFtZV0gPSB1bmRlZmluZWQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0QWxsTm9kZXMob2JqZWN0KSB7XG4gIHZhciBhc3ROb2RlID0gb2JqZWN0LmFzdE5vZGUsXG4gICAgICBleHRlbnNpb25BU1ROb2RlcyA9IG9iamVjdC5leHRlbnNpb25BU1ROb2RlcztcbiAgcmV0dXJuIGFzdE5vZGUgPyBleHRlbnNpb25BU1ROb2RlcyA/IFthc3ROb2RlXS5jb25jYXQoZXh0ZW5zaW9uQVNUTm9kZXMpIDogW2FzdE5vZGVdIDogZXh0ZW5zaW9uQVNUTm9kZXMgIT09IG51bGwgJiYgZXh0ZW5zaW9uQVNUTm9kZXMgIT09IHZvaWQgMCA/IGV4dGVuc2lvbkFTVE5vZGVzIDogW107XG59XG5cbmZ1bmN0aW9uIGdldEFsbFN1Yk5vZGVzKG9iamVjdCwgZ2V0dGVyKSB7XG4gIHZhciBzdWJOb2RlcyA9IFtdO1xuXG4gIGZvciAodmFyIF9pMzIgPSAwLCBfZ2V0QWxsTm9kZXMyID0gZ2V0QWxsTm9kZXMob2JqZWN0KTsgX2kzMiA8IF9nZXRBbGxOb2RlczIubGVuZ3RoOyBfaTMyKyspIHtcbiAgICB2YXIgX2dldHRlcjtcblxuICAgIHZhciBub2RlID0gX2dldEFsbE5vZGVzMltfaTMyXTtcbiAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAoU2VlOiAnaHR0cHM6Ly9naXRodWIuY29tL2dyYXBocWwvZ3JhcGhxbC1qcy9pc3N1ZXMvMjIwMycpXG4gICAgc3ViTm9kZXMgPSBzdWJOb2Rlcy5jb25jYXQoKF9nZXR0ZXIgPSBnZXR0ZXIobm9kZSkpICE9PSBudWxsICYmIF9nZXR0ZXIgIT09IHZvaWQgMCA/IF9nZXR0ZXIgOiBbXSk7XG4gIH1cblxuICByZXR1cm4gc3ViTm9kZXM7XG59XG5cbmZ1bmN0aW9uIGdldEFsbEltcGxlbWVudHNJbnRlcmZhY2VOb2Rlcyh0eXBlLCBpZmFjZSkge1xuICByZXR1cm4gZ2V0QWxsU3ViTm9kZXModHlwZSwgZnVuY3Rpb24gKHR5cGVOb2RlKSB7XG4gICAgcmV0dXJuIHR5cGVOb2RlLmludGVyZmFjZXM7XG4gIH0pLmZpbHRlcihmdW5jdGlvbiAoaWZhY2VOb2RlKSB7XG4gICAgcmV0dXJuIGlmYWNlTm9kZS5uYW1lLnZhbHVlID09PSBpZmFjZS5uYW1lO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0VW5pb25NZW1iZXJUeXBlTm9kZXModW5pb24sIHR5cGVOYW1lKSB7XG4gIHJldHVybiBnZXRBbGxTdWJOb2Rlcyh1bmlvbiwgZnVuY3Rpb24gKHVuaW9uTm9kZSkge1xuICAgIHJldHVybiB1bmlvbk5vZGUudHlwZXM7XG4gIH0pLmZpbHRlcihmdW5jdGlvbiAodHlwZU5vZGUpIHtcbiAgICByZXR1cm4gdHlwZU5vZGUubmFtZS52YWx1ZSA9PT0gdHlwZU5hbWU7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBnZXREZXByZWNhdGVkRGlyZWN0aXZlTm9kZShkZWZpbml0aW9uTm9kZSkge1xuICB2YXIgX2RlZmluaXRpb25Ob2RlJGRpcmVjO1xuXG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0IChTZWU6ICdodHRwczovL2dpdGh1Yi5jb20vZ3JhcGhxbC9ncmFwaHFsLWpzL2lzc3Vlcy8yMjAzJylcbiAgcmV0dXJuIGRlZmluaXRpb25Ob2RlID09PSBudWxsIHx8IGRlZmluaXRpb25Ob2RlID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX2RlZmluaXRpb25Ob2RlJGRpcmVjID0gZGVmaW5pdGlvbk5vZGUuZGlyZWN0aXZlcykgPT09IG51bGwgfHwgX2RlZmluaXRpb25Ob2RlJGRpcmVjID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZGVmaW5pdGlvbk5vZGUkZGlyZWMuZmluZChmdW5jdGlvbiAobm9kZSkge1xuICAgIHJldHVybiBub2RlLm5hbWUudmFsdWUgPT09IEdyYXBoUUxEZXByZWNhdGVkRGlyZWN0aXZlLm5hbWU7XG4gIH0pO1xufVxuIiwiaW1wb3J0IGZpbmQgZnJvbSBcIi4uL3BvbHlmaWxscy9maW5kLm1qc1wiO1xuaW1wb3J0IHsgS2luZCB9IGZyb20gXCIuLi9sYW5ndWFnZS9raW5kcy5tanNcIjtcbmltcG9ydCB7IGlzTm9kZSB9IGZyb20gXCIuLi9sYW5ndWFnZS9hc3QubWpzXCI7XG5pbXBvcnQgeyBnZXRWaXNpdEZuIH0gZnJvbSBcIi4uL2xhbmd1YWdlL3Zpc2l0b3IubWpzXCI7XG5pbXBvcnQgeyBpc09iamVjdFR5cGUsIGlzSW50ZXJmYWNlVHlwZSwgaXNFbnVtVHlwZSwgaXNJbnB1dE9iamVjdFR5cGUsIGlzTGlzdFR5cGUsIGlzQ29tcG9zaXRlVHlwZSwgaXNJbnB1dFR5cGUsIGlzT3V0cHV0VHlwZSwgZ2V0TnVsbGFibGVUeXBlLCBnZXROYW1lZFR5cGUgfSBmcm9tIFwiLi4vdHlwZS9kZWZpbml0aW9uLm1qc1wiO1xuaW1wb3J0IHsgU2NoZW1hTWV0YUZpZWxkRGVmLCBUeXBlTWV0YUZpZWxkRGVmLCBUeXBlTmFtZU1ldGFGaWVsZERlZiB9IGZyb20gXCIuLi90eXBlL2ludHJvc3BlY3Rpb24ubWpzXCI7XG5pbXBvcnQgeyB0eXBlRnJvbUFTVCB9IGZyb20gXCIuL3R5cGVGcm9tQVNULm1qc1wiO1xuLyoqXG4gKiBUeXBlSW5mbyBpcyBhIHV0aWxpdHkgY2xhc3Mgd2hpY2gsIGdpdmVuIGEgR3JhcGhRTCBzY2hlbWEsIGNhbiBrZWVwIHRyYWNrXG4gKiBvZiB0aGUgY3VycmVudCBmaWVsZCBhbmQgdHlwZSBkZWZpbml0aW9ucyBhdCBhbnkgcG9pbnQgaW4gYSBHcmFwaFFMIGRvY3VtZW50XG4gKiBBU1QgZHVyaW5nIGEgcmVjdXJzaXZlIGRlc2NlbnQgYnkgY2FsbGluZyBgZW50ZXIobm9kZSlgIGFuZCBgbGVhdmUobm9kZSlgLlxuICovXG5cbmV4cG9ydCB2YXIgVHlwZUluZm8gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBUeXBlSW5mbyhzY2hlbWEsIC8vIE5PVEU6IHRoaXMgZXhwZXJpbWVudGFsIG9wdGlvbmFsIHNlY29uZCBwYXJhbWV0ZXIgaXMgb25seSBuZWVkZWQgaW4gb3JkZXJcbiAgLy8gdG8gc3VwcG9ydCBub24tc3BlYy1jb21wbGlhbnQgY29kZSBiYXNlcy4gWW91IHNob3VsZCBuZXZlciBuZWVkIHRvIHVzZSBpdC5cbiAgLy8gSXQgbWF5IGRpc2FwcGVhciBpbiB0aGUgZnV0dXJlLlxuICBnZXRGaWVsZERlZkZuLCAvLyBJbml0aWFsIHR5cGUgbWF5IGJlIHByb3ZpZGVkIGluIHJhcmUgY2FzZXMgdG8gZmFjaWxpdGF0ZSB0cmF2ZXJzYWxzXG4gIC8vIGJlZ2lubmluZyBzb21ld2hlcmUgb3RoZXIgdGhhbiBkb2N1bWVudHMuXG4gIGluaXRpYWxUeXBlKSB7XG4gICAgdGhpcy5fc2NoZW1hID0gc2NoZW1hO1xuICAgIHRoaXMuX3R5cGVTdGFjayA9IFtdO1xuICAgIHRoaXMuX3BhcmVudFR5cGVTdGFjayA9IFtdO1xuICAgIHRoaXMuX2lucHV0VHlwZVN0YWNrID0gW107XG4gICAgdGhpcy5fZmllbGREZWZTdGFjayA9IFtdO1xuICAgIHRoaXMuX2RlZmF1bHRWYWx1ZVN0YWNrID0gW107XG4gICAgdGhpcy5fZGlyZWN0aXZlID0gbnVsbDtcbiAgICB0aGlzLl9hcmd1bWVudCA9IG51bGw7XG4gICAgdGhpcy5fZW51bVZhbHVlID0gbnVsbDtcbiAgICB0aGlzLl9nZXRGaWVsZERlZiA9IGdldEZpZWxkRGVmRm4gIT09IG51bGwgJiYgZ2V0RmllbGREZWZGbiAhPT0gdm9pZCAwID8gZ2V0RmllbGREZWZGbiA6IGdldEZpZWxkRGVmO1xuXG4gICAgaWYgKGluaXRpYWxUeXBlKSB7XG4gICAgICBpZiAoaXNJbnB1dFR5cGUoaW5pdGlhbFR5cGUpKSB7XG4gICAgICAgIHRoaXMuX2lucHV0VHlwZVN0YWNrLnB1c2goaW5pdGlhbFR5cGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNDb21wb3NpdGVUeXBlKGluaXRpYWxUeXBlKSkge1xuICAgICAgICB0aGlzLl9wYXJlbnRUeXBlU3RhY2sucHVzaChpbml0aWFsVHlwZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc091dHB1dFR5cGUoaW5pdGlhbFR5cGUpKSB7XG4gICAgICAgIHRoaXMuX3R5cGVTdGFjay5wdXNoKGluaXRpYWxUeXBlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgX3Byb3RvID0gVHlwZUluZm8ucHJvdG90eXBlO1xuXG4gIF9wcm90by5nZXRUeXBlID0gZnVuY3Rpb24gZ2V0VHlwZSgpIHtcbiAgICBpZiAodGhpcy5fdHlwZVN0YWNrLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiB0aGlzLl90eXBlU3RhY2tbdGhpcy5fdHlwZVN0YWNrLmxlbmd0aCAtIDFdO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uZ2V0UGFyZW50VHlwZSA9IGZ1bmN0aW9uIGdldFBhcmVudFR5cGUoKSB7XG4gICAgaWYgKHRoaXMuX3BhcmVudFR5cGVTdGFjay5sZW5ndGggPiAwKSB7XG4gICAgICByZXR1cm4gdGhpcy5fcGFyZW50VHlwZVN0YWNrW3RoaXMuX3BhcmVudFR5cGVTdGFjay5sZW5ndGggLSAxXTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmdldElucHV0VHlwZSA9IGZ1bmN0aW9uIGdldElucHV0VHlwZSgpIHtcbiAgICBpZiAodGhpcy5faW5wdXRUeXBlU3RhY2subGVuZ3RoID4gMCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2lucHV0VHlwZVN0YWNrW3RoaXMuX2lucHV0VHlwZVN0YWNrLmxlbmd0aCAtIDFdO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uZ2V0UGFyZW50SW5wdXRUeXBlID0gZnVuY3Rpb24gZ2V0UGFyZW50SW5wdXRUeXBlKCkge1xuICAgIGlmICh0aGlzLl9pbnB1dFR5cGVTdGFjay5sZW5ndGggPiAxKSB7XG4gICAgICByZXR1cm4gdGhpcy5faW5wdXRUeXBlU3RhY2tbdGhpcy5faW5wdXRUeXBlU3RhY2subGVuZ3RoIC0gMl07XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5nZXRGaWVsZERlZiA9IGZ1bmN0aW9uIGdldEZpZWxkRGVmKCkge1xuICAgIGlmICh0aGlzLl9maWVsZERlZlN0YWNrLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiB0aGlzLl9maWVsZERlZlN0YWNrW3RoaXMuX2ZpZWxkRGVmU3RhY2subGVuZ3RoIC0gMV07XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5nZXREZWZhdWx0VmFsdWUgPSBmdW5jdGlvbiBnZXREZWZhdWx0VmFsdWUoKSB7XG4gICAgaWYgKHRoaXMuX2RlZmF1bHRWYWx1ZVN0YWNrLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiB0aGlzLl9kZWZhdWx0VmFsdWVTdGFja1t0aGlzLl9kZWZhdWx0VmFsdWVTdGFjay5sZW5ndGggLSAxXTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmdldERpcmVjdGl2ZSA9IGZ1bmN0aW9uIGdldERpcmVjdGl2ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fZGlyZWN0aXZlO1xuICB9O1xuXG4gIF9wcm90by5nZXRBcmd1bWVudCA9IGZ1bmN0aW9uIGdldEFyZ3VtZW50KCkge1xuICAgIHJldHVybiB0aGlzLl9hcmd1bWVudDtcbiAgfTtcblxuICBfcHJvdG8uZ2V0RW51bVZhbHVlID0gZnVuY3Rpb24gZ2V0RW51bVZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLl9lbnVtVmFsdWU7XG4gIH07XG5cbiAgX3Byb3RvLmVudGVyID0gZnVuY3Rpb24gZW50ZXIobm9kZSkge1xuICAgIHZhciBzY2hlbWEgPSB0aGlzLl9zY2hlbWE7IC8vIE5vdGU6IG1hbnkgb2YgdGhlIHR5cGVzIGJlbG93IGFyZSBleHBsaWNpdGx5IHR5cGVkIGFzIFwibWl4ZWRcIiB0byBkcm9wXG4gICAgLy8gYW55IGFzc3VtcHRpb25zIG9mIGEgdmFsaWQgc2NoZW1hIHRvIGVuc3VyZSBydW50aW1lIHR5cGVzIGFyZSBwcm9wZXJseVxuICAgIC8vIGNoZWNrZWQgYmVmb3JlIGNvbnRpbnVpbmcgc2luY2UgVHlwZUluZm8gaXMgdXNlZCBhcyBwYXJ0IG9mIHZhbGlkYXRpb25cbiAgICAvLyB3aGljaCBvY2N1cnMgYmVmb3JlIGd1YXJhbnRlZXMgb2Ygc2NoZW1hIGFuZCBkb2N1bWVudCB2YWxpZGl0eS5cblxuICAgIHN3aXRjaCAobm9kZS5raW5kKSB7XG4gICAgICBjYXNlIEtpbmQuU0VMRUNUSU9OX1NFVDpcbiAgICAgICAge1xuICAgICAgICAgIHZhciBuYW1lZFR5cGUgPSBnZXROYW1lZFR5cGUodGhpcy5nZXRUeXBlKCkpO1xuXG4gICAgICAgICAgdGhpcy5fcGFyZW50VHlwZVN0YWNrLnB1c2goaXNDb21wb3NpdGVUeXBlKG5hbWVkVHlwZSkgPyBuYW1lZFR5cGUgOiB1bmRlZmluZWQpO1xuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgY2FzZSBLaW5kLkZJRUxEOlxuICAgICAgICB7XG4gICAgICAgICAgdmFyIHBhcmVudFR5cGUgPSB0aGlzLmdldFBhcmVudFR5cGUoKTtcbiAgICAgICAgICB2YXIgZmllbGREZWY7XG4gICAgICAgICAgdmFyIGZpZWxkVHlwZTtcblxuICAgICAgICAgIGlmIChwYXJlbnRUeXBlKSB7XG4gICAgICAgICAgICBmaWVsZERlZiA9IHRoaXMuX2dldEZpZWxkRGVmKHNjaGVtYSwgcGFyZW50VHlwZSwgbm9kZSk7XG5cbiAgICAgICAgICAgIGlmIChmaWVsZERlZikge1xuICAgICAgICAgICAgICBmaWVsZFR5cGUgPSBmaWVsZERlZi50eXBlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMuX2ZpZWxkRGVmU3RhY2sucHVzaChmaWVsZERlZik7XG5cbiAgICAgICAgICB0aGlzLl90eXBlU3RhY2sucHVzaChpc091dHB1dFR5cGUoZmllbGRUeXBlKSA/IGZpZWxkVHlwZSA6IHVuZGVmaW5lZCk7XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICBjYXNlIEtpbmQuRElSRUNUSVZFOlxuICAgICAgICB0aGlzLl9kaXJlY3RpdmUgPSBzY2hlbWEuZ2V0RGlyZWN0aXZlKG5vZGUubmFtZS52YWx1ZSk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIEtpbmQuT1BFUkFUSU9OX0RFRklOSVRJT046XG4gICAgICAgIHtcbiAgICAgICAgICB2YXIgdHlwZTtcblxuICAgICAgICAgIHN3aXRjaCAobm9kZS5vcGVyYXRpb24pIHtcbiAgICAgICAgICAgIGNhc2UgJ3F1ZXJ5JzpcbiAgICAgICAgICAgICAgdHlwZSA9IHNjaGVtYS5nZXRRdWVyeVR5cGUoKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ211dGF0aW9uJzpcbiAgICAgICAgICAgICAgdHlwZSA9IHNjaGVtYS5nZXRNdXRhdGlvblR5cGUoKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ3N1YnNjcmlwdGlvbic6XG4gICAgICAgICAgICAgIHR5cGUgPSBzY2hlbWEuZ2V0U3Vic2NyaXB0aW9uVHlwZSgpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLl90eXBlU3RhY2sucHVzaChpc09iamVjdFR5cGUodHlwZSkgPyB0eXBlIDogdW5kZWZpbmVkKTtcblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgIGNhc2UgS2luZC5JTkxJTkVfRlJBR01FTlQ6XG4gICAgICBjYXNlIEtpbmQuRlJBR01FTlRfREVGSU5JVElPTjpcbiAgICAgICAge1xuICAgICAgICAgIHZhciB0eXBlQ29uZGl0aW9uQVNUID0gbm9kZS50eXBlQ29uZGl0aW9uO1xuICAgICAgICAgIHZhciBvdXRwdXRUeXBlID0gdHlwZUNvbmRpdGlvbkFTVCA/IHR5cGVGcm9tQVNUKHNjaGVtYSwgdHlwZUNvbmRpdGlvbkFTVCkgOiBnZXROYW1lZFR5cGUodGhpcy5nZXRUeXBlKCkpO1xuXG4gICAgICAgICAgdGhpcy5fdHlwZVN0YWNrLnB1c2goaXNPdXRwdXRUeXBlKG91dHB1dFR5cGUpID8gb3V0cHV0VHlwZSA6IHVuZGVmaW5lZCk7XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICBjYXNlIEtpbmQuVkFSSUFCTEVfREVGSU5JVElPTjpcbiAgICAgICAge1xuICAgICAgICAgIHZhciBpbnB1dFR5cGUgPSB0eXBlRnJvbUFTVChzY2hlbWEsIG5vZGUudHlwZSk7XG5cbiAgICAgICAgICB0aGlzLl9pbnB1dFR5cGVTdGFjay5wdXNoKGlzSW5wdXRUeXBlKGlucHV0VHlwZSkgPyBpbnB1dFR5cGUgOiB1bmRlZmluZWQpO1xuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgY2FzZSBLaW5kLkFSR1VNRU5UOlxuICAgICAgICB7XG4gICAgICAgICAgdmFyIF90aGlzJGdldERpcmVjdGl2ZTtcblxuICAgICAgICAgIHZhciBhcmdEZWY7XG4gICAgICAgICAgdmFyIGFyZ1R5cGU7XG4gICAgICAgICAgdmFyIGZpZWxkT3JEaXJlY3RpdmUgPSAoX3RoaXMkZ2V0RGlyZWN0aXZlID0gdGhpcy5nZXREaXJlY3RpdmUoKSkgIT09IG51bGwgJiYgX3RoaXMkZ2V0RGlyZWN0aXZlICE9PSB2b2lkIDAgPyBfdGhpcyRnZXREaXJlY3RpdmUgOiB0aGlzLmdldEZpZWxkRGVmKCk7XG5cbiAgICAgICAgICBpZiAoZmllbGRPckRpcmVjdGl2ZSkge1xuICAgICAgICAgICAgYXJnRGVmID0gZmluZChmaWVsZE9yRGlyZWN0aXZlLmFyZ3MsIGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGFyZy5uYW1lID09PSBub2RlLm5hbWUudmFsdWU7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKGFyZ0RlZikge1xuICAgICAgICAgICAgICBhcmdUeXBlID0gYXJnRGVmLnR5cGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5fYXJndW1lbnQgPSBhcmdEZWY7XG5cbiAgICAgICAgICB0aGlzLl9kZWZhdWx0VmFsdWVTdGFjay5wdXNoKGFyZ0RlZiA/IGFyZ0RlZi5kZWZhdWx0VmFsdWUgOiB1bmRlZmluZWQpO1xuXG4gICAgICAgICAgdGhpcy5faW5wdXRUeXBlU3RhY2sucHVzaChpc0lucHV0VHlwZShhcmdUeXBlKSA/IGFyZ1R5cGUgOiB1bmRlZmluZWQpO1xuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgY2FzZSBLaW5kLkxJU1Q6XG4gICAgICAgIHtcbiAgICAgICAgICB2YXIgbGlzdFR5cGUgPSBnZXROdWxsYWJsZVR5cGUodGhpcy5nZXRJbnB1dFR5cGUoKSk7XG4gICAgICAgICAgdmFyIGl0ZW1UeXBlID0gaXNMaXN0VHlwZShsaXN0VHlwZSkgPyBsaXN0VHlwZS5vZlR5cGUgOiBsaXN0VHlwZTsgLy8gTGlzdCBwb3NpdGlvbnMgbmV2ZXIgaGF2ZSBhIGRlZmF1bHQgdmFsdWUuXG5cbiAgICAgICAgICB0aGlzLl9kZWZhdWx0VmFsdWVTdGFjay5wdXNoKHVuZGVmaW5lZCk7XG5cbiAgICAgICAgICB0aGlzLl9pbnB1dFR5cGVTdGFjay5wdXNoKGlzSW5wdXRUeXBlKGl0ZW1UeXBlKSA/IGl0ZW1UeXBlIDogdW5kZWZpbmVkKTtcblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgIGNhc2UgS2luZC5PQkpFQ1RfRklFTEQ6XG4gICAgICAgIHtcbiAgICAgICAgICB2YXIgb2JqZWN0VHlwZSA9IGdldE5hbWVkVHlwZSh0aGlzLmdldElucHV0VHlwZSgpKTtcbiAgICAgICAgICB2YXIgaW5wdXRGaWVsZFR5cGU7XG4gICAgICAgICAgdmFyIGlucHV0RmllbGQ7XG5cbiAgICAgICAgICBpZiAoaXNJbnB1dE9iamVjdFR5cGUob2JqZWN0VHlwZSkpIHtcbiAgICAgICAgICAgIGlucHV0RmllbGQgPSBvYmplY3RUeXBlLmdldEZpZWxkcygpW25vZGUubmFtZS52YWx1ZV07XG5cbiAgICAgICAgICAgIGlmIChpbnB1dEZpZWxkKSB7XG4gICAgICAgICAgICAgIGlucHV0RmllbGRUeXBlID0gaW5wdXRGaWVsZC50eXBlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMuX2RlZmF1bHRWYWx1ZVN0YWNrLnB1c2goaW5wdXRGaWVsZCA/IGlucHV0RmllbGQuZGVmYXVsdFZhbHVlIDogdW5kZWZpbmVkKTtcblxuICAgICAgICAgIHRoaXMuX2lucHV0VHlwZVN0YWNrLnB1c2goaXNJbnB1dFR5cGUoaW5wdXRGaWVsZFR5cGUpID8gaW5wdXRGaWVsZFR5cGUgOiB1bmRlZmluZWQpO1xuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgY2FzZSBLaW5kLkVOVU06XG4gICAgICAgIHtcbiAgICAgICAgICB2YXIgZW51bVR5cGUgPSBnZXROYW1lZFR5cGUodGhpcy5nZXRJbnB1dFR5cGUoKSk7XG4gICAgICAgICAgdmFyIGVudW1WYWx1ZTtcblxuICAgICAgICAgIGlmIChpc0VudW1UeXBlKGVudW1UeXBlKSkge1xuICAgICAgICAgICAgZW51bVZhbHVlID0gZW51bVR5cGUuZ2V0VmFsdWUobm9kZS52YWx1ZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5fZW51bVZhbHVlID0gZW51bVZhbHVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5sZWF2ZSA9IGZ1bmN0aW9uIGxlYXZlKG5vZGUpIHtcbiAgICBzd2l0Y2ggKG5vZGUua2luZCkge1xuICAgICAgY2FzZSBLaW5kLlNFTEVDVElPTl9TRVQ6XG4gICAgICAgIHRoaXMuX3BhcmVudFR5cGVTdGFjay5wb3AoKTtcblxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBLaW5kLkZJRUxEOlxuICAgICAgICB0aGlzLl9maWVsZERlZlN0YWNrLnBvcCgpO1xuXG4gICAgICAgIHRoaXMuX3R5cGVTdGFjay5wb3AoKTtcblxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBLaW5kLkRJUkVDVElWRTpcbiAgICAgICAgdGhpcy5fZGlyZWN0aXZlID0gbnVsbDtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgS2luZC5PUEVSQVRJT05fREVGSU5JVElPTjpcbiAgICAgIGNhc2UgS2luZC5JTkxJTkVfRlJBR01FTlQ6XG4gICAgICBjYXNlIEtpbmQuRlJBR01FTlRfREVGSU5JVElPTjpcbiAgICAgICAgdGhpcy5fdHlwZVN0YWNrLnBvcCgpO1xuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIEtpbmQuVkFSSUFCTEVfREVGSU5JVElPTjpcbiAgICAgICAgdGhpcy5faW5wdXRUeXBlU3RhY2sucG9wKCk7XG5cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgS2luZC5BUkdVTUVOVDpcbiAgICAgICAgdGhpcy5fYXJndW1lbnQgPSBudWxsO1xuXG4gICAgICAgIHRoaXMuX2RlZmF1bHRWYWx1ZVN0YWNrLnBvcCgpO1xuXG4gICAgICAgIHRoaXMuX2lucHV0VHlwZVN0YWNrLnBvcCgpO1xuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIEtpbmQuTElTVDpcbiAgICAgIGNhc2UgS2luZC5PQkpFQ1RfRklFTEQ6XG4gICAgICAgIHRoaXMuX2RlZmF1bHRWYWx1ZVN0YWNrLnBvcCgpO1xuXG4gICAgICAgIHRoaXMuX2lucHV0VHlwZVN0YWNrLnBvcCgpO1xuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIEtpbmQuRU5VTTpcbiAgICAgICAgdGhpcy5fZW51bVZhbHVlID0gbnVsbDtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBUeXBlSW5mbztcbn0oKTtcbi8qKlxuICogTm90IGV4YWN0bHkgdGhlIHNhbWUgYXMgdGhlIGV4ZWN1dG9yJ3MgZGVmaW5pdGlvbiBvZiBnZXRGaWVsZERlZiwgaW4gdGhpc1xuICogc3RhdGljYWxseSBldmFsdWF0ZWQgZW52aXJvbm1lbnQgd2UgZG8gbm90IGFsd2F5cyBoYXZlIGFuIE9iamVjdCB0eXBlLFxuICogYW5kIG5lZWQgdG8gaGFuZGxlIEludGVyZmFjZSBhbmQgVW5pb24gdHlwZXMuXG4gKi9cblxuZnVuY3Rpb24gZ2V0RmllbGREZWYoc2NoZW1hLCBwYXJlbnRUeXBlLCBmaWVsZE5vZGUpIHtcbiAgdmFyIG5hbWUgPSBmaWVsZE5vZGUubmFtZS52YWx1ZTtcblxuICBpZiAobmFtZSA9PT0gU2NoZW1hTWV0YUZpZWxkRGVmLm5hbWUgJiYgc2NoZW1hLmdldFF1ZXJ5VHlwZSgpID09PSBwYXJlbnRUeXBlKSB7XG4gICAgcmV0dXJuIFNjaGVtYU1ldGFGaWVsZERlZjtcbiAgfVxuXG4gIGlmIChuYW1lID09PSBUeXBlTWV0YUZpZWxkRGVmLm5hbWUgJiYgc2NoZW1hLmdldFF1ZXJ5VHlwZSgpID09PSBwYXJlbnRUeXBlKSB7XG4gICAgcmV0dXJuIFR5cGVNZXRhRmllbGREZWY7XG4gIH1cblxuICBpZiAobmFtZSA9PT0gVHlwZU5hbWVNZXRhRmllbGREZWYubmFtZSAmJiBpc0NvbXBvc2l0ZVR5cGUocGFyZW50VHlwZSkpIHtcbiAgICByZXR1cm4gVHlwZU5hbWVNZXRhRmllbGREZWY7XG4gIH1cblxuICBpZiAoaXNPYmplY3RUeXBlKHBhcmVudFR5cGUpIHx8IGlzSW50ZXJmYWNlVHlwZShwYXJlbnRUeXBlKSkge1xuICAgIHJldHVybiBwYXJlbnRUeXBlLmdldEZpZWxkcygpW25hbWVdO1xuICB9XG59XG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgdmlzaXRvciBpbnN0YW5jZSB3aGljaCBtYWludGFpbnMgYSBwcm92aWRlZCBUeXBlSW5mbyBpbnN0YW5jZVxuICogYWxvbmcgd2l0aCB2aXNpdGluZyB2aXNpdG9yLlxuICovXG5cblxuZXhwb3J0IGZ1bmN0aW9uIHZpc2l0V2l0aFR5cGVJbmZvKHR5cGVJbmZvLCB2aXNpdG9yKSB7XG4gIHJldHVybiB7XG4gICAgZW50ZXI6IGZ1bmN0aW9uIGVudGVyKG5vZGUpIHtcbiAgICAgIHR5cGVJbmZvLmVudGVyKG5vZGUpO1xuICAgICAgdmFyIGZuID0gZ2V0VmlzaXRGbih2aXNpdG9yLCBub2RlLmtpbmQsXG4gICAgICAvKiBpc0xlYXZpbmcgKi9cbiAgICAgIGZhbHNlKTtcblxuICAgICAgaWYgKGZuKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBmbi5hcHBseSh2aXNpdG9yLCBhcmd1bWVudHMpO1xuXG4gICAgICAgIGlmIChyZXN1bHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHR5cGVJbmZvLmxlYXZlKG5vZGUpO1xuXG4gICAgICAgICAgaWYgKGlzTm9kZShyZXN1bHQpKSB7XG4gICAgICAgICAgICB0eXBlSW5mby5lbnRlcihyZXN1bHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgfSxcbiAgICBsZWF2ZTogZnVuY3Rpb24gbGVhdmUobm9kZSkge1xuICAgICAgdmFyIGZuID0gZ2V0VmlzaXRGbih2aXNpdG9yLCBub2RlLmtpbmQsXG4gICAgICAvKiBpc0xlYXZpbmcgKi9cbiAgICAgIHRydWUpO1xuICAgICAgdmFyIHJlc3VsdDtcblxuICAgICAgaWYgKGZuKSB7XG4gICAgICAgIHJlc3VsdCA9IGZuLmFwcGx5KHZpc2l0b3IsIGFyZ3VtZW50cyk7XG4gICAgICB9XG5cbiAgICAgIHR5cGVJbmZvLmxlYXZlKG5vZGUpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gIH07XG59XG4iLCJpbXBvcnQgZGV2QXNzZXJ0IGZyb20gXCIuLi9qc3V0aWxzL2RldkFzc2VydC5tanNcIjtcbmltcG9ydCB7IEdyYXBoUUxFcnJvciB9IGZyb20gXCIuLi9lcnJvci9HcmFwaFFMRXJyb3IubWpzXCI7XG52YXIgTkFNRV9SWCA9IC9eW19hLXpBLVpdW19hLXpBLVowLTldKiQvO1xuLyoqXG4gKiBVcGhvbGRzIHRoZSBzcGVjIHJ1bGVzIGFib3V0IG5hbWluZy5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0VmFsaWROYW1lKG5hbWUpIHtcbiAgdmFyIGVycm9yID0gaXNWYWxpZE5hbWVFcnJvcihuYW1lKTtcblxuICBpZiAoZXJyb3IpIHtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxuXG4gIHJldHVybiBuYW1lO1xufVxuLyoqXG4gKiBSZXR1cm5zIGFuIEVycm9yIGlmIGEgbmFtZSBpcyBpbnZhbGlkLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkTmFtZUVycm9yKG5hbWUpIHtcbiAgdHlwZW9mIG5hbWUgPT09ICdzdHJpbmcnIHx8IGRldkFzc2VydCgwLCAnRXhwZWN0ZWQgbmFtZSB0byBiZSBhIHN0cmluZy4nKTtcblxuICBpZiAobmFtZS5sZW5ndGggPiAxICYmIG5hbWVbMF0gPT09ICdfJyAmJiBuYW1lWzFdID09PSAnXycpIHtcbiAgICByZXR1cm4gbmV3IEdyYXBoUUxFcnJvcihcIk5hbWUgXFxcIlwiLmNvbmNhdChuYW1lLCBcIlxcXCIgbXVzdCBub3QgYmVnaW4gd2l0aCBcXFwiX19cXFwiLCB3aGljaCBpcyByZXNlcnZlZCBieSBHcmFwaFFMIGludHJvc3BlY3Rpb24uXCIpKTtcbiAgfVxuXG4gIGlmICghTkFNRV9SWC50ZXN0KG5hbWUpKSB7XG4gICAgcmV0dXJuIG5ldyBHcmFwaFFMRXJyb3IoXCJOYW1lcyBtdXN0IG1hdGNoIC9eW19hLXpBLVpdW19hLXpBLVowLTldKiQvIGJ1dCBcXFwiXCIuY29uY2F0KG5hbWUsIFwiXFxcIiBkb2VzIG5vdC5cIikpO1xuICB9XG59XG4iLCJpbXBvcnQgaXNGaW5pdGUgZnJvbSBcIi4uL3BvbHlmaWxscy9pc0Zpbml0ZS5tanNcIjtcbmltcG9ydCBvYmplY3RWYWx1ZXMgZnJvbSBcIi4uL3BvbHlmaWxscy9vYmplY3RWYWx1ZXMubWpzXCI7XG5pbXBvcnQgaW5zcGVjdCBmcm9tIFwiLi4vanN1dGlscy9pbnNwZWN0Lm1qc1wiO1xuaW1wb3J0IGludmFyaWFudCBmcm9tIFwiLi4vanN1dGlscy9pbnZhcmlhbnQubWpzXCI7XG5pbXBvcnQgaXNPYmplY3RMaWtlIGZyb20gXCIuLi9qc3V0aWxzL2lzT2JqZWN0TGlrZS5tanNcIjtcbmltcG9ydCBzYWZlQXJyYXlGcm9tIGZyb20gXCIuLi9qc3V0aWxzL3NhZmVBcnJheUZyb20ubWpzXCI7XG5pbXBvcnQgeyBLaW5kIH0gZnJvbSBcIi4uL2xhbmd1YWdlL2tpbmRzLm1qc1wiO1xuaW1wb3J0IHsgR3JhcGhRTElEIH0gZnJvbSBcIi4uL3R5cGUvc2NhbGFycy5tanNcIjtcbmltcG9ydCB7IGlzTGVhZlR5cGUsIGlzRW51bVR5cGUsIGlzSW5wdXRPYmplY3RUeXBlLCBpc0xpc3RUeXBlLCBpc05vbk51bGxUeXBlIH0gZnJvbSBcIi4uL3R5cGUvZGVmaW5pdGlvbi5tanNcIjtcbi8qKlxuICogUHJvZHVjZXMgYSBHcmFwaFFMIFZhbHVlIEFTVCBnaXZlbiBhIEphdmFTY3JpcHQgb2JqZWN0LlxuICogRnVuY3Rpb24gd2lsbCBtYXRjaCBKYXZhU2NyaXB0L0pTT04gdmFsdWVzIHRvIEdyYXBoUUwgQVNUIHNjaGVtYSBmb3JtYXRcbiAqIGJ5IHVzaW5nIHN1Z2dlc3RlZCBHcmFwaFFMSW5wdXRUeXBlLiBGb3IgZXhhbXBsZTpcbiAqXG4gKiAgICAgYXN0RnJvbVZhbHVlKFwidmFsdWVcIiwgR3JhcGhRTFN0cmluZylcbiAqXG4gKiBBIEdyYXBoUUwgdHlwZSBtdXN0IGJlIHByb3ZpZGVkLCB3aGljaCB3aWxsIGJlIHVzZWQgdG8gaW50ZXJwcmV0IGRpZmZlcmVudFxuICogSmF2YVNjcmlwdCB2YWx1ZXMuXG4gKlxuICogfCBKU09OIFZhbHVlICAgIHwgR3JhcGhRTCBWYWx1ZSAgICAgICAgfFxuICogfCAtLS0tLS0tLS0tLS0tIHwgLS0tLS0tLS0tLS0tLS0tLS0tLS0gfFxuICogfCBPYmplY3QgICAgICAgIHwgSW5wdXQgT2JqZWN0ICAgICAgICAgfFxuICogfCBBcnJheSAgICAgICAgIHwgTGlzdCAgICAgICAgICAgICAgICAgfFxuICogfCBCb29sZWFuICAgICAgIHwgQm9vbGVhbiAgICAgICAgICAgICAgfFxuICogfCBTdHJpbmcgICAgICAgIHwgU3RyaW5nIC8gRW51bSBWYWx1ZSAgfFxuICogfCBOdW1iZXIgICAgICAgIHwgSW50IC8gRmxvYXQgICAgICAgICAgfFxuICogfCBNaXhlZCAgICAgICAgIHwgRW51bSBWYWx1ZSAgICAgICAgICAgfFxuICogfCBudWxsICAgICAgICAgIHwgTnVsbFZhbHVlICAgICAgICAgICAgfFxuICpcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gYXN0RnJvbVZhbHVlKHZhbHVlLCB0eXBlKSB7XG4gIGlmIChpc05vbk51bGxUeXBlKHR5cGUpKSB7XG4gICAgdmFyIGFzdFZhbHVlID0gYXN0RnJvbVZhbHVlKHZhbHVlLCB0eXBlLm9mVHlwZSk7XG5cbiAgICBpZiAoKGFzdFZhbHVlID09PSBudWxsIHx8IGFzdFZhbHVlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBhc3RWYWx1ZS5raW5kKSA9PT0gS2luZC5OVUxMKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gYXN0VmFsdWU7XG4gIH0gLy8gb25seSBleHBsaWNpdCBudWxsLCBub3QgdW5kZWZpbmVkLCBOYU5cblxuXG4gIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiB7XG4gICAgICBraW5kOiBLaW5kLk5VTExcbiAgICB9O1xuICB9IC8vIHVuZGVmaW5lZFxuXG5cbiAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSAvLyBDb252ZXJ0IEphdmFTY3JpcHQgYXJyYXkgdG8gR3JhcGhRTCBsaXN0LiBJZiB0aGUgR3JhcGhRTFR5cGUgaXMgYSBsaXN0LCBidXRcbiAgLy8gdGhlIHZhbHVlIGlzIG5vdCBhbiBhcnJheSwgY29udmVydCB0aGUgdmFsdWUgdXNpbmcgdGhlIGxpc3QncyBpdGVtIHR5cGUuXG5cblxuICBpZiAoaXNMaXN0VHlwZSh0eXBlKSkge1xuICAgIHZhciBpdGVtVHlwZSA9IHR5cGUub2ZUeXBlO1xuICAgIHZhciBpdGVtcyA9IHNhZmVBcnJheUZyb20odmFsdWUpO1xuXG4gICAgaWYgKGl0ZW1zICE9IG51bGwpIHtcbiAgICAgIHZhciB2YWx1ZXNOb2RlcyA9IFtdO1xuXG4gICAgICBmb3IgKHZhciBfaTIgPSAwOyBfaTIgPCBpdGVtcy5sZW5ndGg7IF9pMisrKSB7XG4gICAgICAgIHZhciBpdGVtID0gaXRlbXNbX2kyXTtcbiAgICAgICAgdmFyIGl0ZW1Ob2RlID0gYXN0RnJvbVZhbHVlKGl0ZW0sIGl0ZW1UeXBlKTtcblxuICAgICAgICBpZiAoaXRlbU5vZGUgIT0gbnVsbCkge1xuICAgICAgICAgIHZhbHVlc05vZGVzLnB1c2goaXRlbU5vZGUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGtpbmQ6IEtpbmQuTElTVCxcbiAgICAgICAgdmFsdWVzOiB2YWx1ZXNOb2Rlc1xuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXN0RnJvbVZhbHVlKHZhbHVlLCBpdGVtVHlwZSk7XG4gIH0gLy8gUG9wdWxhdGUgdGhlIGZpZWxkcyBvZiB0aGUgaW5wdXQgb2JqZWN0IGJ5IGNyZWF0aW5nIEFTVHMgZnJvbSBlYWNoIHZhbHVlXG4gIC8vIGluIHRoZSBKYXZhU2NyaXB0IG9iamVjdCBhY2NvcmRpbmcgdG8gdGhlIGZpZWxkcyBpbiB0aGUgaW5wdXQgdHlwZS5cblxuXG4gIGlmIChpc0lucHV0T2JqZWN0VHlwZSh0eXBlKSkge1xuICAgIGlmICghaXNPYmplY3RMaWtlKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIGZpZWxkTm9kZXMgPSBbXTtcblxuICAgIGZvciAodmFyIF9pNCA9IDAsIF9vYmplY3RWYWx1ZXMyID0gb2JqZWN0VmFsdWVzKHR5cGUuZ2V0RmllbGRzKCkpOyBfaTQgPCBfb2JqZWN0VmFsdWVzMi5sZW5ndGg7IF9pNCsrKSB7XG4gICAgICB2YXIgZmllbGQgPSBfb2JqZWN0VmFsdWVzMltfaTRdO1xuICAgICAgdmFyIGZpZWxkVmFsdWUgPSBhc3RGcm9tVmFsdWUodmFsdWVbZmllbGQubmFtZV0sIGZpZWxkLnR5cGUpO1xuXG4gICAgICBpZiAoZmllbGRWYWx1ZSkge1xuICAgICAgICBmaWVsZE5vZGVzLnB1c2goe1xuICAgICAgICAgIGtpbmQ6IEtpbmQuT0JKRUNUX0ZJRUxELFxuICAgICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgIGtpbmQ6IEtpbmQuTkFNRSxcbiAgICAgICAgICAgIHZhbHVlOiBmaWVsZC5uYW1lXG4gICAgICAgICAgfSxcbiAgICAgICAgICB2YWx1ZTogZmllbGRWYWx1ZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAga2luZDogS2luZC5PQkpFQ1QsXG4gICAgICBmaWVsZHM6IGZpZWxkTm9kZXNcbiAgICB9O1xuICB9IC8vIGlzdGFuYnVsIGlnbm9yZSBlbHNlIChTZWU6ICdodHRwczovL2dpdGh1Yi5jb20vZ3JhcGhxbC9ncmFwaHFsLWpzL2lzc3Vlcy8yNjE4JylcblxuXG4gIGlmIChpc0xlYWZUeXBlKHR5cGUpKSB7XG4gICAgLy8gU2luY2UgdmFsdWUgaXMgYW4gaW50ZXJuYWxseSByZXByZXNlbnRlZCB2YWx1ZSwgaXQgbXVzdCBiZSBzZXJpYWxpemVkXG4gICAgLy8gdG8gYW4gZXh0ZXJuYWxseSByZXByZXNlbnRlZCB2YWx1ZSBiZWZvcmUgY29udmVydGluZyBpbnRvIGFuIEFTVC5cbiAgICB2YXIgc2VyaWFsaXplZCA9IHR5cGUuc2VyaWFsaXplKHZhbHVlKTtcblxuICAgIGlmIChzZXJpYWxpemVkID09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0gLy8gT3RoZXJzIHNlcmlhbGl6ZSBiYXNlZCBvbiB0aGVpciBjb3JyZXNwb25kaW5nIEphdmFTY3JpcHQgc2NhbGFyIHR5cGVzLlxuXG5cbiAgICBpZiAodHlwZW9mIHNlcmlhbGl6ZWQgPT09ICdib29sZWFuJykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAga2luZDogS2luZC5CT09MRUFOLFxuICAgICAgICB2YWx1ZTogc2VyaWFsaXplZFxuICAgICAgfTtcbiAgICB9IC8vIEphdmFTY3JpcHQgbnVtYmVycyBjYW4gYmUgSW50IG9yIEZsb2F0IHZhbHVlcy5cblxuXG4gICAgaWYgKHR5cGVvZiBzZXJpYWxpemVkID09PSAnbnVtYmVyJyAmJiBpc0Zpbml0ZShzZXJpYWxpemVkKSkge1xuICAgICAgdmFyIHN0cmluZ051bSA9IFN0cmluZyhzZXJpYWxpemVkKTtcbiAgICAgIHJldHVybiBpbnRlZ2VyU3RyaW5nUmVnRXhwLnRlc3Qoc3RyaW5nTnVtKSA/IHtcbiAgICAgICAga2luZDogS2luZC5JTlQsXG4gICAgICAgIHZhbHVlOiBzdHJpbmdOdW1cbiAgICAgIH0gOiB7XG4gICAgICAgIGtpbmQ6IEtpbmQuRkxPQVQsXG4gICAgICAgIHZhbHVlOiBzdHJpbmdOdW1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBzZXJpYWxpemVkID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gRW51bSB0eXBlcyB1c2UgRW51bSBsaXRlcmFscy5cbiAgICAgIGlmIChpc0VudW1UeXBlKHR5cGUpKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAga2luZDogS2luZC5FTlVNLFxuICAgICAgICAgIHZhbHVlOiBzZXJpYWxpemVkXG4gICAgICAgIH07XG4gICAgICB9IC8vIElEIHR5cGVzIGNhbiB1c2UgSW50IGxpdGVyYWxzLlxuXG5cbiAgICAgIGlmICh0eXBlID09PSBHcmFwaFFMSUQgJiYgaW50ZWdlclN0cmluZ1JlZ0V4cC50ZXN0KHNlcmlhbGl6ZWQpKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAga2luZDogS2luZC5JTlQsXG4gICAgICAgICAgdmFsdWU6IHNlcmlhbGl6ZWRcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAga2luZDogS2luZC5TVFJJTkcsXG4gICAgICAgIHZhbHVlOiBzZXJpYWxpemVkXG4gICAgICB9O1xuICAgIH1cblxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY29udmVydCB2YWx1ZSB0byBBU1Q6IFwiLmNvbmNhdChpbnNwZWN0KHNlcmlhbGl6ZWQpLCBcIi5cIikpO1xuICB9IC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0IChOb3QgcmVhY2hhYmxlLiBBbGwgcG9zc2libGUgaW5wdXQgdHlwZXMgaGF2ZSBiZWVuIGNvbnNpZGVyZWQpXG5cblxuICBmYWxzZSB8fCBpbnZhcmlhbnQoMCwgJ1VuZXhwZWN0ZWQgaW5wdXQgdHlwZTogJyArIGluc3BlY3QodHlwZSkpO1xufVxuLyoqXG4gKiBJbnRWYWx1ZTpcbiAqICAgLSBOZWdhdGl2ZVNpZ24/IDBcbiAqICAgLSBOZWdhdGl2ZVNpZ24/IE5vblplcm9EaWdpdCAoIERpZ2l0KyApP1xuICovXG5cbnZhciBpbnRlZ2VyU3RyaW5nUmVnRXhwID0gL14tPyg/OjB8WzEtOV1bMC05XSopJC87XG4iLCJpbXBvcnQgZGV2QXNzZXJ0IGZyb20gXCIuLi9qc3V0aWxzL2RldkFzc2VydC5tanNcIjtcbmltcG9ydCB7IEtpbmQgfSBmcm9tIFwiLi4vbGFuZ3VhZ2Uva2luZHMubWpzXCI7XG5pbXBvcnQgeyBwYXJzZSB9IGZyb20gXCIuLi9sYW5ndWFnZS9wYXJzZXIubWpzXCI7XG5pbXBvcnQgeyBhc3NlcnRWYWxpZFNETCB9IGZyb20gXCIuLi92YWxpZGF0aW9uL3ZhbGlkYXRlLm1qc1wiO1xuaW1wb3J0IHsgR3JhcGhRTFNjaGVtYSB9IGZyb20gXCIuLi90eXBlL3NjaGVtYS5tanNcIjtcbmltcG9ydCB7IHNwZWNpZmllZERpcmVjdGl2ZXMgfSBmcm9tIFwiLi4vdHlwZS9kaXJlY3RpdmVzLm1qc1wiO1xuaW1wb3J0IHsgZXh0ZW5kU2NoZW1hSW1wbCB9IGZyb20gXCIuL2V4dGVuZFNjaGVtYS5tanNcIjtcblxuLyoqXG4gKiBUaGlzIHRha2VzIHRoZSBhc3Qgb2YgYSBzY2hlbWEgZG9jdW1lbnQgcHJvZHVjZWQgYnkgdGhlIHBhcnNlIGZ1bmN0aW9uIGluXG4gKiBzcmMvbGFuZ3VhZ2UvcGFyc2VyLmpzLlxuICpcbiAqIElmIG5vIHNjaGVtYSBkZWZpbml0aW9uIGlzIHByb3ZpZGVkLCB0aGVuIGl0IHdpbGwgbG9vayBmb3IgdHlwZXMgbmFtZWQgUXVlcnlcbiAqIGFuZCBNdXRhdGlvbi5cbiAqXG4gKiBHaXZlbiB0aGF0IEFTVCBpdCBjb25zdHJ1Y3RzIGEgR3JhcGhRTFNjaGVtYS4gVGhlIHJlc3VsdGluZyBzY2hlbWFcbiAqIGhhcyBubyByZXNvbHZlIG1ldGhvZHMsIHNvIGV4ZWN1dGlvbiB3aWxsIHVzZSBkZWZhdWx0IHJlc29sdmVycy5cbiAqXG4gKiBBY2NlcHRzIG9wdGlvbnMgYXMgYSBzZWNvbmQgYXJndW1lbnQ6XG4gKlxuICogICAgLSBjb21tZW50RGVzY3JpcHRpb25zOlxuICogICAgICAgIFByb3ZpZGUgdHJ1ZSB0byB1c2UgcHJlY2VkaW5nIGNvbW1lbnRzIGFzIHRoZSBkZXNjcmlwdGlvbi5cbiAqXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBidWlsZEFTVFNjaGVtYShkb2N1bWVudEFTVCwgb3B0aW9ucykge1xuICBkb2N1bWVudEFTVCAhPSBudWxsICYmIGRvY3VtZW50QVNULmtpbmQgPT09IEtpbmQuRE9DVU1FTlQgfHwgZGV2QXNzZXJ0KDAsICdNdXN0IHByb3ZpZGUgdmFsaWQgRG9jdW1lbnQgQVNULicpO1xuXG4gIGlmICgob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmFzc3VtZVZhbGlkKSAhPT0gdHJ1ZSAmJiAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmFzc3VtZVZhbGlkU0RMKSAhPT0gdHJ1ZSkge1xuICAgIGFzc2VydFZhbGlkU0RMKGRvY3VtZW50QVNUKTtcbiAgfVxuXG4gIHZhciBlbXB0eVNjaGVtYUNvbmZpZyA9IHtcbiAgICBkZXNjcmlwdGlvbjogdW5kZWZpbmVkLFxuICAgIHR5cGVzOiBbXSxcbiAgICBkaXJlY3RpdmVzOiBbXSxcbiAgICBleHRlbnNpb25zOiB1bmRlZmluZWQsXG4gICAgZXh0ZW5zaW9uQVNUTm9kZXM6IFtdLFxuICAgIGFzc3VtZVZhbGlkOiBmYWxzZVxuICB9O1xuICB2YXIgY29uZmlnID0gZXh0ZW5kU2NoZW1hSW1wbChlbXB0eVNjaGVtYUNvbmZpZywgZG9jdW1lbnRBU1QsIG9wdGlvbnMpO1xuXG4gIGlmIChjb25maWcuYXN0Tm9kZSA9PSBudWxsKSB7XG4gICAgZm9yICh2YXIgX2kyID0gMCwgX2NvbmZpZyR0eXBlczIgPSBjb25maWcudHlwZXM7IF9pMiA8IF9jb25maWckdHlwZXMyLmxlbmd0aDsgX2kyKyspIHtcbiAgICAgIHZhciB0eXBlID0gX2NvbmZpZyR0eXBlczJbX2kyXTtcblxuICAgICAgc3dpdGNoICh0eXBlLm5hbWUpIHtcbiAgICAgICAgLy8gTm90ZTogV2hpbGUgdGhpcyBjb3VsZCBtYWtlIGVhcmx5IGFzc2VydGlvbnMgdG8gZ2V0IHRoZSBjb3JyZWN0bHlcbiAgICAgICAgLy8gdHlwZWQgdmFsdWVzIGJlbG93LCB0aGF0IHdvdWxkIHRocm93IGltbWVkaWF0ZWx5IHdoaWxlIHR5cGUgc3lzdGVtXG4gICAgICAgIC8vIHZhbGlkYXRpb24gd2l0aCB2YWxpZGF0ZVNjaGVtYSgpIHdpbGwgcHJvZHVjZSBtb3JlIGFjdGlvbmFibGUgcmVzdWx0cy5cbiAgICAgICAgY2FzZSAnUXVlcnknOlxuICAgICAgICAgIGNvbmZpZy5xdWVyeSA9IHR5cGU7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnTXV0YXRpb24nOlxuICAgICAgICAgIGNvbmZpZy5tdXRhdGlvbiA9IHR5cGU7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnU3Vic2NyaXB0aW9uJzpcbiAgICAgICAgICBjb25maWcuc3Vic2NyaXB0aW9uID0gdHlwZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgZGlyZWN0aXZlcyA9IGNvbmZpZy5kaXJlY3RpdmVzOyAvLyBJZiBzcGVjaWZpZWQgZGlyZWN0aXZlcyB3ZXJlIG5vdCBleHBsaWNpdGx5IGRlY2xhcmVkLCBhZGQgdGhlbS5cblxuICB2YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcChfaTQpIHtcbiAgICB2YXIgc3RkRGlyZWN0aXZlID0gc3BlY2lmaWVkRGlyZWN0aXZlc1tfaTRdO1xuXG4gICAgaWYgKGRpcmVjdGl2ZXMuZXZlcnkoZnVuY3Rpb24gKGRpcmVjdGl2ZSkge1xuICAgICAgcmV0dXJuIGRpcmVjdGl2ZS5uYW1lICE9PSBzdGREaXJlY3RpdmUubmFtZTtcbiAgICB9KSkge1xuICAgICAgZGlyZWN0aXZlcy5wdXNoKHN0ZERpcmVjdGl2ZSk7XG4gICAgfVxuICB9O1xuXG4gIGZvciAodmFyIF9pNCA9IDA7IF9pNCA8IHNwZWNpZmllZERpcmVjdGl2ZXMubGVuZ3RoOyBfaTQrKykge1xuICAgIF9sb29wKF9pNCk7XG4gIH1cblxuICByZXR1cm4gbmV3IEdyYXBoUUxTY2hlbWEoY29uZmlnKTtcbn1cbi8qKlxuICogQSBoZWxwZXIgZnVuY3Rpb24gdG8gYnVpbGQgYSBHcmFwaFFMU2NoZW1hIGRpcmVjdGx5IGZyb20gYSBzb3VyY2VcbiAqIGRvY3VtZW50LlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBidWlsZFNjaGVtYShzb3VyY2UsIG9wdGlvbnMpIHtcbiAgdmFyIGRvY3VtZW50ID0gcGFyc2Uoc291cmNlLCB7XG4gICAgbm9Mb2NhdGlvbjogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLm5vTG9jYXRpb24sXG4gICAgYWxsb3dMZWdhY3lTRExFbXB0eUZpZWxkczogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmFsbG93TGVnYWN5U0RMRW1wdHlGaWVsZHMsXG4gICAgYWxsb3dMZWdhY3lTRExJbXBsZW1lbnRzSW50ZXJmYWNlczogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmFsbG93TGVnYWN5U0RMSW1wbGVtZW50c0ludGVyZmFjZXMsXG4gICAgZXhwZXJpbWVudGFsRnJhZ21lbnRWYXJpYWJsZXM6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5leHBlcmltZW50YWxGcmFnbWVudFZhcmlhYmxlc1xuICB9KTtcbiAgcmV0dXJuIGJ1aWxkQVNUU2NoZW1hKGRvY3VtZW50LCB7XG4gICAgY29tbWVudERlc2NyaXB0aW9uczogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmNvbW1lbnREZXNjcmlwdGlvbnMsXG4gICAgYXNzdW1lVmFsaWRTREw6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5hc3N1bWVWYWxpZFNETCxcbiAgICBhc3N1bWVWYWxpZDogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmFzc3VtZVZhbGlkXG4gIH0pO1xufVxuIiwiaW1wb3J0IG9iamVjdFZhbHVlcyBmcm9tIFwiLi4vcG9seWZpbGxzL29iamVjdFZhbHVlcy5tanNcIjtcbmltcG9ydCBpbnNwZWN0IGZyb20gXCIuLi9qc3V0aWxzL2luc3BlY3QubWpzXCI7XG5pbXBvcnQgZGV2QXNzZXJ0IGZyb20gXCIuLi9qc3V0aWxzL2RldkFzc2VydC5tanNcIjtcbmltcG9ydCBrZXlWYWxNYXAgZnJvbSBcIi4uL2pzdXRpbHMva2V5VmFsTWFwLm1qc1wiO1xuaW1wb3J0IGlzT2JqZWN0TGlrZSBmcm9tIFwiLi4vanN1dGlscy9pc09iamVjdExpa2UubWpzXCI7XG5pbXBvcnQgeyBwYXJzZVZhbHVlIH0gZnJvbSBcIi4uL2xhbmd1YWdlL3BhcnNlci5tanNcIjtcbmltcG9ydCB7IEdyYXBoUUxTY2hlbWEgfSBmcm9tIFwiLi4vdHlwZS9zY2hlbWEubWpzXCI7XG5pbXBvcnQgeyBHcmFwaFFMRGlyZWN0aXZlIH0gZnJvbSBcIi4uL3R5cGUvZGlyZWN0aXZlcy5tanNcIjtcbmltcG9ydCB7IHNwZWNpZmllZFNjYWxhclR5cGVzIH0gZnJvbSBcIi4uL3R5cGUvc2NhbGFycy5tanNcIjtcbmltcG9ydCB7IGludHJvc3BlY3Rpb25UeXBlcywgVHlwZUtpbmQgfSBmcm9tIFwiLi4vdHlwZS9pbnRyb3NwZWN0aW9uLm1qc1wiO1xuaW1wb3J0IHsgaXNJbnB1dFR5cGUsIGlzT3V0cHV0VHlwZSwgR3JhcGhRTExpc3QsIEdyYXBoUUxOb25OdWxsLCBHcmFwaFFMU2NhbGFyVHlwZSwgR3JhcGhRTE9iamVjdFR5cGUsIEdyYXBoUUxJbnRlcmZhY2VUeXBlLCBHcmFwaFFMVW5pb25UeXBlLCBHcmFwaFFMRW51bVR5cGUsIEdyYXBoUUxJbnB1dE9iamVjdFR5cGUsIGFzc2VydE51bGxhYmxlVHlwZSwgYXNzZXJ0T2JqZWN0VHlwZSwgYXNzZXJ0SW50ZXJmYWNlVHlwZSB9IGZyb20gXCIuLi90eXBlL2RlZmluaXRpb24ubWpzXCI7XG5pbXBvcnQgeyB2YWx1ZUZyb21BU1QgfSBmcm9tIFwiLi92YWx1ZUZyb21BU1QubWpzXCI7XG4vKipcbiAqIEJ1aWxkIGEgR3JhcGhRTFNjaGVtYSBmb3IgdXNlIGJ5IGNsaWVudCB0b29scy5cbiAqXG4gKiBHaXZlbiB0aGUgcmVzdWx0IG9mIGEgY2xpZW50IHJ1bm5pbmcgdGhlIGludHJvc3BlY3Rpb24gcXVlcnksIGNyZWF0ZXMgYW5kXG4gKiByZXR1cm5zIGEgR3JhcGhRTFNjaGVtYSBpbnN0YW5jZSB3aGljaCBjYW4gYmUgdGhlbiB1c2VkIHdpdGggYWxsIGdyYXBocWwtanNcbiAqIHRvb2xzLCBidXQgY2Fubm90IGJlIHVzZWQgdG8gZXhlY3V0ZSBhIHF1ZXJ5LCBhcyBpbnRyb3NwZWN0aW9uIGRvZXMgbm90XG4gKiByZXByZXNlbnQgdGhlIFwicmVzb2x2ZXJcIiwgXCJwYXJzZVwiIG9yIFwic2VyaWFsaXplXCIgZnVuY3Rpb25zIG9yIGFueSBvdGhlclxuICogc2VydmVyLWludGVybmFsIG1lY2hhbmlzbXMuXG4gKlxuICogVGhpcyBmdW5jdGlvbiBleHBlY3RzIGEgY29tcGxldGUgaW50cm9zcGVjdGlvbiByZXN1bHQuIERvbid0IGZvcmdldCB0byBjaGVja1xuICogdGhlIFwiZXJyb3JzXCIgZmllbGQgb2YgYSBzZXJ2ZXIgcmVzcG9uc2UgYmVmb3JlIGNhbGxpbmcgdGhpcyBmdW5jdGlvbi5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gYnVpbGRDbGllbnRTY2hlbWEoaW50cm9zcGVjdGlvbiwgb3B0aW9ucykge1xuICBpc09iamVjdExpa2UoaW50cm9zcGVjdGlvbikgJiYgaXNPYmplY3RMaWtlKGludHJvc3BlY3Rpb24uX19zY2hlbWEpIHx8IGRldkFzc2VydCgwLCBcIkludmFsaWQgb3IgaW5jb21wbGV0ZSBpbnRyb3NwZWN0aW9uIHJlc3VsdC4gRW5zdXJlIHRoYXQgeW91IGFyZSBwYXNzaW5nIFxcXCJkYXRhXFxcIiBwcm9wZXJ0eSBvZiBpbnRyb3NwZWN0aW9uIHJlc3BvbnNlIGFuZCBubyBcXFwiZXJyb3JzXFxcIiB3YXMgcmV0dXJuZWQgYWxvbmdzaWRlOiBcIi5jb25jYXQoaW5zcGVjdChpbnRyb3NwZWN0aW9uKSwgXCIuXCIpKTsgLy8gR2V0IHRoZSBzY2hlbWEgZnJvbSB0aGUgaW50cm9zcGVjdGlvbiByZXN1bHQuXG5cbiAgdmFyIHNjaGVtYUludHJvc3BlY3Rpb24gPSBpbnRyb3NwZWN0aW9uLl9fc2NoZW1hOyAvLyBJdGVyYXRlIHRocm91Z2ggYWxsIHR5cGVzLCBnZXR0aW5nIHRoZSB0eXBlIGRlZmluaXRpb24gZm9yIGVhY2guXG5cbiAgdmFyIHR5cGVNYXAgPSBrZXlWYWxNYXAoc2NoZW1hSW50cm9zcGVjdGlvbi50eXBlcywgZnVuY3Rpb24gKHR5cGVJbnRyb3NwZWN0aW9uKSB7XG4gICAgcmV0dXJuIHR5cGVJbnRyb3NwZWN0aW9uLm5hbWU7XG4gIH0sIGZ1bmN0aW9uICh0eXBlSW50cm9zcGVjdGlvbikge1xuICAgIHJldHVybiBidWlsZFR5cGUodHlwZUludHJvc3BlY3Rpb24pO1xuICB9KTsgLy8gSW5jbHVkZSBzdGFuZGFyZCB0eXBlcyBvbmx5IGlmIHRoZXkgYXJlIHVzZWQuXG5cbiAgZm9yICh2YXIgX2kyID0gMCwgX3JlZjIgPSBbXS5jb25jYXQoc3BlY2lmaWVkU2NhbGFyVHlwZXMsIGludHJvc3BlY3Rpb25UeXBlcyk7IF9pMiA8IF9yZWYyLmxlbmd0aDsgX2kyKyspIHtcbiAgICB2YXIgc3RkVHlwZSA9IF9yZWYyW19pMl07XG5cbiAgICBpZiAodHlwZU1hcFtzdGRUeXBlLm5hbWVdKSB7XG4gICAgICB0eXBlTWFwW3N0ZFR5cGUubmFtZV0gPSBzdGRUeXBlO1xuICAgIH1cbiAgfSAvLyBHZXQgdGhlIHJvb3QgUXVlcnksIE11dGF0aW9uLCBhbmQgU3Vic2NyaXB0aW9uIHR5cGVzLlxuXG5cbiAgdmFyIHF1ZXJ5VHlwZSA9IHNjaGVtYUludHJvc3BlY3Rpb24ucXVlcnlUeXBlID8gZ2V0T2JqZWN0VHlwZShzY2hlbWFJbnRyb3NwZWN0aW9uLnF1ZXJ5VHlwZSkgOiBudWxsO1xuICB2YXIgbXV0YXRpb25UeXBlID0gc2NoZW1hSW50cm9zcGVjdGlvbi5tdXRhdGlvblR5cGUgPyBnZXRPYmplY3RUeXBlKHNjaGVtYUludHJvc3BlY3Rpb24ubXV0YXRpb25UeXBlKSA6IG51bGw7XG4gIHZhciBzdWJzY3JpcHRpb25UeXBlID0gc2NoZW1hSW50cm9zcGVjdGlvbi5zdWJzY3JpcHRpb25UeXBlID8gZ2V0T2JqZWN0VHlwZShzY2hlbWFJbnRyb3NwZWN0aW9uLnN1YnNjcmlwdGlvblR5cGUpIDogbnVsbDsgLy8gR2V0IHRoZSBkaXJlY3RpdmVzIHN1cHBvcnRlZCBieSBJbnRyb3NwZWN0aW9uLCBhc3N1bWluZyBlbXB0eS1zZXQgaWZcbiAgLy8gZGlyZWN0aXZlcyB3ZXJlIG5vdCBxdWVyaWVkIGZvci5cblxuICB2YXIgZGlyZWN0aXZlcyA9IHNjaGVtYUludHJvc3BlY3Rpb24uZGlyZWN0aXZlcyA/IHNjaGVtYUludHJvc3BlY3Rpb24uZGlyZWN0aXZlcy5tYXAoYnVpbGREaXJlY3RpdmUpIDogW107IC8vIFRoZW4gcHJvZHVjZSBhbmQgcmV0dXJuIGEgU2NoZW1hIHdpdGggdGhlc2UgdHlwZXMuXG5cbiAgcmV0dXJuIG5ldyBHcmFwaFFMU2NoZW1hKHtcbiAgICBkZXNjcmlwdGlvbjogc2NoZW1hSW50cm9zcGVjdGlvbi5kZXNjcmlwdGlvbixcbiAgICBxdWVyeTogcXVlcnlUeXBlLFxuICAgIG11dGF0aW9uOiBtdXRhdGlvblR5cGUsXG4gICAgc3Vic2NyaXB0aW9uOiBzdWJzY3JpcHRpb25UeXBlLFxuICAgIHR5cGVzOiBvYmplY3RWYWx1ZXModHlwZU1hcCksXG4gICAgZGlyZWN0aXZlczogZGlyZWN0aXZlcyxcbiAgICBhc3N1bWVWYWxpZDogb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmFzc3VtZVZhbGlkXG4gIH0pOyAvLyBHaXZlbiBhIHR5cGUgcmVmZXJlbmNlIGluIGludHJvc3BlY3Rpb24sIHJldHVybiB0aGUgR3JhcGhRTFR5cGUgaW5zdGFuY2UuXG4gIC8vIHByZWZlcnJpbmcgY2FjaGVkIGluc3RhbmNlcyBiZWZvcmUgYnVpbGRpbmcgbmV3IGluc3RhbmNlcy5cblxuICBmdW5jdGlvbiBnZXRUeXBlKHR5cGVSZWYpIHtcbiAgICBpZiAodHlwZVJlZi5raW5kID09PSBUeXBlS2luZC5MSVNUKSB7XG4gICAgICB2YXIgaXRlbVJlZiA9IHR5cGVSZWYub2ZUeXBlO1xuXG4gICAgICBpZiAoIWl0ZW1SZWYpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdEZWNvcmF0ZWQgdHlwZSBkZWVwZXIgdGhhbiBpbnRyb3NwZWN0aW9uIHF1ZXJ5LicpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3IEdyYXBoUUxMaXN0KGdldFR5cGUoaXRlbVJlZikpO1xuICAgIH1cblxuICAgIGlmICh0eXBlUmVmLmtpbmQgPT09IFR5cGVLaW5kLk5PTl9OVUxMKSB7XG4gICAgICB2YXIgbnVsbGFibGVSZWYgPSB0eXBlUmVmLm9mVHlwZTtcblxuICAgICAgaWYgKCFudWxsYWJsZVJlZikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0RlY29yYXRlZCB0eXBlIGRlZXBlciB0aGFuIGludHJvc3BlY3Rpb24gcXVlcnkuJyk7XG4gICAgICB9XG5cbiAgICAgIHZhciBudWxsYWJsZVR5cGUgPSBnZXRUeXBlKG51bGxhYmxlUmVmKTtcbiAgICAgIHJldHVybiBuZXcgR3JhcGhRTE5vbk51bGwoYXNzZXJ0TnVsbGFibGVUeXBlKG51bGxhYmxlVHlwZSkpO1xuICAgIH1cblxuICAgIHJldHVybiBnZXROYW1lZFR5cGUodHlwZVJlZik7XG4gIH1cblxuICBmdW5jdGlvbiBnZXROYW1lZFR5cGUodHlwZVJlZikge1xuICAgIHZhciB0eXBlTmFtZSA9IHR5cGVSZWYubmFtZTtcblxuICAgIGlmICghdHlwZU5hbWUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlVua25vd24gdHlwZSByZWZlcmVuY2U6IFwiLmNvbmNhdChpbnNwZWN0KHR5cGVSZWYpLCBcIi5cIikpO1xuICAgIH1cblxuICAgIHZhciB0eXBlID0gdHlwZU1hcFt0eXBlTmFtZV07XG5cbiAgICBpZiAoIXR5cGUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgb3IgaW5jb21wbGV0ZSBzY2hlbWEsIHVua25vd24gdHlwZTogXCIuY29uY2F0KHR5cGVOYW1lLCBcIi4gRW5zdXJlIHRoYXQgYSBmdWxsIGludHJvc3BlY3Rpb24gcXVlcnkgaXMgdXNlZCBpbiBvcmRlciB0byBidWlsZCBhIGNsaWVudCBzY2hlbWEuXCIpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHlwZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldE9iamVjdFR5cGUodHlwZVJlZikge1xuICAgIHJldHVybiBhc3NlcnRPYmplY3RUeXBlKGdldE5hbWVkVHlwZSh0eXBlUmVmKSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRJbnRlcmZhY2VUeXBlKHR5cGVSZWYpIHtcbiAgICByZXR1cm4gYXNzZXJ0SW50ZXJmYWNlVHlwZShnZXROYW1lZFR5cGUodHlwZVJlZikpO1xuICB9IC8vIEdpdmVuIGEgdHlwZSdzIGludHJvc3BlY3Rpb24gcmVzdWx0LCBjb25zdHJ1Y3QgdGhlIGNvcnJlY3RcbiAgLy8gR3JhcGhRTFR5cGUgaW5zdGFuY2UuXG5cblxuICBmdW5jdGlvbiBidWlsZFR5cGUodHlwZSkge1xuICAgIGlmICh0eXBlICE9IG51bGwgJiYgdHlwZS5uYW1lICE9IG51bGwgJiYgdHlwZS5raW5kICE9IG51bGwpIHtcbiAgICAgIHN3aXRjaCAodHlwZS5raW5kKSB7XG4gICAgICAgIGNhc2UgVHlwZUtpbmQuU0NBTEFSOlxuICAgICAgICAgIHJldHVybiBidWlsZFNjYWxhckRlZih0eXBlKTtcblxuICAgICAgICBjYXNlIFR5cGVLaW5kLk9CSkVDVDpcbiAgICAgICAgICByZXR1cm4gYnVpbGRPYmplY3REZWYodHlwZSk7XG5cbiAgICAgICAgY2FzZSBUeXBlS2luZC5JTlRFUkZBQ0U6XG4gICAgICAgICAgcmV0dXJuIGJ1aWxkSW50ZXJmYWNlRGVmKHR5cGUpO1xuXG4gICAgICAgIGNhc2UgVHlwZUtpbmQuVU5JT046XG4gICAgICAgICAgcmV0dXJuIGJ1aWxkVW5pb25EZWYodHlwZSk7XG5cbiAgICAgICAgY2FzZSBUeXBlS2luZC5FTlVNOlxuICAgICAgICAgIHJldHVybiBidWlsZEVudW1EZWYodHlwZSk7XG5cbiAgICAgICAgY2FzZSBUeXBlS2luZC5JTlBVVF9PQkpFQ1Q6XG4gICAgICAgICAgcmV0dXJuIGJ1aWxkSW5wdXRPYmplY3REZWYodHlwZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHR5cGVTdHIgPSBpbnNwZWN0KHR5cGUpO1xuICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgb3IgaW5jb21wbGV0ZSBpbnRyb3NwZWN0aW9uIHJlc3VsdC4gRW5zdXJlIHRoYXQgYSBmdWxsIGludHJvc3BlY3Rpb24gcXVlcnkgaXMgdXNlZCBpbiBvcmRlciB0byBidWlsZCBhIGNsaWVudCBzY2hlbWE6IFwiLmNvbmNhdCh0eXBlU3RyLCBcIi5cIikpO1xuICB9XG5cbiAgZnVuY3Rpb24gYnVpbGRTY2FsYXJEZWYoc2NhbGFySW50cm9zcGVjdGlvbikge1xuICAgIHJldHVybiBuZXcgR3JhcGhRTFNjYWxhclR5cGUoe1xuICAgICAgbmFtZTogc2NhbGFySW50cm9zcGVjdGlvbi5uYW1lLFxuICAgICAgZGVzY3JpcHRpb246IHNjYWxhckludHJvc3BlY3Rpb24uZGVzY3JpcHRpb24sXG4gICAgICBzcGVjaWZpZWRCeVVybDogc2NhbGFySW50cm9zcGVjdGlvbi5zcGVjaWZpZWRCeVVybFxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gYnVpbGRJbXBsZW1lbnRhdGlvbnNMaXN0KGltcGxlbWVudGluZ0ludHJvc3BlY3Rpb24pIHtcbiAgICAvLyBUT0RPOiBUZW1wb3Jhcnkgd29ya2Fyb3VuZCB1bnRpbCBHcmFwaFFMIGVjb3N5c3RlbSB3aWxsIGZ1bGx5IHN1cHBvcnRcbiAgICAvLyAnaW50ZXJmYWNlcycgb24gaW50ZXJmYWNlIHR5cGVzLlxuICAgIGlmIChpbXBsZW1lbnRpbmdJbnRyb3NwZWN0aW9uLmludGVyZmFjZXMgPT09IG51bGwgJiYgaW1wbGVtZW50aW5nSW50cm9zcGVjdGlvbi5raW5kID09PSBUeXBlS2luZC5JTlRFUkZBQ0UpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICBpZiAoIWltcGxlbWVudGluZ0ludHJvc3BlY3Rpb24uaW50ZXJmYWNlcykge1xuICAgICAgdmFyIGltcGxlbWVudGluZ0ludHJvc3BlY3Rpb25TdHIgPSBpbnNwZWN0KGltcGxlbWVudGluZ0ludHJvc3BlY3Rpb24pO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW50cm9zcGVjdGlvbiByZXN1bHQgbWlzc2luZyBpbnRlcmZhY2VzOiBcIi5jb25jYXQoaW1wbGVtZW50aW5nSW50cm9zcGVjdGlvblN0ciwgXCIuXCIpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaW1wbGVtZW50aW5nSW50cm9zcGVjdGlvbi5pbnRlcmZhY2VzLm1hcChnZXRJbnRlcmZhY2VUeXBlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJ1aWxkT2JqZWN0RGVmKG9iamVjdEludHJvc3BlY3Rpb24pIHtcbiAgICByZXR1cm4gbmV3IEdyYXBoUUxPYmplY3RUeXBlKHtcbiAgICAgIG5hbWU6IG9iamVjdEludHJvc3BlY3Rpb24ubmFtZSxcbiAgICAgIGRlc2NyaXB0aW9uOiBvYmplY3RJbnRyb3NwZWN0aW9uLmRlc2NyaXB0aW9uLFxuICAgICAgaW50ZXJmYWNlczogZnVuY3Rpb24gaW50ZXJmYWNlcygpIHtcbiAgICAgICAgcmV0dXJuIGJ1aWxkSW1wbGVtZW50YXRpb25zTGlzdChvYmplY3RJbnRyb3NwZWN0aW9uKTtcbiAgICAgIH0sXG4gICAgICBmaWVsZHM6IGZ1bmN0aW9uIGZpZWxkcygpIHtcbiAgICAgICAgcmV0dXJuIGJ1aWxkRmllbGREZWZNYXAob2JqZWN0SW50cm9zcGVjdGlvbik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBidWlsZEludGVyZmFjZURlZihpbnRlcmZhY2VJbnRyb3NwZWN0aW9uKSB7XG4gICAgcmV0dXJuIG5ldyBHcmFwaFFMSW50ZXJmYWNlVHlwZSh7XG4gICAgICBuYW1lOiBpbnRlcmZhY2VJbnRyb3NwZWN0aW9uLm5hbWUsXG4gICAgICBkZXNjcmlwdGlvbjogaW50ZXJmYWNlSW50cm9zcGVjdGlvbi5kZXNjcmlwdGlvbixcbiAgICAgIGludGVyZmFjZXM6IGZ1bmN0aW9uIGludGVyZmFjZXMoKSB7XG4gICAgICAgIHJldHVybiBidWlsZEltcGxlbWVudGF0aW9uc0xpc3QoaW50ZXJmYWNlSW50cm9zcGVjdGlvbik7XG4gICAgICB9LFxuICAgICAgZmllbGRzOiBmdW5jdGlvbiBmaWVsZHMoKSB7XG4gICAgICAgIHJldHVybiBidWlsZEZpZWxkRGVmTWFwKGludGVyZmFjZUludHJvc3BlY3Rpb24pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gYnVpbGRVbmlvbkRlZih1bmlvbkludHJvc3BlY3Rpb24pIHtcbiAgICBpZiAoIXVuaW9uSW50cm9zcGVjdGlvbi5wb3NzaWJsZVR5cGVzKSB7XG4gICAgICB2YXIgdW5pb25JbnRyb3NwZWN0aW9uU3RyID0gaW5zcGVjdCh1bmlvbkludHJvc3BlY3Rpb24pO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW50cm9zcGVjdGlvbiByZXN1bHQgbWlzc2luZyBwb3NzaWJsZVR5cGVzOiBcIi5jb25jYXQodW5pb25JbnRyb3NwZWN0aW9uU3RyLCBcIi5cIikpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgR3JhcGhRTFVuaW9uVHlwZSh7XG4gICAgICBuYW1lOiB1bmlvbkludHJvc3BlY3Rpb24ubmFtZSxcbiAgICAgIGRlc2NyaXB0aW9uOiB1bmlvbkludHJvc3BlY3Rpb24uZGVzY3JpcHRpb24sXG4gICAgICB0eXBlczogZnVuY3Rpb24gdHlwZXMoKSB7XG4gICAgICAgIHJldHVybiB1bmlvbkludHJvc3BlY3Rpb24ucG9zc2libGVUeXBlcy5tYXAoZ2V0T2JqZWN0VHlwZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBidWlsZEVudW1EZWYoZW51bUludHJvc3BlY3Rpb24pIHtcbiAgICBpZiAoIWVudW1JbnRyb3NwZWN0aW9uLmVudW1WYWx1ZXMpIHtcbiAgICAgIHZhciBlbnVtSW50cm9zcGVjdGlvblN0ciA9IGluc3BlY3QoZW51bUludHJvc3BlY3Rpb24pO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW50cm9zcGVjdGlvbiByZXN1bHQgbWlzc2luZyBlbnVtVmFsdWVzOiBcIi5jb25jYXQoZW51bUludHJvc3BlY3Rpb25TdHIsIFwiLlwiKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBHcmFwaFFMRW51bVR5cGUoe1xuICAgICAgbmFtZTogZW51bUludHJvc3BlY3Rpb24ubmFtZSxcbiAgICAgIGRlc2NyaXB0aW9uOiBlbnVtSW50cm9zcGVjdGlvbi5kZXNjcmlwdGlvbixcbiAgICAgIHZhbHVlczoga2V5VmFsTWFwKGVudW1JbnRyb3NwZWN0aW9uLmVudW1WYWx1ZXMsIGZ1bmN0aW9uICh2YWx1ZUludHJvc3BlY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlSW50cm9zcGVjdGlvbi5uYW1lO1xuICAgICAgfSwgZnVuY3Rpb24gKHZhbHVlSW50cm9zcGVjdGlvbikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGRlc2NyaXB0aW9uOiB2YWx1ZUludHJvc3BlY3Rpb24uZGVzY3JpcHRpb24sXG4gICAgICAgICAgZGVwcmVjYXRpb25SZWFzb246IHZhbHVlSW50cm9zcGVjdGlvbi5kZXByZWNhdGlvblJlYXNvblxuICAgICAgICB9O1xuICAgICAgfSlcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJ1aWxkSW5wdXRPYmplY3REZWYoaW5wdXRPYmplY3RJbnRyb3NwZWN0aW9uKSB7XG4gICAgaWYgKCFpbnB1dE9iamVjdEludHJvc3BlY3Rpb24uaW5wdXRGaWVsZHMpIHtcbiAgICAgIHZhciBpbnB1dE9iamVjdEludHJvc3BlY3Rpb25TdHIgPSBpbnNwZWN0KGlucHV0T2JqZWN0SW50cm9zcGVjdGlvbik7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnRyb3NwZWN0aW9uIHJlc3VsdCBtaXNzaW5nIGlucHV0RmllbGRzOiBcIi5jb25jYXQoaW5wdXRPYmplY3RJbnRyb3NwZWN0aW9uU3RyLCBcIi5cIikpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgR3JhcGhRTElucHV0T2JqZWN0VHlwZSh7XG4gICAgICBuYW1lOiBpbnB1dE9iamVjdEludHJvc3BlY3Rpb24ubmFtZSxcbiAgICAgIGRlc2NyaXB0aW9uOiBpbnB1dE9iamVjdEludHJvc3BlY3Rpb24uZGVzY3JpcHRpb24sXG4gICAgICBmaWVsZHM6IGZ1bmN0aW9uIGZpZWxkcygpIHtcbiAgICAgICAgcmV0dXJuIGJ1aWxkSW5wdXRWYWx1ZURlZk1hcChpbnB1dE9iamVjdEludHJvc3BlY3Rpb24uaW5wdXRGaWVsZHMpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gYnVpbGRGaWVsZERlZk1hcCh0eXBlSW50cm9zcGVjdGlvbikge1xuICAgIGlmICghdHlwZUludHJvc3BlY3Rpb24uZmllbGRzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnRyb3NwZWN0aW9uIHJlc3VsdCBtaXNzaW5nIGZpZWxkczogXCIuY29uY2F0KGluc3BlY3QodHlwZUludHJvc3BlY3Rpb24pLCBcIi5cIikpO1xuICAgIH1cblxuICAgIHJldHVybiBrZXlWYWxNYXAodHlwZUludHJvc3BlY3Rpb24uZmllbGRzLCBmdW5jdGlvbiAoZmllbGRJbnRyb3NwZWN0aW9uKSB7XG4gICAgICByZXR1cm4gZmllbGRJbnRyb3NwZWN0aW9uLm5hbWU7XG4gICAgfSwgYnVpbGRGaWVsZCk7XG4gIH1cblxuICBmdW5jdGlvbiBidWlsZEZpZWxkKGZpZWxkSW50cm9zcGVjdGlvbikge1xuICAgIHZhciB0eXBlID0gZ2V0VHlwZShmaWVsZEludHJvc3BlY3Rpb24udHlwZSk7XG5cbiAgICBpZiAoIWlzT3V0cHV0VHlwZSh0eXBlKSkge1xuICAgICAgdmFyIHR5cGVTdHIgPSBpbnNwZWN0KHR5cGUpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW50cm9zcGVjdGlvbiBtdXN0IHByb3ZpZGUgb3V0cHV0IHR5cGUgZm9yIGZpZWxkcywgYnV0IHJlY2VpdmVkOiBcIi5jb25jYXQodHlwZVN0ciwgXCIuXCIpKTtcbiAgICB9XG5cbiAgICBpZiAoIWZpZWxkSW50cm9zcGVjdGlvbi5hcmdzKSB7XG4gICAgICB2YXIgZmllbGRJbnRyb3NwZWN0aW9uU3RyID0gaW5zcGVjdChmaWVsZEludHJvc3BlY3Rpb24pO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW50cm9zcGVjdGlvbiByZXN1bHQgbWlzc2luZyBmaWVsZCBhcmdzOiBcIi5jb25jYXQoZmllbGRJbnRyb3NwZWN0aW9uU3RyLCBcIi5cIikpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBkZXNjcmlwdGlvbjogZmllbGRJbnRyb3NwZWN0aW9uLmRlc2NyaXB0aW9uLFxuICAgICAgZGVwcmVjYXRpb25SZWFzb246IGZpZWxkSW50cm9zcGVjdGlvbi5kZXByZWNhdGlvblJlYXNvbixcbiAgICAgIHR5cGU6IHR5cGUsXG4gICAgICBhcmdzOiBidWlsZElucHV0VmFsdWVEZWZNYXAoZmllbGRJbnRyb3NwZWN0aW9uLmFyZ3MpXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJ1aWxkSW5wdXRWYWx1ZURlZk1hcChpbnB1dFZhbHVlSW50cm9zcGVjdGlvbnMpIHtcbiAgICByZXR1cm4ga2V5VmFsTWFwKGlucHV0VmFsdWVJbnRyb3NwZWN0aW9ucywgZnVuY3Rpb24gKGlucHV0VmFsdWUpIHtcbiAgICAgIHJldHVybiBpbnB1dFZhbHVlLm5hbWU7XG4gICAgfSwgYnVpbGRJbnB1dFZhbHVlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJ1aWxkSW5wdXRWYWx1ZShpbnB1dFZhbHVlSW50cm9zcGVjdGlvbikge1xuICAgIHZhciB0eXBlID0gZ2V0VHlwZShpbnB1dFZhbHVlSW50cm9zcGVjdGlvbi50eXBlKTtcblxuICAgIGlmICghaXNJbnB1dFR5cGUodHlwZSkpIHtcbiAgICAgIHZhciB0eXBlU3RyID0gaW5zcGVjdCh0eXBlKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkludHJvc3BlY3Rpb24gbXVzdCBwcm92aWRlIGlucHV0IHR5cGUgZm9yIGFyZ3VtZW50cywgYnV0IHJlY2VpdmVkOiBcIi5jb25jYXQodHlwZVN0ciwgXCIuXCIpKTtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdFZhbHVlID0gaW5wdXRWYWx1ZUludHJvc3BlY3Rpb24uZGVmYXVsdFZhbHVlICE9IG51bGwgPyB2YWx1ZUZyb21BU1QocGFyc2VWYWx1ZShpbnB1dFZhbHVlSW50cm9zcGVjdGlvbi5kZWZhdWx0VmFsdWUpLCB0eXBlKSA6IHVuZGVmaW5lZDtcbiAgICByZXR1cm4ge1xuICAgICAgZGVzY3JpcHRpb246IGlucHV0VmFsdWVJbnRyb3NwZWN0aW9uLmRlc2NyaXB0aW9uLFxuICAgICAgdHlwZTogdHlwZSxcbiAgICAgIGRlZmF1bHRWYWx1ZTogZGVmYXVsdFZhbHVlLFxuICAgICAgZGVwcmVjYXRpb25SZWFzb246IGlucHV0VmFsdWVJbnRyb3NwZWN0aW9uLmRlcHJlY2F0aW9uUmVhc29uXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJ1aWxkRGlyZWN0aXZlKGRpcmVjdGl2ZUludHJvc3BlY3Rpb24pIHtcbiAgICBpZiAoIWRpcmVjdGl2ZUludHJvc3BlY3Rpb24uYXJncykge1xuICAgICAgdmFyIGRpcmVjdGl2ZUludHJvc3BlY3Rpb25TdHIgPSBpbnNwZWN0KGRpcmVjdGl2ZUludHJvc3BlY3Rpb24pO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW50cm9zcGVjdGlvbiByZXN1bHQgbWlzc2luZyBkaXJlY3RpdmUgYXJnczogXCIuY29uY2F0KGRpcmVjdGl2ZUludHJvc3BlY3Rpb25TdHIsIFwiLlwiKSk7XG4gICAgfVxuXG4gICAgaWYgKCFkaXJlY3RpdmVJbnRyb3NwZWN0aW9uLmxvY2F0aW9ucykge1xuICAgICAgdmFyIF9kaXJlY3RpdmVJbnRyb3NwZWN0aW9uU3RyID0gaW5zcGVjdChkaXJlY3RpdmVJbnRyb3NwZWN0aW9uKTtcblxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW50cm9zcGVjdGlvbiByZXN1bHQgbWlzc2luZyBkaXJlY3RpdmUgbG9jYXRpb25zOiBcIi5jb25jYXQoX2RpcmVjdGl2ZUludHJvc3BlY3Rpb25TdHIsIFwiLlwiKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBHcmFwaFFMRGlyZWN0aXZlKHtcbiAgICAgIG5hbWU6IGRpcmVjdGl2ZUludHJvc3BlY3Rpb24ubmFtZSxcbiAgICAgIGRlc2NyaXB0aW9uOiBkaXJlY3RpdmVJbnRyb3NwZWN0aW9uLmRlc2NyaXB0aW9uLFxuICAgICAgaXNSZXBlYXRhYmxlOiBkaXJlY3RpdmVJbnRyb3NwZWN0aW9uLmlzUmVwZWF0YWJsZSxcbiAgICAgIGxvY2F0aW9uczogZGlyZWN0aXZlSW50cm9zcGVjdGlvbi5sb2NhdGlvbnMuc2xpY2UoKSxcbiAgICAgIGFyZ3M6IGJ1aWxkSW5wdXRWYWx1ZURlZk1hcChkaXJlY3RpdmVJbnRyb3NwZWN0aW9uLmFyZ3MpXG4gICAgfSk7XG4gIH1cbn1cbiIsImltcG9ydCBvYmplY3RWYWx1ZXMgZnJvbSBcIi4uL3BvbHlmaWxscy9vYmplY3RWYWx1ZXMubWpzXCI7XG5pbXBvcnQgaW5zcGVjdCBmcm9tIFwiLi4vanN1dGlscy9pbnNwZWN0Lm1qc1wiO1xuaW1wb3J0IGludmFyaWFudCBmcm9tIFwiLi4vanN1dGlscy9pbnZhcmlhbnQubWpzXCI7XG5pbXBvcnQgZGlkWW91TWVhbiBmcm9tIFwiLi4vanN1dGlscy9kaWRZb3VNZWFuLm1qc1wiO1xuaW1wb3J0IGlzT2JqZWN0TGlrZSBmcm9tIFwiLi4vanN1dGlscy9pc09iamVjdExpa2UubWpzXCI7XG5pbXBvcnQgc2FmZUFycmF5RnJvbSBmcm9tIFwiLi4vanN1dGlscy9zYWZlQXJyYXlGcm9tLm1qc1wiO1xuaW1wb3J0IHN1Z2dlc3Rpb25MaXN0IGZyb20gXCIuLi9qc3V0aWxzL3N1Z2dlc3Rpb25MaXN0Lm1qc1wiO1xuaW1wb3J0IHByaW50UGF0aEFycmF5IGZyb20gXCIuLi9qc3V0aWxzL3ByaW50UGF0aEFycmF5Lm1qc1wiO1xuaW1wb3J0IHsgYWRkUGF0aCwgcGF0aFRvQXJyYXkgfSBmcm9tIFwiLi4vanN1dGlscy9QYXRoLm1qc1wiO1xuaW1wb3J0IHsgR3JhcGhRTEVycm9yIH0gZnJvbSBcIi4uL2Vycm9yL0dyYXBoUUxFcnJvci5tanNcIjtcbmltcG9ydCB7IGlzTGVhZlR5cGUsIGlzSW5wdXRPYmplY3RUeXBlLCBpc0xpc3RUeXBlLCBpc05vbk51bGxUeXBlIH0gZnJvbSBcIi4uL3R5cGUvZGVmaW5pdGlvbi5tanNcIjtcblxuLyoqXG4gKiBDb2VyY2VzIGEgSmF2YVNjcmlwdCB2YWx1ZSBnaXZlbiBhIEdyYXBoUUwgSW5wdXQgVHlwZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvZXJjZUlucHV0VmFsdWUoaW5wdXRWYWx1ZSwgdHlwZSkge1xuICB2YXIgb25FcnJvciA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogZGVmYXVsdE9uRXJyb3I7XG4gIHJldHVybiBjb2VyY2VJbnB1dFZhbHVlSW1wbChpbnB1dFZhbHVlLCB0eXBlLCBvbkVycm9yKTtcbn1cblxuZnVuY3Rpb24gZGVmYXVsdE9uRXJyb3IocGF0aCwgaW52YWxpZFZhbHVlLCBlcnJvcikge1xuICB2YXIgZXJyb3JQcmVmaXggPSAnSW52YWxpZCB2YWx1ZSAnICsgaW5zcGVjdChpbnZhbGlkVmFsdWUpO1xuXG4gIGlmIChwYXRoLmxlbmd0aCA+IDApIHtcbiAgICBlcnJvclByZWZpeCArPSBcIiBhdCBcXFwidmFsdWVcIi5jb25jYXQocHJpbnRQYXRoQXJyYXkocGF0aCksIFwiXFxcIlwiKTtcbiAgfVxuXG4gIGVycm9yLm1lc3NhZ2UgPSBlcnJvclByZWZpeCArICc6ICcgKyBlcnJvci5tZXNzYWdlO1xuICB0aHJvdyBlcnJvcjtcbn1cblxuZnVuY3Rpb24gY29lcmNlSW5wdXRWYWx1ZUltcGwoaW5wdXRWYWx1ZSwgdHlwZSwgb25FcnJvciwgcGF0aCkge1xuICBpZiAoaXNOb25OdWxsVHlwZSh0eXBlKSkge1xuICAgIGlmIChpbnB1dFZhbHVlICE9IG51bGwpIHtcbiAgICAgIHJldHVybiBjb2VyY2VJbnB1dFZhbHVlSW1wbChpbnB1dFZhbHVlLCB0eXBlLm9mVHlwZSwgb25FcnJvciwgcGF0aCk7XG4gICAgfVxuXG4gICAgb25FcnJvcihwYXRoVG9BcnJheShwYXRoKSwgaW5wdXRWYWx1ZSwgbmV3IEdyYXBoUUxFcnJvcihcIkV4cGVjdGVkIG5vbi1udWxsYWJsZSB0eXBlIFxcXCJcIi5jb25jYXQoaW5zcGVjdCh0eXBlKSwgXCJcXFwiIG5vdCB0byBiZSBudWxsLlwiKSkpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChpbnB1dFZhbHVlID09IG51bGwpIHtcbiAgICAvLyBFeHBsaWNpdGx5IHJldHVybiB0aGUgdmFsdWUgbnVsbC5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmIChpc0xpc3RUeXBlKHR5cGUpKSB7XG4gICAgdmFyIGl0ZW1UeXBlID0gdHlwZS5vZlR5cGU7XG4gICAgdmFyIGNvZXJjZWRMaXN0ID0gc2FmZUFycmF5RnJvbShpbnB1dFZhbHVlLCBmdW5jdGlvbiAoaXRlbVZhbHVlLCBpbmRleCkge1xuICAgICAgdmFyIGl0ZW1QYXRoID0gYWRkUGF0aChwYXRoLCBpbmRleCwgdW5kZWZpbmVkKTtcbiAgICAgIHJldHVybiBjb2VyY2VJbnB1dFZhbHVlSW1wbChpdGVtVmFsdWUsIGl0ZW1UeXBlLCBvbkVycm9yLCBpdGVtUGF0aCk7XG4gICAgfSk7XG5cbiAgICBpZiAoY29lcmNlZExpc3QgIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGNvZXJjZWRMaXN0O1xuICAgIH0gLy8gTGlzdHMgYWNjZXB0IGEgbm9uLWxpc3QgdmFsdWUgYXMgYSBsaXN0IG9mIG9uZS5cblxuXG4gICAgcmV0dXJuIFtjb2VyY2VJbnB1dFZhbHVlSW1wbChpbnB1dFZhbHVlLCBpdGVtVHlwZSwgb25FcnJvciwgcGF0aCldO1xuICB9XG5cbiAgaWYgKGlzSW5wdXRPYmplY3RUeXBlKHR5cGUpKSB7XG4gICAgaWYgKCFpc09iamVjdExpa2UoaW5wdXRWYWx1ZSkpIHtcbiAgICAgIG9uRXJyb3IocGF0aFRvQXJyYXkocGF0aCksIGlucHV0VmFsdWUsIG5ldyBHcmFwaFFMRXJyb3IoXCJFeHBlY3RlZCB0eXBlIFxcXCJcIi5jb25jYXQodHlwZS5uYW1lLCBcIlxcXCIgdG8gYmUgYW4gb2JqZWN0LlwiKSkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBjb2VyY2VkVmFsdWUgPSB7fTtcbiAgICB2YXIgZmllbGREZWZzID0gdHlwZS5nZXRGaWVsZHMoKTtcblxuICAgIGZvciAodmFyIF9pMiA9IDAsIF9vYmplY3RWYWx1ZXMyID0gb2JqZWN0VmFsdWVzKGZpZWxkRGVmcyk7IF9pMiA8IF9vYmplY3RWYWx1ZXMyLmxlbmd0aDsgX2kyKyspIHtcbiAgICAgIHZhciBmaWVsZCA9IF9vYmplY3RWYWx1ZXMyW19pMl07XG4gICAgICB2YXIgZmllbGRWYWx1ZSA9IGlucHV0VmFsdWVbZmllbGQubmFtZV07XG5cbiAgICAgIGlmIChmaWVsZFZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKGZpZWxkLmRlZmF1bHRWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgY29lcmNlZFZhbHVlW2ZpZWxkLm5hbWVdID0gZmllbGQuZGVmYXVsdFZhbHVlO1xuICAgICAgICB9IGVsc2UgaWYgKGlzTm9uTnVsbFR5cGUoZmllbGQudHlwZSkpIHtcbiAgICAgICAgICB2YXIgdHlwZVN0ciA9IGluc3BlY3QoZmllbGQudHlwZSk7XG4gICAgICAgICAgb25FcnJvcihwYXRoVG9BcnJheShwYXRoKSwgaW5wdXRWYWx1ZSwgbmV3IEdyYXBoUUxFcnJvcihcIkZpZWxkIFxcXCJcIi5jb25jYXQoZmllbGQubmFtZSwgXCJcXFwiIG9mIHJlcXVpcmVkIHR5cGUgXFxcIlwiKS5jb25jYXQodHlwZVN0ciwgXCJcXFwiIHdhcyBub3QgcHJvdmlkZWQuXCIpKSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgY29lcmNlZFZhbHVlW2ZpZWxkLm5hbWVdID0gY29lcmNlSW5wdXRWYWx1ZUltcGwoZmllbGRWYWx1ZSwgZmllbGQudHlwZSwgb25FcnJvciwgYWRkUGF0aChwYXRoLCBmaWVsZC5uYW1lLCB0eXBlLm5hbWUpKTtcbiAgICB9IC8vIEVuc3VyZSBldmVyeSBwcm92aWRlZCBmaWVsZCBpcyBkZWZpbmVkLlxuXG5cbiAgICBmb3IgKHZhciBfaTQgPSAwLCBfT2JqZWN0JGtleXMyID0gT2JqZWN0LmtleXMoaW5wdXRWYWx1ZSk7IF9pNCA8IF9PYmplY3Qka2V5czIubGVuZ3RoOyBfaTQrKykge1xuICAgICAgdmFyIGZpZWxkTmFtZSA9IF9PYmplY3Qka2V5czJbX2k0XTtcblxuICAgICAgaWYgKCFmaWVsZERlZnNbZmllbGROYW1lXSkge1xuICAgICAgICB2YXIgc3VnZ2VzdGlvbnMgPSBzdWdnZXN0aW9uTGlzdChmaWVsZE5hbWUsIE9iamVjdC5rZXlzKHR5cGUuZ2V0RmllbGRzKCkpKTtcbiAgICAgICAgb25FcnJvcihwYXRoVG9BcnJheShwYXRoKSwgaW5wdXRWYWx1ZSwgbmV3IEdyYXBoUUxFcnJvcihcIkZpZWxkIFxcXCJcIi5jb25jYXQoZmllbGROYW1lLCBcIlxcXCIgaXMgbm90IGRlZmluZWQgYnkgdHlwZSBcXFwiXCIpLmNvbmNhdCh0eXBlLm5hbWUsIFwiXFxcIi5cIikgKyBkaWRZb3VNZWFuKHN1Z2dlc3Rpb25zKSkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBjb2VyY2VkVmFsdWU7XG4gIH0gLy8gaXN0YW5idWwgaWdub3JlIGVsc2UgKFNlZTogJ2h0dHBzOi8vZ2l0aHViLmNvbS9ncmFwaHFsL2dyYXBocWwtanMvaXNzdWVzLzI2MTgnKVxuXG5cbiAgaWYgKGlzTGVhZlR5cGUodHlwZSkpIHtcbiAgICB2YXIgcGFyc2VSZXN1bHQ7IC8vIFNjYWxhcnMgYW5kIEVudW1zIGRldGVybWluZSBpZiBhIGlucHV0IHZhbHVlIGlzIHZhbGlkIHZpYSBwYXJzZVZhbHVlKCksXG4gICAgLy8gd2hpY2ggY2FuIHRocm93IHRvIGluZGljYXRlIGZhaWx1cmUuIElmIGl0IHRocm93cywgbWFpbnRhaW4gYSByZWZlcmVuY2VcbiAgICAvLyB0byB0aGUgb3JpZ2luYWwgZXJyb3IuXG5cbiAgICB0cnkge1xuICAgICAgcGFyc2VSZXN1bHQgPSB0eXBlLnBhcnNlVmFsdWUoaW5wdXRWYWx1ZSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEdyYXBoUUxFcnJvcikge1xuICAgICAgICBvbkVycm9yKHBhdGhUb0FycmF5KHBhdGgpLCBpbnB1dFZhbHVlLCBlcnJvcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvbkVycm9yKHBhdGhUb0FycmF5KHBhdGgpLCBpbnB1dFZhbHVlLCBuZXcgR3JhcGhRTEVycm9yKFwiRXhwZWN0ZWQgdHlwZSBcXFwiXCIuY29uY2F0KHR5cGUubmFtZSwgXCJcXFwiLiBcIikgKyBlcnJvci5tZXNzYWdlLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGVycm9yKSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAocGFyc2VSZXN1bHQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgb25FcnJvcihwYXRoVG9BcnJheShwYXRoKSwgaW5wdXRWYWx1ZSwgbmV3IEdyYXBoUUxFcnJvcihcIkV4cGVjdGVkIHR5cGUgXFxcIlwiLmNvbmNhdCh0eXBlLm5hbWUsIFwiXFxcIi5cIikpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcGFyc2VSZXN1bHQ7XG4gIH0gLy8gaXN0YW5idWwgaWdub3JlIG5leHQgKE5vdCByZWFjaGFibGUuIEFsbCBwb3NzaWJsZSBpbnB1dCB0eXBlcyBoYXZlIGJlZW4gY29uc2lkZXJlZClcblxuXG4gIGZhbHNlIHx8IGludmFyaWFudCgwLCAnVW5leHBlY3RlZCBpbnB1dCB0eXBlOiAnICsgaW5zcGVjdCh0eXBlKSk7XG59XG4iLCIvKipcbiAqIFByb3ZpZGVkIGEgY29sbGVjdGlvbiBvZiBBU1RzLCBwcmVzdW1hYmx5IGVhY2ggZnJvbSBkaWZmZXJlbnQgZmlsZXMsXG4gKiBjb25jYXRlbmF0ZSB0aGUgQVNUcyB0b2dldGhlciBpbnRvIGJhdGNoZWQgQVNULCB1c2VmdWwgZm9yIHZhbGlkYXRpbmcgbWFueVxuICogR3JhcGhRTCBzb3VyY2UgZmlsZXMgd2hpY2ggdG9nZXRoZXIgcmVwcmVzZW50IG9uZSBjb25jZXB0dWFsIGFwcGxpY2F0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY29uY2F0QVNUKGRvY3VtZW50cykge1xuICB2YXIgZGVmaW5pdGlvbnMgPSBbXTtcblxuICBmb3IgKHZhciBfaTIgPSAwOyBfaTIgPCBkb2N1bWVudHMubGVuZ3RoOyBfaTIrKykge1xuICAgIHZhciBkb2MgPSBkb2N1bWVudHNbX2kyXTtcbiAgICBkZWZpbml0aW9ucyA9IGRlZmluaXRpb25zLmNvbmNhdChkb2MuZGVmaW5pdGlvbnMpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBraW5kOiAnRG9jdW1lbnQnLFxuICAgIGRlZmluaXRpb25zOiBkZWZpbml0aW9uc1xuICB9O1xufVxuIiwiZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pOyBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmltcG9ydCBvYmplY3RWYWx1ZXMgZnJvbSBcIi4uL3BvbHlmaWxscy9vYmplY3RWYWx1ZXMubWpzXCI7XG5pbXBvcnQga2V5TWFwIGZyb20gXCIuLi9qc3V0aWxzL2tleU1hcC5tanNcIjtcbmltcG9ydCBpbnNwZWN0IGZyb20gXCIuLi9qc3V0aWxzL2luc3BlY3QubWpzXCI7XG5pbXBvcnQgbWFwVmFsdWUgZnJvbSBcIi4uL2pzdXRpbHMvbWFwVmFsdWUubWpzXCI7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gXCIuLi9qc3V0aWxzL2ludmFyaWFudC5tanNcIjtcbmltcG9ydCBkZXZBc3NlcnQgZnJvbSBcIi4uL2pzdXRpbHMvZGV2QXNzZXJ0Lm1qc1wiO1xuaW1wb3J0IHsgS2luZCB9IGZyb20gXCIuLi9sYW5ndWFnZS9raW5kcy5tanNcIjtcbmltcG9ydCB7IFRva2VuS2luZCB9IGZyb20gXCIuLi9sYW5ndWFnZS90b2tlbktpbmQubWpzXCI7XG5pbXBvcnQgeyBkZWRlbnRCbG9ja1N0cmluZ1ZhbHVlIH0gZnJvbSBcIi4uL2xhbmd1YWdlL2Jsb2NrU3RyaW5nLm1qc1wiO1xuaW1wb3J0IHsgaXNUeXBlRGVmaW5pdGlvbk5vZGUsIGlzVHlwZUV4dGVuc2lvbk5vZGUgfSBmcm9tIFwiLi4vbGFuZ3VhZ2UvcHJlZGljYXRlcy5tanNcIjtcbmltcG9ydCB7IGFzc2VydFZhbGlkU0RMRXh0ZW5zaW9uIH0gZnJvbSBcIi4uL3ZhbGlkYXRpb24vdmFsaWRhdGUubWpzXCI7XG5pbXBvcnQgeyBnZXREaXJlY3RpdmVWYWx1ZXMgfSBmcm9tIFwiLi4vZXhlY3V0aW9uL3ZhbHVlcy5tanNcIjtcbmltcG9ydCB7IGFzc2VydFNjaGVtYSwgR3JhcGhRTFNjaGVtYSB9IGZyb20gXCIuLi90eXBlL3NjaGVtYS5tanNcIjtcbmltcG9ydCB7IHNwZWNpZmllZFNjYWxhclR5cGVzLCBpc1NwZWNpZmllZFNjYWxhclR5cGUgfSBmcm9tIFwiLi4vdHlwZS9zY2FsYXJzLm1qc1wiO1xuaW1wb3J0IHsgaW50cm9zcGVjdGlvblR5cGVzLCBpc0ludHJvc3BlY3Rpb25UeXBlIH0gZnJvbSBcIi4uL3R5cGUvaW50cm9zcGVjdGlvbi5tanNcIjtcbmltcG9ydCB7IEdyYXBoUUxEaXJlY3RpdmUsIEdyYXBoUUxEZXByZWNhdGVkRGlyZWN0aXZlLCBHcmFwaFFMU3BlY2lmaWVkQnlEaXJlY3RpdmUgfSBmcm9tIFwiLi4vdHlwZS9kaXJlY3RpdmVzLm1qc1wiO1xuaW1wb3J0IHsgaXNTY2FsYXJUeXBlLCBpc09iamVjdFR5cGUsIGlzSW50ZXJmYWNlVHlwZSwgaXNVbmlvblR5cGUsIGlzTGlzdFR5cGUsIGlzTm9uTnVsbFR5cGUsIGlzRW51bVR5cGUsIGlzSW5wdXRPYmplY3RUeXBlLCBHcmFwaFFMTGlzdCwgR3JhcGhRTE5vbk51bGwsIEdyYXBoUUxTY2FsYXJUeXBlLCBHcmFwaFFMT2JqZWN0VHlwZSwgR3JhcGhRTEludGVyZmFjZVR5cGUsIEdyYXBoUUxVbmlvblR5cGUsIEdyYXBoUUxFbnVtVHlwZSwgR3JhcGhRTElucHV0T2JqZWN0VHlwZSB9IGZyb20gXCIuLi90eXBlL2RlZmluaXRpb24ubWpzXCI7XG5pbXBvcnQgeyB2YWx1ZUZyb21BU1QgfSBmcm9tIFwiLi92YWx1ZUZyb21BU1QubWpzXCI7XG5cbi8qKlxuICogUHJvZHVjZXMgYSBuZXcgc2NoZW1hIGdpdmVuIGFuIGV4aXN0aW5nIHNjaGVtYSBhbmQgYSBkb2N1bWVudCB3aGljaCBtYXlcbiAqIGNvbnRhaW4gR3JhcGhRTCB0eXBlIGV4dGVuc2lvbnMgYW5kIGRlZmluaXRpb25zLiBUaGUgb3JpZ2luYWwgc2NoZW1hIHdpbGxcbiAqIHJlbWFpbiB1bmFsdGVyZWQuXG4gKlxuICogQmVjYXVzZSBhIHNjaGVtYSByZXByZXNlbnRzIGEgZ3JhcGggb2YgcmVmZXJlbmNlcywgYSBzY2hlbWEgY2Fubm90IGJlXG4gKiBleHRlbmRlZCB3aXRob3V0IGVmZmVjdGl2ZWx5IG1ha2luZyBhbiBlbnRpcmUgY29weS4gV2UgZG8gbm90IGtub3cgdW50aWwgaXQnc1xuICogdG9vIGxhdGUgaWYgc3ViZ3JhcGhzIHJlbWFpbiB1bmNoYW5nZWQuXG4gKlxuICogVGhpcyBhbGdvcml0aG0gY29waWVzIHRoZSBwcm92aWRlZCBzY2hlbWEsIGFwcGx5aW5nIGV4dGVuc2lvbnMgd2hpbGVcbiAqIHByb2R1Y2luZyB0aGUgY29weS4gVGhlIG9yaWdpbmFsIHNjaGVtYSByZW1haW5zIHVuYWx0ZXJlZC5cbiAqXG4gKiBBY2NlcHRzIG9wdGlvbnMgYXMgYSB0aGlyZCBhcmd1bWVudDpcbiAqXG4gKiAgICAtIGNvbW1lbnREZXNjcmlwdGlvbnM6XG4gKiAgICAgICAgUHJvdmlkZSB0cnVlIHRvIHVzZSBwcmVjZWRpbmcgY29tbWVudHMgYXMgdGhlIGRlc2NyaXB0aW9uLlxuICpcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV4dGVuZFNjaGVtYShzY2hlbWEsIGRvY3VtZW50QVNULCBvcHRpb25zKSB7XG4gIGFzc2VydFNjaGVtYShzY2hlbWEpO1xuICBkb2N1bWVudEFTVCAhPSBudWxsICYmIGRvY3VtZW50QVNULmtpbmQgPT09IEtpbmQuRE9DVU1FTlQgfHwgZGV2QXNzZXJ0KDAsICdNdXN0IHByb3ZpZGUgdmFsaWQgRG9jdW1lbnQgQVNULicpO1xuXG4gIGlmICgob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmFzc3VtZVZhbGlkKSAhPT0gdHJ1ZSAmJiAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmFzc3VtZVZhbGlkU0RMKSAhPT0gdHJ1ZSkge1xuICAgIGFzc2VydFZhbGlkU0RMRXh0ZW5zaW9uKGRvY3VtZW50QVNULCBzY2hlbWEpO1xuICB9XG5cbiAgdmFyIHNjaGVtYUNvbmZpZyA9IHNjaGVtYS50b0NvbmZpZygpO1xuICB2YXIgZXh0ZW5kZWRDb25maWcgPSBleHRlbmRTY2hlbWFJbXBsKHNjaGVtYUNvbmZpZywgZG9jdW1lbnRBU1QsIG9wdGlvbnMpO1xuICByZXR1cm4gc2NoZW1hQ29uZmlnID09PSBleHRlbmRlZENvbmZpZyA/IHNjaGVtYSA6IG5ldyBHcmFwaFFMU2NoZW1hKGV4dGVuZGVkQ29uZmlnKTtcbn1cbi8qKlxuICogQGludGVybmFsXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGV4dGVuZFNjaGVtYUltcGwoc2NoZW1hQ29uZmlnLCBkb2N1bWVudEFTVCwgb3B0aW9ucykge1xuICB2YXIgX3NjaGVtYURlZiwgX3NjaGVtYURlZiRkZXNjcmlwdGlvLCBfc2NoZW1hRGVmMiwgX29wdGlvbnMkYXNzdW1lVmFsaWQ7XG5cbiAgLy8gQ29sbGVjdCB0aGUgdHlwZSBkZWZpbml0aW9ucyBhbmQgZXh0ZW5zaW9ucyBmb3VuZCBpbiB0aGUgZG9jdW1lbnQuXG4gIHZhciB0eXBlRGVmcyA9IFtdO1xuICB2YXIgdHlwZUV4dGVuc2lvbnNNYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpOyAvLyBOZXcgZGlyZWN0aXZlcyBhbmQgdHlwZXMgYXJlIHNlcGFyYXRlIGJlY2F1c2UgYSBkaXJlY3RpdmVzIGFuZCB0eXBlcyBjYW5cbiAgLy8gaGF2ZSB0aGUgc2FtZSBuYW1lLiBGb3IgZXhhbXBsZSwgYSB0eXBlIG5hbWVkIFwic2tpcFwiLlxuXG4gIHZhciBkaXJlY3RpdmVEZWZzID0gW107XG4gIHZhciBzY2hlbWFEZWY7IC8vIFNjaGVtYSBleHRlbnNpb25zIGFyZSBjb2xsZWN0ZWQgd2hpY2ggbWF5IGFkZCBhZGRpdGlvbmFsIG9wZXJhdGlvbiB0eXBlcy5cblxuICB2YXIgc2NoZW1hRXh0ZW5zaW9ucyA9IFtdO1xuXG4gIGZvciAodmFyIF9pMiA9IDAsIF9kb2N1bWVudEFTVCRkZWZpbml0aTIgPSBkb2N1bWVudEFTVC5kZWZpbml0aW9uczsgX2kyIDwgX2RvY3VtZW50QVNUJGRlZmluaXRpMi5sZW5ndGg7IF9pMisrKSB7XG4gICAgdmFyIGRlZiA9IF9kb2N1bWVudEFTVCRkZWZpbml0aTJbX2kyXTtcblxuICAgIGlmIChkZWYua2luZCA9PT0gS2luZC5TQ0hFTUFfREVGSU5JVElPTikge1xuICAgICAgc2NoZW1hRGVmID0gZGVmO1xuICAgIH0gZWxzZSBpZiAoZGVmLmtpbmQgPT09IEtpbmQuU0NIRU1BX0VYVEVOU0lPTikge1xuICAgICAgc2NoZW1hRXh0ZW5zaW9ucy5wdXNoKGRlZik7XG4gICAgfSBlbHNlIGlmIChpc1R5cGVEZWZpbml0aW9uTm9kZShkZWYpKSB7XG4gICAgICB0eXBlRGVmcy5wdXNoKGRlZik7XG4gICAgfSBlbHNlIGlmIChpc1R5cGVFeHRlbnNpb25Ob2RlKGRlZikpIHtcbiAgICAgIHZhciBleHRlbmRlZFR5cGVOYW1lID0gZGVmLm5hbWUudmFsdWU7XG4gICAgICB2YXIgZXhpc3RpbmdUeXBlRXh0ZW5zaW9ucyA9IHR5cGVFeHRlbnNpb25zTWFwW2V4dGVuZGVkVHlwZU5hbWVdO1xuICAgICAgdHlwZUV4dGVuc2lvbnNNYXBbZXh0ZW5kZWRUeXBlTmFtZV0gPSBleGlzdGluZ1R5cGVFeHRlbnNpb25zID8gZXhpc3RpbmdUeXBlRXh0ZW5zaW9ucy5jb25jYXQoW2RlZl0pIDogW2RlZl07XG4gICAgfSBlbHNlIGlmIChkZWYua2luZCA9PT0gS2luZC5ESVJFQ1RJVkVfREVGSU5JVElPTikge1xuICAgICAgZGlyZWN0aXZlRGVmcy5wdXNoKGRlZik7XG4gICAgfVxuICB9IC8vIElmIHRoaXMgZG9jdW1lbnQgY29udGFpbnMgbm8gbmV3IHR5cGVzLCBleHRlbnNpb25zLCBvciBkaXJlY3RpdmVzIHRoZW5cbiAgLy8gcmV0dXJuIHRoZSBzYW1lIHVubW9kaWZpZWQgR3JhcGhRTFNjaGVtYSBpbnN0YW5jZS5cblxuXG4gIGlmIChPYmplY3Qua2V5cyh0eXBlRXh0ZW5zaW9uc01hcCkubGVuZ3RoID09PSAwICYmIHR5cGVEZWZzLmxlbmd0aCA9PT0gMCAmJiBkaXJlY3RpdmVEZWZzLmxlbmd0aCA9PT0gMCAmJiBzY2hlbWFFeHRlbnNpb25zLmxlbmd0aCA9PT0gMCAmJiBzY2hlbWFEZWYgPT0gbnVsbCkge1xuICAgIHJldHVybiBzY2hlbWFDb25maWc7XG4gIH1cblxuICB2YXIgdHlwZU1hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgZm9yICh2YXIgX2k0ID0gMCwgX3NjaGVtYUNvbmZpZyR0eXBlczIgPSBzY2hlbWFDb25maWcudHlwZXM7IF9pNCA8IF9zY2hlbWFDb25maWckdHlwZXMyLmxlbmd0aDsgX2k0KyspIHtcbiAgICB2YXIgZXhpc3RpbmdUeXBlID0gX3NjaGVtYUNvbmZpZyR0eXBlczJbX2k0XTtcbiAgICB0eXBlTWFwW2V4aXN0aW5nVHlwZS5uYW1lXSA9IGV4dGVuZE5hbWVkVHlwZShleGlzdGluZ1R5cGUpO1xuICB9XG5cbiAgZm9yICh2YXIgX2k2ID0gMDsgX2k2IDwgdHlwZURlZnMubGVuZ3RoOyBfaTYrKykge1xuICAgIHZhciBfc3RkVHlwZU1hcCRuYW1lO1xuXG4gICAgdmFyIHR5cGVOb2RlID0gdHlwZURlZnNbX2k2XTtcbiAgICB2YXIgbmFtZSA9IHR5cGVOb2RlLm5hbWUudmFsdWU7XG4gICAgdHlwZU1hcFtuYW1lXSA9IChfc3RkVHlwZU1hcCRuYW1lID0gc3RkVHlwZU1hcFtuYW1lXSkgIT09IG51bGwgJiYgX3N0ZFR5cGVNYXAkbmFtZSAhPT0gdm9pZCAwID8gX3N0ZFR5cGVNYXAkbmFtZSA6IGJ1aWxkVHlwZSh0eXBlTm9kZSk7XG4gIH1cblxuICB2YXIgb3BlcmF0aW9uVHlwZXMgPSBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe1xuICAgIC8vIEdldCB0aGUgZXh0ZW5kZWQgcm9vdCBvcGVyYXRpb24gdHlwZXMuXG4gICAgcXVlcnk6IHNjaGVtYUNvbmZpZy5xdWVyeSAmJiByZXBsYWNlTmFtZWRUeXBlKHNjaGVtYUNvbmZpZy5xdWVyeSksXG4gICAgbXV0YXRpb246IHNjaGVtYUNvbmZpZy5tdXRhdGlvbiAmJiByZXBsYWNlTmFtZWRUeXBlKHNjaGVtYUNvbmZpZy5tdXRhdGlvbiksXG4gICAgc3Vic2NyaXB0aW9uOiBzY2hlbWFDb25maWcuc3Vic2NyaXB0aW9uICYmIHJlcGxhY2VOYW1lZFR5cGUoc2NoZW1hQ29uZmlnLnN1YnNjcmlwdGlvbilcbiAgfSwgc2NoZW1hRGVmICYmIGdldE9wZXJhdGlvblR5cGVzKFtzY2hlbWFEZWZdKSksIGdldE9wZXJhdGlvblR5cGVzKHNjaGVtYUV4dGVuc2lvbnMpKTsgLy8gVGhlbiBwcm9kdWNlIGFuZCByZXR1cm4gYSBTY2hlbWEgY29uZmlnIHdpdGggdGhlc2UgdHlwZXMuXG5cblxuICByZXR1cm4gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHtcbiAgICBkZXNjcmlwdGlvbjogKF9zY2hlbWFEZWYgPSBzY2hlbWFEZWYpID09PSBudWxsIHx8IF9zY2hlbWFEZWYgPT09IHZvaWQgMCA/IHZvaWQgMCA6IChfc2NoZW1hRGVmJGRlc2NyaXB0aW8gPSBfc2NoZW1hRGVmLmRlc2NyaXB0aW9uKSA9PT0gbnVsbCB8fCBfc2NoZW1hRGVmJGRlc2NyaXB0aW8gPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9zY2hlbWFEZWYkZGVzY3JpcHRpby52YWx1ZVxuICB9LCBvcGVyYXRpb25UeXBlcyksIHt9LCB7XG4gICAgdHlwZXM6IG9iamVjdFZhbHVlcyh0eXBlTWFwKSxcbiAgICBkaXJlY3RpdmVzOiBbXS5jb25jYXQoc2NoZW1hQ29uZmlnLmRpcmVjdGl2ZXMubWFwKHJlcGxhY2VEaXJlY3RpdmUpLCBkaXJlY3RpdmVEZWZzLm1hcChidWlsZERpcmVjdGl2ZSkpLFxuICAgIGV4dGVuc2lvbnM6IHVuZGVmaW5lZCxcbiAgICBhc3ROb2RlOiAoX3NjaGVtYURlZjIgPSBzY2hlbWFEZWYpICE9PSBudWxsICYmIF9zY2hlbWFEZWYyICE9PSB2b2lkIDAgPyBfc2NoZW1hRGVmMiA6IHNjaGVtYUNvbmZpZy5hc3ROb2RlLFxuICAgIGV4dGVuc2lvbkFTVE5vZGVzOiBzY2hlbWFDb25maWcuZXh0ZW5zaW9uQVNUTm9kZXMuY29uY2F0KHNjaGVtYUV4dGVuc2lvbnMpLFxuICAgIGFzc3VtZVZhbGlkOiAoX29wdGlvbnMkYXNzdW1lVmFsaWQgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuYXNzdW1lVmFsaWQpICE9PSBudWxsICYmIF9vcHRpb25zJGFzc3VtZVZhbGlkICE9PSB2b2lkIDAgPyBfb3B0aW9ucyRhc3N1bWVWYWxpZCA6IGZhbHNlXG4gIH0pOyAvLyBCZWxvdyBhcmUgZnVuY3Rpb25zIHVzZWQgZm9yIHByb2R1Y2luZyB0aGlzIHNjaGVtYSB0aGF0IGhhdmUgY2xvc2VkIG92ZXJcbiAgLy8gdGhpcyBzY29wZSBhbmQgaGF2ZSBhY2Nlc3MgdG8gdGhlIHNjaGVtYSwgY2FjaGUsIGFuZCBuZXdseSBkZWZpbmVkIHR5cGVzLlxuXG4gIGZ1bmN0aW9uIHJlcGxhY2VUeXBlKHR5cGUpIHtcbiAgICBpZiAoaXNMaXN0VHlwZSh0eXBlKSkge1xuICAgICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtcmV0dXJuXVxuICAgICAgcmV0dXJuIG5ldyBHcmFwaFFMTGlzdChyZXBsYWNlVHlwZSh0eXBlLm9mVHlwZSkpO1xuICAgIH1cblxuICAgIGlmIChpc05vbk51bGxUeXBlKHR5cGUpKSB7XG4gICAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1yZXR1cm5dXG4gICAgICByZXR1cm4gbmV3IEdyYXBoUUxOb25OdWxsKHJlcGxhY2VUeXBlKHR5cGUub2ZUeXBlKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcGxhY2VOYW1lZFR5cGUodHlwZSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlTmFtZWRUeXBlKHR5cGUpIHtcbiAgICAvLyBOb3RlOiBXaGlsZSB0aGlzIGNvdWxkIG1ha2UgZWFybHkgYXNzZXJ0aW9ucyB0byBnZXQgdGhlIGNvcnJlY3RseVxuICAgIC8vIHR5cGVkIHZhbHVlcywgdGhhdCB3b3VsZCB0aHJvdyBpbW1lZGlhdGVseSB3aGlsZSB0eXBlIHN5c3RlbVxuICAgIC8vIHZhbGlkYXRpb24gd2l0aCB2YWxpZGF0ZVNjaGVtYSgpIHdpbGwgcHJvZHVjZSBtb3JlIGFjdGlvbmFibGUgcmVzdWx0cy5cbiAgICByZXR1cm4gdHlwZU1hcFt0eXBlLm5hbWVdO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZURpcmVjdGl2ZShkaXJlY3RpdmUpIHtcbiAgICB2YXIgY29uZmlnID0gZGlyZWN0aXZlLnRvQ29uZmlnKCk7XG4gICAgcmV0dXJuIG5ldyBHcmFwaFFMRGlyZWN0aXZlKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgY29uZmlnKSwge30sIHtcbiAgICAgIGFyZ3M6IG1hcFZhbHVlKGNvbmZpZy5hcmdzLCBleHRlbmRBcmcpXG4gICAgfSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gZXh0ZW5kTmFtZWRUeXBlKHR5cGUpIHtcbiAgICBpZiAoaXNJbnRyb3NwZWN0aW9uVHlwZSh0eXBlKSB8fCBpc1NwZWNpZmllZFNjYWxhclR5cGUodHlwZSkpIHtcbiAgICAgIC8vIEJ1aWx0aW4gdHlwZXMgYXJlIG5vdCBleHRlbmRlZC5cbiAgICAgIHJldHVybiB0eXBlO1xuICAgIH1cblxuICAgIGlmIChpc1NjYWxhclR5cGUodHlwZSkpIHtcbiAgICAgIHJldHVybiBleHRlbmRTY2FsYXJUeXBlKHR5cGUpO1xuICAgIH1cblxuICAgIGlmIChpc09iamVjdFR5cGUodHlwZSkpIHtcbiAgICAgIHJldHVybiBleHRlbmRPYmplY3RUeXBlKHR5cGUpO1xuICAgIH1cblxuICAgIGlmIChpc0ludGVyZmFjZVR5cGUodHlwZSkpIHtcbiAgICAgIHJldHVybiBleHRlbmRJbnRlcmZhY2VUeXBlKHR5cGUpO1xuICAgIH1cblxuICAgIGlmIChpc1VuaW9uVHlwZSh0eXBlKSkge1xuICAgICAgcmV0dXJuIGV4dGVuZFVuaW9uVHlwZSh0eXBlKTtcbiAgICB9XG5cbiAgICBpZiAoaXNFbnVtVHlwZSh0eXBlKSkge1xuICAgICAgcmV0dXJuIGV4dGVuZEVudW1UeXBlKHR5cGUpO1xuICAgIH0gLy8gaXN0YW5idWwgaWdub3JlIGVsc2UgKFNlZTogJ2h0dHBzOi8vZ2l0aHViLmNvbS9ncmFwaHFsL2dyYXBocWwtanMvaXNzdWVzLzI2MTgnKVxuXG5cbiAgICBpZiAoaXNJbnB1dE9iamVjdFR5cGUodHlwZSkpIHtcbiAgICAgIHJldHVybiBleHRlbmRJbnB1dE9iamVjdFR5cGUodHlwZSk7XG4gICAgfSAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAoTm90IHJlYWNoYWJsZS4gQWxsIHBvc3NpYmxlIHR5cGVzIGhhdmUgYmVlbiBjb25zaWRlcmVkKVxuXG5cbiAgICBmYWxzZSB8fCBpbnZhcmlhbnQoMCwgJ1VuZXhwZWN0ZWQgdHlwZTogJyArIGluc3BlY3QodHlwZSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gZXh0ZW5kSW5wdXRPYmplY3RUeXBlKHR5cGUpIHtcbiAgICB2YXIgX3R5cGVFeHRlbnNpb25zTWFwJGNvO1xuXG4gICAgdmFyIGNvbmZpZyA9IHR5cGUudG9Db25maWcoKTtcbiAgICB2YXIgZXh0ZW5zaW9ucyA9IChfdHlwZUV4dGVuc2lvbnNNYXAkY28gPSB0eXBlRXh0ZW5zaW9uc01hcFtjb25maWcubmFtZV0pICE9PSBudWxsICYmIF90eXBlRXh0ZW5zaW9uc01hcCRjbyAhPT0gdm9pZCAwID8gX3R5cGVFeHRlbnNpb25zTWFwJGNvIDogW107XG4gICAgcmV0dXJuIG5ldyBHcmFwaFFMSW5wdXRPYmplY3RUeXBlKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgY29uZmlnKSwge30sIHtcbiAgICAgIGZpZWxkczogZnVuY3Rpb24gZmllbGRzKCkge1xuICAgICAgICByZXR1cm4gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBtYXBWYWx1ZShjb25maWcuZmllbGRzLCBmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgICAgICByZXR1cm4gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBmaWVsZCksIHt9LCB7XG4gICAgICAgICAgICB0eXBlOiByZXBsYWNlVHlwZShmaWVsZC50eXBlKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KSksIGJ1aWxkSW5wdXRGaWVsZE1hcChleHRlbnNpb25zKSk7XG4gICAgICB9LFxuICAgICAgZXh0ZW5zaW9uQVNUTm9kZXM6IGNvbmZpZy5leHRlbnNpb25BU1ROb2Rlcy5jb25jYXQoZXh0ZW5zaW9ucylcbiAgICB9KSk7XG4gIH1cblxuICBmdW5jdGlvbiBleHRlbmRFbnVtVHlwZSh0eXBlKSB7XG4gICAgdmFyIF90eXBlRXh0ZW5zaW9uc01hcCR0eTtcblxuICAgIHZhciBjb25maWcgPSB0eXBlLnRvQ29uZmlnKCk7XG4gICAgdmFyIGV4dGVuc2lvbnMgPSAoX3R5cGVFeHRlbnNpb25zTWFwJHR5ID0gdHlwZUV4dGVuc2lvbnNNYXBbdHlwZS5uYW1lXSkgIT09IG51bGwgJiYgX3R5cGVFeHRlbnNpb25zTWFwJHR5ICE9PSB2b2lkIDAgPyBfdHlwZUV4dGVuc2lvbnNNYXAkdHkgOiBbXTtcbiAgICByZXR1cm4gbmV3IEdyYXBoUUxFbnVtVHlwZShfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGNvbmZpZyksIHt9LCB7XG4gICAgICB2YWx1ZXM6IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgY29uZmlnLnZhbHVlcyksIGJ1aWxkRW51bVZhbHVlTWFwKGV4dGVuc2lvbnMpKSxcbiAgICAgIGV4dGVuc2lvbkFTVE5vZGVzOiBjb25maWcuZXh0ZW5zaW9uQVNUTm9kZXMuY29uY2F0KGV4dGVuc2lvbnMpXG4gICAgfSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gZXh0ZW5kU2NhbGFyVHlwZSh0eXBlKSB7XG4gICAgdmFyIF90eXBlRXh0ZW5zaW9uc01hcCRjbzI7XG5cbiAgICB2YXIgY29uZmlnID0gdHlwZS50b0NvbmZpZygpO1xuICAgIHZhciBleHRlbnNpb25zID0gKF90eXBlRXh0ZW5zaW9uc01hcCRjbzIgPSB0eXBlRXh0ZW5zaW9uc01hcFtjb25maWcubmFtZV0pICE9PSBudWxsICYmIF90eXBlRXh0ZW5zaW9uc01hcCRjbzIgIT09IHZvaWQgMCA/IF90eXBlRXh0ZW5zaW9uc01hcCRjbzIgOiBbXTtcbiAgICB2YXIgc3BlY2lmaWVkQnlVcmwgPSBjb25maWcuc3BlY2lmaWVkQnlVcmw7XG5cbiAgICBmb3IgKHZhciBfaTggPSAwOyBfaTggPCBleHRlbnNpb25zLmxlbmd0aDsgX2k4KyspIHtcbiAgICAgIHZhciBfZ2V0U3BlY2lmaWVkQnlVcmw7XG5cbiAgICAgIHZhciBleHRlbnNpb25Ob2RlID0gZXh0ZW5zaW9uc1tfaThdO1xuICAgICAgc3BlY2lmaWVkQnlVcmwgPSAoX2dldFNwZWNpZmllZEJ5VXJsID0gZ2V0U3BlY2lmaWVkQnlVcmwoZXh0ZW5zaW9uTm9kZSkpICE9PSBudWxsICYmIF9nZXRTcGVjaWZpZWRCeVVybCAhPT0gdm9pZCAwID8gX2dldFNwZWNpZmllZEJ5VXJsIDogc3BlY2lmaWVkQnlVcmw7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBHcmFwaFFMU2NhbGFyVHlwZShfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGNvbmZpZyksIHt9LCB7XG4gICAgICBzcGVjaWZpZWRCeVVybDogc3BlY2lmaWVkQnlVcmwsXG4gICAgICBleHRlbnNpb25BU1ROb2RlczogY29uZmlnLmV4dGVuc2lvbkFTVE5vZGVzLmNvbmNhdChleHRlbnNpb25zKVxuICAgIH0pKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGV4dGVuZE9iamVjdFR5cGUodHlwZSkge1xuICAgIHZhciBfdHlwZUV4dGVuc2lvbnNNYXAkY28zO1xuXG4gICAgdmFyIGNvbmZpZyA9IHR5cGUudG9Db25maWcoKTtcbiAgICB2YXIgZXh0ZW5zaW9ucyA9IChfdHlwZUV4dGVuc2lvbnNNYXAkY28zID0gdHlwZUV4dGVuc2lvbnNNYXBbY29uZmlnLm5hbWVdKSAhPT0gbnVsbCAmJiBfdHlwZUV4dGVuc2lvbnNNYXAkY28zICE9PSB2b2lkIDAgPyBfdHlwZUV4dGVuc2lvbnNNYXAkY28zIDogW107XG4gICAgcmV0dXJuIG5ldyBHcmFwaFFMT2JqZWN0VHlwZShfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGNvbmZpZyksIHt9LCB7XG4gICAgICBpbnRlcmZhY2VzOiBmdW5jdGlvbiBpbnRlcmZhY2VzKCkge1xuICAgICAgICByZXR1cm4gW10uY29uY2F0KHR5cGUuZ2V0SW50ZXJmYWNlcygpLm1hcChyZXBsYWNlTmFtZWRUeXBlKSwgYnVpbGRJbnRlcmZhY2VzKGV4dGVuc2lvbnMpKTtcbiAgICAgIH0sXG4gICAgICBmaWVsZHM6IGZ1bmN0aW9uIGZpZWxkcygpIHtcbiAgICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgbWFwVmFsdWUoY29uZmlnLmZpZWxkcywgZXh0ZW5kRmllbGQpKSwgYnVpbGRGaWVsZE1hcChleHRlbnNpb25zKSk7XG4gICAgICB9LFxuICAgICAgZXh0ZW5zaW9uQVNUTm9kZXM6IGNvbmZpZy5leHRlbnNpb25BU1ROb2Rlcy5jb25jYXQoZXh0ZW5zaW9ucylcbiAgICB9KSk7XG4gIH1cblxuICBmdW5jdGlvbiBleHRlbmRJbnRlcmZhY2VUeXBlKHR5cGUpIHtcbiAgICB2YXIgX3R5cGVFeHRlbnNpb25zTWFwJGNvNDtcblxuICAgIHZhciBjb25maWcgPSB0eXBlLnRvQ29uZmlnKCk7XG4gICAgdmFyIGV4dGVuc2lvbnMgPSAoX3R5cGVFeHRlbnNpb25zTWFwJGNvNCA9IHR5cGVFeHRlbnNpb25zTWFwW2NvbmZpZy5uYW1lXSkgIT09IG51bGwgJiYgX3R5cGVFeHRlbnNpb25zTWFwJGNvNCAhPT0gdm9pZCAwID8gX3R5cGVFeHRlbnNpb25zTWFwJGNvNCA6IFtdO1xuICAgIHJldHVybiBuZXcgR3JhcGhRTEludGVyZmFjZVR5cGUoX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBjb25maWcpLCB7fSwge1xuICAgICAgaW50ZXJmYWNlczogZnVuY3Rpb24gaW50ZXJmYWNlcygpIHtcbiAgICAgICAgcmV0dXJuIFtdLmNvbmNhdCh0eXBlLmdldEludGVyZmFjZXMoKS5tYXAocmVwbGFjZU5hbWVkVHlwZSksIGJ1aWxkSW50ZXJmYWNlcyhleHRlbnNpb25zKSk7XG4gICAgICB9LFxuICAgICAgZmllbGRzOiBmdW5jdGlvbiBmaWVsZHMoKSB7XG4gICAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIG1hcFZhbHVlKGNvbmZpZy5maWVsZHMsIGV4dGVuZEZpZWxkKSksIGJ1aWxkRmllbGRNYXAoZXh0ZW5zaW9ucykpO1xuICAgICAgfSxcbiAgICAgIGV4dGVuc2lvbkFTVE5vZGVzOiBjb25maWcuZXh0ZW5zaW9uQVNUTm9kZXMuY29uY2F0KGV4dGVuc2lvbnMpXG4gICAgfSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gZXh0ZW5kVW5pb25UeXBlKHR5cGUpIHtcbiAgICB2YXIgX3R5cGVFeHRlbnNpb25zTWFwJGNvNTtcblxuICAgIHZhciBjb25maWcgPSB0eXBlLnRvQ29uZmlnKCk7XG4gICAgdmFyIGV4dGVuc2lvbnMgPSAoX3R5cGVFeHRlbnNpb25zTWFwJGNvNSA9IHR5cGVFeHRlbnNpb25zTWFwW2NvbmZpZy5uYW1lXSkgIT09IG51bGwgJiYgX3R5cGVFeHRlbnNpb25zTWFwJGNvNSAhPT0gdm9pZCAwID8gX3R5cGVFeHRlbnNpb25zTWFwJGNvNSA6IFtdO1xuICAgIHJldHVybiBuZXcgR3JhcGhRTFVuaW9uVHlwZShfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGNvbmZpZyksIHt9LCB7XG4gICAgICB0eXBlczogZnVuY3Rpb24gdHlwZXMoKSB7XG4gICAgICAgIHJldHVybiBbXS5jb25jYXQodHlwZS5nZXRUeXBlcygpLm1hcChyZXBsYWNlTmFtZWRUeXBlKSwgYnVpbGRVbmlvblR5cGVzKGV4dGVuc2lvbnMpKTtcbiAgICAgIH0sXG4gICAgICBleHRlbnNpb25BU1ROb2RlczogY29uZmlnLmV4dGVuc2lvbkFTVE5vZGVzLmNvbmNhdChleHRlbnNpb25zKVxuICAgIH0pKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGV4dGVuZEZpZWxkKGZpZWxkKSB7XG4gICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgZmllbGQpLCB7fSwge1xuICAgICAgdHlwZTogcmVwbGFjZVR5cGUoZmllbGQudHlwZSksXG4gICAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1jYWxsXVxuICAgICAgYXJnczogbWFwVmFsdWUoZmllbGQuYXJncywgZXh0ZW5kQXJnKVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZXh0ZW5kQXJnKGFyZykge1xuICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGFyZyksIHt9LCB7XG4gICAgICB0eXBlOiByZXBsYWNlVHlwZShhcmcudHlwZSlcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldE9wZXJhdGlvblR5cGVzKG5vZGVzKSB7XG4gICAgdmFyIG9wVHlwZXMgPSB7fTtcblxuICAgIGZvciAodmFyIF9pMTAgPSAwOyBfaTEwIDwgbm9kZXMubGVuZ3RoOyBfaTEwKyspIHtcbiAgICAgIHZhciBfbm9kZSRvcGVyYXRpb25UeXBlcztcblxuICAgICAgdmFyIG5vZGUgPSBub2Rlc1tfaTEwXTtcbiAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0IChTZWU6ICdodHRwczovL2dpdGh1Yi5jb20vZ3JhcGhxbC9ncmFwaHFsLWpzL2lzc3Vlcy8yMjAzJylcbiAgICAgIHZhciBvcGVyYXRpb25UeXBlc05vZGVzID0gKF9ub2RlJG9wZXJhdGlvblR5cGVzID0gbm9kZS5vcGVyYXRpb25UeXBlcykgIT09IG51bGwgJiYgX25vZGUkb3BlcmF0aW9uVHlwZXMgIT09IHZvaWQgMCA/IF9ub2RlJG9wZXJhdGlvblR5cGVzIDogW107XG5cbiAgICAgIGZvciAodmFyIF9pMTIgPSAwOyBfaTEyIDwgb3BlcmF0aW9uVHlwZXNOb2Rlcy5sZW5ndGg7IF9pMTIrKykge1xuICAgICAgICB2YXIgb3BlcmF0aW9uVHlwZSA9IG9wZXJhdGlvblR5cGVzTm9kZXNbX2kxMl07XG4gICAgICAgIG9wVHlwZXNbb3BlcmF0aW9uVHlwZS5vcGVyYXRpb25dID0gZ2V0TmFtZWRUeXBlKG9wZXJhdGlvblR5cGUudHlwZSk7XG4gICAgICB9XG4gICAgfSAvLyBOb3RlOiBXaGlsZSB0aGlzIGNvdWxkIG1ha2UgZWFybHkgYXNzZXJ0aW9ucyB0byBnZXQgdGhlIGNvcnJlY3RseVxuICAgIC8vIHR5cGVkIHZhbHVlcyBiZWxvdywgdGhhdCB3b3VsZCB0aHJvdyBpbW1lZGlhdGVseSB3aGlsZSB0eXBlIHN5c3RlbVxuICAgIC8vIHZhbGlkYXRpb24gd2l0aCB2YWxpZGF0ZVNjaGVtYSgpIHdpbGwgcHJvZHVjZSBtb3JlIGFjdGlvbmFibGUgcmVzdWx0cy5cblxuXG4gICAgcmV0dXJuIG9wVHlwZXM7XG4gIH1cblxuICBmdW5jdGlvbiBnZXROYW1lZFR5cGUobm9kZSkge1xuICAgIHZhciBfc3RkVHlwZU1hcCRuYW1lMjtcblxuICAgIHZhciBuYW1lID0gbm9kZS5uYW1lLnZhbHVlO1xuICAgIHZhciB0eXBlID0gKF9zdGRUeXBlTWFwJG5hbWUyID0gc3RkVHlwZU1hcFtuYW1lXSkgIT09IG51bGwgJiYgX3N0ZFR5cGVNYXAkbmFtZTIgIT09IHZvaWQgMCA/IF9zdGRUeXBlTWFwJG5hbWUyIDogdHlwZU1hcFtuYW1lXTtcblxuICAgIGlmICh0eXBlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlVua25vd24gdHlwZTogXFxcIlwiLmNvbmNhdChuYW1lLCBcIlxcXCIuXCIpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHlwZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFdyYXBwZWRUeXBlKG5vZGUpIHtcbiAgICBpZiAobm9kZS5raW5kID09PSBLaW5kLkxJU1RfVFlQRSkge1xuICAgICAgcmV0dXJuIG5ldyBHcmFwaFFMTGlzdChnZXRXcmFwcGVkVHlwZShub2RlLnR5cGUpKTtcbiAgICB9XG5cbiAgICBpZiAobm9kZS5raW5kID09PSBLaW5kLk5PTl9OVUxMX1RZUEUpIHtcbiAgICAgIHJldHVybiBuZXcgR3JhcGhRTE5vbk51bGwoZ2V0V3JhcHBlZFR5cGUobm9kZS50eXBlKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGdldE5hbWVkVHlwZShub2RlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJ1aWxkRGlyZWN0aXZlKG5vZGUpIHtcbiAgICB2YXIgbG9jYXRpb25zID0gbm9kZS5sb2NhdGlvbnMubWFwKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICB2YXIgdmFsdWUgPSBfcmVmLnZhbHVlO1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0pO1xuICAgIHJldHVybiBuZXcgR3JhcGhRTERpcmVjdGl2ZSh7XG4gICAgICBuYW1lOiBub2RlLm5hbWUudmFsdWUsXG4gICAgICBkZXNjcmlwdGlvbjogZ2V0RGVzY3JpcHRpb24obm9kZSwgb3B0aW9ucyksXG4gICAgICBsb2NhdGlvbnM6IGxvY2F0aW9ucyxcbiAgICAgIGlzUmVwZWF0YWJsZTogbm9kZS5yZXBlYXRhYmxlLFxuICAgICAgYXJnczogYnVpbGRBcmd1bWVudE1hcChub2RlLmFyZ3VtZW50cyksXG4gICAgICBhc3ROb2RlOiBub2RlXG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBidWlsZEZpZWxkTWFwKG5vZGVzKSB7XG4gICAgdmFyIGZpZWxkQ29uZmlnTWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAgIGZvciAodmFyIF9pMTQgPSAwOyBfaTE0IDwgbm9kZXMubGVuZ3RoOyBfaTE0KyspIHtcbiAgICAgIHZhciBfbm9kZSRmaWVsZHM7XG5cbiAgICAgIHZhciBub2RlID0gbm9kZXNbX2kxNF07XG4gICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAoU2VlOiAnaHR0cHM6Ly9naXRodWIuY29tL2dyYXBocWwvZ3JhcGhxbC1qcy9pc3N1ZXMvMjIwMycpXG4gICAgICB2YXIgbm9kZUZpZWxkcyA9IChfbm9kZSRmaWVsZHMgPSBub2RlLmZpZWxkcykgIT09IG51bGwgJiYgX25vZGUkZmllbGRzICE9PSB2b2lkIDAgPyBfbm9kZSRmaWVsZHMgOiBbXTtcblxuICAgICAgZm9yICh2YXIgX2kxNiA9IDA7IF9pMTYgPCBub2RlRmllbGRzLmxlbmd0aDsgX2kxNisrKSB7XG4gICAgICAgIHZhciBmaWVsZCA9IG5vZGVGaWVsZHNbX2kxNl07XG4gICAgICAgIGZpZWxkQ29uZmlnTWFwW2ZpZWxkLm5hbWUudmFsdWVdID0ge1xuICAgICAgICAgIC8vIE5vdGU6IFdoaWxlIHRoaXMgY291bGQgbWFrZSBhc3NlcnRpb25zIHRvIGdldCB0aGUgY29ycmVjdGx5IHR5cGVkXG4gICAgICAgICAgLy8gdmFsdWUsIHRoYXQgd291bGQgdGhyb3cgaW1tZWRpYXRlbHkgd2hpbGUgdHlwZSBzeXN0ZW0gdmFsaWRhdGlvblxuICAgICAgICAgIC8vIHdpdGggdmFsaWRhdGVTY2hlbWEoKSB3aWxsIHByb2R1Y2UgbW9yZSBhY3Rpb25hYmxlIHJlc3VsdHMuXG4gICAgICAgICAgdHlwZTogZ2V0V3JhcHBlZFR5cGUoZmllbGQudHlwZSksXG4gICAgICAgICAgZGVzY3JpcHRpb246IGdldERlc2NyaXB0aW9uKGZpZWxkLCBvcHRpb25zKSxcbiAgICAgICAgICBhcmdzOiBidWlsZEFyZ3VtZW50TWFwKGZpZWxkLmFyZ3VtZW50cyksXG4gICAgICAgICAgZGVwcmVjYXRpb25SZWFzb246IGdldERlcHJlY2F0aW9uUmVhc29uKGZpZWxkKSxcbiAgICAgICAgICBhc3ROb2RlOiBmaWVsZFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmaWVsZENvbmZpZ01hcDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJ1aWxkQXJndW1lbnRNYXAoYXJncykge1xuICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0IChTZWU6ICdodHRwczovL2dpdGh1Yi5jb20vZ3JhcGhxbC9ncmFwaHFsLWpzL2lzc3Vlcy8yMjAzJylcbiAgICB2YXIgYXJnc05vZGVzID0gYXJncyAhPT0gbnVsbCAmJiBhcmdzICE9PSB2b2lkIDAgPyBhcmdzIDogW107XG4gICAgdmFyIGFyZ0NvbmZpZ01hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgICBmb3IgKHZhciBfaTE4ID0gMDsgX2kxOCA8IGFyZ3NOb2Rlcy5sZW5ndGg7IF9pMTgrKykge1xuICAgICAgdmFyIGFyZyA9IGFyZ3NOb2Rlc1tfaTE4XTtcbiAgICAgIC8vIE5vdGU6IFdoaWxlIHRoaXMgY291bGQgbWFrZSBhc3NlcnRpb25zIHRvIGdldCB0aGUgY29ycmVjdGx5IHR5cGVkXG4gICAgICAvLyB2YWx1ZSwgdGhhdCB3b3VsZCB0aHJvdyBpbW1lZGlhdGVseSB3aGlsZSB0eXBlIHN5c3RlbSB2YWxpZGF0aW9uXG4gICAgICAvLyB3aXRoIHZhbGlkYXRlU2NoZW1hKCkgd2lsbCBwcm9kdWNlIG1vcmUgYWN0aW9uYWJsZSByZXN1bHRzLlxuICAgICAgdmFyIHR5cGUgPSBnZXRXcmFwcGVkVHlwZShhcmcudHlwZSk7XG4gICAgICBhcmdDb25maWdNYXBbYXJnLm5hbWUudmFsdWVdID0ge1xuICAgICAgICB0eXBlOiB0eXBlLFxuICAgICAgICBkZXNjcmlwdGlvbjogZ2V0RGVzY3JpcHRpb24oYXJnLCBvcHRpb25zKSxcbiAgICAgICAgZGVmYXVsdFZhbHVlOiB2YWx1ZUZyb21BU1QoYXJnLmRlZmF1bHRWYWx1ZSwgdHlwZSksXG4gICAgICAgIGRlcHJlY2F0aW9uUmVhc29uOiBnZXREZXByZWNhdGlvblJlYXNvbihhcmcpLFxuICAgICAgICBhc3ROb2RlOiBhcmdcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIGFyZ0NvbmZpZ01hcDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJ1aWxkSW5wdXRGaWVsZE1hcChub2Rlcykge1xuICAgIHZhciBpbnB1dEZpZWxkTWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAgIGZvciAodmFyIF9pMjAgPSAwOyBfaTIwIDwgbm9kZXMubGVuZ3RoOyBfaTIwKyspIHtcbiAgICAgIHZhciBfbm9kZSRmaWVsZHMyO1xuXG4gICAgICB2YXIgbm9kZSA9IG5vZGVzW19pMjBdO1xuICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHQgKFNlZTogJ2h0dHBzOi8vZ2l0aHViLmNvbS9ncmFwaHFsL2dyYXBocWwtanMvaXNzdWVzLzIyMDMnKVxuICAgICAgdmFyIGZpZWxkc05vZGVzID0gKF9ub2RlJGZpZWxkczIgPSBub2RlLmZpZWxkcykgIT09IG51bGwgJiYgX25vZGUkZmllbGRzMiAhPT0gdm9pZCAwID8gX25vZGUkZmllbGRzMiA6IFtdO1xuXG4gICAgICBmb3IgKHZhciBfaTIyID0gMDsgX2kyMiA8IGZpZWxkc05vZGVzLmxlbmd0aDsgX2kyMisrKSB7XG4gICAgICAgIHZhciBmaWVsZCA9IGZpZWxkc05vZGVzW19pMjJdO1xuICAgICAgICAvLyBOb3RlOiBXaGlsZSB0aGlzIGNvdWxkIG1ha2UgYXNzZXJ0aW9ucyB0byBnZXQgdGhlIGNvcnJlY3RseSB0eXBlZFxuICAgICAgICAvLyB2YWx1ZSwgdGhhdCB3b3VsZCB0aHJvdyBpbW1lZGlhdGVseSB3aGlsZSB0eXBlIHN5c3RlbSB2YWxpZGF0aW9uXG4gICAgICAgIC8vIHdpdGggdmFsaWRhdGVTY2hlbWEoKSB3aWxsIHByb2R1Y2UgbW9yZSBhY3Rpb25hYmxlIHJlc3VsdHMuXG4gICAgICAgIHZhciB0eXBlID0gZ2V0V3JhcHBlZFR5cGUoZmllbGQudHlwZSk7XG4gICAgICAgIGlucHV0RmllbGRNYXBbZmllbGQubmFtZS52YWx1ZV0gPSB7XG4gICAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAgICBkZXNjcmlwdGlvbjogZ2V0RGVzY3JpcHRpb24oZmllbGQsIG9wdGlvbnMpLFxuICAgICAgICAgIGRlZmF1bHRWYWx1ZTogdmFsdWVGcm9tQVNUKGZpZWxkLmRlZmF1bHRWYWx1ZSwgdHlwZSksXG4gICAgICAgICAgZGVwcmVjYXRpb25SZWFzb246IGdldERlcHJlY2F0aW9uUmVhc29uKGZpZWxkKSxcbiAgICAgICAgICBhc3ROb2RlOiBmaWVsZFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBpbnB1dEZpZWxkTWFwO1xuICB9XG5cbiAgZnVuY3Rpb24gYnVpbGRFbnVtVmFsdWVNYXAobm9kZXMpIHtcbiAgICB2YXIgZW51bVZhbHVlTWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAgIGZvciAodmFyIF9pMjQgPSAwOyBfaTI0IDwgbm9kZXMubGVuZ3RoOyBfaTI0KyspIHtcbiAgICAgIHZhciBfbm9kZSR2YWx1ZXM7XG5cbiAgICAgIHZhciBub2RlID0gbm9kZXNbX2kyNF07XG4gICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAoU2VlOiAnaHR0cHM6Ly9naXRodWIuY29tL2dyYXBocWwvZ3JhcGhxbC1qcy9pc3N1ZXMvMjIwMycpXG4gICAgICB2YXIgdmFsdWVzTm9kZXMgPSAoX25vZGUkdmFsdWVzID0gbm9kZS52YWx1ZXMpICE9PSBudWxsICYmIF9ub2RlJHZhbHVlcyAhPT0gdm9pZCAwID8gX25vZGUkdmFsdWVzIDogW107XG5cbiAgICAgIGZvciAodmFyIF9pMjYgPSAwOyBfaTI2IDwgdmFsdWVzTm9kZXMubGVuZ3RoOyBfaTI2KyspIHtcbiAgICAgICAgdmFyIHZhbHVlID0gdmFsdWVzTm9kZXNbX2kyNl07XG4gICAgICAgIGVudW1WYWx1ZU1hcFt2YWx1ZS5uYW1lLnZhbHVlXSA9IHtcbiAgICAgICAgICBkZXNjcmlwdGlvbjogZ2V0RGVzY3JpcHRpb24odmFsdWUsIG9wdGlvbnMpLFxuICAgICAgICAgIGRlcHJlY2F0aW9uUmVhc29uOiBnZXREZXByZWNhdGlvblJlYXNvbih2YWx1ZSksXG4gICAgICAgICAgYXN0Tm9kZTogdmFsdWVcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZW51bVZhbHVlTWFwO1xuICB9XG5cbiAgZnVuY3Rpb24gYnVpbGRJbnRlcmZhY2VzKG5vZGVzKSB7XG4gICAgdmFyIGludGVyZmFjZXMgPSBbXTtcblxuICAgIGZvciAodmFyIF9pMjggPSAwOyBfaTI4IDwgbm9kZXMubGVuZ3RoOyBfaTI4KyspIHtcbiAgICAgIHZhciBfbm9kZSRpbnRlcmZhY2VzO1xuXG4gICAgICB2YXIgbm9kZSA9IG5vZGVzW19pMjhdO1xuICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHQgKFNlZTogJ2h0dHBzOi8vZ2l0aHViLmNvbS9ncmFwaHFsL2dyYXBocWwtanMvaXNzdWVzLzIyMDMnKVxuICAgICAgdmFyIGludGVyZmFjZXNOb2RlcyA9IChfbm9kZSRpbnRlcmZhY2VzID0gbm9kZS5pbnRlcmZhY2VzKSAhPT0gbnVsbCAmJiBfbm9kZSRpbnRlcmZhY2VzICE9PSB2b2lkIDAgPyBfbm9kZSRpbnRlcmZhY2VzIDogW107XG5cbiAgICAgIGZvciAodmFyIF9pMzAgPSAwOyBfaTMwIDwgaW50ZXJmYWNlc05vZGVzLmxlbmd0aDsgX2kzMCsrKSB7XG4gICAgICAgIHZhciB0eXBlID0gaW50ZXJmYWNlc05vZGVzW19pMzBdO1xuICAgICAgICAvLyBOb3RlOiBXaGlsZSB0aGlzIGNvdWxkIG1ha2UgYXNzZXJ0aW9ucyB0byBnZXQgdGhlIGNvcnJlY3RseSB0eXBlZFxuICAgICAgICAvLyB2YWx1ZXMgYmVsb3csIHRoYXQgd291bGQgdGhyb3cgaW1tZWRpYXRlbHkgd2hpbGUgdHlwZSBzeXN0ZW1cbiAgICAgICAgLy8gdmFsaWRhdGlvbiB3aXRoIHZhbGlkYXRlU2NoZW1hKCkgd2lsbCBwcm9kdWNlIG1vcmUgYWN0aW9uYWJsZVxuICAgICAgICAvLyByZXN1bHRzLlxuICAgICAgICBpbnRlcmZhY2VzLnB1c2goZ2V0TmFtZWRUeXBlKHR5cGUpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gaW50ZXJmYWNlcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGJ1aWxkVW5pb25UeXBlcyhub2Rlcykge1xuICAgIHZhciB0eXBlcyA9IFtdO1xuXG4gICAgZm9yICh2YXIgX2kzMiA9IDA7IF9pMzIgPCBub2Rlcy5sZW5ndGg7IF9pMzIrKykge1xuICAgICAgdmFyIF9ub2RlJHR5cGVzO1xuXG4gICAgICB2YXIgbm9kZSA9IG5vZGVzW19pMzJdO1xuICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHQgKFNlZTogJ2h0dHBzOi8vZ2l0aHViLmNvbS9ncmFwaHFsL2dyYXBocWwtanMvaXNzdWVzLzIyMDMnKVxuICAgICAgdmFyIHR5cGVOb2RlcyA9IChfbm9kZSR0eXBlcyA9IG5vZGUudHlwZXMpICE9PSBudWxsICYmIF9ub2RlJHR5cGVzICE9PSB2b2lkIDAgPyBfbm9kZSR0eXBlcyA6IFtdO1xuXG4gICAgICBmb3IgKHZhciBfaTM0ID0gMDsgX2kzNCA8IHR5cGVOb2Rlcy5sZW5ndGg7IF9pMzQrKykge1xuICAgICAgICB2YXIgdHlwZSA9IHR5cGVOb2Rlc1tfaTM0XTtcbiAgICAgICAgLy8gTm90ZTogV2hpbGUgdGhpcyBjb3VsZCBtYWtlIGFzc2VydGlvbnMgdG8gZ2V0IHRoZSBjb3JyZWN0bHkgdHlwZWRcbiAgICAgICAgLy8gdmFsdWVzIGJlbG93LCB0aGF0IHdvdWxkIHRocm93IGltbWVkaWF0ZWx5IHdoaWxlIHR5cGUgc3lzdGVtXG4gICAgICAgIC8vIHZhbGlkYXRpb24gd2l0aCB2YWxpZGF0ZVNjaGVtYSgpIHdpbGwgcHJvZHVjZSBtb3JlIGFjdGlvbmFibGVcbiAgICAgICAgLy8gcmVzdWx0cy5cbiAgICAgICAgdHlwZXMucHVzaChnZXROYW1lZFR5cGUodHlwZSkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0eXBlcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGJ1aWxkVHlwZShhc3ROb2RlKSB7XG4gICAgdmFyIF90eXBlRXh0ZW5zaW9uc01hcCRuYTtcblxuICAgIHZhciBuYW1lID0gYXN0Tm9kZS5uYW1lLnZhbHVlO1xuICAgIHZhciBkZXNjcmlwdGlvbiA9IGdldERlc2NyaXB0aW9uKGFzdE5vZGUsIG9wdGlvbnMpO1xuICAgIHZhciBleHRlbnNpb25Ob2RlcyA9IChfdHlwZUV4dGVuc2lvbnNNYXAkbmEgPSB0eXBlRXh0ZW5zaW9uc01hcFtuYW1lXSkgIT09IG51bGwgJiYgX3R5cGVFeHRlbnNpb25zTWFwJG5hICE9PSB2b2lkIDAgPyBfdHlwZUV4dGVuc2lvbnNNYXAkbmEgOiBbXTtcblxuICAgIHN3aXRjaCAoYXN0Tm9kZS5raW5kKSB7XG4gICAgICBjYXNlIEtpbmQuT0JKRUNUX1RZUEVfREVGSU5JVElPTjpcbiAgICAgICAge1xuICAgICAgICAgIHZhciBleHRlbnNpb25BU1ROb2RlcyA9IGV4dGVuc2lvbk5vZGVzO1xuICAgICAgICAgIHZhciBhbGxOb2RlcyA9IFthc3ROb2RlXS5jb25jYXQoZXh0ZW5zaW9uQVNUTm9kZXMpO1xuICAgICAgICAgIHJldHVybiBuZXcgR3JhcGhRTE9iamVjdFR5cGUoe1xuICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbixcbiAgICAgICAgICAgIGludGVyZmFjZXM6IGZ1bmN0aW9uIGludGVyZmFjZXMoKSB7XG4gICAgICAgICAgICAgIHJldHVybiBidWlsZEludGVyZmFjZXMoYWxsTm9kZXMpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZpZWxkczogZnVuY3Rpb24gZmllbGRzKCkge1xuICAgICAgICAgICAgICByZXR1cm4gYnVpbGRGaWVsZE1hcChhbGxOb2Rlcyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYXN0Tm9kZTogYXN0Tm9kZSxcbiAgICAgICAgICAgIGV4dGVuc2lvbkFTVE5vZGVzOiBleHRlbnNpb25BU1ROb2Rlc1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgIGNhc2UgS2luZC5JTlRFUkZBQ0VfVFlQRV9ERUZJTklUSU9OOlxuICAgICAgICB7XG4gICAgICAgICAgdmFyIF9leHRlbnNpb25BU1ROb2RlcyA9IGV4dGVuc2lvbk5vZGVzO1xuXG4gICAgICAgICAgdmFyIF9hbGxOb2RlcyA9IFthc3ROb2RlXS5jb25jYXQoX2V4dGVuc2lvbkFTVE5vZGVzKTtcblxuICAgICAgICAgIHJldHVybiBuZXcgR3JhcGhRTEludGVyZmFjZVR5cGUoe1xuICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbixcbiAgICAgICAgICAgIGludGVyZmFjZXM6IGZ1bmN0aW9uIGludGVyZmFjZXMoKSB7XG4gICAgICAgICAgICAgIHJldHVybiBidWlsZEludGVyZmFjZXMoX2FsbE5vZGVzKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmaWVsZHM6IGZ1bmN0aW9uIGZpZWxkcygpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGJ1aWxkRmllbGRNYXAoX2FsbE5vZGVzKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhc3ROb2RlOiBhc3ROb2RlLFxuICAgICAgICAgICAgZXh0ZW5zaW9uQVNUTm9kZXM6IF9leHRlbnNpb25BU1ROb2Rlc1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgIGNhc2UgS2luZC5FTlVNX1RZUEVfREVGSU5JVElPTjpcbiAgICAgICAge1xuICAgICAgICAgIHZhciBfZXh0ZW5zaW9uQVNUTm9kZXMyID0gZXh0ZW5zaW9uTm9kZXM7XG5cbiAgICAgICAgICB2YXIgX2FsbE5vZGVzMiA9IFthc3ROb2RlXS5jb25jYXQoX2V4dGVuc2lvbkFTVE5vZGVzMik7XG5cbiAgICAgICAgICByZXR1cm4gbmV3IEdyYXBoUUxFbnVtVHlwZSh7XG4gICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgdmFsdWVzOiBidWlsZEVudW1WYWx1ZU1hcChfYWxsTm9kZXMyKSxcbiAgICAgICAgICAgIGFzdE5vZGU6IGFzdE5vZGUsXG4gICAgICAgICAgICBleHRlbnNpb25BU1ROb2RlczogX2V4dGVuc2lvbkFTVE5vZGVzMlxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgIGNhc2UgS2luZC5VTklPTl9UWVBFX0RFRklOSVRJT046XG4gICAgICAgIHtcbiAgICAgICAgICB2YXIgX2V4dGVuc2lvbkFTVE5vZGVzMyA9IGV4dGVuc2lvbk5vZGVzO1xuXG4gICAgICAgICAgdmFyIF9hbGxOb2RlczMgPSBbYXN0Tm9kZV0uY29uY2F0KF9leHRlbnNpb25BU1ROb2RlczMpO1xuXG4gICAgICAgICAgcmV0dXJuIG5ldyBHcmFwaFFMVW5pb25UeXBlKHtcbiAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogZGVzY3JpcHRpb24sXG4gICAgICAgICAgICB0eXBlczogZnVuY3Rpb24gdHlwZXMoKSB7XG4gICAgICAgICAgICAgIHJldHVybiBidWlsZFVuaW9uVHlwZXMoX2FsbE5vZGVzMyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYXN0Tm9kZTogYXN0Tm9kZSxcbiAgICAgICAgICAgIGV4dGVuc2lvbkFTVE5vZGVzOiBfZXh0ZW5zaW9uQVNUTm9kZXMzXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgY2FzZSBLaW5kLlNDQUxBUl9UWVBFX0RFRklOSVRJT046XG4gICAgICAgIHtcbiAgICAgICAgICB2YXIgX2V4dGVuc2lvbkFTVE5vZGVzNCA9IGV4dGVuc2lvbk5vZGVzO1xuICAgICAgICAgIHJldHVybiBuZXcgR3JhcGhRTFNjYWxhclR5cGUoe1xuICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbixcbiAgICAgICAgICAgIHNwZWNpZmllZEJ5VXJsOiBnZXRTcGVjaWZpZWRCeVVybChhc3ROb2RlKSxcbiAgICAgICAgICAgIGFzdE5vZGU6IGFzdE5vZGUsXG4gICAgICAgICAgICBleHRlbnNpb25BU1ROb2RlczogX2V4dGVuc2lvbkFTVE5vZGVzNFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgIGNhc2UgS2luZC5JTlBVVF9PQkpFQ1RfVFlQRV9ERUZJTklUSU9OOlxuICAgICAgICB7XG4gICAgICAgICAgdmFyIF9leHRlbnNpb25BU1ROb2RlczUgPSBleHRlbnNpb25Ob2RlcztcblxuICAgICAgICAgIHZhciBfYWxsTm9kZXM0ID0gW2FzdE5vZGVdLmNvbmNhdChfZXh0ZW5zaW9uQVNUTm9kZXM1KTtcblxuICAgICAgICAgIHJldHVybiBuZXcgR3JhcGhRTElucHV0T2JqZWN0VHlwZSh7XG4gICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgZmllbGRzOiBmdW5jdGlvbiBmaWVsZHMoKSB7XG4gICAgICAgICAgICAgIHJldHVybiBidWlsZElucHV0RmllbGRNYXAoX2FsbE5vZGVzNCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYXN0Tm9kZTogYXN0Tm9kZSxcbiAgICAgICAgICAgIGV4dGVuc2lvbkFTVE5vZGVzOiBfZXh0ZW5zaW9uQVNUTm9kZXM1XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9IC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0IChOb3QgcmVhY2hhYmxlLiBBbGwgcG9zc2libGUgdHlwZSBkZWZpbml0aW9uIG5vZGVzIGhhdmUgYmVlbiBjb25zaWRlcmVkKVxuXG5cbiAgICBmYWxzZSB8fCBpbnZhcmlhbnQoMCwgJ1VuZXhwZWN0ZWQgdHlwZSBkZWZpbml0aW9uIG5vZGU6ICcgKyBpbnNwZWN0KGFzdE5vZGUpKTtcbiAgfVxufVxudmFyIHN0ZFR5cGVNYXAgPSBrZXlNYXAoc3BlY2lmaWVkU2NhbGFyVHlwZXMuY29uY2F0KGludHJvc3BlY3Rpb25UeXBlcyksIGZ1bmN0aW9uICh0eXBlKSB7XG4gIHJldHVybiB0eXBlLm5hbWU7XG59KTtcbi8qKlxuICogR2l2ZW4gYSBmaWVsZCBvciBlbnVtIHZhbHVlIG5vZGUsIHJldHVybnMgdGhlIHN0cmluZyB2YWx1ZSBmb3IgdGhlXG4gKiBkZXByZWNhdGlvbiByZWFzb24uXG4gKi9cblxuZnVuY3Rpb24gZ2V0RGVwcmVjYXRpb25SZWFzb24obm9kZSkge1xuICB2YXIgZGVwcmVjYXRlZCA9IGdldERpcmVjdGl2ZVZhbHVlcyhHcmFwaFFMRGVwcmVjYXRlZERpcmVjdGl2ZSwgbm9kZSk7XG4gIHJldHVybiBkZXByZWNhdGVkID09PSBudWxsIHx8IGRlcHJlY2F0ZWQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRlcHJlY2F0ZWQucmVhc29uO1xufVxuLyoqXG4gKiBHaXZlbiBhIHNjYWxhciBub2RlLCByZXR1cm5zIHRoZSBzdHJpbmcgdmFsdWUgZm9yIHRoZSBzcGVjaWZpZWRCeVVybC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGdldFNwZWNpZmllZEJ5VXJsKG5vZGUpIHtcbiAgdmFyIHNwZWNpZmllZEJ5ID0gZ2V0RGlyZWN0aXZlVmFsdWVzKEdyYXBoUUxTcGVjaWZpZWRCeURpcmVjdGl2ZSwgbm9kZSk7XG4gIHJldHVybiBzcGVjaWZpZWRCeSA9PT0gbnVsbCB8fCBzcGVjaWZpZWRCeSA9PT0gdm9pZCAwID8gdm9pZCAwIDogc3BlY2lmaWVkQnkudXJsO1xufVxuLyoqXG4gKiBHaXZlbiBhbiBhc3Qgbm9kZSwgcmV0dXJucyBpdHMgc3RyaW5nIGRlc2NyaXB0aW9uLlxuICogQGRlcHJlY2F0ZWQ6IHByb3ZpZGVkIHRvIGVhc2UgYWRvcHRpb24gYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB2MTYuXG4gKlxuICogQWNjZXB0cyBvcHRpb25zIGFzIGEgc2Vjb25kIGFyZ3VtZW50OlxuICpcbiAqICAgIC0gY29tbWVudERlc2NyaXB0aW9uczpcbiAqICAgICAgICBQcm92aWRlIHRydWUgdG8gdXNlIHByZWNlZGluZyBjb21tZW50cyBhcyB0aGUgZGVzY3JpcHRpb24uXG4gKlxuICovXG5cblxuZXhwb3J0IGZ1bmN0aW9uIGdldERlc2NyaXB0aW9uKG5vZGUsIG9wdGlvbnMpIHtcbiAgaWYgKG5vZGUuZGVzY3JpcHRpb24pIHtcbiAgICByZXR1cm4gbm9kZS5kZXNjcmlwdGlvbi52YWx1ZTtcbiAgfVxuXG4gIGlmICgob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmNvbW1lbnREZXNjcmlwdGlvbnMpID09PSB0cnVlKSB7XG4gICAgdmFyIHJhd1ZhbHVlID0gZ2V0TGVhZGluZ0NvbW1lbnRCbG9jayhub2RlKTtcblxuICAgIGlmIChyYXdWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZGVkZW50QmxvY2tTdHJpbmdWYWx1ZSgnXFxuJyArIHJhd1ZhbHVlKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0TGVhZGluZ0NvbW1lbnRCbG9jayhub2RlKSB7XG4gIHZhciBsb2MgPSBub2RlLmxvYztcblxuICBpZiAoIWxvYykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBjb21tZW50cyA9IFtdO1xuICB2YXIgdG9rZW4gPSBsb2Muc3RhcnRUb2tlbi5wcmV2O1xuXG4gIHdoaWxlICh0b2tlbiAhPSBudWxsICYmIHRva2VuLmtpbmQgPT09IFRva2VuS2luZC5DT01NRU5UICYmIHRva2VuLm5leHQgJiYgdG9rZW4ucHJldiAmJiB0b2tlbi5saW5lICsgMSA9PT0gdG9rZW4ubmV4dC5saW5lICYmIHRva2VuLmxpbmUgIT09IHRva2VuLnByZXYubGluZSkge1xuICAgIHZhciB2YWx1ZSA9IFN0cmluZyh0b2tlbi52YWx1ZSk7XG4gICAgY29tbWVudHMucHVzaCh2YWx1ZSk7XG4gICAgdG9rZW4gPSB0b2tlbi5wcmV2O1xuICB9XG5cbiAgcmV0dXJuIGNvbW1lbnRzLmxlbmd0aCA+IDAgPyBjb21tZW50cy5yZXZlcnNlKCkuam9pbignXFxuJykgOiB1bmRlZmluZWQ7XG59XG4iLCJmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuaW1wb3J0IG9iamVjdFZhbHVlcyBmcm9tIFwiLi4vcG9seWZpbGxzL29iamVjdFZhbHVlcy5tanNcIjtcbmltcG9ydCBrZXlNYXAgZnJvbSBcIi4uL2pzdXRpbHMva2V5TWFwLm1qc1wiO1xuaW1wb3J0IGluc3BlY3QgZnJvbSBcIi4uL2pzdXRpbHMvaW5zcGVjdC5tanNcIjtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcIi4uL2pzdXRpbHMvaW52YXJpYW50Lm1qc1wiO1xuaW1wb3J0IG5hdHVyYWxDb21wYXJlIGZyb20gXCIuLi9qc3V0aWxzL25hdHVyYWxDb21wYXJlLm1qc1wiO1xuaW1wb3J0IHsgcHJpbnQgfSBmcm9tIFwiLi4vbGFuZ3VhZ2UvcHJpbnRlci5tanNcIjtcbmltcG9ydCB7IHZpc2l0IH0gZnJvbSBcIi4uL2xhbmd1YWdlL3Zpc2l0b3IubWpzXCI7XG5pbXBvcnQgeyBpc1NwZWNpZmllZFNjYWxhclR5cGUgfSBmcm9tIFwiLi4vdHlwZS9zY2FsYXJzLm1qc1wiO1xuaW1wb3J0IHsgaXNTY2FsYXJUeXBlLCBpc09iamVjdFR5cGUsIGlzSW50ZXJmYWNlVHlwZSwgaXNVbmlvblR5cGUsIGlzRW51bVR5cGUsIGlzSW5wdXRPYmplY3RUeXBlLCBpc05vbk51bGxUeXBlLCBpc0xpc3RUeXBlLCBpc05hbWVkVHlwZSwgaXNSZXF1aXJlZEFyZ3VtZW50LCBpc1JlcXVpcmVkSW5wdXRGaWVsZCB9IGZyb20gXCIuLi90eXBlL2RlZmluaXRpb24ubWpzXCI7XG5pbXBvcnQgeyBhc3RGcm9tVmFsdWUgfSBmcm9tIFwiLi9hc3RGcm9tVmFsdWUubWpzXCI7XG5leHBvcnQgdmFyIEJyZWFraW5nQ2hhbmdlVHlwZSA9IE9iamVjdC5mcmVlemUoe1xuICBUWVBFX1JFTU9WRUQ6ICdUWVBFX1JFTU9WRUQnLFxuICBUWVBFX0NIQU5HRURfS0lORDogJ1RZUEVfQ0hBTkdFRF9LSU5EJyxcbiAgVFlQRV9SRU1PVkVEX0ZST01fVU5JT046ICdUWVBFX1JFTU9WRURfRlJPTV9VTklPTicsXG4gIFZBTFVFX1JFTU9WRURfRlJPTV9FTlVNOiAnVkFMVUVfUkVNT1ZFRF9GUk9NX0VOVU0nLFxuICBSRVFVSVJFRF9JTlBVVF9GSUVMRF9BRERFRDogJ1JFUVVJUkVEX0lOUFVUX0ZJRUxEX0FEREVEJyxcbiAgSU1QTEVNRU5URURfSU5URVJGQUNFX1JFTU9WRUQ6ICdJTVBMRU1FTlRFRF9JTlRFUkZBQ0VfUkVNT1ZFRCcsXG4gIEZJRUxEX1JFTU9WRUQ6ICdGSUVMRF9SRU1PVkVEJyxcbiAgRklFTERfQ0hBTkdFRF9LSU5EOiAnRklFTERfQ0hBTkdFRF9LSU5EJyxcbiAgUkVRVUlSRURfQVJHX0FEREVEOiAnUkVRVUlSRURfQVJHX0FEREVEJyxcbiAgQVJHX1JFTU9WRUQ6ICdBUkdfUkVNT1ZFRCcsXG4gIEFSR19DSEFOR0VEX0tJTkQ6ICdBUkdfQ0hBTkdFRF9LSU5EJyxcbiAgRElSRUNUSVZFX1JFTU9WRUQ6ICdESVJFQ1RJVkVfUkVNT1ZFRCcsXG4gIERJUkVDVElWRV9BUkdfUkVNT1ZFRDogJ0RJUkVDVElWRV9BUkdfUkVNT1ZFRCcsXG4gIFJFUVVJUkVEX0RJUkVDVElWRV9BUkdfQURERUQ6ICdSRVFVSVJFRF9ESVJFQ1RJVkVfQVJHX0FEREVEJyxcbiAgRElSRUNUSVZFX1JFUEVBVEFCTEVfUkVNT1ZFRDogJ0RJUkVDVElWRV9SRVBFQVRBQkxFX1JFTU9WRUQnLFxuICBESVJFQ1RJVkVfTE9DQVRJT05fUkVNT1ZFRDogJ0RJUkVDVElWRV9MT0NBVElPTl9SRU1PVkVEJ1xufSk7XG5leHBvcnQgdmFyIERhbmdlcm91c0NoYW5nZVR5cGUgPSBPYmplY3QuZnJlZXplKHtcbiAgVkFMVUVfQURERURfVE9fRU5VTTogJ1ZBTFVFX0FEREVEX1RPX0VOVU0nLFxuICBUWVBFX0FEREVEX1RPX1VOSU9OOiAnVFlQRV9BRERFRF9UT19VTklPTicsXG4gIE9QVElPTkFMX0lOUFVUX0ZJRUxEX0FEREVEOiAnT1BUSU9OQUxfSU5QVVRfRklFTERfQURERUQnLFxuICBPUFRJT05BTF9BUkdfQURERUQ6ICdPUFRJT05BTF9BUkdfQURERUQnLFxuICBJTVBMRU1FTlRFRF9JTlRFUkZBQ0VfQURERUQ6ICdJTVBMRU1FTlRFRF9JTlRFUkZBQ0VfQURERUQnLFxuICBBUkdfREVGQVVMVF9WQUxVRV9DSEFOR0U6ICdBUkdfREVGQVVMVF9WQUxVRV9DSEFOR0UnXG59KTtcblxuLyoqXG4gKiBHaXZlbiB0d28gc2NoZW1hcywgcmV0dXJucyBhbiBBcnJheSBjb250YWluaW5nIGRlc2NyaXB0aW9ucyBvZiBhbGwgdGhlIHR5cGVzXG4gKiBvZiBicmVha2luZyBjaGFuZ2VzIGNvdmVyZWQgYnkgdGhlIG90aGVyIGZ1bmN0aW9ucyBkb3duIGJlbG93LlxuICovXG5leHBvcnQgZnVuY3Rpb24gZmluZEJyZWFraW5nQ2hhbmdlcyhvbGRTY2hlbWEsIG5ld1NjaGVtYSkge1xuICB2YXIgYnJlYWtpbmdDaGFuZ2VzID0gZmluZFNjaGVtYUNoYW5nZXMob2xkU2NoZW1hLCBuZXdTY2hlbWEpLmZpbHRlcihmdW5jdGlvbiAoY2hhbmdlKSB7XG4gICAgcmV0dXJuIGNoYW5nZS50eXBlIGluIEJyZWFraW5nQ2hhbmdlVHlwZTtcbiAgfSk7XG4gIHJldHVybiBicmVha2luZ0NoYW5nZXM7XG59XG4vKipcbiAqIEdpdmVuIHR3byBzY2hlbWFzLCByZXR1cm5zIGFuIEFycmF5IGNvbnRhaW5pbmcgZGVzY3JpcHRpb25zIG9mIGFsbCB0aGUgdHlwZXNcbiAqIG9mIHBvdGVudGlhbGx5IGRhbmdlcm91cyBjaGFuZ2VzIGNvdmVyZWQgYnkgdGhlIG90aGVyIGZ1bmN0aW9ucyBkb3duIGJlbG93LlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBmaW5kRGFuZ2Vyb3VzQ2hhbmdlcyhvbGRTY2hlbWEsIG5ld1NjaGVtYSkge1xuICB2YXIgZGFuZ2Vyb3VzQ2hhbmdlcyA9IGZpbmRTY2hlbWFDaGFuZ2VzKG9sZFNjaGVtYSwgbmV3U2NoZW1hKS5maWx0ZXIoZnVuY3Rpb24gKGNoYW5nZSkge1xuICAgIHJldHVybiBjaGFuZ2UudHlwZSBpbiBEYW5nZXJvdXNDaGFuZ2VUeXBlO1xuICB9KTtcbiAgcmV0dXJuIGRhbmdlcm91c0NoYW5nZXM7XG59XG5cbmZ1bmN0aW9uIGZpbmRTY2hlbWFDaGFuZ2VzKG9sZFNjaGVtYSwgbmV3U2NoZW1hKSB7XG4gIHJldHVybiBbXS5jb25jYXQoZmluZFR5cGVDaGFuZ2VzKG9sZFNjaGVtYSwgbmV3U2NoZW1hKSwgZmluZERpcmVjdGl2ZUNoYW5nZXMob2xkU2NoZW1hLCBuZXdTY2hlbWEpKTtcbn1cblxuZnVuY3Rpb24gZmluZERpcmVjdGl2ZUNoYW5nZXMob2xkU2NoZW1hLCBuZXdTY2hlbWEpIHtcbiAgdmFyIHNjaGVtYUNoYW5nZXMgPSBbXTtcbiAgdmFyIGRpcmVjdGl2ZXNEaWZmID0gZGlmZihvbGRTY2hlbWEuZ2V0RGlyZWN0aXZlcygpLCBuZXdTY2hlbWEuZ2V0RGlyZWN0aXZlcygpKTtcblxuICBmb3IgKHZhciBfaTIgPSAwLCBfZGlyZWN0aXZlc0RpZmYkcmVtb3YyID0gZGlyZWN0aXZlc0RpZmYucmVtb3ZlZDsgX2kyIDwgX2RpcmVjdGl2ZXNEaWZmJHJlbW92Mi5sZW5ndGg7IF9pMisrKSB7XG4gICAgdmFyIG9sZERpcmVjdGl2ZSA9IF9kaXJlY3RpdmVzRGlmZiRyZW1vdjJbX2kyXTtcbiAgICBzY2hlbWFDaGFuZ2VzLnB1c2goe1xuICAgICAgdHlwZTogQnJlYWtpbmdDaGFuZ2VUeXBlLkRJUkVDVElWRV9SRU1PVkVELFxuICAgICAgZGVzY3JpcHRpb246IFwiXCIuY29uY2F0KG9sZERpcmVjdGl2ZS5uYW1lLCBcIiB3YXMgcmVtb3ZlZC5cIilcbiAgICB9KTtcbiAgfVxuXG4gIGZvciAodmFyIF9pNCA9IDAsIF9kaXJlY3RpdmVzRGlmZiRwZXJzaTIgPSBkaXJlY3RpdmVzRGlmZi5wZXJzaXN0ZWQ7IF9pNCA8IF9kaXJlY3RpdmVzRGlmZiRwZXJzaTIubGVuZ3RoOyBfaTQrKykge1xuICAgIHZhciBfcmVmMiA9IF9kaXJlY3RpdmVzRGlmZiRwZXJzaTJbX2k0XTtcbiAgICB2YXIgX29sZERpcmVjdGl2ZSA9IF9yZWYyWzBdO1xuICAgIHZhciBuZXdEaXJlY3RpdmUgPSBfcmVmMlsxXTtcbiAgICB2YXIgYXJnc0RpZmYgPSBkaWZmKF9vbGREaXJlY3RpdmUuYXJncywgbmV3RGlyZWN0aXZlLmFyZ3MpO1xuXG4gICAgZm9yICh2YXIgX2k2ID0gMCwgX2FyZ3NEaWZmJGFkZGVkMiA9IGFyZ3NEaWZmLmFkZGVkOyBfaTYgPCBfYXJnc0RpZmYkYWRkZWQyLmxlbmd0aDsgX2k2KyspIHtcbiAgICAgIHZhciBuZXdBcmcgPSBfYXJnc0RpZmYkYWRkZWQyW19pNl07XG5cbiAgICAgIGlmIChpc1JlcXVpcmVkQXJndW1lbnQobmV3QXJnKSkge1xuICAgICAgICBzY2hlbWFDaGFuZ2VzLnB1c2goe1xuICAgICAgICAgIHR5cGU6IEJyZWFraW5nQ2hhbmdlVHlwZS5SRVFVSVJFRF9ESVJFQ1RJVkVfQVJHX0FEREVELFxuICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIkEgcmVxdWlyZWQgYXJnIFwiLmNvbmNhdChuZXdBcmcubmFtZSwgXCIgb24gZGlyZWN0aXZlIFwiKS5jb25jYXQoX29sZERpcmVjdGl2ZS5uYW1lLCBcIiB3YXMgYWRkZWQuXCIpXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9pOCA9IDAsIF9hcmdzRGlmZiRyZW1vdmVkMiA9IGFyZ3NEaWZmLnJlbW92ZWQ7IF9pOCA8IF9hcmdzRGlmZiRyZW1vdmVkMi5sZW5ndGg7IF9pOCsrKSB7XG4gICAgICB2YXIgb2xkQXJnID0gX2FyZ3NEaWZmJHJlbW92ZWQyW19pOF07XG4gICAgICBzY2hlbWFDaGFuZ2VzLnB1c2goe1xuICAgICAgICB0eXBlOiBCcmVha2luZ0NoYW5nZVR5cGUuRElSRUNUSVZFX0FSR19SRU1PVkVELFxuICAgICAgICBkZXNjcmlwdGlvbjogXCJcIi5jb25jYXQob2xkQXJnLm5hbWUsIFwiIHdhcyByZW1vdmVkIGZyb20gXCIpLmNvbmNhdChfb2xkRGlyZWN0aXZlLm5hbWUsIFwiLlwiKVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKF9vbGREaXJlY3RpdmUuaXNSZXBlYXRhYmxlICYmICFuZXdEaXJlY3RpdmUuaXNSZXBlYXRhYmxlKSB7XG4gICAgICBzY2hlbWFDaGFuZ2VzLnB1c2goe1xuICAgICAgICB0eXBlOiBCcmVha2luZ0NoYW5nZVR5cGUuRElSRUNUSVZFX1JFUEVBVEFCTEVfUkVNT1ZFRCxcbiAgICAgICAgZGVzY3JpcHRpb246IFwiUmVwZWF0YWJsZSBmbGFnIHdhcyByZW1vdmVkIGZyb20gXCIuY29uY2F0KF9vbGREaXJlY3RpdmUubmFtZSwgXCIuXCIpXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaTEwID0gMCwgX29sZERpcmVjdGl2ZSRsb2NhdGlvMiA9IF9vbGREaXJlY3RpdmUubG9jYXRpb25zOyBfaTEwIDwgX29sZERpcmVjdGl2ZSRsb2NhdGlvMi5sZW5ndGg7IF9pMTArKykge1xuICAgICAgdmFyIGxvY2F0aW9uID0gX29sZERpcmVjdGl2ZSRsb2NhdGlvMltfaTEwXTtcblxuICAgICAgaWYgKG5ld0RpcmVjdGl2ZS5sb2NhdGlvbnMuaW5kZXhPZihsb2NhdGlvbikgPT09IC0xKSB7XG4gICAgICAgIHNjaGVtYUNoYW5nZXMucHVzaCh7XG4gICAgICAgICAgdHlwZTogQnJlYWtpbmdDaGFuZ2VUeXBlLkRJUkVDVElWRV9MT0NBVElPTl9SRU1PVkVELFxuICAgICAgICAgIGRlc2NyaXB0aW9uOiBcIlwiLmNvbmNhdChsb2NhdGlvbiwgXCIgd2FzIHJlbW92ZWQgZnJvbSBcIikuY29uY2F0KF9vbGREaXJlY3RpdmUubmFtZSwgXCIuXCIpXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzY2hlbWFDaGFuZ2VzO1xufVxuXG5mdW5jdGlvbiBmaW5kVHlwZUNoYW5nZXMob2xkU2NoZW1hLCBuZXdTY2hlbWEpIHtcbiAgdmFyIHNjaGVtYUNoYW5nZXMgPSBbXTtcbiAgdmFyIHR5cGVzRGlmZiA9IGRpZmYob2JqZWN0VmFsdWVzKG9sZFNjaGVtYS5nZXRUeXBlTWFwKCkpLCBvYmplY3RWYWx1ZXMobmV3U2NoZW1hLmdldFR5cGVNYXAoKSkpO1xuXG4gIGZvciAodmFyIF9pMTIgPSAwLCBfdHlwZXNEaWZmJHJlbW92ZWQyID0gdHlwZXNEaWZmLnJlbW92ZWQ7IF9pMTIgPCBfdHlwZXNEaWZmJHJlbW92ZWQyLmxlbmd0aDsgX2kxMisrKSB7XG4gICAgdmFyIG9sZFR5cGUgPSBfdHlwZXNEaWZmJHJlbW92ZWQyW19pMTJdO1xuICAgIHNjaGVtYUNoYW5nZXMucHVzaCh7XG4gICAgICB0eXBlOiBCcmVha2luZ0NoYW5nZVR5cGUuVFlQRV9SRU1PVkVELFxuICAgICAgZGVzY3JpcHRpb246IGlzU3BlY2lmaWVkU2NhbGFyVHlwZShvbGRUeXBlKSA/IFwiU3RhbmRhcmQgc2NhbGFyIFwiLmNvbmNhdChvbGRUeXBlLm5hbWUsIFwiIHdhcyByZW1vdmVkIGJlY2F1c2UgaXQgaXMgbm90IHJlZmVyZW5jZWQgYW55bW9yZS5cIikgOiBcIlwiLmNvbmNhdChvbGRUeXBlLm5hbWUsIFwiIHdhcyByZW1vdmVkLlwiKVxuICAgIH0pO1xuICB9XG5cbiAgZm9yICh2YXIgX2kxNCA9IDAsIF90eXBlc0RpZmYkcGVyc2lzdGVkMiA9IHR5cGVzRGlmZi5wZXJzaXN0ZWQ7IF9pMTQgPCBfdHlwZXNEaWZmJHBlcnNpc3RlZDIubGVuZ3RoOyBfaTE0KyspIHtcbiAgICB2YXIgX3JlZjQgPSBfdHlwZXNEaWZmJHBlcnNpc3RlZDJbX2kxNF07XG4gICAgdmFyIF9vbGRUeXBlID0gX3JlZjRbMF07XG4gICAgdmFyIG5ld1R5cGUgPSBfcmVmNFsxXTtcblxuICAgIGlmIChpc0VudW1UeXBlKF9vbGRUeXBlKSAmJiBpc0VudW1UeXBlKG5ld1R5cGUpKSB7XG4gICAgICBzY2hlbWFDaGFuZ2VzLnB1c2guYXBwbHkoc2NoZW1hQ2hhbmdlcywgZmluZEVudW1UeXBlQ2hhbmdlcyhfb2xkVHlwZSwgbmV3VHlwZSkpO1xuICAgIH0gZWxzZSBpZiAoaXNVbmlvblR5cGUoX29sZFR5cGUpICYmIGlzVW5pb25UeXBlKG5ld1R5cGUpKSB7XG4gICAgICBzY2hlbWFDaGFuZ2VzLnB1c2guYXBwbHkoc2NoZW1hQ2hhbmdlcywgZmluZFVuaW9uVHlwZUNoYW5nZXMoX29sZFR5cGUsIG5ld1R5cGUpKTtcbiAgICB9IGVsc2UgaWYgKGlzSW5wdXRPYmplY3RUeXBlKF9vbGRUeXBlKSAmJiBpc0lucHV0T2JqZWN0VHlwZShuZXdUeXBlKSkge1xuICAgICAgc2NoZW1hQ2hhbmdlcy5wdXNoLmFwcGx5KHNjaGVtYUNoYW5nZXMsIGZpbmRJbnB1dE9iamVjdFR5cGVDaGFuZ2VzKF9vbGRUeXBlLCBuZXdUeXBlKSk7XG4gICAgfSBlbHNlIGlmIChpc09iamVjdFR5cGUoX29sZFR5cGUpICYmIGlzT2JqZWN0VHlwZShuZXdUeXBlKSkge1xuICAgICAgc2NoZW1hQ2hhbmdlcy5wdXNoLmFwcGx5KHNjaGVtYUNoYW5nZXMsIGZpbmRGaWVsZENoYW5nZXMoX29sZFR5cGUsIG5ld1R5cGUpLmNvbmNhdChmaW5kSW1wbGVtZW50ZWRJbnRlcmZhY2VzQ2hhbmdlcyhfb2xkVHlwZSwgbmV3VHlwZSkpKTtcbiAgICB9IGVsc2UgaWYgKGlzSW50ZXJmYWNlVHlwZShfb2xkVHlwZSkgJiYgaXNJbnRlcmZhY2VUeXBlKG5ld1R5cGUpKSB7XG4gICAgICBzY2hlbWFDaGFuZ2VzLnB1c2guYXBwbHkoc2NoZW1hQ2hhbmdlcywgZmluZEZpZWxkQ2hhbmdlcyhfb2xkVHlwZSwgbmV3VHlwZSkuY29uY2F0KGZpbmRJbXBsZW1lbnRlZEludGVyZmFjZXNDaGFuZ2VzKF9vbGRUeXBlLCBuZXdUeXBlKSkpO1xuICAgIH0gZWxzZSBpZiAoX29sZFR5cGUuY29uc3RydWN0b3IgIT09IG5ld1R5cGUuY29uc3RydWN0b3IpIHtcbiAgICAgIHNjaGVtYUNoYW5nZXMucHVzaCh7XG4gICAgICAgIHR5cGU6IEJyZWFraW5nQ2hhbmdlVHlwZS5UWVBFX0NIQU5HRURfS0lORCxcbiAgICAgICAgZGVzY3JpcHRpb246IFwiXCIuY29uY2F0KF9vbGRUeXBlLm5hbWUsIFwiIGNoYW5nZWQgZnJvbSBcIikgKyBcIlwiLmNvbmNhdCh0eXBlS2luZE5hbWUoX29sZFR5cGUpLCBcIiB0byBcIikuY29uY2F0KHR5cGVLaW5kTmFtZShuZXdUeXBlKSwgXCIuXCIpXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc2NoZW1hQ2hhbmdlcztcbn1cblxuZnVuY3Rpb24gZmluZElucHV0T2JqZWN0VHlwZUNoYW5nZXMob2xkVHlwZSwgbmV3VHlwZSkge1xuICB2YXIgc2NoZW1hQ2hhbmdlcyA9IFtdO1xuICB2YXIgZmllbGRzRGlmZiA9IGRpZmYob2JqZWN0VmFsdWVzKG9sZFR5cGUuZ2V0RmllbGRzKCkpLCBvYmplY3RWYWx1ZXMobmV3VHlwZS5nZXRGaWVsZHMoKSkpO1xuXG4gIGZvciAodmFyIF9pMTYgPSAwLCBfZmllbGRzRGlmZiRhZGRlZDIgPSBmaWVsZHNEaWZmLmFkZGVkOyBfaTE2IDwgX2ZpZWxkc0RpZmYkYWRkZWQyLmxlbmd0aDsgX2kxNisrKSB7XG4gICAgdmFyIG5ld0ZpZWxkID0gX2ZpZWxkc0RpZmYkYWRkZWQyW19pMTZdO1xuXG4gICAgaWYgKGlzUmVxdWlyZWRJbnB1dEZpZWxkKG5ld0ZpZWxkKSkge1xuICAgICAgc2NoZW1hQ2hhbmdlcy5wdXNoKHtcbiAgICAgICAgdHlwZTogQnJlYWtpbmdDaGFuZ2VUeXBlLlJFUVVJUkVEX0lOUFVUX0ZJRUxEX0FEREVELFxuICAgICAgICBkZXNjcmlwdGlvbjogXCJBIHJlcXVpcmVkIGZpZWxkIFwiLmNvbmNhdChuZXdGaWVsZC5uYW1lLCBcIiBvbiBpbnB1dCB0eXBlIFwiKS5jb25jYXQob2xkVHlwZS5uYW1lLCBcIiB3YXMgYWRkZWQuXCIpXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2NoZW1hQ2hhbmdlcy5wdXNoKHtcbiAgICAgICAgdHlwZTogRGFuZ2Vyb3VzQ2hhbmdlVHlwZS5PUFRJT05BTF9JTlBVVF9GSUVMRF9BRERFRCxcbiAgICAgICAgZGVzY3JpcHRpb246IFwiQW4gb3B0aW9uYWwgZmllbGQgXCIuY29uY2F0KG5ld0ZpZWxkLm5hbWUsIFwiIG9uIGlucHV0IHR5cGUgXCIpLmNvbmNhdChvbGRUeXBlLm5hbWUsIFwiIHdhcyBhZGRlZC5cIilcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIF9pMTggPSAwLCBfZmllbGRzRGlmZiRyZW1vdmVkMiA9IGZpZWxkc0RpZmYucmVtb3ZlZDsgX2kxOCA8IF9maWVsZHNEaWZmJHJlbW92ZWQyLmxlbmd0aDsgX2kxOCsrKSB7XG4gICAgdmFyIG9sZEZpZWxkID0gX2ZpZWxkc0RpZmYkcmVtb3ZlZDJbX2kxOF07XG4gICAgc2NoZW1hQ2hhbmdlcy5wdXNoKHtcbiAgICAgIHR5cGU6IEJyZWFraW5nQ2hhbmdlVHlwZS5GSUVMRF9SRU1PVkVELFxuICAgICAgZGVzY3JpcHRpb246IFwiXCIuY29uY2F0KG9sZFR5cGUubmFtZSwgXCIuXCIpLmNvbmNhdChvbGRGaWVsZC5uYW1lLCBcIiB3YXMgcmVtb3ZlZC5cIilcbiAgICB9KTtcbiAgfVxuXG4gIGZvciAodmFyIF9pMjAgPSAwLCBfZmllbGRzRGlmZiRwZXJzaXN0ZWQyID0gZmllbGRzRGlmZi5wZXJzaXN0ZWQ7IF9pMjAgPCBfZmllbGRzRGlmZiRwZXJzaXN0ZWQyLmxlbmd0aDsgX2kyMCsrKSB7XG4gICAgdmFyIF9yZWY2ID0gX2ZpZWxkc0RpZmYkcGVyc2lzdGVkMltfaTIwXTtcbiAgICB2YXIgX29sZEZpZWxkID0gX3JlZjZbMF07XG4gICAgdmFyIF9uZXdGaWVsZCA9IF9yZWY2WzFdO1xuICAgIHZhciBpc1NhZmUgPSBpc0NoYW5nZVNhZmVGb3JJbnB1dE9iamVjdEZpZWxkT3JGaWVsZEFyZyhfb2xkRmllbGQudHlwZSwgX25ld0ZpZWxkLnR5cGUpO1xuXG4gICAgaWYgKCFpc1NhZmUpIHtcbiAgICAgIHNjaGVtYUNoYW5nZXMucHVzaCh7XG4gICAgICAgIHR5cGU6IEJyZWFraW5nQ2hhbmdlVHlwZS5GSUVMRF9DSEFOR0VEX0tJTkQsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIlwiLmNvbmNhdChvbGRUeXBlLm5hbWUsIFwiLlwiKS5jb25jYXQoX29sZEZpZWxkLm5hbWUsIFwiIGNoYW5nZWQgdHlwZSBmcm9tIFwiKSArIFwiXCIuY29uY2F0KFN0cmluZyhfb2xkRmllbGQudHlwZSksIFwiIHRvIFwiKS5jb25jYXQoU3RyaW5nKF9uZXdGaWVsZC50eXBlKSwgXCIuXCIpXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc2NoZW1hQ2hhbmdlcztcbn1cblxuZnVuY3Rpb24gZmluZFVuaW9uVHlwZUNoYW5nZXMob2xkVHlwZSwgbmV3VHlwZSkge1xuICB2YXIgc2NoZW1hQ2hhbmdlcyA9IFtdO1xuICB2YXIgcG9zc2libGVUeXBlc0RpZmYgPSBkaWZmKG9sZFR5cGUuZ2V0VHlwZXMoKSwgbmV3VHlwZS5nZXRUeXBlcygpKTtcblxuICBmb3IgKHZhciBfaTIyID0gMCwgX3Bvc3NpYmxlVHlwZXNEaWZmJGFkMiA9IHBvc3NpYmxlVHlwZXNEaWZmLmFkZGVkOyBfaTIyIDwgX3Bvc3NpYmxlVHlwZXNEaWZmJGFkMi5sZW5ndGg7IF9pMjIrKykge1xuICAgIHZhciBuZXdQb3NzaWJsZVR5cGUgPSBfcG9zc2libGVUeXBlc0RpZmYkYWQyW19pMjJdO1xuICAgIHNjaGVtYUNoYW5nZXMucHVzaCh7XG4gICAgICB0eXBlOiBEYW5nZXJvdXNDaGFuZ2VUeXBlLlRZUEVfQURERURfVE9fVU5JT04sXG4gICAgICBkZXNjcmlwdGlvbjogXCJcIi5jb25jYXQobmV3UG9zc2libGVUeXBlLm5hbWUsIFwiIHdhcyBhZGRlZCB0byB1bmlvbiB0eXBlIFwiKS5jb25jYXQob2xkVHlwZS5uYW1lLCBcIi5cIilcbiAgICB9KTtcbiAgfVxuXG4gIGZvciAodmFyIF9pMjQgPSAwLCBfcG9zc2libGVUeXBlc0RpZmYkcmUyID0gcG9zc2libGVUeXBlc0RpZmYucmVtb3ZlZDsgX2kyNCA8IF9wb3NzaWJsZVR5cGVzRGlmZiRyZTIubGVuZ3RoOyBfaTI0KyspIHtcbiAgICB2YXIgb2xkUG9zc2libGVUeXBlID0gX3Bvc3NpYmxlVHlwZXNEaWZmJHJlMltfaTI0XTtcbiAgICBzY2hlbWFDaGFuZ2VzLnB1c2goe1xuICAgICAgdHlwZTogQnJlYWtpbmdDaGFuZ2VUeXBlLlRZUEVfUkVNT1ZFRF9GUk9NX1VOSU9OLFxuICAgICAgZGVzY3JpcHRpb246IFwiXCIuY29uY2F0KG9sZFBvc3NpYmxlVHlwZS5uYW1lLCBcIiB3YXMgcmVtb3ZlZCBmcm9tIHVuaW9uIHR5cGUgXCIpLmNvbmNhdChvbGRUeXBlLm5hbWUsIFwiLlwiKVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHNjaGVtYUNoYW5nZXM7XG59XG5cbmZ1bmN0aW9uIGZpbmRFbnVtVHlwZUNoYW5nZXMob2xkVHlwZSwgbmV3VHlwZSkge1xuICB2YXIgc2NoZW1hQ2hhbmdlcyA9IFtdO1xuICB2YXIgdmFsdWVzRGlmZiA9IGRpZmYob2xkVHlwZS5nZXRWYWx1ZXMoKSwgbmV3VHlwZS5nZXRWYWx1ZXMoKSk7XG5cbiAgZm9yICh2YXIgX2kyNiA9IDAsIF92YWx1ZXNEaWZmJGFkZGVkMiA9IHZhbHVlc0RpZmYuYWRkZWQ7IF9pMjYgPCBfdmFsdWVzRGlmZiRhZGRlZDIubGVuZ3RoOyBfaTI2KyspIHtcbiAgICB2YXIgbmV3VmFsdWUgPSBfdmFsdWVzRGlmZiRhZGRlZDJbX2kyNl07XG4gICAgc2NoZW1hQ2hhbmdlcy5wdXNoKHtcbiAgICAgIHR5cGU6IERhbmdlcm91c0NoYW5nZVR5cGUuVkFMVUVfQURERURfVE9fRU5VTSxcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlwiLmNvbmNhdChuZXdWYWx1ZS5uYW1lLCBcIiB3YXMgYWRkZWQgdG8gZW51bSB0eXBlIFwiKS5jb25jYXQob2xkVHlwZS5uYW1lLCBcIi5cIilcbiAgICB9KTtcbiAgfVxuXG4gIGZvciAodmFyIF9pMjggPSAwLCBfdmFsdWVzRGlmZiRyZW1vdmVkMiA9IHZhbHVlc0RpZmYucmVtb3ZlZDsgX2kyOCA8IF92YWx1ZXNEaWZmJHJlbW92ZWQyLmxlbmd0aDsgX2kyOCsrKSB7XG4gICAgdmFyIG9sZFZhbHVlID0gX3ZhbHVlc0RpZmYkcmVtb3ZlZDJbX2kyOF07XG4gICAgc2NoZW1hQ2hhbmdlcy5wdXNoKHtcbiAgICAgIHR5cGU6IEJyZWFraW5nQ2hhbmdlVHlwZS5WQUxVRV9SRU1PVkVEX0ZST01fRU5VTSxcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlwiLmNvbmNhdChvbGRWYWx1ZS5uYW1lLCBcIiB3YXMgcmVtb3ZlZCBmcm9tIGVudW0gdHlwZSBcIikuY29uY2F0KG9sZFR5cGUubmFtZSwgXCIuXCIpXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gc2NoZW1hQ2hhbmdlcztcbn1cblxuZnVuY3Rpb24gZmluZEltcGxlbWVudGVkSW50ZXJmYWNlc0NoYW5nZXMob2xkVHlwZSwgbmV3VHlwZSkge1xuICB2YXIgc2NoZW1hQ2hhbmdlcyA9IFtdO1xuICB2YXIgaW50ZXJmYWNlc0RpZmYgPSBkaWZmKG9sZFR5cGUuZ2V0SW50ZXJmYWNlcygpLCBuZXdUeXBlLmdldEludGVyZmFjZXMoKSk7XG5cbiAgZm9yICh2YXIgX2kzMCA9IDAsIF9pbnRlcmZhY2VzRGlmZiRhZGRlZDIgPSBpbnRlcmZhY2VzRGlmZi5hZGRlZDsgX2kzMCA8IF9pbnRlcmZhY2VzRGlmZiRhZGRlZDIubGVuZ3RoOyBfaTMwKyspIHtcbiAgICB2YXIgbmV3SW50ZXJmYWNlID0gX2ludGVyZmFjZXNEaWZmJGFkZGVkMltfaTMwXTtcbiAgICBzY2hlbWFDaGFuZ2VzLnB1c2goe1xuICAgICAgdHlwZTogRGFuZ2Vyb3VzQ2hhbmdlVHlwZS5JTVBMRU1FTlRFRF9JTlRFUkZBQ0VfQURERUQsXG4gICAgICBkZXNjcmlwdGlvbjogXCJcIi5jb25jYXQobmV3SW50ZXJmYWNlLm5hbWUsIFwiIGFkZGVkIHRvIGludGVyZmFjZXMgaW1wbGVtZW50ZWQgYnkgXCIpLmNvbmNhdChvbGRUeXBlLm5hbWUsIFwiLlwiKVxuICAgIH0pO1xuICB9XG5cbiAgZm9yICh2YXIgX2kzMiA9IDAsIF9pbnRlcmZhY2VzRGlmZiRyZW1vdjIgPSBpbnRlcmZhY2VzRGlmZi5yZW1vdmVkOyBfaTMyIDwgX2ludGVyZmFjZXNEaWZmJHJlbW92Mi5sZW5ndGg7IF9pMzIrKykge1xuICAgIHZhciBvbGRJbnRlcmZhY2UgPSBfaW50ZXJmYWNlc0RpZmYkcmVtb3YyW19pMzJdO1xuICAgIHNjaGVtYUNoYW5nZXMucHVzaCh7XG4gICAgICB0eXBlOiBCcmVha2luZ0NoYW5nZVR5cGUuSU1QTEVNRU5URURfSU5URVJGQUNFX1JFTU9WRUQsXG4gICAgICBkZXNjcmlwdGlvbjogXCJcIi5jb25jYXQob2xkVHlwZS5uYW1lLCBcIiBubyBsb25nZXIgaW1wbGVtZW50cyBpbnRlcmZhY2UgXCIpLmNvbmNhdChvbGRJbnRlcmZhY2UubmFtZSwgXCIuXCIpXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gc2NoZW1hQ2hhbmdlcztcbn1cblxuZnVuY3Rpb24gZmluZEZpZWxkQ2hhbmdlcyhvbGRUeXBlLCBuZXdUeXBlKSB7XG4gIHZhciBzY2hlbWFDaGFuZ2VzID0gW107XG4gIHZhciBmaWVsZHNEaWZmID0gZGlmZihvYmplY3RWYWx1ZXMob2xkVHlwZS5nZXRGaWVsZHMoKSksIG9iamVjdFZhbHVlcyhuZXdUeXBlLmdldEZpZWxkcygpKSk7XG5cbiAgZm9yICh2YXIgX2kzNCA9IDAsIF9maWVsZHNEaWZmJHJlbW92ZWQ0ID0gZmllbGRzRGlmZi5yZW1vdmVkOyBfaTM0IDwgX2ZpZWxkc0RpZmYkcmVtb3ZlZDQubGVuZ3RoOyBfaTM0KyspIHtcbiAgICB2YXIgb2xkRmllbGQgPSBfZmllbGRzRGlmZiRyZW1vdmVkNFtfaTM0XTtcbiAgICBzY2hlbWFDaGFuZ2VzLnB1c2goe1xuICAgICAgdHlwZTogQnJlYWtpbmdDaGFuZ2VUeXBlLkZJRUxEX1JFTU9WRUQsXG4gICAgICBkZXNjcmlwdGlvbjogXCJcIi5jb25jYXQob2xkVHlwZS5uYW1lLCBcIi5cIikuY29uY2F0KG9sZEZpZWxkLm5hbWUsIFwiIHdhcyByZW1vdmVkLlwiKVxuICAgIH0pO1xuICB9XG5cbiAgZm9yICh2YXIgX2kzNiA9IDAsIF9maWVsZHNEaWZmJHBlcnNpc3RlZDQgPSBmaWVsZHNEaWZmLnBlcnNpc3RlZDsgX2kzNiA8IF9maWVsZHNEaWZmJHBlcnNpc3RlZDQubGVuZ3RoOyBfaTM2KyspIHtcbiAgICB2YXIgX3JlZjggPSBfZmllbGRzRGlmZiRwZXJzaXN0ZWQ0W19pMzZdO1xuICAgIHZhciBfb2xkRmllbGQyID0gX3JlZjhbMF07XG4gICAgdmFyIG5ld0ZpZWxkID0gX3JlZjhbMV07XG4gICAgc2NoZW1hQ2hhbmdlcy5wdXNoLmFwcGx5KHNjaGVtYUNoYW5nZXMsIGZpbmRBcmdDaGFuZ2VzKG9sZFR5cGUsIF9vbGRGaWVsZDIsIG5ld0ZpZWxkKSk7XG4gICAgdmFyIGlzU2FmZSA9IGlzQ2hhbmdlU2FmZUZvck9iamVjdE9ySW50ZXJmYWNlRmllbGQoX29sZEZpZWxkMi50eXBlLCBuZXdGaWVsZC50eXBlKTtcblxuICAgIGlmICghaXNTYWZlKSB7XG4gICAgICBzY2hlbWFDaGFuZ2VzLnB1c2goe1xuICAgICAgICB0eXBlOiBCcmVha2luZ0NoYW5nZVR5cGUuRklFTERfQ0hBTkdFRF9LSU5ELFxuICAgICAgICBkZXNjcmlwdGlvbjogXCJcIi5jb25jYXQob2xkVHlwZS5uYW1lLCBcIi5cIikuY29uY2F0KF9vbGRGaWVsZDIubmFtZSwgXCIgY2hhbmdlZCB0eXBlIGZyb20gXCIpICsgXCJcIi5jb25jYXQoU3RyaW5nKF9vbGRGaWVsZDIudHlwZSksIFwiIHRvIFwiKS5jb25jYXQoU3RyaW5nKG5ld0ZpZWxkLnR5cGUpLCBcIi5cIilcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzY2hlbWFDaGFuZ2VzO1xufVxuXG5mdW5jdGlvbiBmaW5kQXJnQ2hhbmdlcyhvbGRUeXBlLCBvbGRGaWVsZCwgbmV3RmllbGQpIHtcbiAgdmFyIHNjaGVtYUNoYW5nZXMgPSBbXTtcbiAgdmFyIGFyZ3NEaWZmID0gZGlmZihvbGRGaWVsZC5hcmdzLCBuZXdGaWVsZC5hcmdzKTtcblxuICBmb3IgKHZhciBfaTM4ID0gMCwgX2FyZ3NEaWZmJHJlbW92ZWQ0ID0gYXJnc0RpZmYucmVtb3ZlZDsgX2kzOCA8IF9hcmdzRGlmZiRyZW1vdmVkNC5sZW5ndGg7IF9pMzgrKykge1xuICAgIHZhciBvbGRBcmcgPSBfYXJnc0RpZmYkcmVtb3ZlZDRbX2kzOF07XG4gICAgc2NoZW1hQ2hhbmdlcy5wdXNoKHtcbiAgICAgIHR5cGU6IEJyZWFraW5nQ2hhbmdlVHlwZS5BUkdfUkVNT1ZFRCxcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlwiLmNvbmNhdChvbGRUeXBlLm5hbWUsIFwiLlwiKS5jb25jYXQob2xkRmllbGQubmFtZSwgXCIgYXJnIFwiKS5jb25jYXQob2xkQXJnLm5hbWUsIFwiIHdhcyByZW1vdmVkLlwiKVxuICAgIH0pO1xuICB9XG5cbiAgZm9yICh2YXIgX2k0MCA9IDAsIF9hcmdzRGlmZiRwZXJzaXN0ZWQyID0gYXJnc0RpZmYucGVyc2lzdGVkOyBfaTQwIDwgX2FyZ3NEaWZmJHBlcnNpc3RlZDIubGVuZ3RoOyBfaTQwKyspIHtcbiAgICB2YXIgX3JlZjEwID0gX2FyZ3NEaWZmJHBlcnNpc3RlZDJbX2k0MF07XG4gICAgdmFyIF9vbGRBcmcgPSBfcmVmMTBbMF07XG4gICAgdmFyIG5ld0FyZyA9IF9yZWYxMFsxXTtcbiAgICB2YXIgaXNTYWZlID0gaXNDaGFuZ2VTYWZlRm9ySW5wdXRPYmplY3RGaWVsZE9yRmllbGRBcmcoX29sZEFyZy50eXBlLCBuZXdBcmcudHlwZSk7XG5cbiAgICBpZiAoIWlzU2FmZSkge1xuICAgICAgc2NoZW1hQ2hhbmdlcy5wdXNoKHtcbiAgICAgICAgdHlwZTogQnJlYWtpbmdDaGFuZ2VUeXBlLkFSR19DSEFOR0VEX0tJTkQsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIlwiLmNvbmNhdChvbGRUeXBlLm5hbWUsIFwiLlwiKS5jb25jYXQob2xkRmllbGQubmFtZSwgXCIgYXJnIFwiKS5jb25jYXQoX29sZEFyZy5uYW1lLCBcIiBoYXMgY2hhbmdlZCB0eXBlIGZyb20gXCIpICsgXCJcIi5jb25jYXQoU3RyaW5nKF9vbGRBcmcudHlwZSksIFwiIHRvIFwiKS5jb25jYXQoU3RyaW5nKG5ld0FyZy50eXBlKSwgXCIuXCIpXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKF9vbGRBcmcuZGVmYXVsdFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmIChuZXdBcmcuZGVmYXVsdFZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgc2NoZW1hQ2hhbmdlcy5wdXNoKHtcbiAgICAgICAgICB0eXBlOiBEYW5nZXJvdXNDaGFuZ2VUeXBlLkFSR19ERUZBVUxUX1ZBTFVFX0NIQU5HRSxcbiAgICAgICAgICBkZXNjcmlwdGlvbjogXCJcIi5jb25jYXQob2xkVHlwZS5uYW1lLCBcIi5cIikuY29uY2F0KG9sZEZpZWxkLm5hbWUsIFwiIGFyZyBcIikuY29uY2F0KF9vbGRBcmcubmFtZSwgXCIgZGVmYXVsdFZhbHVlIHdhcyByZW1vdmVkLlwiKVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFNpbmNlIHdlIGxvb2tpbmcgb25seSBmb3IgY2xpZW50J3Mgb2JzZXJ2YWJsZSBjaGFuZ2VzIHdlIHNob3VsZFxuICAgICAgICAvLyBjb21wYXJlIGRlZmF1bHQgdmFsdWVzIGluIHRoZSBzYW1lIHJlcHJlc2VudGF0aW9uIGFzIHRoZXkgYXJlXG4gICAgICAgIC8vIHJlcHJlc2VudGVkIGluc2lkZSBpbnRyb3NwZWN0aW9uLlxuICAgICAgICB2YXIgb2xkVmFsdWVTdHIgPSBzdHJpbmdpZnlWYWx1ZShfb2xkQXJnLmRlZmF1bHRWYWx1ZSwgX29sZEFyZy50eXBlKTtcbiAgICAgICAgdmFyIG5ld1ZhbHVlU3RyID0gc3RyaW5naWZ5VmFsdWUobmV3QXJnLmRlZmF1bHRWYWx1ZSwgbmV3QXJnLnR5cGUpO1xuXG4gICAgICAgIGlmIChvbGRWYWx1ZVN0ciAhPT0gbmV3VmFsdWVTdHIpIHtcbiAgICAgICAgICBzY2hlbWFDaGFuZ2VzLnB1c2goe1xuICAgICAgICAgICAgdHlwZTogRGFuZ2Vyb3VzQ2hhbmdlVHlwZS5BUkdfREVGQVVMVF9WQUxVRV9DSEFOR0UsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogXCJcIi5jb25jYXQob2xkVHlwZS5uYW1lLCBcIi5cIikuY29uY2F0KG9sZEZpZWxkLm5hbWUsIFwiIGFyZyBcIikuY29uY2F0KF9vbGRBcmcubmFtZSwgXCIgaGFzIGNoYW5nZWQgZGVmYXVsdFZhbHVlIGZyb20gXCIpLmNvbmNhdChvbGRWYWx1ZVN0ciwgXCIgdG8gXCIpLmNvbmNhdChuZXdWYWx1ZVN0ciwgXCIuXCIpXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBfaTQyID0gMCwgX2FyZ3NEaWZmJGFkZGVkNCA9IGFyZ3NEaWZmLmFkZGVkOyBfaTQyIDwgX2FyZ3NEaWZmJGFkZGVkNC5sZW5ndGg7IF9pNDIrKykge1xuICAgIHZhciBfbmV3QXJnID0gX2FyZ3NEaWZmJGFkZGVkNFtfaTQyXTtcblxuICAgIGlmIChpc1JlcXVpcmVkQXJndW1lbnQoX25ld0FyZykpIHtcbiAgICAgIHNjaGVtYUNoYW5nZXMucHVzaCh7XG4gICAgICAgIHR5cGU6IEJyZWFraW5nQ2hhbmdlVHlwZS5SRVFVSVJFRF9BUkdfQURERUQsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIkEgcmVxdWlyZWQgYXJnIFwiLmNvbmNhdChfbmV3QXJnLm5hbWUsIFwiIG9uIFwiKS5jb25jYXQob2xkVHlwZS5uYW1lLCBcIi5cIikuY29uY2F0KG9sZEZpZWxkLm5hbWUsIFwiIHdhcyBhZGRlZC5cIilcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzY2hlbWFDaGFuZ2VzLnB1c2goe1xuICAgICAgICB0eXBlOiBEYW5nZXJvdXNDaGFuZ2VUeXBlLk9QVElPTkFMX0FSR19BRERFRCxcbiAgICAgICAgZGVzY3JpcHRpb246IFwiQW4gb3B0aW9uYWwgYXJnIFwiLmNvbmNhdChfbmV3QXJnLm5hbWUsIFwiIG9uIFwiKS5jb25jYXQob2xkVHlwZS5uYW1lLCBcIi5cIikuY29uY2F0KG9sZEZpZWxkLm5hbWUsIFwiIHdhcyBhZGRlZC5cIilcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzY2hlbWFDaGFuZ2VzO1xufVxuXG5mdW5jdGlvbiBpc0NoYW5nZVNhZmVGb3JPYmplY3RPckludGVyZmFjZUZpZWxkKG9sZFR5cGUsIG5ld1R5cGUpIHtcbiAgaWYgKGlzTGlzdFR5cGUob2xkVHlwZSkpIHtcbiAgICByZXR1cm4gKC8vIGlmIHRoZXkncmUgYm90aCBsaXN0cywgbWFrZSBzdXJlIHRoZSB1bmRlcmx5aW5nIHR5cGVzIGFyZSBjb21wYXRpYmxlXG4gICAgICBpc0xpc3RUeXBlKG5ld1R5cGUpICYmIGlzQ2hhbmdlU2FmZUZvck9iamVjdE9ySW50ZXJmYWNlRmllbGQob2xkVHlwZS5vZlR5cGUsIG5ld1R5cGUub2ZUeXBlKSB8fCAvLyBtb3ZpbmcgZnJvbSBudWxsYWJsZSB0byBub24tbnVsbCBvZiB0aGUgc2FtZSB1bmRlcmx5aW5nIHR5cGUgaXMgc2FmZVxuICAgICAgaXNOb25OdWxsVHlwZShuZXdUeXBlKSAmJiBpc0NoYW5nZVNhZmVGb3JPYmplY3RPckludGVyZmFjZUZpZWxkKG9sZFR5cGUsIG5ld1R5cGUub2ZUeXBlKVxuICAgICk7XG4gIH1cblxuICBpZiAoaXNOb25OdWxsVHlwZShvbGRUeXBlKSkge1xuICAgIC8vIGlmIHRoZXkncmUgYm90aCBub24tbnVsbCwgbWFrZSBzdXJlIHRoZSB1bmRlcmx5aW5nIHR5cGVzIGFyZSBjb21wYXRpYmxlXG4gICAgcmV0dXJuIGlzTm9uTnVsbFR5cGUobmV3VHlwZSkgJiYgaXNDaGFuZ2VTYWZlRm9yT2JqZWN0T3JJbnRlcmZhY2VGaWVsZChvbGRUeXBlLm9mVHlwZSwgbmV3VHlwZS5vZlR5cGUpO1xuICB9XG5cbiAgcmV0dXJuICgvLyBpZiB0aGV5J3JlIGJvdGggbmFtZWQgdHlwZXMsIHNlZSBpZiB0aGVpciBuYW1lcyBhcmUgZXF1aXZhbGVudFxuICAgIGlzTmFtZWRUeXBlKG5ld1R5cGUpICYmIG9sZFR5cGUubmFtZSA9PT0gbmV3VHlwZS5uYW1lIHx8IC8vIG1vdmluZyBmcm9tIG51bGxhYmxlIHRvIG5vbi1udWxsIG9mIHRoZSBzYW1lIHVuZGVybHlpbmcgdHlwZSBpcyBzYWZlXG4gICAgaXNOb25OdWxsVHlwZShuZXdUeXBlKSAmJiBpc0NoYW5nZVNhZmVGb3JPYmplY3RPckludGVyZmFjZUZpZWxkKG9sZFR5cGUsIG5ld1R5cGUub2ZUeXBlKVxuICApO1xufVxuXG5mdW5jdGlvbiBpc0NoYW5nZVNhZmVGb3JJbnB1dE9iamVjdEZpZWxkT3JGaWVsZEFyZyhvbGRUeXBlLCBuZXdUeXBlKSB7XG4gIGlmIChpc0xpc3RUeXBlKG9sZFR5cGUpKSB7XG4gICAgLy8gaWYgdGhleSdyZSBib3RoIGxpc3RzLCBtYWtlIHN1cmUgdGhlIHVuZGVybHlpbmcgdHlwZXMgYXJlIGNvbXBhdGlibGVcbiAgICByZXR1cm4gaXNMaXN0VHlwZShuZXdUeXBlKSAmJiBpc0NoYW5nZVNhZmVGb3JJbnB1dE9iamVjdEZpZWxkT3JGaWVsZEFyZyhvbGRUeXBlLm9mVHlwZSwgbmV3VHlwZS5vZlR5cGUpO1xuICB9XG5cbiAgaWYgKGlzTm9uTnVsbFR5cGUob2xkVHlwZSkpIHtcbiAgICByZXR1cm4gKC8vIGlmIHRoZXkncmUgYm90aCBub24tbnVsbCwgbWFrZSBzdXJlIHRoZSB1bmRlcmx5aW5nIHR5cGVzIGFyZVxuICAgICAgLy8gY29tcGF0aWJsZVxuICAgICAgaXNOb25OdWxsVHlwZShuZXdUeXBlKSAmJiBpc0NoYW5nZVNhZmVGb3JJbnB1dE9iamVjdEZpZWxkT3JGaWVsZEFyZyhvbGRUeXBlLm9mVHlwZSwgbmV3VHlwZS5vZlR5cGUpIHx8IC8vIG1vdmluZyBmcm9tIG5vbi1udWxsIHRvIG51bGxhYmxlIG9mIHRoZSBzYW1lIHVuZGVybHlpbmcgdHlwZSBpcyBzYWZlXG4gICAgICAhaXNOb25OdWxsVHlwZShuZXdUeXBlKSAmJiBpc0NoYW5nZVNhZmVGb3JJbnB1dE9iamVjdEZpZWxkT3JGaWVsZEFyZyhvbGRUeXBlLm9mVHlwZSwgbmV3VHlwZSlcbiAgICApO1xuICB9IC8vIGlmIHRoZXkncmUgYm90aCBuYW1lZCB0eXBlcywgc2VlIGlmIHRoZWlyIG5hbWVzIGFyZSBlcXVpdmFsZW50XG5cblxuICByZXR1cm4gaXNOYW1lZFR5cGUobmV3VHlwZSkgJiYgb2xkVHlwZS5uYW1lID09PSBuZXdUeXBlLm5hbWU7XG59XG5cbmZ1bmN0aW9uIHR5cGVLaW5kTmFtZSh0eXBlKSB7XG4gIGlmIChpc1NjYWxhclR5cGUodHlwZSkpIHtcbiAgICByZXR1cm4gJ2EgU2NhbGFyIHR5cGUnO1xuICB9XG5cbiAgaWYgKGlzT2JqZWN0VHlwZSh0eXBlKSkge1xuICAgIHJldHVybiAnYW4gT2JqZWN0IHR5cGUnO1xuICB9XG5cbiAgaWYgKGlzSW50ZXJmYWNlVHlwZSh0eXBlKSkge1xuICAgIHJldHVybiAnYW4gSW50ZXJmYWNlIHR5cGUnO1xuICB9XG5cbiAgaWYgKGlzVW5pb25UeXBlKHR5cGUpKSB7XG4gICAgcmV0dXJuICdhIFVuaW9uIHR5cGUnO1xuICB9XG5cbiAgaWYgKGlzRW51bVR5cGUodHlwZSkpIHtcbiAgICByZXR1cm4gJ2FuIEVudW0gdHlwZSc7XG4gIH0gLy8gaXN0YW5idWwgaWdub3JlIGVsc2UgKFNlZTogJ2h0dHBzOi8vZ2l0aHViLmNvbS9ncmFwaHFsL2dyYXBocWwtanMvaXNzdWVzLzI2MTgnKVxuXG5cbiAgaWYgKGlzSW5wdXRPYmplY3RUeXBlKHR5cGUpKSB7XG4gICAgcmV0dXJuICdhbiBJbnB1dCB0eXBlJztcbiAgfSAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAoTm90IHJlYWNoYWJsZS4gQWxsIHBvc3NpYmxlIG5hbWVkIHR5cGVzIGhhdmUgYmVlbiBjb25zaWRlcmVkKVxuXG5cbiAgZmFsc2UgfHwgaW52YXJpYW50KDAsICdVbmV4cGVjdGVkIHR5cGU6ICcgKyBpbnNwZWN0KHR5cGUpKTtcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5VmFsdWUodmFsdWUsIHR5cGUpIHtcbiAgdmFyIGFzdCA9IGFzdEZyb21WYWx1ZSh2YWx1ZSwgdHlwZSk7XG4gIGFzdCAhPSBudWxsIHx8IGludmFyaWFudCgwKTtcbiAgdmFyIHNvcnRlZEFTVCA9IHZpc2l0KGFzdCwge1xuICAgIE9iamVjdFZhbHVlOiBmdW5jdGlvbiBPYmplY3RWYWx1ZShvYmplY3ROb2RlKSB7XG4gICAgICAvLyBNYWtlIGEgY29weSBzaW5jZSBzb3J0IG11dGF0ZXMgYXJyYXlcbiAgICAgIHZhciBmaWVsZHMgPSBbXS5jb25jYXQob2JqZWN0Tm9kZS5maWVsZHMpO1xuICAgICAgZmllbGRzLnNvcnQoZnVuY3Rpb24gKGZpZWxkQSwgZmllbGRCKSB7XG4gICAgICAgIHJldHVybiBuYXR1cmFsQ29tcGFyZShmaWVsZEEubmFtZS52YWx1ZSwgZmllbGRCLm5hbWUudmFsdWUpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBvYmplY3ROb2RlKSwge30sIHtcbiAgICAgICAgZmllbGRzOiBmaWVsZHNcbiAgICAgIH0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBwcmludChzb3J0ZWRBU1QpO1xufVxuXG5mdW5jdGlvbiBkaWZmKG9sZEFycmF5LCBuZXdBcnJheSkge1xuICB2YXIgYWRkZWQgPSBbXTtcbiAgdmFyIHJlbW92ZWQgPSBbXTtcbiAgdmFyIHBlcnNpc3RlZCA9IFtdO1xuICB2YXIgb2xkTWFwID0ga2V5TWFwKG9sZEFycmF5LCBmdW5jdGlvbiAoX3JlZjExKSB7XG4gICAgdmFyIG5hbWUgPSBfcmVmMTEubmFtZTtcbiAgICByZXR1cm4gbmFtZTtcbiAgfSk7XG4gIHZhciBuZXdNYXAgPSBrZXlNYXAobmV3QXJyYXksIGZ1bmN0aW9uIChfcmVmMTIpIHtcbiAgICB2YXIgbmFtZSA9IF9yZWYxMi5uYW1lO1xuICAgIHJldHVybiBuYW1lO1xuICB9KTtcblxuICBmb3IgKHZhciBfaTQ0ID0gMDsgX2k0NCA8IG9sZEFycmF5Lmxlbmd0aDsgX2k0NCsrKSB7XG4gICAgdmFyIG9sZEl0ZW0gPSBvbGRBcnJheVtfaTQ0XTtcbiAgICB2YXIgbmV3SXRlbSA9IG5ld01hcFtvbGRJdGVtLm5hbWVdO1xuXG4gICAgaWYgKG5ld0l0ZW0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmVtb3ZlZC5wdXNoKG9sZEl0ZW0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBwZXJzaXN0ZWQucHVzaChbb2xkSXRlbSwgbmV3SXRlbV0pO1xuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIF9pNDYgPSAwOyBfaTQ2IDwgbmV3QXJyYXkubGVuZ3RoOyBfaTQ2KyspIHtcbiAgICB2YXIgX25ld0l0ZW0gPSBuZXdBcnJheVtfaTQ2XTtcblxuICAgIGlmIChvbGRNYXBbX25ld0l0ZW0ubmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgYWRkZWQucHVzaChfbmV3SXRlbSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBhZGRlZDogYWRkZWQsXG4gICAgcGVyc2lzdGVkOiBwZXJzaXN0ZWQsXG4gICAgcmVtb3ZlZDogcmVtb3ZlZFxuICB9O1xufVxuIiwiaW1wb3J0IHsgdmFsaWRhdGUgfSBmcm9tIFwiLi4vdmFsaWRhdGlvbi92YWxpZGF0ZS5tanNcIjtcbmltcG9ydCB7IE5vRGVwcmVjYXRlZEN1c3RvbVJ1bGUgfSBmcm9tIFwiLi4vdmFsaWRhdGlvbi9ydWxlcy9jdXN0b20vTm9EZXByZWNhdGVkQ3VzdG9tUnVsZS5tanNcIjtcbi8qKlxuICogQSB2YWxpZGF0aW9uIHJ1bGUgd2hpY2ggcmVwb3J0cyBkZXByZWNhdGVkIHVzYWdlcy5cbiAqXG4gKiBSZXR1cm5zIGEgbGlzdCBvZiBHcmFwaFFMRXJyb3IgaW5zdGFuY2VzIGRlc2NyaWJpbmcgZWFjaCBkZXByZWNhdGVkIHVzZS5cbiAqXG4gKiBAZGVwcmVjYXRlZCBQbGVhc2UgdXNlIGB2YWxpZGF0ZWAgd2l0aCBgTm9EZXByZWNhdGVkQ3VzdG9tUnVsZWAgaW5zdGVhZDpcbiAqXG4gKiBgYGBcbiAqIGltcG9ydCB7IHZhbGlkYXRlLCBOb0RlcHJlY2F0ZWRDdXN0b21SdWxlIH0gZnJvbSAnZ3JhcGhxbCdcbiAqXG4gKiBjb25zdCBlcnJvcnMgPSB2YWxpZGF0ZShzY2hlbWEsIGRvY3VtZW50LCBbTm9EZXByZWNhdGVkQ3VzdG9tUnVsZV0pXG4gKiBgYGBcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZmluZERlcHJlY2F0ZWRVc2FnZXMoc2NoZW1hLCBhc3QpIHtcbiAgcmV0dXJuIHZhbGlkYXRlKHNjaGVtYSwgYXN0LCBbTm9EZXByZWNhdGVkQ3VzdG9tUnVsZV0pO1xufVxuIiwiZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pOyBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRJbnRyb3NwZWN0aW9uUXVlcnkob3B0aW9ucykge1xuICB2YXIgb3B0aW9uc1dpdGhEZWZhdWx0ID0gX29iamVjdFNwcmVhZCh7XG4gICAgZGVzY3JpcHRpb25zOiB0cnVlLFxuICAgIHNwZWNpZmllZEJ5VXJsOiBmYWxzZSxcbiAgICBkaXJlY3RpdmVJc1JlcGVhdGFibGU6IGZhbHNlLFxuICAgIHNjaGVtYURlc2NyaXB0aW9uOiBmYWxzZSxcbiAgICBpbnB1dFZhbHVlRGVwcmVjYXRpb246IGZhbHNlXG4gIH0sIG9wdGlvbnMpO1xuXG4gIHZhciBkZXNjcmlwdGlvbnMgPSBvcHRpb25zV2l0aERlZmF1bHQuZGVzY3JpcHRpb25zID8gJ2Rlc2NyaXB0aW9uJyA6ICcnO1xuICB2YXIgc3BlY2lmaWVkQnlVcmwgPSBvcHRpb25zV2l0aERlZmF1bHQuc3BlY2lmaWVkQnlVcmwgPyAnc3BlY2lmaWVkQnlVcmwnIDogJyc7XG4gIHZhciBkaXJlY3RpdmVJc1JlcGVhdGFibGUgPSBvcHRpb25zV2l0aERlZmF1bHQuZGlyZWN0aXZlSXNSZXBlYXRhYmxlID8gJ2lzUmVwZWF0YWJsZScgOiAnJztcbiAgdmFyIHNjaGVtYURlc2NyaXB0aW9uID0gb3B0aW9uc1dpdGhEZWZhdWx0LnNjaGVtYURlc2NyaXB0aW9uID8gZGVzY3JpcHRpb25zIDogJyc7XG5cbiAgZnVuY3Rpb24gaW5wdXREZXByZWNhdGlvbihzdHIpIHtcbiAgICByZXR1cm4gb3B0aW9uc1dpdGhEZWZhdWx0LmlucHV0VmFsdWVEZXByZWNhdGlvbiA/IHN0ciA6ICcnO1xuICB9XG5cbiAgcmV0dXJuIFwiXFxuICAgIHF1ZXJ5IEludHJvc3BlY3Rpb25RdWVyeSB7XFxuICAgICAgX19zY2hlbWEge1xcbiAgICAgICAgXCIuY29uY2F0KHNjaGVtYURlc2NyaXB0aW9uLCBcIlxcbiAgICAgICAgcXVlcnlUeXBlIHsgbmFtZSB9XFxuICAgICAgICBtdXRhdGlvblR5cGUgeyBuYW1lIH1cXG4gICAgICAgIHN1YnNjcmlwdGlvblR5cGUgeyBuYW1lIH1cXG4gICAgICAgIHR5cGVzIHtcXG4gICAgICAgICAgLi4uRnVsbFR5cGVcXG4gICAgICAgIH1cXG4gICAgICAgIGRpcmVjdGl2ZXMge1xcbiAgICAgICAgICBuYW1lXFxuICAgICAgICAgIFwiKS5jb25jYXQoZGVzY3JpcHRpb25zLCBcIlxcbiAgICAgICAgICBcIikuY29uY2F0KGRpcmVjdGl2ZUlzUmVwZWF0YWJsZSwgXCJcXG4gICAgICAgICAgbG9jYXRpb25zXFxuICAgICAgICAgIGFyZ3NcIikuY29uY2F0KGlucHV0RGVwcmVjYXRpb24oJyhpbmNsdWRlRGVwcmVjYXRlZDogdHJ1ZSknKSwgXCIge1xcbiAgICAgICAgICAgIC4uLklucHV0VmFsdWVcXG4gICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgIH1cXG4gICAgfVxcblxcbiAgICBmcmFnbWVudCBGdWxsVHlwZSBvbiBfX1R5cGUge1xcbiAgICAgIGtpbmRcXG4gICAgICBuYW1lXFxuICAgICAgXCIpLmNvbmNhdChkZXNjcmlwdGlvbnMsIFwiXFxuICAgICAgXCIpLmNvbmNhdChzcGVjaWZpZWRCeVVybCwgXCJcXG4gICAgICBmaWVsZHMoaW5jbHVkZURlcHJlY2F0ZWQ6IHRydWUpIHtcXG4gICAgICAgIG5hbWVcXG4gICAgICAgIFwiKS5jb25jYXQoZGVzY3JpcHRpb25zLCBcIlxcbiAgICAgICAgYXJnc1wiKS5jb25jYXQoaW5wdXREZXByZWNhdGlvbignKGluY2x1ZGVEZXByZWNhdGVkOiB0cnVlKScpLCBcIiB7XFxuICAgICAgICAgIC4uLklucHV0VmFsdWVcXG4gICAgICAgIH1cXG4gICAgICAgIHR5cGUge1xcbiAgICAgICAgICAuLi5UeXBlUmVmXFxuICAgICAgICB9XFxuICAgICAgICBpc0RlcHJlY2F0ZWRcXG4gICAgICAgIGRlcHJlY2F0aW9uUmVhc29uXFxuICAgICAgfVxcbiAgICAgIGlucHV0RmllbGRzXCIpLmNvbmNhdChpbnB1dERlcHJlY2F0aW9uKCcoaW5jbHVkZURlcHJlY2F0ZWQ6IHRydWUpJyksIFwiIHtcXG4gICAgICAgIC4uLklucHV0VmFsdWVcXG4gICAgICB9XFxuICAgICAgaW50ZXJmYWNlcyB7XFxuICAgICAgICAuLi5UeXBlUmVmXFxuICAgICAgfVxcbiAgICAgIGVudW1WYWx1ZXMoaW5jbHVkZURlcHJlY2F0ZWQ6IHRydWUpIHtcXG4gICAgICAgIG5hbWVcXG4gICAgICAgIFwiKS5jb25jYXQoZGVzY3JpcHRpb25zLCBcIlxcbiAgICAgICAgaXNEZXByZWNhdGVkXFxuICAgICAgICBkZXByZWNhdGlvblJlYXNvblxcbiAgICAgIH1cXG4gICAgICBwb3NzaWJsZVR5cGVzIHtcXG4gICAgICAgIC4uLlR5cGVSZWZcXG4gICAgICB9XFxuICAgIH1cXG5cXG4gICAgZnJhZ21lbnQgSW5wdXRWYWx1ZSBvbiBfX0lucHV0VmFsdWUge1xcbiAgICAgIG5hbWVcXG4gICAgICBcIikuY29uY2F0KGRlc2NyaXB0aW9ucywgXCJcXG4gICAgICB0eXBlIHsgLi4uVHlwZVJlZiB9XFxuICAgICAgZGVmYXVsdFZhbHVlXFxuICAgICAgXCIpLmNvbmNhdChpbnB1dERlcHJlY2F0aW9uKCdpc0RlcHJlY2F0ZWQnKSwgXCJcXG4gICAgICBcIikuY29uY2F0KGlucHV0RGVwcmVjYXRpb24oJ2RlcHJlY2F0aW9uUmVhc29uJyksIFwiXFxuICAgIH1cXG5cXG4gICAgZnJhZ21lbnQgVHlwZVJlZiBvbiBfX1R5cGUge1xcbiAgICAgIGtpbmRcXG4gICAgICBuYW1lXFxuICAgICAgb2ZUeXBlIHtcXG4gICAgICAgIGtpbmRcXG4gICAgICAgIG5hbWVcXG4gICAgICAgIG9mVHlwZSB7XFxuICAgICAgICAgIGtpbmRcXG4gICAgICAgICAgbmFtZVxcbiAgICAgICAgICBvZlR5cGUge1xcbiAgICAgICAgICAgIGtpbmRcXG4gICAgICAgICAgICBuYW1lXFxuICAgICAgICAgICAgb2ZUeXBlIHtcXG4gICAgICAgICAgICAgIGtpbmRcXG4gICAgICAgICAgICAgIG5hbWVcXG4gICAgICAgICAgICAgIG9mVHlwZSB7XFxuICAgICAgICAgICAgICAgIGtpbmRcXG4gICAgICAgICAgICAgICAgbmFtZVxcbiAgICAgICAgICAgICAgICBvZlR5cGUge1xcbiAgICAgICAgICAgICAgICAgIGtpbmRcXG4gICAgICAgICAgICAgICAgICBuYW1lXFxuICAgICAgICAgICAgICAgICAgb2ZUeXBlIHtcXG4gICAgICAgICAgICAgICAgICAgIGtpbmRcXG4gICAgICAgICAgICAgICAgICAgIG5hbWVcXG4gICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICB9XFxuICAgIH1cXG4gIFwiKTtcbn1cbiIsImltcG9ydCB7IEtpbmQgfSBmcm9tIFwiLi4vbGFuZ3VhZ2Uva2luZHMubWpzXCI7XG4vKipcbiAqIFJldHVybnMgYW4gb3BlcmF0aW9uIEFTVCBnaXZlbiBhIGRvY3VtZW50IEFTVCBhbmQgb3B0aW9uYWxseSBhbiBvcGVyYXRpb25cbiAqIG5hbWUuIElmIGEgbmFtZSBpcyBub3QgcHJvdmlkZWQsIGFuIG9wZXJhdGlvbiBpcyBvbmx5IHJldHVybmVkIGlmIG9ubHkgb25lIGlzXG4gKiBwcm92aWRlZCBpbiB0aGUgZG9jdW1lbnQuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE9wZXJhdGlvbkFTVChkb2N1bWVudEFTVCwgb3BlcmF0aW9uTmFtZSkge1xuICB2YXIgb3BlcmF0aW9uID0gbnVsbDtcblxuICBmb3IgKHZhciBfaTIgPSAwLCBfZG9jdW1lbnRBU1QkZGVmaW5pdGkyID0gZG9jdW1lbnRBU1QuZGVmaW5pdGlvbnM7IF9pMiA8IF9kb2N1bWVudEFTVCRkZWZpbml0aTIubGVuZ3RoOyBfaTIrKykge1xuICAgIHZhciBkZWZpbml0aW9uID0gX2RvY3VtZW50QVNUJGRlZmluaXRpMltfaTJdO1xuXG4gICAgaWYgKGRlZmluaXRpb24ua2luZCA9PT0gS2luZC5PUEVSQVRJT05fREVGSU5JVElPTikge1xuICAgICAgdmFyIF9kZWZpbml0aW9uJG5hbWU7XG5cbiAgICAgIGlmIChvcGVyYXRpb25OYW1lID09IG51bGwpIHtcbiAgICAgICAgLy8gSWYgbm8gb3BlcmF0aW9uIG5hbWUgd2FzIHByb3ZpZGVkLCBvbmx5IHJldHVybiBhbiBPcGVyYXRpb24gaWYgdGhlcmVcbiAgICAgICAgLy8gaXMgb25lIGRlZmluZWQgaW4gdGhlIGRvY3VtZW50LiBVcG9uIGVuY291bnRlcmluZyB0aGUgc2Vjb25kLCByZXR1cm5cbiAgICAgICAgLy8gbnVsbC5cbiAgICAgICAgaWYgKG9wZXJhdGlvbikge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgb3BlcmF0aW9uID0gZGVmaW5pdGlvbjtcbiAgICAgIH0gZWxzZSBpZiAoKChfZGVmaW5pdGlvbiRuYW1lID0gZGVmaW5pdGlvbi5uYW1lKSA9PT0gbnVsbCB8fCBfZGVmaW5pdGlvbiRuYW1lID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZGVmaW5pdGlvbiRuYW1lLnZhbHVlKSA9PT0gb3BlcmF0aW9uTmFtZSkge1xuICAgICAgICByZXR1cm4gZGVmaW5pdGlvbjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gb3BlcmF0aW9uO1xufVxuIiwiaW1wb3J0IHsgR3JhcGhRTEVycm9yIH0gZnJvbSBcIi4uL2Vycm9yL0dyYXBoUUxFcnJvci5tanNcIjtcblxuLyoqXG4gKiBFeHRyYWN0cyB0aGUgcm9vdCB0eXBlIG9mIHRoZSBvcGVyYXRpb24gZnJvbSB0aGUgc2NoZW1hLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0T3BlcmF0aW9uUm9vdFR5cGUoc2NoZW1hLCBvcGVyYXRpb24pIHtcbiAgaWYgKG9wZXJhdGlvbi5vcGVyYXRpb24gPT09ICdxdWVyeScpIHtcbiAgICB2YXIgcXVlcnlUeXBlID0gc2NoZW1hLmdldFF1ZXJ5VHlwZSgpO1xuXG4gICAgaWYgKCFxdWVyeVR5cGUpIHtcbiAgICAgIHRocm93IG5ldyBHcmFwaFFMRXJyb3IoJ1NjaGVtYSBkb2VzIG5vdCBkZWZpbmUgdGhlIHJlcXVpcmVkIHF1ZXJ5IHJvb3QgdHlwZS4nLCBvcGVyYXRpb24pO1xuICAgIH1cblxuICAgIHJldHVybiBxdWVyeVR5cGU7XG4gIH1cblxuICBpZiAob3BlcmF0aW9uLm9wZXJhdGlvbiA9PT0gJ211dGF0aW9uJykge1xuICAgIHZhciBtdXRhdGlvblR5cGUgPSBzY2hlbWEuZ2V0TXV0YXRpb25UeXBlKCk7XG5cbiAgICBpZiAoIW11dGF0aW9uVHlwZSkge1xuICAgICAgdGhyb3cgbmV3IEdyYXBoUUxFcnJvcignU2NoZW1hIGlzIG5vdCBjb25maWd1cmVkIGZvciBtdXRhdGlvbnMuJywgb3BlcmF0aW9uKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbXV0YXRpb25UeXBlO1xuICB9XG5cbiAgaWYgKG9wZXJhdGlvbi5vcGVyYXRpb24gPT09ICdzdWJzY3JpcHRpb24nKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvblR5cGUgPSBzY2hlbWEuZ2V0U3Vic2NyaXB0aW9uVHlwZSgpO1xuXG4gICAgaWYgKCFzdWJzY3JpcHRpb25UeXBlKSB7XG4gICAgICB0aHJvdyBuZXcgR3JhcGhRTEVycm9yKCdTY2hlbWEgaXMgbm90IGNvbmZpZ3VyZWQgZm9yIHN1YnNjcmlwdGlvbnMuJywgb3BlcmF0aW9uKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3Vic2NyaXB0aW9uVHlwZTtcbiAgfVxuXG4gIHRocm93IG5ldyBHcmFwaFFMRXJyb3IoJ0NhbiBvbmx5IGhhdmUgcXVlcnksIG11dGF0aW9uIGFuZCBzdWJzY3JpcHRpb24gb3BlcmF0aW9ucy4nLCBvcGVyYXRpb24pO1xufVxuIiwiZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pOyBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcIi4uL2pzdXRpbHMvaW52YXJpYW50Lm1qc1wiO1xuaW1wb3J0IHsgcGFyc2UgfSBmcm9tIFwiLi4vbGFuZ3VhZ2UvcGFyc2VyLm1qc1wiO1xuaW1wb3J0IHsgZXhlY3V0ZVN5bmMgfSBmcm9tIFwiLi4vZXhlY3V0aW9uL2V4ZWN1dGUubWpzXCI7XG5pbXBvcnQgeyBnZXRJbnRyb3NwZWN0aW9uUXVlcnkgfSBmcm9tIFwiLi9nZXRJbnRyb3NwZWN0aW9uUXVlcnkubWpzXCI7XG4vKipcbiAqIEJ1aWxkIGFuIEludHJvc3BlY3Rpb25RdWVyeSBmcm9tIGEgR3JhcGhRTFNjaGVtYVxuICpcbiAqIEludHJvc3BlY3Rpb25RdWVyeSBpcyB1c2VmdWwgZm9yIHV0aWxpdGllcyB0aGF0IGNhcmUgYWJvdXQgdHlwZSBhbmQgZmllbGRcbiAqIHJlbGF0aW9uc2hpcHMsIGJ1dCBkbyBub3QgbmVlZCB0byB0cmF2ZXJzZSB0aHJvdWdoIHRob3NlIHJlbGF0aW9uc2hpcHMuXG4gKlxuICogVGhpcyBpcyB0aGUgaW52ZXJzZSBvZiBidWlsZENsaWVudFNjaGVtYS4gVGhlIHByaW1hcnkgdXNlIGNhc2UgaXMgb3V0c2lkZVxuICogb2YgdGhlIHNlcnZlciBjb250ZXh0LCBmb3IgaW5zdGFuY2Ugd2hlbiBkb2luZyBzY2hlbWEgY29tcGFyaXNvbnMuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGludHJvc3BlY3Rpb25Gcm9tU2NoZW1hKHNjaGVtYSwgb3B0aW9ucykge1xuICB2YXIgb3B0aW9uc1dpdGhEZWZhdWx0cyA9IF9vYmplY3RTcHJlYWQoe1xuICAgIHNwZWNpZmllZEJ5VXJsOiB0cnVlLFxuICAgIGRpcmVjdGl2ZUlzUmVwZWF0YWJsZTogdHJ1ZSxcbiAgICBzY2hlbWFEZXNjcmlwdGlvbjogdHJ1ZSxcbiAgICBpbnB1dFZhbHVlRGVwcmVjYXRpb246IHRydWVcbiAgfSwgb3B0aW9ucyk7XG5cbiAgdmFyIGRvY3VtZW50ID0gcGFyc2UoZ2V0SW50cm9zcGVjdGlvblF1ZXJ5KG9wdGlvbnNXaXRoRGVmYXVsdHMpKTtcbiAgdmFyIHJlc3VsdCA9IGV4ZWN1dGVTeW5jKHtcbiAgICBzY2hlbWE6IHNjaGVtYSxcbiAgICBkb2N1bWVudDogZG9jdW1lbnRcbiAgfSk7XG4gICFyZXN1bHQuZXJyb3JzICYmIHJlc3VsdC5kYXRhIHx8IGludmFyaWFudCgwKTtcbiAgcmV0dXJuIHJlc3VsdC5kYXRhO1xufVxuIiwiZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pOyBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmltcG9ydCBvYmplY3RWYWx1ZXMgZnJvbSBcIi4uL3BvbHlmaWxscy9vYmplY3RWYWx1ZXMubWpzXCI7XG5pbXBvcnQgaW5zcGVjdCBmcm9tIFwiLi4vanN1dGlscy9pbnNwZWN0Lm1qc1wiO1xuaW1wb3J0IGludmFyaWFudCBmcm9tIFwiLi4vanN1dGlscy9pbnZhcmlhbnQubWpzXCI7XG5pbXBvcnQga2V5VmFsTWFwIGZyb20gXCIuLi9qc3V0aWxzL2tleVZhbE1hcC5tanNcIjtcbmltcG9ydCBuYXR1cmFsQ29tcGFyZSBmcm9tIFwiLi4vanN1dGlscy9uYXR1cmFsQ29tcGFyZS5tanNcIjtcbmltcG9ydCB7IEdyYXBoUUxTY2hlbWEgfSBmcm9tIFwiLi4vdHlwZS9zY2hlbWEubWpzXCI7XG5pbXBvcnQgeyBHcmFwaFFMRGlyZWN0aXZlIH0gZnJvbSBcIi4uL3R5cGUvZGlyZWN0aXZlcy5tanNcIjtcbmltcG9ydCB7IGlzSW50cm9zcGVjdGlvblR5cGUgfSBmcm9tIFwiLi4vdHlwZS9pbnRyb3NwZWN0aW9uLm1qc1wiO1xuaW1wb3J0IHsgR3JhcGhRTExpc3QsIEdyYXBoUUxOb25OdWxsLCBHcmFwaFFMT2JqZWN0VHlwZSwgR3JhcGhRTEludGVyZmFjZVR5cGUsIEdyYXBoUUxVbmlvblR5cGUsIEdyYXBoUUxFbnVtVHlwZSwgR3JhcGhRTElucHV0T2JqZWN0VHlwZSwgaXNMaXN0VHlwZSwgaXNOb25OdWxsVHlwZSwgaXNTY2FsYXJUeXBlLCBpc09iamVjdFR5cGUsIGlzSW50ZXJmYWNlVHlwZSwgaXNVbmlvblR5cGUsIGlzRW51bVR5cGUsIGlzSW5wdXRPYmplY3RUeXBlIH0gZnJvbSBcIi4uL3R5cGUvZGVmaW5pdGlvbi5tanNcIjtcbi8qKlxuICogU29ydCBHcmFwaFFMU2NoZW1hLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gcmV0dXJucyBhIHNvcnRlZCBjb3B5IG9mIHRoZSBnaXZlbiBHcmFwaFFMU2NoZW1hLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBsZXhpY29ncmFwaGljU29ydFNjaGVtYShzY2hlbWEpIHtcbiAgdmFyIHNjaGVtYUNvbmZpZyA9IHNjaGVtYS50b0NvbmZpZygpO1xuICB2YXIgdHlwZU1hcCA9IGtleVZhbE1hcChzb3J0QnlOYW1lKHNjaGVtYUNvbmZpZy50eXBlcyksIGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgcmV0dXJuIHR5cGUubmFtZTtcbiAgfSwgc29ydE5hbWVkVHlwZSk7XG4gIHJldHVybiBuZXcgR3JhcGhRTFNjaGVtYShfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHNjaGVtYUNvbmZpZyksIHt9LCB7XG4gICAgdHlwZXM6IG9iamVjdFZhbHVlcyh0eXBlTWFwKSxcbiAgICBkaXJlY3RpdmVzOiBzb3J0QnlOYW1lKHNjaGVtYUNvbmZpZy5kaXJlY3RpdmVzKS5tYXAoc29ydERpcmVjdGl2ZSksXG4gICAgcXVlcnk6IHJlcGxhY2VNYXliZVR5cGUoc2NoZW1hQ29uZmlnLnF1ZXJ5KSxcbiAgICBtdXRhdGlvbjogcmVwbGFjZU1heWJlVHlwZShzY2hlbWFDb25maWcubXV0YXRpb24pLFxuICAgIHN1YnNjcmlwdGlvbjogcmVwbGFjZU1heWJlVHlwZShzY2hlbWFDb25maWcuc3Vic2NyaXB0aW9uKVxuICB9KSk7XG5cbiAgZnVuY3Rpb24gcmVwbGFjZVR5cGUodHlwZSkge1xuICAgIGlmIChpc0xpc3RUeXBlKHR5cGUpKSB7XG4gICAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1yZXR1cm5dXG4gICAgICByZXR1cm4gbmV3IEdyYXBoUUxMaXN0KHJlcGxhY2VUeXBlKHR5cGUub2ZUeXBlKSk7XG4gICAgfSBlbHNlIGlmIChpc05vbk51bGxUeXBlKHR5cGUpKSB7XG4gICAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1yZXR1cm5dXG4gICAgICByZXR1cm4gbmV3IEdyYXBoUUxOb25OdWxsKHJlcGxhY2VUeXBlKHR5cGUub2ZUeXBlKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcGxhY2VOYW1lZFR5cGUodHlwZSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXBsYWNlTmFtZWRUeXBlKHR5cGUpIHtcbiAgICByZXR1cm4gdHlwZU1hcFt0eXBlLm5hbWVdO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZU1heWJlVHlwZShtYXliZVR5cGUpIHtcbiAgICByZXR1cm4gbWF5YmVUeXBlICYmIHJlcGxhY2VOYW1lZFR5cGUobWF5YmVUeXBlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNvcnREaXJlY3RpdmUoZGlyZWN0aXZlKSB7XG4gICAgdmFyIGNvbmZpZyA9IGRpcmVjdGl2ZS50b0NvbmZpZygpO1xuICAgIHJldHVybiBuZXcgR3JhcGhRTERpcmVjdGl2ZShfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGNvbmZpZyksIHt9LCB7XG4gICAgICBsb2NhdGlvbnM6IHNvcnRCeShjb25maWcubG9jYXRpb25zLCBmdW5jdGlvbiAoeCkge1xuICAgICAgICByZXR1cm4geDtcbiAgICAgIH0pLFxuICAgICAgYXJnczogc29ydEFyZ3MoY29uZmlnLmFyZ3MpXG4gICAgfSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gc29ydEFyZ3MoYXJncykge1xuICAgIHJldHVybiBzb3J0T2JqTWFwKGFyZ3MsIGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGFyZyksIHt9LCB7XG4gICAgICAgIHR5cGU6IHJlcGxhY2VUeXBlKGFyZy50eXBlKVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBzb3J0RmllbGRzKGZpZWxkc01hcCkge1xuICAgIHJldHVybiBzb3J0T2JqTWFwKGZpZWxkc01hcCwgZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgICByZXR1cm4gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBmaWVsZCksIHt9LCB7XG4gICAgICAgIHR5cGU6IHJlcGxhY2VUeXBlKGZpZWxkLnR5cGUpLFxuICAgICAgICBhcmdzOiBzb3J0QXJncyhmaWVsZC5hcmdzKVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBzb3J0SW5wdXRGaWVsZHMoZmllbGRzTWFwKSB7XG4gICAgcmV0dXJuIHNvcnRPYmpNYXAoZmllbGRzTWFwLCBmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGZpZWxkKSwge30sIHtcbiAgICAgICAgdHlwZTogcmVwbGFjZVR5cGUoZmllbGQudHlwZSlcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gc29ydFR5cGVzKGFycikge1xuICAgIHJldHVybiBzb3J0QnlOYW1lKGFycikubWFwKHJlcGxhY2VOYW1lZFR5cGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gc29ydE5hbWVkVHlwZSh0eXBlKSB7XG4gICAgaWYgKGlzU2NhbGFyVHlwZSh0eXBlKSB8fCBpc0ludHJvc3BlY3Rpb25UeXBlKHR5cGUpKSB7XG4gICAgICByZXR1cm4gdHlwZTtcbiAgICB9XG5cbiAgICBpZiAoaXNPYmplY3RUeXBlKHR5cGUpKSB7XG4gICAgICB2YXIgY29uZmlnID0gdHlwZS50b0NvbmZpZygpO1xuICAgICAgcmV0dXJuIG5ldyBHcmFwaFFMT2JqZWN0VHlwZShfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGNvbmZpZyksIHt9LCB7XG4gICAgICAgIGludGVyZmFjZXM6IGZ1bmN0aW9uIGludGVyZmFjZXMoKSB7XG4gICAgICAgICAgcmV0dXJuIHNvcnRUeXBlcyhjb25maWcuaW50ZXJmYWNlcyk7XG4gICAgICAgIH0sXG4gICAgICAgIGZpZWxkczogZnVuY3Rpb24gZmllbGRzKCkge1xuICAgICAgICAgIHJldHVybiBzb3J0RmllbGRzKGNvbmZpZy5maWVsZHMpO1xuICAgICAgICB9XG4gICAgICB9KSk7XG4gICAgfVxuXG4gICAgaWYgKGlzSW50ZXJmYWNlVHlwZSh0eXBlKSkge1xuICAgICAgdmFyIF9jb25maWcgPSB0eXBlLnRvQ29uZmlnKCk7XG5cbiAgICAgIHJldHVybiBuZXcgR3JhcGhRTEludGVyZmFjZVR5cGUoX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBfY29uZmlnKSwge30sIHtcbiAgICAgICAgaW50ZXJmYWNlczogZnVuY3Rpb24gaW50ZXJmYWNlcygpIHtcbiAgICAgICAgICByZXR1cm4gc29ydFR5cGVzKF9jb25maWcuaW50ZXJmYWNlcyk7XG4gICAgICAgIH0sXG4gICAgICAgIGZpZWxkczogZnVuY3Rpb24gZmllbGRzKCkge1xuICAgICAgICAgIHJldHVybiBzb3J0RmllbGRzKF9jb25maWcuZmllbGRzKTtcbiAgICAgICAgfVxuICAgICAgfSkpO1xuICAgIH1cblxuICAgIGlmIChpc1VuaW9uVHlwZSh0eXBlKSkge1xuICAgICAgdmFyIF9jb25maWcyID0gdHlwZS50b0NvbmZpZygpO1xuXG4gICAgICByZXR1cm4gbmV3IEdyYXBoUUxVbmlvblR5cGUoX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBfY29uZmlnMiksIHt9LCB7XG4gICAgICAgIHR5cGVzOiBmdW5jdGlvbiB0eXBlcygpIHtcbiAgICAgICAgICByZXR1cm4gc29ydFR5cGVzKF9jb25maWcyLnR5cGVzKTtcbiAgICAgICAgfVxuICAgICAgfSkpO1xuICAgIH1cblxuICAgIGlmIChpc0VudW1UeXBlKHR5cGUpKSB7XG4gICAgICB2YXIgX2NvbmZpZzMgPSB0eXBlLnRvQ29uZmlnKCk7XG5cbiAgICAgIHJldHVybiBuZXcgR3JhcGhRTEVudW1UeXBlKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgX2NvbmZpZzMpLCB7fSwge1xuICAgICAgICB2YWx1ZXM6IHNvcnRPYmpNYXAoX2NvbmZpZzMudmFsdWVzKVxuICAgICAgfSkpO1xuICAgIH0gLy8gaXN0YW5idWwgaWdub3JlIGVsc2UgKFNlZTogJ2h0dHBzOi8vZ2l0aHViLmNvbS9ncmFwaHFsL2dyYXBocWwtanMvaXNzdWVzLzI2MTgnKVxuXG5cbiAgICBpZiAoaXNJbnB1dE9iamVjdFR5cGUodHlwZSkpIHtcbiAgICAgIHZhciBfY29uZmlnNCA9IHR5cGUudG9Db25maWcoKTtcblxuICAgICAgcmV0dXJuIG5ldyBHcmFwaFFMSW5wdXRPYmplY3RUeXBlKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgX2NvbmZpZzQpLCB7fSwge1xuICAgICAgICBmaWVsZHM6IGZ1bmN0aW9uIGZpZWxkcygpIHtcbiAgICAgICAgICByZXR1cm4gc29ydElucHV0RmllbGRzKF9jb25maWc0LmZpZWxkcyk7XG4gICAgICAgIH1cbiAgICAgIH0pKTtcbiAgICB9IC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0IChOb3QgcmVhY2hhYmxlLiBBbGwgcG9zc2libGUgdHlwZXMgaGF2ZSBiZWVuIGNvbnNpZGVyZWQpXG5cblxuICAgIGZhbHNlIHx8IGludmFyaWFudCgwLCAnVW5leHBlY3RlZCB0eXBlOiAnICsgaW5zcGVjdCh0eXBlKSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc29ydE9iak1hcChtYXAsIHNvcnRWYWx1ZUZuKSB7XG4gIHZhciBzb3J0ZWRNYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2YXIgc29ydGVkS2V5cyA9IHNvcnRCeShPYmplY3Qua2V5cyhtYXApLCBmdW5jdGlvbiAoeCkge1xuICAgIHJldHVybiB4O1xuICB9KTtcblxuICBmb3IgKHZhciBfaTIgPSAwOyBfaTIgPCBzb3J0ZWRLZXlzLmxlbmd0aDsgX2kyKyspIHtcbiAgICB2YXIga2V5ID0gc29ydGVkS2V5c1tfaTJdO1xuICAgIHZhciB2YWx1ZSA9IG1hcFtrZXldO1xuICAgIHNvcnRlZE1hcFtrZXldID0gc29ydFZhbHVlRm4gPyBzb3J0VmFsdWVGbih2YWx1ZSkgOiB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBzb3J0ZWRNYXA7XG59XG5cbmZ1bmN0aW9uIHNvcnRCeU5hbWUoYXJyYXkpIHtcbiAgcmV0dXJuIHNvcnRCeShhcnJheSwgZnVuY3Rpb24gKG9iaikge1xuICAgIHJldHVybiBvYmoubmFtZTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHNvcnRCeShhcnJheSwgbWFwVG9LZXkpIHtcbiAgcmV0dXJuIGFycmF5LnNsaWNlKCkuc29ydChmdW5jdGlvbiAob2JqMSwgb2JqMikge1xuICAgIHZhciBrZXkxID0gbWFwVG9LZXkob2JqMSk7XG4gICAgdmFyIGtleTIgPSBtYXBUb0tleShvYmoyKTtcbiAgICByZXR1cm4gbmF0dXJhbENvbXBhcmUoa2V5MSwga2V5Mik7XG4gIH0pO1xufVxuIiwiaW1wb3J0IG9iamVjdFZhbHVlcyBmcm9tIFwiLi4vcG9seWZpbGxzL29iamVjdFZhbHVlcy5tanNcIjtcbmltcG9ydCBpbnNwZWN0IGZyb20gXCIuLi9qc3V0aWxzL2luc3BlY3QubWpzXCI7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gXCIuLi9qc3V0aWxzL2ludmFyaWFudC5tanNcIjtcbmltcG9ydCB7IHByaW50IH0gZnJvbSBcIi4uL2xhbmd1YWdlL3ByaW50ZXIubWpzXCI7XG5pbXBvcnQgeyBwcmludEJsb2NrU3RyaW5nIH0gZnJvbSBcIi4uL2xhbmd1YWdlL2Jsb2NrU3RyaW5nLm1qc1wiO1xuaW1wb3J0IHsgaXNJbnRyb3NwZWN0aW9uVHlwZSB9IGZyb20gXCIuLi90eXBlL2ludHJvc3BlY3Rpb24ubWpzXCI7XG5pbXBvcnQgeyBHcmFwaFFMU3RyaW5nLCBpc1NwZWNpZmllZFNjYWxhclR5cGUgfSBmcm9tIFwiLi4vdHlwZS9zY2FsYXJzLm1qc1wiO1xuaW1wb3J0IHsgREVGQVVMVF9ERVBSRUNBVElPTl9SRUFTT04sIGlzU3BlY2lmaWVkRGlyZWN0aXZlIH0gZnJvbSBcIi4uL3R5cGUvZGlyZWN0aXZlcy5tanNcIjtcbmltcG9ydCB7IGlzU2NhbGFyVHlwZSwgaXNPYmplY3RUeXBlLCBpc0ludGVyZmFjZVR5cGUsIGlzVW5pb25UeXBlLCBpc0VudW1UeXBlLCBpc0lucHV0T2JqZWN0VHlwZSB9IGZyb20gXCIuLi90eXBlL2RlZmluaXRpb24ubWpzXCI7XG5pbXBvcnQgeyBhc3RGcm9tVmFsdWUgfSBmcm9tIFwiLi9hc3RGcm9tVmFsdWUubWpzXCI7XG5cbi8qKlxuICogQWNjZXB0cyBvcHRpb25zIGFzIGEgc2Vjb25kIGFyZ3VtZW50OlxuICpcbiAqICAgIC0gY29tbWVudERlc2NyaXB0aW9uczpcbiAqICAgICAgICBQcm92aWRlIHRydWUgdG8gdXNlIHByZWNlZGluZyBjb21tZW50cyBhcyB0aGUgZGVzY3JpcHRpb24uXG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gcHJpbnRTY2hlbWEoc2NoZW1hLCBvcHRpb25zKSB7XG4gIHJldHVybiBwcmludEZpbHRlcmVkU2NoZW1hKHNjaGVtYSwgZnVuY3Rpb24gKG4pIHtcbiAgICByZXR1cm4gIWlzU3BlY2lmaWVkRGlyZWN0aXZlKG4pO1xuICB9LCBpc0RlZmluZWRUeXBlLCBvcHRpb25zKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwcmludEludHJvc3BlY3Rpb25TY2hlbWEoc2NoZW1hLCBvcHRpb25zKSB7XG4gIHJldHVybiBwcmludEZpbHRlcmVkU2NoZW1hKHNjaGVtYSwgaXNTcGVjaWZpZWREaXJlY3RpdmUsIGlzSW50cm9zcGVjdGlvblR5cGUsIG9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiBpc0RlZmluZWRUeXBlKHR5cGUpIHtcbiAgcmV0dXJuICFpc1NwZWNpZmllZFNjYWxhclR5cGUodHlwZSkgJiYgIWlzSW50cm9zcGVjdGlvblR5cGUodHlwZSk7XG59XG5cbmZ1bmN0aW9uIHByaW50RmlsdGVyZWRTY2hlbWEoc2NoZW1hLCBkaXJlY3RpdmVGaWx0ZXIsIHR5cGVGaWx0ZXIsIG9wdGlvbnMpIHtcbiAgdmFyIGRpcmVjdGl2ZXMgPSBzY2hlbWEuZ2V0RGlyZWN0aXZlcygpLmZpbHRlcihkaXJlY3RpdmVGaWx0ZXIpO1xuICB2YXIgdHlwZXMgPSBvYmplY3RWYWx1ZXMoc2NoZW1hLmdldFR5cGVNYXAoKSkuZmlsdGVyKHR5cGVGaWx0ZXIpO1xuICByZXR1cm4gW3ByaW50U2NoZW1hRGVmaW5pdGlvbihzY2hlbWEpXS5jb25jYXQoZGlyZWN0aXZlcy5tYXAoZnVuY3Rpb24gKGRpcmVjdGl2ZSkge1xuICAgIHJldHVybiBwcmludERpcmVjdGl2ZShkaXJlY3RpdmUsIG9wdGlvbnMpO1xuICB9KSwgdHlwZXMubWFwKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgcmV0dXJuIHByaW50VHlwZSh0eXBlLCBvcHRpb25zKTtcbiAgfSkpLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG5cXG4nKSArICdcXG4nO1xufVxuXG5mdW5jdGlvbiBwcmludFNjaGVtYURlZmluaXRpb24oc2NoZW1hKSB7XG4gIGlmIChzY2hlbWEuZGVzY3JpcHRpb24gPT0gbnVsbCAmJiBpc1NjaGVtYU9mQ29tbW9uTmFtZXMoc2NoZW1hKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBvcGVyYXRpb25UeXBlcyA9IFtdO1xuICB2YXIgcXVlcnlUeXBlID0gc2NoZW1hLmdldFF1ZXJ5VHlwZSgpO1xuXG4gIGlmIChxdWVyeVR5cGUpIHtcbiAgICBvcGVyYXRpb25UeXBlcy5wdXNoKFwiICBxdWVyeTogXCIuY29uY2F0KHF1ZXJ5VHlwZS5uYW1lKSk7XG4gIH1cblxuICB2YXIgbXV0YXRpb25UeXBlID0gc2NoZW1hLmdldE11dGF0aW9uVHlwZSgpO1xuXG4gIGlmIChtdXRhdGlvblR5cGUpIHtcbiAgICBvcGVyYXRpb25UeXBlcy5wdXNoKFwiICBtdXRhdGlvbjogXCIuY29uY2F0KG11dGF0aW9uVHlwZS5uYW1lKSk7XG4gIH1cblxuICB2YXIgc3Vic2NyaXB0aW9uVHlwZSA9IHNjaGVtYS5nZXRTdWJzY3JpcHRpb25UeXBlKCk7XG5cbiAgaWYgKHN1YnNjcmlwdGlvblR5cGUpIHtcbiAgICBvcGVyYXRpb25UeXBlcy5wdXNoKFwiICBzdWJzY3JpcHRpb246IFwiLmNvbmNhdChzdWJzY3JpcHRpb25UeXBlLm5hbWUpKTtcbiAgfVxuXG4gIHJldHVybiBwcmludERlc2NyaXB0aW9uKHt9LCBzY2hlbWEpICsgXCJzY2hlbWEge1xcblwiLmNvbmNhdChvcGVyYXRpb25UeXBlcy5qb2luKCdcXG4nKSwgXCJcXG59XCIpO1xufVxuLyoqXG4gKiBHcmFwaFFMIHNjaGVtYSBkZWZpbmUgcm9vdCB0eXBlcyBmb3IgZWFjaCB0eXBlIG9mIG9wZXJhdGlvbi4gVGhlc2UgdHlwZXMgYXJlXG4gKiB0aGUgc2FtZSBhcyBhbnkgb3RoZXIgdHlwZSBhbmQgY2FuIGJlIG5hbWVkIGluIGFueSBtYW5uZXIsIGhvd2V2ZXIgdGhlcmUgaXNcbiAqIGEgY29tbW9uIG5hbWluZyBjb252ZW50aW9uOlxuICpcbiAqICAgc2NoZW1hIHtcbiAqICAgICBxdWVyeTogUXVlcnlcbiAqICAgICBtdXRhdGlvbjogTXV0YXRpb25cbiAqICAgfVxuICpcbiAqIFdoZW4gdXNpbmcgdGhpcyBuYW1pbmcgY29udmVudGlvbiwgdGhlIHNjaGVtYSBkZXNjcmlwdGlvbiBjYW4gYmUgb21pdHRlZC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGlzU2NoZW1hT2ZDb21tb25OYW1lcyhzY2hlbWEpIHtcbiAgdmFyIHF1ZXJ5VHlwZSA9IHNjaGVtYS5nZXRRdWVyeVR5cGUoKTtcblxuICBpZiAocXVlcnlUeXBlICYmIHF1ZXJ5VHlwZS5uYW1lICE9PSAnUXVlcnknKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIG11dGF0aW9uVHlwZSA9IHNjaGVtYS5nZXRNdXRhdGlvblR5cGUoKTtcblxuICBpZiAobXV0YXRpb25UeXBlICYmIG11dGF0aW9uVHlwZS5uYW1lICE9PSAnTXV0YXRpb24nKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIHN1YnNjcmlwdGlvblR5cGUgPSBzY2hlbWEuZ2V0U3Vic2NyaXB0aW9uVHlwZSgpO1xuXG4gIGlmIChzdWJzY3JpcHRpb25UeXBlICYmIHN1YnNjcmlwdGlvblR5cGUubmFtZSAhPT0gJ1N1YnNjcmlwdGlvbicpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByaW50VHlwZSh0eXBlLCBvcHRpb25zKSB7XG4gIGlmIChpc1NjYWxhclR5cGUodHlwZSkpIHtcbiAgICByZXR1cm4gcHJpbnRTY2FsYXIodHlwZSwgb3B0aW9ucyk7XG4gIH1cblxuICBpZiAoaXNPYmplY3RUeXBlKHR5cGUpKSB7XG4gICAgcmV0dXJuIHByaW50T2JqZWN0KHR5cGUsIG9wdGlvbnMpO1xuICB9XG5cbiAgaWYgKGlzSW50ZXJmYWNlVHlwZSh0eXBlKSkge1xuICAgIHJldHVybiBwcmludEludGVyZmFjZSh0eXBlLCBvcHRpb25zKTtcbiAgfVxuXG4gIGlmIChpc1VuaW9uVHlwZSh0eXBlKSkge1xuICAgIHJldHVybiBwcmludFVuaW9uKHR5cGUsIG9wdGlvbnMpO1xuICB9XG5cbiAgaWYgKGlzRW51bVR5cGUodHlwZSkpIHtcbiAgICByZXR1cm4gcHJpbnRFbnVtKHR5cGUsIG9wdGlvbnMpO1xuICB9IC8vIGlzdGFuYnVsIGlnbm9yZSBlbHNlIChTZWU6ICdodHRwczovL2dpdGh1Yi5jb20vZ3JhcGhxbC9ncmFwaHFsLWpzL2lzc3Vlcy8yNjE4JylcblxuXG4gIGlmIChpc0lucHV0T2JqZWN0VHlwZSh0eXBlKSkge1xuICAgIHJldHVybiBwcmludElucHV0T2JqZWN0KHR5cGUsIG9wdGlvbnMpO1xuICB9IC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0IChOb3QgcmVhY2hhYmxlLiBBbGwgcG9zc2libGUgdHlwZXMgaGF2ZSBiZWVuIGNvbnNpZGVyZWQpXG5cblxuICBmYWxzZSB8fCBpbnZhcmlhbnQoMCwgJ1VuZXhwZWN0ZWQgdHlwZTogJyArIGluc3BlY3QodHlwZSkpO1xufVxuXG5mdW5jdGlvbiBwcmludFNjYWxhcih0eXBlLCBvcHRpb25zKSB7XG4gIHJldHVybiBwcmludERlc2NyaXB0aW9uKG9wdGlvbnMsIHR5cGUpICsgXCJzY2FsYXIgXCIuY29uY2F0KHR5cGUubmFtZSkgKyBwcmludFNwZWNpZmllZEJ5VXJsKHR5cGUpO1xufVxuXG5mdW5jdGlvbiBwcmludEltcGxlbWVudGVkSW50ZXJmYWNlcyh0eXBlKSB7XG4gIHZhciBpbnRlcmZhY2VzID0gdHlwZS5nZXRJbnRlcmZhY2VzKCk7XG4gIHJldHVybiBpbnRlcmZhY2VzLmxlbmd0aCA/ICcgaW1wbGVtZW50cyAnICsgaW50ZXJmYWNlcy5tYXAoZnVuY3Rpb24gKGkpIHtcbiAgICByZXR1cm4gaS5uYW1lO1xuICB9KS5qb2luKCcgJiAnKSA6ICcnO1xufVxuXG5mdW5jdGlvbiBwcmludE9iamVjdCh0eXBlLCBvcHRpb25zKSB7XG4gIHJldHVybiBwcmludERlc2NyaXB0aW9uKG9wdGlvbnMsIHR5cGUpICsgXCJ0eXBlIFwiLmNvbmNhdCh0eXBlLm5hbWUpICsgcHJpbnRJbXBsZW1lbnRlZEludGVyZmFjZXModHlwZSkgKyBwcmludEZpZWxkcyhvcHRpb25zLCB0eXBlKTtcbn1cblxuZnVuY3Rpb24gcHJpbnRJbnRlcmZhY2UodHlwZSwgb3B0aW9ucykge1xuICByZXR1cm4gcHJpbnREZXNjcmlwdGlvbihvcHRpb25zLCB0eXBlKSArIFwiaW50ZXJmYWNlIFwiLmNvbmNhdCh0eXBlLm5hbWUpICsgcHJpbnRJbXBsZW1lbnRlZEludGVyZmFjZXModHlwZSkgKyBwcmludEZpZWxkcyhvcHRpb25zLCB0eXBlKTtcbn1cblxuZnVuY3Rpb24gcHJpbnRVbmlvbih0eXBlLCBvcHRpb25zKSB7XG4gIHZhciB0eXBlcyA9IHR5cGUuZ2V0VHlwZXMoKTtcbiAgdmFyIHBvc3NpYmxlVHlwZXMgPSB0eXBlcy5sZW5ndGggPyAnID0gJyArIHR5cGVzLmpvaW4oJyB8ICcpIDogJyc7XG4gIHJldHVybiBwcmludERlc2NyaXB0aW9uKG9wdGlvbnMsIHR5cGUpICsgJ3VuaW9uICcgKyB0eXBlLm5hbWUgKyBwb3NzaWJsZVR5cGVzO1xufVxuXG5mdW5jdGlvbiBwcmludEVudW0odHlwZSwgb3B0aW9ucykge1xuICB2YXIgdmFsdWVzID0gdHlwZS5nZXRWYWx1ZXMoKS5tYXAoZnVuY3Rpb24gKHZhbHVlLCBpKSB7XG4gICAgcmV0dXJuIHByaW50RGVzY3JpcHRpb24ob3B0aW9ucywgdmFsdWUsICcgICcsICFpKSArICcgICcgKyB2YWx1ZS5uYW1lICsgcHJpbnREZXByZWNhdGVkKHZhbHVlLmRlcHJlY2F0aW9uUmVhc29uKTtcbiAgfSk7XG4gIHJldHVybiBwcmludERlc2NyaXB0aW9uKG9wdGlvbnMsIHR5cGUpICsgXCJlbnVtIFwiLmNvbmNhdCh0eXBlLm5hbWUpICsgcHJpbnRCbG9jayh2YWx1ZXMpO1xufVxuXG5mdW5jdGlvbiBwcmludElucHV0T2JqZWN0KHR5cGUsIG9wdGlvbnMpIHtcbiAgdmFyIGZpZWxkcyA9IG9iamVjdFZhbHVlcyh0eXBlLmdldEZpZWxkcygpKS5tYXAoZnVuY3Rpb24gKGYsIGkpIHtcbiAgICByZXR1cm4gcHJpbnREZXNjcmlwdGlvbihvcHRpb25zLCBmLCAnICAnLCAhaSkgKyAnICAnICsgcHJpbnRJbnB1dFZhbHVlKGYpO1xuICB9KTtcbiAgcmV0dXJuIHByaW50RGVzY3JpcHRpb24ob3B0aW9ucywgdHlwZSkgKyBcImlucHV0IFwiLmNvbmNhdCh0eXBlLm5hbWUpICsgcHJpbnRCbG9jayhmaWVsZHMpO1xufVxuXG5mdW5jdGlvbiBwcmludEZpZWxkcyhvcHRpb25zLCB0eXBlKSB7XG4gIHZhciBmaWVsZHMgPSBvYmplY3RWYWx1ZXModHlwZS5nZXRGaWVsZHMoKSkubWFwKGZ1bmN0aW9uIChmLCBpKSB7XG4gICAgcmV0dXJuIHByaW50RGVzY3JpcHRpb24ob3B0aW9ucywgZiwgJyAgJywgIWkpICsgJyAgJyArIGYubmFtZSArIHByaW50QXJncyhvcHRpb25zLCBmLmFyZ3MsICcgICcpICsgJzogJyArIFN0cmluZyhmLnR5cGUpICsgcHJpbnREZXByZWNhdGVkKGYuZGVwcmVjYXRpb25SZWFzb24pO1xuICB9KTtcbiAgcmV0dXJuIHByaW50QmxvY2soZmllbGRzKTtcbn1cblxuZnVuY3Rpb24gcHJpbnRCbG9jayhpdGVtcykge1xuICByZXR1cm4gaXRlbXMubGVuZ3RoICE9PSAwID8gJyB7XFxuJyArIGl0ZW1zLmpvaW4oJ1xcbicpICsgJ1xcbn0nIDogJyc7XG59XG5cbmZ1bmN0aW9uIHByaW50QXJncyhvcHRpb25zLCBhcmdzKSB7XG4gIHZhciBpbmRlbnRhdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogJyc7XG5cbiAgaWYgKGFyZ3MubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuICcnO1xuICB9IC8vIElmIGV2ZXJ5IGFyZyBkb2VzIG5vdCBoYXZlIGEgZGVzY3JpcHRpb24sIHByaW50IHRoZW0gb24gb25lIGxpbmUuXG5cblxuICBpZiAoYXJncy5ldmVyeShmdW5jdGlvbiAoYXJnKSB7XG4gICAgcmV0dXJuICFhcmcuZGVzY3JpcHRpb247XG4gIH0pKSB7XG4gICAgcmV0dXJuICcoJyArIGFyZ3MubWFwKHByaW50SW5wdXRWYWx1ZSkuam9pbignLCAnKSArICcpJztcbiAgfVxuXG4gIHJldHVybiAnKFxcbicgKyBhcmdzLm1hcChmdW5jdGlvbiAoYXJnLCBpKSB7XG4gICAgcmV0dXJuIHByaW50RGVzY3JpcHRpb24ob3B0aW9ucywgYXJnLCAnICAnICsgaW5kZW50YXRpb24sICFpKSArICcgICcgKyBpbmRlbnRhdGlvbiArIHByaW50SW5wdXRWYWx1ZShhcmcpO1xuICB9KS5qb2luKCdcXG4nKSArICdcXG4nICsgaW5kZW50YXRpb24gKyAnKSc7XG59XG5cbmZ1bmN0aW9uIHByaW50SW5wdXRWYWx1ZShhcmcpIHtcbiAgdmFyIGRlZmF1bHRBU1QgPSBhc3RGcm9tVmFsdWUoYXJnLmRlZmF1bHRWYWx1ZSwgYXJnLnR5cGUpO1xuICB2YXIgYXJnRGVjbCA9IGFyZy5uYW1lICsgJzogJyArIFN0cmluZyhhcmcudHlwZSk7XG5cbiAgaWYgKGRlZmF1bHRBU1QpIHtcbiAgICBhcmdEZWNsICs9IFwiID0gXCIuY29uY2F0KHByaW50KGRlZmF1bHRBU1QpKTtcbiAgfVxuXG4gIHJldHVybiBhcmdEZWNsICsgcHJpbnREZXByZWNhdGVkKGFyZy5kZXByZWNhdGlvblJlYXNvbik7XG59XG5cbmZ1bmN0aW9uIHByaW50RGlyZWN0aXZlKGRpcmVjdGl2ZSwgb3B0aW9ucykge1xuICByZXR1cm4gcHJpbnREZXNjcmlwdGlvbihvcHRpb25zLCBkaXJlY3RpdmUpICsgJ2RpcmVjdGl2ZSBAJyArIGRpcmVjdGl2ZS5uYW1lICsgcHJpbnRBcmdzKG9wdGlvbnMsIGRpcmVjdGl2ZS5hcmdzKSArIChkaXJlY3RpdmUuaXNSZXBlYXRhYmxlID8gJyByZXBlYXRhYmxlJyA6ICcnKSArICcgb24gJyArIGRpcmVjdGl2ZS5sb2NhdGlvbnMuam9pbignIHwgJyk7XG59XG5cbmZ1bmN0aW9uIHByaW50RGVwcmVjYXRlZChyZWFzb24pIHtcbiAgaWYgKHJlYXNvbiA9PSBudWxsKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgdmFyIHJlYXNvbkFTVCA9IGFzdEZyb21WYWx1ZShyZWFzb24sIEdyYXBoUUxTdHJpbmcpO1xuXG4gIGlmIChyZWFzb25BU1QgJiYgcmVhc29uICE9PSBERUZBVUxUX0RFUFJFQ0FUSU9OX1JFQVNPTikge1xuICAgIHJldHVybiAnIEBkZXByZWNhdGVkKHJlYXNvbjogJyArIHByaW50KHJlYXNvbkFTVCkgKyAnKSc7XG4gIH1cblxuICByZXR1cm4gJyBAZGVwcmVjYXRlZCc7XG59XG5cbmZ1bmN0aW9uIHByaW50U3BlY2lmaWVkQnlVcmwoc2NhbGFyKSB7XG4gIGlmIChzY2FsYXIuc3BlY2lmaWVkQnlVcmwgPT0gbnVsbCkge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIHZhciB1cmwgPSBzY2FsYXIuc3BlY2lmaWVkQnlVcmw7XG4gIHZhciB1cmxBU1QgPSBhc3RGcm9tVmFsdWUodXJsLCBHcmFwaFFMU3RyaW5nKTtcbiAgdXJsQVNUIHx8IGludmFyaWFudCgwLCAnVW5leHBlY3RlZCBudWxsIHZhbHVlIHJldHVybmVkIGZyb20gYGFzdEZyb21WYWx1ZWAgZm9yIHNwZWNpZmllZEJ5VXJsJyk7XG4gIHJldHVybiAnIEBzcGVjaWZpZWRCeSh1cmw6ICcgKyBwcmludCh1cmxBU1QpICsgJyknO1xufVxuXG5mdW5jdGlvbiBwcmludERlc2NyaXB0aW9uKG9wdGlvbnMsIGRlZikge1xuICB2YXIgaW5kZW50YXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6ICcnO1xuICB2YXIgZmlyc3RJbkJsb2NrID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiB0cnVlO1xuICB2YXIgZGVzY3JpcHRpb24gPSBkZWYuZGVzY3JpcHRpb247XG5cbiAgaWYgKGRlc2NyaXB0aW9uID09IG51bGwpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICBpZiAoKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5jb21tZW50RGVzY3JpcHRpb25zKSA9PT0gdHJ1ZSkge1xuICAgIHJldHVybiBwcmludERlc2NyaXB0aW9uV2l0aENvbW1lbnRzKGRlc2NyaXB0aW9uLCBpbmRlbnRhdGlvbiwgZmlyc3RJbkJsb2NrKTtcbiAgfVxuXG4gIHZhciBwcmVmZXJNdWx0aXBsZUxpbmVzID0gZGVzY3JpcHRpb24ubGVuZ3RoID4gNzA7XG4gIHZhciBibG9ja1N0cmluZyA9IHByaW50QmxvY2tTdHJpbmcoZGVzY3JpcHRpb24sICcnLCBwcmVmZXJNdWx0aXBsZUxpbmVzKTtcbiAgdmFyIHByZWZpeCA9IGluZGVudGF0aW9uICYmICFmaXJzdEluQmxvY2sgPyAnXFxuJyArIGluZGVudGF0aW9uIDogaW5kZW50YXRpb247XG4gIHJldHVybiBwcmVmaXggKyBibG9ja1N0cmluZy5yZXBsYWNlKC9cXG4vZywgJ1xcbicgKyBpbmRlbnRhdGlvbikgKyAnXFxuJztcbn1cblxuZnVuY3Rpb24gcHJpbnREZXNjcmlwdGlvbldpdGhDb21tZW50cyhkZXNjcmlwdGlvbiwgaW5kZW50YXRpb24sIGZpcnN0SW5CbG9jaykge1xuICB2YXIgcHJlZml4ID0gaW5kZW50YXRpb24gJiYgIWZpcnN0SW5CbG9jayA/ICdcXG4nIDogJyc7XG4gIHZhciBjb21tZW50ID0gZGVzY3JpcHRpb24uc3BsaXQoJ1xcbicpLm1hcChmdW5jdGlvbiAobGluZSkge1xuICAgIHJldHVybiBpbmRlbnRhdGlvbiArIChsaW5lICE9PSAnJyA/ICcjICcgKyBsaW5lIDogJyMnKTtcbiAgfSkuam9pbignXFxuJyk7XG4gIHJldHVybiBwcmVmaXggKyBjb21tZW50ICsgJ1xcbic7XG59XG4iLCJpbXBvcnQgeyBLaW5kIH0gZnJvbSBcIi4uL2xhbmd1YWdlL2tpbmRzLm1qc1wiO1xuaW1wb3J0IHsgdmlzaXQgfSBmcm9tIFwiLi4vbGFuZ3VhZ2UvdmlzaXRvci5tanNcIjtcbi8qKlxuICogc2VwYXJhdGVPcGVyYXRpb25zIGFjY2VwdHMgYSBzaW5nbGUgQVNUIGRvY3VtZW50IHdoaWNoIG1heSBjb250YWluIG1hbnlcbiAqIG9wZXJhdGlvbnMgYW5kIGZyYWdtZW50cyBhbmQgcmV0dXJucyBhIGNvbGxlY3Rpb24gb2YgQVNUIGRvY3VtZW50cyBlYWNoIG9mXG4gKiB3aGljaCBjb250YWlucyBhIHNpbmdsZSBvcGVyYXRpb24gYXMgd2VsbCB0aGUgZnJhZ21lbnQgZGVmaW5pdGlvbnMgaXRcbiAqIHJlZmVycyB0by5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc2VwYXJhdGVPcGVyYXRpb25zKGRvY3VtZW50QVNUKSB7XG4gIHZhciBvcGVyYXRpb25zID0gW107XG4gIHZhciBkZXBHcmFwaCA9IE9iamVjdC5jcmVhdGUobnVsbCk7IC8vIFBvcHVsYXRlIG1ldGFkYXRhIGFuZCBidWlsZCBhIGRlcGVuZGVuY3kgZ3JhcGguXG5cbiAgZm9yICh2YXIgX2kyID0gMCwgX2RvY3VtZW50QVNUJGRlZmluaXRpMiA9IGRvY3VtZW50QVNULmRlZmluaXRpb25zOyBfaTIgPCBfZG9jdW1lbnRBU1QkZGVmaW5pdGkyLmxlbmd0aDsgX2kyKyspIHtcbiAgICB2YXIgZGVmaW5pdGlvbk5vZGUgPSBfZG9jdW1lbnRBU1QkZGVmaW5pdGkyW19pMl07XG5cbiAgICBzd2l0Y2ggKGRlZmluaXRpb25Ob2RlLmtpbmQpIHtcbiAgICAgIGNhc2UgS2luZC5PUEVSQVRJT05fREVGSU5JVElPTjpcbiAgICAgICAgb3BlcmF0aW9ucy5wdXNoKGRlZmluaXRpb25Ob2RlKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgS2luZC5GUkFHTUVOVF9ERUZJTklUSU9OOlxuICAgICAgICBkZXBHcmFwaFtkZWZpbml0aW9uTm9kZS5uYW1lLnZhbHVlXSA9IGNvbGxlY3REZXBlbmRlbmNpZXMoZGVmaW5pdGlvbk5vZGUuc2VsZWN0aW9uU2V0KTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9IC8vIEZvciBlYWNoIG9wZXJhdGlvbiwgcHJvZHVjZSBhIG5ldyBzeW50aGVzaXplZCBBU1Qgd2hpY2ggaW5jbHVkZXMgb25seSB3aGF0XG4gIC8vIGlzIG5lY2Vzc2FyeSBmb3IgY29tcGxldGluZyB0aGF0IG9wZXJhdGlvbi5cblxuXG4gIHZhciBzZXBhcmF0ZWREb2N1bWVudEFTVHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKF9pNCkge1xuICAgIHZhciBvcGVyYXRpb24gPSBvcGVyYXRpb25zW19pNF07XG4gICAgdmFyIGRlcGVuZGVuY2llcyA9IG5ldyBTZXQoKTtcblxuICAgIGZvciAodmFyIF9pNiA9IDAsIF9jb2xsZWN0RGVwZW5kZW5jaWVzMiA9IGNvbGxlY3REZXBlbmRlbmNpZXMob3BlcmF0aW9uLnNlbGVjdGlvblNldCk7IF9pNiA8IF9jb2xsZWN0RGVwZW5kZW5jaWVzMi5sZW5ndGg7IF9pNisrKSB7XG4gICAgICB2YXIgZnJhZ21lbnROYW1lID0gX2NvbGxlY3REZXBlbmRlbmNpZXMyW19pNl07XG4gICAgICBjb2xsZWN0VHJhbnNpdGl2ZURlcGVuZGVuY2llcyhkZXBlbmRlbmNpZXMsIGRlcEdyYXBoLCBmcmFnbWVudE5hbWUpO1xuICAgIH0gLy8gUHJvdmlkZXMgdGhlIGVtcHR5IHN0cmluZyBmb3IgYW5vbnltb3VzIG9wZXJhdGlvbnMuXG5cblxuICAgIHZhciBvcGVyYXRpb25OYW1lID0gb3BlcmF0aW9uLm5hbWUgPyBvcGVyYXRpb24ubmFtZS52YWx1ZSA6ICcnOyAvLyBUaGUgbGlzdCBvZiBkZWZpbml0aW9uIG5vZGVzIHRvIGJlIGluY2x1ZGVkIGZvciB0aGlzIG9wZXJhdGlvbiwgc29ydGVkXG4gICAgLy8gdG8gcmV0YWluIHRoZSBzYW1lIG9yZGVyIGFzIHRoZSBvcmlnaW5hbCBkb2N1bWVudC5cblxuICAgIHNlcGFyYXRlZERvY3VtZW50QVNUc1tvcGVyYXRpb25OYW1lXSA9IHtcbiAgICAgIGtpbmQ6IEtpbmQuRE9DVU1FTlQsXG4gICAgICBkZWZpbml0aW9uczogZG9jdW1lbnRBU1QuZGVmaW5pdGlvbnMuZmlsdGVyKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgIHJldHVybiBub2RlID09PSBvcGVyYXRpb24gfHwgbm9kZS5raW5kID09PSBLaW5kLkZSQUdNRU5UX0RFRklOSVRJT04gJiYgZGVwZW5kZW5jaWVzLmhhcyhub2RlLm5hbWUudmFsdWUpO1xuICAgICAgfSlcbiAgICB9O1xuICB9O1xuXG4gIGZvciAodmFyIF9pNCA9IDA7IF9pNCA8IG9wZXJhdGlvbnMubGVuZ3RoOyBfaTQrKykge1xuICAgIF9sb29wKF9pNCk7XG4gIH1cblxuICByZXR1cm4gc2VwYXJhdGVkRG9jdW1lbnRBU1RzO1xufVxuXG4vLyBGcm9tIGEgZGVwZW5kZW5jeSBncmFwaCwgY29sbGVjdHMgYSBsaXN0IG9mIHRyYW5zaXRpdmUgZGVwZW5kZW5jaWVzIGJ5XG4vLyByZWN1cnNpbmcgdGhyb3VnaCBhIGRlcGVuZGVuY3kgZ3JhcGguXG5mdW5jdGlvbiBjb2xsZWN0VHJhbnNpdGl2ZURlcGVuZGVuY2llcyhjb2xsZWN0ZWQsIGRlcEdyYXBoLCBmcm9tTmFtZSkge1xuICBpZiAoIWNvbGxlY3RlZC5oYXMoZnJvbU5hbWUpKSB7XG4gICAgY29sbGVjdGVkLmFkZChmcm9tTmFtZSk7XG4gICAgdmFyIGltbWVkaWF0ZURlcHMgPSBkZXBHcmFwaFtmcm9tTmFtZV07XG5cbiAgICBpZiAoaW1tZWRpYXRlRGVwcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBmb3IgKHZhciBfaTggPSAwOyBfaTggPCBpbW1lZGlhdGVEZXBzLmxlbmd0aDsgX2k4KyspIHtcbiAgICAgICAgdmFyIHRvTmFtZSA9IGltbWVkaWF0ZURlcHNbX2k4XTtcbiAgICAgICAgY29sbGVjdFRyYW5zaXRpdmVEZXBlbmRlbmNpZXMoY29sbGVjdGVkLCBkZXBHcmFwaCwgdG9OYW1lKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY29sbGVjdERlcGVuZGVuY2llcyhzZWxlY3Rpb25TZXQpIHtcbiAgdmFyIGRlcGVuZGVuY2llcyA9IFtdO1xuICB2aXNpdChzZWxlY3Rpb25TZXQsIHtcbiAgICBGcmFnbWVudFNwcmVhZDogZnVuY3Rpb24gRnJhZ21lbnRTcHJlYWQobm9kZSkge1xuICAgICAgZGVwZW5kZW5jaWVzLnB1c2gobm9kZS5uYW1lLnZhbHVlKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gZGVwZW5kZW5jaWVzO1xufVxuIiwiaW1wb3J0IHsgU291cmNlLCBpc1NvdXJjZSB9IGZyb20gXCIuLi9sYW5ndWFnZS9zb3VyY2UubWpzXCI7XG5pbXBvcnQgeyBUb2tlbktpbmQgfSBmcm9tIFwiLi4vbGFuZ3VhZ2UvdG9rZW5LaW5kLm1qc1wiO1xuaW1wb3J0IHsgTGV4ZXIsIGlzUHVuY3R1YXRvclRva2VuS2luZCB9IGZyb20gXCIuLi9sYW5ndWFnZS9sZXhlci5tanNcIjtcbmltcG9ydCB7IGRlZGVudEJsb2NrU3RyaW5nVmFsdWUsIGdldEJsb2NrU3RyaW5nSW5kZW50YXRpb24gfSBmcm9tIFwiLi4vbGFuZ3VhZ2UvYmxvY2tTdHJpbmcubWpzXCI7XG4vKipcbiAqIFN0cmlwcyBjaGFyYWN0ZXJzIHRoYXQgYXJlIG5vdCBzaWduaWZpY2FudCB0byB0aGUgdmFsaWRpdHkgb3IgZXhlY3V0aW9uXG4gKiBvZiBhIEdyYXBoUUwgZG9jdW1lbnQ6XG4gKiAgIC0gVW5pY29kZUJPTVxuICogICAtIFdoaXRlU3BhY2VcbiAqICAgLSBMaW5lVGVybWluYXRvclxuICogICAtIENvbW1lbnRcbiAqICAgLSBDb21tYVxuICogICAtIEJsb2NrU3RyaW5nIGluZGVudGF0aW9uXG4gKlxuICogTm90ZTogSXQgaXMgcmVxdWlyZWQgdG8gaGF2ZSBhIGRlbGltaXRlciBjaGFyYWN0ZXIgYmV0d2VlbiBuZWlnaGJvcmluZ1xuICogbm9uLXB1bmN0dWF0b3IgdG9rZW5zIGFuZCB0aGlzIGZ1bmN0aW9uIGFsd2F5cyB1c2VzIHNpbmdsZSBzcGFjZSBhcyBkZWxpbWl0ZXIuXG4gKlxuICogSXQgaXMgZ3VhcmFudGVlZCB0aGF0IGJvdGggaW5wdXQgYW5kIG91dHB1dCBkb2N1bWVudHMgaWYgcGFyc2VkIHdvdWxkIHJlc3VsdFxuICogaW4gdGhlIGV4YWN0IHNhbWUgQVNUIGV4Y2VwdCBmb3Igbm9kZXMgbG9jYXRpb24uXG4gKlxuICogV2FybmluZzogSXQgaXMgZ3VhcmFudGVlZCB0aGF0IHRoaXMgZnVuY3Rpb24gd2lsbCBhbHdheXMgcHJvZHVjZSBzdGFibGUgcmVzdWx0cy5cbiAqIEhvd2V2ZXIsIGl0J3Mgbm90IGd1YXJhbnRlZWQgdGhhdCBpdCB3aWxsIHN0YXkgdGhlIHNhbWUgYmV0d2VlbiBkaWZmZXJlbnRcbiAqIHJlbGVhc2VzIGR1ZSB0byBidWdmaXhlcyBvciBjaGFuZ2VzIGluIHRoZSBHcmFwaFFMIHNwZWNpZmljYXRpb24uXG4gKlxuICogUXVlcnkgZXhhbXBsZTpcbiAqXG4gKiBxdWVyeSBTb21lUXVlcnkoJGZvbzogU3RyaW5nISwgJGJhcjogU3RyaW5nKSB7XG4gKiAgIHNvbWVGaWVsZChmb286ICRmb28sIGJhcjogJGJhcikge1xuICogICAgIGFcbiAqICAgICBiIHtcbiAqICAgICAgIGNcbiAqICAgICAgIGRcbiAqICAgICB9XG4gKiAgIH1cbiAqIH1cbiAqXG4gKiBCZWNvbWVzOlxuICpcbiAqIHF1ZXJ5IFNvbWVRdWVyeSgkZm9vOlN0cmluZyEkYmFyOlN0cmluZyl7c29tZUZpZWxkKGZvbzokZm9vIGJhcjokYmFyKXthIGJ7YyBkfX19XG4gKlxuICogU0RMIGV4YW1wbGU6XG4gKlxuICogXCJcIlwiXG4gKiBUeXBlIGRlc2NyaXB0aW9uXG4gKiBcIlwiXCJcbiAqIHR5cGUgRm9vIHtcbiAqICAgXCJcIlwiXG4gKiAgIEZpZWxkIGRlc2NyaXB0aW9uXG4gKiAgIFwiXCJcIlxuICogICBiYXI6IFN0cmluZ1xuICogfVxuICpcbiAqIEJlY29tZXM6XG4gKlxuICogXCJcIlwiVHlwZSBkZXNjcmlwdGlvblwiXCJcIiB0eXBlIEZvb3tcIlwiXCJGaWVsZCBkZXNjcmlwdGlvblwiXCJcIiBiYXI6U3RyaW5nfVxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBzdHJpcElnbm9yZWRDaGFyYWN0ZXJzKHNvdXJjZSkge1xuICB2YXIgc291cmNlT2JqID0gaXNTb3VyY2Uoc291cmNlKSA/IHNvdXJjZSA6IG5ldyBTb3VyY2Uoc291cmNlKTtcbiAgdmFyIGJvZHkgPSBzb3VyY2VPYmouYm9keTtcbiAgdmFyIGxleGVyID0gbmV3IExleGVyKHNvdXJjZU9iaik7XG4gIHZhciBzdHJpcHBlZEJvZHkgPSAnJztcbiAgdmFyIHdhc0xhc3RBZGRlZFRva2VuTm9uUHVuY3R1YXRvciA9IGZhbHNlO1xuXG4gIHdoaWxlIChsZXhlci5hZHZhbmNlKCkua2luZCAhPT0gVG9rZW5LaW5kLkVPRikge1xuICAgIHZhciBjdXJyZW50VG9rZW4gPSBsZXhlci50b2tlbjtcbiAgICB2YXIgdG9rZW5LaW5kID0gY3VycmVudFRva2VuLmtpbmQ7XG4gICAgLyoqXG4gICAgICogRXZlcnkgdHdvIG5vbi1wdW5jdHVhdG9yIHRva2VucyBzaG91bGQgaGF2ZSBzcGFjZSBiZXR3ZWVuIHRoZW0uXG4gICAgICogQWxzbyBwcmV2ZW50IGNhc2Ugb2Ygbm9uLXB1bmN0dWF0b3IgdG9rZW4gZm9sbG93aW5nIGJ5IHNwcmVhZCByZXN1bHRpbmdcbiAgICAgKiBpbiBpbnZhbGlkIHRva2VuIChlLmcuIGAxLi4uYCBpcyBpbnZhbGlkIEZsb2F0IHRva2VuKS5cbiAgICAgKi9cblxuICAgIHZhciBpc05vblB1bmN0dWF0b3IgPSAhaXNQdW5jdHVhdG9yVG9rZW5LaW5kKGN1cnJlbnRUb2tlbi5raW5kKTtcblxuICAgIGlmICh3YXNMYXN0QWRkZWRUb2tlbk5vblB1bmN0dWF0b3IpIHtcbiAgICAgIGlmIChpc05vblB1bmN0dWF0b3IgfHwgY3VycmVudFRva2VuLmtpbmQgPT09IFRva2VuS2luZC5TUFJFQUQpIHtcbiAgICAgICAgc3RyaXBwZWRCb2R5ICs9ICcgJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgdG9rZW5Cb2R5ID0gYm9keS5zbGljZShjdXJyZW50VG9rZW4uc3RhcnQsIGN1cnJlbnRUb2tlbi5lbmQpO1xuXG4gICAgaWYgKHRva2VuS2luZCA9PT0gVG9rZW5LaW5kLkJMT0NLX1NUUklORykge1xuICAgICAgc3RyaXBwZWRCb2R5ICs9IGRlZGVudEJsb2NrU3RyaW5nKHRva2VuQm9keSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0cmlwcGVkQm9keSArPSB0b2tlbkJvZHk7XG4gICAgfVxuXG4gICAgd2FzTGFzdEFkZGVkVG9rZW5Ob25QdW5jdHVhdG9yID0gaXNOb25QdW5jdHVhdG9yO1xuICB9XG5cbiAgcmV0dXJuIHN0cmlwcGVkQm9keTtcbn1cblxuZnVuY3Rpb24gZGVkZW50QmxvY2tTdHJpbmcoYmxvY2tTdHIpIHtcbiAgLy8gc2tpcCBsZWFkaW5nIGFuZCB0cmFpbGluZyB0cmlwbGUgcXVvdGF0aW9uc1xuICB2YXIgcmF3U3RyID0gYmxvY2tTdHIuc2xpY2UoMywgLTMpO1xuICB2YXIgYm9keSA9IGRlZGVudEJsb2NrU3RyaW5nVmFsdWUocmF3U3RyKTtcblxuICBpZiAoZ2V0QmxvY2tTdHJpbmdJbmRlbnRhdGlvbihib2R5KSA+IDApIHtcbiAgICBib2R5ID0gJ1xcbicgKyBib2R5O1xuICB9XG5cbiAgdmFyIGxhc3RDaGFyID0gYm9keVtib2R5Lmxlbmd0aCAtIDFdO1xuICB2YXIgaGFzVHJhaWxpbmdRdW90ZSA9IGxhc3RDaGFyID09PSAnXCInICYmIGJvZHkuc2xpY2UoLTQpICE9PSAnXFxcXFwiXCJcIic7XG5cbiAgaWYgKGhhc1RyYWlsaW5nUXVvdGUgfHwgbGFzdENoYXIgPT09ICdcXFxcJykge1xuICAgIGJvZHkgKz0gJ1xcbic7XG4gIH1cblxuICByZXR1cm4gJ1wiXCJcIicgKyBib2R5ICsgJ1wiXCJcIic7XG59XG4iLCJpbXBvcnQgeyBpc0ludGVyZmFjZVR5cGUsIGlzT2JqZWN0VHlwZSwgaXNMaXN0VHlwZSwgaXNOb25OdWxsVHlwZSwgaXNBYnN0cmFjdFR5cGUgfSBmcm9tIFwiLi4vdHlwZS9kZWZpbml0aW9uLm1qc1wiO1xuLyoqXG4gKiBQcm92aWRlZCB0d28gdHlwZXMsIHJldHVybiB0cnVlIGlmIHRoZSB0eXBlcyBhcmUgZXF1YWwgKGludmFyaWFudCkuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRXF1YWxUeXBlKHR5cGVBLCB0eXBlQikge1xuICAvLyBFcXVpdmFsZW50IHR5cGVzIGFyZSBlcXVhbC5cbiAgaWYgKHR5cGVBID09PSB0eXBlQikge1xuICAgIHJldHVybiB0cnVlO1xuICB9IC8vIElmIGVpdGhlciB0eXBlIGlzIG5vbi1udWxsLCB0aGUgb3RoZXIgbXVzdCBhbHNvIGJlIG5vbi1udWxsLlxuXG5cbiAgaWYgKGlzTm9uTnVsbFR5cGUodHlwZUEpICYmIGlzTm9uTnVsbFR5cGUodHlwZUIpKSB7XG4gICAgcmV0dXJuIGlzRXF1YWxUeXBlKHR5cGVBLm9mVHlwZSwgdHlwZUIub2ZUeXBlKTtcbiAgfSAvLyBJZiBlaXRoZXIgdHlwZSBpcyBhIGxpc3QsIHRoZSBvdGhlciBtdXN0IGFsc28gYmUgYSBsaXN0LlxuXG5cbiAgaWYgKGlzTGlzdFR5cGUodHlwZUEpICYmIGlzTGlzdFR5cGUodHlwZUIpKSB7XG4gICAgcmV0dXJuIGlzRXF1YWxUeXBlKHR5cGVBLm9mVHlwZSwgdHlwZUIub2ZUeXBlKTtcbiAgfSAvLyBPdGhlcndpc2UgdGhlIHR5cGVzIGFyZSBub3QgZXF1YWwuXG5cblxuICByZXR1cm4gZmFsc2U7XG59XG4vKipcbiAqIFByb3ZpZGVkIGEgdHlwZSBhbmQgYSBzdXBlciB0eXBlLCByZXR1cm4gdHJ1ZSBpZiB0aGUgZmlyc3QgdHlwZSBpcyBlaXRoZXJcbiAqIGVxdWFsIG9yIGEgc3Vic2V0IG9mIHRoZSBzZWNvbmQgc3VwZXIgdHlwZSAoY292YXJpYW50KS5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaXNUeXBlU3ViVHlwZU9mKHNjaGVtYSwgbWF5YmVTdWJUeXBlLCBzdXBlclR5cGUpIHtcbiAgLy8gRXF1aXZhbGVudCB0eXBlIGlzIGEgdmFsaWQgc3VidHlwZVxuICBpZiAobWF5YmVTdWJUeXBlID09PSBzdXBlclR5cGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSAvLyBJZiBzdXBlclR5cGUgaXMgbm9uLW51bGwsIG1heWJlU3ViVHlwZSBtdXN0IGFsc28gYmUgbm9uLW51bGwuXG5cblxuICBpZiAoaXNOb25OdWxsVHlwZShzdXBlclR5cGUpKSB7XG4gICAgaWYgKGlzTm9uTnVsbFR5cGUobWF5YmVTdWJUeXBlKSkge1xuICAgICAgcmV0dXJuIGlzVHlwZVN1YlR5cGVPZihzY2hlbWEsIG1heWJlU3ViVHlwZS5vZlR5cGUsIHN1cGVyVHlwZS5vZlR5cGUpO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChpc05vbk51bGxUeXBlKG1heWJlU3ViVHlwZSkpIHtcbiAgICAvLyBJZiBzdXBlclR5cGUgaXMgbnVsbGFibGUsIG1heWJlU3ViVHlwZSBtYXkgYmUgbm9uLW51bGwgb3IgbnVsbGFibGUuXG4gICAgcmV0dXJuIGlzVHlwZVN1YlR5cGVPZihzY2hlbWEsIG1heWJlU3ViVHlwZS5vZlR5cGUsIHN1cGVyVHlwZSk7XG4gIH0gLy8gSWYgc3VwZXJUeXBlIHR5cGUgaXMgYSBsaXN0LCBtYXliZVN1YlR5cGUgdHlwZSBtdXN0IGFsc28gYmUgYSBsaXN0LlxuXG5cbiAgaWYgKGlzTGlzdFR5cGUoc3VwZXJUeXBlKSkge1xuICAgIGlmIChpc0xpc3RUeXBlKG1heWJlU3ViVHlwZSkpIHtcbiAgICAgIHJldHVybiBpc1R5cGVTdWJUeXBlT2Yoc2NoZW1hLCBtYXliZVN1YlR5cGUub2ZUeXBlLCBzdXBlclR5cGUub2ZUeXBlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoaXNMaXN0VHlwZShtYXliZVN1YlR5cGUpKSB7XG4gICAgLy8gSWYgc3VwZXJUeXBlIGlzIG5vdCBhIGxpc3QsIG1heWJlU3ViVHlwZSBtdXN0IGFsc28gYmUgbm90IGEgbGlzdC5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gLy8gSWYgc3VwZXJUeXBlIHR5cGUgaXMgYW4gYWJzdHJhY3QgdHlwZSwgY2hlY2sgaWYgaXQgaXMgc3VwZXIgdHlwZSBvZiBtYXliZVN1YlR5cGUuXG4gIC8vIE90aGVyd2lzZSwgdGhlIGNoaWxkIHR5cGUgaXMgbm90IGEgdmFsaWQgc3VidHlwZSBvZiB0aGUgcGFyZW50IHR5cGUuXG5cblxuICByZXR1cm4gaXNBYnN0cmFjdFR5cGUoc3VwZXJUeXBlKSAmJiAoaXNJbnRlcmZhY2VUeXBlKG1heWJlU3ViVHlwZSkgfHwgaXNPYmplY3RUeXBlKG1heWJlU3ViVHlwZSkpICYmIHNjaGVtYS5pc1N1YlR5cGUoc3VwZXJUeXBlLCBtYXliZVN1YlR5cGUpO1xufVxuLyoqXG4gKiBQcm92aWRlZCB0d28gY29tcG9zaXRlIHR5cGVzLCBkZXRlcm1pbmUgaWYgdGhleSBcIm92ZXJsYXBcIi4gVHdvIGNvbXBvc2l0ZVxuICogdHlwZXMgb3ZlcmxhcCB3aGVuIHRoZSBTZXRzIG9mIHBvc3NpYmxlIGNvbmNyZXRlIHR5cGVzIGZvciBlYWNoIGludGVyc2VjdC5cbiAqXG4gKiBUaGlzIGlzIG9mdGVuIHVzZWQgdG8gZGV0ZXJtaW5lIGlmIGEgZnJhZ21lbnQgb2YgYSBnaXZlbiB0eXBlIGNvdWxkIHBvc3NpYmx5XG4gKiBiZSB2aXNpdGVkIGluIGEgY29udGV4dCBvZiBhbm90aGVyIHR5cGUuXG4gKlxuICogVGhpcyBmdW5jdGlvbiBpcyBjb21tdXRhdGl2ZS5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZG9UeXBlc092ZXJsYXAoc2NoZW1hLCB0eXBlQSwgdHlwZUIpIHtcbiAgLy8gRXF1aXZhbGVudCB0eXBlcyBvdmVybGFwXG4gIGlmICh0eXBlQSA9PT0gdHlwZUIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmIChpc0Fic3RyYWN0VHlwZSh0eXBlQSkpIHtcbiAgICBpZiAoaXNBYnN0cmFjdFR5cGUodHlwZUIpKSB7XG4gICAgICAvLyBJZiBib3RoIHR5cGVzIGFyZSBhYnN0cmFjdCwgdGhlbiBkZXRlcm1pbmUgaWYgdGhlcmUgaXMgYW55IGludGVyc2VjdGlvblxuICAgICAgLy8gYmV0d2VlbiBwb3NzaWJsZSBjb25jcmV0ZSB0eXBlcyBvZiBlYWNoLlxuICAgICAgcmV0dXJuIHNjaGVtYS5nZXRQb3NzaWJsZVR5cGVzKHR5cGVBKS5zb21lKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICAgIHJldHVybiBzY2hlbWEuaXNTdWJUeXBlKHR5cGVCLCB0eXBlKTtcbiAgICAgIH0pO1xuICAgIH0gLy8gRGV0ZXJtaW5lIGlmIHRoZSBsYXR0ZXIgdHlwZSBpcyBhIHBvc3NpYmxlIGNvbmNyZXRlIHR5cGUgb2YgdGhlIGZvcm1lci5cblxuXG4gICAgcmV0dXJuIHNjaGVtYS5pc1N1YlR5cGUodHlwZUEsIHR5cGVCKTtcbiAgfVxuXG4gIGlmIChpc0Fic3RyYWN0VHlwZSh0eXBlQikpIHtcbiAgICAvLyBEZXRlcm1pbmUgaWYgdGhlIGZvcm1lciB0eXBlIGlzIGEgcG9zc2libGUgY29uY3JldGUgdHlwZSBvZiB0aGUgbGF0dGVyLlxuICAgIHJldHVybiBzY2hlbWEuaXNTdWJUeXBlKHR5cGVCLCB0eXBlQSk7XG4gIH0gLy8gT3RoZXJ3aXNlIHRoZSB0eXBlcyBkbyBub3Qgb3ZlcmxhcC5cblxuXG4gIHJldHVybiBmYWxzZTtcbn1cbiIsImltcG9ydCBpbnNwZWN0IGZyb20gXCIuLi9qc3V0aWxzL2luc3BlY3QubWpzXCI7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gXCIuLi9qc3V0aWxzL2ludmFyaWFudC5tanNcIjtcbmltcG9ydCB7IEtpbmQgfSBmcm9tIFwiLi4vbGFuZ3VhZ2Uva2luZHMubWpzXCI7XG5pbXBvcnQgeyBHcmFwaFFMTGlzdCwgR3JhcGhRTE5vbk51bGwgfSBmcm9tIFwiLi4vdHlwZS9kZWZpbml0aW9uLm1qc1wiO1xuLyoqXG4gKiBHaXZlbiBhIFNjaGVtYSBhbmQgYW4gQVNUIG5vZGUgZGVzY3JpYmluZyBhIHR5cGUsIHJldHVybiBhIEdyYXBoUUxUeXBlXG4gKiBkZWZpbml0aW9uIHdoaWNoIGFwcGxpZXMgdG8gdGhhdCB0eXBlLiBGb3IgZXhhbXBsZSwgaWYgcHJvdmlkZWQgdGhlIHBhcnNlZFxuICogQVNUIG5vZGUgZm9yIGBbVXNlcl1gLCBhIEdyYXBoUUxMaXN0IGluc3RhbmNlIHdpbGwgYmUgcmV0dXJuZWQsIGNvbnRhaW5pbmdcbiAqIHRoZSB0eXBlIGNhbGxlZCBcIlVzZXJcIiBmb3VuZCBpbiB0aGUgc2NoZW1hLiBJZiBhIHR5cGUgY2FsbGVkIFwiVXNlclwiIGlzIG5vdFxuICogZm91bmQgaW4gdGhlIHNjaGVtYSwgdGhlbiB1bmRlZmluZWQgd2lsbCBiZSByZXR1cm5lZC5cbiAqL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1yZWRlY2xhcmUgKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHR5cGVGcm9tQVNUKHNjaGVtYSwgdHlwZU5vZGUpIHtcbiAgLyogZXNsaW50LWVuYWJsZSBuby1yZWRlY2xhcmUgKi9cbiAgdmFyIGlubmVyVHlwZTtcblxuICBpZiAodHlwZU5vZGUua2luZCA9PT0gS2luZC5MSVNUX1RZUEUpIHtcbiAgICBpbm5lclR5cGUgPSB0eXBlRnJvbUFTVChzY2hlbWEsIHR5cGVOb2RlLnR5cGUpO1xuICAgIHJldHVybiBpbm5lclR5cGUgJiYgbmV3IEdyYXBoUUxMaXN0KGlubmVyVHlwZSk7XG4gIH1cblxuICBpZiAodHlwZU5vZGUua2luZCA9PT0gS2luZC5OT05fTlVMTF9UWVBFKSB7XG4gICAgaW5uZXJUeXBlID0gdHlwZUZyb21BU1Qoc2NoZW1hLCB0eXBlTm9kZS50eXBlKTtcbiAgICByZXR1cm4gaW5uZXJUeXBlICYmIG5ldyBHcmFwaFFMTm9uTnVsbChpbm5lclR5cGUpO1xuICB9IC8vIGlzdGFuYnVsIGlnbm9yZSBlbHNlIChTZWU6ICdodHRwczovL2dpdGh1Yi5jb20vZ3JhcGhxbC9ncmFwaHFsLWpzL2lzc3Vlcy8yNjE4JylcblxuXG4gIGlmICh0eXBlTm9kZS5raW5kID09PSBLaW5kLk5BTUVEX1RZUEUpIHtcbiAgICByZXR1cm4gc2NoZW1hLmdldFR5cGUodHlwZU5vZGUubmFtZS52YWx1ZSk7XG4gIH0gLy8gaXN0YW5idWwgaWdub3JlIG5leHQgKE5vdCByZWFjaGFibGUuIEFsbCBwb3NzaWJsZSB0eXBlIG5vZGVzIGhhdmUgYmVlbiBjb25zaWRlcmVkKVxuXG5cbiAgZmFsc2UgfHwgaW52YXJpYW50KDAsICdVbmV4cGVjdGVkIHR5cGUgbm9kZTogJyArIGluc3BlY3QodHlwZU5vZGUpKTtcbn1cbiIsImltcG9ydCBvYmplY3RWYWx1ZXMgZnJvbSBcIi4uL3BvbHlmaWxscy9vYmplY3RWYWx1ZXMubWpzXCI7XG5pbXBvcnQga2V5TWFwIGZyb20gXCIuLi9qc3V0aWxzL2tleU1hcC5tanNcIjtcbmltcG9ydCBpbnNwZWN0IGZyb20gXCIuLi9qc3V0aWxzL2luc3BlY3QubWpzXCI7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gXCIuLi9qc3V0aWxzL2ludmFyaWFudC5tanNcIjtcbmltcG9ydCB7IEtpbmQgfSBmcm9tIFwiLi4vbGFuZ3VhZ2Uva2luZHMubWpzXCI7XG5pbXBvcnQgeyBpc0xlYWZUeXBlLCBpc0lucHV0T2JqZWN0VHlwZSwgaXNMaXN0VHlwZSwgaXNOb25OdWxsVHlwZSB9IGZyb20gXCIuLi90eXBlL2RlZmluaXRpb24ubWpzXCI7XG4vKipcbiAqIFByb2R1Y2VzIGEgSmF2YVNjcmlwdCB2YWx1ZSBnaXZlbiBhIEdyYXBoUUwgVmFsdWUgQVNULlxuICpcbiAqIEEgR3JhcGhRTCB0eXBlIG11c3QgYmUgcHJvdmlkZWQsIHdoaWNoIHdpbGwgYmUgdXNlZCB0byBpbnRlcnByZXQgZGlmZmVyZW50XG4gKiBHcmFwaFFMIFZhbHVlIGxpdGVyYWxzLlxuICpcbiAqIFJldHVybnMgYHVuZGVmaW5lZGAgd2hlbiB0aGUgdmFsdWUgY291bGQgbm90IGJlIHZhbGlkbHkgY29lcmNlZCBhY2NvcmRpbmcgdG9cbiAqIHRoZSBwcm92aWRlZCB0eXBlLlxuICpcbiAqIHwgR3JhcGhRTCBWYWx1ZSAgICAgICAgfCBKU09OIFZhbHVlICAgIHxcbiAqIHwgLS0tLS0tLS0tLS0tLS0tLS0tLS0gfCAtLS0tLS0tLS0tLS0tIHxcbiAqIHwgSW5wdXQgT2JqZWN0ICAgICAgICAgfCBPYmplY3QgICAgICAgIHxcbiAqIHwgTGlzdCAgICAgICAgICAgICAgICAgfCBBcnJheSAgICAgICAgIHxcbiAqIHwgQm9vbGVhbiAgICAgICAgICAgICAgfCBCb29sZWFuICAgICAgIHxcbiAqIHwgU3RyaW5nICAgICAgICAgICAgICAgfCBTdHJpbmcgICAgICAgIHxcbiAqIHwgSW50IC8gRmxvYXQgICAgICAgICAgfCBOdW1iZXIgICAgICAgIHxcbiAqIHwgRW51bSBWYWx1ZSAgICAgICAgICAgfCBNaXhlZCAgICAgICAgIHxcbiAqIHwgTnVsbFZhbHVlICAgICAgICAgICAgfCBudWxsICAgICAgICAgIHxcbiAqXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHZhbHVlRnJvbUFTVCh2YWx1ZU5vZGUsIHR5cGUsIHZhcmlhYmxlcykge1xuICBpZiAoIXZhbHVlTm9kZSkge1xuICAgIC8vIFdoZW4gdGhlcmUgaXMgbm8gbm9kZSwgdGhlbiB0aGVyZSBpcyBhbHNvIG5vIHZhbHVlLlxuICAgIC8vIEltcG9ydGFudGx5LCB0aGlzIGlzIGRpZmZlcmVudCBmcm9tIHJldHVybmluZyB0aGUgdmFsdWUgbnVsbC5cbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAodmFsdWVOb2RlLmtpbmQgPT09IEtpbmQuVkFSSUFCTEUpIHtcbiAgICB2YXIgdmFyaWFibGVOYW1lID0gdmFsdWVOb2RlLm5hbWUudmFsdWU7XG5cbiAgICBpZiAodmFyaWFibGVzID09IG51bGwgfHwgdmFyaWFibGVzW3ZhcmlhYmxlTmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gTm8gdmFsaWQgcmV0dXJuIHZhbHVlLlxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciB2YXJpYWJsZVZhbHVlID0gdmFyaWFibGVzW3ZhcmlhYmxlTmFtZV07XG5cbiAgICBpZiAodmFyaWFibGVWYWx1ZSA9PT0gbnVsbCAmJiBpc05vbk51bGxUeXBlKHR5cGUpKSB7XG4gICAgICByZXR1cm47IC8vIEludmFsaWQ6IGludGVudGlvbmFsbHkgcmV0dXJuIG5vIHZhbHVlLlxuICAgIH0gLy8gTm90ZTogVGhpcyBkb2VzIG5vIGZ1cnRoZXIgY2hlY2tpbmcgdGhhdCB0aGlzIHZhcmlhYmxlIGlzIGNvcnJlY3QuXG4gICAgLy8gVGhpcyBhc3N1bWVzIHRoYXQgdGhpcyBxdWVyeSBoYXMgYmVlbiB2YWxpZGF0ZWQgYW5kIHRoZSB2YXJpYWJsZVxuICAgIC8vIHVzYWdlIGhlcmUgaXMgb2YgdGhlIGNvcnJlY3QgdHlwZS5cblxuXG4gICAgcmV0dXJuIHZhcmlhYmxlVmFsdWU7XG4gIH1cblxuICBpZiAoaXNOb25OdWxsVHlwZSh0eXBlKSkge1xuICAgIGlmICh2YWx1ZU5vZGUua2luZCA9PT0gS2luZC5OVUxMKSB7XG4gICAgICByZXR1cm47IC8vIEludmFsaWQ6IGludGVudGlvbmFsbHkgcmV0dXJuIG5vIHZhbHVlLlxuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZUZyb21BU1QodmFsdWVOb2RlLCB0eXBlLm9mVHlwZSwgdmFyaWFibGVzKTtcbiAgfVxuXG4gIGlmICh2YWx1ZU5vZGUua2luZCA9PT0gS2luZC5OVUxMKSB7XG4gICAgLy8gVGhpcyBpcyBleHBsaWNpdGx5IHJldHVybmluZyB0aGUgdmFsdWUgbnVsbC5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmIChpc0xpc3RUeXBlKHR5cGUpKSB7XG4gICAgdmFyIGl0ZW1UeXBlID0gdHlwZS5vZlR5cGU7XG5cbiAgICBpZiAodmFsdWVOb2RlLmtpbmQgPT09IEtpbmQuTElTVCkge1xuICAgICAgdmFyIGNvZXJjZWRWYWx1ZXMgPSBbXTtcblxuICAgICAgZm9yICh2YXIgX2kyID0gMCwgX3ZhbHVlTm9kZSR2YWx1ZXMyID0gdmFsdWVOb2RlLnZhbHVlczsgX2kyIDwgX3ZhbHVlTm9kZSR2YWx1ZXMyLmxlbmd0aDsgX2kyKyspIHtcbiAgICAgICAgdmFyIGl0ZW1Ob2RlID0gX3ZhbHVlTm9kZSR2YWx1ZXMyW19pMl07XG5cbiAgICAgICAgaWYgKGlzTWlzc2luZ1ZhcmlhYmxlKGl0ZW1Ob2RlLCB2YXJpYWJsZXMpKSB7XG4gICAgICAgICAgLy8gSWYgYW4gYXJyYXkgY29udGFpbnMgYSBtaXNzaW5nIHZhcmlhYmxlLCBpdCBpcyBlaXRoZXIgY29lcmNlZCB0b1xuICAgICAgICAgIC8vIG51bGwgb3IgaWYgdGhlIGl0ZW0gdHlwZSBpcyBub24tbnVsbCwgaXQgY29uc2lkZXJlZCBpbnZhbGlkLlxuICAgICAgICAgIGlmIChpc05vbk51bGxUeXBlKGl0ZW1UeXBlKSkge1xuICAgICAgICAgICAgcmV0dXJuOyAvLyBJbnZhbGlkOiBpbnRlbnRpb25hbGx5IHJldHVybiBubyB2YWx1ZS5cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb2VyY2VkVmFsdWVzLnB1c2gobnVsbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIGl0ZW1WYWx1ZSA9IHZhbHVlRnJvbUFTVChpdGVtTm9kZSwgaXRlbVR5cGUsIHZhcmlhYmxlcyk7XG5cbiAgICAgICAgICBpZiAoaXRlbVZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjsgLy8gSW52YWxpZDogaW50ZW50aW9uYWxseSByZXR1cm4gbm8gdmFsdWUuXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29lcmNlZFZhbHVlcy5wdXNoKGl0ZW1WYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvZXJjZWRWYWx1ZXM7XG4gICAgfVxuXG4gICAgdmFyIGNvZXJjZWRWYWx1ZSA9IHZhbHVlRnJvbUFTVCh2YWx1ZU5vZGUsIGl0ZW1UeXBlLCB2YXJpYWJsZXMpO1xuXG4gICAgaWYgKGNvZXJjZWRWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm47IC8vIEludmFsaWQ6IGludGVudGlvbmFsbHkgcmV0dXJuIG5vIHZhbHVlLlxuICAgIH1cblxuICAgIHJldHVybiBbY29lcmNlZFZhbHVlXTtcbiAgfVxuXG4gIGlmIChpc0lucHV0T2JqZWN0VHlwZSh0eXBlKSkge1xuICAgIGlmICh2YWx1ZU5vZGUua2luZCAhPT0gS2luZC5PQkpFQ1QpIHtcbiAgICAgIHJldHVybjsgLy8gSW52YWxpZDogaW50ZW50aW9uYWxseSByZXR1cm4gbm8gdmFsdWUuXG4gICAgfVxuXG4gICAgdmFyIGNvZXJjZWRPYmogPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHZhciBmaWVsZE5vZGVzID0ga2V5TWFwKHZhbHVlTm9kZS5maWVsZHMsIGZ1bmN0aW9uIChmaWVsZCkge1xuICAgICAgcmV0dXJuIGZpZWxkLm5hbWUudmFsdWU7XG4gICAgfSk7XG5cbiAgICBmb3IgKHZhciBfaTQgPSAwLCBfb2JqZWN0VmFsdWVzMiA9IG9iamVjdFZhbHVlcyh0eXBlLmdldEZpZWxkcygpKTsgX2k0IDwgX29iamVjdFZhbHVlczIubGVuZ3RoOyBfaTQrKykge1xuICAgICAgdmFyIGZpZWxkID0gX29iamVjdFZhbHVlczJbX2k0XTtcbiAgICAgIHZhciBmaWVsZE5vZGUgPSBmaWVsZE5vZGVzW2ZpZWxkLm5hbWVdO1xuXG4gICAgICBpZiAoIWZpZWxkTm9kZSB8fCBpc01pc3NpbmdWYXJpYWJsZShmaWVsZE5vZGUudmFsdWUsIHZhcmlhYmxlcykpIHtcbiAgICAgICAgaWYgKGZpZWxkLmRlZmF1bHRWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgY29lcmNlZE9ialtmaWVsZC5uYW1lXSA9IGZpZWxkLmRlZmF1bHRWYWx1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChpc05vbk51bGxUeXBlKGZpZWxkLnR5cGUpKSB7XG4gICAgICAgICAgcmV0dXJuOyAvLyBJbnZhbGlkOiBpbnRlbnRpb25hbGx5IHJldHVybiBubyB2YWx1ZS5cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgZmllbGRWYWx1ZSA9IHZhbHVlRnJvbUFTVChmaWVsZE5vZGUudmFsdWUsIGZpZWxkLnR5cGUsIHZhcmlhYmxlcyk7XG5cbiAgICAgIGlmIChmaWVsZFZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuOyAvLyBJbnZhbGlkOiBpbnRlbnRpb25hbGx5IHJldHVybiBubyB2YWx1ZS5cbiAgICAgIH1cblxuICAgICAgY29lcmNlZE9ialtmaWVsZC5uYW1lXSA9IGZpZWxkVmFsdWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvZXJjZWRPYmo7XG4gIH0gLy8gaXN0YW5idWwgaWdub3JlIGVsc2UgKFNlZTogJ2h0dHBzOi8vZ2l0aHViLmNvbS9ncmFwaHFsL2dyYXBocWwtanMvaXNzdWVzLzI2MTgnKVxuXG5cbiAgaWYgKGlzTGVhZlR5cGUodHlwZSkpIHtcbiAgICAvLyBTY2FsYXJzIGFuZCBFbnVtcyBmdWxmaWxsIHBhcnNpbmcgYSBsaXRlcmFsIHZhbHVlIHZpYSBwYXJzZUxpdGVyYWwoKS5cbiAgICAvLyBJbnZhbGlkIHZhbHVlcyByZXByZXNlbnQgYSBmYWlsdXJlIHRvIHBhcnNlIGNvcnJlY3RseSwgaW4gd2hpY2ggY2FzZVxuICAgIC8vIG5vIHZhbHVlIGlzIHJldHVybmVkLlxuICAgIHZhciByZXN1bHQ7XG5cbiAgICB0cnkge1xuICAgICAgcmVzdWx0ID0gdHlwZS5wYXJzZUxpdGVyYWwodmFsdWVOb2RlLCB2YXJpYWJsZXMpO1xuICAgIH0gY2F0Y2ggKF9lcnJvcikge1xuICAgICAgcmV0dXJuOyAvLyBJbnZhbGlkOiBpbnRlbnRpb25hbGx5IHJldHVybiBubyB2YWx1ZS5cbiAgICB9XG5cbiAgICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybjsgLy8gSW52YWxpZDogaW50ZW50aW9uYWxseSByZXR1cm4gbm8gdmFsdWUuXG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAoTm90IHJlYWNoYWJsZS4gQWxsIHBvc3NpYmxlIGlucHV0IHR5cGVzIGhhdmUgYmVlbiBjb25zaWRlcmVkKVxuXG5cbiAgZmFsc2UgfHwgaW52YXJpYW50KDAsICdVbmV4cGVjdGVkIGlucHV0IHR5cGU6ICcgKyBpbnNwZWN0KHR5cGUpKTtcbn0gLy8gUmV0dXJucyB0cnVlIGlmIHRoZSBwcm92aWRlZCB2YWx1ZU5vZGUgaXMgYSB2YXJpYWJsZSB3aGljaCBpcyBub3QgZGVmaW5lZFxuLy8gaW4gdGhlIHNldCBvZiB2YXJpYWJsZXMuXG5cbmZ1bmN0aW9uIGlzTWlzc2luZ1ZhcmlhYmxlKHZhbHVlTm9kZSwgdmFyaWFibGVzKSB7XG4gIHJldHVybiB2YWx1ZU5vZGUua2luZCA9PT0gS2luZC5WQVJJQUJMRSAmJiAodmFyaWFibGVzID09IG51bGwgfHwgdmFyaWFibGVzW3ZhbHVlTm9kZS5uYW1lLnZhbHVlXSA9PT0gdW5kZWZpbmVkKTtcbn1cbiIsImltcG9ydCBpbnNwZWN0IGZyb20gXCIuLi9qc3V0aWxzL2luc3BlY3QubWpzXCI7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gXCIuLi9qc3V0aWxzL2ludmFyaWFudC5tanNcIjtcbmltcG9ydCBrZXlWYWxNYXAgZnJvbSBcIi4uL2pzdXRpbHMva2V5VmFsTWFwLm1qc1wiO1xuaW1wb3J0IHsgS2luZCB9IGZyb20gXCIuLi9sYW5ndWFnZS9raW5kcy5tanNcIjtcblxuLyoqXG4gKiBQcm9kdWNlcyBhIEphdmFTY3JpcHQgdmFsdWUgZ2l2ZW4gYSBHcmFwaFFMIFZhbHVlIEFTVC5cbiAqXG4gKiBVbmxpa2UgYHZhbHVlRnJvbUFTVCgpYCwgbm8gdHlwZSBpcyBwcm92aWRlZC4gVGhlIHJlc3VsdGluZyBKYXZhU2NyaXB0IHZhbHVlXG4gKiB3aWxsIHJlZmxlY3QgdGhlIHByb3ZpZGVkIEdyYXBoUUwgdmFsdWUgQVNULlxuICpcbiAqIHwgR3JhcGhRTCBWYWx1ZSAgICAgICAgfCBKYXZhU2NyaXB0IFZhbHVlIHxcbiAqIHwgLS0tLS0tLS0tLS0tLS0tLS0tLS0gfCAtLS0tLS0tLS0tLS0tLS0tIHxcbiAqIHwgSW5wdXQgT2JqZWN0ICAgICAgICAgfCBPYmplY3QgICAgICAgICAgIHxcbiAqIHwgTGlzdCAgICAgICAgICAgICAgICAgfCBBcnJheSAgICAgICAgICAgIHxcbiAqIHwgQm9vbGVhbiAgICAgICAgICAgICAgfCBCb29sZWFuICAgICAgICAgIHxcbiAqIHwgU3RyaW5nIC8gRW51bSAgICAgICAgfCBTdHJpbmcgICAgICAgICAgIHxcbiAqIHwgSW50IC8gRmxvYXQgICAgICAgICAgfCBOdW1iZXIgICAgICAgICAgIHxcbiAqIHwgTnVsbCAgICAgICAgICAgICAgICAgfCBudWxsICAgICAgICAgICAgIHxcbiAqXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB2YWx1ZUZyb21BU1RVbnR5cGVkKHZhbHVlTm9kZSwgdmFyaWFibGVzKSB7XG4gIHN3aXRjaCAodmFsdWVOb2RlLmtpbmQpIHtcbiAgICBjYXNlIEtpbmQuTlVMTDpcbiAgICAgIHJldHVybiBudWxsO1xuXG4gICAgY2FzZSBLaW5kLklOVDpcbiAgICAgIHJldHVybiBwYXJzZUludCh2YWx1ZU5vZGUudmFsdWUsIDEwKTtcblxuICAgIGNhc2UgS2luZC5GTE9BVDpcbiAgICAgIHJldHVybiBwYXJzZUZsb2F0KHZhbHVlTm9kZS52YWx1ZSk7XG5cbiAgICBjYXNlIEtpbmQuU1RSSU5HOlxuICAgIGNhc2UgS2luZC5FTlVNOlxuICAgIGNhc2UgS2luZC5CT09MRUFOOlxuICAgICAgcmV0dXJuIHZhbHVlTm9kZS52YWx1ZTtcblxuICAgIGNhc2UgS2luZC5MSVNUOlxuICAgICAgcmV0dXJuIHZhbHVlTm9kZS52YWx1ZXMubWFwKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZUZyb21BU1RVbnR5cGVkKG5vZGUsIHZhcmlhYmxlcyk7XG4gICAgICB9KTtcblxuICAgIGNhc2UgS2luZC5PQkpFQ1Q6XG4gICAgICByZXR1cm4ga2V5VmFsTWFwKHZhbHVlTm9kZS5maWVsZHMsIGZ1bmN0aW9uIChmaWVsZCkge1xuICAgICAgICByZXR1cm4gZmllbGQubmFtZS52YWx1ZTtcbiAgICAgIH0sIGZ1bmN0aW9uIChmaWVsZCkge1xuICAgICAgICByZXR1cm4gdmFsdWVGcm9tQVNUVW50eXBlZChmaWVsZC52YWx1ZSwgdmFyaWFibGVzKTtcbiAgICAgIH0pO1xuXG4gICAgY2FzZSBLaW5kLlZBUklBQkxFOlxuICAgICAgcmV0dXJuIHZhcmlhYmxlcyA9PT0gbnVsbCB8fCB2YXJpYWJsZXMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHZhcmlhYmxlc1t2YWx1ZU5vZGUubmFtZS52YWx1ZV07XG4gIH0gLy8gaXN0YW5idWwgaWdub3JlIG5leHQgKE5vdCByZWFjaGFibGUuIEFsbCBwb3NzaWJsZSB2YWx1ZSBub2RlcyBoYXZlIGJlZW4gY29uc2lkZXJlZClcblxuXG4gIGZhbHNlIHx8IGludmFyaWFudCgwLCAnVW5leHBlY3RlZCB2YWx1ZSBub2RlOiAnICsgaW5zcGVjdCh2YWx1ZU5vZGUpKTtcbn1cbiIsImZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpOyBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzczsgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgeyBLaW5kIH0gZnJvbSBcIi4uL2xhbmd1YWdlL2tpbmRzLm1qc1wiO1xuaW1wb3J0IHsgdmlzaXQgfSBmcm9tIFwiLi4vbGFuZ3VhZ2UvdmlzaXRvci5tanNcIjtcbmltcG9ydCB7IFR5cGVJbmZvLCB2aXNpdFdpdGhUeXBlSW5mbyB9IGZyb20gXCIuLi91dGlsaXRpZXMvVHlwZUluZm8ubWpzXCI7XG5cbi8qKlxuICogQW4gaW5zdGFuY2Ugb2YgdGhpcyBjbGFzcyBpcyBwYXNzZWQgYXMgdGhlIFwidGhpc1wiIGNvbnRleHQgdG8gYWxsIHZhbGlkYXRvcnMsXG4gKiBhbGxvd2luZyBhY2Nlc3MgdG8gY29tbW9ubHkgdXNlZnVsIGNvbnRleHR1YWwgaW5mb3JtYXRpb24gZnJvbSB3aXRoaW4gYVxuICogdmFsaWRhdGlvbiBydWxlLlxuICovXG5leHBvcnQgdmFyIEFTVFZhbGlkYXRpb25Db250ZXh0ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQVNUVmFsaWRhdGlvbkNvbnRleHQoYXN0LCBvbkVycm9yKSB7XG4gICAgdGhpcy5fYXN0ID0gYXN0O1xuICAgIHRoaXMuX2ZyYWdtZW50cyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9mcmFnbWVudFNwcmVhZHMgPSBuZXcgTWFwKCk7XG4gICAgdGhpcy5fcmVjdXJzaXZlbHlSZWZlcmVuY2VkRnJhZ21lbnRzID0gbmV3IE1hcCgpO1xuICAgIHRoaXMuX29uRXJyb3IgPSBvbkVycm9yO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEFTVFZhbGlkYXRpb25Db250ZXh0LnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVwb3J0RXJyb3IgPSBmdW5jdGlvbiByZXBvcnRFcnJvcihlcnJvcikge1xuICAgIHRoaXMuX29uRXJyb3IoZXJyb3IpO1xuICB9O1xuXG4gIF9wcm90by5nZXREb2N1bWVudCA9IGZ1bmN0aW9uIGdldERvY3VtZW50KCkge1xuICAgIHJldHVybiB0aGlzLl9hc3Q7XG4gIH07XG5cbiAgX3Byb3RvLmdldEZyYWdtZW50ID0gZnVuY3Rpb24gZ2V0RnJhZ21lbnQobmFtZSkge1xuICAgIHZhciBmcmFnbWVudHMgPSB0aGlzLl9mcmFnbWVudHM7XG5cbiAgICBpZiAoIWZyYWdtZW50cykge1xuICAgICAgdGhpcy5fZnJhZ21lbnRzID0gZnJhZ21lbnRzID0gdGhpcy5nZXREb2N1bWVudCgpLmRlZmluaXRpb25zLnJlZHVjZShmdW5jdGlvbiAoZnJhZ3MsIHN0YXRlbWVudCkge1xuICAgICAgICBpZiAoc3RhdGVtZW50LmtpbmQgPT09IEtpbmQuRlJBR01FTlRfREVGSU5JVElPTikge1xuICAgICAgICAgIGZyYWdzW3N0YXRlbWVudC5uYW1lLnZhbHVlXSA9IHN0YXRlbWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmcmFncztcbiAgICAgIH0sIE9iamVjdC5jcmVhdGUobnVsbCkpO1xuICAgIH1cblxuICAgIHJldHVybiBmcmFnbWVudHNbbmFtZV07XG4gIH07XG5cbiAgX3Byb3RvLmdldEZyYWdtZW50U3ByZWFkcyA9IGZ1bmN0aW9uIGdldEZyYWdtZW50U3ByZWFkcyhub2RlKSB7XG4gICAgdmFyIHNwcmVhZHMgPSB0aGlzLl9mcmFnbWVudFNwcmVhZHMuZ2V0KG5vZGUpO1xuXG4gICAgaWYgKCFzcHJlYWRzKSB7XG4gICAgICBzcHJlYWRzID0gW107XG4gICAgICB2YXIgc2V0c1RvVmlzaXQgPSBbbm9kZV07XG5cbiAgICAgIHdoaWxlIChzZXRzVG9WaXNpdC5sZW5ndGggIT09IDApIHtcbiAgICAgICAgdmFyIHNldCA9IHNldHNUb1Zpc2l0LnBvcCgpO1xuXG4gICAgICAgIGZvciAodmFyIF9pMiA9IDAsIF9zZXQkc2VsZWN0aW9uczIgPSBzZXQuc2VsZWN0aW9uczsgX2kyIDwgX3NldCRzZWxlY3Rpb25zMi5sZW5ndGg7IF9pMisrKSB7XG4gICAgICAgICAgdmFyIHNlbGVjdGlvbiA9IF9zZXQkc2VsZWN0aW9uczJbX2kyXTtcblxuICAgICAgICAgIGlmIChzZWxlY3Rpb24ua2luZCA9PT0gS2luZC5GUkFHTUVOVF9TUFJFQUQpIHtcbiAgICAgICAgICAgIHNwcmVhZHMucHVzaChzZWxlY3Rpb24pO1xuICAgICAgICAgIH0gZWxzZSBpZiAoc2VsZWN0aW9uLnNlbGVjdGlvblNldCkge1xuICAgICAgICAgICAgc2V0c1RvVmlzaXQucHVzaChzZWxlY3Rpb24uc2VsZWN0aW9uU2V0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5fZnJhZ21lbnRTcHJlYWRzLnNldChub2RlLCBzcHJlYWRzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3ByZWFkcztcbiAgfTtcblxuICBfcHJvdG8uZ2V0UmVjdXJzaXZlbHlSZWZlcmVuY2VkRnJhZ21lbnRzID0gZnVuY3Rpb24gZ2V0UmVjdXJzaXZlbHlSZWZlcmVuY2VkRnJhZ21lbnRzKG9wZXJhdGlvbikge1xuICAgIHZhciBmcmFnbWVudHMgPSB0aGlzLl9yZWN1cnNpdmVseVJlZmVyZW5jZWRGcmFnbWVudHMuZ2V0KG9wZXJhdGlvbik7XG5cbiAgICBpZiAoIWZyYWdtZW50cykge1xuICAgICAgZnJhZ21lbnRzID0gW107XG4gICAgICB2YXIgY29sbGVjdGVkTmFtZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgdmFyIG5vZGVzVG9WaXNpdCA9IFtvcGVyYXRpb24uc2VsZWN0aW9uU2V0XTtcblxuICAgICAgd2hpbGUgKG5vZGVzVG9WaXNpdC5sZW5ndGggIT09IDApIHtcbiAgICAgICAgdmFyIG5vZGUgPSBub2Rlc1RvVmlzaXQucG9wKCk7XG5cbiAgICAgICAgZm9yICh2YXIgX2k0ID0gMCwgX3RoaXMkZ2V0RnJhZ21lbnRTcHJlMiA9IHRoaXMuZ2V0RnJhZ21lbnRTcHJlYWRzKG5vZGUpOyBfaTQgPCBfdGhpcyRnZXRGcmFnbWVudFNwcmUyLmxlbmd0aDsgX2k0KyspIHtcbiAgICAgICAgICB2YXIgc3ByZWFkID0gX3RoaXMkZ2V0RnJhZ21lbnRTcHJlMltfaTRdO1xuICAgICAgICAgIHZhciBmcmFnTmFtZSA9IHNwcmVhZC5uYW1lLnZhbHVlO1xuXG4gICAgICAgICAgaWYgKGNvbGxlY3RlZE5hbWVzW2ZyYWdOYW1lXSAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgY29sbGVjdGVkTmFtZXNbZnJhZ05hbWVdID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBmcmFnbWVudCA9IHRoaXMuZ2V0RnJhZ21lbnQoZnJhZ05hbWUpO1xuXG4gICAgICAgICAgICBpZiAoZnJhZ21lbnQpIHtcbiAgICAgICAgICAgICAgZnJhZ21lbnRzLnB1c2goZnJhZ21lbnQpO1xuICAgICAgICAgICAgICBub2Rlc1RvVmlzaXQucHVzaChmcmFnbWVudC5zZWxlY3Rpb25TZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLl9yZWN1cnNpdmVseVJlZmVyZW5jZWRGcmFnbWVudHMuc2V0KG9wZXJhdGlvbiwgZnJhZ21lbnRzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnJhZ21lbnRzO1xuICB9O1xuXG4gIHJldHVybiBBU1RWYWxpZGF0aW9uQ29udGV4dDtcbn0oKTtcbmV4cG9ydCB2YXIgU0RMVmFsaWRhdGlvbkNvbnRleHQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9BU1RWYWxpZGF0aW9uQ29udGV4dCkge1xuICBfaW5oZXJpdHNMb29zZShTRExWYWxpZGF0aW9uQ29udGV4dCwgX0FTVFZhbGlkYXRpb25Db250ZXh0KTtcblxuICBmdW5jdGlvbiBTRExWYWxpZGF0aW9uQ29udGV4dChhc3QsIHNjaGVtYSwgb25FcnJvcikge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX0FTVFZhbGlkYXRpb25Db250ZXh0LmNhbGwodGhpcywgYXN0LCBvbkVycm9yKSB8fCB0aGlzO1xuICAgIF90aGlzLl9zY2hlbWEgPSBzY2hlbWE7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90bzIgPSBTRExWYWxpZGF0aW9uQ29udGV4dC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvMi5nZXRTY2hlbWEgPSBmdW5jdGlvbiBnZXRTY2hlbWEoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3NjaGVtYTtcbiAgfTtcblxuICByZXR1cm4gU0RMVmFsaWRhdGlvbkNvbnRleHQ7XG59KEFTVFZhbGlkYXRpb25Db250ZXh0KTtcbmV4cG9ydCB2YXIgVmFsaWRhdGlvbkNvbnRleHQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9BU1RWYWxpZGF0aW9uQ29udGV4dDIpIHtcbiAgX2luaGVyaXRzTG9vc2UoVmFsaWRhdGlvbkNvbnRleHQsIF9BU1RWYWxpZGF0aW9uQ29udGV4dDIpO1xuXG4gIGZ1bmN0aW9uIFZhbGlkYXRpb25Db250ZXh0KHNjaGVtYSwgYXN0LCB0eXBlSW5mbywgb25FcnJvcikge1xuICAgIHZhciBfdGhpczI7XG5cbiAgICBfdGhpczIgPSBfQVNUVmFsaWRhdGlvbkNvbnRleHQyLmNhbGwodGhpcywgYXN0LCBvbkVycm9yKSB8fCB0aGlzO1xuICAgIF90aGlzMi5fc2NoZW1hID0gc2NoZW1hO1xuICAgIF90aGlzMi5fdHlwZUluZm8gPSB0eXBlSW5mbztcbiAgICBfdGhpczIuX3ZhcmlhYmxlVXNhZ2VzID0gbmV3IE1hcCgpO1xuICAgIF90aGlzMi5fcmVjdXJzaXZlVmFyaWFibGVVc2FnZXMgPSBuZXcgTWFwKCk7XG4gICAgcmV0dXJuIF90aGlzMjtcbiAgfVxuXG4gIHZhciBfcHJvdG8zID0gVmFsaWRhdGlvbkNvbnRleHQucHJvdG90eXBlO1xuXG4gIF9wcm90bzMuZ2V0U2NoZW1hID0gZnVuY3Rpb24gZ2V0U2NoZW1hKCkge1xuICAgIHJldHVybiB0aGlzLl9zY2hlbWE7XG4gIH07XG5cbiAgX3Byb3RvMy5nZXRWYXJpYWJsZVVzYWdlcyA9IGZ1bmN0aW9uIGdldFZhcmlhYmxlVXNhZ2VzKG5vZGUpIHtcbiAgICB2YXIgdXNhZ2VzID0gdGhpcy5fdmFyaWFibGVVc2FnZXMuZ2V0KG5vZGUpO1xuXG4gICAgaWYgKCF1c2FnZXMpIHtcbiAgICAgIHZhciBuZXdVc2FnZXMgPSBbXTtcbiAgICAgIHZhciB0eXBlSW5mbyA9IG5ldyBUeXBlSW5mbyh0aGlzLl9zY2hlbWEpO1xuICAgICAgdmlzaXQobm9kZSwgdmlzaXRXaXRoVHlwZUluZm8odHlwZUluZm8sIHtcbiAgICAgICAgVmFyaWFibGVEZWZpbml0aW9uOiBmdW5jdGlvbiBWYXJpYWJsZURlZmluaXRpb24oKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9LFxuICAgICAgICBWYXJpYWJsZTogZnVuY3Rpb24gVmFyaWFibGUodmFyaWFibGUpIHtcbiAgICAgICAgICBuZXdVc2FnZXMucHVzaCh7XG4gICAgICAgICAgICBub2RlOiB2YXJpYWJsZSxcbiAgICAgICAgICAgIHR5cGU6IHR5cGVJbmZvLmdldElucHV0VHlwZSgpLFxuICAgICAgICAgICAgZGVmYXVsdFZhbHVlOiB0eXBlSW5mby5nZXREZWZhdWx0VmFsdWUoKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KSk7XG4gICAgICB1c2FnZXMgPSBuZXdVc2FnZXM7XG5cbiAgICAgIHRoaXMuX3ZhcmlhYmxlVXNhZ2VzLnNldChub2RlLCB1c2FnZXMpO1xuICAgIH1cblxuICAgIHJldHVybiB1c2FnZXM7XG4gIH07XG5cbiAgX3Byb3RvMy5nZXRSZWN1cnNpdmVWYXJpYWJsZVVzYWdlcyA9IGZ1bmN0aW9uIGdldFJlY3Vyc2l2ZVZhcmlhYmxlVXNhZ2VzKG9wZXJhdGlvbikge1xuICAgIHZhciB1c2FnZXMgPSB0aGlzLl9yZWN1cnNpdmVWYXJpYWJsZVVzYWdlcy5nZXQob3BlcmF0aW9uKTtcblxuICAgIGlmICghdXNhZ2VzKSB7XG4gICAgICB1c2FnZXMgPSB0aGlzLmdldFZhcmlhYmxlVXNhZ2VzKG9wZXJhdGlvbik7XG5cbiAgICAgIGZvciAodmFyIF9pNiA9IDAsIF90aGlzJGdldFJlY3Vyc2l2ZWx5UjIgPSB0aGlzLmdldFJlY3Vyc2l2ZWx5UmVmZXJlbmNlZEZyYWdtZW50cyhvcGVyYXRpb24pOyBfaTYgPCBfdGhpcyRnZXRSZWN1cnNpdmVseVIyLmxlbmd0aDsgX2k2KyspIHtcbiAgICAgICAgdmFyIGZyYWcgPSBfdGhpcyRnZXRSZWN1cnNpdmVseVIyW19pNl07XG4gICAgICAgIHVzYWdlcyA9IHVzYWdlcy5jb25jYXQodGhpcy5nZXRWYXJpYWJsZVVzYWdlcyhmcmFnKSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3JlY3Vyc2l2ZVZhcmlhYmxlVXNhZ2VzLnNldChvcGVyYXRpb24sIHVzYWdlcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVzYWdlcztcbiAgfTtcblxuICBfcHJvdG8zLmdldFR5cGUgPSBmdW5jdGlvbiBnZXRUeXBlKCkge1xuICAgIHJldHVybiB0aGlzLl90eXBlSW5mby5nZXRUeXBlKCk7XG4gIH07XG5cbiAgX3Byb3RvMy5nZXRQYXJlbnRUeXBlID0gZnVuY3Rpb24gZ2V0UGFyZW50VHlwZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdHlwZUluZm8uZ2V0UGFyZW50VHlwZSgpO1xuICB9O1xuXG4gIF9wcm90bzMuZ2V0SW5wdXRUeXBlID0gZnVuY3Rpb24gZ2V0SW5wdXRUeXBlKCkge1xuICAgIHJldHVybiB0aGlzLl90eXBlSW5mby5nZXRJbnB1dFR5cGUoKTtcbiAgfTtcblxuICBfcHJvdG8zLmdldFBhcmVudElucHV0VHlwZSA9IGZ1bmN0aW9uIGdldFBhcmVudElucHV0VHlwZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdHlwZUluZm8uZ2V0UGFyZW50SW5wdXRUeXBlKCk7XG4gIH07XG5cbiAgX3Byb3RvMy5nZXRGaWVsZERlZiA9IGZ1bmN0aW9uIGdldEZpZWxkRGVmKCkge1xuICAgIHJldHVybiB0aGlzLl90eXBlSW5mby5nZXRGaWVsZERlZigpO1xuICB9O1xuXG4gIF9wcm90bzMuZ2V0RGlyZWN0aXZlID0gZnVuY3Rpb24gZ2V0RGlyZWN0aXZlKCkge1xuICAgIHJldHVybiB0aGlzLl90eXBlSW5mby5nZXREaXJlY3RpdmUoKTtcbiAgfTtcblxuICBfcHJvdG8zLmdldEFyZ3VtZW50ID0gZnVuY3Rpb24gZ2V0QXJndW1lbnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3R5cGVJbmZvLmdldEFyZ3VtZW50KCk7XG4gIH07XG5cbiAgX3Byb3RvMy5nZXRFbnVtVmFsdWUgPSBmdW5jdGlvbiBnZXRFbnVtVmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3R5cGVJbmZvLmdldEVudW1WYWx1ZSgpO1xuICB9O1xuXG4gIHJldHVybiBWYWxpZGF0aW9uQ29udGV4dDtcbn0oQVNUVmFsaWRhdGlvbkNvbnRleHQpO1xuIiwiaW1wb3J0IHsgR3JhcGhRTEVycm9yIH0gZnJvbSBcIi4uLy4uL2Vycm9yL0dyYXBoUUxFcnJvci5tanNcIjtcbmltcG9ydCB7IEtpbmQgfSBmcm9tIFwiLi4vLi4vbGFuZ3VhZ2Uva2luZHMubWpzXCI7XG5pbXBvcnQgeyBpc0V4ZWN1dGFibGVEZWZpbml0aW9uTm9kZSB9IGZyb20gXCIuLi8uLi9sYW5ndWFnZS9wcmVkaWNhdGVzLm1qc1wiO1xuXG4vKipcbiAqIEV4ZWN1dGFibGUgZGVmaW5pdGlvbnNcbiAqXG4gKiBBIEdyYXBoUUwgZG9jdW1lbnQgaXMgb25seSB2YWxpZCBmb3IgZXhlY3V0aW9uIGlmIGFsbCBkZWZpbml0aW9ucyBhcmUgZWl0aGVyXG4gKiBvcGVyYXRpb24gb3IgZnJhZ21lbnQgZGVmaW5pdGlvbnMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBFeGVjdXRhYmxlRGVmaW5pdGlvbnNSdWxlKGNvbnRleHQpIHtcbiAgcmV0dXJuIHtcbiAgICBEb2N1bWVudDogZnVuY3Rpb24gRG9jdW1lbnQobm9kZSkge1xuICAgICAgZm9yICh2YXIgX2kyID0gMCwgX25vZGUkZGVmaW5pdGlvbnMyID0gbm9kZS5kZWZpbml0aW9uczsgX2kyIDwgX25vZGUkZGVmaW5pdGlvbnMyLmxlbmd0aDsgX2kyKyspIHtcbiAgICAgICAgdmFyIGRlZmluaXRpb24gPSBfbm9kZSRkZWZpbml0aW9uczJbX2kyXTtcblxuICAgICAgICBpZiAoIWlzRXhlY3V0YWJsZURlZmluaXRpb25Ob2RlKGRlZmluaXRpb24pKSB7XG4gICAgICAgICAgdmFyIGRlZk5hbWUgPSBkZWZpbml0aW9uLmtpbmQgPT09IEtpbmQuU0NIRU1BX0RFRklOSVRJT04gfHwgZGVmaW5pdGlvbi5raW5kID09PSBLaW5kLlNDSEVNQV9FWFRFTlNJT04gPyAnc2NoZW1hJyA6ICdcIicgKyBkZWZpbml0aW9uLm5hbWUudmFsdWUgKyAnXCInO1xuICAgICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IobmV3IEdyYXBoUUxFcnJvcihcIlRoZSBcIi5jb25jYXQoZGVmTmFtZSwgXCIgZGVmaW5pdGlvbiBpcyBub3QgZXhlY3V0YWJsZS5cIiksIGRlZmluaXRpb24pKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9O1xufVxuIiwiaW1wb3J0IGFycmF5RnJvbSBmcm9tIFwiLi4vLi4vcG9seWZpbGxzL2FycmF5RnJvbS5tanNcIjtcbmltcG9ydCBkaWRZb3VNZWFuIGZyb20gXCIuLi8uLi9qc3V0aWxzL2RpZFlvdU1lYW4ubWpzXCI7XG5pbXBvcnQgc3VnZ2VzdGlvbkxpc3QgZnJvbSBcIi4uLy4uL2pzdXRpbHMvc3VnZ2VzdGlvbkxpc3QubWpzXCI7XG5pbXBvcnQgbmF0dXJhbENvbXBhcmUgZnJvbSBcIi4uLy4uL2pzdXRpbHMvbmF0dXJhbENvbXBhcmUubWpzXCI7XG5pbXBvcnQgeyBHcmFwaFFMRXJyb3IgfSBmcm9tIFwiLi4vLi4vZXJyb3IvR3JhcGhRTEVycm9yLm1qc1wiO1xuaW1wb3J0IHsgaXNPYmplY3RUeXBlLCBpc0ludGVyZmFjZVR5cGUsIGlzQWJzdHJhY3RUeXBlIH0gZnJvbSBcIi4uLy4uL3R5cGUvZGVmaW5pdGlvbi5tanNcIjtcblxuLyoqXG4gKiBGaWVsZHMgb24gY29ycmVjdCB0eXBlXG4gKlxuICogQSBHcmFwaFFMIGRvY3VtZW50IGlzIG9ubHkgdmFsaWQgaWYgYWxsIGZpZWxkcyBzZWxlY3RlZCBhcmUgZGVmaW5lZCBieSB0aGVcbiAqIHBhcmVudCB0eXBlLCBvciBhcmUgYW4gYWxsb3dlZCBtZXRhIGZpZWxkIHN1Y2ggYXMgX190eXBlbmFtZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIEZpZWxkc09uQ29ycmVjdFR5cGVSdWxlKGNvbnRleHQpIHtcbiAgcmV0dXJuIHtcbiAgICBGaWVsZDogZnVuY3Rpb24gRmllbGQobm9kZSkge1xuICAgICAgdmFyIHR5cGUgPSBjb250ZXh0LmdldFBhcmVudFR5cGUoKTtcblxuICAgICAgaWYgKHR5cGUpIHtcbiAgICAgICAgdmFyIGZpZWxkRGVmID0gY29udGV4dC5nZXRGaWVsZERlZigpO1xuXG4gICAgICAgIGlmICghZmllbGREZWYpIHtcbiAgICAgICAgICAvLyBUaGlzIGZpZWxkIGRvZXNuJ3QgZXhpc3QsIGxldHMgbG9vayBmb3Igc3VnZ2VzdGlvbnMuXG4gICAgICAgICAgdmFyIHNjaGVtYSA9IGNvbnRleHQuZ2V0U2NoZW1hKCk7XG4gICAgICAgICAgdmFyIGZpZWxkTmFtZSA9IG5vZGUubmFtZS52YWx1ZTsgLy8gRmlyc3QgZGV0ZXJtaW5lIGlmIHRoZXJlIGFyZSBhbnkgc3VnZ2VzdGVkIHR5cGVzIHRvIGNvbmRpdGlvbiBvbi5cblxuICAgICAgICAgIHZhciBzdWdnZXN0aW9uID0gZGlkWW91TWVhbigndG8gdXNlIGFuIGlubGluZSBmcmFnbWVudCBvbicsIGdldFN1Z2dlc3RlZFR5cGVOYW1lcyhzY2hlbWEsIHR5cGUsIGZpZWxkTmFtZSkpOyAvLyBJZiB0aGVyZSBhcmUgbm8gc3VnZ2VzdGVkIHR5cGVzLCB0aGVuIHBlcmhhcHMgdGhpcyB3YXMgYSB0eXBvP1xuXG4gICAgICAgICAgaWYgKHN1Z2dlc3Rpb24gPT09ICcnKSB7XG4gICAgICAgICAgICBzdWdnZXN0aW9uID0gZGlkWW91TWVhbihnZXRTdWdnZXN0ZWRGaWVsZE5hbWVzKHR5cGUsIGZpZWxkTmFtZSkpO1xuICAgICAgICAgIH0gLy8gUmVwb3J0IGFuIGVycm9yLCBpbmNsdWRpbmcgaGVscGZ1bCBzdWdnZXN0aW9ucy5cblxuXG4gICAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihuZXcgR3JhcGhRTEVycm9yKFwiQ2Fubm90IHF1ZXJ5IGZpZWxkIFxcXCJcIi5jb25jYXQoZmllbGROYW1lLCBcIlxcXCIgb24gdHlwZSBcXFwiXCIpLmNvbmNhdCh0eXBlLm5hbWUsIFwiXFxcIi5cIikgKyBzdWdnZXN0aW9uLCBub2RlKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG4vKipcbiAqIEdvIHRocm91Z2ggYWxsIG9mIHRoZSBpbXBsZW1lbnRhdGlvbnMgb2YgdHlwZSwgYXMgd2VsbCBhcyB0aGUgaW50ZXJmYWNlcyB0aGF0XG4gKiB0aGV5IGltcGxlbWVudC4gSWYgYW55IG9mIHRob3NlIHR5cGVzIGluY2x1ZGUgdGhlIHByb3ZpZGVkIGZpZWxkLCBzdWdnZXN0IHRoZW0sXG4gKiBzb3J0ZWQgYnkgaG93IG9mdGVuIHRoZSB0eXBlIGlzIHJlZmVyZW5jZWQuXG4gKi9cblxuZnVuY3Rpb24gZ2V0U3VnZ2VzdGVkVHlwZU5hbWVzKHNjaGVtYSwgdHlwZSwgZmllbGROYW1lKSB7XG4gIGlmICghaXNBYnN0cmFjdFR5cGUodHlwZSkpIHtcbiAgICAvLyBNdXN0IGJlIGFuIE9iamVjdCB0eXBlLCB3aGljaCBkb2VzIG5vdCBoYXZlIHBvc3NpYmxlIGZpZWxkcy5cbiAgICByZXR1cm4gW107XG4gIH1cblxuICB2YXIgc3VnZ2VzdGVkVHlwZXMgPSBuZXcgU2V0KCk7XG4gIHZhciB1c2FnZUNvdW50ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICBmb3IgKHZhciBfaTIgPSAwLCBfc2NoZW1hJGdldFBvc3NpYmxlVHkyID0gc2NoZW1hLmdldFBvc3NpYmxlVHlwZXModHlwZSk7IF9pMiA8IF9zY2hlbWEkZ2V0UG9zc2libGVUeTIubGVuZ3RoOyBfaTIrKykge1xuICAgIHZhciBwb3NzaWJsZVR5cGUgPSBfc2NoZW1hJGdldFBvc3NpYmxlVHkyW19pMl07XG5cbiAgICBpZiAoIXBvc3NpYmxlVHlwZS5nZXRGaWVsZHMoKVtmaWVsZE5hbWVdKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9IC8vIFRoaXMgb2JqZWN0IHR5cGUgZGVmaW5lcyB0aGlzIGZpZWxkLlxuXG5cbiAgICBzdWdnZXN0ZWRUeXBlcy5hZGQocG9zc2libGVUeXBlKTtcbiAgICB1c2FnZUNvdW50W3Bvc3NpYmxlVHlwZS5uYW1lXSA9IDE7XG5cbiAgICBmb3IgKHZhciBfaTQgPSAwLCBfcG9zc2libGVUeXBlJGdldEludGUyID0gcG9zc2libGVUeXBlLmdldEludGVyZmFjZXMoKTsgX2k0IDwgX3Bvc3NpYmxlVHlwZSRnZXRJbnRlMi5sZW5ndGg7IF9pNCsrKSB7XG4gICAgICB2YXIgX3VzYWdlQ291bnQkcG9zc2libGVJO1xuXG4gICAgICB2YXIgcG9zc2libGVJbnRlcmZhY2UgPSBfcG9zc2libGVUeXBlJGdldEludGUyW19pNF07XG5cbiAgICAgIGlmICghcG9zc2libGVJbnRlcmZhY2UuZ2V0RmllbGRzKClbZmllbGROYW1lXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH0gLy8gVGhpcyBpbnRlcmZhY2UgdHlwZSBkZWZpbmVzIHRoaXMgZmllbGQuXG5cblxuICAgICAgc3VnZ2VzdGVkVHlwZXMuYWRkKHBvc3NpYmxlSW50ZXJmYWNlKTtcbiAgICAgIHVzYWdlQ291bnRbcG9zc2libGVJbnRlcmZhY2UubmFtZV0gPSAoKF91c2FnZUNvdW50JHBvc3NpYmxlSSA9IHVzYWdlQ291bnRbcG9zc2libGVJbnRlcmZhY2UubmFtZV0pICE9PSBudWxsICYmIF91c2FnZUNvdW50JHBvc3NpYmxlSSAhPT0gdm9pZCAwID8gX3VzYWdlQ291bnQkcG9zc2libGVJIDogMCkgKyAxO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhcnJheUZyb20oc3VnZ2VzdGVkVHlwZXMpLnNvcnQoZnVuY3Rpb24gKHR5cGVBLCB0eXBlQikge1xuICAgIC8vIFN1Z2dlc3QgYm90aCBpbnRlcmZhY2UgYW5kIG9iamVjdCB0eXBlcyBiYXNlZCBvbiBob3cgY29tbW9uIHRoZXkgYXJlLlxuICAgIHZhciB1c2FnZUNvdW50RGlmZiA9IHVzYWdlQ291bnRbdHlwZUIubmFtZV0gLSB1c2FnZUNvdW50W3R5cGVBLm5hbWVdO1xuXG4gICAgaWYgKHVzYWdlQ291bnREaWZmICE9PSAwKSB7XG4gICAgICByZXR1cm4gdXNhZ2VDb3VudERpZmY7XG4gICAgfSAvLyBTdWdnZXN0IHN1cGVyIHR5cGVzIGZpcnN0IGZvbGxvd2VkIGJ5IHN1YnR5cGVzXG5cblxuICAgIGlmIChpc0ludGVyZmFjZVR5cGUodHlwZUEpICYmIHNjaGVtYS5pc1N1YlR5cGUodHlwZUEsIHR5cGVCKSkge1xuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIGlmIChpc0ludGVyZmFjZVR5cGUodHlwZUIpICYmIHNjaGVtYS5pc1N1YlR5cGUodHlwZUIsIHR5cGVBKSkge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5hdHVyYWxDb21wYXJlKHR5cGVBLm5hbWUsIHR5cGVCLm5hbWUpO1xuICB9KS5tYXAoZnVuY3Rpb24gKHgpIHtcbiAgICByZXR1cm4geC5uYW1lO1xuICB9KTtcbn1cbi8qKlxuICogRm9yIHRoZSBmaWVsZCBuYW1lIHByb3ZpZGVkLCBkZXRlcm1pbmUgaWYgdGhlcmUgYXJlIGFueSBzaW1pbGFyIGZpZWxkIG5hbWVzXG4gKiB0aGF0IG1heSBiZSB0aGUgcmVzdWx0IG9mIGEgdHlwby5cbiAqL1xuXG5cbmZ1bmN0aW9uIGdldFN1Z2dlc3RlZEZpZWxkTmFtZXModHlwZSwgZmllbGROYW1lKSB7XG4gIGlmIChpc09iamVjdFR5cGUodHlwZSkgfHwgaXNJbnRlcmZhY2VUeXBlKHR5cGUpKSB7XG4gICAgdmFyIHBvc3NpYmxlRmllbGROYW1lcyA9IE9iamVjdC5rZXlzKHR5cGUuZ2V0RmllbGRzKCkpO1xuICAgIHJldHVybiBzdWdnZXN0aW9uTGlzdChmaWVsZE5hbWUsIHBvc3NpYmxlRmllbGROYW1lcyk7XG4gIH0gLy8gT3RoZXJ3aXNlLCBtdXN0IGJlIGEgVW5pb24gdHlwZSwgd2hpY2ggZG9lcyBub3QgZGVmaW5lIGZpZWxkcy5cblxuXG4gIHJldHVybiBbXTtcbn1cbiIsImltcG9ydCB7IEdyYXBoUUxFcnJvciB9IGZyb20gXCIuLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IubWpzXCI7XG5pbXBvcnQgeyBwcmludCB9IGZyb20gXCIuLi8uLi9sYW5ndWFnZS9wcmludGVyLm1qc1wiO1xuaW1wb3J0IHsgaXNDb21wb3NpdGVUeXBlIH0gZnJvbSBcIi4uLy4uL3R5cGUvZGVmaW5pdGlvbi5tanNcIjtcbmltcG9ydCB7IHR5cGVGcm9tQVNUIH0gZnJvbSBcIi4uLy4uL3V0aWxpdGllcy90eXBlRnJvbUFTVC5tanNcIjtcblxuLyoqXG4gKiBGcmFnbWVudHMgb24gY29tcG9zaXRlIHR5cGVcbiAqXG4gKiBGcmFnbWVudHMgdXNlIGEgdHlwZSBjb25kaXRpb24gdG8gZGV0ZXJtaW5lIGlmIHRoZXkgYXBwbHksIHNpbmNlIGZyYWdtZW50c1xuICogY2FuIG9ubHkgYmUgc3ByZWFkIGludG8gYSBjb21wb3NpdGUgdHlwZSAob2JqZWN0LCBpbnRlcmZhY2UsIG9yIHVuaW9uKSwgdGhlXG4gKiB0eXBlIGNvbmRpdGlvbiBtdXN0IGFsc28gYmUgYSBjb21wb3NpdGUgdHlwZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIEZyYWdtZW50c09uQ29tcG9zaXRlVHlwZXNSdWxlKGNvbnRleHQpIHtcbiAgcmV0dXJuIHtcbiAgICBJbmxpbmVGcmFnbWVudDogZnVuY3Rpb24gSW5saW5lRnJhZ21lbnQobm9kZSkge1xuICAgICAgdmFyIHR5cGVDb25kaXRpb24gPSBub2RlLnR5cGVDb25kaXRpb247XG5cbiAgICAgIGlmICh0eXBlQ29uZGl0aW9uKSB7XG4gICAgICAgIHZhciB0eXBlID0gdHlwZUZyb21BU1QoY29udGV4dC5nZXRTY2hlbWEoKSwgdHlwZUNvbmRpdGlvbik7XG5cbiAgICAgICAgaWYgKHR5cGUgJiYgIWlzQ29tcG9zaXRlVHlwZSh0eXBlKSkge1xuICAgICAgICAgIHZhciB0eXBlU3RyID0gcHJpbnQodHlwZUNvbmRpdGlvbik7XG4gICAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihuZXcgR3JhcGhRTEVycm9yKFwiRnJhZ21lbnQgY2Fubm90IGNvbmRpdGlvbiBvbiBub24gY29tcG9zaXRlIHR5cGUgXFxcIlwiLmNvbmNhdCh0eXBlU3RyLCBcIlxcXCIuXCIpLCB0eXBlQ29uZGl0aW9uKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIEZyYWdtZW50RGVmaW5pdGlvbjogZnVuY3Rpb24gRnJhZ21lbnREZWZpbml0aW9uKG5vZGUpIHtcbiAgICAgIHZhciB0eXBlID0gdHlwZUZyb21BU1QoY29udGV4dC5nZXRTY2hlbWEoKSwgbm9kZS50eXBlQ29uZGl0aW9uKTtcblxuICAgICAgaWYgKHR5cGUgJiYgIWlzQ29tcG9zaXRlVHlwZSh0eXBlKSkge1xuICAgICAgICB2YXIgdHlwZVN0ciA9IHByaW50KG5vZGUudHlwZUNvbmRpdGlvbik7XG4gICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IobmV3IEdyYXBoUUxFcnJvcihcIkZyYWdtZW50IFxcXCJcIi5jb25jYXQobm9kZS5uYW1lLnZhbHVlLCBcIlxcXCIgY2Fubm90IGNvbmRpdGlvbiBvbiBub24gY29tcG9zaXRlIHR5cGUgXFxcIlwiKS5jb25jYXQodHlwZVN0ciwgXCJcXFwiLlwiKSwgbm9kZS50eXBlQ29uZGl0aW9uKSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuIiwiZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pOyBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmltcG9ydCBkaWRZb3VNZWFuIGZyb20gXCIuLi8uLi9qc3V0aWxzL2RpZFlvdU1lYW4ubWpzXCI7XG5pbXBvcnQgc3VnZ2VzdGlvbkxpc3QgZnJvbSBcIi4uLy4uL2pzdXRpbHMvc3VnZ2VzdGlvbkxpc3QubWpzXCI7XG5pbXBvcnQgeyBHcmFwaFFMRXJyb3IgfSBmcm9tIFwiLi4vLi4vZXJyb3IvR3JhcGhRTEVycm9yLm1qc1wiO1xuaW1wb3J0IHsgS2luZCB9IGZyb20gXCIuLi8uLi9sYW5ndWFnZS9raW5kcy5tanNcIjtcbmltcG9ydCB7IHNwZWNpZmllZERpcmVjdGl2ZXMgfSBmcm9tIFwiLi4vLi4vdHlwZS9kaXJlY3RpdmVzLm1qc1wiO1xuXG4vKipcbiAqIEtub3duIGFyZ3VtZW50IG5hbWVzXG4gKlxuICogQSBHcmFwaFFMIGZpZWxkIGlzIG9ubHkgdmFsaWQgaWYgYWxsIHN1cHBsaWVkIGFyZ3VtZW50cyBhcmUgZGVmaW5lZCBieVxuICogdGhhdCBmaWVsZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIEtub3duQXJndW1lbnROYW1lc1J1bGUoY29udGV4dCkge1xuICByZXR1cm4gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBLbm93bkFyZ3VtZW50TmFtZXNPbkRpcmVjdGl2ZXNSdWxlKGNvbnRleHQpKSwge30sIHtcbiAgICBBcmd1bWVudDogZnVuY3Rpb24gQXJndW1lbnQoYXJnTm9kZSkge1xuICAgICAgdmFyIGFyZ0RlZiA9IGNvbnRleHQuZ2V0QXJndW1lbnQoKTtcbiAgICAgIHZhciBmaWVsZERlZiA9IGNvbnRleHQuZ2V0RmllbGREZWYoKTtcbiAgICAgIHZhciBwYXJlbnRUeXBlID0gY29udGV4dC5nZXRQYXJlbnRUeXBlKCk7XG5cbiAgICAgIGlmICghYXJnRGVmICYmIGZpZWxkRGVmICYmIHBhcmVudFR5cGUpIHtcbiAgICAgICAgdmFyIGFyZ05hbWUgPSBhcmdOb2RlLm5hbWUudmFsdWU7XG4gICAgICAgIHZhciBrbm93bkFyZ3NOYW1lcyA9IGZpZWxkRGVmLmFyZ3MubWFwKGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgICAgICByZXR1cm4gYXJnLm5hbWU7XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgc3VnZ2VzdGlvbnMgPSBzdWdnZXN0aW9uTGlzdChhcmdOYW1lLCBrbm93bkFyZ3NOYW1lcyk7XG4gICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IobmV3IEdyYXBoUUxFcnJvcihcIlVua25vd24gYXJndW1lbnQgXFxcIlwiLmNvbmNhdChhcmdOYW1lLCBcIlxcXCIgb24gZmllbGQgXFxcIlwiKS5jb25jYXQocGFyZW50VHlwZS5uYW1lLCBcIi5cIikuY29uY2F0KGZpZWxkRGVmLm5hbWUsIFwiXFxcIi5cIikgKyBkaWRZb3VNZWFuKHN1Z2dlc3Rpb25zKSwgYXJnTm9kZSkpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBLbm93bkFyZ3VtZW50TmFtZXNPbkRpcmVjdGl2ZXNSdWxlKGNvbnRleHQpIHtcbiAgdmFyIGRpcmVjdGl2ZUFyZ3MgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2YXIgc2NoZW1hID0gY29udGV4dC5nZXRTY2hlbWEoKTtcbiAgdmFyIGRlZmluZWREaXJlY3RpdmVzID0gc2NoZW1hID8gc2NoZW1hLmdldERpcmVjdGl2ZXMoKSA6IHNwZWNpZmllZERpcmVjdGl2ZXM7XG5cbiAgZm9yICh2YXIgX2kyID0gMDsgX2kyIDwgZGVmaW5lZERpcmVjdGl2ZXMubGVuZ3RoOyBfaTIrKykge1xuICAgIHZhciBkaXJlY3RpdmUgPSBkZWZpbmVkRGlyZWN0aXZlc1tfaTJdO1xuICAgIGRpcmVjdGl2ZUFyZ3NbZGlyZWN0aXZlLm5hbWVdID0gZGlyZWN0aXZlLmFyZ3MubWFwKGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgIHJldHVybiBhcmcubmFtZTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBhc3REZWZpbml0aW9ucyA9IGNvbnRleHQuZ2V0RG9jdW1lbnQoKS5kZWZpbml0aW9ucztcblxuICBmb3IgKHZhciBfaTQgPSAwOyBfaTQgPCBhc3REZWZpbml0aW9ucy5sZW5ndGg7IF9pNCsrKSB7XG4gICAgdmFyIGRlZiA9IGFzdERlZmluaXRpb25zW19pNF07XG5cbiAgICBpZiAoZGVmLmtpbmQgPT09IEtpbmQuRElSRUNUSVZFX0RFRklOSVRJT04pIHtcbiAgICAgIHZhciBfZGVmJGFyZ3VtZW50cztcblxuICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHQgKFNlZTogJ2h0dHBzOi8vZ2l0aHViLmNvbS9ncmFwaHFsL2dyYXBocWwtanMvaXNzdWVzLzIyMDMnKVxuICAgICAgdmFyIGFyZ3NOb2RlcyA9IChfZGVmJGFyZ3VtZW50cyA9IGRlZi5hcmd1bWVudHMpICE9PSBudWxsICYmIF9kZWYkYXJndW1lbnRzICE9PSB2b2lkIDAgPyBfZGVmJGFyZ3VtZW50cyA6IFtdO1xuICAgICAgZGlyZWN0aXZlQXJnc1tkZWYubmFtZS52YWx1ZV0gPSBhcmdzTm9kZXMubWFwKGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgICAgcmV0dXJuIGFyZy5uYW1lLnZhbHVlO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBEaXJlY3RpdmU6IGZ1bmN0aW9uIERpcmVjdGl2ZShkaXJlY3RpdmVOb2RlKSB7XG4gICAgICB2YXIgZGlyZWN0aXZlTmFtZSA9IGRpcmVjdGl2ZU5vZGUubmFtZS52YWx1ZTtcbiAgICAgIHZhciBrbm93bkFyZ3MgPSBkaXJlY3RpdmVBcmdzW2RpcmVjdGl2ZU5hbWVdO1xuXG4gICAgICBpZiAoZGlyZWN0aXZlTm9kZS5hcmd1bWVudHMgJiYga25vd25BcmdzKSB7XG4gICAgICAgIGZvciAodmFyIF9pNiA9IDAsIF9kaXJlY3RpdmVOb2RlJGFyZ3VtZTIgPSBkaXJlY3RpdmVOb2RlLmFyZ3VtZW50czsgX2k2IDwgX2RpcmVjdGl2ZU5vZGUkYXJndW1lMi5sZW5ndGg7IF9pNisrKSB7XG4gICAgICAgICAgdmFyIGFyZ05vZGUgPSBfZGlyZWN0aXZlTm9kZSRhcmd1bWUyW19pNl07XG4gICAgICAgICAgdmFyIGFyZ05hbWUgPSBhcmdOb2RlLm5hbWUudmFsdWU7XG5cbiAgICAgICAgICBpZiAoa25vd25BcmdzLmluZGV4T2YoYXJnTmFtZSkgPT09IC0xKSB7XG4gICAgICAgICAgICB2YXIgc3VnZ2VzdGlvbnMgPSBzdWdnZXN0aW9uTGlzdChhcmdOYW1lLCBrbm93bkFyZ3MpO1xuICAgICAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihuZXcgR3JhcGhRTEVycm9yKFwiVW5rbm93biBhcmd1bWVudCBcXFwiXCIuY29uY2F0KGFyZ05hbWUsIFwiXFxcIiBvbiBkaXJlY3RpdmUgXFxcIkBcIikuY29uY2F0KGRpcmVjdGl2ZU5hbWUsIFwiXFxcIi5cIikgKyBkaWRZb3VNZWFuKHN1Z2dlc3Rpb25zKSwgYXJnTm9kZSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9O1xufVxuIiwiaW1wb3J0IGluc3BlY3QgZnJvbSBcIi4uLy4uL2pzdXRpbHMvaW5zcGVjdC5tanNcIjtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcIi4uLy4uL2pzdXRpbHMvaW52YXJpYW50Lm1qc1wiO1xuaW1wb3J0IHsgR3JhcGhRTEVycm9yIH0gZnJvbSBcIi4uLy4uL2Vycm9yL0dyYXBoUUxFcnJvci5tanNcIjtcbmltcG9ydCB7IEtpbmQgfSBmcm9tIFwiLi4vLi4vbGFuZ3VhZ2Uva2luZHMubWpzXCI7XG5pbXBvcnQgeyBEaXJlY3RpdmVMb2NhdGlvbiB9IGZyb20gXCIuLi8uLi9sYW5ndWFnZS9kaXJlY3RpdmVMb2NhdGlvbi5tanNcIjtcbmltcG9ydCB7IHNwZWNpZmllZERpcmVjdGl2ZXMgfSBmcm9tIFwiLi4vLi4vdHlwZS9kaXJlY3RpdmVzLm1qc1wiO1xuXG4vKipcbiAqIEtub3duIGRpcmVjdGl2ZXNcbiAqXG4gKiBBIEdyYXBoUUwgZG9jdW1lbnQgaXMgb25seSB2YWxpZCBpZiBhbGwgYEBkaXJlY3RpdmVzYCBhcmUga25vd24gYnkgdGhlXG4gKiBzY2hlbWEgYW5kIGxlZ2FsbHkgcG9zaXRpb25lZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIEtub3duRGlyZWN0aXZlc1J1bGUoY29udGV4dCkge1xuICB2YXIgbG9jYXRpb25zTWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdmFyIHNjaGVtYSA9IGNvbnRleHQuZ2V0U2NoZW1hKCk7XG4gIHZhciBkZWZpbmVkRGlyZWN0aXZlcyA9IHNjaGVtYSA/IHNjaGVtYS5nZXREaXJlY3RpdmVzKCkgOiBzcGVjaWZpZWREaXJlY3RpdmVzO1xuXG4gIGZvciAodmFyIF9pMiA9IDA7IF9pMiA8IGRlZmluZWREaXJlY3RpdmVzLmxlbmd0aDsgX2kyKyspIHtcbiAgICB2YXIgZGlyZWN0aXZlID0gZGVmaW5lZERpcmVjdGl2ZXNbX2kyXTtcbiAgICBsb2NhdGlvbnNNYXBbZGlyZWN0aXZlLm5hbWVdID0gZGlyZWN0aXZlLmxvY2F0aW9ucztcbiAgfVxuXG4gIHZhciBhc3REZWZpbml0aW9ucyA9IGNvbnRleHQuZ2V0RG9jdW1lbnQoKS5kZWZpbml0aW9ucztcblxuICBmb3IgKHZhciBfaTQgPSAwOyBfaTQgPCBhc3REZWZpbml0aW9ucy5sZW5ndGg7IF9pNCsrKSB7XG4gICAgdmFyIGRlZiA9IGFzdERlZmluaXRpb25zW19pNF07XG5cbiAgICBpZiAoZGVmLmtpbmQgPT09IEtpbmQuRElSRUNUSVZFX0RFRklOSVRJT04pIHtcbiAgICAgIGxvY2F0aW9uc01hcFtkZWYubmFtZS52YWx1ZV0gPSBkZWYubG9jYXRpb25zLm1hcChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICByZXR1cm4gbmFtZS52YWx1ZTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgRGlyZWN0aXZlOiBmdW5jdGlvbiBEaXJlY3RpdmUobm9kZSwgX2tleSwgX3BhcmVudCwgX3BhdGgsIGFuY2VzdG9ycykge1xuICAgICAgdmFyIG5hbWUgPSBub2RlLm5hbWUudmFsdWU7XG4gICAgICB2YXIgbG9jYXRpb25zID0gbG9jYXRpb25zTWFwW25hbWVdO1xuXG4gICAgICBpZiAoIWxvY2F0aW9ucykge1xuICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKG5ldyBHcmFwaFFMRXJyb3IoXCJVbmtub3duIGRpcmVjdGl2ZSBcXFwiQFwiLmNvbmNhdChuYW1lLCBcIlxcXCIuXCIpLCBub2RlKSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGNhbmRpZGF0ZUxvY2F0aW9uID0gZ2V0RGlyZWN0aXZlTG9jYXRpb25Gb3JBU1RQYXRoKGFuY2VzdG9ycyk7XG5cbiAgICAgIGlmIChjYW5kaWRhdGVMb2NhdGlvbiAmJiBsb2NhdGlvbnMuaW5kZXhPZihjYW5kaWRhdGVMb2NhdGlvbikgPT09IC0xKSB7XG4gICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IobmV3IEdyYXBoUUxFcnJvcihcIkRpcmVjdGl2ZSBcXFwiQFwiLmNvbmNhdChuYW1lLCBcIlxcXCIgbWF5IG5vdCBiZSB1c2VkIG9uIFwiKS5jb25jYXQoY2FuZGlkYXRlTG9jYXRpb24sIFwiLlwiKSwgbm9kZSkpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0RGlyZWN0aXZlTG9jYXRpb25Gb3JBU1RQYXRoKGFuY2VzdG9ycykge1xuICB2YXIgYXBwbGllZFRvID0gYW5jZXN0b3JzW2FuY2VzdG9ycy5sZW5ndGggLSAxXTtcbiAgIUFycmF5LmlzQXJyYXkoYXBwbGllZFRvKSB8fCBpbnZhcmlhbnQoMCk7XG5cbiAgc3dpdGNoIChhcHBsaWVkVG8ua2luZCkge1xuICAgIGNhc2UgS2luZC5PUEVSQVRJT05fREVGSU5JVElPTjpcbiAgICAgIHJldHVybiBnZXREaXJlY3RpdmVMb2NhdGlvbkZvck9wZXJhdGlvbihhcHBsaWVkVG8ub3BlcmF0aW9uKTtcblxuICAgIGNhc2UgS2luZC5GSUVMRDpcbiAgICAgIHJldHVybiBEaXJlY3RpdmVMb2NhdGlvbi5GSUVMRDtcblxuICAgIGNhc2UgS2luZC5GUkFHTUVOVF9TUFJFQUQ6XG4gICAgICByZXR1cm4gRGlyZWN0aXZlTG9jYXRpb24uRlJBR01FTlRfU1BSRUFEO1xuXG4gICAgY2FzZSBLaW5kLklOTElORV9GUkFHTUVOVDpcbiAgICAgIHJldHVybiBEaXJlY3RpdmVMb2NhdGlvbi5JTkxJTkVfRlJBR01FTlQ7XG5cbiAgICBjYXNlIEtpbmQuRlJBR01FTlRfREVGSU5JVElPTjpcbiAgICAgIHJldHVybiBEaXJlY3RpdmVMb2NhdGlvbi5GUkFHTUVOVF9ERUZJTklUSU9OO1xuXG4gICAgY2FzZSBLaW5kLlZBUklBQkxFX0RFRklOSVRJT046XG4gICAgICByZXR1cm4gRGlyZWN0aXZlTG9jYXRpb24uVkFSSUFCTEVfREVGSU5JVElPTjtcblxuICAgIGNhc2UgS2luZC5TQ0hFTUFfREVGSU5JVElPTjpcbiAgICBjYXNlIEtpbmQuU0NIRU1BX0VYVEVOU0lPTjpcbiAgICAgIHJldHVybiBEaXJlY3RpdmVMb2NhdGlvbi5TQ0hFTUE7XG5cbiAgICBjYXNlIEtpbmQuU0NBTEFSX1RZUEVfREVGSU5JVElPTjpcbiAgICBjYXNlIEtpbmQuU0NBTEFSX1RZUEVfRVhURU5TSU9OOlxuICAgICAgcmV0dXJuIERpcmVjdGl2ZUxvY2F0aW9uLlNDQUxBUjtcblxuICAgIGNhc2UgS2luZC5PQkpFQ1RfVFlQRV9ERUZJTklUSU9OOlxuICAgIGNhc2UgS2luZC5PQkpFQ1RfVFlQRV9FWFRFTlNJT046XG4gICAgICByZXR1cm4gRGlyZWN0aXZlTG9jYXRpb24uT0JKRUNUO1xuXG4gICAgY2FzZSBLaW5kLkZJRUxEX0RFRklOSVRJT046XG4gICAgICByZXR1cm4gRGlyZWN0aXZlTG9jYXRpb24uRklFTERfREVGSU5JVElPTjtcblxuICAgIGNhc2UgS2luZC5JTlRFUkZBQ0VfVFlQRV9ERUZJTklUSU9OOlxuICAgIGNhc2UgS2luZC5JTlRFUkZBQ0VfVFlQRV9FWFRFTlNJT046XG4gICAgICByZXR1cm4gRGlyZWN0aXZlTG9jYXRpb24uSU5URVJGQUNFO1xuXG4gICAgY2FzZSBLaW5kLlVOSU9OX1RZUEVfREVGSU5JVElPTjpcbiAgICBjYXNlIEtpbmQuVU5JT05fVFlQRV9FWFRFTlNJT046XG4gICAgICByZXR1cm4gRGlyZWN0aXZlTG9jYXRpb24uVU5JT047XG5cbiAgICBjYXNlIEtpbmQuRU5VTV9UWVBFX0RFRklOSVRJT046XG4gICAgY2FzZSBLaW5kLkVOVU1fVFlQRV9FWFRFTlNJT046XG4gICAgICByZXR1cm4gRGlyZWN0aXZlTG9jYXRpb24uRU5VTTtcblxuICAgIGNhc2UgS2luZC5FTlVNX1ZBTFVFX0RFRklOSVRJT046XG4gICAgICByZXR1cm4gRGlyZWN0aXZlTG9jYXRpb24uRU5VTV9WQUxVRTtcblxuICAgIGNhc2UgS2luZC5JTlBVVF9PQkpFQ1RfVFlQRV9ERUZJTklUSU9OOlxuICAgIGNhc2UgS2luZC5JTlBVVF9PQkpFQ1RfVFlQRV9FWFRFTlNJT046XG4gICAgICByZXR1cm4gRGlyZWN0aXZlTG9jYXRpb24uSU5QVVRfT0JKRUNUO1xuXG4gICAgY2FzZSBLaW5kLklOUFVUX1ZBTFVFX0RFRklOSVRJT046XG4gICAgICB7XG4gICAgICAgIHZhciBwYXJlbnROb2RlID0gYW5jZXN0b3JzW2FuY2VzdG9ycy5sZW5ndGggLSAzXTtcbiAgICAgICAgcmV0dXJuIHBhcmVudE5vZGUua2luZCA9PT0gS2luZC5JTlBVVF9PQkpFQ1RfVFlQRV9ERUZJTklUSU9OID8gRGlyZWN0aXZlTG9jYXRpb24uSU5QVVRfRklFTERfREVGSU5JVElPTiA6IERpcmVjdGl2ZUxvY2F0aW9uLkFSR1VNRU5UX0RFRklOSVRJT047XG4gICAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RGlyZWN0aXZlTG9jYXRpb25Gb3JPcGVyYXRpb24ob3BlcmF0aW9uKSB7XG4gIHN3aXRjaCAob3BlcmF0aW9uKSB7XG4gICAgY2FzZSAncXVlcnknOlxuICAgICAgcmV0dXJuIERpcmVjdGl2ZUxvY2F0aW9uLlFVRVJZO1xuXG4gICAgY2FzZSAnbXV0YXRpb24nOlxuICAgICAgcmV0dXJuIERpcmVjdGl2ZUxvY2F0aW9uLk1VVEFUSU9OO1xuXG4gICAgY2FzZSAnc3Vic2NyaXB0aW9uJzpcbiAgICAgIHJldHVybiBEaXJlY3RpdmVMb2NhdGlvbi5TVUJTQ1JJUFRJT047XG4gIH0gLy8gaXN0YW5idWwgaWdub3JlIG5leHQgKE5vdCByZWFjaGFibGUuIEFsbCBwb3NzaWJsZSB0eXBlcyBoYXZlIGJlZW4gY29uc2lkZXJlZClcblxuXG4gIGZhbHNlIHx8IGludmFyaWFudCgwLCAnVW5leHBlY3RlZCBvcGVyYXRpb246ICcgKyBpbnNwZWN0KG9wZXJhdGlvbikpO1xufVxuIiwiaW1wb3J0IHsgR3JhcGhRTEVycm9yIH0gZnJvbSBcIi4uLy4uL2Vycm9yL0dyYXBoUUxFcnJvci5tanNcIjtcblxuLyoqXG4gKiBLbm93biBmcmFnbWVudCBuYW1lc1xuICpcbiAqIEEgR3JhcGhRTCBkb2N1bWVudCBpcyBvbmx5IHZhbGlkIGlmIGFsbCBgLi4uRnJhZ21lbnRgIGZyYWdtZW50IHNwcmVhZHMgcmVmZXJcbiAqIHRvIGZyYWdtZW50cyBkZWZpbmVkIGluIHRoZSBzYW1lIGRvY3VtZW50LlxuICovXG5leHBvcnQgZnVuY3Rpb24gS25vd25GcmFnbWVudE5hbWVzUnVsZShjb250ZXh0KSB7XG4gIHJldHVybiB7XG4gICAgRnJhZ21lbnRTcHJlYWQ6IGZ1bmN0aW9uIEZyYWdtZW50U3ByZWFkKG5vZGUpIHtcbiAgICAgIHZhciBmcmFnbWVudE5hbWUgPSBub2RlLm5hbWUudmFsdWU7XG4gICAgICB2YXIgZnJhZ21lbnQgPSBjb250ZXh0LmdldEZyYWdtZW50KGZyYWdtZW50TmFtZSk7XG5cbiAgICAgIGlmICghZnJhZ21lbnQpIHtcbiAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihuZXcgR3JhcGhRTEVycm9yKFwiVW5rbm93biBmcmFnbWVudCBcXFwiXCIuY29uY2F0KGZyYWdtZW50TmFtZSwgXCJcXFwiLlwiKSwgbm9kZS5uYW1lKSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuIiwiaW1wb3J0IGRpZFlvdU1lYW4gZnJvbSBcIi4uLy4uL2pzdXRpbHMvZGlkWW91TWVhbi5tanNcIjtcbmltcG9ydCBzdWdnZXN0aW9uTGlzdCBmcm9tIFwiLi4vLi4vanN1dGlscy9zdWdnZXN0aW9uTGlzdC5tanNcIjtcbmltcG9ydCB7IEdyYXBoUUxFcnJvciB9IGZyb20gXCIuLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IubWpzXCI7XG5pbXBvcnQgeyBpc1R5cGVEZWZpbml0aW9uTm9kZSwgaXNUeXBlU3lzdGVtRGVmaW5pdGlvbk5vZGUsIGlzVHlwZVN5c3RlbUV4dGVuc2lvbk5vZGUgfSBmcm9tIFwiLi4vLi4vbGFuZ3VhZ2UvcHJlZGljYXRlcy5tanNcIjtcbmltcG9ydCB7IHNwZWNpZmllZFNjYWxhclR5cGVzIH0gZnJvbSBcIi4uLy4uL3R5cGUvc2NhbGFycy5tanNcIjtcbmltcG9ydCB7IGludHJvc3BlY3Rpb25UeXBlcyB9IGZyb20gXCIuLi8uLi90eXBlL2ludHJvc3BlY3Rpb24ubWpzXCI7XG5cbi8qKlxuICogS25vd24gdHlwZSBuYW1lc1xuICpcbiAqIEEgR3JhcGhRTCBkb2N1bWVudCBpcyBvbmx5IHZhbGlkIGlmIHJlZmVyZW5jZWQgdHlwZXMgKHNwZWNpZmljYWxseVxuICogdmFyaWFibGUgZGVmaW5pdGlvbnMgYW5kIGZyYWdtZW50IGNvbmRpdGlvbnMpIGFyZSBkZWZpbmVkIGJ5IHRoZSB0eXBlIHNjaGVtYS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIEtub3duVHlwZU5hbWVzUnVsZShjb250ZXh0KSB7XG4gIHZhciBzY2hlbWEgPSBjb250ZXh0LmdldFNjaGVtYSgpO1xuICB2YXIgZXhpc3RpbmdUeXBlc01hcCA9IHNjaGVtYSA/IHNjaGVtYS5nZXRUeXBlTWFwKCkgOiBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2YXIgZGVmaW5lZFR5cGVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICBmb3IgKHZhciBfaTIgPSAwLCBfY29udGV4dCRnZXREb2N1bWVudCQyID0gY29udGV4dC5nZXREb2N1bWVudCgpLmRlZmluaXRpb25zOyBfaTIgPCBfY29udGV4dCRnZXREb2N1bWVudCQyLmxlbmd0aDsgX2kyKyspIHtcbiAgICB2YXIgZGVmID0gX2NvbnRleHQkZ2V0RG9jdW1lbnQkMltfaTJdO1xuXG4gICAgaWYgKGlzVHlwZURlZmluaXRpb25Ob2RlKGRlZikpIHtcbiAgICAgIGRlZmluZWRUeXBlc1tkZWYubmFtZS52YWx1ZV0gPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHZhciB0eXBlTmFtZXMgPSBPYmplY3Qua2V5cyhleGlzdGluZ1R5cGVzTWFwKS5jb25jYXQoT2JqZWN0LmtleXMoZGVmaW5lZFR5cGVzKSk7XG4gIHJldHVybiB7XG4gICAgTmFtZWRUeXBlOiBmdW5jdGlvbiBOYW1lZFR5cGUobm9kZSwgXzEsIHBhcmVudCwgXzIsIGFuY2VzdG9ycykge1xuICAgICAgdmFyIHR5cGVOYW1lID0gbm9kZS5uYW1lLnZhbHVlO1xuXG4gICAgICBpZiAoIWV4aXN0aW5nVHlwZXNNYXBbdHlwZU5hbWVdICYmICFkZWZpbmVkVHlwZXNbdHlwZU5hbWVdKSB7XG4gICAgICAgIHZhciBfYW5jZXN0b3JzJDtcblxuICAgICAgICB2YXIgZGVmaW5pdGlvbk5vZGUgPSAoX2FuY2VzdG9ycyQgPSBhbmNlc3RvcnNbMl0pICE9PSBudWxsICYmIF9hbmNlc3RvcnMkICE9PSB2b2lkIDAgPyBfYW5jZXN0b3JzJCA6IHBhcmVudDtcbiAgICAgICAgdmFyIGlzU0RMID0gZGVmaW5pdGlvbk5vZGUgIT0gbnVsbCAmJiBpc1NETE5vZGUoZGVmaW5pdGlvbk5vZGUpO1xuXG4gICAgICAgIGlmIChpc1NETCAmJiBpc1N0YW5kYXJkVHlwZU5hbWUodHlwZU5hbWUpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHN1Z2dlc3RlZFR5cGVzID0gc3VnZ2VzdGlvbkxpc3QodHlwZU5hbWUsIGlzU0RMID8gc3RhbmRhcmRUeXBlTmFtZXMuY29uY2F0KHR5cGVOYW1lcykgOiB0eXBlTmFtZXMpO1xuICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKG5ldyBHcmFwaFFMRXJyb3IoXCJVbmtub3duIHR5cGUgXFxcIlwiLmNvbmNhdCh0eXBlTmFtZSwgXCJcXFwiLlwiKSArIGRpZFlvdU1lYW4oc3VnZ2VzdGVkVHlwZXMpLCBub2RlKSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxudmFyIHN0YW5kYXJkVHlwZU5hbWVzID0gW10uY29uY2F0KHNwZWNpZmllZFNjYWxhclR5cGVzLCBpbnRyb3NwZWN0aW9uVHlwZXMpLm1hcChmdW5jdGlvbiAodHlwZSkge1xuICByZXR1cm4gdHlwZS5uYW1lO1xufSk7XG5cbmZ1bmN0aW9uIGlzU3RhbmRhcmRUeXBlTmFtZSh0eXBlTmFtZSkge1xuICByZXR1cm4gc3RhbmRhcmRUeXBlTmFtZXMuaW5kZXhPZih0eXBlTmFtZSkgIT09IC0xO1xufVxuXG5mdW5jdGlvbiBpc1NETE5vZGUodmFsdWUpIHtcbiAgcmV0dXJuICFBcnJheS5pc0FycmF5KHZhbHVlKSAmJiAoaXNUeXBlU3lzdGVtRGVmaW5pdGlvbk5vZGUodmFsdWUpIHx8IGlzVHlwZVN5c3RlbUV4dGVuc2lvbk5vZGUodmFsdWUpKTtcbn1cbiIsImltcG9ydCB7IEdyYXBoUUxFcnJvciB9IGZyb20gXCIuLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IubWpzXCI7XG5pbXBvcnQgeyBLaW5kIH0gZnJvbSBcIi4uLy4uL2xhbmd1YWdlL2tpbmRzLm1qc1wiO1xuXG4vKipcbiAqIExvbmUgYW5vbnltb3VzIG9wZXJhdGlvblxuICpcbiAqIEEgR3JhcGhRTCBkb2N1bWVudCBpcyBvbmx5IHZhbGlkIGlmIHdoZW4gaXQgY29udGFpbnMgYW4gYW5vbnltb3VzIG9wZXJhdGlvblxuICogKHRoZSBxdWVyeSBzaG9ydC1oYW5kKSB0aGF0IGl0IGNvbnRhaW5zIG9ubHkgdGhhdCBvbmUgb3BlcmF0aW9uIGRlZmluaXRpb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBMb25lQW5vbnltb3VzT3BlcmF0aW9uUnVsZShjb250ZXh0KSB7XG4gIHZhciBvcGVyYXRpb25Db3VudCA9IDA7XG4gIHJldHVybiB7XG4gICAgRG9jdW1lbnQ6IGZ1bmN0aW9uIERvY3VtZW50KG5vZGUpIHtcbiAgICAgIG9wZXJhdGlvbkNvdW50ID0gbm9kZS5kZWZpbml0aW9ucy5maWx0ZXIoZnVuY3Rpb24gKGRlZmluaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIGRlZmluaXRpb24ua2luZCA9PT0gS2luZC5PUEVSQVRJT05fREVGSU5JVElPTjtcbiAgICAgIH0pLmxlbmd0aDtcbiAgICB9LFxuICAgIE9wZXJhdGlvbkRlZmluaXRpb246IGZ1bmN0aW9uIE9wZXJhdGlvbkRlZmluaXRpb24obm9kZSkge1xuICAgICAgaWYgKCFub2RlLm5hbWUgJiYgb3BlcmF0aW9uQ291bnQgPiAxKSB7XG4gICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IobmV3IEdyYXBoUUxFcnJvcignVGhpcyBhbm9ueW1vdXMgb3BlcmF0aW9uIG11c3QgYmUgdGhlIG9ubHkgZGVmaW5lZCBvcGVyYXRpb24uJywgbm9kZSkpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cbiIsImltcG9ydCB7IEdyYXBoUUxFcnJvciB9IGZyb20gXCIuLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IubWpzXCI7XG5cbi8qKlxuICogTG9uZSBTY2hlbWEgZGVmaW5pdGlvblxuICpcbiAqIEEgR3JhcGhRTCBkb2N1bWVudCBpcyBvbmx5IHZhbGlkIGlmIGl0IGNvbnRhaW5zIG9ubHkgb25lIHNjaGVtYSBkZWZpbml0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gTG9uZVNjaGVtYURlZmluaXRpb25SdWxlKGNvbnRleHQpIHtcbiAgdmFyIF9yZWYsIF9yZWYyLCBfb2xkU2NoZW1hJGFzdE5vZGU7XG5cbiAgdmFyIG9sZFNjaGVtYSA9IGNvbnRleHQuZ2V0U2NoZW1hKCk7XG4gIHZhciBhbHJlYWR5RGVmaW5lZCA9IChfcmVmID0gKF9yZWYyID0gKF9vbGRTY2hlbWEkYXN0Tm9kZSA9IG9sZFNjaGVtYSA9PT0gbnVsbCB8fCBvbGRTY2hlbWEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9sZFNjaGVtYS5hc3ROb2RlKSAhPT0gbnVsbCAmJiBfb2xkU2NoZW1hJGFzdE5vZGUgIT09IHZvaWQgMCA/IF9vbGRTY2hlbWEkYXN0Tm9kZSA6IG9sZFNjaGVtYSA9PT0gbnVsbCB8fCBvbGRTY2hlbWEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9sZFNjaGVtYS5nZXRRdWVyeVR5cGUoKSkgIT09IG51bGwgJiYgX3JlZjIgIT09IHZvaWQgMCA/IF9yZWYyIDogb2xkU2NoZW1hID09PSBudWxsIHx8IG9sZFNjaGVtYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogb2xkU2NoZW1hLmdldE11dGF0aW9uVHlwZSgpKSAhPT0gbnVsbCAmJiBfcmVmICE9PSB2b2lkIDAgPyBfcmVmIDogb2xkU2NoZW1hID09PSBudWxsIHx8IG9sZFNjaGVtYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogb2xkU2NoZW1hLmdldFN1YnNjcmlwdGlvblR5cGUoKTtcbiAgdmFyIHNjaGVtYURlZmluaXRpb25zQ291bnQgPSAwO1xuICByZXR1cm4ge1xuICAgIFNjaGVtYURlZmluaXRpb246IGZ1bmN0aW9uIFNjaGVtYURlZmluaXRpb24obm9kZSkge1xuICAgICAgaWYgKGFscmVhZHlEZWZpbmVkKSB7XG4gICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IobmV3IEdyYXBoUUxFcnJvcignQ2Fubm90IGRlZmluZSBhIG5ldyBzY2hlbWEgd2l0aGluIGEgc2NoZW1hIGV4dGVuc2lvbi4nLCBub2RlKSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHNjaGVtYURlZmluaXRpb25zQ291bnQgPiAwKSB7XG4gICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IobmV3IEdyYXBoUUxFcnJvcignTXVzdCBwcm92aWRlIG9ubHkgb25lIHNjaGVtYSBkZWZpbml0aW9uLicsIG5vZGUpKTtcbiAgICAgIH1cblxuICAgICAgKytzY2hlbWFEZWZpbml0aW9uc0NvdW50O1xuICAgIH1cbiAgfTtcbn1cbiIsImltcG9ydCB7IEdyYXBoUUxFcnJvciB9IGZyb20gXCIuLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IubWpzXCI7XG5leHBvcnQgZnVuY3Rpb24gTm9GcmFnbWVudEN5Y2xlc1J1bGUoY29udGV4dCkge1xuICAvLyBUcmFja3MgYWxyZWFkeSB2aXNpdGVkIGZyYWdtZW50cyB0byBtYWludGFpbiBPKE4pIGFuZCB0byBlbnN1cmUgdGhhdCBjeWNsZXNcbiAgLy8gYXJlIG5vdCByZWR1bmRhbnRseSByZXBvcnRlZC5cbiAgdmFyIHZpc2l0ZWRGcmFncyA9IE9iamVjdC5jcmVhdGUobnVsbCk7IC8vIEFycmF5IG9mIEFTVCBub2RlcyB1c2VkIHRvIHByb2R1Y2UgbWVhbmluZ2Z1bCBlcnJvcnNcblxuICB2YXIgc3ByZWFkUGF0aCA9IFtdOyAvLyBQb3NpdGlvbiBpbiB0aGUgc3ByZWFkIHBhdGhcblxuICB2YXIgc3ByZWFkUGF0aEluZGV4QnlOYW1lID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgcmV0dXJuIHtcbiAgICBPcGVyYXRpb25EZWZpbml0aW9uOiBmdW5jdGlvbiBPcGVyYXRpb25EZWZpbml0aW9uKCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG4gICAgRnJhZ21lbnREZWZpbml0aW9uOiBmdW5jdGlvbiBGcmFnbWVudERlZmluaXRpb24obm9kZSkge1xuICAgICAgZGV0ZWN0Q3ljbGVSZWN1cnNpdmUobm9kZSk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9OyAvLyBUaGlzIGRvZXMgYSBzdHJhaWdodC1mb3J3YXJkIERGUyB0byBmaW5kIGN5Y2xlcy5cbiAgLy8gSXQgZG9lcyBub3QgdGVybWluYXRlIHdoZW4gYSBjeWNsZSB3YXMgZm91bmQgYnV0IGNvbnRpbnVlcyB0byBleHBsb3JlXG4gIC8vIHRoZSBncmFwaCB0byBmaW5kIGFsbCBwb3NzaWJsZSBjeWNsZXMuXG5cbiAgZnVuY3Rpb24gZGV0ZWN0Q3ljbGVSZWN1cnNpdmUoZnJhZ21lbnQpIHtcbiAgICBpZiAodmlzaXRlZEZyYWdzW2ZyYWdtZW50Lm5hbWUudmFsdWVdKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGZyYWdtZW50TmFtZSA9IGZyYWdtZW50Lm5hbWUudmFsdWU7XG4gICAgdmlzaXRlZEZyYWdzW2ZyYWdtZW50TmFtZV0gPSB0cnVlO1xuICAgIHZhciBzcHJlYWROb2RlcyA9IGNvbnRleHQuZ2V0RnJhZ21lbnRTcHJlYWRzKGZyYWdtZW50LnNlbGVjdGlvblNldCk7XG5cbiAgICBpZiAoc3ByZWFkTm9kZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc3ByZWFkUGF0aEluZGV4QnlOYW1lW2ZyYWdtZW50TmFtZV0gPSBzcHJlYWRQYXRoLmxlbmd0aDtcblxuICAgIGZvciAodmFyIF9pMiA9IDA7IF9pMiA8IHNwcmVhZE5vZGVzLmxlbmd0aDsgX2kyKyspIHtcbiAgICAgIHZhciBzcHJlYWROb2RlID0gc3ByZWFkTm9kZXNbX2kyXTtcbiAgICAgIHZhciBzcHJlYWROYW1lID0gc3ByZWFkTm9kZS5uYW1lLnZhbHVlO1xuICAgICAgdmFyIGN5Y2xlSW5kZXggPSBzcHJlYWRQYXRoSW5kZXhCeU5hbWVbc3ByZWFkTmFtZV07XG4gICAgICBzcHJlYWRQYXRoLnB1c2goc3ByZWFkTm9kZSk7XG5cbiAgICAgIGlmIChjeWNsZUluZGV4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdmFyIHNwcmVhZEZyYWdtZW50ID0gY29udGV4dC5nZXRGcmFnbWVudChzcHJlYWROYW1lKTtcblxuICAgICAgICBpZiAoc3ByZWFkRnJhZ21lbnQpIHtcbiAgICAgICAgICBkZXRlY3RDeWNsZVJlY3Vyc2l2ZShzcHJlYWRGcmFnbWVudCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBjeWNsZVBhdGggPSBzcHJlYWRQYXRoLnNsaWNlKGN5Y2xlSW5kZXgpO1xuICAgICAgICB2YXIgdmlhUGF0aCA9IGN5Y2xlUGF0aC5zbGljZSgwLCAtMSkubWFwKGZ1bmN0aW9uIChzKSB7XG4gICAgICAgICAgcmV0dXJuICdcIicgKyBzLm5hbWUudmFsdWUgKyAnXCInO1xuICAgICAgICB9KS5qb2luKCcsICcpO1xuICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKG5ldyBHcmFwaFFMRXJyb3IoXCJDYW5ub3Qgc3ByZWFkIGZyYWdtZW50IFxcXCJcIi5jb25jYXQoc3ByZWFkTmFtZSwgXCJcXFwiIHdpdGhpbiBpdHNlbGZcIikgKyAodmlhUGF0aCAhPT0gJycgPyBcIiB2aWEgXCIuY29uY2F0KHZpYVBhdGgsIFwiLlwiKSA6ICcuJyksIGN5Y2xlUGF0aCkpO1xuICAgICAgfVxuXG4gICAgICBzcHJlYWRQYXRoLnBvcCgpO1xuICAgIH1cblxuICAgIHNwcmVhZFBhdGhJbmRleEJ5TmFtZVtmcmFnbWVudE5hbWVdID0gdW5kZWZpbmVkO1xuICB9XG59XG4iLCJpbXBvcnQgeyBHcmFwaFFMRXJyb3IgfSBmcm9tIFwiLi4vLi4vZXJyb3IvR3JhcGhRTEVycm9yLm1qc1wiO1xuXG4vKipcbiAqIE5vIHVuZGVmaW5lZCB2YXJpYWJsZXNcbiAqXG4gKiBBIEdyYXBoUUwgb3BlcmF0aW9uIGlzIG9ubHkgdmFsaWQgaWYgYWxsIHZhcmlhYmxlcyBlbmNvdW50ZXJlZCwgYm90aCBkaXJlY3RseVxuICogYW5kIHZpYSBmcmFnbWVudCBzcHJlYWRzLCBhcmUgZGVmaW5lZCBieSB0aGF0IG9wZXJhdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIE5vVW5kZWZpbmVkVmFyaWFibGVzUnVsZShjb250ZXh0KSB7XG4gIHZhciB2YXJpYWJsZU5hbWVEZWZpbmVkID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgcmV0dXJuIHtcbiAgICBPcGVyYXRpb25EZWZpbml0aW9uOiB7XG4gICAgICBlbnRlcjogZnVuY3Rpb24gZW50ZXIoKSB7XG4gICAgICAgIHZhcmlhYmxlTmFtZURlZmluZWQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgfSxcbiAgICAgIGxlYXZlOiBmdW5jdGlvbiBsZWF2ZShvcGVyYXRpb24pIHtcbiAgICAgICAgdmFyIHVzYWdlcyA9IGNvbnRleHQuZ2V0UmVjdXJzaXZlVmFyaWFibGVVc2FnZXMob3BlcmF0aW9uKTtcblxuICAgICAgICBmb3IgKHZhciBfaTIgPSAwOyBfaTIgPCB1c2FnZXMubGVuZ3RoOyBfaTIrKykge1xuICAgICAgICAgIHZhciBfcmVmMiA9IHVzYWdlc1tfaTJdO1xuICAgICAgICAgIHZhciBub2RlID0gX3JlZjIubm9kZTtcbiAgICAgICAgICB2YXIgdmFyTmFtZSA9IG5vZGUubmFtZS52YWx1ZTtcblxuICAgICAgICAgIGlmICh2YXJpYWJsZU5hbWVEZWZpbmVkW3Zhck5hbWVdICE9PSB0cnVlKSB7XG4gICAgICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKG5ldyBHcmFwaFFMRXJyb3Iob3BlcmF0aW9uLm5hbWUgPyBcIlZhcmlhYmxlIFxcXCIkXCIuY29uY2F0KHZhck5hbWUsIFwiXFxcIiBpcyBub3QgZGVmaW5lZCBieSBvcGVyYXRpb24gXFxcIlwiKS5jb25jYXQob3BlcmF0aW9uLm5hbWUudmFsdWUsIFwiXFxcIi5cIikgOiBcIlZhcmlhYmxlIFxcXCIkXCIuY29uY2F0KHZhck5hbWUsIFwiXFxcIiBpcyBub3QgZGVmaW5lZC5cIiksIFtub2RlLCBvcGVyYXRpb25dKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBWYXJpYWJsZURlZmluaXRpb246IGZ1bmN0aW9uIFZhcmlhYmxlRGVmaW5pdGlvbihub2RlKSB7XG4gICAgICB2YXJpYWJsZU5hbWVEZWZpbmVkW25vZGUudmFyaWFibGUubmFtZS52YWx1ZV0gPSB0cnVlO1xuICAgIH1cbiAgfTtcbn1cbiIsImltcG9ydCB7IEdyYXBoUUxFcnJvciB9IGZyb20gXCIuLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IubWpzXCI7XG5cbi8qKlxuICogTm8gdW51c2VkIGZyYWdtZW50c1xuICpcbiAqIEEgR3JhcGhRTCBkb2N1bWVudCBpcyBvbmx5IHZhbGlkIGlmIGFsbCBmcmFnbWVudCBkZWZpbml0aW9ucyBhcmUgc3ByZWFkXG4gKiB3aXRoaW4gb3BlcmF0aW9ucywgb3Igc3ByZWFkIHdpdGhpbiBvdGhlciBmcmFnbWVudHMgc3ByZWFkIHdpdGhpbiBvcGVyYXRpb25zLlxuICovXG5leHBvcnQgZnVuY3Rpb24gTm9VbnVzZWRGcmFnbWVudHNSdWxlKGNvbnRleHQpIHtcbiAgdmFyIG9wZXJhdGlvbkRlZnMgPSBbXTtcbiAgdmFyIGZyYWdtZW50RGVmcyA9IFtdO1xuICByZXR1cm4ge1xuICAgIE9wZXJhdGlvbkRlZmluaXRpb246IGZ1bmN0aW9uIE9wZXJhdGlvbkRlZmluaXRpb24obm9kZSkge1xuICAgICAgb3BlcmF0aW9uRGVmcy5wdXNoKG5vZGUpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG4gICAgRnJhZ21lbnREZWZpbml0aW9uOiBmdW5jdGlvbiBGcmFnbWVudERlZmluaXRpb24obm9kZSkge1xuICAgICAgZnJhZ21lbnREZWZzLnB1c2gobm9kZSk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcbiAgICBEb2N1bWVudDoge1xuICAgICAgbGVhdmU6IGZ1bmN0aW9uIGxlYXZlKCkge1xuICAgICAgICB2YXIgZnJhZ21lbnROYW1lVXNlZCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgICAgICAgZm9yICh2YXIgX2kyID0gMDsgX2kyIDwgb3BlcmF0aW9uRGVmcy5sZW5ndGg7IF9pMisrKSB7XG4gICAgICAgICAgdmFyIG9wZXJhdGlvbiA9IG9wZXJhdGlvbkRlZnNbX2kyXTtcblxuICAgICAgICAgIGZvciAodmFyIF9pNCA9IDAsIF9jb250ZXh0JGdldFJlY3Vyc2l2ZTIgPSBjb250ZXh0LmdldFJlY3Vyc2l2ZWx5UmVmZXJlbmNlZEZyYWdtZW50cyhvcGVyYXRpb24pOyBfaTQgPCBfY29udGV4dCRnZXRSZWN1cnNpdmUyLmxlbmd0aDsgX2k0KyspIHtcbiAgICAgICAgICAgIHZhciBmcmFnbWVudCA9IF9jb250ZXh0JGdldFJlY3Vyc2l2ZTJbX2k0XTtcbiAgICAgICAgICAgIGZyYWdtZW50TmFtZVVzZWRbZnJhZ21lbnQubmFtZS52YWx1ZV0gPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIF9pNiA9IDA7IF9pNiA8IGZyYWdtZW50RGVmcy5sZW5ndGg7IF9pNisrKSB7XG4gICAgICAgICAgdmFyIGZyYWdtZW50RGVmID0gZnJhZ21lbnREZWZzW19pNl07XG4gICAgICAgICAgdmFyIGZyYWdOYW1lID0gZnJhZ21lbnREZWYubmFtZS52YWx1ZTtcblxuICAgICAgICAgIGlmIChmcmFnbWVudE5hbWVVc2VkW2ZyYWdOYW1lXSAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihuZXcgR3JhcGhRTEVycm9yKFwiRnJhZ21lbnQgXFxcIlwiLmNvbmNhdChmcmFnTmFtZSwgXCJcXFwiIGlzIG5ldmVyIHVzZWQuXCIpLCBmcmFnbWVudERlZikpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cbiIsImltcG9ydCB7IEdyYXBoUUxFcnJvciB9IGZyb20gXCIuLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IubWpzXCI7XG5cbi8qKlxuICogTm8gdW51c2VkIHZhcmlhYmxlc1xuICpcbiAqIEEgR3JhcGhRTCBvcGVyYXRpb24gaXMgb25seSB2YWxpZCBpZiBhbGwgdmFyaWFibGVzIGRlZmluZWQgYnkgYW4gb3BlcmF0aW9uXG4gKiBhcmUgdXNlZCwgZWl0aGVyIGRpcmVjdGx5IG9yIHdpdGhpbiBhIHNwcmVhZCBmcmFnbWVudC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIE5vVW51c2VkVmFyaWFibGVzUnVsZShjb250ZXh0KSB7XG4gIHZhciB2YXJpYWJsZURlZnMgPSBbXTtcbiAgcmV0dXJuIHtcbiAgICBPcGVyYXRpb25EZWZpbml0aW9uOiB7XG4gICAgICBlbnRlcjogZnVuY3Rpb24gZW50ZXIoKSB7XG4gICAgICAgIHZhcmlhYmxlRGVmcyA9IFtdO1xuICAgICAgfSxcbiAgICAgIGxlYXZlOiBmdW5jdGlvbiBsZWF2ZShvcGVyYXRpb24pIHtcbiAgICAgICAgdmFyIHZhcmlhYmxlTmFtZVVzZWQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICB2YXIgdXNhZ2VzID0gY29udGV4dC5nZXRSZWN1cnNpdmVWYXJpYWJsZVVzYWdlcyhvcGVyYXRpb24pO1xuXG4gICAgICAgIGZvciAodmFyIF9pMiA9IDA7IF9pMiA8IHVzYWdlcy5sZW5ndGg7IF9pMisrKSB7XG4gICAgICAgICAgdmFyIF9yZWYyID0gdXNhZ2VzW19pMl07XG4gICAgICAgICAgdmFyIG5vZGUgPSBfcmVmMi5ub2RlO1xuICAgICAgICAgIHZhcmlhYmxlTmFtZVVzZWRbbm9kZS5uYW1lLnZhbHVlXSA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBfaTQgPSAwLCBfdmFyaWFibGVEZWZzMiA9IHZhcmlhYmxlRGVmczsgX2k0IDwgX3ZhcmlhYmxlRGVmczIubGVuZ3RoOyBfaTQrKykge1xuICAgICAgICAgIHZhciB2YXJpYWJsZURlZiA9IF92YXJpYWJsZURlZnMyW19pNF07XG4gICAgICAgICAgdmFyIHZhcmlhYmxlTmFtZSA9IHZhcmlhYmxlRGVmLnZhcmlhYmxlLm5hbWUudmFsdWU7XG5cbiAgICAgICAgICBpZiAodmFyaWFibGVOYW1lVXNlZFt2YXJpYWJsZU5hbWVdICE9PSB0cnVlKSB7XG4gICAgICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKG5ldyBHcmFwaFFMRXJyb3Iob3BlcmF0aW9uLm5hbWUgPyBcIlZhcmlhYmxlIFxcXCIkXCIuY29uY2F0KHZhcmlhYmxlTmFtZSwgXCJcXFwiIGlzIG5ldmVyIHVzZWQgaW4gb3BlcmF0aW9uIFxcXCJcIikuY29uY2F0KG9wZXJhdGlvbi5uYW1lLnZhbHVlLCBcIlxcXCIuXCIpIDogXCJWYXJpYWJsZSBcXFwiJFwiLmNvbmNhdCh2YXJpYWJsZU5hbWUsIFwiXFxcIiBpcyBuZXZlciB1c2VkLlwiKSwgdmFyaWFibGVEZWYpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIFZhcmlhYmxlRGVmaW5pdGlvbjogZnVuY3Rpb24gVmFyaWFibGVEZWZpbml0aW9uKGRlZikge1xuICAgICAgdmFyaWFibGVEZWZzLnB1c2goZGVmKTtcbiAgICB9XG4gIH07XG59XG4iLCJpbXBvcnQgZmluZCBmcm9tIFwiLi4vLi4vcG9seWZpbGxzL2ZpbmQubWpzXCI7XG5pbXBvcnQgb2JqZWN0RW50cmllcyBmcm9tIFwiLi4vLi4vcG9seWZpbGxzL29iamVjdEVudHJpZXMubWpzXCI7XG5pbXBvcnQgaW5zcGVjdCBmcm9tIFwiLi4vLi4vanN1dGlscy9pbnNwZWN0Lm1qc1wiO1xuaW1wb3J0IHsgR3JhcGhRTEVycm9yIH0gZnJvbSBcIi4uLy4uL2Vycm9yL0dyYXBoUUxFcnJvci5tanNcIjtcbmltcG9ydCB7IEtpbmQgfSBmcm9tIFwiLi4vLi4vbGFuZ3VhZ2Uva2luZHMubWpzXCI7XG5pbXBvcnQgeyBwcmludCB9IGZyb20gXCIuLi8uLi9sYW5ndWFnZS9wcmludGVyLm1qc1wiO1xuaW1wb3J0IHsgZ2V0TmFtZWRUeXBlLCBpc05vbk51bGxUeXBlLCBpc0xlYWZUeXBlLCBpc09iamVjdFR5cGUsIGlzTGlzdFR5cGUsIGlzSW50ZXJmYWNlVHlwZSB9IGZyb20gXCIuLi8uLi90eXBlL2RlZmluaXRpb24ubWpzXCI7XG5pbXBvcnQgeyB0eXBlRnJvbUFTVCB9IGZyb20gXCIuLi8uLi91dGlsaXRpZXMvdHlwZUZyb21BU1QubWpzXCI7XG5cbmZ1bmN0aW9uIHJlYXNvbk1lc3NhZ2UocmVhc29uKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHJlYXNvbikpIHtcbiAgICByZXR1cm4gcmVhc29uLm1hcChmdW5jdGlvbiAoX3JlZikge1xuICAgICAgdmFyIHJlc3BvbnNlTmFtZSA9IF9yZWZbMF0sXG4gICAgICAgICAgc3ViUmVhc29uID0gX3JlZlsxXTtcbiAgICAgIHJldHVybiBcInN1YmZpZWxkcyBcXFwiXCIuY29uY2F0KHJlc3BvbnNlTmFtZSwgXCJcXFwiIGNvbmZsaWN0IGJlY2F1c2UgXCIpICsgcmVhc29uTWVzc2FnZShzdWJSZWFzb24pO1xuICAgIH0pLmpvaW4oJyBhbmQgJyk7XG4gIH1cblxuICByZXR1cm4gcmVhc29uO1xufVxuLyoqXG4gKiBPdmVybGFwcGluZyBmaWVsZHMgY2FuIGJlIG1lcmdlZFxuICpcbiAqIEEgc2VsZWN0aW9uIHNldCBpcyBvbmx5IHZhbGlkIGlmIGFsbCBmaWVsZHMgKGluY2x1ZGluZyBzcHJlYWRpbmcgYW55XG4gKiBmcmFnbWVudHMpIGVpdGhlciBjb3JyZXNwb25kIHRvIGRpc3RpbmN0IHJlc3BvbnNlIG5hbWVzIG9yIGNhbiBiZSBtZXJnZWRcbiAqIHdpdGhvdXQgYW1iaWd1aXR5LlxuICovXG5cblxuZXhwb3J0IGZ1bmN0aW9uIE92ZXJsYXBwaW5nRmllbGRzQ2FuQmVNZXJnZWRSdWxlKGNvbnRleHQpIHtcbiAgLy8gQSBtZW1vaXphdGlvbiBmb3Igd2hlbiB0d28gZnJhZ21lbnRzIGFyZSBjb21wYXJlZCBcImJldHdlZW5cIiBlYWNoIG90aGVyIGZvclxuICAvLyBjb25mbGljdHMuIFR3byBmcmFnbWVudHMgbWF5IGJlIGNvbXBhcmVkIG1hbnkgdGltZXMsIHNvIG1lbW9pemluZyB0aGlzIGNhblxuICAvLyBkcmFtYXRpY2FsbHkgaW1wcm92ZSB0aGUgcGVyZm9ybWFuY2Ugb2YgdGhpcyB2YWxpZGF0b3IuXG4gIHZhciBjb21wYXJlZEZyYWdtZW50UGFpcnMgPSBuZXcgUGFpclNldCgpOyAvLyBBIGNhY2hlIGZvciB0aGUgXCJmaWVsZCBtYXBcIiBhbmQgbGlzdCBvZiBmcmFnbWVudCBuYW1lcyBmb3VuZCBpbiBhbnkgZ2l2ZW5cbiAgLy8gc2VsZWN0aW9uIHNldC4gU2VsZWN0aW9uIHNldHMgbWF5IGJlIGFza2VkIGZvciB0aGlzIGluZm9ybWF0aW9uIG11bHRpcGxlXG4gIC8vIHRpbWVzLCBzbyB0aGlzIGltcHJvdmVzIHRoZSBwZXJmb3JtYW5jZSBvZiB0aGlzIHZhbGlkYXRvci5cblxuICB2YXIgY2FjaGVkRmllbGRzQW5kRnJhZ21lbnROYW1lcyA9IG5ldyBNYXAoKTtcbiAgcmV0dXJuIHtcbiAgICBTZWxlY3Rpb25TZXQ6IGZ1bmN0aW9uIFNlbGVjdGlvblNldChzZWxlY3Rpb25TZXQpIHtcbiAgICAgIHZhciBjb25mbGljdHMgPSBmaW5kQ29uZmxpY3RzV2l0aGluU2VsZWN0aW9uU2V0KGNvbnRleHQsIGNhY2hlZEZpZWxkc0FuZEZyYWdtZW50TmFtZXMsIGNvbXBhcmVkRnJhZ21lbnRQYWlycywgY29udGV4dC5nZXRQYXJlbnRUeXBlKCksIHNlbGVjdGlvblNldCk7XG5cbiAgICAgIGZvciAodmFyIF9pMiA9IDA7IF9pMiA8IGNvbmZsaWN0cy5sZW5ndGg7IF9pMisrKSB7XG4gICAgICAgIHZhciBfcmVmMyA9IGNvbmZsaWN0c1tfaTJdO1xuICAgICAgICB2YXIgX3JlZjIkID0gX3JlZjNbMF07XG4gICAgICAgIHZhciByZXNwb25zZU5hbWUgPSBfcmVmMiRbMF07XG4gICAgICAgIHZhciByZWFzb24gPSBfcmVmMiRbMV07XG4gICAgICAgIHZhciBmaWVsZHMxID0gX3JlZjNbMV07XG4gICAgICAgIHZhciBmaWVsZHMyID0gX3JlZjNbMl07XG4gICAgICAgIHZhciByZWFzb25Nc2cgPSByZWFzb25NZXNzYWdlKHJlYXNvbik7XG4gICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IobmV3IEdyYXBoUUxFcnJvcihcIkZpZWxkcyBcXFwiXCIuY29uY2F0KHJlc3BvbnNlTmFtZSwgXCJcXFwiIGNvbmZsaWN0IGJlY2F1c2UgXCIpLmNvbmNhdChyZWFzb25Nc2csIFwiLiBVc2UgZGlmZmVyZW50IGFsaWFzZXMgb24gdGhlIGZpZWxkcyB0byBmZXRjaCBib3RoIGlmIHRoaXMgd2FzIGludGVudGlvbmFsLlwiKSwgZmllbGRzMS5jb25jYXQoZmllbGRzMikpKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG5cbi8qKlxuICogQWxnb3JpdGhtOlxuICpcbiAqIENvbmZsaWN0cyBvY2N1ciB3aGVuIHR3byBmaWVsZHMgZXhpc3QgaW4gYSBxdWVyeSB3aGljaCB3aWxsIHByb2R1Y2UgdGhlIHNhbWVcbiAqIHJlc3BvbnNlIG5hbWUsIGJ1dCByZXByZXNlbnQgZGlmZmVyaW5nIHZhbHVlcywgdGh1cyBjcmVhdGluZyBhIGNvbmZsaWN0LlxuICogVGhlIGFsZ29yaXRobSBiZWxvdyBmaW5kcyBhbGwgY29uZmxpY3RzIHZpYSBtYWtpbmcgYSBzZXJpZXMgb2YgY29tcGFyaXNvbnNcbiAqIGJldHdlZW4gZmllbGRzLiBJbiBvcmRlciB0byBjb21wYXJlIGFzIGZldyBmaWVsZHMgYXMgcG9zc2libGUsIHRoaXMgbWFrZXNcbiAqIGEgc2VyaWVzIG9mIGNvbXBhcmlzb25zIFwid2l0aGluXCIgc2V0cyBvZiBmaWVsZHMgYW5kIFwiYmV0d2VlblwiIHNldHMgb2YgZmllbGRzLlxuICpcbiAqIEdpdmVuIGFueSBzZWxlY3Rpb24gc2V0LCBhIGNvbGxlY3Rpb24gcHJvZHVjZXMgYm90aCBhIHNldCBvZiBmaWVsZHMgYnlcbiAqIGFsc28gaW5jbHVkaW5nIGFsbCBpbmxpbmUgZnJhZ21lbnRzLCBhcyB3ZWxsIGFzIGEgbGlzdCBvZiBmcmFnbWVudHNcbiAqIHJlZmVyZW5jZWQgYnkgZnJhZ21lbnQgc3ByZWFkcy5cbiAqXG4gKiBBKSBFYWNoIHNlbGVjdGlvbiBzZXQgcmVwcmVzZW50ZWQgaW4gdGhlIGRvY3VtZW50IGZpcnN0IGNvbXBhcmVzIFwid2l0aGluXCIgaXRzXG4gKiBjb2xsZWN0ZWQgc2V0IG9mIGZpZWxkcywgZmluZGluZyBhbnkgY29uZmxpY3RzIGJldHdlZW4gZXZlcnkgcGFpciBvZlxuICogb3ZlcmxhcHBpbmcgZmllbGRzLlxuICogTm90ZTogVGhpcyBpcyB0aGUgKm9ubHkgdGltZSogdGhhdCBhIHRoZSBmaWVsZHMgXCJ3aXRoaW5cIiBhIHNldCBhcmUgY29tcGFyZWRcbiAqIHRvIGVhY2ggb3RoZXIuIEFmdGVyIHRoaXMgb25seSBmaWVsZHMgXCJiZXR3ZWVuXCIgc2V0cyBhcmUgY29tcGFyZWQuXG4gKlxuICogQikgQWxzbywgaWYgYW55IGZyYWdtZW50IGlzIHJlZmVyZW5jZWQgaW4gYSBzZWxlY3Rpb24gc2V0LCB0aGVuIGFcbiAqIGNvbXBhcmlzb24gaXMgbWFkZSBcImJldHdlZW5cIiB0aGUgb3JpZ2luYWwgc2V0IG9mIGZpZWxkcyBhbmQgdGhlXG4gKiByZWZlcmVuY2VkIGZyYWdtZW50LlxuICpcbiAqIEMpIEFsc28sIGlmIG11bHRpcGxlIGZyYWdtZW50cyBhcmUgcmVmZXJlbmNlZCwgdGhlbiBjb21wYXJpc29uc1xuICogYXJlIG1hZGUgXCJiZXR3ZWVuXCIgZWFjaCByZWZlcmVuY2VkIGZyYWdtZW50LlxuICpcbiAqIEQpIFdoZW4gY29tcGFyaW5nIFwiYmV0d2VlblwiIGEgc2V0IG9mIGZpZWxkcyBhbmQgYSByZWZlcmVuY2VkIGZyYWdtZW50LCBmaXJzdFxuICogYSBjb21wYXJpc29uIGlzIG1hZGUgYmV0d2VlbiBlYWNoIGZpZWxkIGluIHRoZSBvcmlnaW5hbCBzZXQgb2YgZmllbGRzIGFuZFxuICogZWFjaCBmaWVsZCBpbiB0aGUgdGhlIHJlZmVyZW5jZWQgc2V0IG9mIGZpZWxkcy5cbiAqXG4gKiBFKSBBbHNvLCBpZiBhbnkgZnJhZ21lbnQgaXMgcmVmZXJlbmNlZCBpbiB0aGUgcmVmZXJlbmNlZCBzZWxlY3Rpb24gc2V0LFxuICogdGhlbiBhIGNvbXBhcmlzb24gaXMgbWFkZSBcImJldHdlZW5cIiB0aGUgb3JpZ2luYWwgc2V0IG9mIGZpZWxkcyBhbmQgdGhlXG4gKiByZWZlcmVuY2VkIGZyYWdtZW50IChyZWN1cnNpdmVseSByZWZlcnJpbmcgdG8gc3RlcCBEKS5cbiAqXG4gKiBGKSBXaGVuIGNvbXBhcmluZyBcImJldHdlZW5cIiB0d28gZnJhZ21lbnRzLCBmaXJzdCBhIGNvbXBhcmlzb24gaXMgbWFkZSBiZXR3ZWVuXG4gKiBlYWNoIGZpZWxkIGluIHRoZSBmaXJzdCByZWZlcmVuY2VkIHNldCBvZiBmaWVsZHMgYW5kIGVhY2ggZmllbGQgaW4gdGhlIHRoZVxuICogc2Vjb25kIHJlZmVyZW5jZWQgc2V0IG9mIGZpZWxkcy5cbiAqXG4gKiBHKSBBbHNvLCBhbnkgZnJhZ21lbnRzIHJlZmVyZW5jZWQgYnkgdGhlIGZpcnN0IG11c3QgYmUgY29tcGFyZWQgdG8gdGhlXG4gKiBzZWNvbmQsIGFuZCBhbnkgZnJhZ21lbnRzIHJlZmVyZW5jZWQgYnkgdGhlIHNlY29uZCBtdXN0IGJlIGNvbXBhcmVkIHRvIHRoZVxuICogZmlyc3QgKHJlY3Vyc2l2ZWx5IHJlZmVycmluZyB0byBzdGVwIEYpLlxuICpcbiAqIEgpIFdoZW4gY29tcGFyaW5nIHR3byBmaWVsZHMsIGlmIGJvdGggaGF2ZSBzZWxlY3Rpb24gc2V0cywgdGhlbiBhIGNvbXBhcmlzb25cbiAqIGlzIG1hZGUgXCJiZXR3ZWVuXCIgYm90aCBzZWxlY3Rpb24gc2V0cywgZmlyc3QgY29tcGFyaW5nIHRoZSBzZXQgb2YgZmllbGRzIGluXG4gKiB0aGUgZmlyc3Qgc2VsZWN0aW9uIHNldCB3aXRoIHRoZSBzZXQgb2YgZmllbGRzIGluIHRoZSBzZWNvbmQuXG4gKlxuICogSSkgQWxzbywgaWYgYW55IGZyYWdtZW50IGlzIHJlZmVyZW5jZWQgaW4gZWl0aGVyIHNlbGVjdGlvbiBzZXQsIHRoZW4gYVxuICogY29tcGFyaXNvbiBpcyBtYWRlIFwiYmV0d2VlblwiIHRoZSBvdGhlciBzZXQgb2YgZmllbGRzIGFuZCB0aGVcbiAqIHJlZmVyZW5jZWQgZnJhZ21lbnQuXG4gKlxuICogSikgQWxzbywgaWYgdHdvIGZyYWdtZW50cyBhcmUgcmVmZXJlbmNlZCBpbiBib3RoIHNlbGVjdGlvbiBzZXRzLCB0aGVuIGFcbiAqIGNvbXBhcmlzb24gaXMgbWFkZSBcImJldHdlZW5cIiB0aGUgdHdvIGZyYWdtZW50cy5cbiAqXG4gKi9cbi8vIEZpbmQgYWxsIGNvbmZsaWN0cyBmb3VuZCBcIndpdGhpblwiIGEgc2VsZWN0aW9uIHNldCwgaW5jbHVkaW5nIHRob3NlIGZvdW5kXG4vLyB2aWEgc3ByZWFkaW5nIGluIGZyYWdtZW50cy4gQ2FsbGVkIHdoZW4gdmlzaXRpbmcgZWFjaCBTZWxlY3Rpb25TZXQgaW4gdGhlXG4vLyBHcmFwaFFMIERvY3VtZW50LlxuZnVuY3Rpb24gZmluZENvbmZsaWN0c1dpdGhpblNlbGVjdGlvblNldChjb250ZXh0LCBjYWNoZWRGaWVsZHNBbmRGcmFnbWVudE5hbWVzLCBjb21wYXJlZEZyYWdtZW50UGFpcnMsIHBhcmVudFR5cGUsIHNlbGVjdGlvblNldCkge1xuICB2YXIgY29uZmxpY3RzID0gW107XG5cbiAgdmFyIF9nZXRGaWVsZHNBbmRGcmFnbWVudCA9IGdldEZpZWxkc0FuZEZyYWdtZW50TmFtZXMoY29udGV4dCwgY2FjaGVkRmllbGRzQW5kRnJhZ21lbnROYW1lcywgcGFyZW50VHlwZSwgc2VsZWN0aW9uU2V0KSxcbiAgICAgIGZpZWxkTWFwID0gX2dldEZpZWxkc0FuZEZyYWdtZW50WzBdLFxuICAgICAgZnJhZ21lbnROYW1lcyA9IF9nZXRGaWVsZHNBbmRGcmFnbWVudFsxXTsgLy8gKEEpIEZpbmQgZmluZCBhbGwgY29uZmxpY3RzIFwid2l0aGluXCIgdGhlIGZpZWxkcyBvZiB0aGlzIHNlbGVjdGlvbiBzZXQuXG4gIC8vIE5vdGU6IHRoaXMgaXMgdGhlICpvbmx5IHBsYWNlKiBgY29sbGVjdENvbmZsaWN0c1dpdGhpbmAgaXMgY2FsbGVkLlxuXG5cbiAgY29sbGVjdENvbmZsaWN0c1dpdGhpbihjb250ZXh0LCBjb25mbGljdHMsIGNhY2hlZEZpZWxkc0FuZEZyYWdtZW50TmFtZXMsIGNvbXBhcmVkRnJhZ21lbnRQYWlycywgZmllbGRNYXApO1xuXG4gIGlmIChmcmFnbWVudE5hbWVzLmxlbmd0aCAhPT0gMCkge1xuICAgIC8vIChCKSBUaGVuIGNvbGxlY3QgY29uZmxpY3RzIGJldHdlZW4gdGhlc2UgZmllbGRzIGFuZCB0aG9zZSByZXByZXNlbnRlZCBieVxuICAgIC8vIGVhY2ggc3ByZWFkIGZyYWdtZW50IG5hbWUgZm91bmQuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmcmFnbWVudE5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb2xsZWN0Q29uZmxpY3RzQmV0d2VlbkZpZWxkc0FuZEZyYWdtZW50KGNvbnRleHQsIGNvbmZsaWN0cywgY2FjaGVkRmllbGRzQW5kRnJhZ21lbnROYW1lcywgY29tcGFyZWRGcmFnbWVudFBhaXJzLCBmYWxzZSwgZmllbGRNYXAsIGZyYWdtZW50TmFtZXNbaV0pOyAvLyAoQykgVGhlbiBjb21wYXJlIHRoaXMgZnJhZ21lbnQgd2l0aCBhbGwgb3RoZXIgZnJhZ21lbnRzIGZvdW5kIGluIHRoaXNcbiAgICAgIC8vIHNlbGVjdGlvbiBzZXQgdG8gY29sbGVjdCBjb25mbGljdHMgYmV0d2VlbiBmcmFnbWVudHMgc3ByZWFkIHRvZ2V0aGVyLlxuICAgICAgLy8gVGhpcyBjb21wYXJlcyBlYWNoIGl0ZW0gaW4gdGhlIGxpc3Qgb2YgZnJhZ21lbnQgbmFtZXMgdG8gZXZlcnkgb3RoZXJcbiAgICAgIC8vIGl0ZW0gaW4gdGhhdCBzYW1lIGxpc3QgKGV4Y2VwdCBmb3IgaXRzZWxmKS5cblxuICAgICAgZm9yICh2YXIgaiA9IGkgKyAxOyBqIDwgZnJhZ21lbnROYW1lcy5sZW5ndGg7IGorKykge1xuICAgICAgICBjb2xsZWN0Q29uZmxpY3RzQmV0d2VlbkZyYWdtZW50cyhjb250ZXh0LCBjb25mbGljdHMsIGNhY2hlZEZpZWxkc0FuZEZyYWdtZW50TmFtZXMsIGNvbXBhcmVkRnJhZ21lbnRQYWlycywgZmFsc2UsIGZyYWdtZW50TmFtZXNbaV0sIGZyYWdtZW50TmFtZXNbal0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjb25mbGljdHM7XG59IC8vIENvbGxlY3QgYWxsIGNvbmZsaWN0cyBmb3VuZCBiZXR3ZWVuIGEgc2V0IG9mIGZpZWxkcyBhbmQgYSBmcmFnbWVudCByZWZlcmVuY2Vcbi8vIGluY2x1ZGluZyB2aWEgc3ByZWFkaW5nIGluIGFueSBuZXN0ZWQgZnJhZ21lbnRzLlxuXG5cbmZ1bmN0aW9uIGNvbGxlY3RDb25mbGljdHNCZXR3ZWVuRmllbGRzQW5kRnJhZ21lbnQoY29udGV4dCwgY29uZmxpY3RzLCBjYWNoZWRGaWVsZHNBbmRGcmFnbWVudE5hbWVzLCBjb21wYXJlZEZyYWdtZW50UGFpcnMsIGFyZU11dHVhbGx5RXhjbHVzaXZlLCBmaWVsZE1hcCwgZnJhZ21lbnROYW1lKSB7XG4gIHZhciBmcmFnbWVudCA9IGNvbnRleHQuZ2V0RnJhZ21lbnQoZnJhZ21lbnROYW1lKTtcblxuICBpZiAoIWZyYWdtZW50KSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIF9nZXRSZWZlcmVuY2VkRmllbGRzQSA9IGdldFJlZmVyZW5jZWRGaWVsZHNBbmRGcmFnbWVudE5hbWVzKGNvbnRleHQsIGNhY2hlZEZpZWxkc0FuZEZyYWdtZW50TmFtZXMsIGZyYWdtZW50KSxcbiAgICAgIGZpZWxkTWFwMiA9IF9nZXRSZWZlcmVuY2VkRmllbGRzQVswXSxcbiAgICAgIGZyYWdtZW50TmFtZXMyID0gX2dldFJlZmVyZW5jZWRGaWVsZHNBWzFdOyAvLyBEbyBub3QgY29tcGFyZSBhIGZyYWdtZW50J3MgZmllbGRNYXAgdG8gaXRzZWxmLlxuXG5cbiAgaWYgKGZpZWxkTWFwID09PSBmaWVsZE1hcDIpIHtcbiAgICByZXR1cm47XG4gIH0gLy8gKEQpIEZpcnN0IGNvbGxlY3QgYW55IGNvbmZsaWN0cyBiZXR3ZWVuIHRoZSBwcm92aWRlZCBjb2xsZWN0aW9uIG9mIGZpZWxkc1xuICAvLyBhbmQgdGhlIGNvbGxlY3Rpb24gb2YgZmllbGRzIHJlcHJlc2VudGVkIGJ5IHRoZSBnaXZlbiBmcmFnbWVudC5cblxuXG4gIGNvbGxlY3RDb25mbGljdHNCZXR3ZWVuKGNvbnRleHQsIGNvbmZsaWN0cywgY2FjaGVkRmllbGRzQW5kRnJhZ21lbnROYW1lcywgY29tcGFyZWRGcmFnbWVudFBhaXJzLCBhcmVNdXR1YWxseUV4Y2x1c2l2ZSwgZmllbGRNYXAsIGZpZWxkTWFwMik7IC8vIChFKSBUaGVuIGNvbGxlY3QgYW55IGNvbmZsaWN0cyBiZXR3ZWVuIHRoZSBwcm92aWRlZCBjb2xsZWN0aW9uIG9mIGZpZWxkc1xuICAvLyBhbmQgYW55IGZyYWdtZW50IG5hbWVzIGZvdW5kIGluIHRoZSBnaXZlbiBmcmFnbWVudC5cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGZyYWdtZW50TmFtZXMyLmxlbmd0aDsgaSsrKSB7XG4gICAgY29sbGVjdENvbmZsaWN0c0JldHdlZW5GaWVsZHNBbmRGcmFnbWVudChjb250ZXh0LCBjb25mbGljdHMsIGNhY2hlZEZpZWxkc0FuZEZyYWdtZW50TmFtZXMsIGNvbXBhcmVkRnJhZ21lbnRQYWlycywgYXJlTXV0dWFsbHlFeGNsdXNpdmUsIGZpZWxkTWFwLCBmcmFnbWVudE5hbWVzMltpXSk7XG4gIH1cbn0gLy8gQ29sbGVjdCBhbGwgY29uZmxpY3RzIGZvdW5kIGJldHdlZW4gdHdvIGZyYWdtZW50cywgaW5jbHVkaW5nIHZpYSBzcHJlYWRpbmcgaW5cbi8vIGFueSBuZXN0ZWQgZnJhZ21lbnRzLlxuXG5cbmZ1bmN0aW9uIGNvbGxlY3RDb25mbGljdHNCZXR3ZWVuRnJhZ21lbnRzKGNvbnRleHQsIGNvbmZsaWN0cywgY2FjaGVkRmllbGRzQW5kRnJhZ21lbnROYW1lcywgY29tcGFyZWRGcmFnbWVudFBhaXJzLCBhcmVNdXR1YWxseUV4Y2x1c2l2ZSwgZnJhZ21lbnROYW1lMSwgZnJhZ21lbnROYW1lMikge1xuICAvLyBObyBuZWVkIHRvIGNvbXBhcmUgYSBmcmFnbWVudCB0byBpdHNlbGYuXG4gIGlmIChmcmFnbWVudE5hbWUxID09PSBmcmFnbWVudE5hbWUyKSB7XG4gICAgcmV0dXJuO1xuICB9IC8vIE1lbW9pemUgc28gdHdvIGZyYWdtZW50cyBhcmUgbm90IGNvbXBhcmVkIGZvciBjb25mbGljdHMgbW9yZSB0aGFuIG9uY2UuXG5cblxuICBpZiAoY29tcGFyZWRGcmFnbWVudFBhaXJzLmhhcyhmcmFnbWVudE5hbWUxLCBmcmFnbWVudE5hbWUyLCBhcmVNdXR1YWxseUV4Y2x1c2l2ZSkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb21wYXJlZEZyYWdtZW50UGFpcnMuYWRkKGZyYWdtZW50TmFtZTEsIGZyYWdtZW50TmFtZTIsIGFyZU11dHVhbGx5RXhjbHVzaXZlKTtcbiAgdmFyIGZyYWdtZW50MSA9IGNvbnRleHQuZ2V0RnJhZ21lbnQoZnJhZ21lbnROYW1lMSk7XG4gIHZhciBmcmFnbWVudDIgPSBjb250ZXh0LmdldEZyYWdtZW50KGZyYWdtZW50TmFtZTIpO1xuXG4gIGlmICghZnJhZ21lbnQxIHx8ICFmcmFnbWVudDIpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgX2dldFJlZmVyZW5jZWRGaWVsZHNBMiA9IGdldFJlZmVyZW5jZWRGaWVsZHNBbmRGcmFnbWVudE5hbWVzKGNvbnRleHQsIGNhY2hlZEZpZWxkc0FuZEZyYWdtZW50TmFtZXMsIGZyYWdtZW50MSksXG4gICAgICBmaWVsZE1hcDEgPSBfZ2V0UmVmZXJlbmNlZEZpZWxkc0EyWzBdLFxuICAgICAgZnJhZ21lbnROYW1lczEgPSBfZ2V0UmVmZXJlbmNlZEZpZWxkc0EyWzFdO1xuXG4gIHZhciBfZ2V0UmVmZXJlbmNlZEZpZWxkc0EzID0gZ2V0UmVmZXJlbmNlZEZpZWxkc0FuZEZyYWdtZW50TmFtZXMoY29udGV4dCwgY2FjaGVkRmllbGRzQW5kRnJhZ21lbnROYW1lcywgZnJhZ21lbnQyKSxcbiAgICAgIGZpZWxkTWFwMiA9IF9nZXRSZWZlcmVuY2VkRmllbGRzQTNbMF0sXG4gICAgICBmcmFnbWVudE5hbWVzMiA9IF9nZXRSZWZlcmVuY2VkRmllbGRzQTNbMV07IC8vIChGKSBGaXJzdCwgY29sbGVjdCBhbGwgY29uZmxpY3RzIGJldHdlZW4gdGhlc2UgdHdvIGNvbGxlY3Rpb25zIG9mIGZpZWxkc1xuICAvLyAobm90IGluY2x1ZGluZyBhbnkgbmVzdGVkIGZyYWdtZW50cykuXG5cblxuICBjb2xsZWN0Q29uZmxpY3RzQmV0d2Vlbihjb250ZXh0LCBjb25mbGljdHMsIGNhY2hlZEZpZWxkc0FuZEZyYWdtZW50TmFtZXMsIGNvbXBhcmVkRnJhZ21lbnRQYWlycywgYXJlTXV0dWFsbHlFeGNsdXNpdmUsIGZpZWxkTWFwMSwgZmllbGRNYXAyKTsgLy8gKEcpIFRoZW4gY29sbGVjdCBjb25mbGljdHMgYmV0d2VlbiB0aGUgZmlyc3QgZnJhZ21lbnQgYW5kIGFueSBuZXN0ZWRcbiAgLy8gZnJhZ21lbnRzIHNwcmVhZCBpbiB0aGUgc2Vjb25kIGZyYWdtZW50LlxuXG4gIGZvciAodmFyIGogPSAwOyBqIDwgZnJhZ21lbnROYW1lczIubGVuZ3RoOyBqKyspIHtcbiAgICBjb2xsZWN0Q29uZmxpY3RzQmV0d2VlbkZyYWdtZW50cyhjb250ZXh0LCBjb25mbGljdHMsIGNhY2hlZEZpZWxkc0FuZEZyYWdtZW50TmFtZXMsIGNvbXBhcmVkRnJhZ21lbnRQYWlycywgYXJlTXV0dWFsbHlFeGNsdXNpdmUsIGZyYWdtZW50TmFtZTEsIGZyYWdtZW50TmFtZXMyW2pdKTtcbiAgfSAvLyAoRykgVGhlbiBjb2xsZWN0IGNvbmZsaWN0cyBiZXR3ZWVuIHRoZSBzZWNvbmQgZnJhZ21lbnQgYW5kIGFueSBuZXN0ZWRcbiAgLy8gZnJhZ21lbnRzIHNwcmVhZCBpbiB0aGUgZmlyc3QgZnJhZ21lbnQuXG5cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGZyYWdtZW50TmFtZXMxLmxlbmd0aDsgaSsrKSB7XG4gICAgY29sbGVjdENvbmZsaWN0c0JldHdlZW5GcmFnbWVudHMoY29udGV4dCwgY29uZmxpY3RzLCBjYWNoZWRGaWVsZHNBbmRGcmFnbWVudE5hbWVzLCBjb21wYXJlZEZyYWdtZW50UGFpcnMsIGFyZU11dHVhbGx5RXhjbHVzaXZlLCBmcmFnbWVudE5hbWVzMVtpXSwgZnJhZ21lbnROYW1lMik7XG4gIH1cbn0gLy8gRmluZCBhbGwgY29uZmxpY3RzIGZvdW5kIGJldHdlZW4gdHdvIHNlbGVjdGlvbiBzZXRzLCBpbmNsdWRpbmcgdGhvc2UgZm91bmRcbi8vIHZpYSBzcHJlYWRpbmcgaW4gZnJhZ21lbnRzLiBDYWxsZWQgd2hlbiBkZXRlcm1pbmluZyBpZiBjb25mbGljdHMgZXhpc3Rcbi8vIGJldHdlZW4gdGhlIHN1Yi1maWVsZHMgb2YgdHdvIG92ZXJsYXBwaW5nIGZpZWxkcy5cblxuXG5mdW5jdGlvbiBmaW5kQ29uZmxpY3RzQmV0d2VlblN1YlNlbGVjdGlvblNldHMoY29udGV4dCwgY2FjaGVkRmllbGRzQW5kRnJhZ21lbnROYW1lcywgY29tcGFyZWRGcmFnbWVudFBhaXJzLCBhcmVNdXR1YWxseUV4Y2x1c2l2ZSwgcGFyZW50VHlwZTEsIHNlbGVjdGlvblNldDEsIHBhcmVudFR5cGUyLCBzZWxlY3Rpb25TZXQyKSB7XG4gIHZhciBjb25mbGljdHMgPSBbXTtcblxuICB2YXIgX2dldEZpZWxkc0FuZEZyYWdtZW50MiA9IGdldEZpZWxkc0FuZEZyYWdtZW50TmFtZXMoY29udGV4dCwgY2FjaGVkRmllbGRzQW5kRnJhZ21lbnROYW1lcywgcGFyZW50VHlwZTEsIHNlbGVjdGlvblNldDEpLFxuICAgICAgZmllbGRNYXAxID0gX2dldEZpZWxkc0FuZEZyYWdtZW50MlswXSxcbiAgICAgIGZyYWdtZW50TmFtZXMxID0gX2dldEZpZWxkc0FuZEZyYWdtZW50MlsxXTtcblxuICB2YXIgX2dldEZpZWxkc0FuZEZyYWdtZW50MyA9IGdldEZpZWxkc0FuZEZyYWdtZW50TmFtZXMoY29udGV4dCwgY2FjaGVkRmllbGRzQW5kRnJhZ21lbnROYW1lcywgcGFyZW50VHlwZTIsIHNlbGVjdGlvblNldDIpLFxuICAgICAgZmllbGRNYXAyID0gX2dldEZpZWxkc0FuZEZyYWdtZW50M1swXSxcbiAgICAgIGZyYWdtZW50TmFtZXMyID0gX2dldEZpZWxkc0FuZEZyYWdtZW50M1sxXTsgLy8gKEgpIEZpcnN0LCBjb2xsZWN0IGFsbCBjb25mbGljdHMgYmV0d2VlbiB0aGVzZSB0d28gY29sbGVjdGlvbnMgb2YgZmllbGQuXG5cblxuICBjb2xsZWN0Q29uZmxpY3RzQmV0d2Vlbihjb250ZXh0LCBjb25mbGljdHMsIGNhY2hlZEZpZWxkc0FuZEZyYWdtZW50TmFtZXMsIGNvbXBhcmVkRnJhZ21lbnRQYWlycywgYXJlTXV0dWFsbHlFeGNsdXNpdmUsIGZpZWxkTWFwMSwgZmllbGRNYXAyKTsgLy8gKEkpIFRoZW4gY29sbGVjdCBjb25mbGljdHMgYmV0d2VlbiB0aGUgZmlyc3QgY29sbGVjdGlvbiBvZiBmaWVsZHMgYW5kXG4gIC8vIHRob3NlIHJlZmVyZW5jZWQgYnkgZWFjaCBmcmFnbWVudCBuYW1lIGFzc29jaWF0ZWQgd2l0aCB0aGUgc2Vjb25kLlxuXG4gIGlmIChmcmFnbWVudE5hbWVzMi5sZW5ndGggIT09IDApIHtcbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IGZyYWdtZW50TmFtZXMyLmxlbmd0aDsgaisrKSB7XG4gICAgICBjb2xsZWN0Q29uZmxpY3RzQmV0d2VlbkZpZWxkc0FuZEZyYWdtZW50KGNvbnRleHQsIGNvbmZsaWN0cywgY2FjaGVkRmllbGRzQW5kRnJhZ21lbnROYW1lcywgY29tcGFyZWRGcmFnbWVudFBhaXJzLCBhcmVNdXR1YWxseUV4Y2x1c2l2ZSwgZmllbGRNYXAxLCBmcmFnbWVudE5hbWVzMltqXSk7XG4gICAgfVxuICB9IC8vIChJKSBUaGVuIGNvbGxlY3QgY29uZmxpY3RzIGJldHdlZW4gdGhlIHNlY29uZCBjb2xsZWN0aW9uIG9mIGZpZWxkcyBhbmRcbiAgLy8gdGhvc2UgcmVmZXJlbmNlZCBieSBlYWNoIGZyYWdtZW50IG5hbWUgYXNzb2NpYXRlZCB3aXRoIHRoZSBmaXJzdC5cblxuXG4gIGlmIChmcmFnbWVudE5hbWVzMS5sZW5ndGggIT09IDApIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZyYWdtZW50TmFtZXMxLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb2xsZWN0Q29uZmxpY3RzQmV0d2VlbkZpZWxkc0FuZEZyYWdtZW50KGNvbnRleHQsIGNvbmZsaWN0cywgY2FjaGVkRmllbGRzQW5kRnJhZ21lbnROYW1lcywgY29tcGFyZWRGcmFnbWVudFBhaXJzLCBhcmVNdXR1YWxseUV4Y2x1c2l2ZSwgZmllbGRNYXAyLCBmcmFnbWVudE5hbWVzMVtpXSk7XG4gICAgfVxuICB9IC8vIChKKSBBbHNvIGNvbGxlY3QgY29uZmxpY3RzIGJldHdlZW4gYW55IGZyYWdtZW50IG5hbWVzIGJ5IHRoZSBmaXJzdCBhbmRcbiAgLy8gZnJhZ21lbnQgbmFtZXMgYnkgdGhlIHNlY29uZC4gVGhpcyBjb21wYXJlcyBlYWNoIGl0ZW0gaW4gdGhlIGZpcnN0IHNldCBvZlxuICAvLyBuYW1lcyB0byBlYWNoIGl0ZW0gaW4gdGhlIHNlY29uZCBzZXQgb2YgbmFtZXMuXG5cblxuICBmb3IgKHZhciBfaTMgPSAwOyBfaTMgPCBmcmFnbWVudE5hbWVzMS5sZW5ndGg7IF9pMysrKSB7XG4gICAgZm9yICh2YXIgX2ogPSAwOyBfaiA8IGZyYWdtZW50TmFtZXMyLmxlbmd0aDsgX2orKykge1xuICAgICAgY29sbGVjdENvbmZsaWN0c0JldHdlZW5GcmFnbWVudHMoY29udGV4dCwgY29uZmxpY3RzLCBjYWNoZWRGaWVsZHNBbmRGcmFnbWVudE5hbWVzLCBjb21wYXJlZEZyYWdtZW50UGFpcnMsIGFyZU11dHVhbGx5RXhjbHVzaXZlLCBmcmFnbWVudE5hbWVzMVtfaTNdLCBmcmFnbWVudE5hbWVzMltfal0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjb25mbGljdHM7XG59IC8vIENvbGxlY3QgYWxsIENvbmZsaWN0cyBcIndpdGhpblwiIG9uZSBjb2xsZWN0aW9uIG9mIGZpZWxkcy5cblxuXG5mdW5jdGlvbiBjb2xsZWN0Q29uZmxpY3RzV2l0aGluKGNvbnRleHQsIGNvbmZsaWN0cywgY2FjaGVkRmllbGRzQW5kRnJhZ21lbnROYW1lcywgY29tcGFyZWRGcmFnbWVudFBhaXJzLCBmaWVsZE1hcCkge1xuICAvLyBBIGZpZWxkIG1hcCBpcyBhIGtleWVkIGNvbGxlY3Rpb24sIHdoZXJlIGVhY2gga2V5IHJlcHJlc2VudHMgYSByZXNwb25zZVxuICAvLyBuYW1lIGFuZCB0aGUgdmFsdWUgYXQgdGhhdCBrZXkgaXMgYSBsaXN0IG9mIGFsbCBmaWVsZHMgd2hpY2ggcHJvdmlkZSB0aGF0XG4gIC8vIHJlc3BvbnNlIG5hbWUuIEZvciBldmVyeSByZXNwb25zZSBuYW1lLCBpZiB0aGVyZSBhcmUgbXVsdGlwbGUgZmllbGRzLCB0aGV5XG4gIC8vIG11c3QgYmUgY29tcGFyZWQgdG8gZmluZCBhIHBvdGVudGlhbCBjb25mbGljdC5cbiAgZm9yICh2YXIgX2k1ID0gMCwgX29iamVjdEVudHJpZXMyID0gb2JqZWN0RW50cmllcyhmaWVsZE1hcCk7IF9pNSA8IF9vYmplY3RFbnRyaWVzMi5sZW5ndGg7IF9pNSsrKSB7XG4gICAgdmFyIF9yZWY1ID0gX29iamVjdEVudHJpZXMyW19pNV07XG4gICAgdmFyIHJlc3BvbnNlTmFtZSA9IF9yZWY1WzBdO1xuICAgIHZhciBmaWVsZHMgPSBfcmVmNVsxXTtcblxuICAgIC8vIFRoaXMgY29tcGFyZXMgZXZlcnkgZmllbGQgaW4gdGhlIGxpc3QgdG8gZXZlcnkgb3RoZXIgZmllbGQgaW4gdGhpcyBsaXN0XG4gICAgLy8gKGV4Y2VwdCB0byBpdHNlbGYpLiBJZiB0aGUgbGlzdCBvbmx5IGhhcyBvbmUgaXRlbSwgbm90aGluZyBuZWVkcyB0b1xuICAgIC8vIGJlIGNvbXBhcmVkLlxuICAgIGlmIChmaWVsZHMubGVuZ3RoID4gMSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmaWVsZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZm9yICh2YXIgaiA9IGkgKyAxOyBqIDwgZmllbGRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgdmFyIGNvbmZsaWN0ID0gZmluZENvbmZsaWN0KGNvbnRleHQsIGNhY2hlZEZpZWxkc0FuZEZyYWdtZW50TmFtZXMsIGNvbXBhcmVkRnJhZ21lbnRQYWlycywgZmFsc2UsIC8vIHdpdGhpbiBvbmUgY29sbGVjdGlvbiBpcyBuZXZlciBtdXR1YWxseSBleGNsdXNpdmVcbiAgICAgICAgICByZXNwb25zZU5hbWUsIGZpZWxkc1tpXSwgZmllbGRzW2pdKTtcblxuICAgICAgICAgIGlmIChjb25mbGljdCkge1xuICAgICAgICAgICAgY29uZmxpY3RzLnB1c2goY29uZmxpY3QpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufSAvLyBDb2xsZWN0IGFsbCBDb25mbGljdHMgYmV0d2VlbiB0d28gY29sbGVjdGlvbnMgb2YgZmllbGRzLiBUaGlzIGlzIHNpbWlsYXIgdG8sXG4vLyBidXQgZGlmZmVyZW50IGZyb20gdGhlIGBjb2xsZWN0Q29uZmxpY3RzV2l0aGluYCBmdW5jdGlvbiBhYm92ZS4gVGhpcyBjaGVja1xuLy8gYXNzdW1lcyB0aGF0IGBjb2xsZWN0Q29uZmxpY3RzV2l0aGluYCBoYXMgYWxyZWFkeSBiZWVuIGNhbGxlZCBvbiBlYWNoXG4vLyBwcm92aWRlZCBjb2xsZWN0aW9uIG9mIGZpZWxkcy4gVGhpcyBpcyB0cnVlIGJlY2F1c2UgdGhpcyB2YWxpZGF0b3IgdHJhdmVyc2VzXG4vLyBlYWNoIGluZGl2aWR1YWwgc2VsZWN0aW9uIHNldC5cblxuXG5mdW5jdGlvbiBjb2xsZWN0Q29uZmxpY3RzQmV0d2Vlbihjb250ZXh0LCBjb25mbGljdHMsIGNhY2hlZEZpZWxkc0FuZEZyYWdtZW50TmFtZXMsIGNvbXBhcmVkRnJhZ21lbnRQYWlycywgcGFyZW50RmllbGRzQXJlTXV0dWFsbHlFeGNsdXNpdmUsIGZpZWxkTWFwMSwgZmllbGRNYXAyKSB7XG4gIC8vIEEgZmllbGQgbWFwIGlzIGEga2V5ZWQgY29sbGVjdGlvbiwgd2hlcmUgZWFjaCBrZXkgcmVwcmVzZW50cyBhIHJlc3BvbnNlXG4gIC8vIG5hbWUgYW5kIHRoZSB2YWx1ZSBhdCB0aGF0IGtleSBpcyBhIGxpc3Qgb2YgYWxsIGZpZWxkcyB3aGljaCBwcm92aWRlIHRoYXRcbiAgLy8gcmVzcG9uc2UgbmFtZS4gRm9yIGFueSByZXNwb25zZSBuYW1lIHdoaWNoIGFwcGVhcnMgaW4gYm90aCBwcm92aWRlZCBmaWVsZFxuICAvLyBtYXBzLCBlYWNoIGZpZWxkIGZyb20gdGhlIGZpcnN0IGZpZWxkIG1hcCBtdXN0IGJlIGNvbXBhcmVkIHRvIGV2ZXJ5IGZpZWxkXG4gIC8vIGluIHRoZSBzZWNvbmQgZmllbGQgbWFwIHRvIGZpbmQgcG90ZW50aWFsIGNvbmZsaWN0cy5cbiAgZm9yICh2YXIgX2k3ID0gMCwgX09iamVjdCRrZXlzMiA9IE9iamVjdC5rZXlzKGZpZWxkTWFwMSk7IF9pNyA8IF9PYmplY3Qka2V5czIubGVuZ3RoOyBfaTcrKykge1xuICAgIHZhciByZXNwb25zZU5hbWUgPSBfT2JqZWN0JGtleXMyW19pN107XG4gICAgdmFyIGZpZWxkczIgPSBmaWVsZE1hcDJbcmVzcG9uc2VOYW1lXTtcblxuICAgIGlmIChmaWVsZHMyKSB7XG4gICAgICB2YXIgZmllbGRzMSA9IGZpZWxkTWFwMVtyZXNwb25zZU5hbWVdO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZpZWxkczEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBmaWVsZHMyLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgdmFyIGNvbmZsaWN0ID0gZmluZENvbmZsaWN0KGNvbnRleHQsIGNhY2hlZEZpZWxkc0FuZEZyYWdtZW50TmFtZXMsIGNvbXBhcmVkRnJhZ21lbnRQYWlycywgcGFyZW50RmllbGRzQXJlTXV0dWFsbHlFeGNsdXNpdmUsIHJlc3BvbnNlTmFtZSwgZmllbGRzMVtpXSwgZmllbGRzMltqXSk7XG5cbiAgICAgICAgICBpZiAoY29uZmxpY3QpIHtcbiAgICAgICAgICAgIGNvbmZsaWN0cy5wdXNoKGNvbmZsaWN0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn0gLy8gRGV0ZXJtaW5lcyBpZiB0aGVyZSBpcyBhIGNvbmZsaWN0IGJldHdlZW4gdHdvIHBhcnRpY3VsYXIgZmllbGRzLCBpbmNsdWRpbmdcbi8vIGNvbXBhcmluZyB0aGVpciBzdWItZmllbGRzLlxuXG5cbmZ1bmN0aW9uIGZpbmRDb25mbGljdChjb250ZXh0LCBjYWNoZWRGaWVsZHNBbmRGcmFnbWVudE5hbWVzLCBjb21wYXJlZEZyYWdtZW50UGFpcnMsIHBhcmVudEZpZWxkc0FyZU11dHVhbGx5RXhjbHVzaXZlLCByZXNwb25zZU5hbWUsIGZpZWxkMSwgZmllbGQyKSB7XG4gIHZhciBwYXJlbnRUeXBlMSA9IGZpZWxkMVswXSxcbiAgICAgIG5vZGUxID0gZmllbGQxWzFdLFxuICAgICAgZGVmMSA9IGZpZWxkMVsyXTtcbiAgdmFyIHBhcmVudFR5cGUyID0gZmllbGQyWzBdLFxuICAgICAgbm9kZTIgPSBmaWVsZDJbMV0sXG4gICAgICBkZWYyID0gZmllbGQyWzJdOyAvLyBJZiBpdCBpcyBrbm93biB0aGF0IHR3byBmaWVsZHMgY291bGQgbm90IHBvc3NpYmx5IGFwcGx5IGF0IHRoZSBzYW1lXG4gIC8vIHRpbWUsIGR1ZSB0byB0aGUgcGFyZW50IHR5cGVzLCB0aGVuIGl0IGlzIHNhZmUgdG8gcGVybWl0IHRoZW0gdG8gZGl2ZXJnZVxuICAvLyBpbiBhbGlhc2VkIGZpZWxkIG9yIGFyZ3VtZW50cyB1c2VkIGFzIHRoZXkgd2lsbCBub3QgcHJlc2VudCBhbnkgYW1iaWd1aXR5XG4gIC8vIGJ5IGRpZmZlcmluZy5cbiAgLy8gSXQgaXMga25vd24gdGhhdCB0d28gcGFyZW50IHR5cGVzIGNvdWxkIG5ldmVyIG92ZXJsYXAgaWYgdGhleSBhcmVcbiAgLy8gZGlmZmVyZW50IE9iamVjdCB0eXBlcy4gSW50ZXJmYWNlIG9yIFVuaW9uIHR5cGVzIG1pZ2h0IG92ZXJsYXAgLSBpZiBub3RcbiAgLy8gaW4gdGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIHNjaGVtYSwgdGhlbiBwZXJoYXBzIGluIHNvbWUgZnV0dXJlIHZlcnNpb24sXG4gIC8vIHRodXMgbWF5IG5vdCBzYWZlbHkgZGl2ZXJnZS5cblxuICB2YXIgYXJlTXV0dWFsbHlFeGNsdXNpdmUgPSBwYXJlbnRGaWVsZHNBcmVNdXR1YWxseUV4Y2x1c2l2ZSB8fCBwYXJlbnRUeXBlMSAhPT0gcGFyZW50VHlwZTIgJiYgaXNPYmplY3RUeXBlKHBhcmVudFR5cGUxKSAmJiBpc09iamVjdFR5cGUocGFyZW50VHlwZTIpO1xuXG4gIGlmICghYXJlTXV0dWFsbHlFeGNsdXNpdmUpIHtcbiAgICB2YXIgX25vZGUxJGFyZ3VtZW50cywgX25vZGUyJGFyZ3VtZW50cztcblxuICAgIC8vIFR3byBhbGlhc2VzIG11c3QgcmVmZXIgdG8gdGhlIHNhbWUgZmllbGQuXG4gICAgdmFyIG5hbWUxID0gbm9kZTEubmFtZS52YWx1ZTtcbiAgICB2YXIgbmFtZTIgPSBub2RlMi5uYW1lLnZhbHVlO1xuXG4gICAgaWYgKG5hbWUxICE9PSBuYW1lMikge1xuICAgICAgcmV0dXJuIFtbcmVzcG9uc2VOYW1lLCBcIlxcXCJcIi5jb25jYXQobmFtZTEsIFwiXFxcIiBhbmQgXFxcIlwiKS5jb25jYXQobmFtZTIsIFwiXFxcIiBhcmUgZGlmZmVyZW50IGZpZWxkc1wiKV0sIFtub2RlMV0sIFtub2RlMl1dO1xuICAgIH0gLy8gaXN0YW5idWwgaWdub3JlIG5leHQgKFNlZTogJ2h0dHBzOi8vZ2l0aHViLmNvbS9ncmFwaHFsL2dyYXBocWwtanMvaXNzdWVzLzIyMDMnKVxuXG5cbiAgICB2YXIgYXJnczEgPSAoX25vZGUxJGFyZ3VtZW50cyA9IG5vZGUxLmFyZ3VtZW50cykgIT09IG51bGwgJiYgX25vZGUxJGFyZ3VtZW50cyAhPT0gdm9pZCAwID8gX25vZGUxJGFyZ3VtZW50cyA6IFtdOyAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAoU2VlOiAnaHR0cHM6Ly9naXRodWIuY29tL2dyYXBocWwvZ3JhcGhxbC1qcy9pc3N1ZXMvMjIwMycpXG5cbiAgICB2YXIgYXJnczIgPSAoX25vZGUyJGFyZ3VtZW50cyA9IG5vZGUyLmFyZ3VtZW50cykgIT09IG51bGwgJiYgX25vZGUyJGFyZ3VtZW50cyAhPT0gdm9pZCAwID8gX25vZGUyJGFyZ3VtZW50cyA6IFtdOyAvLyBUd28gZmllbGQgY2FsbHMgbXVzdCBoYXZlIHRoZSBzYW1lIGFyZ3VtZW50cy5cblxuICAgIGlmICghc2FtZUFyZ3VtZW50cyhhcmdzMSwgYXJnczIpKSB7XG4gICAgICByZXR1cm4gW1tyZXNwb25zZU5hbWUsICd0aGV5IGhhdmUgZGlmZmVyaW5nIGFyZ3VtZW50cyddLCBbbm9kZTFdLCBbbm9kZTJdXTtcbiAgICB9XG4gIH0gLy8gVGhlIHJldHVybiB0eXBlIGZvciBlYWNoIGZpZWxkLlxuXG5cbiAgdmFyIHR5cGUxID0gZGVmMSA9PT0gbnVsbCB8fCBkZWYxID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZWYxLnR5cGU7XG4gIHZhciB0eXBlMiA9IGRlZjIgPT09IG51bGwgfHwgZGVmMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGVmMi50eXBlO1xuXG4gIGlmICh0eXBlMSAmJiB0eXBlMiAmJiBkb1R5cGVzQ29uZmxpY3QodHlwZTEsIHR5cGUyKSkge1xuICAgIHJldHVybiBbW3Jlc3BvbnNlTmFtZSwgXCJ0aGV5IHJldHVybiBjb25mbGljdGluZyB0eXBlcyBcXFwiXCIuY29uY2F0KGluc3BlY3QodHlwZTEpLCBcIlxcXCIgYW5kIFxcXCJcIikuY29uY2F0KGluc3BlY3QodHlwZTIpLCBcIlxcXCJcIildLCBbbm9kZTFdLCBbbm9kZTJdXTtcbiAgfSAvLyBDb2xsZWN0IGFuZCBjb21wYXJlIHN1Yi1maWVsZHMuIFVzZSB0aGUgc2FtZSBcInZpc2l0ZWQgZnJhZ21lbnQgbmFtZXNcIiBsaXN0XG4gIC8vIGZvciBib3RoIGNvbGxlY3Rpb25zIHNvIGZpZWxkcyBpbiBhIGZyYWdtZW50IHJlZmVyZW5jZSBhcmUgbmV2ZXJcbiAgLy8gY29tcGFyZWQgdG8gdGhlbXNlbHZlcy5cblxuXG4gIHZhciBzZWxlY3Rpb25TZXQxID0gbm9kZTEuc2VsZWN0aW9uU2V0O1xuICB2YXIgc2VsZWN0aW9uU2V0MiA9IG5vZGUyLnNlbGVjdGlvblNldDtcblxuICBpZiAoc2VsZWN0aW9uU2V0MSAmJiBzZWxlY3Rpb25TZXQyKSB7XG4gICAgdmFyIGNvbmZsaWN0cyA9IGZpbmRDb25mbGljdHNCZXR3ZWVuU3ViU2VsZWN0aW9uU2V0cyhjb250ZXh0LCBjYWNoZWRGaWVsZHNBbmRGcmFnbWVudE5hbWVzLCBjb21wYXJlZEZyYWdtZW50UGFpcnMsIGFyZU11dHVhbGx5RXhjbHVzaXZlLCBnZXROYW1lZFR5cGUodHlwZTEpLCBzZWxlY3Rpb25TZXQxLCBnZXROYW1lZFR5cGUodHlwZTIpLCBzZWxlY3Rpb25TZXQyKTtcbiAgICByZXR1cm4gc3ViZmllbGRDb25mbGljdHMoY29uZmxpY3RzLCByZXNwb25zZU5hbWUsIG5vZGUxLCBub2RlMik7XG4gIH1cbn1cblxuZnVuY3Rpb24gc2FtZUFyZ3VtZW50cyhhcmd1bWVudHMxLCBhcmd1bWVudHMyKSB7XG4gIGlmIChhcmd1bWVudHMxLmxlbmd0aCAhPT0gYXJndW1lbnRzMi5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gYXJndW1lbnRzMS5ldmVyeShmdW5jdGlvbiAoYXJndW1lbnQxKSB7XG4gICAgdmFyIGFyZ3VtZW50MiA9IGZpbmQoYXJndW1lbnRzMiwgZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gICAgICByZXR1cm4gYXJndW1lbnQubmFtZS52YWx1ZSA9PT0gYXJndW1lbnQxLm5hbWUudmFsdWU7XG4gICAgfSk7XG5cbiAgICBpZiAoIWFyZ3VtZW50Mikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiBzYW1lVmFsdWUoYXJndW1lbnQxLnZhbHVlLCBhcmd1bWVudDIudmFsdWUpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gc2FtZVZhbHVlKHZhbHVlMSwgdmFsdWUyKSB7XG4gIHJldHVybiBwcmludCh2YWx1ZTEpID09PSBwcmludCh2YWx1ZTIpO1xufSAvLyBUd28gdHlwZXMgY29uZmxpY3QgaWYgYm90aCB0eXBlcyBjb3VsZCBub3QgYXBwbHkgdG8gYSB2YWx1ZSBzaW11bHRhbmVvdXNseS5cbi8vIENvbXBvc2l0ZSB0eXBlcyBhcmUgaWdub3JlZCBhcyB0aGVpciBpbmRpdmlkdWFsIGZpZWxkIHR5cGVzIHdpbGwgYmUgY29tcGFyZWRcbi8vIGxhdGVyIHJlY3Vyc2l2ZWx5LiBIb3dldmVyIExpc3QgYW5kIE5vbi1OdWxsIHR5cGVzIG11c3QgbWF0Y2guXG5cblxuZnVuY3Rpb24gZG9UeXBlc0NvbmZsaWN0KHR5cGUxLCB0eXBlMikge1xuICBpZiAoaXNMaXN0VHlwZSh0eXBlMSkpIHtcbiAgICByZXR1cm4gaXNMaXN0VHlwZSh0eXBlMikgPyBkb1R5cGVzQ29uZmxpY3QodHlwZTEub2ZUeXBlLCB0eXBlMi5vZlR5cGUpIDogdHJ1ZTtcbiAgfVxuXG4gIGlmIChpc0xpc3RUeXBlKHR5cGUyKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKGlzTm9uTnVsbFR5cGUodHlwZTEpKSB7XG4gICAgcmV0dXJuIGlzTm9uTnVsbFR5cGUodHlwZTIpID8gZG9UeXBlc0NvbmZsaWN0KHR5cGUxLm9mVHlwZSwgdHlwZTIub2ZUeXBlKSA6IHRydWU7XG4gIH1cblxuICBpZiAoaXNOb25OdWxsVHlwZSh0eXBlMikpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmIChpc0xlYWZUeXBlKHR5cGUxKSB8fCBpc0xlYWZUeXBlKHR5cGUyKSkge1xuICAgIHJldHVybiB0eXBlMSAhPT0gdHlwZTI7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59IC8vIEdpdmVuIGEgc2VsZWN0aW9uIHNldCwgcmV0dXJuIHRoZSBjb2xsZWN0aW9uIG9mIGZpZWxkcyAoYSBtYXBwaW5nIG9mIHJlc3BvbnNlXG4vLyBuYW1lIHRvIGZpZWxkIG5vZGVzIGFuZCBkZWZpbml0aW9ucykgYXMgd2VsbCBhcyBhIGxpc3Qgb2YgZnJhZ21lbnQgbmFtZXNcbi8vIHJlZmVyZW5jZWQgdmlhIGZyYWdtZW50IHNwcmVhZHMuXG5cblxuZnVuY3Rpb24gZ2V0RmllbGRzQW5kRnJhZ21lbnROYW1lcyhjb250ZXh0LCBjYWNoZWRGaWVsZHNBbmRGcmFnbWVudE5hbWVzLCBwYXJlbnRUeXBlLCBzZWxlY3Rpb25TZXQpIHtcbiAgdmFyIGNhY2hlZCA9IGNhY2hlZEZpZWxkc0FuZEZyYWdtZW50TmFtZXMuZ2V0KHNlbGVjdGlvblNldCk7XG5cbiAgaWYgKCFjYWNoZWQpIHtcbiAgICB2YXIgbm9kZUFuZERlZnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHZhciBmcmFnbWVudE5hbWVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAgIF9jb2xsZWN0RmllbGRzQW5kRnJhZ21lbnROYW1lcyhjb250ZXh0LCBwYXJlbnRUeXBlLCBzZWxlY3Rpb25TZXQsIG5vZGVBbmREZWZzLCBmcmFnbWVudE5hbWVzKTtcblxuICAgIGNhY2hlZCA9IFtub2RlQW5kRGVmcywgT2JqZWN0LmtleXMoZnJhZ21lbnROYW1lcyldO1xuICAgIGNhY2hlZEZpZWxkc0FuZEZyYWdtZW50TmFtZXMuc2V0KHNlbGVjdGlvblNldCwgY2FjaGVkKTtcbiAgfVxuXG4gIHJldHVybiBjYWNoZWQ7XG59IC8vIEdpdmVuIGEgcmVmZXJlbmNlIHRvIGEgZnJhZ21lbnQsIHJldHVybiB0aGUgcmVwcmVzZW50ZWQgY29sbGVjdGlvbiBvZiBmaWVsZHNcbi8vIGFzIHdlbGwgYXMgYSBsaXN0IG9mIG5lc3RlZCBmcmFnbWVudCBuYW1lcyByZWZlcmVuY2VkIHZpYSBmcmFnbWVudCBzcHJlYWRzLlxuXG5cbmZ1bmN0aW9uIGdldFJlZmVyZW5jZWRGaWVsZHNBbmRGcmFnbWVudE5hbWVzKGNvbnRleHQsIGNhY2hlZEZpZWxkc0FuZEZyYWdtZW50TmFtZXMsIGZyYWdtZW50KSB7XG4gIC8vIFNob3J0LWNpcmN1aXQgYnVpbGRpbmcgYSB0eXBlIGZyb20gdGhlIG5vZGUgaWYgcG9zc2libGUuXG4gIHZhciBjYWNoZWQgPSBjYWNoZWRGaWVsZHNBbmRGcmFnbWVudE5hbWVzLmdldChmcmFnbWVudC5zZWxlY3Rpb25TZXQpO1xuXG4gIGlmIChjYWNoZWQpIHtcbiAgICByZXR1cm4gY2FjaGVkO1xuICB9XG5cbiAgdmFyIGZyYWdtZW50VHlwZSA9IHR5cGVGcm9tQVNUKGNvbnRleHQuZ2V0U2NoZW1hKCksIGZyYWdtZW50LnR5cGVDb25kaXRpb24pO1xuICByZXR1cm4gZ2V0RmllbGRzQW5kRnJhZ21lbnROYW1lcyhjb250ZXh0LCBjYWNoZWRGaWVsZHNBbmRGcmFnbWVudE5hbWVzLCBmcmFnbWVudFR5cGUsIGZyYWdtZW50LnNlbGVjdGlvblNldCk7XG59XG5cbmZ1bmN0aW9uIF9jb2xsZWN0RmllbGRzQW5kRnJhZ21lbnROYW1lcyhjb250ZXh0LCBwYXJlbnRUeXBlLCBzZWxlY3Rpb25TZXQsIG5vZGVBbmREZWZzLCBmcmFnbWVudE5hbWVzKSB7XG4gIGZvciAodmFyIF9pOSA9IDAsIF9zZWxlY3Rpb25TZXQkc2VsZWN0aTIgPSBzZWxlY3Rpb25TZXQuc2VsZWN0aW9uczsgX2k5IDwgX3NlbGVjdGlvblNldCRzZWxlY3RpMi5sZW5ndGg7IF9pOSsrKSB7XG4gICAgdmFyIHNlbGVjdGlvbiA9IF9zZWxlY3Rpb25TZXQkc2VsZWN0aTJbX2k5XTtcblxuICAgIHN3aXRjaCAoc2VsZWN0aW9uLmtpbmQpIHtcbiAgICAgIGNhc2UgS2luZC5GSUVMRDpcbiAgICAgICAge1xuICAgICAgICAgIHZhciBmaWVsZE5hbWUgPSBzZWxlY3Rpb24ubmFtZS52YWx1ZTtcbiAgICAgICAgICB2YXIgZmllbGREZWYgPSB2b2lkIDA7XG5cbiAgICAgICAgICBpZiAoaXNPYmplY3RUeXBlKHBhcmVudFR5cGUpIHx8IGlzSW50ZXJmYWNlVHlwZShwYXJlbnRUeXBlKSkge1xuICAgICAgICAgICAgZmllbGREZWYgPSBwYXJlbnRUeXBlLmdldEZpZWxkcygpW2ZpZWxkTmFtZV07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHJlc3BvbnNlTmFtZSA9IHNlbGVjdGlvbi5hbGlhcyA/IHNlbGVjdGlvbi5hbGlhcy52YWx1ZSA6IGZpZWxkTmFtZTtcblxuICAgICAgICAgIGlmICghbm9kZUFuZERlZnNbcmVzcG9uc2VOYW1lXSkge1xuICAgICAgICAgICAgbm9kZUFuZERlZnNbcmVzcG9uc2VOYW1lXSA9IFtdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG5vZGVBbmREZWZzW3Jlc3BvbnNlTmFtZV0ucHVzaChbcGFyZW50VHlwZSwgc2VsZWN0aW9uLCBmaWVsZERlZl0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgIGNhc2UgS2luZC5GUkFHTUVOVF9TUFJFQUQ6XG4gICAgICAgIGZyYWdtZW50TmFtZXNbc2VsZWN0aW9uLm5hbWUudmFsdWVdID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgS2luZC5JTkxJTkVfRlJBR01FTlQ6XG4gICAgICAgIHtcbiAgICAgICAgICB2YXIgdHlwZUNvbmRpdGlvbiA9IHNlbGVjdGlvbi50eXBlQ29uZGl0aW9uO1xuICAgICAgICAgIHZhciBpbmxpbmVGcmFnbWVudFR5cGUgPSB0eXBlQ29uZGl0aW9uID8gdHlwZUZyb21BU1QoY29udGV4dC5nZXRTY2hlbWEoKSwgdHlwZUNvbmRpdGlvbikgOiBwYXJlbnRUeXBlO1xuXG4gICAgICAgICAgX2NvbGxlY3RGaWVsZHNBbmRGcmFnbWVudE5hbWVzKGNvbnRleHQsIGlubGluZUZyYWdtZW50VHlwZSwgc2VsZWN0aW9uLnNlbGVjdGlvblNldCwgbm9kZUFuZERlZnMsIGZyYWdtZW50TmFtZXMpO1xuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gIH1cbn0gLy8gR2l2ZW4gYSBzZXJpZXMgb2YgQ29uZmxpY3RzIHdoaWNoIG9jY3VycmVkIGJldHdlZW4gdHdvIHN1Yi1maWVsZHMsIGdlbmVyYXRlXG4vLyBhIHNpbmdsZSBDb25mbGljdC5cblxuXG5mdW5jdGlvbiBzdWJmaWVsZENvbmZsaWN0cyhjb25mbGljdHMsIHJlc3BvbnNlTmFtZSwgbm9kZTEsIG5vZGUyKSB7XG4gIGlmIChjb25mbGljdHMubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBbW3Jlc3BvbnNlTmFtZSwgY29uZmxpY3RzLm1hcChmdW5jdGlvbiAoX3JlZjYpIHtcbiAgICAgIHZhciByZWFzb24gPSBfcmVmNlswXTtcbiAgICAgIHJldHVybiByZWFzb247XG4gICAgfSldLCBjb25mbGljdHMucmVkdWNlKGZ1bmN0aW9uIChhbGxGaWVsZHMsIF9yZWY3KSB7XG4gICAgICB2YXIgZmllbGRzMSA9IF9yZWY3WzFdO1xuICAgICAgcmV0dXJuIGFsbEZpZWxkcy5jb25jYXQoZmllbGRzMSk7XG4gICAgfSwgW25vZGUxXSksIGNvbmZsaWN0cy5yZWR1Y2UoZnVuY3Rpb24gKGFsbEZpZWxkcywgX3JlZjgpIHtcbiAgICAgIHZhciBmaWVsZHMyID0gX3JlZjhbMl07XG4gICAgICByZXR1cm4gYWxsRmllbGRzLmNvbmNhdChmaWVsZHMyKTtcbiAgICB9LCBbbm9kZTJdKV07XG4gIH1cbn1cbi8qKlxuICogQSB3YXkgdG8ga2VlcCB0cmFjayBvZiBwYWlycyBvZiB0aGluZ3Mgd2hlbiB0aGUgb3JkZXJpbmcgb2YgdGhlIHBhaXIgZG9lc1xuICogbm90IG1hdHRlci4gV2UgZG8gdGhpcyBieSBtYWludGFpbmluZyBhIHNvcnQgb2YgZG91YmxlIGFkamFjZW5jeSBzZXRzLlxuICovXG5cblxudmFyIFBhaXJTZXQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBQYWlyU2V0KCkge1xuICAgIHRoaXMuX2RhdGEgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFBhaXJTZXQucHJvdG90eXBlO1xuXG4gIF9wcm90by5oYXMgPSBmdW5jdGlvbiBoYXMoYSwgYiwgYXJlTXV0dWFsbHlFeGNsdXNpdmUpIHtcbiAgICB2YXIgZmlyc3QgPSB0aGlzLl9kYXRhW2FdO1xuICAgIHZhciByZXN1bHQgPSBmaXJzdCAmJiBmaXJzdFtiXTtcblxuICAgIGlmIChyZXN1bHQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gLy8gYXJlTXV0dWFsbHlFeGNsdXNpdmUgYmVpbmcgZmFsc2UgaXMgYSBzdXBlcnNldCBvZiBiZWluZyB0cnVlLFxuICAgIC8vIGhlbmNlIGlmIHdlIHdhbnQgdG8ga25vdyBpZiB0aGlzIFBhaXJTZXQgXCJoYXNcIiB0aGVzZSB0d28gd2l0aCBub1xuICAgIC8vIGV4Y2x1c2l2aXR5LCB3ZSBoYXZlIHRvIGVuc3VyZSBpdCB3YXMgYWRkZWQgYXMgc3VjaC5cblxuXG4gICAgaWYgKGFyZU11dHVhbGx5RXhjbHVzaXZlID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgX3Byb3RvLmFkZCA9IGZ1bmN0aW9uIGFkZChhLCBiLCBhcmVNdXR1YWxseUV4Y2x1c2l2ZSkge1xuICAgIHRoaXMuX3BhaXJTZXRBZGQoYSwgYiwgYXJlTXV0dWFsbHlFeGNsdXNpdmUpO1xuXG4gICAgdGhpcy5fcGFpclNldEFkZChiLCBhLCBhcmVNdXR1YWxseUV4Y2x1c2l2ZSk7XG4gIH07XG5cbiAgX3Byb3RvLl9wYWlyU2V0QWRkID0gZnVuY3Rpb24gX3BhaXJTZXRBZGQoYSwgYiwgYXJlTXV0dWFsbHlFeGNsdXNpdmUpIHtcbiAgICB2YXIgbWFwID0gdGhpcy5fZGF0YVthXTtcblxuICAgIGlmICghbWFwKSB7XG4gICAgICBtYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgdGhpcy5fZGF0YVthXSA9IG1hcDtcbiAgICB9XG5cbiAgICBtYXBbYl0gPSBhcmVNdXR1YWxseUV4Y2x1c2l2ZTtcbiAgfTtcblxuICByZXR1cm4gUGFpclNldDtcbn0oKTtcbiIsImltcG9ydCBpbnNwZWN0IGZyb20gXCIuLi8uLi9qc3V0aWxzL2luc3BlY3QubWpzXCI7XG5pbXBvcnQgeyBHcmFwaFFMRXJyb3IgfSBmcm9tIFwiLi4vLi4vZXJyb3IvR3JhcGhRTEVycm9yLm1qc1wiO1xuaW1wb3J0IHsgaXNDb21wb3NpdGVUeXBlIH0gZnJvbSBcIi4uLy4uL3R5cGUvZGVmaW5pdGlvbi5tanNcIjtcbmltcG9ydCB7IHR5cGVGcm9tQVNUIH0gZnJvbSBcIi4uLy4uL3V0aWxpdGllcy90eXBlRnJvbUFTVC5tanNcIjtcbmltcG9ydCB7IGRvVHlwZXNPdmVybGFwIH0gZnJvbSBcIi4uLy4uL3V0aWxpdGllcy90eXBlQ29tcGFyYXRvcnMubWpzXCI7XG5cbi8qKlxuICogUG9zc2libGUgZnJhZ21lbnQgc3ByZWFkXG4gKlxuICogQSBmcmFnbWVudCBzcHJlYWQgaXMgb25seSB2YWxpZCBpZiB0aGUgdHlwZSBjb25kaXRpb24gY291bGQgZXZlciBwb3NzaWJseVxuICogYmUgdHJ1ZTogaWYgdGhlcmUgaXMgYSBub24tZW1wdHkgaW50ZXJzZWN0aW9uIG9mIHRoZSBwb3NzaWJsZSBwYXJlbnQgdHlwZXMsXG4gKiBhbmQgcG9zc2libGUgdHlwZXMgd2hpY2ggcGFzcyB0aGUgdHlwZSBjb25kaXRpb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBQb3NzaWJsZUZyYWdtZW50U3ByZWFkc1J1bGUoY29udGV4dCkge1xuICByZXR1cm4ge1xuICAgIElubGluZUZyYWdtZW50OiBmdW5jdGlvbiBJbmxpbmVGcmFnbWVudChub2RlKSB7XG4gICAgICB2YXIgZnJhZ1R5cGUgPSBjb250ZXh0LmdldFR5cGUoKTtcbiAgICAgIHZhciBwYXJlbnRUeXBlID0gY29udGV4dC5nZXRQYXJlbnRUeXBlKCk7XG5cbiAgICAgIGlmIChpc0NvbXBvc2l0ZVR5cGUoZnJhZ1R5cGUpICYmIGlzQ29tcG9zaXRlVHlwZShwYXJlbnRUeXBlKSAmJiAhZG9UeXBlc092ZXJsYXAoY29udGV4dC5nZXRTY2hlbWEoKSwgZnJhZ1R5cGUsIHBhcmVudFR5cGUpKSB7XG4gICAgICAgIHZhciBwYXJlbnRUeXBlU3RyID0gaW5zcGVjdChwYXJlbnRUeXBlKTtcbiAgICAgICAgdmFyIGZyYWdUeXBlU3RyID0gaW5zcGVjdChmcmFnVHlwZSk7XG4gICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IobmV3IEdyYXBoUUxFcnJvcihcIkZyYWdtZW50IGNhbm5vdCBiZSBzcHJlYWQgaGVyZSBhcyBvYmplY3RzIG9mIHR5cGUgXFxcIlwiLmNvbmNhdChwYXJlbnRUeXBlU3RyLCBcIlxcXCIgY2FuIG5ldmVyIGJlIG9mIHR5cGUgXFxcIlwiKS5jb25jYXQoZnJhZ1R5cGVTdHIsIFwiXFxcIi5cIiksIG5vZGUpKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIEZyYWdtZW50U3ByZWFkOiBmdW5jdGlvbiBGcmFnbWVudFNwcmVhZChub2RlKSB7XG4gICAgICB2YXIgZnJhZ05hbWUgPSBub2RlLm5hbWUudmFsdWU7XG4gICAgICB2YXIgZnJhZ1R5cGUgPSBnZXRGcmFnbWVudFR5cGUoY29udGV4dCwgZnJhZ05hbWUpO1xuICAgICAgdmFyIHBhcmVudFR5cGUgPSBjb250ZXh0LmdldFBhcmVudFR5cGUoKTtcblxuICAgICAgaWYgKGZyYWdUeXBlICYmIHBhcmVudFR5cGUgJiYgIWRvVHlwZXNPdmVybGFwKGNvbnRleHQuZ2V0U2NoZW1hKCksIGZyYWdUeXBlLCBwYXJlbnRUeXBlKSkge1xuICAgICAgICB2YXIgcGFyZW50VHlwZVN0ciA9IGluc3BlY3QocGFyZW50VHlwZSk7XG4gICAgICAgIHZhciBmcmFnVHlwZVN0ciA9IGluc3BlY3QoZnJhZ1R5cGUpO1xuICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKG5ldyBHcmFwaFFMRXJyb3IoXCJGcmFnbWVudCBcXFwiXCIuY29uY2F0KGZyYWdOYW1lLCBcIlxcXCIgY2Fubm90IGJlIHNwcmVhZCBoZXJlIGFzIG9iamVjdHMgb2YgdHlwZSBcXFwiXCIpLmNvbmNhdChwYXJlbnRUeXBlU3RyLCBcIlxcXCIgY2FuIG5ldmVyIGJlIG9mIHR5cGUgXFxcIlwiKS5jb25jYXQoZnJhZ1R5cGVTdHIsIFwiXFxcIi5cIiksIG5vZGUpKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldEZyYWdtZW50VHlwZShjb250ZXh0LCBuYW1lKSB7XG4gIHZhciBmcmFnID0gY29udGV4dC5nZXRGcmFnbWVudChuYW1lKTtcblxuICBpZiAoZnJhZykge1xuICAgIHZhciB0eXBlID0gdHlwZUZyb21BU1QoY29udGV4dC5nZXRTY2hlbWEoKSwgZnJhZy50eXBlQ29uZGl0aW9uKTtcblxuICAgIGlmIChpc0NvbXBvc2l0ZVR5cGUodHlwZSkpIHtcbiAgICAgIHJldHVybiB0eXBlO1xuICAgIH1cbiAgfVxufVxuIiwidmFyIF9kZWZLaW5kVG9FeHRLaW5kO1xuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5pbXBvcnQgaW5zcGVjdCBmcm9tIFwiLi4vLi4vanN1dGlscy9pbnNwZWN0Lm1qc1wiO1xuaW1wb3J0IGludmFyaWFudCBmcm9tIFwiLi4vLi4vanN1dGlscy9pbnZhcmlhbnQubWpzXCI7XG5pbXBvcnQgZGlkWW91TWVhbiBmcm9tIFwiLi4vLi4vanN1dGlscy9kaWRZb3VNZWFuLm1qc1wiO1xuaW1wb3J0IHN1Z2dlc3Rpb25MaXN0IGZyb20gXCIuLi8uLi9qc3V0aWxzL3N1Z2dlc3Rpb25MaXN0Lm1qc1wiO1xuaW1wb3J0IHsgR3JhcGhRTEVycm9yIH0gZnJvbSBcIi4uLy4uL2Vycm9yL0dyYXBoUUxFcnJvci5tanNcIjtcbmltcG9ydCB7IEtpbmQgfSBmcm9tIFwiLi4vLi4vbGFuZ3VhZ2Uva2luZHMubWpzXCI7XG5pbXBvcnQgeyBpc1R5cGVEZWZpbml0aW9uTm9kZSB9IGZyb20gXCIuLi8uLi9sYW5ndWFnZS9wcmVkaWNhdGVzLm1qc1wiO1xuaW1wb3J0IHsgaXNTY2FsYXJUeXBlLCBpc09iamVjdFR5cGUsIGlzSW50ZXJmYWNlVHlwZSwgaXNVbmlvblR5cGUsIGlzRW51bVR5cGUsIGlzSW5wdXRPYmplY3RUeXBlIH0gZnJvbSBcIi4uLy4uL3R5cGUvZGVmaW5pdGlvbi5tanNcIjtcblxuLyoqXG4gKiBQb3NzaWJsZSB0eXBlIGV4dGVuc2lvblxuICpcbiAqIEEgdHlwZSBleHRlbnNpb24gaXMgb25seSB2YWxpZCBpZiB0aGUgdHlwZSBpcyBkZWZpbmVkIGFuZCBoYXMgdGhlIHNhbWUga2luZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIFBvc3NpYmxlVHlwZUV4dGVuc2lvbnNSdWxlKGNvbnRleHQpIHtcbiAgdmFyIHNjaGVtYSA9IGNvbnRleHQuZ2V0U2NoZW1hKCk7XG4gIHZhciBkZWZpbmVkVHlwZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gIGZvciAodmFyIF9pMiA9IDAsIF9jb250ZXh0JGdldERvY3VtZW50JDIgPSBjb250ZXh0LmdldERvY3VtZW50KCkuZGVmaW5pdGlvbnM7IF9pMiA8IF9jb250ZXh0JGdldERvY3VtZW50JDIubGVuZ3RoOyBfaTIrKykge1xuICAgIHZhciBkZWYgPSBfY29udGV4dCRnZXREb2N1bWVudCQyW19pMl07XG5cbiAgICBpZiAoaXNUeXBlRGVmaW5pdGlvbk5vZGUoZGVmKSkge1xuICAgICAgZGVmaW5lZFR5cGVzW2RlZi5uYW1lLnZhbHVlXSA9IGRlZjtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIFNjYWxhclR5cGVFeHRlbnNpb246IGNoZWNrRXh0ZW5zaW9uLFxuICAgIE9iamVjdFR5cGVFeHRlbnNpb246IGNoZWNrRXh0ZW5zaW9uLFxuICAgIEludGVyZmFjZVR5cGVFeHRlbnNpb246IGNoZWNrRXh0ZW5zaW9uLFxuICAgIFVuaW9uVHlwZUV4dGVuc2lvbjogY2hlY2tFeHRlbnNpb24sXG4gICAgRW51bVR5cGVFeHRlbnNpb246IGNoZWNrRXh0ZW5zaW9uLFxuICAgIElucHV0T2JqZWN0VHlwZUV4dGVuc2lvbjogY2hlY2tFeHRlbnNpb25cbiAgfTtcblxuICBmdW5jdGlvbiBjaGVja0V4dGVuc2lvbihub2RlKSB7XG4gICAgdmFyIHR5cGVOYW1lID0gbm9kZS5uYW1lLnZhbHVlO1xuICAgIHZhciBkZWZOb2RlID0gZGVmaW5lZFR5cGVzW3R5cGVOYW1lXTtcbiAgICB2YXIgZXhpc3RpbmdUeXBlID0gc2NoZW1hID09PSBudWxsIHx8IHNjaGVtYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogc2NoZW1hLmdldFR5cGUodHlwZU5hbWUpO1xuICAgIHZhciBleHBlY3RlZEtpbmQ7XG5cbiAgICBpZiAoZGVmTm9kZSkge1xuICAgICAgZXhwZWN0ZWRLaW5kID0gZGVmS2luZFRvRXh0S2luZFtkZWZOb2RlLmtpbmRdO1xuICAgIH0gZWxzZSBpZiAoZXhpc3RpbmdUeXBlKSB7XG4gICAgICBleHBlY3RlZEtpbmQgPSB0eXBlVG9FeHRLaW5kKGV4aXN0aW5nVHlwZSk7XG4gICAgfVxuXG4gICAgaWYgKGV4cGVjdGVkS2luZCkge1xuICAgICAgaWYgKGV4cGVjdGVkS2luZCAhPT0gbm9kZS5raW5kKSB7XG4gICAgICAgIHZhciBraW5kU3RyID0gZXh0ZW5zaW9uS2luZFRvVHlwZU5hbWUobm9kZS5raW5kKTtcbiAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihuZXcgR3JhcGhRTEVycm9yKFwiQ2Fubm90IGV4dGVuZCBub24tXCIuY29uY2F0KGtpbmRTdHIsIFwiIHR5cGUgXFxcIlwiKS5jb25jYXQodHlwZU5hbWUsIFwiXFxcIi5cIiksIGRlZk5vZGUgPyBbZGVmTm9kZSwgbm9kZV0gOiBub2RlKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhbGxUeXBlTmFtZXMgPSBPYmplY3Qua2V5cyhkZWZpbmVkVHlwZXMpO1xuXG4gICAgICBpZiAoc2NoZW1hKSB7XG4gICAgICAgIGFsbFR5cGVOYW1lcyA9IGFsbFR5cGVOYW1lcy5jb25jYXQoT2JqZWN0LmtleXMoc2NoZW1hLmdldFR5cGVNYXAoKSkpO1xuICAgICAgfVxuXG4gICAgICB2YXIgc3VnZ2VzdGVkVHlwZXMgPSBzdWdnZXN0aW9uTGlzdCh0eXBlTmFtZSwgYWxsVHlwZU5hbWVzKTtcbiAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IobmV3IEdyYXBoUUxFcnJvcihcIkNhbm5vdCBleHRlbmQgdHlwZSBcXFwiXCIuY29uY2F0KHR5cGVOYW1lLCBcIlxcXCIgYmVjYXVzZSBpdCBpcyBub3QgZGVmaW5lZC5cIikgKyBkaWRZb3VNZWFuKHN1Z2dlc3RlZFR5cGVzKSwgbm9kZS5uYW1lKSk7XG4gICAgfVxuICB9XG59XG52YXIgZGVmS2luZFRvRXh0S2luZCA9IChfZGVmS2luZFRvRXh0S2luZCA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX2RlZktpbmRUb0V4dEtpbmQsIEtpbmQuU0NBTEFSX1RZUEVfREVGSU5JVElPTiwgS2luZC5TQ0FMQVJfVFlQRV9FWFRFTlNJT04pLCBfZGVmaW5lUHJvcGVydHkoX2RlZktpbmRUb0V4dEtpbmQsIEtpbmQuT0JKRUNUX1RZUEVfREVGSU5JVElPTiwgS2luZC5PQkpFQ1RfVFlQRV9FWFRFTlNJT04pLCBfZGVmaW5lUHJvcGVydHkoX2RlZktpbmRUb0V4dEtpbmQsIEtpbmQuSU5URVJGQUNFX1RZUEVfREVGSU5JVElPTiwgS2luZC5JTlRFUkZBQ0VfVFlQRV9FWFRFTlNJT04pLCBfZGVmaW5lUHJvcGVydHkoX2RlZktpbmRUb0V4dEtpbmQsIEtpbmQuVU5JT05fVFlQRV9ERUZJTklUSU9OLCBLaW5kLlVOSU9OX1RZUEVfRVhURU5TSU9OKSwgX2RlZmluZVByb3BlcnR5KF9kZWZLaW5kVG9FeHRLaW5kLCBLaW5kLkVOVU1fVFlQRV9ERUZJTklUSU9OLCBLaW5kLkVOVU1fVFlQRV9FWFRFTlNJT04pLCBfZGVmaW5lUHJvcGVydHkoX2RlZktpbmRUb0V4dEtpbmQsIEtpbmQuSU5QVVRfT0JKRUNUX1RZUEVfREVGSU5JVElPTiwgS2luZC5JTlBVVF9PQkpFQ1RfVFlQRV9FWFRFTlNJT04pLCBfZGVmS2luZFRvRXh0S2luZCk7XG5cbmZ1bmN0aW9uIHR5cGVUb0V4dEtpbmQodHlwZSkge1xuICBpZiAoaXNTY2FsYXJUeXBlKHR5cGUpKSB7XG4gICAgcmV0dXJuIEtpbmQuU0NBTEFSX1RZUEVfRVhURU5TSU9OO1xuICB9XG5cbiAgaWYgKGlzT2JqZWN0VHlwZSh0eXBlKSkge1xuICAgIHJldHVybiBLaW5kLk9CSkVDVF9UWVBFX0VYVEVOU0lPTjtcbiAgfVxuXG4gIGlmIChpc0ludGVyZmFjZVR5cGUodHlwZSkpIHtcbiAgICByZXR1cm4gS2luZC5JTlRFUkZBQ0VfVFlQRV9FWFRFTlNJT047XG4gIH1cblxuICBpZiAoaXNVbmlvblR5cGUodHlwZSkpIHtcbiAgICByZXR1cm4gS2luZC5VTklPTl9UWVBFX0VYVEVOU0lPTjtcbiAgfVxuXG4gIGlmIChpc0VudW1UeXBlKHR5cGUpKSB7XG4gICAgcmV0dXJuIEtpbmQuRU5VTV9UWVBFX0VYVEVOU0lPTjtcbiAgfSAvLyBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAoU2VlOiAnaHR0cHM6Ly9naXRodWIuY29tL2dyYXBocWwvZ3JhcGhxbC1qcy9pc3N1ZXMvMjYxOCcpXG5cblxuICBpZiAoaXNJbnB1dE9iamVjdFR5cGUodHlwZSkpIHtcbiAgICByZXR1cm4gS2luZC5JTlBVVF9PQkpFQ1RfVFlQRV9FWFRFTlNJT047XG4gIH0gLy8gaXN0YW5idWwgaWdub3JlIG5leHQgKE5vdCByZWFjaGFibGUuIEFsbCBwb3NzaWJsZSB0eXBlcyBoYXZlIGJlZW4gY29uc2lkZXJlZClcblxuXG4gIGZhbHNlIHx8IGludmFyaWFudCgwLCAnVW5leHBlY3RlZCB0eXBlOiAnICsgaW5zcGVjdCh0eXBlKSk7XG59XG5cbmZ1bmN0aW9uIGV4dGVuc2lvbktpbmRUb1R5cGVOYW1lKGtpbmQpIHtcbiAgc3dpdGNoIChraW5kKSB7XG4gICAgY2FzZSBLaW5kLlNDQUxBUl9UWVBFX0VYVEVOU0lPTjpcbiAgICAgIHJldHVybiAnc2NhbGFyJztcblxuICAgIGNhc2UgS2luZC5PQkpFQ1RfVFlQRV9FWFRFTlNJT046XG4gICAgICByZXR1cm4gJ29iamVjdCc7XG5cbiAgICBjYXNlIEtpbmQuSU5URVJGQUNFX1RZUEVfRVhURU5TSU9OOlxuICAgICAgcmV0dXJuICdpbnRlcmZhY2UnO1xuXG4gICAgY2FzZSBLaW5kLlVOSU9OX1RZUEVfRVhURU5TSU9OOlxuICAgICAgcmV0dXJuICd1bmlvbic7XG5cbiAgICBjYXNlIEtpbmQuRU5VTV9UWVBFX0VYVEVOU0lPTjpcbiAgICAgIHJldHVybiAnZW51bSc7XG5cbiAgICBjYXNlIEtpbmQuSU5QVVRfT0JKRUNUX1RZUEVfRVhURU5TSU9OOlxuICAgICAgcmV0dXJuICdpbnB1dCBvYmplY3QnO1xuICB9IC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0IChOb3QgcmVhY2hhYmxlLiBBbGwgcG9zc2libGUgdHlwZXMgaGF2ZSBiZWVuIGNvbnNpZGVyZWQpXG5cblxuICBmYWxzZSB8fCBpbnZhcmlhbnQoMCwgJ1VuZXhwZWN0ZWQga2luZDogJyArIGluc3BlY3Qoa2luZCkpO1xufVxuIiwiZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pOyBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmltcG9ydCBpbnNwZWN0IGZyb20gXCIuLi8uLi9qc3V0aWxzL2luc3BlY3QubWpzXCI7XG5pbXBvcnQga2V5TWFwIGZyb20gXCIuLi8uLi9qc3V0aWxzL2tleU1hcC5tanNcIjtcbmltcG9ydCB7IEdyYXBoUUxFcnJvciB9IGZyb20gXCIuLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IubWpzXCI7XG5pbXBvcnQgeyBLaW5kIH0gZnJvbSBcIi4uLy4uL2xhbmd1YWdlL2tpbmRzLm1qc1wiO1xuaW1wb3J0IHsgcHJpbnQgfSBmcm9tIFwiLi4vLi4vbGFuZ3VhZ2UvcHJpbnRlci5tanNcIjtcbmltcG9ydCB7IHNwZWNpZmllZERpcmVjdGl2ZXMgfSBmcm9tIFwiLi4vLi4vdHlwZS9kaXJlY3RpdmVzLm1qc1wiO1xuaW1wb3J0IHsgaXNUeXBlLCBpc1JlcXVpcmVkQXJndW1lbnQgfSBmcm9tIFwiLi4vLi4vdHlwZS9kZWZpbml0aW9uLm1qc1wiO1xuXG4vKipcbiAqIFByb3ZpZGVkIHJlcXVpcmVkIGFyZ3VtZW50c1xuICpcbiAqIEEgZmllbGQgb3IgZGlyZWN0aXZlIGlzIG9ubHkgdmFsaWQgaWYgYWxsIHJlcXVpcmVkIChub24tbnVsbCB3aXRob3V0IGFcbiAqIGRlZmF1bHQgdmFsdWUpIGZpZWxkIGFyZ3VtZW50cyBoYXZlIGJlZW4gcHJvdmlkZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBQcm92aWRlZFJlcXVpcmVkQXJndW1lbnRzUnVsZShjb250ZXh0KSB7XG4gIHJldHVybiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIFByb3ZpZGVkUmVxdWlyZWRBcmd1bWVudHNPbkRpcmVjdGl2ZXNSdWxlKGNvbnRleHQpKSwge30sIHtcbiAgICBGaWVsZDoge1xuICAgICAgLy8gVmFsaWRhdGUgb24gbGVhdmUgdG8gYWxsb3cgZm9yIGRlZXBlciBlcnJvcnMgdG8gYXBwZWFyIGZpcnN0LlxuICAgICAgbGVhdmU6IGZ1bmN0aW9uIGxlYXZlKGZpZWxkTm9kZSkge1xuICAgICAgICB2YXIgX2ZpZWxkTm9kZSRhcmd1bWVudHM7XG5cbiAgICAgICAgdmFyIGZpZWxkRGVmID0gY29udGV4dC5nZXRGaWVsZERlZigpO1xuXG4gICAgICAgIGlmICghZmllbGREZWYpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0gLy8gaXN0YW5idWwgaWdub3JlIG5leHQgKFNlZTogJ2h0dHBzOi8vZ2l0aHViLmNvbS9ncmFwaHFsL2dyYXBocWwtanMvaXNzdWVzLzIyMDMnKVxuXG5cbiAgICAgICAgdmFyIGFyZ05vZGVzID0gKF9maWVsZE5vZGUkYXJndW1lbnRzID0gZmllbGROb2RlLmFyZ3VtZW50cykgIT09IG51bGwgJiYgX2ZpZWxkTm9kZSRhcmd1bWVudHMgIT09IHZvaWQgMCA/IF9maWVsZE5vZGUkYXJndW1lbnRzIDogW107XG4gICAgICAgIHZhciBhcmdOb2RlTWFwID0ga2V5TWFwKGFyZ05vZGVzLCBmdW5jdGlvbiAoYXJnKSB7XG4gICAgICAgICAgcmV0dXJuIGFyZy5uYW1lLnZhbHVlO1xuICAgICAgICB9KTtcblxuICAgICAgICBmb3IgKHZhciBfaTIgPSAwLCBfZmllbGREZWYkYXJnczIgPSBmaWVsZERlZi5hcmdzOyBfaTIgPCBfZmllbGREZWYkYXJnczIubGVuZ3RoOyBfaTIrKykge1xuICAgICAgICAgIHZhciBhcmdEZWYgPSBfZmllbGREZWYkYXJnczJbX2kyXTtcbiAgICAgICAgICB2YXIgYXJnTm9kZSA9IGFyZ05vZGVNYXBbYXJnRGVmLm5hbWVdO1xuXG4gICAgICAgICAgaWYgKCFhcmdOb2RlICYmIGlzUmVxdWlyZWRBcmd1bWVudChhcmdEZWYpKSB7XG4gICAgICAgICAgICB2YXIgYXJnVHlwZVN0ciA9IGluc3BlY3QoYXJnRGVmLnR5cGUpO1xuICAgICAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihuZXcgR3JhcGhRTEVycm9yKFwiRmllbGQgXFxcIlwiLmNvbmNhdChmaWVsZERlZi5uYW1lLCBcIlxcXCIgYXJndW1lbnQgXFxcIlwiKS5jb25jYXQoYXJnRGVmLm5hbWUsIFwiXFxcIiBvZiB0eXBlIFxcXCJcIikuY29uY2F0KGFyZ1R5cGVTdHIsIFwiXFxcIiBpcyByZXF1aXJlZCwgYnV0IGl0IHdhcyBub3QgcHJvdmlkZWQuXCIpLCBmaWVsZE5vZGUpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufVxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gUHJvdmlkZWRSZXF1aXJlZEFyZ3VtZW50c09uRGlyZWN0aXZlc1J1bGUoY29udGV4dCkge1xuICB2YXIgcmVxdWlyZWRBcmdzTWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdmFyIHNjaGVtYSA9IGNvbnRleHQuZ2V0U2NoZW1hKCk7XG4gIHZhciBkZWZpbmVkRGlyZWN0aXZlcyA9IHNjaGVtYSA/IHNjaGVtYS5nZXREaXJlY3RpdmVzKCkgOiBzcGVjaWZpZWREaXJlY3RpdmVzO1xuXG4gIGZvciAodmFyIF9pNCA9IDA7IF9pNCA8IGRlZmluZWREaXJlY3RpdmVzLmxlbmd0aDsgX2k0KyspIHtcbiAgICB2YXIgZGlyZWN0aXZlID0gZGVmaW5lZERpcmVjdGl2ZXNbX2k0XTtcbiAgICByZXF1aXJlZEFyZ3NNYXBbZGlyZWN0aXZlLm5hbWVdID0ga2V5TWFwKGRpcmVjdGl2ZS5hcmdzLmZpbHRlcihpc1JlcXVpcmVkQXJndW1lbnQpLCBmdW5jdGlvbiAoYXJnKSB7XG4gICAgICByZXR1cm4gYXJnLm5hbWU7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgYXN0RGVmaW5pdGlvbnMgPSBjb250ZXh0LmdldERvY3VtZW50KCkuZGVmaW5pdGlvbnM7XG5cbiAgZm9yICh2YXIgX2k2ID0gMDsgX2k2IDwgYXN0RGVmaW5pdGlvbnMubGVuZ3RoOyBfaTYrKykge1xuICAgIHZhciBkZWYgPSBhc3REZWZpbml0aW9uc1tfaTZdO1xuXG4gICAgaWYgKGRlZi5raW5kID09PSBLaW5kLkRJUkVDVElWRV9ERUZJTklUSU9OKSB7XG4gICAgICB2YXIgX2RlZiRhcmd1bWVudHM7XG5cbiAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0IChTZWU6ICdodHRwczovL2dpdGh1Yi5jb20vZ3JhcGhxbC9ncmFwaHFsLWpzL2lzc3Vlcy8yMjAzJylcbiAgICAgIHZhciBhcmdOb2RlcyA9IChfZGVmJGFyZ3VtZW50cyA9IGRlZi5hcmd1bWVudHMpICE9PSBudWxsICYmIF9kZWYkYXJndW1lbnRzICE9PSB2b2lkIDAgPyBfZGVmJGFyZ3VtZW50cyA6IFtdO1xuICAgICAgcmVxdWlyZWRBcmdzTWFwW2RlZi5uYW1lLnZhbHVlXSA9IGtleU1hcChhcmdOb2Rlcy5maWx0ZXIoaXNSZXF1aXJlZEFyZ3VtZW50Tm9kZSksIGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgICAgcmV0dXJuIGFyZy5uYW1lLnZhbHVlO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBEaXJlY3RpdmU6IHtcbiAgICAgIC8vIFZhbGlkYXRlIG9uIGxlYXZlIHRvIGFsbG93IGZvciBkZWVwZXIgZXJyb3JzIHRvIGFwcGVhciBmaXJzdC5cbiAgICAgIGxlYXZlOiBmdW5jdGlvbiBsZWF2ZShkaXJlY3RpdmVOb2RlKSB7XG4gICAgICAgIHZhciBkaXJlY3RpdmVOYW1lID0gZGlyZWN0aXZlTm9kZS5uYW1lLnZhbHVlO1xuICAgICAgICB2YXIgcmVxdWlyZWRBcmdzID0gcmVxdWlyZWRBcmdzTWFwW2RpcmVjdGl2ZU5hbWVdO1xuXG4gICAgICAgIGlmIChyZXF1aXJlZEFyZ3MpIHtcbiAgICAgICAgICB2YXIgX2RpcmVjdGl2ZU5vZGUkYXJndW1lO1xuXG4gICAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHQgKFNlZTogJ2h0dHBzOi8vZ2l0aHViLmNvbS9ncmFwaHFsL2dyYXBocWwtanMvaXNzdWVzLzIyMDMnKVxuICAgICAgICAgIHZhciBfYXJnTm9kZXMgPSAoX2RpcmVjdGl2ZU5vZGUkYXJndW1lID0gZGlyZWN0aXZlTm9kZS5hcmd1bWVudHMpICE9PSBudWxsICYmIF9kaXJlY3RpdmVOb2RlJGFyZ3VtZSAhPT0gdm9pZCAwID8gX2RpcmVjdGl2ZU5vZGUkYXJndW1lIDogW107XG5cbiAgICAgICAgICB2YXIgYXJnTm9kZU1hcCA9IGtleU1hcChfYXJnTm9kZXMsIGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgICAgICAgIHJldHVybiBhcmcubmFtZS52YWx1ZTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGZvciAodmFyIF9pOCA9IDAsIF9PYmplY3Qka2V5czIgPSBPYmplY3Qua2V5cyhyZXF1aXJlZEFyZ3MpOyBfaTggPCBfT2JqZWN0JGtleXMyLmxlbmd0aDsgX2k4KyspIHtcbiAgICAgICAgICAgIHZhciBhcmdOYW1lID0gX09iamVjdCRrZXlzMltfaThdO1xuXG4gICAgICAgICAgICBpZiAoIWFyZ05vZGVNYXBbYXJnTmFtZV0pIHtcbiAgICAgICAgICAgICAgdmFyIGFyZ1R5cGUgPSByZXF1aXJlZEFyZ3NbYXJnTmFtZV0udHlwZTtcbiAgICAgICAgICAgICAgdmFyIGFyZ1R5cGVTdHIgPSBpc1R5cGUoYXJnVHlwZSkgPyBpbnNwZWN0KGFyZ1R5cGUpIDogcHJpbnQoYXJnVHlwZSk7XG4gICAgICAgICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IobmV3IEdyYXBoUUxFcnJvcihcIkRpcmVjdGl2ZSBcXFwiQFwiLmNvbmNhdChkaXJlY3RpdmVOYW1lLCBcIlxcXCIgYXJndW1lbnQgXFxcIlwiKS5jb25jYXQoYXJnTmFtZSwgXCJcXFwiIG9mIHR5cGUgXFxcIlwiKS5jb25jYXQoYXJnVHlwZVN0ciwgXCJcXFwiIGlzIHJlcXVpcmVkLCBidXQgaXQgd2FzIG5vdCBwcm92aWRlZC5cIiksIGRpcmVjdGl2ZU5vZGUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGlzUmVxdWlyZWRBcmd1bWVudE5vZGUoYXJnKSB7XG4gIHJldHVybiBhcmcudHlwZS5raW5kID09PSBLaW5kLk5PTl9OVUxMX1RZUEUgJiYgYXJnLmRlZmF1bHRWYWx1ZSA9PSBudWxsO1xufVxuIiwiaW1wb3J0IGluc3BlY3QgZnJvbSBcIi4uLy4uL2pzdXRpbHMvaW5zcGVjdC5tanNcIjtcbmltcG9ydCB7IEdyYXBoUUxFcnJvciB9IGZyb20gXCIuLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IubWpzXCI7XG5pbXBvcnQgeyBnZXROYW1lZFR5cGUsIGlzTGVhZlR5cGUgfSBmcm9tIFwiLi4vLi4vdHlwZS9kZWZpbml0aW9uLm1qc1wiO1xuXG4vKipcbiAqIFNjYWxhciBsZWFmc1xuICpcbiAqIEEgR3JhcGhRTCBkb2N1bWVudCBpcyB2YWxpZCBvbmx5IGlmIGFsbCBsZWFmIGZpZWxkcyAoZmllbGRzIHdpdGhvdXRcbiAqIHN1YiBzZWxlY3Rpb25zKSBhcmUgb2Ygc2NhbGFyIG9yIGVudW0gdHlwZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBTY2FsYXJMZWFmc1J1bGUoY29udGV4dCkge1xuICByZXR1cm4ge1xuICAgIEZpZWxkOiBmdW5jdGlvbiBGaWVsZChub2RlKSB7XG4gICAgICB2YXIgdHlwZSA9IGNvbnRleHQuZ2V0VHlwZSgpO1xuICAgICAgdmFyIHNlbGVjdGlvblNldCA9IG5vZGUuc2VsZWN0aW9uU2V0O1xuXG4gICAgICBpZiAodHlwZSkge1xuICAgICAgICBpZiAoaXNMZWFmVHlwZShnZXROYW1lZFR5cGUodHlwZSkpKSB7XG4gICAgICAgICAgaWYgKHNlbGVjdGlvblNldCkge1xuICAgICAgICAgICAgdmFyIGZpZWxkTmFtZSA9IG5vZGUubmFtZS52YWx1ZTtcbiAgICAgICAgICAgIHZhciB0eXBlU3RyID0gaW5zcGVjdCh0eXBlKTtcbiAgICAgICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IobmV3IEdyYXBoUUxFcnJvcihcIkZpZWxkIFxcXCJcIi5jb25jYXQoZmllbGROYW1lLCBcIlxcXCIgbXVzdCBub3QgaGF2ZSBhIHNlbGVjdGlvbiBzaW5jZSB0eXBlIFxcXCJcIikuY29uY2F0KHR5cGVTdHIsIFwiXFxcIiBoYXMgbm8gc3ViZmllbGRzLlwiKSwgc2VsZWN0aW9uU2V0KSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCFzZWxlY3Rpb25TZXQpIHtcbiAgICAgICAgICB2YXIgX2ZpZWxkTmFtZSA9IG5vZGUubmFtZS52YWx1ZTtcblxuICAgICAgICAgIHZhciBfdHlwZVN0ciA9IGluc3BlY3QodHlwZSk7XG5cbiAgICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKG5ldyBHcmFwaFFMRXJyb3IoXCJGaWVsZCBcXFwiXCIuY29uY2F0KF9maWVsZE5hbWUsIFwiXFxcIiBvZiB0eXBlIFxcXCJcIikuY29uY2F0KF90eXBlU3RyLCBcIlxcXCIgbXVzdCBoYXZlIGEgc2VsZWN0aW9uIG9mIHN1YmZpZWxkcy4gRGlkIHlvdSBtZWFuIFxcXCJcIikuY29uY2F0KF9maWVsZE5hbWUsIFwiIHsgLi4uIH1cXFwiP1wiKSwgbm9kZSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuIiwiaW1wb3J0IHsgR3JhcGhRTEVycm9yIH0gZnJvbSBcIi4uLy4uL2Vycm9yL0dyYXBoUUxFcnJvci5tanNcIjtcblxuLyoqXG4gKiBTdWJzY3JpcHRpb25zIG11c3Qgb25seSBpbmNsdWRlIG9uZSBmaWVsZC5cbiAqXG4gKiBBIEdyYXBoUUwgc3Vic2NyaXB0aW9uIGlzIHZhbGlkIG9ubHkgaWYgaXQgY29udGFpbnMgYSBzaW5nbGUgcm9vdCBmaWVsZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIFNpbmdsZUZpZWxkU3Vic2NyaXB0aW9uc1J1bGUoY29udGV4dCkge1xuICByZXR1cm4ge1xuICAgIE9wZXJhdGlvbkRlZmluaXRpb246IGZ1bmN0aW9uIE9wZXJhdGlvbkRlZmluaXRpb24obm9kZSkge1xuICAgICAgaWYgKG5vZGUub3BlcmF0aW9uID09PSAnc3Vic2NyaXB0aW9uJykge1xuICAgICAgICBpZiAobm9kZS5zZWxlY3Rpb25TZXQuc2VsZWN0aW9ucy5sZW5ndGggIT09IDEpIHtcbiAgICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKG5ldyBHcmFwaFFMRXJyb3Iobm9kZS5uYW1lID8gXCJTdWJzY3JpcHRpb24gXFxcIlwiLmNvbmNhdChub2RlLm5hbWUudmFsdWUsIFwiXFxcIiBtdXN0IHNlbGVjdCBvbmx5IG9uZSB0b3AgbGV2ZWwgZmllbGQuXCIpIDogJ0Fub255bW91cyBTdWJzY3JpcHRpb24gbXVzdCBzZWxlY3Qgb25seSBvbmUgdG9wIGxldmVsIGZpZWxkLicsIG5vZGUuc2VsZWN0aW9uU2V0LnNlbGVjdGlvbnMuc2xpY2UoMSkpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cbiIsImltcG9ydCB7IEdyYXBoUUxFcnJvciB9IGZyb20gXCIuLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IubWpzXCI7XG5cbi8qKlxuICogVW5pcXVlIGFyZ3VtZW50IG5hbWVzXG4gKlxuICogQSBHcmFwaFFMIGZpZWxkIG9yIGRpcmVjdGl2ZSBpcyBvbmx5IHZhbGlkIGlmIGFsbCBzdXBwbGllZCBhcmd1bWVudHMgYXJlXG4gKiB1bmlxdWVseSBuYW1lZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIFVuaXF1ZUFyZ3VtZW50TmFtZXNSdWxlKGNvbnRleHQpIHtcbiAgdmFyIGtub3duQXJnTmFtZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICByZXR1cm4ge1xuICAgIEZpZWxkOiBmdW5jdGlvbiBGaWVsZCgpIHtcbiAgICAgIGtub3duQXJnTmFtZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIH0sXG4gICAgRGlyZWN0aXZlOiBmdW5jdGlvbiBEaXJlY3RpdmUoKSB7XG4gICAgICBrbm93bkFyZ05hbWVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB9LFxuICAgIEFyZ3VtZW50OiBmdW5jdGlvbiBBcmd1bWVudChub2RlKSB7XG4gICAgICB2YXIgYXJnTmFtZSA9IG5vZGUubmFtZS52YWx1ZTtcblxuICAgICAgaWYgKGtub3duQXJnTmFtZXNbYXJnTmFtZV0pIHtcbiAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihuZXcgR3JhcGhRTEVycm9yKFwiVGhlcmUgY2FuIGJlIG9ubHkgb25lIGFyZ3VtZW50IG5hbWVkIFxcXCJcIi5jb25jYXQoYXJnTmFtZSwgXCJcXFwiLlwiKSwgW2tub3duQXJnTmFtZXNbYXJnTmFtZV0sIG5vZGUubmFtZV0pKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGtub3duQXJnTmFtZXNbYXJnTmFtZV0gPSBub2RlLm5hbWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH07XG59XG4iLCJpbXBvcnQgeyBHcmFwaFFMRXJyb3IgfSBmcm9tIFwiLi4vLi4vZXJyb3IvR3JhcGhRTEVycm9yLm1qc1wiO1xuXG4vKipcbiAqIFVuaXF1ZSBkaXJlY3RpdmUgbmFtZXNcbiAqXG4gKiBBIEdyYXBoUUwgZG9jdW1lbnQgaXMgb25seSB2YWxpZCBpZiBhbGwgZGVmaW5lZCBkaXJlY3RpdmVzIGhhdmUgdW5pcXVlIG5hbWVzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gVW5pcXVlRGlyZWN0aXZlTmFtZXNSdWxlKGNvbnRleHQpIHtcbiAgdmFyIGtub3duRGlyZWN0aXZlTmFtZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2YXIgc2NoZW1hID0gY29udGV4dC5nZXRTY2hlbWEoKTtcbiAgcmV0dXJuIHtcbiAgICBEaXJlY3RpdmVEZWZpbml0aW9uOiBmdW5jdGlvbiBEaXJlY3RpdmVEZWZpbml0aW9uKG5vZGUpIHtcbiAgICAgIHZhciBkaXJlY3RpdmVOYW1lID0gbm9kZS5uYW1lLnZhbHVlO1xuXG4gICAgICBpZiAoc2NoZW1hICE9PSBudWxsICYmIHNjaGVtYSAhPT0gdm9pZCAwICYmIHNjaGVtYS5nZXREaXJlY3RpdmUoZGlyZWN0aXZlTmFtZSkpIHtcbiAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihuZXcgR3JhcGhRTEVycm9yKFwiRGlyZWN0aXZlIFxcXCJAXCIuY29uY2F0KGRpcmVjdGl2ZU5hbWUsIFwiXFxcIiBhbHJlYWR5IGV4aXN0cyBpbiB0aGUgc2NoZW1hLiBJdCBjYW5ub3QgYmUgcmVkZWZpbmVkLlwiKSwgbm9kZS5uYW1lKSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGtub3duRGlyZWN0aXZlTmFtZXNbZGlyZWN0aXZlTmFtZV0pIHtcbiAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihuZXcgR3JhcGhRTEVycm9yKFwiVGhlcmUgY2FuIGJlIG9ubHkgb25lIGRpcmVjdGl2ZSBuYW1lZCBcXFwiQFwiLmNvbmNhdChkaXJlY3RpdmVOYW1lLCBcIlxcXCIuXCIpLCBba25vd25EaXJlY3RpdmVOYW1lc1tkaXJlY3RpdmVOYW1lXSwgbm9kZS5uYW1lXSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAga25vd25EaXJlY3RpdmVOYW1lc1tkaXJlY3RpdmVOYW1lXSA9IG5vZGUubmFtZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfTtcbn1cbiIsImltcG9ydCB7IEdyYXBoUUxFcnJvciB9IGZyb20gXCIuLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IubWpzXCI7XG5pbXBvcnQgeyBLaW5kIH0gZnJvbSBcIi4uLy4uL2xhbmd1YWdlL2tpbmRzLm1qc1wiO1xuaW1wb3J0IHsgaXNUeXBlRGVmaW5pdGlvbk5vZGUsIGlzVHlwZUV4dGVuc2lvbk5vZGUgfSBmcm9tIFwiLi4vLi4vbGFuZ3VhZ2UvcHJlZGljYXRlcy5tanNcIjtcbmltcG9ydCB7IHNwZWNpZmllZERpcmVjdGl2ZXMgfSBmcm9tIFwiLi4vLi4vdHlwZS9kaXJlY3RpdmVzLm1qc1wiO1xuXG4vKipcbiAqIFVuaXF1ZSBkaXJlY3RpdmUgbmFtZXMgcGVyIGxvY2F0aW9uXG4gKlxuICogQSBHcmFwaFFMIGRvY3VtZW50IGlzIG9ubHkgdmFsaWQgaWYgYWxsIG5vbi1yZXBlYXRhYmxlIGRpcmVjdGl2ZXMgYXRcbiAqIGEgZ2l2ZW4gbG9jYXRpb24gYXJlIHVuaXF1ZWx5IG5hbWVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gVW5pcXVlRGlyZWN0aXZlc1BlckxvY2F0aW9uUnVsZShjb250ZXh0KSB7XG4gIHZhciB1bmlxdWVEaXJlY3RpdmVNYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2YXIgc2NoZW1hID0gY29udGV4dC5nZXRTY2hlbWEoKTtcbiAgdmFyIGRlZmluZWREaXJlY3RpdmVzID0gc2NoZW1hID8gc2NoZW1hLmdldERpcmVjdGl2ZXMoKSA6IHNwZWNpZmllZERpcmVjdGl2ZXM7XG5cbiAgZm9yICh2YXIgX2kyID0gMDsgX2kyIDwgZGVmaW5lZERpcmVjdGl2ZXMubGVuZ3RoOyBfaTIrKykge1xuICAgIHZhciBkaXJlY3RpdmUgPSBkZWZpbmVkRGlyZWN0aXZlc1tfaTJdO1xuICAgIHVuaXF1ZURpcmVjdGl2ZU1hcFtkaXJlY3RpdmUubmFtZV0gPSAhZGlyZWN0aXZlLmlzUmVwZWF0YWJsZTtcbiAgfVxuXG4gIHZhciBhc3REZWZpbml0aW9ucyA9IGNvbnRleHQuZ2V0RG9jdW1lbnQoKS5kZWZpbml0aW9ucztcblxuICBmb3IgKHZhciBfaTQgPSAwOyBfaTQgPCBhc3REZWZpbml0aW9ucy5sZW5ndGg7IF9pNCsrKSB7XG4gICAgdmFyIGRlZiA9IGFzdERlZmluaXRpb25zW19pNF07XG5cbiAgICBpZiAoZGVmLmtpbmQgPT09IEtpbmQuRElSRUNUSVZFX0RFRklOSVRJT04pIHtcbiAgICAgIHVuaXF1ZURpcmVjdGl2ZU1hcFtkZWYubmFtZS52YWx1ZV0gPSAhZGVmLnJlcGVhdGFibGU7XG4gICAgfVxuICB9XG5cbiAgdmFyIHNjaGVtYURpcmVjdGl2ZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2YXIgdHlwZURpcmVjdGl2ZXNNYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICByZXR1cm4ge1xuICAgIC8vIE1hbnkgZGlmZmVyZW50IEFTVCBub2RlcyBtYXkgY29udGFpbiBkaXJlY3RpdmVzLiBSYXRoZXIgdGhhbiBsaXN0aW5nXG4gICAgLy8gdGhlbSBhbGwsIGp1c3QgbGlzdGVuIGZvciBlbnRlcmluZyBhbnkgbm9kZSwgYW5kIGNoZWNrIHRvIHNlZSBpZiBpdFxuICAgIC8vIGRlZmluZXMgYW55IGRpcmVjdGl2ZXMuXG4gICAgZW50ZXI6IGZ1bmN0aW9uIGVudGVyKG5vZGUpIHtcbiAgICAgIGlmIChub2RlLmRpcmVjdGl2ZXMgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBzZWVuRGlyZWN0aXZlcztcblxuICAgICAgaWYgKG5vZGUua2luZCA9PT0gS2luZC5TQ0hFTUFfREVGSU5JVElPTiB8fCBub2RlLmtpbmQgPT09IEtpbmQuU0NIRU1BX0VYVEVOU0lPTikge1xuICAgICAgICBzZWVuRGlyZWN0aXZlcyA9IHNjaGVtYURpcmVjdGl2ZXM7XG4gICAgICB9IGVsc2UgaWYgKGlzVHlwZURlZmluaXRpb25Ob2RlKG5vZGUpIHx8IGlzVHlwZUV4dGVuc2lvbk5vZGUobm9kZSkpIHtcbiAgICAgICAgdmFyIHR5cGVOYW1lID0gbm9kZS5uYW1lLnZhbHVlO1xuICAgICAgICBzZWVuRGlyZWN0aXZlcyA9IHR5cGVEaXJlY3RpdmVzTWFwW3R5cGVOYW1lXTtcblxuICAgICAgICBpZiAoc2VlbkRpcmVjdGl2ZXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHR5cGVEaXJlY3RpdmVzTWFwW3R5cGVOYW1lXSA9IHNlZW5EaXJlY3RpdmVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VlbkRpcmVjdGl2ZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBfaTYgPSAwLCBfbm9kZSRkaXJlY3RpdmVzMiA9IG5vZGUuZGlyZWN0aXZlczsgX2k2IDwgX25vZGUkZGlyZWN0aXZlczIubGVuZ3RoOyBfaTYrKykge1xuICAgICAgICB2YXIgX2RpcmVjdGl2ZSA9IF9ub2RlJGRpcmVjdGl2ZXMyW19pNl07XG4gICAgICAgIHZhciBkaXJlY3RpdmVOYW1lID0gX2RpcmVjdGl2ZS5uYW1lLnZhbHVlO1xuXG4gICAgICAgIGlmICh1bmlxdWVEaXJlY3RpdmVNYXBbZGlyZWN0aXZlTmFtZV0pIHtcbiAgICAgICAgICBpZiAoc2VlbkRpcmVjdGl2ZXNbZGlyZWN0aXZlTmFtZV0pIHtcbiAgICAgICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IobmV3IEdyYXBoUUxFcnJvcihcIlRoZSBkaXJlY3RpdmUgXFxcIkBcIi5jb25jYXQoZGlyZWN0aXZlTmFtZSwgXCJcXFwiIGNhbiBvbmx5IGJlIHVzZWQgb25jZSBhdCB0aGlzIGxvY2F0aW9uLlwiKSwgW3NlZW5EaXJlY3RpdmVzW2RpcmVjdGl2ZU5hbWVdLCBfZGlyZWN0aXZlXSkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZWVuRGlyZWN0aXZlc1tkaXJlY3RpdmVOYW1lXSA9IF9kaXJlY3RpdmU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuIiwiaW1wb3J0IHsgR3JhcGhRTEVycm9yIH0gZnJvbSBcIi4uLy4uL2Vycm9yL0dyYXBoUUxFcnJvci5tanNcIjtcbmltcG9ydCB7IGlzRW51bVR5cGUgfSBmcm9tIFwiLi4vLi4vdHlwZS9kZWZpbml0aW9uLm1qc1wiO1xuXG4vKipcbiAqIFVuaXF1ZSBlbnVtIHZhbHVlIG5hbWVzXG4gKlxuICogQSBHcmFwaFFMIGVudW0gdHlwZSBpcyBvbmx5IHZhbGlkIGlmIGFsbCBpdHMgdmFsdWVzIGFyZSB1bmlxdWVseSBuYW1lZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIFVuaXF1ZUVudW1WYWx1ZU5hbWVzUnVsZShjb250ZXh0KSB7XG4gIHZhciBzY2hlbWEgPSBjb250ZXh0LmdldFNjaGVtYSgpO1xuICB2YXIgZXhpc3RpbmdUeXBlTWFwID0gc2NoZW1hID8gc2NoZW1hLmdldFR5cGVNYXAoKSA6IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHZhciBrbm93blZhbHVlTmFtZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICByZXR1cm4ge1xuICAgIEVudW1UeXBlRGVmaW5pdGlvbjogY2hlY2tWYWx1ZVVuaXF1ZW5lc3MsXG4gICAgRW51bVR5cGVFeHRlbnNpb246IGNoZWNrVmFsdWVVbmlxdWVuZXNzXG4gIH07XG5cbiAgZnVuY3Rpb24gY2hlY2tWYWx1ZVVuaXF1ZW5lc3Mobm9kZSkge1xuICAgIHZhciBfbm9kZSR2YWx1ZXM7XG5cbiAgICB2YXIgdHlwZU5hbWUgPSBub2RlLm5hbWUudmFsdWU7XG5cbiAgICBpZiAoIWtub3duVmFsdWVOYW1lc1t0eXBlTmFtZV0pIHtcbiAgICAgIGtub3duVmFsdWVOYW1lc1t0eXBlTmFtZV0gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIH0gLy8gaXN0YW5idWwgaWdub3JlIG5leHQgKFNlZTogJ2h0dHBzOi8vZ2l0aHViLmNvbS9ncmFwaHFsL2dyYXBocWwtanMvaXNzdWVzLzIyMDMnKVxuXG5cbiAgICB2YXIgdmFsdWVOb2RlcyA9IChfbm9kZSR2YWx1ZXMgPSBub2RlLnZhbHVlcykgIT09IG51bGwgJiYgX25vZGUkdmFsdWVzICE9PSB2b2lkIDAgPyBfbm9kZSR2YWx1ZXMgOiBbXTtcbiAgICB2YXIgdmFsdWVOYW1lcyA9IGtub3duVmFsdWVOYW1lc1t0eXBlTmFtZV07XG5cbiAgICBmb3IgKHZhciBfaTIgPSAwOyBfaTIgPCB2YWx1ZU5vZGVzLmxlbmd0aDsgX2kyKyspIHtcbiAgICAgIHZhciB2YWx1ZURlZiA9IHZhbHVlTm9kZXNbX2kyXTtcbiAgICAgIHZhciB2YWx1ZU5hbWUgPSB2YWx1ZURlZi5uYW1lLnZhbHVlO1xuICAgICAgdmFyIGV4aXN0aW5nVHlwZSA9IGV4aXN0aW5nVHlwZU1hcFt0eXBlTmFtZV07XG5cbiAgICAgIGlmIChpc0VudW1UeXBlKGV4aXN0aW5nVHlwZSkgJiYgZXhpc3RpbmdUeXBlLmdldFZhbHVlKHZhbHVlTmFtZSkpIHtcbiAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihuZXcgR3JhcGhRTEVycm9yKFwiRW51bSB2YWx1ZSBcXFwiXCIuY29uY2F0KHR5cGVOYW1lLCBcIi5cIikuY29uY2F0KHZhbHVlTmFtZSwgXCJcXFwiIGFscmVhZHkgZXhpc3RzIGluIHRoZSBzY2hlbWEuIEl0IGNhbm5vdCBhbHNvIGJlIGRlZmluZWQgaW4gdGhpcyB0eXBlIGV4dGVuc2lvbi5cIiksIHZhbHVlRGVmLm5hbWUpKTtcbiAgICAgIH0gZWxzZSBpZiAodmFsdWVOYW1lc1t2YWx1ZU5hbWVdKSB7XG4gICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IobmV3IEdyYXBoUUxFcnJvcihcIkVudW0gdmFsdWUgXFxcIlwiLmNvbmNhdCh0eXBlTmFtZSwgXCIuXCIpLmNvbmNhdCh2YWx1ZU5hbWUsIFwiXFxcIiBjYW4gb25seSBiZSBkZWZpbmVkIG9uY2UuXCIpLCBbdmFsdWVOYW1lc1t2YWx1ZU5hbWVdLCB2YWx1ZURlZi5uYW1lXSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWVOYW1lc1t2YWx1ZU5hbWVdID0gdmFsdWVEZWYubmFtZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cbiIsImltcG9ydCB7IEdyYXBoUUxFcnJvciB9IGZyb20gXCIuLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IubWpzXCI7XG5pbXBvcnQgeyBpc09iamVjdFR5cGUsIGlzSW50ZXJmYWNlVHlwZSwgaXNJbnB1dE9iamVjdFR5cGUgfSBmcm9tIFwiLi4vLi4vdHlwZS9kZWZpbml0aW9uLm1qc1wiO1xuXG4vKipcbiAqIFVuaXF1ZSBmaWVsZCBkZWZpbml0aW9uIG5hbWVzXG4gKlxuICogQSBHcmFwaFFMIGNvbXBsZXggdHlwZSBpcyBvbmx5IHZhbGlkIGlmIGFsbCBpdHMgZmllbGRzIGFyZSB1bmlxdWVseSBuYW1lZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIFVuaXF1ZUZpZWxkRGVmaW5pdGlvbk5hbWVzUnVsZShjb250ZXh0KSB7XG4gIHZhciBzY2hlbWEgPSBjb250ZXh0LmdldFNjaGVtYSgpO1xuICB2YXIgZXhpc3RpbmdUeXBlTWFwID0gc2NoZW1hID8gc2NoZW1hLmdldFR5cGVNYXAoKSA6IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHZhciBrbm93bkZpZWxkTmFtZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICByZXR1cm4ge1xuICAgIElucHV0T2JqZWN0VHlwZURlZmluaXRpb246IGNoZWNrRmllbGRVbmlxdWVuZXNzLFxuICAgIElucHV0T2JqZWN0VHlwZUV4dGVuc2lvbjogY2hlY2tGaWVsZFVuaXF1ZW5lc3MsXG4gICAgSW50ZXJmYWNlVHlwZURlZmluaXRpb246IGNoZWNrRmllbGRVbmlxdWVuZXNzLFxuICAgIEludGVyZmFjZVR5cGVFeHRlbnNpb246IGNoZWNrRmllbGRVbmlxdWVuZXNzLFxuICAgIE9iamVjdFR5cGVEZWZpbml0aW9uOiBjaGVja0ZpZWxkVW5pcXVlbmVzcyxcbiAgICBPYmplY3RUeXBlRXh0ZW5zaW9uOiBjaGVja0ZpZWxkVW5pcXVlbmVzc1xuICB9O1xuXG4gIGZ1bmN0aW9uIGNoZWNrRmllbGRVbmlxdWVuZXNzKG5vZGUpIHtcbiAgICB2YXIgX25vZGUkZmllbGRzO1xuXG4gICAgdmFyIHR5cGVOYW1lID0gbm9kZS5uYW1lLnZhbHVlO1xuXG4gICAgaWYgKCFrbm93bkZpZWxkTmFtZXNbdHlwZU5hbWVdKSB7XG4gICAgICBrbm93bkZpZWxkTmFtZXNbdHlwZU5hbWVdID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB9IC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0IChTZWU6ICdodHRwczovL2dpdGh1Yi5jb20vZ3JhcGhxbC9ncmFwaHFsLWpzL2lzc3Vlcy8yMjAzJylcblxuXG4gICAgdmFyIGZpZWxkTm9kZXMgPSAoX25vZGUkZmllbGRzID0gbm9kZS5maWVsZHMpICE9PSBudWxsICYmIF9ub2RlJGZpZWxkcyAhPT0gdm9pZCAwID8gX25vZGUkZmllbGRzIDogW107XG4gICAgdmFyIGZpZWxkTmFtZXMgPSBrbm93bkZpZWxkTmFtZXNbdHlwZU5hbWVdO1xuXG4gICAgZm9yICh2YXIgX2kyID0gMDsgX2kyIDwgZmllbGROb2Rlcy5sZW5ndGg7IF9pMisrKSB7XG4gICAgICB2YXIgZmllbGREZWYgPSBmaWVsZE5vZGVzW19pMl07XG4gICAgICB2YXIgZmllbGROYW1lID0gZmllbGREZWYubmFtZS52YWx1ZTtcblxuICAgICAgaWYgKGhhc0ZpZWxkKGV4aXN0aW5nVHlwZU1hcFt0eXBlTmFtZV0sIGZpZWxkTmFtZSkpIHtcbiAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihuZXcgR3JhcGhRTEVycm9yKFwiRmllbGQgXFxcIlwiLmNvbmNhdCh0eXBlTmFtZSwgXCIuXCIpLmNvbmNhdChmaWVsZE5hbWUsIFwiXFxcIiBhbHJlYWR5IGV4aXN0cyBpbiB0aGUgc2NoZW1hLiBJdCBjYW5ub3QgYWxzbyBiZSBkZWZpbmVkIGluIHRoaXMgdHlwZSBleHRlbnNpb24uXCIpLCBmaWVsZERlZi5uYW1lKSk7XG4gICAgICB9IGVsc2UgaWYgKGZpZWxkTmFtZXNbZmllbGROYW1lXSkge1xuICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKG5ldyBHcmFwaFFMRXJyb3IoXCJGaWVsZCBcXFwiXCIuY29uY2F0KHR5cGVOYW1lLCBcIi5cIikuY29uY2F0KGZpZWxkTmFtZSwgXCJcXFwiIGNhbiBvbmx5IGJlIGRlZmluZWQgb25jZS5cIiksIFtmaWVsZE5hbWVzW2ZpZWxkTmFtZV0sIGZpZWxkRGVmLm5hbWVdKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmaWVsZE5hbWVzW2ZpZWxkTmFtZV0gPSBmaWVsZERlZi5uYW1lO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBoYXNGaWVsZCh0eXBlLCBmaWVsZE5hbWUpIHtcbiAgaWYgKGlzT2JqZWN0VHlwZSh0eXBlKSB8fCBpc0ludGVyZmFjZVR5cGUodHlwZSkgfHwgaXNJbnB1dE9iamVjdFR5cGUodHlwZSkpIHtcbiAgICByZXR1cm4gdHlwZS5nZXRGaWVsZHMoKVtmaWVsZE5hbWVdICE9IG51bGw7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG4iLCJpbXBvcnQgeyBHcmFwaFFMRXJyb3IgfSBmcm9tIFwiLi4vLi4vZXJyb3IvR3JhcGhRTEVycm9yLm1qc1wiO1xuXG4vKipcbiAqIFVuaXF1ZSBmcmFnbWVudCBuYW1lc1xuICpcbiAqIEEgR3JhcGhRTCBkb2N1bWVudCBpcyBvbmx5IHZhbGlkIGlmIGFsbCBkZWZpbmVkIGZyYWdtZW50cyBoYXZlIHVuaXF1ZSBuYW1lcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIFVuaXF1ZUZyYWdtZW50TmFtZXNSdWxlKGNvbnRleHQpIHtcbiAgdmFyIGtub3duRnJhZ21lbnROYW1lcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHJldHVybiB7XG4gICAgT3BlcmF0aW9uRGVmaW5pdGlvbjogZnVuY3Rpb24gT3BlcmF0aW9uRGVmaW5pdGlvbigpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuICAgIEZyYWdtZW50RGVmaW5pdGlvbjogZnVuY3Rpb24gRnJhZ21lbnREZWZpbml0aW9uKG5vZGUpIHtcbiAgICAgIHZhciBmcmFnbWVudE5hbWUgPSBub2RlLm5hbWUudmFsdWU7XG5cbiAgICAgIGlmIChrbm93bkZyYWdtZW50TmFtZXNbZnJhZ21lbnROYW1lXSkge1xuICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKG5ldyBHcmFwaFFMRXJyb3IoXCJUaGVyZSBjYW4gYmUgb25seSBvbmUgZnJhZ21lbnQgbmFtZWQgXFxcIlwiLmNvbmNhdChmcmFnbWVudE5hbWUsIFwiXFxcIi5cIiksIFtrbm93bkZyYWdtZW50TmFtZXNbZnJhZ21lbnROYW1lXSwgbm9kZS5uYW1lXSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAga25vd25GcmFnbWVudE5hbWVzW2ZyYWdtZW50TmFtZV0gPSBub2RlLm5hbWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH07XG59XG4iLCJpbXBvcnQgeyBHcmFwaFFMRXJyb3IgfSBmcm9tIFwiLi4vLi4vZXJyb3IvR3JhcGhRTEVycm9yLm1qc1wiO1xuXG4vKipcbiAqIFVuaXF1ZSBpbnB1dCBmaWVsZCBuYW1lc1xuICpcbiAqIEEgR3JhcGhRTCBpbnB1dCBvYmplY3QgdmFsdWUgaXMgb25seSB2YWxpZCBpZiBhbGwgc3VwcGxpZWQgZmllbGRzIGFyZVxuICogdW5pcXVlbHkgbmFtZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBVbmlxdWVJbnB1dEZpZWxkTmFtZXNSdWxlKGNvbnRleHQpIHtcbiAgdmFyIGtub3duTmFtZVN0YWNrID0gW107XG4gIHZhciBrbm93bk5hbWVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgcmV0dXJuIHtcbiAgICBPYmplY3RWYWx1ZToge1xuICAgICAgZW50ZXI6IGZ1bmN0aW9uIGVudGVyKCkge1xuICAgICAgICBrbm93bk5hbWVTdGFjay5wdXNoKGtub3duTmFtZXMpO1xuICAgICAgICBrbm93bk5hbWVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgIH0sXG4gICAgICBsZWF2ZTogZnVuY3Rpb24gbGVhdmUoKSB7XG4gICAgICAgIGtub3duTmFtZXMgPSBrbm93bk5hbWVTdGFjay5wb3AoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIE9iamVjdEZpZWxkOiBmdW5jdGlvbiBPYmplY3RGaWVsZChub2RlKSB7XG4gICAgICB2YXIgZmllbGROYW1lID0gbm9kZS5uYW1lLnZhbHVlO1xuXG4gICAgICBpZiAoa25vd25OYW1lc1tmaWVsZE5hbWVdKSB7XG4gICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IobmV3IEdyYXBoUUxFcnJvcihcIlRoZXJlIGNhbiBiZSBvbmx5IG9uZSBpbnB1dCBmaWVsZCBuYW1lZCBcXFwiXCIuY29uY2F0KGZpZWxkTmFtZSwgXCJcXFwiLlwiKSwgW2tub3duTmFtZXNbZmllbGROYW1lXSwgbm9kZS5uYW1lXSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAga25vd25OYW1lc1tmaWVsZE5hbWVdID0gbm9kZS5uYW1lO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cbiIsImltcG9ydCB7IEdyYXBoUUxFcnJvciB9IGZyb20gXCIuLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IubWpzXCI7XG5cbi8qKlxuICogVW5pcXVlIG9wZXJhdGlvbiBuYW1lc1xuICpcbiAqIEEgR3JhcGhRTCBkb2N1bWVudCBpcyBvbmx5IHZhbGlkIGlmIGFsbCBkZWZpbmVkIG9wZXJhdGlvbnMgaGF2ZSB1bmlxdWUgbmFtZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBVbmlxdWVPcGVyYXRpb25OYW1lc1J1bGUoY29udGV4dCkge1xuICB2YXIga25vd25PcGVyYXRpb25OYW1lcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHJldHVybiB7XG4gICAgT3BlcmF0aW9uRGVmaW5pdGlvbjogZnVuY3Rpb24gT3BlcmF0aW9uRGVmaW5pdGlvbihub2RlKSB7XG4gICAgICB2YXIgb3BlcmF0aW9uTmFtZSA9IG5vZGUubmFtZTtcblxuICAgICAgaWYgKG9wZXJhdGlvbk5hbWUpIHtcbiAgICAgICAgaWYgKGtub3duT3BlcmF0aW9uTmFtZXNbb3BlcmF0aW9uTmFtZS52YWx1ZV0pIHtcbiAgICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKG5ldyBHcmFwaFFMRXJyb3IoXCJUaGVyZSBjYW4gYmUgb25seSBvbmUgb3BlcmF0aW9uIG5hbWVkIFxcXCJcIi5jb25jYXQob3BlcmF0aW9uTmFtZS52YWx1ZSwgXCJcXFwiLlwiKSwgW2tub3duT3BlcmF0aW9uTmFtZXNbb3BlcmF0aW9uTmFtZS52YWx1ZV0sIG9wZXJhdGlvbk5hbWVdKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAga25vd25PcGVyYXRpb25OYW1lc1tvcGVyYXRpb25OYW1lLnZhbHVlXSA9IG9wZXJhdGlvbk5hbWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG4gICAgRnJhZ21lbnREZWZpbml0aW9uOiBmdW5jdGlvbiBGcmFnbWVudERlZmluaXRpb24oKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9O1xufVxuIiwiaW1wb3J0IHsgR3JhcGhRTEVycm9yIH0gZnJvbSBcIi4uLy4uL2Vycm9yL0dyYXBoUUxFcnJvci5tanNcIjtcblxuLyoqXG4gKiBVbmlxdWUgb3BlcmF0aW9uIHR5cGVzXG4gKlxuICogQSBHcmFwaFFMIGRvY3VtZW50IGlzIG9ubHkgdmFsaWQgaWYgaXQgaGFzIG9ubHkgb25lIHR5cGUgcGVyIG9wZXJhdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIFVuaXF1ZU9wZXJhdGlvblR5cGVzUnVsZShjb250ZXh0KSB7XG4gIHZhciBzY2hlbWEgPSBjb250ZXh0LmdldFNjaGVtYSgpO1xuICB2YXIgZGVmaW5lZE9wZXJhdGlvblR5cGVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdmFyIGV4aXN0aW5nT3BlcmF0aW9uVHlwZXMgPSBzY2hlbWEgPyB7XG4gICAgcXVlcnk6IHNjaGVtYS5nZXRRdWVyeVR5cGUoKSxcbiAgICBtdXRhdGlvbjogc2NoZW1hLmdldE11dGF0aW9uVHlwZSgpLFxuICAgIHN1YnNjcmlwdGlvbjogc2NoZW1hLmdldFN1YnNjcmlwdGlvblR5cGUoKVxuICB9IDoge307XG4gIHJldHVybiB7XG4gICAgU2NoZW1hRGVmaW5pdGlvbjogY2hlY2tPcGVyYXRpb25UeXBlcyxcbiAgICBTY2hlbWFFeHRlbnNpb246IGNoZWNrT3BlcmF0aW9uVHlwZXNcbiAgfTtcblxuICBmdW5jdGlvbiBjaGVja09wZXJhdGlvblR5cGVzKG5vZGUpIHtcbiAgICB2YXIgX25vZGUkb3BlcmF0aW9uVHlwZXM7XG5cbiAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAoU2VlOiAnaHR0cHM6Ly9naXRodWIuY29tL2dyYXBocWwvZ3JhcGhxbC1qcy9pc3N1ZXMvMjIwMycpXG4gICAgdmFyIG9wZXJhdGlvblR5cGVzTm9kZXMgPSAoX25vZGUkb3BlcmF0aW9uVHlwZXMgPSBub2RlLm9wZXJhdGlvblR5cGVzKSAhPT0gbnVsbCAmJiBfbm9kZSRvcGVyYXRpb25UeXBlcyAhPT0gdm9pZCAwID8gX25vZGUkb3BlcmF0aW9uVHlwZXMgOiBbXTtcblxuICAgIGZvciAodmFyIF9pMiA9IDA7IF9pMiA8IG9wZXJhdGlvblR5cGVzTm9kZXMubGVuZ3RoOyBfaTIrKykge1xuICAgICAgdmFyIG9wZXJhdGlvblR5cGUgPSBvcGVyYXRpb25UeXBlc05vZGVzW19pMl07XG4gICAgICB2YXIgb3BlcmF0aW9uID0gb3BlcmF0aW9uVHlwZS5vcGVyYXRpb247XG4gICAgICB2YXIgYWxyZWFkeURlZmluZWRPcGVyYXRpb25UeXBlID0gZGVmaW5lZE9wZXJhdGlvblR5cGVzW29wZXJhdGlvbl07XG5cbiAgICAgIGlmIChleGlzdGluZ09wZXJhdGlvblR5cGVzW29wZXJhdGlvbl0pIHtcbiAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihuZXcgR3JhcGhRTEVycm9yKFwiVHlwZSBmb3IgXCIuY29uY2F0KG9wZXJhdGlvbiwgXCIgYWxyZWFkeSBkZWZpbmVkIGluIHRoZSBzY2hlbWEuIEl0IGNhbm5vdCBiZSByZWRlZmluZWQuXCIpLCBvcGVyYXRpb25UeXBlKSk7XG4gICAgICB9IGVsc2UgaWYgKGFscmVhZHlEZWZpbmVkT3BlcmF0aW9uVHlwZSkge1xuICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKG5ldyBHcmFwaFFMRXJyb3IoXCJUaGVyZSBjYW4gYmUgb25seSBvbmUgXCIuY29uY2F0KG9wZXJhdGlvbiwgXCIgdHlwZSBpbiBzY2hlbWEuXCIpLCBbYWxyZWFkeURlZmluZWRPcGVyYXRpb25UeXBlLCBvcGVyYXRpb25UeXBlXSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVmaW5lZE9wZXJhdGlvblR5cGVzW29wZXJhdGlvbl0gPSBvcGVyYXRpb25UeXBlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgR3JhcGhRTEVycm9yIH0gZnJvbSBcIi4uLy4uL2Vycm9yL0dyYXBoUUxFcnJvci5tanNcIjtcblxuLyoqXG4gKiBVbmlxdWUgdHlwZSBuYW1lc1xuICpcbiAqIEEgR3JhcGhRTCBkb2N1bWVudCBpcyBvbmx5IHZhbGlkIGlmIGFsbCBkZWZpbmVkIHR5cGVzIGhhdmUgdW5pcXVlIG5hbWVzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gVW5pcXVlVHlwZU5hbWVzUnVsZShjb250ZXh0KSB7XG4gIHZhciBrbm93blR5cGVOYW1lcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHZhciBzY2hlbWEgPSBjb250ZXh0LmdldFNjaGVtYSgpO1xuICByZXR1cm4ge1xuICAgIFNjYWxhclR5cGVEZWZpbml0aW9uOiBjaGVja1R5cGVOYW1lLFxuICAgIE9iamVjdFR5cGVEZWZpbml0aW9uOiBjaGVja1R5cGVOYW1lLFxuICAgIEludGVyZmFjZVR5cGVEZWZpbml0aW9uOiBjaGVja1R5cGVOYW1lLFxuICAgIFVuaW9uVHlwZURlZmluaXRpb246IGNoZWNrVHlwZU5hbWUsXG4gICAgRW51bVR5cGVEZWZpbml0aW9uOiBjaGVja1R5cGVOYW1lLFxuICAgIElucHV0T2JqZWN0VHlwZURlZmluaXRpb246IGNoZWNrVHlwZU5hbWVcbiAgfTtcblxuICBmdW5jdGlvbiBjaGVja1R5cGVOYW1lKG5vZGUpIHtcbiAgICB2YXIgdHlwZU5hbWUgPSBub2RlLm5hbWUudmFsdWU7XG5cbiAgICBpZiAoc2NoZW1hICE9PSBudWxsICYmIHNjaGVtYSAhPT0gdm9pZCAwICYmIHNjaGVtYS5nZXRUeXBlKHR5cGVOYW1lKSkge1xuICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihuZXcgR3JhcGhRTEVycm9yKFwiVHlwZSBcXFwiXCIuY29uY2F0KHR5cGVOYW1lLCBcIlxcXCIgYWxyZWFkeSBleGlzdHMgaW4gdGhlIHNjaGVtYS4gSXQgY2Fubm90IGFsc28gYmUgZGVmaW5lZCBpbiB0aGlzIHR5cGUgZGVmaW5pdGlvbi5cIiksIG5vZGUubmFtZSkpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChrbm93blR5cGVOYW1lc1t0eXBlTmFtZV0pIHtcbiAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IobmV3IEdyYXBoUUxFcnJvcihcIlRoZXJlIGNhbiBiZSBvbmx5IG9uZSB0eXBlIG5hbWVkIFxcXCJcIi5jb25jYXQodHlwZU5hbWUsIFwiXFxcIi5cIiksIFtrbm93blR5cGVOYW1lc1t0eXBlTmFtZV0sIG5vZGUubmFtZV0pKTtcbiAgICB9IGVsc2Uge1xuICAgICAga25vd25UeXBlTmFtZXNbdHlwZU5hbWVdID0gbm9kZS5uYW1lO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgR3JhcGhRTEVycm9yIH0gZnJvbSBcIi4uLy4uL2Vycm9yL0dyYXBoUUxFcnJvci5tanNcIjtcblxuLyoqXG4gKiBVbmlxdWUgdmFyaWFibGUgbmFtZXNcbiAqXG4gKiBBIEdyYXBoUUwgb3BlcmF0aW9uIGlzIG9ubHkgdmFsaWQgaWYgYWxsIGl0cyB2YXJpYWJsZXMgYXJlIHVuaXF1ZWx5IG5hbWVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gVW5pcXVlVmFyaWFibGVOYW1lc1J1bGUoY29udGV4dCkge1xuICB2YXIga25vd25WYXJpYWJsZU5hbWVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgcmV0dXJuIHtcbiAgICBPcGVyYXRpb25EZWZpbml0aW9uOiBmdW5jdGlvbiBPcGVyYXRpb25EZWZpbml0aW9uKCkge1xuICAgICAga25vd25WYXJpYWJsZU5hbWVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB9LFxuICAgIFZhcmlhYmxlRGVmaW5pdGlvbjogZnVuY3Rpb24gVmFyaWFibGVEZWZpbml0aW9uKG5vZGUpIHtcbiAgICAgIHZhciB2YXJpYWJsZU5hbWUgPSBub2RlLnZhcmlhYmxlLm5hbWUudmFsdWU7XG5cbiAgICAgIGlmIChrbm93blZhcmlhYmxlTmFtZXNbdmFyaWFibGVOYW1lXSkge1xuICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKG5ldyBHcmFwaFFMRXJyb3IoXCJUaGVyZSBjYW4gYmUgb25seSBvbmUgdmFyaWFibGUgbmFtZWQgXFxcIiRcIi5jb25jYXQodmFyaWFibGVOYW1lLCBcIlxcXCIuXCIpLCBba25vd25WYXJpYWJsZU5hbWVzW3ZhcmlhYmxlTmFtZV0sIG5vZGUudmFyaWFibGUubmFtZV0pKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGtub3duVmFyaWFibGVOYW1lc1t2YXJpYWJsZU5hbWVdID0gbm9kZS52YXJpYWJsZS5uYW1lO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cbiIsImltcG9ydCBvYmplY3RWYWx1ZXMgZnJvbSBcIi4uLy4uL3BvbHlmaWxscy9vYmplY3RWYWx1ZXMubWpzXCI7XG5pbXBvcnQga2V5TWFwIGZyb20gXCIuLi8uLi9qc3V0aWxzL2tleU1hcC5tanNcIjtcbmltcG9ydCBpbnNwZWN0IGZyb20gXCIuLi8uLi9qc3V0aWxzL2luc3BlY3QubWpzXCI7XG5pbXBvcnQgZGlkWW91TWVhbiBmcm9tIFwiLi4vLi4vanN1dGlscy9kaWRZb3VNZWFuLm1qc1wiO1xuaW1wb3J0IHN1Z2dlc3Rpb25MaXN0IGZyb20gXCIuLi8uLi9qc3V0aWxzL3N1Z2dlc3Rpb25MaXN0Lm1qc1wiO1xuaW1wb3J0IHsgR3JhcGhRTEVycm9yIH0gZnJvbSBcIi4uLy4uL2Vycm9yL0dyYXBoUUxFcnJvci5tanNcIjtcbmltcG9ydCB7IHByaW50IH0gZnJvbSBcIi4uLy4uL2xhbmd1YWdlL3ByaW50ZXIubWpzXCI7XG5pbXBvcnQgeyBpc0xlYWZUeXBlLCBpc0lucHV0T2JqZWN0VHlwZSwgaXNMaXN0VHlwZSwgaXNOb25OdWxsVHlwZSwgaXNSZXF1aXJlZElucHV0RmllbGQsIGdldE51bGxhYmxlVHlwZSwgZ2V0TmFtZWRUeXBlIH0gZnJvbSBcIi4uLy4uL3R5cGUvZGVmaW5pdGlvbi5tanNcIjtcblxuLyoqXG4gKiBWYWx1ZSBsaXRlcmFscyBvZiBjb3JyZWN0IHR5cGVcbiAqXG4gKiBBIEdyYXBoUUwgZG9jdW1lbnQgaXMgb25seSB2YWxpZCBpZiBhbGwgdmFsdWUgbGl0ZXJhbHMgYXJlIG9mIHRoZSB0eXBlXG4gKiBleHBlY3RlZCBhdCB0aGVpciBwb3NpdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIFZhbHVlc09mQ29ycmVjdFR5cGVSdWxlKGNvbnRleHQpIHtcbiAgcmV0dXJuIHtcbiAgICBMaXN0VmFsdWU6IGZ1bmN0aW9uIExpc3RWYWx1ZShub2RlKSB7XG4gICAgICAvLyBOb3RlOiBUeXBlSW5mbyB3aWxsIHRyYXZlcnNlIGludG8gYSBsaXN0J3MgaXRlbSB0eXBlLCBzbyBsb29rIHRvIHRoZVxuICAgICAgLy8gcGFyZW50IGlucHV0IHR5cGUgdG8gY2hlY2sgaWYgaXQgaXMgYSBsaXN0LlxuICAgICAgdmFyIHR5cGUgPSBnZXROdWxsYWJsZVR5cGUoY29udGV4dC5nZXRQYXJlbnRJbnB1dFR5cGUoKSk7XG5cbiAgICAgIGlmICghaXNMaXN0VHlwZSh0eXBlKSkge1xuICAgICAgICBpc1ZhbGlkVmFsdWVOb2RlKGNvbnRleHQsIG5vZGUpO1xuICAgICAgICByZXR1cm4gZmFsc2U7IC8vIERvbid0IHRyYXZlcnNlIGZ1cnRoZXIuXG4gICAgICB9XG4gICAgfSxcbiAgICBPYmplY3RWYWx1ZTogZnVuY3Rpb24gT2JqZWN0VmFsdWUobm9kZSkge1xuICAgICAgdmFyIHR5cGUgPSBnZXROYW1lZFR5cGUoY29udGV4dC5nZXRJbnB1dFR5cGUoKSk7XG5cbiAgICAgIGlmICghaXNJbnB1dE9iamVjdFR5cGUodHlwZSkpIHtcbiAgICAgICAgaXNWYWxpZFZhbHVlTm9kZShjb250ZXh0LCBub2RlKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBEb24ndCB0cmF2ZXJzZSBmdXJ0aGVyLlxuICAgICAgfSAvLyBFbnN1cmUgZXZlcnkgcmVxdWlyZWQgZmllbGQgZXhpc3RzLlxuXG5cbiAgICAgIHZhciBmaWVsZE5vZGVNYXAgPSBrZXlNYXAobm9kZS5maWVsZHMsIGZ1bmN0aW9uIChmaWVsZCkge1xuICAgICAgICByZXR1cm4gZmllbGQubmFtZS52YWx1ZTtcbiAgICAgIH0pO1xuXG4gICAgICBmb3IgKHZhciBfaTIgPSAwLCBfb2JqZWN0VmFsdWVzMiA9IG9iamVjdFZhbHVlcyh0eXBlLmdldEZpZWxkcygpKTsgX2kyIDwgX29iamVjdFZhbHVlczIubGVuZ3RoOyBfaTIrKykge1xuICAgICAgICB2YXIgZmllbGREZWYgPSBfb2JqZWN0VmFsdWVzMltfaTJdO1xuICAgICAgICB2YXIgZmllbGROb2RlID0gZmllbGROb2RlTWFwW2ZpZWxkRGVmLm5hbWVdO1xuXG4gICAgICAgIGlmICghZmllbGROb2RlICYmIGlzUmVxdWlyZWRJbnB1dEZpZWxkKGZpZWxkRGVmKSkge1xuICAgICAgICAgIHZhciB0eXBlU3RyID0gaW5zcGVjdChmaWVsZERlZi50eXBlKTtcbiAgICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKG5ldyBHcmFwaFFMRXJyb3IoXCJGaWVsZCBcXFwiXCIuY29uY2F0KHR5cGUubmFtZSwgXCIuXCIpLmNvbmNhdChmaWVsZERlZi5uYW1lLCBcIlxcXCIgb2YgcmVxdWlyZWQgdHlwZSBcXFwiXCIpLmNvbmNhdCh0eXBlU3RyLCBcIlxcXCIgd2FzIG5vdCBwcm92aWRlZC5cIiksIG5vZGUpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgT2JqZWN0RmllbGQ6IGZ1bmN0aW9uIE9iamVjdEZpZWxkKG5vZGUpIHtcbiAgICAgIHZhciBwYXJlbnRUeXBlID0gZ2V0TmFtZWRUeXBlKGNvbnRleHQuZ2V0UGFyZW50SW5wdXRUeXBlKCkpO1xuICAgICAgdmFyIGZpZWxkVHlwZSA9IGNvbnRleHQuZ2V0SW5wdXRUeXBlKCk7XG5cbiAgICAgIGlmICghZmllbGRUeXBlICYmIGlzSW5wdXRPYmplY3RUeXBlKHBhcmVudFR5cGUpKSB7XG4gICAgICAgIHZhciBzdWdnZXN0aW9ucyA9IHN1Z2dlc3Rpb25MaXN0KG5vZGUubmFtZS52YWx1ZSwgT2JqZWN0LmtleXMocGFyZW50VHlwZS5nZXRGaWVsZHMoKSkpO1xuICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKG5ldyBHcmFwaFFMRXJyb3IoXCJGaWVsZCBcXFwiXCIuY29uY2F0KG5vZGUubmFtZS52YWx1ZSwgXCJcXFwiIGlzIG5vdCBkZWZpbmVkIGJ5IHR5cGUgXFxcIlwiKS5jb25jYXQocGFyZW50VHlwZS5uYW1lLCBcIlxcXCIuXCIpICsgZGlkWW91TWVhbihzdWdnZXN0aW9ucyksIG5vZGUpKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIE51bGxWYWx1ZTogZnVuY3Rpb24gTnVsbFZhbHVlKG5vZGUpIHtcbiAgICAgIHZhciB0eXBlID0gY29udGV4dC5nZXRJbnB1dFR5cGUoKTtcblxuICAgICAgaWYgKGlzTm9uTnVsbFR5cGUodHlwZSkpIHtcbiAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihuZXcgR3JhcGhRTEVycm9yKFwiRXhwZWN0ZWQgdmFsdWUgb2YgdHlwZSBcXFwiXCIuY29uY2F0KGluc3BlY3QodHlwZSksIFwiXFxcIiwgZm91bmQgXCIpLmNvbmNhdChwcmludChub2RlKSwgXCIuXCIpLCBub2RlKSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBFbnVtVmFsdWU6IGZ1bmN0aW9uIEVudW1WYWx1ZShub2RlKSB7XG4gICAgICByZXR1cm4gaXNWYWxpZFZhbHVlTm9kZShjb250ZXh0LCBub2RlKTtcbiAgICB9LFxuICAgIEludFZhbHVlOiBmdW5jdGlvbiBJbnRWYWx1ZShub2RlKSB7XG4gICAgICByZXR1cm4gaXNWYWxpZFZhbHVlTm9kZShjb250ZXh0LCBub2RlKTtcbiAgICB9LFxuICAgIEZsb2F0VmFsdWU6IGZ1bmN0aW9uIEZsb2F0VmFsdWUobm9kZSkge1xuICAgICAgcmV0dXJuIGlzVmFsaWRWYWx1ZU5vZGUoY29udGV4dCwgbm9kZSk7XG4gICAgfSxcbiAgICBTdHJpbmdWYWx1ZTogZnVuY3Rpb24gU3RyaW5nVmFsdWUobm9kZSkge1xuICAgICAgcmV0dXJuIGlzVmFsaWRWYWx1ZU5vZGUoY29udGV4dCwgbm9kZSk7XG4gICAgfSxcbiAgICBCb29sZWFuVmFsdWU6IGZ1bmN0aW9uIEJvb2xlYW5WYWx1ZShub2RlKSB7XG4gICAgICByZXR1cm4gaXNWYWxpZFZhbHVlTm9kZShjb250ZXh0LCBub2RlKTtcbiAgICB9XG4gIH07XG59XG4vKipcbiAqIEFueSB2YWx1ZSBsaXRlcmFsIG1heSBiZSBhIHZhbGlkIHJlcHJlc2VudGF0aW9uIG9mIGEgU2NhbGFyLCBkZXBlbmRpbmcgb25cbiAqIHRoYXQgc2NhbGFyIHR5cGUuXG4gKi9cblxuZnVuY3Rpb24gaXNWYWxpZFZhbHVlTm9kZShjb250ZXh0LCBub2RlKSB7XG4gIC8vIFJlcG9ydCBhbnkgZXJyb3IgYXQgdGhlIGZ1bGwgdHlwZSBleHBlY3RlZCBieSB0aGUgbG9jYXRpb24uXG4gIHZhciBsb2NhdGlvblR5cGUgPSBjb250ZXh0LmdldElucHV0VHlwZSgpO1xuXG4gIGlmICghbG9jYXRpb25UeXBlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHR5cGUgPSBnZXROYW1lZFR5cGUobG9jYXRpb25UeXBlKTtcblxuICBpZiAoIWlzTGVhZlR5cGUodHlwZSkpIHtcbiAgICB2YXIgdHlwZVN0ciA9IGluc3BlY3QobG9jYXRpb25UeXBlKTtcbiAgICBjb250ZXh0LnJlcG9ydEVycm9yKG5ldyBHcmFwaFFMRXJyb3IoXCJFeHBlY3RlZCB2YWx1ZSBvZiB0eXBlIFxcXCJcIi5jb25jYXQodHlwZVN0ciwgXCJcXFwiLCBmb3VuZCBcIikuY29uY2F0KHByaW50KG5vZGUpLCBcIi5cIiksIG5vZGUpKTtcbiAgICByZXR1cm47XG4gIH0gLy8gU2NhbGFycyBhbmQgRW51bXMgZGV0ZXJtaW5lIGlmIGEgbGl0ZXJhbCB2YWx1ZSBpcyB2YWxpZCB2aWEgcGFyc2VMaXRlcmFsKCksXG4gIC8vIHdoaWNoIG1heSB0aHJvdyBvciByZXR1cm4gYW4gaW52YWxpZCB2YWx1ZSB0byBpbmRpY2F0ZSBmYWlsdXJlLlxuXG5cbiAgdHJ5IHtcbiAgICB2YXIgcGFyc2VSZXN1bHQgPSB0eXBlLnBhcnNlTGl0ZXJhbChub2RlLCB1bmRlZmluZWRcbiAgICAvKiB2YXJpYWJsZXMgKi9cbiAgICApO1xuXG4gICAgaWYgKHBhcnNlUmVzdWx0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhciBfdHlwZVN0ciA9IGluc3BlY3QobG9jYXRpb25UeXBlKTtcblxuICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihuZXcgR3JhcGhRTEVycm9yKFwiRXhwZWN0ZWQgdmFsdWUgb2YgdHlwZSBcXFwiXCIuY29uY2F0KF90eXBlU3RyLCBcIlxcXCIsIGZvdW5kIFwiKS5jb25jYXQocHJpbnQobm9kZSksIFwiLlwiKSwgbm9kZSkpO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICB2YXIgX3R5cGVTdHIyID0gaW5zcGVjdChsb2NhdGlvblR5cGUpO1xuXG4gICAgaWYgKGVycm9yIGluc3RhbmNlb2YgR3JhcGhRTEVycm9yKSB7XG4gICAgICBjb250ZXh0LnJlcG9ydEVycm9yKGVycm9yKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihuZXcgR3JhcGhRTEVycm9yKFwiRXhwZWN0ZWQgdmFsdWUgb2YgdHlwZSBcXFwiXCIuY29uY2F0KF90eXBlU3RyMiwgXCJcXFwiLCBmb3VuZCBcIikuY29uY2F0KHByaW50KG5vZGUpLCBcIjsgXCIpICsgZXJyb3IubWVzc2FnZSwgbm9kZSwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgZXJyb3IpKTtcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IEdyYXBoUUxFcnJvciB9IGZyb20gXCIuLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IubWpzXCI7XG5pbXBvcnQgeyBwcmludCB9IGZyb20gXCIuLi8uLi9sYW5ndWFnZS9wcmludGVyLm1qc1wiO1xuaW1wb3J0IHsgaXNJbnB1dFR5cGUgfSBmcm9tIFwiLi4vLi4vdHlwZS9kZWZpbml0aW9uLm1qc1wiO1xuaW1wb3J0IHsgdHlwZUZyb21BU1QgfSBmcm9tIFwiLi4vLi4vdXRpbGl0aWVzL3R5cGVGcm9tQVNULm1qc1wiO1xuXG4vKipcbiAqIFZhcmlhYmxlcyBhcmUgaW5wdXQgdHlwZXNcbiAqXG4gKiBBIEdyYXBoUUwgb3BlcmF0aW9uIGlzIG9ubHkgdmFsaWQgaWYgYWxsIHRoZSB2YXJpYWJsZXMgaXQgZGVmaW5lcyBhcmUgb2ZcbiAqIGlucHV0IHR5cGVzIChzY2FsYXIsIGVudW0sIG9yIGlucHV0IG9iamVjdCkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBWYXJpYWJsZXNBcmVJbnB1dFR5cGVzUnVsZShjb250ZXh0KSB7XG4gIHJldHVybiB7XG4gICAgVmFyaWFibGVEZWZpbml0aW9uOiBmdW5jdGlvbiBWYXJpYWJsZURlZmluaXRpb24obm9kZSkge1xuICAgICAgdmFyIHR5cGUgPSB0eXBlRnJvbUFTVChjb250ZXh0LmdldFNjaGVtYSgpLCBub2RlLnR5cGUpO1xuXG4gICAgICBpZiAodHlwZSAmJiAhaXNJbnB1dFR5cGUodHlwZSkpIHtcbiAgICAgICAgdmFyIHZhcmlhYmxlTmFtZSA9IG5vZGUudmFyaWFibGUubmFtZS52YWx1ZTtcbiAgICAgICAgdmFyIHR5cGVOYW1lID0gcHJpbnQobm9kZS50eXBlKTtcbiAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihuZXcgR3JhcGhRTEVycm9yKFwiVmFyaWFibGUgXFxcIiRcIi5jb25jYXQodmFyaWFibGVOYW1lLCBcIlxcXCIgY2Fubm90IGJlIG5vbi1pbnB1dCB0eXBlIFxcXCJcIikuY29uY2F0KHR5cGVOYW1lLCBcIlxcXCIuXCIpLCBub2RlLnR5cGUpKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG4iLCJpbXBvcnQgaW5zcGVjdCBmcm9tIFwiLi4vLi4vanN1dGlscy9pbnNwZWN0Lm1qc1wiO1xuaW1wb3J0IHsgR3JhcGhRTEVycm9yIH0gZnJvbSBcIi4uLy4uL2Vycm9yL0dyYXBoUUxFcnJvci5tanNcIjtcbmltcG9ydCB7IEtpbmQgfSBmcm9tIFwiLi4vLi4vbGFuZ3VhZ2Uva2luZHMubWpzXCI7XG5pbXBvcnQgeyBpc05vbk51bGxUeXBlIH0gZnJvbSBcIi4uLy4uL3R5cGUvZGVmaW5pdGlvbi5tanNcIjtcbmltcG9ydCB7IHR5cGVGcm9tQVNUIH0gZnJvbSBcIi4uLy4uL3V0aWxpdGllcy90eXBlRnJvbUFTVC5tanNcIjtcbmltcG9ydCB7IGlzVHlwZVN1YlR5cGVPZiB9IGZyb20gXCIuLi8uLi91dGlsaXRpZXMvdHlwZUNvbXBhcmF0b3JzLm1qc1wiO1xuXG4vKipcbiAqIFZhcmlhYmxlcyBwYXNzZWQgdG8gZmllbGQgYXJndW1lbnRzIGNvbmZvcm0gdG8gdHlwZVxuICovXG5leHBvcnQgZnVuY3Rpb24gVmFyaWFibGVzSW5BbGxvd2VkUG9zaXRpb25SdWxlKGNvbnRleHQpIHtcbiAgdmFyIHZhckRlZk1hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHJldHVybiB7XG4gICAgT3BlcmF0aW9uRGVmaW5pdGlvbjoge1xuICAgICAgZW50ZXI6IGZ1bmN0aW9uIGVudGVyKCkge1xuICAgICAgICB2YXJEZWZNYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgfSxcbiAgICAgIGxlYXZlOiBmdW5jdGlvbiBsZWF2ZShvcGVyYXRpb24pIHtcbiAgICAgICAgdmFyIHVzYWdlcyA9IGNvbnRleHQuZ2V0UmVjdXJzaXZlVmFyaWFibGVVc2FnZXMob3BlcmF0aW9uKTtcblxuICAgICAgICBmb3IgKHZhciBfaTIgPSAwOyBfaTIgPCB1c2FnZXMubGVuZ3RoOyBfaTIrKykge1xuICAgICAgICAgIHZhciBfcmVmMiA9IHVzYWdlc1tfaTJdO1xuICAgICAgICAgIHZhciBub2RlID0gX3JlZjIubm9kZTtcbiAgICAgICAgICB2YXIgdHlwZSA9IF9yZWYyLnR5cGU7XG4gICAgICAgICAgdmFyIGRlZmF1bHRWYWx1ZSA9IF9yZWYyLmRlZmF1bHRWYWx1ZTtcbiAgICAgICAgICB2YXIgdmFyTmFtZSA9IG5vZGUubmFtZS52YWx1ZTtcbiAgICAgICAgICB2YXIgdmFyRGVmID0gdmFyRGVmTWFwW3Zhck5hbWVdO1xuXG4gICAgICAgICAgaWYgKHZhckRlZiAmJiB0eXBlKSB7XG4gICAgICAgICAgICAvLyBBIHZhciB0eXBlIGlzIGFsbG93ZWQgaWYgaXQgaXMgdGhlIHNhbWUgb3IgbW9yZSBzdHJpY3QgKGUuZy4gaXNcbiAgICAgICAgICAgIC8vIGEgc3VidHlwZSBvZikgdGhhbiB0aGUgZXhwZWN0ZWQgdHlwZS4gSXQgY2FuIGJlIG1vcmUgc3RyaWN0IGlmXG4gICAgICAgICAgICAvLyB0aGUgdmFyaWFibGUgdHlwZSBpcyBub24tbnVsbCB3aGVuIHRoZSBleHBlY3RlZCB0eXBlIGlzIG51bGxhYmxlLlxuICAgICAgICAgICAgLy8gSWYgYm90aCBhcmUgbGlzdCB0eXBlcywgdGhlIHZhcmlhYmxlIGl0ZW0gdHlwZSBjYW4gYmUgbW9yZSBzdHJpY3RcbiAgICAgICAgICAgIC8vIHRoYW4gdGhlIGV4cGVjdGVkIGl0ZW0gdHlwZSAoY29udHJhdmFyaWFudCkuXG4gICAgICAgICAgICB2YXIgc2NoZW1hID0gY29udGV4dC5nZXRTY2hlbWEoKTtcbiAgICAgICAgICAgIHZhciB2YXJUeXBlID0gdHlwZUZyb21BU1Qoc2NoZW1hLCB2YXJEZWYudHlwZSk7XG5cbiAgICAgICAgICAgIGlmICh2YXJUeXBlICYmICFhbGxvd2VkVmFyaWFibGVVc2FnZShzY2hlbWEsIHZhclR5cGUsIHZhckRlZi5kZWZhdWx0VmFsdWUsIHR5cGUsIGRlZmF1bHRWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgdmFyIHZhclR5cGVTdHIgPSBpbnNwZWN0KHZhclR5cGUpO1xuICAgICAgICAgICAgICB2YXIgdHlwZVN0ciA9IGluc3BlY3QodHlwZSk7XG4gICAgICAgICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IobmV3IEdyYXBoUUxFcnJvcihcIlZhcmlhYmxlIFxcXCIkXCIuY29uY2F0KHZhck5hbWUsIFwiXFxcIiBvZiB0eXBlIFxcXCJcIikuY29uY2F0KHZhclR5cGVTdHIsIFwiXFxcIiB1c2VkIGluIHBvc2l0aW9uIGV4cGVjdGluZyB0eXBlIFxcXCJcIikuY29uY2F0KHR5cGVTdHIsIFwiXFxcIi5cIiksIFt2YXJEZWYsIG5vZGVdKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBWYXJpYWJsZURlZmluaXRpb246IGZ1bmN0aW9uIFZhcmlhYmxlRGVmaW5pdGlvbihub2RlKSB7XG4gICAgICB2YXJEZWZNYXBbbm9kZS52YXJpYWJsZS5uYW1lLnZhbHVlXSA9IG5vZGU7XG4gICAgfVxuICB9O1xufVxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIHZhcmlhYmxlIGlzIGFsbG93ZWQgaW4gdGhlIGxvY2F0aW9uIGl0IHdhcyBmb3VuZCxcbiAqIHdoaWNoIGluY2x1ZGVzIGNvbnNpZGVyaW5nIGlmIGRlZmF1bHQgdmFsdWVzIGV4aXN0IGZvciBlaXRoZXIgdGhlIHZhcmlhYmxlXG4gKiBvciB0aGUgbG9jYXRpb24gYXQgd2hpY2ggaXQgaXMgbG9jYXRlZC5cbiAqL1xuXG5mdW5jdGlvbiBhbGxvd2VkVmFyaWFibGVVc2FnZShzY2hlbWEsIHZhclR5cGUsIHZhckRlZmF1bHRWYWx1ZSwgbG9jYXRpb25UeXBlLCBsb2NhdGlvbkRlZmF1bHRWYWx1ZSkge1xuICBpZiAoaXNOb25OdWxsVHlwZShsb2NhdGlvblR5cGUpICYmICFpc05vbk51bGxUeXBlKHZhclR5cGUpKSB7XG4gICAgdmFyIGhhc05vbk51bGxWYXJpYWJsZURlZmF1bHRWYWx1ZSA9IHZhckRlZmF1bHRWYWx1ZSAhPSBudWxsICYmIHZhckRlZmF1bHRWYWx1ZS5raW5kICE9PSBLaW5kLk5VTEw7XG4gICAgdmFyIGhhc0xvY2F0aW9uRGVmYXVsdFZhbHVlID0gbG9jYXRpb25EZWZhdWx0VmFsdWUgIT09IHVuZGVmaW5lZDtcblxuICAgIGlmICghaGFzTm9uTnVsbFZhcmlhYmxlRGVmYXVsdFZhbHVlICYmICFoYXNMb2NhdGlvbkRlZmF1bHRWYWx1ZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBudWxsYWJsZUxvY2F0aW9uVHlwZSA9IGxvY2F0aW9uVHlwZS5vZlR5cGU7XG4gICAgcmV0dXJuIGlzVHlwZVN1YlR5cGVPZihzY2hlbWEsIHZhclR5cGUsIG51bGxhYmxlTG9jYXRpb25UeXBlKTtcbiAgfVxuXG4gIHJldHVybiBpc1R5cGVTdWJUeXBlT2Yoc2NoZW1hLCB2YXJUeXBlLCBsb2NhdGlvblR5cGUpO1xufVxuIiwiaW1wb3J0IGludmFyaWFudCBmcm9tIFwiLi4vLi4vLi4vanN1dGlscy9pbnZhcmlhbnQubWpzXCI7XG5pbXBvcnQgeyBHcmFwaFFMRXJyb3IgfSBmcm9tIFwiLi4vLi4vLi4vZXJyb3IvR3JhcGhRTEVycm9yLm1qc1wiO1xuaW1wb3J0IHsgZ2V0TmFtZWRUeXBlLCBpc0lucHV0T2JqZWN0VHlwZSB9IGZyb20gXCIuLi8uLi8uLi90eXBlL2RlZmluaXRpb24ubWpzXCI7XG5cbi8qKlxuICogTm8gZGVwcmVjYXRlZFxuICpcbiAqIEEgR3JhcGhRTCBkb2N1bWVudCBpcyBvbmx5IHZhbGlkIGlmIGFsbCBzZWxlY3RlZCBmaWVsZHMgYW5kIGFsbCB1c2VkIGVudW0gdmFsdWVzIGhhdmUgbm90IGJlZW5cbiAqIGRlcHJlY2F0ZWQuXG4gKlxuICogTm90ZTogVGhpcyBydWxlIGlzIG9wdGlvbmFsIGFuZCBpcyBub3QgcGFydCBvZiB0aGUgVmFsaWRhdGlvbiBzZWN0aW9uIG9mIHRoZSBHcmFwaFFMXG4gKiBTcGVjaWZpY2F0aW9uLiBUaGUgbWFpbiBwdXJwb3NlIG9mIHRoaXMgcnVsZSBpcyBkZXRlY3Rpb24gb2YgZGVwcmVjYXRlZCB1c2FnZXMgYW5kIG5vdFxuICogbmVjZXNzYXJpbHkgdG8gZm9yYmlkIHRoZWlyIHVzZSB3aGVuIHF1ZXJ5aW5nIGEgc2VydmljZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIE5vRGVwcmVjYXRlZEN1c3RvbVJ1bGUoY29udGV4dCkge1xuICByZXR1cm4ge1xuICAgIEZpZWxkOiBmdW5jdGlvbiBGaWVsZChub2RlKSB7XG4gICAgICB2YXIgZmllbGREZWYgPSBjb250ZXh0LmdldEZpZWxkRGVmKCk7XG4gICAgICB2YXIgZGVwcmVjYXRpb25SZWFzb24gPSBmaWVsZERlZiA9PT0gbnVsbCB8fCBmaWVsZERlZiA9PT0gdm9pZCAwID8gdm9pZCAwIDogZmllbGREZWYuZGVwcmVjYXRpb25SZWFzb247XG5cbiAgICAgIGlmIChmaWVsZERlZiAmJiBkZXByZWNhdGlvblJlYXNvbiAhPSBudWxsKSB7XG4gICAgICAgIHZhciBwYXJlbnRUeXBlID0gY29udGV4dC5nZXRQYXJlbnRUeXBlKCk7XG4gICAgICAgIHBhcmVudFR5cGUgIT0gbnVsbCB8fCBpbnZhcmlhbnQoMCk7XG4gICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IobmV3IEdyYXBoUUxFcnJvcihcIlRoZSBmaWVsZCBcIi5jb25jYXQocGFyZW50VHlwZS5uYW1lLCBcIi5cIikuY29uY2F0KGZpZWxkRGVmLm5hbWUsIFwiIGlzIGRlcHJlY2F0ZWQuIFwiKS5jb25jYXQoZGVwcmVjYXRpb25SZWFzb24pLCBub2RlKSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBBcmd1bWVudDogZnVuY3Rpb24gQXJndW1lbnQobm9kZSkge1xuICAgICAgdmFyIGFyZ0RlZiA9IGNvbnRleHQuZ2V0QXJndW1lbnQoKTtcbiAgICAgIHZhciBkZXByZWNhdGlvblJlYXNvbiA9IGFyZ0RlZiA9PT0gbnVsbCB8fCBhcmdEZWYgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGFyZ0RlZi5kZXByZWNhdGlvblJlYXNvbjtcblxuICAgICAgaWYgKGFyZ0RlZiAmJiBkZXByZWNhdGlvblJlYXNvbiAhPSBudWxsKSB7XG4gICAgICAgIHZhciBkaXJlY3RpdmVEZWYgPSBjb250ZXh0LmdldERpcmVjdGl2ZSgpO1xuXG4gICAgICAgIGlmIChkaXJlY3RpdmVEZWYgIT0gbnVsbCkge1xuICAgICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IobmV3IEdyYXBoUUxFcnJvcihcIkRpcmVjdGl2ZSBcXFwiQFwiLmNvbmNhdChkaXJlY3RpdmVEZWYubmFtZSwgXCJcXFwiIGFyZ3VtZW50IFxcXCJcIikuY29uY2F0KGFyZ0RlZi5uYW1lLCBcIlxcXCIgaXMgZGVwcmVjYXRlZC4gXCIpLmNvbmNhdChkZXByZWNhdGlvblJlYXNvbiksIG5vZGUpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcGFyZW50VHlwZSA9IGNvbnRleHQuZ2V0UGFyZW50VHlwZSgpO1xuICAgICAgICAgIHZhciBmaWVsZERlZiA9IGNvbnRleHQuZ2V0RmllbGREZWYoKTtcbiAgICAgICAgICBwYXJlbnRUeXBlICE9IG51bGwgJiYgZmllbGREZWYgIT0gbnVsbCB8fCBpbnZhcmlhbnQoMCk7XG4gICAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihuZXcgR3JhcGhRTEVycm9yKFwiRmllbGQgXFxcIlwiLmNvbmNhdChwYXJlbnRUeXBlLm5hbWUsIFwiLlwiKS5jb25jYXQoZmllbGREZWYubmFtZSwgXCJcXFwiIGFyZ3VtZW50IFxcXCJcIikuY29uY2F0KGFyZ0RlZi5uYW1lLCBcIlxcXCIgaXMgZGVwcmVjYXRlZC4gXCIpLmNvbmNhdChkZXByZWNhdGlvblJlYXNvbiksIG5vZGUpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgT2JqZWN0RmllbGQ6IGZ1bmN0aW9uIE9iamVjdEZpZWxkKG5vZGUpIHtcbiAgICAgIHZhciBpbnB1dE9iamVjdERlZiA9IGdldE5hbWVkVHlwZShjb250ZXh0LmdldFBhcmVudElucHV0VHlwZSgpKTtcblxuICAgICAgaWYgKGlzSW5wdXRPYmplY3RUeXBlKGlucHV0T2JqZWN0RGVmKSkge1xuICAgICAgICB2YXIgaW5wdXRGaWVsZERlZiA9IGlucHV0T2JqZWN0RGVmLmdldEZpZWxkcygpW25vZGUubmFtZS52YWx1ZV07IC8vIGZsb3dsaW50LW5leHQtbGluZSB1bm5lY2Vzc2FyeS1vcHRpb25hbC1jaGFpbjpvZmZcblxuICAgICAgICB2YXIgZGVwcmVjYXRpb25SZWFzb24gPSBpbnB1dEZpZWxkRGVmID09PSBudWxsIHx8IGlucHV0RmllbGREZWYgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGlucHV0RmllbGREZWYuZGVwcmVjYXRpb25SZWFzb247XG5cbiAgICAgICAgaWYgKGRlcHJlY2F0aW9uUmVhc29uICE9IG51bGwpIHtcbiAgICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKG5ldyBHcmFwaFFMRXJyb3IoXCJUaGUgaW5wdXQgZmllbGQgXCIuY29uY2F0KGlucHV0T2JqZWN0RGVmLm5hbWUsIFwiLlwiKS5jb25jYXQoaW5wdXRGaWVsZERlZi5uYW1lLCBcIiBpcyBkZXByZWNhdGVkLiBcIikuY29uY2F0KGRlcHJlY2F0aW9uUmVhc29uKSwgbm9kZSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBFbnVtVmFsdWU6IGZ1bmN0aW9uIEVudW1WYWx1ZShub2RlKSB7XG4gICAgICB2YXIgZW51bVZhbHVlRGVmID0gY29udGV4dC5nZXRFbnVtVmFsdWUoKTtcbiAgICAgIHZhciBkZXByZWNhdGlvblJlYXNvbiA9IGVudW1WYWx1ZURlZiA9PT0gbnVsbCB8fCBlbnVtVmFsdWVEZWYgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGVudW1WYWx1ZURlZi5kZXByZWNhdGlvblJlYXNvbjtcblxuICAgICAgaWYgKGVudW1WYWx1ZURlZiAmJiBkZXByZWNhdGlvblJlYXNvbiAhPSBudWxsKSB7XG4gICAgICAgIHZhciBlbnVtVHlwZURlZiA9IGdldE5hbWVkVHlwZShjb250ZXh0LmdldElucHV0VHlwZSgpKTtcbiAgICAgICAgZW51bVR5cGVEZWYgIT0gbnVsbCB8fCBpbnZhcmlhbnQoMCk7XG4gICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IobmV3IEdyYXBoUUxFcnJvcihcIlRoZSBlbnVtIHZhbHVlIFxcXCJcIi5jb25jYXQoZW51bVR5cGVEZWYubmFtZSwgXCIuXCIpLmNvbmNhdChlbnVtVmFsdWVEZWYubmFtZSwgXCJcXFwiIGlzIGRlcHJlY2F0ZWQuIFwiKS5jb25jYXQoZGVwcmVjYXRpb25SZWFzb24pLCBub2RlKSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuIiwiaW1wb3J0IHsgR3JhcGhRTEVycm9yIH0gZnJvbSBcIi4uLy4uLy4uL2Vycm9yL0dyYXBoUUxFcnJvci5tanNcIjtcbmltcG9ydCB7IGdldE5hbWVkVHlwZSB9IGZyb20gXCIuLi8uLi8uLi90eXBlL2RlZmluaXRpb24ubWpzXCI7XG5pbXBvcnQgeyBpc0ludHJvc3BlY3Rpb25UeXBlIH0gZnJvbSBcIi4uLy4uLy4uL3R5cGUvaW50cm9zcGVjdGlvbi5tanNcIjtcblxuLyoqXG4gKiBQcm9oaWJpdCBpbnRyb3NwZWN0aW9uIHF1ZXJpZXNcbiAqXG4gKiBBIEdyYXBoUUwgZG9jdW1lbnQgaXMgb25seSB2YWxpZCBpZiBhbGwgZmllbGRzIHNlbGVjdGVkIGFyZSBub3QgZmllbGRzIHRoYXRcbiAqIHJldHVybiBhbiBpbnRyb3NwZWN0aW9uIHR5cGUuXG4gKlxuICogTm90ZTogVGhpcyBydWxlIGlzIG9wdGlvbmFsIGFuZCBpcyBub3QgcGFydCBvZiB0aGUgVmFsaWRhdGlvbiBzZWN0aW9uIG9mIHRoZVxuICogR3JhcGhRTCBTcGVjaWZpY2F0aW9uLiBUaGlzIHJ1bGUgZWZmZWN0aXZlbHkgZGlzYWJsZXMgaW50cm9zcGVjdGlvbiwgd2hpY2hcbiAqIGRvZXMgbm90IHJlZmxlY3QgYmVzdCBwcmFjdGljZXMgYW5kIHNob3VsZCBvbmx5IGJlIGRvbmUgaWYgYWJzb2x1dGVseSBuZWNlc3NhcnkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBOb1NjaGVtYUludHJvc3BlY3Rpb25DdXN0b21SdWxlKGNvbnRleHQpIHtcbiAgcmV0dXJuIHtcbiAgICBGaWVsZDogZnVuY3Rpb24gRmllbGQobm9kZSkge1xuICAgICAgdmFyIHR5cGUgPSBnZXROYW1lZFR5cGUoY29udGV4dC5nZXRUeXBlKCkpO1xuXG4gICAgICBpZiAodHlwZSAmJiBpc0ludHJvc3BlY3Rpb25UeXBlKHR5cGUpKSB7XG4gICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IobmV3IEdyYXBoUUxFcnJvcihcIkdyYXBoUUwgaW50cm9zcGVjdGlvbiBoYXMgYmVlbiBkaXNhYmxlZCwgYnV0IHRoZSByZXF1ZXN0ZWQgcXVlcnkgY29udGFpbmVkIHRoZSBmaWVsZCBcXFwiXCIuY29uY2F0KG5vZGUubmFtZS52YWx1ZSwgXCJcXFwiLlwiKSwgbm9kZSkpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cbiIsIi8vIFNwZWMgU2VjdGlvbjogXCJFeGVjdXRhYmxlIERlZmluaXRpb25zXCJcbmltcG9ydCB7IEV4ZWN1dGFibGVEZWZpbml0aW9uc1J1bGUgfSBmcm9tIFwiLi9ydWxlcy9FeGVjdXRhYmxlRGVmaW5pdGlvbnNSdWxlLm1qc1wiOyAvLyBTcGVjIFNlY3Rpb246IFwiT3BlcmF0aW9uIE5hbWUgVW5pcXVlbmVzc1wiXG5cbmltcG9ydCB7IFVuaXF1ZU9wZXJhdGlvbk5hbWVzUnVsZSB9IGZyb20gXCIuL3J1bGVzL1VuaXF1ZU9wZXJhdGlvbk5hbWVzUnVsZS5tanNcIjsgLy8gU3BlYyBTZWN0aW9uOiBcIkxvbmUgQW5vbnltb3VzIE9wZXJhdGlvblwiXG5cbmltcG9ydCB7IExvbmVBbm9ueW1vdXNPcGVyYXRpb25SdWxlIH0gZnJvbSBcIi4vcnVsZXMvTG9uZUFub255bW91c09wZXJhdGlvblJ1bGUubWpzXCI7IC8vIFNwZWMgU2VjdGlvbjogXCJTdWJzY3JpcHRpb25zIHdpdGggU2luZ2xlIFJvb3QgRmllbGRcIlxuXG5pbXBvcnQgeyBTaW5nbGVGaWVsZFN1YnNjcmlwdGlvbnNSdWxlIH0gZnJvbSBcIi4vcnVsZXMvU2luZ2xlRmllbGRTdWJzY3JpcHRpb25zUnVsZS5tanNcIjsgLy8gU3BlYyBTZWN0aW9uOiBcIkZyYWdtZW50IFNwcmVhZCBUeXBlIEV4aXN0ZW5jZVwiXG5cbmltcG9ydCB7IEtub3duVHlwZU5hbWVzUnVsZSB9IGZyb20gXCIuL3J1bGVzL0tub3duVHlwZU5hbWVzUnVsZS5tanNcIjsgLy8gU3BlYyBTZWN0aW9uOiBcIkZyYWdtZW50cyBvbiBDb21wb3NpdGUgVHlwZXNcIlxuXG5pbXBvcnQgeyBGcmFnbWVudHNPbkNvbXBvc2l0ZVR5cGVzUnVsZSB9IGZyb20gXCIuL3J1bGVzL0ZyYWdtZW50c09uQ29tcG9zaXRlVHlwZXNSdWxlLm1qc1wiOyAvLyBTcGVjIFNlY3Rpb246IFwiVmFyaWFibGVzIGFyZSBJbnB1dCBUeXBlc1wiXG5cbmltcG9ydCB7IFZhcmlhYmxlc0FyZUlucHV0VHlwZXNSdWxlIH0gZnJvbSBcIi4vcnVsZXMvVmFyaWFibGVzQXJlSW5wdXRUeXBlc1J1bGUubWpzXCI7IC8vIFNwZWMgU2VjdGlvbjogXCJMZWFmIEZpZWxkIFNlbGVjdGlvbnNcIlxuXG5pbXBvcnQgeyBTY2FsYXJMZWFmc1J1bGUgfSBmcm9tIFwiLi9ydWxlcy9TY2FsYXJMZWFmc1J1bGUubWpzXCI7IC8vIFNwZWMgU2VjdGlvbjogXCJGaWVsZCBTZWxlY3Rpb25zIG9uIE9iamVjdHMsIEludGVyZmFjZXMsIGFuZCBVbmlvbnMgVHlwZXNcIlxuXG5pbXBvcnQgeyBGaWVsZHNPbkNvcnJlY3RUeXBlUnVsZSB9IGZyb20gXCIuL3J1bGVzL0ZpZWxkc09uQ29ycmVjdFR5cGVSdWxlLm1qc1wiOyAvLyBTcGVjIFNlY3Rpb246IFwiRnJhZ21lbnQgTmFtZSBVbmlxdWVuZXNzXCJcblxuaW1wb3J0IHsgVW5pcXVlRnJhZ21lbnROYW1lc1J1bGUgfSBmcm9tIFwiLi9ydWxlcy9VbmlxdWVGcmFnbWVudE5hbWVzUnVsZS5tanNcIjsgLy8gU3BlYyBTZWN0aW9uOiBcIkZyYWdtZW50IHNwcmVhZCB0YXJnZXQgZGVmaW5lZFwiXG5cbmltcG9ydCB7IEtub3duRnJhZ21lbnROYW1lc1J1bGUgfSBmcm9tIFwiLi9ydWxlcy9Lbm93bkZyYWdtZW50TmFtZXNSdWxlLm1qc1wiOyAvLyBTcGVjIFNlY3Rpb246IFwiRnJhZ21lbnRzIG11c3QgYmUgdXNlZFwiXG5cbmltcG9ydCB7IE5vVW51c2VkRnJhZ21lbnRzUnVsZSB9IGZyb20gXCIuL3J1bGVzL05vVW51c2VkRnJhZ21lbnRzUnVsZS5tanNcIjsgLy8gU3BlYyBTZWN0aW9uOiBcIkZyYWdtZW50IHNwcmVhZCBpcyBwb3NzaWJsZVwiXG5cbmltcG9ydCB7IFBvc3NpYmxlRnJhZ21lbnRTcHJlYWRzUnVsZSB9IGZyb20gXCIuL3J1bGVzL1Bvc3NpYmxlRnJhZ21lbnRTcHJlYWRzUnVsZS5tanNcIjsgLy8gU3BlYyBTZWN0aW9uOiBcIkZyYWdtZW50cyBtdXN0IG5vdCBmb3JtIGN5Y2xlc1wiXG5cbmltcG9ydCB7IE5vRnJhZ21lbnRDeWNsZXNSdWxlIH0gZnJvbSBcIi4vcnVsZXMvTm9GcmFnbWVudEN5Y2xlc1J1bGUubWpzXCI7IC8vIFNwZWMgU2VjdGlvbjogXCJWYXJpYWJsZSBVbmlxdWVuZXNzXCJcblxuaW1wb3J0IHsgVW5pcXVlVmFyaWFibGVOYW1lc1J1bGUgfSBmcm9tIFwiLi9ydWxlcy9VbmlxdWVWYXJpYWJsZU5hbWVzUnVsZS5tanNcIjsgLy8gU3BlYyBTZWN0aW9uOiBcIkFsbCBWYXJpYWJsZSBVc2VkIERlZmluZWRcIlxuXG5pbXBvcnQgeyBOb1VuZGVmaW5lZFZhcmlhYmxlc1J1bGUgfSBmcm9tIFwiLi9ydWxlcy9Ob1VuZGVmaW5lZFZhcmlhYmxlc1J1bGUubWpzXCI7IC8vIFNwZWMgU2VjdGlvbjogXCJBbGwgVmFyaWFibGVzIFVzZWRcIlxuXG5pbXBvcnQgeyBOb1VudXNlZFZhcmlhYmxlc1J1bGUgfSBmcm9tIFwiLi9ydWxlcy9Ob1VudXNlZFZhcmlhYmxlc1J1bGUubWpzXCI7IC8vIFNwZWMgU2VjdGlvbjogXCJEaXJlY3RpdmVzIEFyZSBEZWZpbmVkXCJcblxuaW1wb3J0IHsgS25vd25EaXJlY3RpdmVzUnVsZSB9IGZyb20gXCIuL3J1bGVzL0tub3duRGlyZWN0aXZlc1J1bGUubWpzXCI7IC8vIFNwZWMgU2VjdGlvbjogXCJEaXJlY3RpdmVzIEFyZSBVbmlxdWUgUGVyIExvY2F0aW9uXCJcblxuaW1wb3J0IHsgVW5pcXVlRGlyZWN0aXZlc1BlckxvY2F0aW9uUnVsZSB9IGZyb20gXCIuL3J1bGVzL1VuaXF1ZURpcmVjdGl2ZXNQZXJMb2NhdGlvblJ1bGUubWpzXCI7IC8vIFNwZWMgU2VjdGlvbjogXCJBcmd1bWVudCBOYW1lc1wiXG5cbmltcG9ydCB7IEtub3duQXJndW1lbnROYW1lc1J1bGUsIEtub3duQXJndW1lbnROYW1lc09uRGlyZWN0aXZlc1J1bGUgfSBmcm9tIFwiLi9ydWxlcy9Lbm93bkFyZ3VtZW50TmFtZXNSdWxlLm1qc1wiOyAvLyBTcGVjIFNlY3Rpb246IFwiQXJndW1lbnQgVW5pcXVlbmVzc1wiXG5cbmltcG9ydCB7IFVuaXF1ZUFyZ3VtZW50TmFtZXNSdWxlIH0gZnJvbSBcIi4vcnVsZXMvVW5pcXVlQXJndW1lbnROYW1lc1J1bGUubWpzXCI7IC8vIFNwZWMgU2VjdGlvbjogXCJWYWx1ZSBUeXBlIENvcnJlY3RuZXNzXCJcblxuaW1wb3J0IHsgVmFsdWVzT2ZDb3JyZWN0VHlwZVJ1bGUgfSBmcm9tIFwiLi9ydWxlcy9WYWx1ZXNPZkNvcnJlY3RUeXBlUnVsZS5tanNcIjsgLy8gU3BlYyBTZWN0aW9uOiBcIkFyZ3VtZW50IE9wdGlvbmFsaXR5XCJcblxuaW1wb3J0IHsgUHJvdmlkZWRSZXF1aXJlZEFyZ3VtZW50c1J1bGUsIFByb3ZpZGVkUmVxdWlyZWRBcmd1bWVudHNPbkRpcmVjdGl2ZXNSdWxlIH0gZnJvbSBcIi4vcnVsZXMvUHJvdmlkZWRSZXF1aXJlZEFyZ3VtZW50c1J1bGUubWpzXCI7IC8vIFNwZWMgU2VjdGlvbjogXCJBbGwgVmFyaWFibGUgVXNhZ2VzIEFyZSBBbGxvd2VkXCJcblxuaW1wb3J0IHsgVmFyaWFibGVzSW5BbGxvd2VkUG9zaXRpb25SdWxlIH0gZnJvbSBcIi4vcnVsZXMvVmFyaWFibGVzSW5BbGxvd2VkUG9zaXRpb25SdWxlLm1qc1wiOyAvLyBTcGVjIFNlY3Rpb246IFwiRmllbGQgU2VsZWN0aW9uIE1lcmdpbmdcIlxuXG5pbXBvcnQgeyBPdmVybGFwcGluZ0ZpZWxkc0NhbkJlTWVyZ2VkUnVsZSB9IGZyb20gXCIuL3J1bGVzL092ZXJsYXBwaW5nRmllbGRzQ2FuQmVNZXJnZWRSdWxlLm1qc1wiOyAvLyBTcGVjIFNlY3Rpb246IFwiSW5wdXQgT2JqZWN0IEZpZWxkIFVuaXF1ZW5lc3NcIlxuXG5pbXBvcnQgeyBVbmlxdWVJbnB1dEZpZWxkTmFtZXNSdWxlIH0gZnJvbSBcIi4vcnVsZXMvVW5pcXVlSW5wdXRGaWVsZE5hbWVzUnVsZS5tanNcIjsgLy8gU0RMLXNwZWNpZmljIHZhbGlkYXRpb24gcnVsZXNcblxuaW1wb3J0IHsgTG9uZVNjaGVtYURlZmluaXRpb25SdWxlIH0gZnJvbSBcIi4vcnVsZXMvTG9uZVNjaGVtYURlZmluaXRpb25SdWxlLm1qc1wiO1xuaW1wb3J0IHsgVW5pcXVlT3BlcmF0aW9uVHlwZXNSdWxlIH0gZnJvbSBcIi4vcnVsZXMvVW5pcXVlT3BlcmF0aW9uVHlwZXNSdWxlLm1qc1wiO1xuaW1wb3J0IHsgVW5pcXVlVHlwZU5hbWVzUnVsZSB9IGZyb20gXCIuL3J1bGVzL1VuaXF1ZVR5cGVOYW1lc1J1bGUubWpzXCI7XG5pbXBvcnQgeyBVbmlxdWVFbnVtVmFsdWVOYW1lc1J1bGUgfSBmcm9tIFwiLi9ydWxlcy9VbmlxdWVFbnVtVmFsdWVOYW1lc1J1bGUubWpzXCI7XG5pbXBvcnQgeyBVbmlxdWVGaWVsZERlZmluaXRpb25OYW1lc1J1bGUgfSBmcm9tIFwiLi9ydWxlcy9VbmlxdWVGaWVsZERlZmluaXRpb25OYW1lc1J1bGUubWpzXCI7XG5pbXBvcnQgeyBVbmlxdWVEaXJlY3RpdmVOYW1lc1J1bGUgfSBmcm9tIFwiLi9ydWxlcy9VbmlxdWVEaXJlY3RpdmVOYW1lc1J1bGUubWpzXCI7XG5pbXBvcnQgeyBQb3NzaWJsZVR5cGVFeHRlbnNpb25zUnVsZSB9IGZyb20gXCIuL3J1bGVzL1Bvc3NpYmxlVHlwZUV4dGVuc2lvbnNSdWxlLm1qc1wiO1xuLyoqXG4gKiBUaGlzIHNldCBpbmNsdWRlcyBhbGwgdmFsaWRhdGlvbiBydWxlcyBkZWZpbmVkIGJ5IHRoZSBHcmFwaFFMIHNwZWMuXG4gKlxuICogVGhlIG9yZGVyIG9mIHRoZSBydWxlcyBpbiB0aGlzIGxpc3QgaGFzIGJlZW4gYWRqdXN0ZWQgdG8gbGVhZCB0byB0aGVcbiAqIG1vc3QgY2xlYXIgb3V0cHV0IHdoZW4gZW5jb3VudGVyaW5nIG11bHRpcGxlIHZhbGlkYXRpb24gZXJyb3JzLlxuICovXG5cbmV4cG9ydCB2YXIgc3BlY2lmaWVkUnVsZXMgPSBPYmplY3QuZnJlZXplKFtFeGVjdXRhYmxlRGVmaW5pdGlvbnNSdWxlLCBVbmlxdWVPcGVyYXRpb25OYW1lc1J1bGUsIExvbmVBbm9ueW1vdXNPcGVyYXRpb25SdWxlLCBTaW5nbGVGaWVsZFN1YnNjcmlwdGlvbnNSdWxlLCBLbm93blR5cGVOYW1lc1J1bGUsIEZyYWdtZW50c09uQ29tcG9zaXRlVHlwZXNSdWxlLCBWYXJpYWJsZXNBcmVJbnB1dFR5cGVzUnVsZSwgU2NhbGFyTGVhZnNSdWxlLCBGaWVsZHNPbkNvcnJlY3RUeXBlUnVsZSwgVW5pcXVlRnJhZ21lbnROYW1lc1J1bGUsIEtub3duRnJhZ21lbnROYW1lc1J1bGUsIE5vVW51c2VkRnJhZ21lbnRzUnVsZSwgUG9zc2libGVGcmFnbWVudFNwcmVhZHNSdWxlLCBOb0ZyYWdtZW50Q3ljbGVzUnVsZSwgVW5pcXVlVmFyaWFibGVOYW1lc1J1bGUsIE5vVW5kZWZpbmVkVmFyaWFibGVzUnVsZSwgTm9VbnVzZWRWYXJpYWJsZXNSdWxlLCBLbm93bkRpcmVjdGl2ZXNSdWxlLCBVbmlxdWVEaXJlY3RpdmVzUGVyTG9jYXRpb25SdWxlLCBLbm93bkFyZ3VtZW50TmFtZXNSdWxlLCBVbmlxdWVBcmd1bWVudE5hbWVzUnVsZSwgVmFsdWVzT2ZDb3JyZWN0VHlwZVJ1bGUsIFByb3ZpZGVkUmVxdWlyZWRBcmd1bWVudHNSdWxlLCBWYXJpYWJsZXNJbkFsbG93ZWRQb3NpdGlvblJ1bGUsIE92ZXJsYXBwaW5nRmllbGRzQ2FuQmVNZXJnZWRSdWxlLCBVbmlxdWVJbnB1dEZpZWxkTmFtZXNSdWxlXSk7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5cbmV4cG9ydCB2YXIgc3BlY2lmaWVkU0RMUnVsZXMgPSBPYmplY3QuZnJlZXplKFtMb25lU2NoZW1hRGVmaW5pdGlvblJ1bGUsIFVuaXF1ZU9wZXJhdGlvblR5cGVzUnVsZSwgVW5pcXVlVHlwZU5hbWVzUnVsZSwgVW5pcXVlRW51bVZhbHVlTmFtZXNSdWxlLCBVbmlxdWVGaWVsZERlZmluaXRpb25OYW1lc1J1bGUsIFVuaXF1ZURpcmVjdGl2ZU5hbWVzUnVsZSwgS25vd25UeXBlTmFtZXNSdWxlLCBLbm93bkRpcmVjdGl2ZXNSdWxlLCBVbmlxdWVEaXJlY3RpdmVzUGVyTG9jYXRpb25SdWxlLCBQb3NzaWJsZVR5cGVFeHRlbnNpb25zUnVsZSwgS25vd25Bcmd1bWVudE5hbWVzT25EaXJlY3RpdmVzUnVsZSwgVW5pcXVlQXJndW1lbnROYW1lc1J1bGUsIFVuaXF1ZUlucHV0RmllbGROYW1lc1J1bGUsIFByb3ZpZGVkUmVxdWlyZWRBcmd1bWVudHNPbkRpcmVjdGl2ZXNSdWxlXSk7XG4iLCJpbXBvcnQgZGV2QXNzZXJ0IGZyb20gXCIuLi9qc3V0aWxzL2RldkFzc2VydC5tanNcIjtcbmltcG9ydCB7IEdyYXBoUUxFcnJvciB9IGZyb20gXCIuLi9lcnJvci9HcmFwaFFMRXJyb3IubWpzXCI7XG5pbXBvcnQgeyB2aXNpdCwgdmlzaXRJblBhcmFsbGVsIH0gZnJvbSBcIi4uL2xhbmd1YWdlL3Zpc2l0b3IubWpzXCI7XG5pbXBvcnQgeyBhc3NlcnRWYWxpZFNjaGVtYSB9IGZyb20gXCIuLi90eXBlL3ZhbGlkYXRlLm1qc1wiO1xuaW1wb3J0IHsgVHlwZUluZm8sIHZpc2l0V2l0aFR5cGVJbmZvIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9UeXBlSW5mby5tanNcIjtcbmltcG9ydCB7IHNwZWNpZmllZFJ1bGVzLCBzcGVjaWZpZWRTRExSdWxlcyB9IGZyb20gXCIuL3NwZWNpZmllZFJ1bGVzLm1qc1wiO1xuaW1wb3J0IHsgU0RMVmFsaWRhdGlvbkNvbnRleHQsIFZhbGlkYXRpb25Db250ZXh0IH0gZnJvbSBcIi4vVmFsaWRhdGlvbkNvbnRleHQubWpzXCI7XG4vKipcbiAqIEltcGxlbWVudHMgdGhlIFwiVmFsaWRhdGlvblwiIHNlY3Rpb24gb2YgdGhlIHNwZWMuXG4gKlxuICogVmFsaWRhdGlvbiBydW5zIHN5bmNocm9ub3VzbHksIHJldHVybmluZyBhbiBhcnJheSBvZiBlbmNvdW50ZXJlZCBlcnJvcnMsIG9yXG4gKiBhbiBlbXB0eSBhcnJheSBpZiBubyBlcnJvcnMgd2VyZSBlbmNvdW50ZXJlZCBhbmQgdGhlIGRvY3VtZW50IGlzIHZhbGlkLlxuICpcbiAqIEEgbGlzdCBvZiBzcGVjaWZpYyB2YWxpZGF0aW9uIHJ1bGVzIG1heSBiZSBwcm92aWRlZC4gSWYgbm90IHByb3ZpZGVkLCB0aGVcbiAqIGRlZmF1bHQgbGlzdCBvZiBydWxlcyBkZWZpbmVkIGJ5IHRoZSBHcmFwaFFMIHNwZWNpZmljYXRpb24gd2lsbCBiZSB1c2VkLlxuICpcbiAqIEVhY2ggdmFsaWRhdGlvbiBydWxlcyBpcyBhIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYSB2aXNpdG9yXG4gKiAoc2VlIHRoZSBsYW5ndWFnZS92aXNpdG9yIEFQSSkuIFZpc2l0b3IgbWV0aG9kcyBhcmUgZXhwZWN0ZWQgdG8gcmV0dXJuXG4gKiBHcmFwaFFMRXJyb3JzLCBvciBBcnJheXMgb2YgR3JhcGhRTEVycm9ycyB3aGVuIGludmFsaWQuXG4gKlxuICogT3B0aW9uYWxseSBhIGN1c3RvbSBUeXBlSW5mbyBpbnN0YW5jZSBtYXkgYmUgcHJvdmlkZWQuIElmIG5vdCBwcm92aWRlZCwgb25lXG4gKiB3aWxsIGJlIGNyZWF0ZWQgZnJvbSB0aGUgcHJvdmlkZWQgc2NoZW1hLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZShzY2hlbWEsIGRvY3VtZW50QVNUKSB7XG4gIHZhciBydWxlcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogc3BlY2lmaWVkUnVsZXM7XG4gIHZhciB0eXBlSW5mbyA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogbmV3IFR5cGVJbmZvKHNjaGVtYSk7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiB7XG4gICAgbWF4RXJyb3JzOiB1bmRlZmluZWRcbiAgfTtcbiAgZG9jdW1lbnRBU1QgfHwgZGV2QXNzZXJ0KDAsICdNdXN0IHByb3ZpZGUgZG9jdW1lbnQuJyk7IC8vIElmIHRoZSBzY2hlbWEgdXNlZCBmb3IgdmFsaWRhdGlvbiBpcyBpbnZhbGlkLCB0aHJvdyBhbiBlcnJvci5cblxuICBhc3NlcnRWYWxpZFNjaGVtYShzY2hlbWEpO1xuICB2YXIgYWJvcnRPYmogPSBPYmplY3QuZnJlZXplKHt9KTtcbiAgdmFyIGVycm9ycyA9IFtdO1xuICB2YXIgY29udGV4dCA9IG5ldyBWYWxpZGF0aW9uQ29udGV4dChzY2hlbWEsIGRvY3VtZW50QVNULCB0eXBlSW5mbywgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgaWYgKG9wdGlvbnMubWF4RXJyb3JzICE9IG51bGwgJiYgZXJyb3JzLmxlbmd0aCA+PSBvcHRpb25zLm1heEVycm9ycykge1xuICAgICAgZXJyb3JzLnB1c2gobmV3IEdyYXBoUUxFcnJvcignVG9vIG1hbnkgdmFsaWRhdGlvbiBlcnJvcnMsIGVycm9yIGxpbWl0IHJlYWNoZWQuIFZhbGlkYXRpb24gYWJvcnRlZC4nKSk7XG4gICAgICB0aHJvdyBhYm9ydE9iajtcbiAgICB9XG5cbiAgICBlcnJvcnMucHVzaChlcnJvcik7XG4gIH0pOyAvLyBUaGlzIHVzZXMgYSBzcGVjaWFsaXplZCB2aXNpdG9yIHdoaWNoIHJ1bnMgbXVsdGlwbGUgdmlzaXRvcnMgaW4gcGFyYWxsZWwsXG4gIC8vIHdoaWxlIG1haW50YWluaW5nIHRoZSB2aXNpdG9yIHNraXAgYW5kIGJyZWFrIEFQSS5cblxuICB2YXIgdmlzaXRvciA9IHZpc2l0SW5QYXJhbGxlbChydWxlcy5tYXAoZnVuY3Rpb24gKHJ1bGUpIHtcbiAgICByZXR1cm4gcnVsZShjb250ZXh0KTtcbiAgfSkpOyAvLyBWaXNpdCB0aGUgd2hvbGUgZG9jdW1lbnQgd2l0aCBlYWNoIGluc3RhbmNlIG9mIGFsbCBwcm92aWRlZCBydWxlcy5cblxuICB0cnkge1xuICAgIHZpc2l0KGRvY3VtZW50QVNULCB2aXNpdFdpdGhUeXBlSW5mbyh0eXBlSW5mbywgdmlzaXRvcikpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKGUgIT09IGFib3J0T2JqKSB7XG4gICAgICB0aHJvdyBlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBlcnJvcnM7XG59XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZVNETChkb2N1bWVudEFTVCwgc2NoZW1hVG9FeHRlbmQpIHtcbiAgdmFyIHJ1bGVzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBzcGVjaWZpZWRTRExSdWxlcztcbiAgdmFyIGVycm9ycyA9IFtdO1xuICB2YXIgY29udGV4dCA9IG5ldyBTRExWYWxpZGF0aW9uQ29udGV4dChkb2N1bWVudEFTVCwgc2NoZW1hVG9FeHRlbmQsIGZ1bmN0aW9uIChlcnJvcikge1xuICAgIGVycm9ycy5wdXNoKGVycm9yKTtcbiAgfSk7XG4gIHZhciB2aXNpdG9ycyA9IHJ1bGVzLm1hcChmdW5jdGlvbiAocnVsZSkge1xuICAgIHJldHVybiBydWxlKGNvbnRleHQpO1xuICB9KTtcbiAgdmlzaXQoZG9jdW1lbnRBU1QsIHZpc2l0SW5QYXJhbGxlbCh2aXNpdG9ycykpO1xuICByZXR1cm4gZXJyb3JzO1xufVxuLyoqXG4gKiBVdGlsaXR5IGZ1bmN0aW9uIHdoaWNoIGFzc2VydHMgYSBTREwgZG9jdW1lbnQgaXMgdmFsaWQgYnkgdGhyb3dpbmcgYW4gZXJyb3JcbiAqIGlmIGl0IGlzIGludmFsaWQuXG4gKlxuICogQGludGVybmFsXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydFZhbGlkU0RMKGRvY3VtZW50QVNUKSB7XG4gIHZhciBlcnJvcnMgPSB2YWxpZGF0ZVNETChkb2N1bWVudEFTVCk7XG5cbiAgaWYgKGVycm9ycy5sZW5ndGggIT09IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JzLm1hcChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBlcnJvci5tZXNzYWdlO1xuICAgIH0pLmpvaW4oJ1xcblxcbicpKTtcbiAgfVxufVxuLyoqXG4gKiBVdGlsaXR5IGZ1bmN0aW9uIHdoaWNoIGFzc2VydHMgYSBTREwgZG9jdW1lbnQgaXMgdmFsaWQgYnkgdGhyb3dpbmcgYW4gZXJyb3JcbiAqIGlmIGl0IGlzIGludmFsaWQuXG4gKlxuICogQGludGVybmFsXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydFZhbGlkU0RMRXh0ZW5zaW9uKGRvY3VtZW50QVNULCBzY2hlbWEpIHtcbiAgdmFyIGVycm9ycyA9IHZhbGlkYXRlU0RMKGRvY3VtZW50QVNULCBzY2hlbWEpO1xuXG4gIGlmIChlcnJvcnMubGVuZ3RoICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGVycm9ycy5tYXAoZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICByZXR1cm4gZXJyb3IubWVzc2FnZTtcbiAgICB9KS5qb2luKCdcXG5cXG4nKSk7XG4gIH1cbn1cbiIsIi8qKlxuICogTm90ZTogVGhpcyBmaWxlIGlzIGF1dG9nZW5lcmF0ZWQgdXNpbmcgXCJyZXNvdXJjZXMvZ2VuLXZlcnNpb24uanNcIiBzY3JpcHQgYW5kXG4gKiBhdXRvbWF0aWNhbGx5IHVwZGF0ZWQgYnkgXCJucG0gdmVyc2lvblwiIGNvbW1hbmQuXG4gKi9cblxuLyoqXG4gKiBBIHN0cmluZyBjb250YWluaW5nIHRoZSB2ZXJzaW9uIG9mIHRoZSBHcmFwaFFMLmpzIGxpYnJhcnlcbiAqL1xuZXhwb3J0IHZhciB2ZXJzaW9uID0gJzE1LjYuMSc7XG4vKipcbiAqIEFuIG9iamVjdCBjb250YWluaW5nIHRoZSBjb21wb25lbnRzIG9mIHRoZSBHcmFwaFFMLmpzIHZlcnNpb24gc3RyaW5nXG4gKi9cblxuZXhwb3J0IHZhciB2ZXJzaW9uSW5mbyA9IE9iamVjdC5mcmVlemUoe1xuICBtYWpvcjogMTUsXG4gIG1pbm9yOiA2LFxuICBwYXRjaDogMSxcbiAgcHJlUmVsZWFzZVRhZzogbnVsbFxufSk7XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsIi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLy8gVGhpcyBlbnRyeSBtb2R1bGUgaXMgcmVmZXJlbmNlZCBieSBvdGhlciBtb2R1bGVzIHNvIGl0IGNhbid0IGJlIGlubGluZWRcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vc3JjL2JhY2tncm91bmQudHNcIik7XG4iXSwibmFtZXMiOlsiZSIsInIiLCJyZWh5ZHJhdGVHcmFwaFFsRXJyb3IiLCJHcmFwaFFMRXJyb3IiLCJtZXNzYWdlIiwibm9kZXMiLCJzb3VyY2UiLCJwb3NpdGlvbnMiLCJwYXRoIiwiZXh0ZW5zaW9ucyIsInQiLCJDb21iaW5lZEVycm9yIiwibmV0d29ya0Vycm9yIiwibiIsInJlc3BvbnNlIiwibyIsImdyYXBoUUxFcnJvcnMiLCJtYXAiLCJpIiwiZm9yRWFjaCIsInRyaW0iLCJjYWxsIiwidGhpcyIsIm5hbWUiLCJfX3Byb3RvX18iLCJwcm90b3R5cGUiLCJPYmplY3QiLCJjcmVhdGUiLCJjb25zdHJ1Y3RvciIsInRvU3RyaW5nIiwiRXJyb3IiLCJwaGFzaCIsImxlbmd0aCIsImNoYXJDb2RlQXQiLCJoYXNoIiwiU2V0IiwiV2Vha01hcCIsInN0cmluZ2lmeSIsImhhcyIsIkpTT04iLCJ0b0pTT04iLCJBcnJheSIsImlzQXJyYXkiLCJhIiwicyIsImtleXMiLCJzb3J0IiwidSIsImdldCIsIk1hdGgiLCJyYW5kb20iLCJzbGljZSIsInNldCIsImFkZCIsImYiLCJjIiwibCIsInAiLCJoIiwiZGVsZXRlIiwic3RyaW5naWZ5VmFyaWFibGVzIiwiY2xlYXIiLCJzdHJpbmdpZnlEb2N1bWVudCIsImxvYyIsImJvZHkiLCJwcmludCIsInJlcGxhY2UiLCJnZXRPcGVyYXRpb25OYW1lIiwic3RhcnQiLCJlbmQiLCJsb2NhdGlvbk9mZnNldCIsImxpbmUiLCJjb2x1bW4iLCJNYXAiLCJrZXlEb2N1bWVudCIsInBhcnNlIiwibm9Mb2NhdGlvbiIsIl9fa2V5IiwiZGVmaW5pdGlvbnMiLCJraW5kIiwiS2luZCIsIk9QRVJBVElPTl9ERUZJTklUSU9OIiwidmFsdWUiLCJfZXh0ZW5kcyIsImFzc2lnbiIsImFyZ3VtZW50cyIsImhhc093blByb3BlcnR5IiwiYXBwbHkiLCJtYWtlUmVzdWx0Iiwib3BlcmF0aW9uIiwiZGF0YSIsImVycm9yIiwiZXJyb3JzIiwiaGFzTmV4dCIsIm1lcmdlUmVzdWx0UGF0Y2giLCJjb25jYXQiLCJtYWtlRXJyb3JSZXN1bHQiLCJzaG91bGRVc2VHZXQiLCJjb250ZXh0IiwicHJlZmVyR2V0TWV0aG9kIiwiU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsIlRleHREZWNvZGVyIiwiZXhlY3V0ZUluY3JlbWVudGFsRmV0Y2giLCJoZWFkZXJzIiwidGVzdCIsImpzb24iLCJ0aGVuIiwibWF0Y2giLCJjYW5jZWwiLCJuZXh0IiwiYmluZCIsIlR5cGVFcnJvciIsImdldFJlYWRlciIsInJlYWQiLCJkIiwidiIsInkiLCJkb25lIiwiQnVmZmVyIiwiaXNCdWZmZXIiLCJkZWNvZGUiLCJpbmRleE9mIiwibSIsImciLCJsYXN0SW5kZXhPZiIsIngiLCJmaW5hbGx5IiwiZXhwb3J0cyIsImNyZWF0ZVJlcXVlc3QiLCJrZXkiLCJxdWVyeSIsInZhcmlhYmxlcyIsImdldE9wZXJhdGlvblR5cGUiLCJtYWtlRmV0Y2hCb2R5Iiwib3BlcmF0aW9uTmFtZSIsIm1ha2VGZXRjaE9wdGlvbnMiLCJmZXRjaE9wdGlvbnMiLCJtZXRob2QiLCJtYWtlRmV0Y2hTb3VyY2UiLCJyZWRpcmVjdCIsImZldGNoIiwibWFrZSIsImNvbXBsZXRlIiwiQWJvcnRDb250cm9sbGVyIiwic2lnbmFsIiwiUHJvbWlzZSIsInJlc29sdmUiLCJzdGF0dXMiLCJjYXRjaCIsInN0YXR1c1RleHQiLCJhYm9ydCIsIm1ha2VGZXRjaFVSTCIsInVybCIsInB1c2giLCJlbmNvZGVVUklDb21wb25lbnQiLCJqb2luIiwiY29sbGVjdFR5cGVzIiwiY29sbGVjdFR5cGVzRnJvbVJlc3BvbnNlIiwiZm9ybWF0Tm9kZSIsInNlbGVjdGlvblNldCIsInNlbGVjdGlvbnMiLCJzb21lIiwiRklFTEQiLCJhbGlhcyIsIk5BTUUiLCJmb3JtYXREb2N1bWVudCIsInZpc2l0IiwiRmllbGQiLCJJbmxpbmVGcmFnbWVudCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsIm1hc2tUeXBlbmFtZSIsInJlZHVjZSIsIndpdGhQcm9taXNlIiwidG9Qcm9taXNlIiwidGFrZSIsImZpbHRlciIsInN0YWxlIiwibWFrZU9wZXJhdGlvbiIsImFkZE1ldGFkYXRhIiwibWV0YSIsIm5vb3AiLCJhcHBseURlZmluaXRpb25zIiwiRlJBR01FTlRfREVGSU5JVElPTiIsImNvbnNvbGUiLCJ3YXJuIiwic2hvdWxkU2tpcCIsImNhY2hlRXhjaGFuZ2UiLCJmb3J3YXJkIiwiY2xpZW50IiwiZGlzcGF0Y2hEZWJ1ZyIsIm1hcFR5cGVOYW1lcyIsImlzT3BlcmF0aW9uQ2FjaGVkIiwicmVxdWVzdFBvbGljeSIsInNoYXJlIiwidHlwZSIsImNhY2hlT3V0Y29tZSIsInJlZXhlY3V0ZU9wZXJhdGlvbiIsInRhcCIsImFkZGl0aW9uYWxUeXBlbmFtZXMiLCJ0eXBlbmFtZXMiLCJtZXJnZSIsImRlZHVwRXhjaGFuZ2UiLCJmaWx0ZXJJbmNvbWluZ09wZXJhdGlvbiIsImFmdGVyT3BlcmF0aW9uUmVzdWx0IiwiZmV0Y2hFeGNoYW5nZSIsIm1lcmdlTWFwIiwib25QdXNoIiwidGFrZVVudGlsIiwiZmFsbGJhY2tFeGNoYW5nZSIsImNvbXBvc2VFeGNoYW5nZXMiLCJyZWR1Y2VSaWdodCIsInRpbWVzdGFtcCIsIkRhdGUiLCJub3ciLCJDbGllbnQiLCJtYWtlU3ViamVjdCIsImRpc3BhdGNoT3BlcmF0aW9uIiwic2hpZnQiLCJtYWtlUmVzdWx0U291cmNlIiwiayIsIm9uU3RhcnQiLCJvbkVuZCIsInNwbGljZSIsInN3aXRjaE1hcCIsImZyb21WYWx1ZSIsInN1c3BlbnNlIiwib3BlcmF0aW9ucyQiLCJjcmVhdGVPcGVyYXRpb25Db250ZXh0IiwiY3JlYXRlUmVxdWVzdE9wZXJhdGlvbiIsImV4ZWN1dGVSZXF1ZXN0T3BlcmF0aW9uIiwic3Vic2NyaWJlIiwidW5zdWJzY3JpYmUiLCJleGVjdXRlUXVlcnkiLCJleGVjdXRlU3Vic2NyaXB0aW9uIiwiZXhlY3V0ZU11dGF0aW9uIiwicmVhZFF1ZXJ5Iiwic3Vic2NyaXB0aW9uIiwibXV0YXRpb24iLCJzdWJzY3JpYmVUb0RlYnVnVGFyZ2V0IiwiZXhjaGFuZ2VzIiwicHVibGlzaCIsImNyZWF0ZUNsaWVudCIsImRlYnVnRXhjaGFuZ2UiLCJsb2ciLCJkZWZhdWx0RXhjaGFuZ2VzIiwiZXJyb3JFeGNoYW5nZSIsIm9uRXJyb3IiLCJmYWxsYmFja0V4Y2hhbmdlSU8iLCJncWwiLCJET0NVTUVOVCIsInNzckV4Y2hhbmdlIiwic3RhbGVXaGlsZVJldmFsaWRhdGUiLCJpbmNsdWRlRXh0ZW5zaW9ucyIsImludmFsaWRhdGUiLCJzc3IiLCJpc0NsaWVudCIsInJlc3RvcmVEYXRhIiwiZXh0cmFjdERhdGEiLCJpbml0aWFsU3RhdGUiLCJzdWJzY3JpcHRpb25FeGNoYW5nZSIsImZvcndhcmRTdWJzY3JpcHRpb24iLCJlbmFibGVBbGxPcGVyYXRpb25zIiwiaXNTdWJzY3JpcHRpb25PcGVyYXRpb24iLCJydW5uaW5nVmFsaWRhdGlvbnNDYWNoZSIsImNocm9tZSIsInN0b3JhZ2UiLCJvbkNoYW5nZWQiLCJhZGRMaXN0ZW5lciIsImNoYW5nZXMiLCJuYW1lc3BhY2UiLCJlbnRyaWVzIiwib2xkVmFsdWUiLCJuZXdWYWx1ZSIsImNyZWF0ZUZpbGVBbmFseXNpc011dGF0aW9uIiwiY29kZSIsImZpbmdlcnByaW50IiwibGFuZ3VhZ2UiLCJmaWxlbmFtZSIsImdldEZpbGVBbmFseXNpc1F1ZXJ5IiwiYW5hbHlzaXNJZCIsImlubmVyQW5hbHlzaXNJZCIsInNob3VsZEZldGNoIiwiY2FjaGVLZXkiLCJydW50aW1lIiwib25NZXNzYWdlIiwicmVxdWVzdCIsInNlbmRlciIsInNlbmRSZXNwb25zZSIsImNvbnRlbnRTY3JpcHRRdWVyeSIsInN5bmMiLCJyZXN1bHQiLCJTVE9SQUdFX0ZJTkdFUlBSSU5UX0tFWSIsImNvZGVFbGVtZW50SWQiLCJpZCIsImV4ZWN1dGlvbklkIiwiZXhjZWN1dGlvbklkIiwiZmV0Y2hDaGVja2VyIiwiRmV0Y2hDaGVja2VyIiwidGltZW91dCIsInNldFRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJ1bmRlZmluZWQiLCJjcmVhdGVBbmFseXNpc1Jlc3VsdCIsImNyZWF0ZUZpbGVBbmFseXNpcyIsInNldEludGVydmFsIiwiZ2V0QW5hbHlzaXNSZXN1bHQiLCJnZXRGaWxlQW5hbHlzaXMiLCJjbGVhckludGVydmFsIiwidmlvbGF0aW9ucyIsImFjYyIsImN1cnIiLCJtYXBwZWRWaW9sYXRpb25zIiwiZ3JvdXAiLCJ2YWxpZGF0ZUNvZGUiLCJ0YWJzIiwib25VcGRhdGVkIiwidGFiSWQiLCJjaGFuZ2VJbmZvIiwidGFiIiwic2VuZE1lc3NhZ2UiLCJhY3Rpb24iLCJnZXRPdXRwdXRMZW5ndGgiLCJpbnB1dExlbmd0aDgiLCJzYWZlQWRkIiwibHN3IiwibWQ1Y21uIiwicSIsImIiLCJudW0iLCJjbnQiLCJtZDVmZiIsIm1kNWdnIiwibWQ1aGgiLCJtZDVpaSIsImJ5dGVzIiwibXNnIiwidW5lc2NhcGUiLCJVaW50OEFycmF5IiwiaW5wdXQiLCJvdXRwdXQiLCJsZW5ndGgzMiIsImhleFRhYiIsImhleCIsInBhcnNlSW50IiwiY2hhckF0IiwibWQ1VG9IZXhFbmNvZGVkQXJyYXkiLCJsZW4iLCJvbGRhIiwib2xkYiIsIm9sZGMiLCJvbGRkIiwid29yZHNUb01kNSIsImxlbmd0aDgiLCJVaW50MzJBcnJheSIsImJ5dGVzVG9Xb3JkcyIsInV1aWQiLCJhcnIiLCJnZXRSYW5kb21WYWx1ZXMiLCJybmRzOCIsInJuZyIsImNyeXB0byIsIm1zQ3J5cHRvIiwieiIsIlJPVEwiLCJLIiwiSCIsIk4iLCJjZWlsIiwiTSIsIl9pIiwiaiIsInBvdyIsImZsb29yIiwiX2kyIiwiVyIsIl90IiwiX3QyIiwiVCIsImJ5dGVUb0hleCIsInN1YnN0ciIsIm9mZnNldCIsInRvTG93ZXJDYXNlIiwiX25vZGVJZCIsIl9jbG9ja3NlcSIsIl9sYXN0TVNlY3MiLCJfbGFzdE5TZWNzIiwib3B0aW9ucyIsImJ1ZiIsIm5vZGUiLCJjbG9ja3NlcSIsInNlZWRCeXRlcyIsIm1zZWNzIiwibnNlY3MiLCJkdCIsInRsIiwidG1oIiwiRE5TIiwiVVJMIiwidmVyc2lvbiIsImhhc2hmdW5jIiwiZ2VuZXJhdGVVVUlEIiwic3RyIiwic3RyaW5nVG9CeXRlcyIsImVyciIsInJuZHMiLCJfXyIsInRhZyIsInRhbGtiYWNrUGxhY2Vob2xkZXIiLCJmcm9tQXJyYXkiLCJfcmVmIiwiX3JlZjQiLCJlbXB0eSIsInVuZGVmaW5lZEhlYWRlciIsInZhbEZyb21PcHRpb24iLCJjb25jYXRNYXAiLCJfcmVmMyIsIl9yZWY0JDEiLCJfcmVmNyIsIl9yZWY4IiwiX3JlZjkiLCJtZXJnZUFsbCIsIl9yZWYxMSIsIl9yZWYxNiIsInRha2VMYXN0IiwiX3JlZiQxIiwiX3JlZiQyIiwiX3JlZjIiLCJfcmVmMyQxIiwiX3JlZjMkMiIsImFkZEV2ZW50TGlzdGVuZXIiLCJfcmVmNCQyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImJ1ZmZlciQxIiwiY29tYmluZSQxIiwiY29uY2F0TWFwJDEiLCJjb25jYXRBbGwkMSIsImNvbmNhdCQxIiwiZmlsdGVyJDEiLCJtYXAkMSIsIm1lcmdlTWFwJDEiLCJtZXJnZSQxIiwibWVyZ2VBbGwkMSIsImZsYXR0ZW4kMSIsIm9uRW5kJDEiLCJvblB1c2gkMSIsInRhcCQxIiwib25TdGFydCQxIiwic2FtcGxlJDEiLCJzY2FuJDEiLCJzaGFyZSQxIiwic2tpcCQxIiwic2tpcFVudGlsJDEiLCJza2lwV2hpbGUkMSIsInN3aXRjaE1hcCQxIiwic3dpdGNoQWxsJDEiLCJ0YWtlJDEiLCJ0YWtlTGFzdCQxIiwidGFrZVVudGlsJDEiLCJ0YWtlV2hpbGUkMSIsInN1YnNjcmliZSQxIiwiZm9yRWFjaCQxIiwicHVibGlzaCQxIiwidG9BcnJheSQxIiwib2JzZXJ2YWJsZVN5bWJvbCIsImZyb21PYnNlcnZhYmxlJDIiLCJ0b09ic2VydmFibGUkMiIsImZyb21DYWxsYmFnJDIiLCJ0b0NhbGxiYWckMiIsImRlYm91bmNlJDEiLCJkZWxheSQxIiwidGhyb3R0bGUkMSIsInRvUHJvbWlzZSQxIiwiaW50ZXJ2YWwkMSIsImZyb21Eb21FdmVudCQxIiwiZnJvbVByb21pc2UkMSIsImZyb21BcnJheSQxIiwiZW1wdHkkMSIsIm9ic2VydmFibGUiLCJjbG9zZWQiLCJidWZmZXIiLCJjb21iaW5lIiwiY29uY2F0QWxsIiwiZGVib3VuY2UiLCJkZWxheSIsImZsYXR0ZW4iLCJmcm9tQ2FsbGJhZyIsImZyb21Eb21FdmVudCIsImZyb21MaXN0IiwiZnJvbU9ic2VydmFibGUiLCJmcm9tUHJvbWlzZSIsImludGVydmFsIiwibmV2ZXIiLCJwaXBlIiwic2FtcGxlIiwic2NhbiIsInNraXAiLCJza2lwVW50aWwiLCJza2lwV2hpbGUiLCJzd2l0Y2hBbGwiLCJ0YWtlV2hpbGUiLCJ0aHJvdHRsZSIsInRvQXJyYXkiLCJ0b0NhbGxiYWciLCJ0b09ic2VydmFibGUiLCJfdHlwZW9mIiwib2JqIiwiaXRlcmF0b3IiLCJfZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwiZGVzY3JpcHRvciIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJzZWxmIiwiX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsIlJlZmVyZW5jZUVycm9yIiwiX3dyYXBOYXRpdmVTdXBlciIsIkNsYXNzIiwiX2NhY2hlIiwiZm4iLCJGdW5jdGlvbiIsIldyYXBwZXIiLCJfY29uc3RydWN0IiwiX2dldFByb3RvdHlwZU9mIiwiX3NldFByb3RvdHlwZU9mIiwiUGFyZW50IiwiYXJncyIsIl9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJSZWZsZWN0IiwiY29uc3RydWN0IiwiaW5zdGFuY2UiLCJzaGFtIiwiUHJveHkiLCJzZXRQcm90b3R5cGVPZiIsImdldFByb3RvdHlwZU9mIiwiX0Vycm9yIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiX2luaGVyaXRzIiwiRGVyaXZlZCIsImhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJDb25zdHJ1Y3RvciIsInByb3RvUHJvcHMiLCJfc3VwZXIiLCJTdXBlciIsIk5ld1RhcmdldCIsIm9yaWdpbmFsRXJyb3IiLCJfbG9jYXRpb25zMiIsIl9zb3VyY2UyIiwiX3Bvc2l0aW9uczIiLCJfZXh0ZW5zaW9uczIiLCJfdGhpcyIsIl9jbGFzc0NhbGxDaGVjayIsIl9ub2RlcyQwJGxvYyIsIl9ub2RlcyIsIl9zb3VyY2UiLCJfbG9jYXRpb25zIiwiX3Bvc2l0aW9ucyIsImxpc3QiLCJwb3MiLCJnZXRMb2NhdGlvbiIsIl9leHRlbnNpb25zIiwib3JpZ2luYWxFeHRlbnNpb25zIiwiZGVmaW5lUHJvcGVydGllcyIsImxvY2F0aW9ucyIsInN0YWNrIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJwcmludEVycm9yIiwiU1lNQk9MX1RPX1NUUklOR19UQUciLCJfZXJyb3Ikbm9kZXMyIiwicHJpbnRMb2NhdGlvbiIsIl9pNCIsIl9lcnJvciRsb2NhdGlvbnMyIiwibG9jYXRpb24iLCJwcmludFNvdXJjZUxvY2F0aW9uIiwiZm9ybWF0RXJyb3IiLCJfZXJyb3IkbWVzc2FnZSIsImxvY2F0ZWRFcnJvciIsInJhd09yaWdpbmFsRXJyb3IiLCJzeW50YXhFcnJvciIsInBvc2l0aW9uIiwiZGVzY3JpcHRpb24iLCJleGVjdXRlIiwiYXJnc09yU2NoZW1hIiwiZG9jdW1lbnQiLCJyb290VmFsdWUiLCJjb250ZXh0VmFsdWUiLCJ2YXJpYWJsZVZhbHVlcyIsImZpZWxkUmVzb2x2ZXIiLCJ0eXBlUmVzb2x2ZXIiLCJleGVjdXRlSW1wbCIsInNjaGVtYSIsImV4ZWN1dGVTeW5jIiwiYXNzZXJ0VmFsaWRFeGVjdXRpb25Bcmd1bWVudHMiLCJleGVDb250ZXh0IiwiYnVpbGRFeGVjdXRpb25Db250ZXh0IiwiZ2V0T3BlcmF0aW9uUm9vdFR5cGUiLCJmaWVsZHMiLCJjb2xsZWN0RmllbGRzIiwicGFyZW50VHlwZSIsInNvdXJjZVZhbHVlIiwicmVzdWx0cyIsInJlc3BvbnNlTmFtZSIsImZpZWxkTm9kZXMiLCJmaWVsZFBhdGgiLCJhZGRQYXRoIiwicmVzb2x2ZUZpZWxkIiwicmVzb2x2ZWRSZXN1bHQiLCJleGVjdXRlRmllbGRzU2VyaWFsbHkiLCJleGVjdXRlRmllbGRzIiwiZXhlY3V0ZU9wZXJhdGlvbiIsImJ1aWxkUmVzcG9uc2UiLCJyZXNvbHZlZCIsInJhd1ZhcmlhYmxlVmFsdWVzIiwiYXNzZXJ0VmFsaWRTY2hlbWEiLCJfZGVmaW5pdGlvbiRuYW1lIiwiX29wZXJhdGlvbiR2YXJpYWJsZURlIiwiZnJhZ21lbnRzIiwiX2RvY3VtZW50JGRlZmluaXRpb25zMiIsImRlZmluaXRpb24iLCJ2YXJpYWJsZURlZmluaXRpb25zIiwiY29lcmNlZFZhcmlhYmxlVmFsdWVzIiwiZ2V0VmFyaWFibGVWYWx1ZXMiLCJtYXhFcnJvcnMiLCJjb2VyY2VkIiwiZGVmYXVsdEZpZWxkUmVzb2x2ZXIiLCJkZWZhdWx0VHlwZVJlc29sdmVyIiwiY29udGFpbnNQcm9taXNlIiwiX09iamVjdCRrZXlzMiIsInJ1bnRpbWVUeXBlIiwidmlzaXRlZEZyYWdtZW50TmFtZXMiLCJfaTYiLCJfc2VsZWN0aW9uU2V0JHNlbGVjdGkyIiwic2VsZWN0aW9uIiwic2hvdWxkSW5jbHVkZU5vZGUiLCJkb2VzRnJhZ21lbnRDb25kaXRpb25NYXRjaCIsImZyYWdOYW1lIiwiZnJhZ21lbnQiLCJnZXREaXJlY3RpdmVWYWx1ZXMiLCJHcmFwaFFMU2tpcERpcmVjdGl2ZSIsImlmIiwiaW5jbHVkZSIsIkdyYXBoUUxJbmNsdWRlRGlyZWN0aXZlIiwidHlwZUNvbmRpdGlvbk5vZGUiLCJ0eXBlQ29uZGl0aW9uIiwiY29uZGl0aW9uYWxUeXBlIiwidHlwZUZyb21BU1QiLCJpc0Fic3RyYWN0VHlwZSIsImlzU3ViVHlwZSIsIl9maWVsZERlZiRyZXNvbHZlIiwiZmllbGROYW1lIiwiZmllbGREZWYiLCJnZXRGaWVsZERlZiIsInJldHVyblR5cGUiLCJyZXNvbHZlRm4iLCJpbmZvIiwiYnVpbGRSZXNvbHZlSW5mbyIsImNvbXBsZXRlZCIsImdldEFyZ3VtZW50VmFsdWVzIiwiY29tcGxldGVWYWx1ZSIsInJhd0Vycm9yIiwiaGFuZGxlRmllbGRFcnJvciIsInBhdGhUb0FycmF5IiwiaXNOb25OdWxsVHlwZSIsIm9mVHlwZSIsImlzTGlzdFR5cGUiLCJpdGVtVHlwZSIsImNvbXBsZXRlZFJlc3VsdHMiLCJpdGVtIiwiaW5kZXgiLCJpdGVtUGF0aCIsImNvbXBsZXRlZEl0ZW0iLCJhbGwiLCJjb21wbGV0ZUxpc3RWYWx1ZSIsImlzTGVhZlR5cGUiLCJzZXJpYWxpemVkUmVzdWx0Iiwic2VyaWFsaXplIiwiY29tcGxldGVMZWFmVmFsdWUiLCJfcmV0dXJuVHlwZSRyZXNvbHZlVHkiLCJyZXNvbHZlVHlwZUZuIiwicmVzb2x2ZVR5cGUiLCJyZXNvbHZlZFJ1bnRpbWVUeXBlIiwiY29tcGxldGVPYmplY3RWYWx1ZSIsImVuc3VyZVZhbGlkUnVudGltZVR5cGUiLCJjb21wbGV0ZUFic3RyYWN0VmFsdWUiLCJpc09iamVjdFR5cGUiLCJydW50aW1lVHlwZU9yTmFtZSIsInJ1bnRpbWVUeXBlTmFtZSIsImlzTmFtZWRUeXBlIiwiZ2V0VHlwZSIsImlzVHlwZU9mIiwicmVzb2x2ZWRJc1R5cGVPZiIsImludmFsaWRSZXR1cm5UeXBlRXJyb3IiLCJjb2xsZWN0QW5kRXhlY3V0ZVN1YmZpZWxkcyIsImNvbGxlY3RTdWJmaWVsZHMiLCJzdWJGaWVsZE5vZGVzIiwiX2k4IiwiYWJzdHJhY3RUeXBlIiwiX190eXBlbmFtZSIsInBvc3NpYmxlVHlwZXMiLCJnZXRQb3NzaWJsZVR5cGVzIiwicHJvbWlzZWRJc1R5cGVPZlJlc3VsdHMiLCJpc1R5cGVPZlJlc3VsdCIsImlzVHlwZU9mUmVzdWx0cyIsIl9pOSIsInByb3BlcnR5IiwiU2NoZW1hTWV0YUZpZWxkRGVmIiwiZ2V0UXVlcnlUeXBlIiwiVHlwZU1ldGFGaWVsZERlZiIsIlR5cGVOYW1lTWV0YUZpZWxkRGVmIiwiZ2V0RmllbGRzIiwidmFyRGVmTm9kZXMiLCJpbnB1dHMiLCJjb2VyY2VkVmFsdWVzIiwiX2xvb3AiLCJ2YXJEZWZOb2RlIiwidmFyTmFtZSIsInZhcmlhYmxlIiwidmFyVHlwZSIsImlzSW5wdXRUeXBlIiwidmFyVHlwZVN0ciIsImRlZmF1bHRWYWx1ZSIsInZhbHVlRnJvbUFTVCIsIl92YXJUeXBlU3RyIiwiX3ZhclR5cGVTdHIyIiwiY29lcmNlSW5wdXRWYWx1ZSIsImludmFsaWRWYWx1ZSIsInByZWZpeCIsImNvZXJjZVZhcmlhYmxlVmFsdWVzIiwiZGVmIiwiX25vZGUkYXJndW1lbnRzIiwiYXJndW1lbnROb2RlcyIsImFyZ05vZGVNYXAiLCJhcmciLCJfZGVmJGFyZ3MyIiwiYXJnRGVmIiwiYXJnVHlwZSIsImFyZ3VtZW50Tm9kZSIsInZhbHVlTm9kZSIsImlzTnVsbCIsInZhcmlhYmxlTmFtZSIsImNvZXJjZWRWYWx1ZSIsImRpcmVjdGl2ZURlZiIsImRpcmVjdGl2ZU5vZGUiLCJkaXJlY3RpdmVzIiwiZGlyZWN0aXZlIiwicHJvcCIsImdyYXBocWwiLCJfYXJndW1lbnRzIiwiZ3JhcGhxbEltcGwiLCJncmFwaHFsU3luYyIsInNjaGVtYVZhbGlkYXRpb25FcnJvcnMiLCJ2YWxpZGF0ZVNjaGVtYSIsInZhbGlkYXRpb25FcnJvcnMiLCJ2YWxpZGF0ZSIsInByZXYiLCJ0eXBlbmFtZSIsImZsYXR0ZW5lZCIsInJldmVyc2UiLCJkZWZpbmVJbnNwZWN0IiwiY2xhc3NPYmplY3QiLCJpbnNwZWN0IiwiZGV2QXNzZXJ0IiwiY29uZGl0aW9uIiwiQm9vbGVhbiIsImRpZFlvdU1lYW4iLCJmaXJzdEFyZyIsInNlY29uZEFyZyIsInN1Yk1lc3NhZ2UiLCJzdWdnZXN0aW9ucyIsInNlbGVjdGVkIiwibGFzdEl0ZW0iLCJwb3AiLCJpZGVudGl0eUZ1bmMiLCJmb3JtYXRWYWx1ZSIsInNlZW5WYWx1ZXMiLCJwcmV2aW91c2x5U2VlblZhbHVlcyIsImN1c3RvbUluc3BlY3RGbiIsIm9iamVjdCIsIlN0cmluZyIsImdldEN1c3RvbUZuIiwiY3VzdG9tVmFsdWUiLCJhcnJheSIsIm1pbiIsInJlbWFpbmluZyIsIml0ZW1zIiwiZm9ybWF0QXJyYXkiLCJnZXRPYmplY3RUYWciLCJmb3JtYXRPYmplY3QiLCJmb3JtYXRPYmplY3RWYWx1ZSIsIl92YWx1ZSRjb25zdHJ1Y3RvciIsImNsYXNzTmFtZSIsInRvU3RyaW5nVGFnIiwic3RyaW5naWZpZWRWYWx1ZSIsImludmFyaWFudCIsImlzQXN5bmNJdGVyYWJsZSIsIm1heWJlQXN5bmNJdGVyYWJsZSIsIlNZTUJPTF9BU1lOQ19JVEVSQVRPUiIsImlzT2JqZWN0TGlrZSIsImlzUHJvbWlzZSIsImtleU1hcCIsImtleUZuIiwia2V5VmFsTWFwIiwidmFsRm4iLCJtYXBWYWx1ZSIsIl9vYmplY3RFbnRyaWVzMiIsIl9rZXkiLCJfdmFsdWUiLCJtZW1vaXplMyIsImNhY2hlMCIsImExIiwiYTIiLCJhMyIsImNhY2hlMiIsImNhY2hlMSIsImNhY2hlZFZhbHVlIiwibmF0dXJhbENvbXBhcmUiLCJhU3RyIiwiYlN0ciIsImFJZHgiLCJiSWR4IiwiYUNoYXIiLCJiQ2hhciIsImlzRGlnaXQiLCJhTnVtIiwiRElHSVRfMCIsImJOdW0iLCJpc05hTiIsImZvciIsInByaW50UGF0aEFycmF5IiwicHJvbWlzZUZvck9iamVjdCIsInZhbHVlc0FuZFByb21pc2VzIiwidmFsdWVzIiwicmVzb2x2ZWRPYmplY3QiLCJwcm9taXNlUmVkdWNlIiwiY2FsbGJhY2siLCJpbml0aWFsVmFsdWUiLCJwcmV2aW91cyIsInNhZmVBcnJheUZyb20iLCJjb2xsZWN0aW9uIiwibWFwRm4iLCJpdGVyYXRvck1ldGhvZCIsIlNZTUJPTF9JVEVSQVRPUiIsInN0ZXAiLCJfcmVzdWx0Iiwic3VnZ2VzdGlvbkxpc3QiLCJvcHRpb25zQnlEaXN0YW5jZSIsImxleGljYWxEaXN0YW5jZSIsIkxleGljYWxEaXN0YW5jZSIsInRocmVzaG9sZCIsIm9wdGlvbiIsImRpc3RhbmNlIiwibWVhc3VyZSIsImRpc3RhbmNlRGlmZiIsIl9pbnB1dCIsIl9pbnB1dExvd2VyQ2FzZSIsIl9pbnB1dEFycmF5Iiwic3RyaW5nVG9BcnJheSIsIl9yb3dzIiwiZmlsbCIsIm9wdGlvbkxvd2VyQ2FzZSIsInRtcCIsImFMZW5ndGgiLCJiTGVuZ3RoIiwicm93cyIsInVwUm93IiwiY3VycmVudFJvdyIsInNtYWxsZXN0Q2VsbCIsIl9qIiwiY29zdCIsImN1cnJlbnRDZWxsIiwiZG91YmxlRGlhZ29uYWxDZWxsIiwic3RyTGVuZ3RoIiwidG9PYmpNYXAiLCJMb2NhdGlvbiIsInN0YXJ0VG9rZW4iLCJlbmRUb2tlbiIsIlRva2VuIiwiaXNOb2RlIiwibWF5YmVOb2RlIiwiZGVkZW50QmxvY2tTdHJpbmdWYWx1ZSIsInJhd1N0cmluZyIsImxpbmVzIiwic3BsaXQiLCJjb21tb25JbmRlbnQiLCJnZXRCbG9ja1N0cmluZ0luZGVudGF0aW9uIiwic3RhcnRMaW5lIiwiaXNCbGFuayIsImVuZExpbmUiLCJfY29tbW9uSW5kZW50IiwiaXNGaXJzdExpbmUiLCJpc0VtcHR5TGluZSIsImluZGVudCIsInByaW50QmxvY2tTdHJpbmciLCJpbmRlbnRhdGlvbiIsInByZWZlck11bHRpcGxlTGluZXMiLCJpc1NpbmdsZUxpbmUiLCJoYXNMZWFkaW5nU3BhY2UiLCJoYXNUcmFpbGluZ1F1b3RlIiwiaGFzVHJhaWxpbmdTbGFzaCIsInByaW50QXNNdWx0aXBsZUxpbmVzIiwiRGlyZWN0aXZlTG9jYXRpb24iLCJmcmVlemUiLCJRVUVSWSIsIk1VVEFUSU9OIiwiU1VCU0NSSVBUSU9OIiwiRlJBR01FTlRfU1BSRUFEIiwiSU5MSU5FX0ZSQUdNRU5UIiwiVkFSSUFCTEVfREVGSU5JVElPTiIsIlNDSEVNQSIsIlNDQUxBUiIsIk9CSkVDVCIsIkZJRUxEX0RFRklOSVRJT04iLCJBUkdVTUVOVF9ERUZJTklUSU9OIiwiSU5URVJGQUNFIiwiVU5JT04iLCJFTlVNIiwiRU5VTV9WQUxVRSIsIklOUFVUX09CSkVDVCIsIklOUFVUX0ZJRUxEX0RFRklOSVRJT04iLCJTRUxFQ1RJT05fU0VUIiwiQVJHVU1FTlQiLCJWQVJJQUJMRSIsIklOVCIsIkZMT0FUIiwiU1RSSU5HIiwiQk9PTEVBTiIsIk5VTEwiLCJMSVNUIiwiT0JKRUNUX0ZJRUxEIiwiRElSRUNUSVZFIiwiTkFNRURfVFlQRSIsIkxJU1RfVFlQRSIsIk5PTl9OVUxMX1RZUEUiLCJTQ0hFTUFfREVGSU5JVElPTiIsIk9QRVJBVElPTl9UWVBFX0RFRklOSVRJT04iLCJTQ0FMQVJfVFlQRV9ERUZJTklUSU9OIiwiT0JKRUNUX1RZUEVfREVGSU5JVElPTiIsIklOUFVUX1ZBTFVFX0RFRklOSVRJT04iLCJJTlRFUkZBQ0VfVFlQRV9ERUZJTklUSU9OIiwiVU5JT05fVFlQRV9ERUZJTklUSU9OIiwiRU5VTV9UWVBFX0RFRklOSVRJT04iLCJFTlVNX1ZBTFVFX0RFRklOSVRJT04iLCJJTlBVVF9PQkpFQ1RfVFlQRV9ERUZJTklUSU9OIiwiRElSRUNUSVZFX0RFRklOSVRJT04iLCJTQ0hFTUFfRVhURU5TSU9OIiwiU0NBTEFSX1RZUEVfRVhURU5TSU9OIiwiT0JKRUNUX1RZUEVfRVhURU5TSU9OIiwiSU5URVJGQUNFX1RZUEVfRVhURU5TSU9OIiwiVU5JT05fVFlQRV9FWFRFTlNJT04iLCJFTlVNX1RZUEVfRVhURU5TSU9OIiwiSU5QVVRfT0JKRUNUX1RZUEVfRVhURU5TSU9OIiwiTGV4ZXIiLCJzdGFydE9mRmlsZVRva2VuIiwiVG9rZW5LaW5kIiwibGFzdFRva2VuIiwidG9rZW4iLCJsaW5lU3RhcnQiLCJfcHJvdG8iLCJhZHZhbmNlIiwibG9va2FoZWFkIiwiX3Rva2VuJG5leHQiLCJyZWFkVG9rZW4iLCJpc1B1bmN0dWF0b3JUb2tlbktpbmQiLCJwcmludENoYXJDb2RlIiwiZnJvbUNoYXJDb2RlIiwidG9VcHBlckNhc2UiLCJsZXhlciIsImJvZHlMZW5ndGgiLCJfbGluZSIsIl9jb2wiLCJyZWFkQ29tbWVudCIsInJlYWRCbG9ja1N0cmluZyIsInJlYWRTdHJpbmciLCJyZWFkTnVtYmVyIiwicmVhZE5hbWUiLCJ1bmV4cGVjdGVkQ2hhcmFjdGVyTWVzc2FnZSIsImNvbCIsImZpcnN0Q29kZSIsImlzRmxvYXQiLCJyZWFkRGlnaXRzIiwiaXNOYW1lU3RhcnQiLCJjaHVua1N0YXJ0IiwiY2hhckNvZGUiLCJjaGFyMmhleCIsImludmFsaWRTZXF1ZW5jZSIsInJhd1ZhbHVlIiwibGluZVJlZ2V4cCIsImV4ZWMiLCJQYXJzZXIiLCJwYXJzZURvY3VtZW50IiwicGFyc2VWYWx1ZSIsInBhcnNlciIsImV4cGVjdFRva2VuIiwicGFyc2VWYWx1ZUxpdGVyYWwiLCJwYXJzZVR5cGUiLCJwYXJzZVR5cGVSZWZlcmVuY2UiLCJzb3VyY2VPYmoiLCJpc1NvdXJjZSIsIlNvdXJjZSIsIl9sZXhlciIsIl9vcHRpb25zIiwicGFyc2VOYW1lIiwibWFueSIsInBhcnNlRGVmaW5pdGlvbiIsInBlZWsiLCJwYXJzZU9wZXJhdGlvbkRlZmluaXRpb24iLCJwYXJzZUZyYWdtZW50RGVmaW5pdGlvbiIsInBhcnNlVHlwZVN5c3RlbURlZmluaXRpb24iLCJwYXJzZVR5cGVTeXN0ZW1FeHRlbnNpb24iLCJwZWVrRGVzY3JpcHRpb24iLCJ1bmV4cGVjdGVkIiwicGFyc2VTZWxlY3Rpb25TZXQiLCJwYXJzZU9wZXJhdGlvblR5cGUiLCJwYXJzZVZhcmlhYmxlRGVmaW5pdGlvbnMiLCJwYXJzZURpcmVjdGl2ZXMiLCJvcGVyYXRpb25Ub2tlbiIsIm9wdGlvbmFsTWFueSIsInBhcnNlVmFyaWFibGVEZWZpbml0aW9uIiwicGFyc2VWYXJpYWJsZSIsImV4cGVjdE9wdGlvbmFsVG9rZW4iLCJwYXJzZVNlbGVjdGlvbiIsInBhcnNlRnJhZ21lbnQiLCJwYXJzZUZpZWxkIiwibmFtZU9yQWxpYXMiLCJwYXJzZUFyZ3VtZW50cyIsImlzQ29uc3QiLCJwYXJzZUNvbnN0QXJndW1lbnQiLCJwYXJzZUFyZ3VtZW50IiwiaGFzVHlwZUNvbmRpdGlvbiIsImV4cGVjdE9wdGlvbmFsS2V5d29yZCIsInBhcnNlRnJhZ21lbnROYW1lIiwicGFyc2VOYW1lZFR5cGUiLCJfdGhpcyRfb3B0aW9ucyIsImV4cGVjdEtleXdvcmQiLCJleHBlcmltZW50YWxGcmFnbWVudFZhcmlhYmxlcyIsInBhcnNlTGlzdCIsInBhcnNlT2JqZWN0IiwicGFyc2VTdHJpbmdMaXRlcmFsIiwiYmxvY2siLCJhbnkiLCJfdGhpczIiLCJwYXJzZU9iamVjdEZpZWxkIiwicGFyc2VEaXJlY3RpdmUiLCJrZXl3b3JkVG9rZW4iLCJwYXJzZVNjaGVtYURlZmluaXRpb24iLCJwYXJzZVNjYWxhclR5cGVEZWZpbml0aW9uIiwicGFyc2VPYmplY3RUeXBlRGVmaW5pdGlvbiIsInBhcnNlSW50ZXJmYWNlVHlwZURlZmluaXRpb24iLCJwYXJzZVVuaW9uVHlwZURlZmluaXRpb24iLCJwYXJzZUVudW1UeXBlRGVmaW5pdGlvbiIsInBhcnNlSW5wdXRPYmplY3RUeXBlRGVmaW5pdGlvbiIsInBhcnNlRGlyZWN0aXZlRGVmaW5pdGlvbiIsInBhcnNlRGVzY3JpcHRpb24iLCJvcGVyYXRpb25UeXBlcyIsInBhcnNlT3BlcmF0aW9uVHlwZURlZmluaXRpb24iLCJpbnRlcmZhY2VzIiwicGFyc2VJbXBsZW1lbnRzSW50ZXJmYWNlcyIsInBhcnNlRmllbGRzRGVmaW5pdGlvbiIsIl90aGlzJF9vcHRpb25zMiIsImFsbG93TGVnYWN5U0RMSW1wbGVtZW50c0ludGVyZmFjZXMiLCJ0eXBlcyIsImRlbGltaXRlZE1hbnkiLCJfdGhpcyRfb3B0aW9uczMiLCJhbGxvd0xlZ2FjeVNETEVtcHR5RmllbGRzIiwicGFyc2VGaWVsZERlZmluaXRpb24iLCJwYXJzZUFyZ3VtZW50RGVmcyIsInBhcnNlSW5wdXRWYWx1ZURlZiIsInBhcnNlVW5pb25NZW1iZXJUeXBlcyIsInBhcnNlRW51bVZhbHVlc0RlZmluaXRpb24iLCJwYXJzZUVudW1WYWx1ZURlZmluaXRpb24iLCJwYXJzZUlucHV0RmllbGRzRGVmaW5pdGlvbiIsInBhcnNlU2NoZW1hRXh0ZW5zaW9uIiwicGFyc2VTY2FsYXJUeXBlRXh0ZW5zaW9uIiwicGFyc2VPYmplY3RUeXBlRXh0ZW5zaW9uIiwicGFyc2VJbnRlcmZhY2VUeXBlRXh0ZW5zaW9uIiwicGFyc2VVbmlvblR5cGVFeHRlbnNpb24iLCJwYXJzZUVudW1UeXBlRXh0ZW5zaW9uIiwicGFyc2VJbnB1dE9iamVjdFR5cGVFeHRlbnNpb24iLCJyZXBlYXRhYmxlIiwicGFyc2VEaXJlY3RpdmVMb2NhdGlvbnMiLCJwYXJzZURpcmVjdGl2ZUxvY2F0aW9uIiwiX3RoaXMkX29wdGlvbnM0IiwiZ2V0VG9rZW5LaW5kRGVzYyIsImdldFRva2VuRGVzYyIsImF0VG9rZW4iLCJvcGVuS2luZCIsInBhcnNlRm4iLCJjbG9zZUtpbmQiLCJkZWxpbWl0ZXJLaW5kIiwiaXNEZWZpbml0aW9uTm9kZSIsImlzRXhlY3V0YWJsZURlZmluaXRpb25Ob2RlIiwiaXNUeXBlU3lzdGVtRGVmaW5pdGlvbk5vZGUiLCJpc1R5cGVTeXN0ZW1FeHRlbnNpb25Ob2RlIiwiaXNTZWxlY3Rpb25Ob2RlIiwiaXNWYWx1ZU5vZGUiLCJpc1R5cGVOb2RlIiwiaXNUeXBlRGVmaW5pdGlvbk5vZGUiLCJpc1R5cGVFeHRlbnNpb25Ob2RlIiwic291cmNlTG9jYXRpb24iLCJmaXJzdExpbmVDb2x1bW5PZmZzZXQiLCJ3aGl0ZXNwYWNlIiwibGluZUluZGV4IiwibGluZU9mZnNldCIsImxpbmVOdW0iLCJjb2x1bW5PZmZzZXQiLCJjb2x1bW5OdW0iLCJsb2NhdGlvblN0ciIsImxvY2F0aW9uTGluZSIsInN1YkxpbmVJbmRleCIsInN1YkxpbmVDb2x1bW5OdW0iLCJzdWJMaW5lcyIsInByaW50UHJlZml4ZWRMaW5lcyIsInN1YkxpbmUiLCJleGlzdGluZ0xpbmVzIiwicGFkTGVuIiwibWF4IiwiYXN0IiwibGVhdmUiLCJwcmludERvY0FTVFJlZHVjZXIiLCJOYW1lIiwiVmFyaWFibGUiLCJEb2N1bWVudCIsIk9wZXJhdGlvbkRlZmluaXRpb24iLCJvcCIsInZhckRlZnMiLCJ3cmFwIiwiVmFyaWFibGVEZWZpbml0aW9uIiwiU2VsZWN0aW9uU2V0IiwiYXJnc0xpbmUiLCJBcmd1bWVudCIsIkZyYWdtZW50U3ByZWFkIiwiX3JlZjUiLCJfcmVmNiIsIkZyYWdtZW50RGVmaW5pdGlvbiIsIkludFZhbHVlIiwiRmxvYXRWYWx1ZSIsIlN0cmluZ1ZhbHVlIiwiX3JlZjEwIiwiQm9vbGVhblZhbHVlIiwiTnVsbFZhbHVlIiwiRW51bVZhbHVlIiwiX3JlZjEyIiwiTGlzdFZhbHVlIiwiX3JlZjEzIiwiT2JqZWN0VmFsdWUiLCJfcmVmMTQiLCJPYmplY3RGaWVsZCIsIl9yZWYxNSIsIkRpcmVjdGl2ZSIsIk5hbWVkVHlwZSIsIl9yZWYxNyIsIkxpc3RUeXBlIiwiX3JlZjE4IiwiTm9uTnVsbFR5cGUiLCJfcmVmMTkiLCJTY2hlbWFEZWZpbml0aW9uIiwiYWRkRGVzY3JpcHRpb24iLCJfcmVmMjAiLCJPcGVyYXRpb25UeXBlRGVmaW5pdGlvbiIsIl9yZWYyMSIsIlNjYWxhclR5cGVEZWZpbml0aW9uIiwiX3JlZjIyIiwiT2JqZWN0VHlwZURlZmluaXRpb24iLCJfcmVmMjMiLCJGaWVsZERlZmluaXRpb24iLCJfcmVmMjQiLCJoYXNNdWx0aWxpbmVJdGVtcyIsIklucHV0VmFsdWVEZWZpbml0aW9uIiwiX3JlZjI1IiwiSW50ZXJmYWNlVHlwZURlZmluaXRpb24iLCJfcmVmMjYiLCJVbmlvblR5cGVEZWZpbml0aW9uIiwiX3JlZjI3IiwiRW51bVR5cGVEZWZpbml0aW9uIiwiX3JlZjI4IiwiRW51bVZhbHVlRGVmaW5pdGlvbiIsIl9yZWYyOSIsIklucHV0T2JqZWN0VHlwZURlZmluaXRpb24iLCJfcmVmMzAiLCJEaXJlY3RpdmVEZWZpbml0aW9uIiwiX3JlZjMxIiwiU2NoZW1hRXh0ZW5zaW9uIiwiX3JlZjMyIiwiU2NhbGFyVHlwZUV4dGVuc2lvbiIsIl9yZWYzMyIsIk9iamVjdFR5cGVFeHRlbnNpb24iLCJfcmVmMzQiLCJJbnRlcmZhY2VUeXBlRXh0ZW5zaW9uIiwiX3JlZjM1IiwiVW5pb25UeXBlRXh0ZW5zaW9uIiwiX3JlZjM2IiwiRW51bVR5cGVFeHRlbnNpb24iLCJfcmVmMzciLCJJbnB1dE9iamVjdFR5cGVFeHRlbnNpb24iLCJfcmVmMzgiLCJjYiIsIm1heWJlQXJyYXkiLCJfbWF5YmVBcnJheSRmaWx0ZXIkam8iLCJzZXBhcmF0b3IiLCJtYXliZVN0cmluZyIsImlzTXVsdGlsaW5lIiwiU09GIiwiRU9GIiwiQkFORyIsIkRPTExBUiIsIkFNUCIsIlBBUkVOX0wiLCJQQVJFTl9SIiwiU1BSRUFEIiwiQ09MT04iLCJFUVVBTFMiLCJBVCIsIkJSQUNLRVRfTCIsIkJSQUNLRVRfUiIsIkJSQUNFX0wiLCJQSVBFIiwiQlJBQ0VfUiIsIkJMT0NLX1NUUklORyIsIkNPTU1FTlQiLCJRdWVyeURvY3VtZW50S2V5cyIsIkJSRUFLIiwicm9vdCIsInZpc2l0b3IiLCJ2aXNpdG9yS2V5cyIsImluQXJyYXkiLCJlZGl0cyIsInBhcmVudCIsImFuY2VzdG9ycyIsIm5ld1Jvb3QiLCJpc0xlYXZpbmciLCJpc0VkaXRlZCIsImNsb25lIiwiZWRpdE9mZnNldCIsImlpIiwiZWRpdEtleSIsImVkaXRWYWx1ZSIsIl92aXNpdG9yS2V5cyRub2RlJGtpbiIsInZpc2l0Rm4iLCJnZXRWaXNpdEZuIiwidmlzaXRJblBhcmFsbGVsIiwidmlzaXRvcnMiLCJza2lwcGluZyIsImVudGVyIiwia2luZFZpc2l0b3IiLCJraW5kU3BlY2lmaWNWaXNpdG9yIiwic3BlY2lmaWNWaXNpdG9yIiwic3BlY2lmaWNLaW5kVmlzaXRvciIsImZyb20iLCJ0aGlzQXJnIiwiZmluZCIsInByZWRpY2F0ZSIsIk51bWJlciIsImlzRmluaXRlIiwiaXNJbnRlZ2VyIiwibWFwQXN5bmNJdGVyYXRvciIsIml0ZXJhYmxlIiwicmVqZWN0Q2FsbGJhY2siLCIkcmV0dXJuIiwiYWJydXB0Q2xvc2UiLCJtYXBSZWplY3QiLCJtYXBSZXN1bHQiLCJhc3luY01hcFZhbHVlIiwiaXRlcmF0b3JSZXN1bHQiLCJyZXR1cm4iLCJyZXRocm93IiwicmVqZWN0IiwidGhyb3ciLCJzdWJzY3JpYmVGaWVsZFJlc29sdmVyIiwic3Vic2NyaWJlSW1wbCIsInJlcG9ydEdyYXBoUUxFcnJvciIsInNvdXJjZVByb21pc2UiLCJjcmVhdGVTb3VyY2VFdmVudFN0cmVhbSIsIm1hcFNvdXJjZVRvUmVzcG9uc2UiLCJwYXlsb2FkIiwicmVzdWx0T3JTdHJlYW0iLCJyZXNvbHZlUmVzdWx0IiwiX2ZpZWxkRGVmJHN1YnNjcmliZSIsImV2ZW50U3RyZWFtIiwiX2NyZWF0ZUNsYXNzIiwic3RhdGljUHJvcHMiLCJpc1R5cGUiLCJpc1NjYWxhclR5cGUiLCJpc0ludGVyZmFjZVR5cGUiLCJpc1VuaW9uVHlwZSIsImlzRW51bVR5cGUiLCJpc0lucHV0T2JqZWN0VHlwZSIsImFzc2VydFR5cGUiLCJHcmFwaFFMU2NhbGFyVHlwZSIsImFzc2VydFNjYWxhclR5cGUiLCJHcmFwaFFMT2JqZWN0VHlwZSIsImFzc2VydE9iamVjdFR5cGUiLCJHcmFwaFFMSW50ZXJmYWNlVHlwZSIsImFzc2VydEludGVyZmFjZVR5cGUiLCJHcmFwaFFMVW5pb25UeXBlIiwiYXNzZXJ0VW5pb25UeXBlIiwiR3JhcGhRTEVudW1UeXBlIiwiYXNzZXJ0RW51bVR5cGUiLCJHcmFwaFFMSW5wdXRPYmplY3RUeXBlIiwiYXNzZXJ0SW5wdXRPYmplY3RUeXBlIiwiR3JhcGhRTExpc3QiLCJhc3NlcnRMaXN0VHlwZSIsIkdyYXBoUUxOb25OdWxsIiwiYXNzZXJ0Tm9uTnVsbFR5cGUiLCJpc1dyYXBwaW5nVHlwZSIsImFzc2VydElucHV0VHlwZSIsImlzT3V0cHV0VHlwZSIsImFzc2VydE91dHB1dFR5cGUiLCJhc3NlcnRMZWFmVHlwZSIsImlzQ29tcG9zaXRlVHlwZSIsImFzc2VydENvbXBvc2l0ZVR5cGUiLCJhc3NlcnRBYnN0cmFjdFR5cGUiLCJhc3NlcnROdWxsYWJsZVR5cGUiLCJhc3NlcnRXcmFwcGluZ1R5cGUiLCJpc051bGxhYmxlVHlwZSIsImdldE51bGxhYmxlVHlwZSIsImFzc2VydE5hbWVkVHlwZSIsImdldE5hbWVkVHlwZSIsInVud3JhcHBlZFR5cGUiLCJyZXNvbHZlVGh1bmsiLCJ0aHVuayIsInVuZGVmaW5lSWZFbXB0eSIsImNvbmZpZyIsIl9jb25maWckcGFyc2VWYWx1ZSIsIl9jb25maWckc2VyaWFsaXplIiwiX2NvbmZpZyRwYXJzZUxpdGVyYWwiLCJzcGVjaWZpZWRCeVVybCIsInBhcnNlTGl0ZXJhbCIsInZhbHVlRnJvbUFTVFVudHlwZWQiLCJhc3ROb2RlIiwiZXh0ZW5zaW9uQVNUTm9kZXMiLCJ0b0NvbmZpZyIsIl90aGlzJGV4dGVuc2lvbkFTVE5vZCIsIl9maWVsZHMiLCJkZWZpbmVGaWVsZE1hcCIsIl9pbnRlcmZhY2VzIiwiZGVmaW5lSW50ZXJmYWNlcyIsIl9wcm90bzIiLCJnZXRJbnRlcmZhY2VzIiwiZmllbGRzVG9GaWVsZHNDb25maWciLCJfcmVzb2x2ZVRodW5rIiwiZmllbGRNYXAiLCJpc1BsYWluT2JqIiwiZmllbGRDb25maWciLCJfZmllbGRDb25maWckYXJncyIsImFyZ3NDb25maWciLCJhcmdOYW1lIiwiYXJnQ29uZmlnIiwiZGVwcmVjYXRpb25SZWFzb24iLCJpc0RlcHJlY2F0ZWQiLCJmaWVsZCIsImFyZ3NUb0FyZ3NDb25maWciLCJpc1JlcXVpcmVkQXJndW1lbnQiLCJfcHJvdG8zIiwiX3RoaXMkZXh0ZW5zaW9uQVNUTm9kMiIsIl90eXBlcyIsImRlZmluZVR5cGVzIiwiX3Byb3RvNCIsImdldFR5cGVzIiwiX3RoaXMkZXh0ZW5zaW9uQVNUTm9kMyIsInR5cGVOYW1lIiwidmFsdWVNYXAiLCJfdmFsdWVzIiwidmFsdWVOYW1lIiwidmFsdWVDb25maWciLCJfdmFsdWVMb29rdXAiLCJlbnVtVmFsdWUiLCJfbmFtZUxvb2t1cCIsIl9wcm90bzUiLCJnZXRWYWx1ZXMiLCJnZXRWYWx1ZSIsIm91dHB1dFZhbHVlIiwiaW5wdXRWYWx1ZSIsInZhbHVlU3RyIiwiZGlkWW91TWVhbkVudW1WYWx1ZSIsIl92YXJpYWJsZXMiLCJfdmFsdWVTdHIiLCJfdGhpcyRleHRlbnNpb25BU1ROb2Q0IiwiZW51bVR5cGUiLCJ1bmtub3duVmFsdWVTdHIiLCJhbGxOYW1lcyIsInN1Z2dlc3RlZFZhbHVlcyIsImRlZmluZUlucHV0RmllbGRNYXAiLCJfcHJvdG82IiwiX3RoaXMkZXh0ZW5zaW9uQVNUTm9kNSIsImlzUmVxdWlyZWRJbnB1dEZpZWxkIiwiaXNEaXJlY3RpdmUiLCJHcmFwaFFMRGlyZWN0aXZlIiwiYXNzZXJ0RGlyZWN0aXZlIiwiX2NvbmZpZyRpc1JlcGVhdGFibGUiLCJfY29uZmlnJGFyZ3MiLCJpc1JlcGVhdGFibGUiLCJHcmFwaFFMQm9vbGVhbiIsIkRFRkFVTFRfREVQUkVDQVRJT05fUkVBU09OIiwiR3JhcGhRTERlcHJlY2F0ZWREaXJlY3RpdmUiLCJyZWFzb24iLCJHcmFwaFFMU3RyaW5nIiwiR3JhcGhRTFNwZWNpZmllZEJ5RGlyZWN0aXZlIiwic3BlY2lmaWVkRGlyZWN0aXZlcyIsImlzU3BlY2lmaWVkRGlyZWN0aXZlIiwiX19TY2hlbWEiLCJfX1R5cGUiLCJnZXRUeXBlTWFwIiwicXVlcnlUeXBlIiwibXV0YXRpb25UeXBlIiwiZ2V0TXV0YXRpb25UeXBlIiwic3Vic2NyaXB0aW9uVHlwZSIsImdldFN1YnNjcmlwdGlvblR5cGUiLCJfX0RpcmVjdGl2ZSIsImdldERpcmVjdGl2ZXMiLCJfX0RpcmVjdGl2ZUxvY2F0aW9uIiwiX19JbnB1dFZhbHVlIiwiaW5jbHVkZURlcHJlY2F0ZWQiLCJfX1R5cGVLaW5kIiwiVHlwZUtpbmQiLCJOT05fTlVMTCIsIl9fRmllbGQiLCJfYXJncyIsIl9jb250ZXh0IiwiZW51bVZhbHVlcyIsIl9fRW51bVZhbHVlIiwiaW5wdXRGaWVsZHMiLCJ2YWx1ZUFTVCIsImFzdEZyb21WYWx1ZSIsImludHJvc3BlY3Rpb25UeXBlcyIsImlzSW50cm9zcGVjdGlvblR5cGUiLCJNQVhfSU5UIiwiTUlOX0lOVCIsIkdyYXBoUUxJbnQiLCJzZXJpYWxpemVPYmplY3QiLCJHcmFwaFFMRmxvYXQiLCJwYXJzZUZsb2F0IiwidmFsdWVPZiIsInZhbHVlT2ZSZXN1bHQiLCJHcmFwaFFMSUQiLCJzcGVjaWZpZWRTY2FsYXJUeXBlcyIsImlzU3BlY2lmaWVkU2NhbGFyVHlwZSIsImlzU2NoZW1hIiwiR3JhcGhRTFNjaGVtYSIsImFzc2VydFNjaGVtYSIsIl9jb25maWckZGlyZWN0aXZlcyIsIl9fdmFsaWRhdGlvbkVycm9ycyIsImFzc3VtZVZhbGlkIiwiX3F1ZXJ5VHlwZSIsIl9tdXRhdGlvblR5cGUiLCJfc3Vic2NyaXB0aW9uVHlwZSIsIl9kaXJlY3RpdmVzIiwiYWxsUmVmZXJlbmNlZFR5cGVzIiwiX2NvbmZpZyR0eXBlczIiLCJjb2xsZWN0UmVmZXJlbmNlZFR5cGVzIiwiX3RoaXMkX2RpcmVjdGl2ZXMyIiwiX2RpcmVjdGl2ZSRhcmdzMiIsIl90eXBlTWFwIiwiX3N1YlR5cGVNYXAiLCJfaW1wbGVtZW50YXRpb25zTWFwIiwiX2FycmF5RnJvbTIiLCJuYW1lZFR5cGUiLCJfaTEwIiwiX25hbWVkVHlwZSRnZXRJbnRlcmZhMiIsImlmYWNlIiwiaW1wbGVtZW50YXRpb25zIiwib2JqZWN0cyIsIl9pMTIiLCJfbmFtZWRUeXBlJGdldEludGVyZmE0IiwiX2lmYWNlIiwiX2ltcGxlbWVudGF0aW9ucyIsImdldEltcGxlbWVudGF0aW9ucyIsImludGVyZmFjZVR5cGUiLCJpc1Bvc3NpYmxlVHlwZSIsInBvc3NpYmxlVHlwZSIsIm1heWJlU3ViVHlwZSIsIl9pMTQiLCJfYWJzdHJhY3RUeXBlJGdldFR5cGUyIiwiX2kxNiIsIl9pbXBsZW1lbnRhdGlvbnMkb2JqZTIiLCJfaTE4IiwiX2ltcGxlbWVudGF0aW9ucyRpbnRlMiIsImdldERpcmVjdGl2ZSIsInR5cGVTZXQiLCJfaTIwIiwiX25hbWVkVHlwZSRnZXRUeXBlczIiLCJfaTIyIiwiX25hbWVkVHlwZSRnZXRJbnRlcmZhNiIsIl9pMjQiLCJfb2JqZWN0VmFsdWVzMiIsIl9pMjYiLCJfZmllbGQkYXJnczIiLCJfaTI4IiwiX29iamVjdFZhbHVlczQiLCJTY2hlbWFWYWxpZGF0aW9uQ29udGV4dCIsIl9nZXRPcGVyYXRpb25UeXBlTm9kZSIsInJlcG9ydEVycm9yIiwiZ2V0T3BlcmF0aW9uVHlwZU5vZGUiLCJfZ2V0T3BlcmF0aW9uVHlwZU5vZGUyIiwiX2dldE9wZXJhdGlvblR5cGVOb2RlMyIsInZhbGlkYXRlUm9vdFR5cGVzIiwiX2NvbnRleHQkc2NoZW1hJGdldERpMiIsInZhbGlkYXRlTmFtZSIsIl9hcmckYXN0Tm9kZSIsImdldERlcHJlY2F0ZWREaXJlY3RpdmVOb2RlIiwidmFsaWRhdGVEaXJlY3RpdmVzIiwidmFsaWRhdGVJbnB1dE9iamVjdENpcmN1bGFyUmVmcyIsInZpc2l0ZWRUeXBlcyIsImZpZWxkUGF0aEluZGV4QnlUeXBlTmFtZSIsImRldGVjdEN5Y2xlUmVjdXJzaXZlIiwiaW5wdXRPYmoiLCJfaTMwIiwiZmllbGRUeXBlIiwiY3ljbGVJbmRleCIsImN5Y2xlUGF0aCIsInBhdGhTdHIiLCJmaWVsZE9iaiIsImNyZWF0ZUlucHV0T2JqZWN0Q2lyY3VsYXJSZWZzVmFsaWRhdG9yIiwidHlwZU1hcCIsInZhbGlkYXRlRmllbGRzIiwidmFsaWRhdGVJbnRlcmZhY2VzIiwidmFsaWRhdGVVbmlvbk1lbWJlcnMiLCJ2YWxpZGF0ZUVudW1WYWx1ZXMiLCJ2YWxpZGF0ZUlucHV0RmllbGRzIiwidmFsaWRhdGVUeXBlcyIsImdldEVycm9ycyIsIl9lcnJvcnMiLCJhZGRFcnJvciIsIm9wZXJhdGlvbk5vZGVzIiwiZ2V0QWxsU3ViTm9kZXMiLCJpc1ZhbGlkTmFtZUVycm9yIiwiZ2V0QWxsTm9kZXMiLCJfZmllbGQkYXN0Tm9kZSIsIl9hcmckYXN0Tm9kZTIiLCJfYXJnJGFzdE5vZGUzIiwiaWZhY2VUeXBlTmFtZXMiLCJfdHlwZSRnZXRJbnRlcmZhY2VzMiIsImdldEFsbEltcGxlbWVudHNJbnRlcmZhY2VOb2RlcyIsInZhbGlkYXRlVHlwZUltcGxlbWVudHNBbmNlc3RvcnMiLCJ2YWxpZGF0ZVR5cGVJbXBsZW1lbnRzSW50ZXJmYWNlIiwidHlwZUZpZWxkTWFwIiwiaWZhY2VGaWVsZCIsInR5cGVGaWVsZCIsIl9pZmFjZUZpZWxkJGFzdE5vZGUiLCJfdHlwZUZpZWxkJGFzdE5vZGUiLCJpc1R5cGVTdWJUeXBlT2YiLCJfaWZhY2VGaWVsZCRhcmdzMiIsIl9pZmFjZUFyZyRhc3ROb2RlIiwiX3R5cGVBcmckYXN0Tm9kZSIsImlmYWNlQXJnIiwidHlwZUFyZyIsImlzRXF1YWxUeXBlIiwiX2xvb3AyIiwiX3R5cGVGaWVsZCRhcmdzMiIsImlmYWNlSW50ZXJmYWNlcyIsIl9pZmFjZSRnZXRJbnRlcmZhY2VzMiIsInRyYW5zaXRpdmUiLCJ1bmlvbiIsIm1lbWJlclR5cGVzIiwiaW5jbHVkZWRUeXBlTmFtZXMiLCJtZW1iZXJUeXBlIiwiZ2V0VW5pb25NZW1iZXJUeXBlTm9kZXMiLCJfZmllbGQkYXN0Tm9kZTIiLCJfZmllbGQkYXN0Tm9kZTMiLCJnZXR0ZXIiLCJzdWJOb2RlcyIsIl9pMzIiLCJfZ2V0QWxsTm9kZXMyIiwiX2dldHRlciIsInR5cGVOb2RlIiwiaWZhY2VOb2RlIiwidW5pb25Ob2RlIiwiZGVmaW5pdGlvbk5vZGUiLCJfZGVmaW5pdGlvbk5vZGUkZGlyZWMiLCJUeXBlSW5mbyIsImdldEZpZWxkRGVmRm4iLCJpbml0aWFsVHlwZSIsIl9zY2hlbWEiLCJfdHlwZVN0YWNrIiwiX3BhcmVudFR5cGVTdGFjayIsIl9pbnB1dFR5cGVTdGFjayIsIl9maWVsZERlZlN0YWNrIiwiX2RlZmF1bHRWYWx1ZVN0YWNrIiwiX2RpcmVjdGl2ZSIsIl9hcmd1bWVudCIsIl9lbnVtVmFsdWUiLCJfZ2V0RmllbGREZWYiLCJnZXRQYXJlbnRUeXBlIiwiZ2V0SW5wdXRUeXBlIiwiZ2V0UGFyZW50SW5wdXRUeXBlIiwiZ2V0RGVmYXVsdFZhbHVlIiwiZ2V0QXJndW1lbnQiLCJnZXRFbnVtVmFsdWUiLCJ0eXBlQ29uZGl0aW9uQVNUIiwib3V0cHV0VHlwZSIsImlucHV0VHlwZSIsIl90aGlzJGdldERpcmVjdGl2ZSIsImZpZWxkT3JEaXJlY3RpdmUiLCJsaXN0VHlwZSIsImlucHV0RmllbGRUeXBlIiwiaW5wdXRGaWVsZCIsIm9iamVjdFR5cGUiLCJmaWVsZE5vZGUiLCJ2aXNpdFdpdGhUeXBlSW5mbyIsInR5cGVJbmZvIiwiTkFNRV9SWCIsImFzc2VydFZhbGlkTmFtZSIsImFzdFZhbHVlIiwidmFsdWVzTm9kZXMiLCJpdGVtTm9kZSIsImZpZWxkVmFsdWUiLCJzZXJpYWxpemVkIiwic3RyaW5nTnVtIiwiaW50ZWdlclN0cmluZ1JlZ0V4cCIsImJ1aWxkQVNUU2NoZW1hIiwiZG9jdW1lbnRBU1QiLCJhc3N1bWVWYWxpZFNETCIsImFzc2VydFZhbGlkU0RMIiwiZXh0ZW5kU2NoZW1hSW1wbCIsInN0ZERpcmVjdGl2ZSIsImV2ZXJ5IiwiYnVpbGRTY2hlbWEiLCJjb21tZW50RGVzY3JpcHRpb25zIiwiYnVpbGRDbGllbnRTY2hlbWEiLCJpbnRyb3NwZWN0aW9uIiwiX19zY2hlbWEiLCJzY2hlbWFJbnRyb3NwZWN0aW9uIiwidHlwZUludHJvc3BlY3Rpb24iLCJzY2FsYXJJbnRyb3NwZWN0aW9uIiwib2JqZWN0SW50cm9zcGVjdGlvbiIsImJ1aWxkSW1wbGVtZW50YXRpb25zTGlzdCIsImJ1aWxkRmllbGREZWZNYXAiLCJpbnRlcmZhY2VJbnRyb3NwZWN0aW9uIiwidW5pb25JbnRyb3NwZWN0aW9uIiwidW5pb25JbnRyb3NwZWN0aW9uU3RyIiwiZ2V0T2JqZWN0VHlwZSIsImJ1aWxkVW5pb25EZWYiLCJlbnVtSW50cm9zcGVjdGlvbiIsImVudW1JbnRyb3NwZWN0aW9uU3RyIiwidmFsdWVJbnRyb3NwZWN0aW9uIiwiYnVpbGRFbnVtRGVmIiwiaW5wdXRPYmplY3RJbnRyb3NwZWN0aW9uIiwiaW5wdXRPYmplY3RJbnRyb3NwZWN0aW9uU3RyIiwiYnVpbGRJbnB1dFZhbHVlRGVmTWFwIiwiYnVpbGRJbnB1dE9iamVjdERlZiIsInR5cGVTdHIiLCJidWlsZFR5cGUiLCJzdGRUeXBlIiwiZGlyZWN0aXZlSW50cm9zcGVjdGlvbiIsImRpcmVjdGl2ZUludHJvc3BlY3Rpb25TdHIiLCJfZGlyZWN0aXZlSW50cm9zcGVjdGlvblN0ciIsInR5cGVSZWYiLCJpdGVtUmVmIiwibnVsbGFibGVSZWYiLCJudWxsYWJsZVR5cGUiLCJnZXRJbnRlcmZhY2VUeXBlIiwiaW1wbGVtZW50aW5nSW50cm9zcGVjdGlvbiIsImltcGxlbWVudGluZ0ludHJvc3BlY3Rpb25TdHIiLCJmaWVsZEludHJvc3BlY3Rpb24iLCJidWlsZEZpZWxkIiwiZmllbGRJbnRyb3NwZWN0aW9uU3RyIiwiaW5wdXRWYWx1ZUludHJvc3BlY3Rpb25zIiwiYnVpbGRJbnB1dFZhbHVlIiwiaW5wdXRWYWx1ZUludHJvc3BlY3Rpb24iLCJkZWZhdWx0T25FcnJvciIsImNvZXJjZUlucHV0VmFsdWVJbXBsIiwiZXJyb3JQcmVmaXgiLCJjb2VyY2VkTGlzdCIsIml0ZW1WYWx1ZSIsImZpZWxkRGVmcyIsInBhcnNlUmVzdWx0IiwiY29uY2F0QVNUIiwiZG9jdW1lbnRzIiwiZG9jIiwib3duS2V5cyIsImVudW1lcmFibGVPbmx5IiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwic3ltYm9scyIsInN5bSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIl9vYmplY3RTcHJlYWQiLCJfZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZXh0ZW5kU2NoZW1hIiwiYXNzZXJ0VmFsaWRTRExFeHRlbnNpb24iLCJzY2hlbWFDb25maWciLCJleHRlbmRlZENvbmZpZyIsIl9zY2hlbWFEZWYiLCJfc2NoZW1hRGVmJGRlc2NyaXB0aW8iLCJfc2NoZW1hRGVmMiIsIl9vcHRpb25zJGFzc3VtZVZhbGlkIiwic2NoZW1hRGVmIiwidHlwZURlZnMiLCJ0eXBlRXh0ZW5zaW9uc01hcCIsImRpcmVjdGl2ZURlZnMiLCJzY2hlbWFFeHRlbnNpb25zIiwiX2RvY3VtZW50QVNUJGRlZmluaXRpMiIsImV4dGVuZGVkVHlwZU5hbWUiLCJleGlzdGluZ1R5cGVFeHRlbnNpb25zIiwiX3NjaGVtYUNvbmZpZyR0eXBlczIiLCJleGlzdGluZ1R5cGUiLCJfdHlwZUV4dGVuc2lvbnNNYXAkY28yIiwiX2dldFNwZWNpZmllZEJ5VXJsIiwiZ2V0U3BlY2lmaWVkQnlVcmwiLCJleHRlbmRTY2FsYXJUeXBlIiwiX3R5cGVFeHRlbnNpb25zTWFwJGNvMyIsInJlcGxhY2VOYW1lZFR5cGUiLCJidWlsZEludGVyZmFjZXMiLCJleHRlbmRGaWVsZCIsImJ1aWxkRmllbGRNYXAiLCJleHRlbmRPYmplY3RUeXBlIiwiX3R5cGVFeHRlbnNpb25zTWFwJGNvNCIsImV4dGVuZEludGVyZmFjZVR5cGUiLCJfdHlwZUV4dGVuc2lvbnNNYXAkY281IiwiYnVpbGRVbmlvblR5cGVzIiwiZXh0ZW5kVW5pb25UeXBlIiwiX3R5cGVFeHRlbnNpb25zTWFwJHR5IiwiYnVpbGRFbnVtVmFsdWVNYXAiLCJleHRlbmRFbnVtVHlwZSIsIl90eXBlRXh0ZW5zaW9uc01hcCRjbyIsInJlcGxhY2VUeXBlIiwiYnVpbGRJbnB1dEZpZWxkTWFwIiwiZXh0ZW5kSW5wdXRPYmplY3RUeXBlIiwiX3N0ZFR5cGVNYXAkbmFtZSIsInN0ZFR5cGVNYXAiLCJnZXRPcGVyYXRpb25UeXBlcyIsImV4dGVuZEFyZyIsImdldERlc2NyaXB0aW9uIiwiYnVpbGRBcmd1bWVudE1hcCIsIm9wVHlwZXMiLCJfbm9kZSRvcGVyYXRpb25UeXBlcyIsIm9wZXJhdGlvblR5cGVzTm9kZXMiLCJvcGVyYXRpb25UeXBlIiwiX3N0ZFR5cGVNYXAkbmFtZTIiLCJnZXRXcmFwcGVkVHlwZSIsImZpZWxkQ29uZmlnTWFwIiwiX25vZGUkZmllbGRzIiwibm9kZUZpZWxkcyIsImdldERlcHJlY2F0aW9uUmVhc29uIiwiYXJnc05vZGVzIiwiYXJnQ29uZmlnTWFwIiwiaW5wdXRGaWVsZE1hcCIsIl9ub2RlJGZpZWxkczIiLCJmaWVsZHNOb2RlcyIsImVudW1WYWx1ZU1hcCIsIl9ub2RlJHZhbHVlcyIsIl9ub2RlJGludGVyZmFjZXMiLCJpbnRlcmZhY2VzTm9kZXMiLCJfbm9kZSR0eXBlcyIsInR5cGVOb2RlcyIsIl9pMzQiLCJfdHlwZUV4dGVuc2lvbnNNYXAkbmEiLCJleHRlbnNpb25Ob2RlcyIsImFsbE5vZGVzIiwiX2V4dGVuc2lvbkFTVE5vZGVzIiwiX2FsbE5vZGVzIiwiX2V4dGVuc2lvbkFTVE5vZGVzMiIsIl9hbGxOb2RlczIiLCJfZXh0ZW5zaW9uQVNUTm9kZXMzIiwiX2FsbE5vZGVzMyIsIl9leHRlbnNpb25BU1ROb2RlczQiLCJfZXh0ZW5zaW9uQVNUTm9kZXM1IiwiX2FsbE5vZGVzNCIsImRlcHJlY2F0ZWQiLCJzcGVjaWZpZWRCeSIsImNvbW1lbnRzIiwiZ2V0TGVhZGluZ0NvbW1lbnRCbG9jayIsIkJyZWFraW5nQ2hhbmdlVHlwZSIsIlRZUEVfUkVNT1ZFRCIsIlRZUEVfQ0hBTkdFRF9LSU5EIiwiVFlQRV9SRU1PVkVEX0ZST01fVU5JT04iLCJWQUxVRV9SRU1PVkVEX0ZST01fRU5VTSIsIlJFUVVJUkVEX0lOUFVUX0ZJRUxEX0FEREVEIiwiSU1QTEVNRU5URURfSU5URVJGQUNFX1JFTU9WRUQiLCJGSUVMRF9SRU1PVkVEIiwiRklFTERfQ0hBTkdFRF9LSU5EIiwiUkVRVUlSRURfQVJHX0FEREVEIiwiQVJHX1JFTU9WRUQiLCJBUkdfQ0hBTkdFRF9LSU5EIiwiRElSRUNUSVZFX1JFTU9WRUQiLCJESVJFQ1RJVkVfQVJHX1JFTU9WRUQiLCJSRVFVSVJFRF9ESVJFQ1RJVkVfQVJHX0FEREVEIiwiRElSRUNUSVZFX1JFUEVBVEFCTEVfUkVNT1ZFRCIsIkRJUkVDVElWRV9MT0NBVElPTl9SRU1PVkVEIiwiRGFuZ2Vyb3VzQ2hhbmdlVHlwZSIsIlZBTFVFX0FEREVEX1RPX0VOVU0iLCJUWVBFX0FEREVEX1RPX1VOSU9OIiwiT1BUSU9OQUxfSU5QVVRfRklFTERfQURERUQiLCJPUFRJT05BTF9BUkdfQURERUQiLCJJTVBMRU1FTlRFRF9JTlRFUkZBQ0VfQURERUQiLCJBUkdfREVGQVVMVF9WQUxVRV9DSEFOR0UiLCJmaW5kQnJlYWtpbmdDaGFuZ2VzIiwib2xkU2NoZW1hIiwibmV3U2NoZW1hIiwiZmluZFNjaGVtYUNoYW5nZXMiLCJjaGFuZ2UiLCJmaW5kRGFuZ2Vyb3VzQ2hhbmdlcyIsInNjaGVtYUNoYW5nZXMiLCJ0eXBlc0RpZmYiLCJkaWZmIiwiX3R5cGVzRGlmZiRyZW1vdmVkMiIsInJlbW92ZWQiLCJvbGRUeXBlIiwiX3R5cGVzRGlmZiRwZXJzaXN0ZWQyIiwicGVyc2lzdGVkIiwiX29sZFR5cGUiLCJuZXdUeXBlIiwiZmluZEVudW1UeXBlQ2hhbmdlcyIsImZpbmRVbmlvblR5cGVDaGFuZ2VzIiwiZmluZElucHV0T2JqZWN0VHlwZUNoYW5nZXMiLCJmaW5kRmllbGRDaGFuZ2VzIiwiZmluZEltcGxlbWVudGVkSW50ZXJmYWNlc0NoYW5nZXMiLCJ0eXBlS2luZE5hbWUiLCJmaW5kVHlwZUNoYW5nZXMiLCJkaXJlY3RpdmVzRGlmZiIsIl9kaXJlY3RpdmVzRGlmZiRyZW1vdjIiLCJvbGREaXJlY3RpdmUiLCJfZGlyZWN0aXZlc0RpZmYkcGVyc2kyIiwiX29sZERpcmVjdGl2ZSIsIm5ld0RpcmVjdGl2ZSIsImFyZ3NEaWZmIiwiX2FyZ3NEaWZmJGFkZGVkMiIsImFkZGVkIiwibmV3QXJnIiwiX2FyZ3NEaWZmJHJlbW92ZWQyIiwib2xkQXJnIiwiX29sZERpcmVjdGl2ZSRsb2NhdGlvMiIsImZpbmREaXJlY3RpdmVDaGFuZ2VzIiwiZmllbGRzRGlmZiIsIl9maWVsZHNEaWZmJGFkZGVkMiIsIm5ld0ZpZWxkIiwiX2ZpZWxkc0RpZmYkcmVtb3ZlZDIiLCJvbGRGaWVsZCIsIl9maWVsZHNEaWZmJHBlcnNpc3RlZDIiLCJfb2xkRmllbGQiLCJfbmV3RmllbGQiLCJpc0NoYW5nZVNhZmVGb3JJbnB1dE9iamVjdEZpZWxkT3JGaWVsZEFyZyIsInBvc3NpYmxlVHlwZXNEaWZmIiwiX3Bvc3NpYmxlVHlwZXNEaWZmJGFkMiIsIm5ld1Bvc3NpYmxlVHlwZSIsIl9wb3NzaWJsZVR5cGVzRGlmZiRyZTIiLCJvbGRQb3NzaWJsZVR5cGUiLCJ2YWx1ZXNEaWZmIiwiX3ZhbHVlc0RpZmYkYWRkZWQyIiwiX3ZhbHVlc0RpZmYkcmVtb3ZlZDIiLCJpbnRlcmZhY2VzRGlmZiIsIl9pbnRlcmZhY2VzRGlmZiRhZGRlZDIiLCJuZXdJbnRlcmZhY2UiLCJfaW50ZXJmYWNlc0RpZmYkcmVtb3YyIiwib2xkSW50ZXJmYWNlIiwiX2ZpZWxkc0RpZmYkcmVtb3ZlZDQiLCJfaTM2IiwiX2ZpZWxkc0RpZmYkcGVyc2lzdGVkNCIsIl9vbGRGaWVsZDIiLCJmaW5kQXJnQ2hhbmdlcyIsImlzQ2hhbmdlU2FmZUZvck9iamVjdE9ySW50ZXJmYWNlRmllbGQiLCJfaTM4IiwiX2FyZ3NEaWZmJHJlbW92ZWQ0IiwiX2k0MCIsIl9hcmdzRGlmZiRwZXJzaXN0ZWQyIiwiX29sZEFyZyIsIm9sZFZhbHVlU3RyIiwic3RyaW5naWZ5VmFsdWUiLCJuZXdWYWx1ZVN0ciIsIl9pNDIiLCJfYXJnc0RpZmYkYWRkZWQ0IiwiX25ld0FyZyIsInNvcnRlZEFTVCIsIm9iamVjdE5vZGUiLCJmaWVsZEEiLCJmaWVsZEIiLCJvbGRBcnJheSIsIm5ld0FycmF5Iiwib2xkTWFwIiwibmV3TWFwIiwiX2k0NCIsIm9sZEl0ZW0iLCJuZXdJdGVtIiwiX2k0NiIsIl9uZXdJdGVtIiwiZmluZERlcHJlY2F0ZWRVc2FnZXMiLCJOb0RlcHJlY2F0ZWRDdXN0b21SdWxlIiwiZ2V0SW50cm9zcGVjdGlvblF1ZXJ5Iiwib3B0aW9uc1dpdGhEZWZhdWx0IiwiZGVzY3JpcHRpb25zIiwiZGlyZWN0aXZlSXNSZXBlYXRhYmxlIiwic2NoZW1hRGVzY3JpcHRpb24iLCJpbnB1dFZhbHVlRGVwcmVjYXRpb24iLCJpbnB1dERlcHJlY2F0aW9uIiwiZ2V0T3BlcmF0aW9uQVNUIiwiaW50cm9zcGVjdGlvbkZyb21TY2hlbWEiLCJvcHRpb25zV2l0aERlZmF1bHRzIiwibGV4aWNvZ3JhcGhpY1NvcnRTY2hlbWEiLCJzb3J0QnlOYW1lIiwic29ydFR5cGVzIiwic29ydEZpZWxkcyIsIl9jb25maWciLCJfY29uZmlnMiIsIl9jb25maWczIiwic29ydE9iak1hcCIsIl9jb25maWc0Iiwic29ydEJ5Iiwic29ydEFyZ3MiLCJyZXBsYWNlTWF5YmVUeXBlIiwibWF5YmVUeXBlIiwiZmllbGRzTWFwIiwic29ydFZhbHVlRm4iLCJzb3J0ZWRNYXAiLCJzb3J0ZWRLZXlzIiwibWFwVG9LZXkiLCJvYmoxIiwib2JqMiIsImtleTEiLCJrZXkyIiwicHJpbnRTY2hlbWEiLCJwcmludEZpbHRlcmVkU2NoZW1hIiwiaXNEZWZpbmVkVHlwZSIsInByaW50SW50cm9zcGVjdGlvblNjaGVtYSIsImRpcmVjdGl2ZUZpbHRlciIsInR5cGVGaWx0ZXIiLCJwcmludFNjaGVtYURlZmluaXRpb24iLCJwcmludERlc2NyaXB0aW9uIiwicHJpbnRBcmdzIiwicHJpbnREaXJlY3RpdmUiLCJwcmludFR5cGUiLCJpc1NjaGVtYU9mQ29tbW9uTmFtZXMiLCJzY2FsYXIiLCJ1cmxBU1QiLCJwcmludFNwZWNpZmllZEJ5VXJsIiwicHJpbnRTY2FsYXIiLCJwcmludEltcGxlbWVudGVkSW50ZXJmYWNlcyIsInByaW50RmllbGRzIiwicHJpbnRPYmplY3QiLCJwcmludEludGVyZmFjZSIsInByaW50VW5pb24iLCJwcmludERlcHJlY2F0ZWQiLCJwcmludEJsb2NrIiwicHJpbnRFbnVtIiwicHJpbnRJbnB1dFZhbHVlIiwicHJpbnRJbnB1dE9iamVjdCIsImRlZmF1bHRBU1QiLCJhcmdEZWNsIiwicmVhc29uQVNUIiwiZmlyc3RJbkJsb2NrIiwicHJpbnREZXNjcmlwdGlvbldpdGhDb21tZW50cyIsImJsb2NrU3RyaW5nIiwic2VwYXJhdGVPcGVyYXRpb25zIiwib3BlcmF0aW9ucyIsImRlcEdyYXBoIiwiY29sbGVjdERlcGVuZGVuY2llcyIsInNlcGFyYXRlZERvY3VtZW50QVNUcyIsImRlcGVuZGVuY2llcyIsIl9jb2xsZWN0RGVwZW5kZW5jaWVzMiIsImZyYWdtZW50TmFtZSIsImNvbGxlY3RUcmFuc2l0aXZlRGVwZW5kZW5jaWVzIiwiY29sbGVjdGVkIiwiZnJvbU5hbWUiLCJpbW1lZGlhdGVEZXBzIiwic3RyaXBJZ25vcmVkQ2hhcmFjdGVycyIsInN0cmlwcGVkQm9keSIsIndhc0xhc3RBZGRlZFRva2VuTm9uUHVuY3R1YXRvciIsImN1cnJlbnRUb2tlbiIsInRva2VuS2luZCIsImlzTm9uUHVuY3R1YXRvciIsInRva2VuQm9keSIsImRlZGVudEJsb2NrU3RyaW5nIiwiYmxvY2tTdHIiLCJyYXdTdHIiLCJsYXN0Q2hhciIsInR5cGVBIiwidHlwZUIiLCJzdXBlclR5cGUiLCJkb1R5cGVzT3ZlcmxhcCIsImlubmVyVHlwZSIsInZhcmlhYmxlVmFsdWUiLCJfdmFsdWVOb2RlJHZhbHVlczIiLCJpc01pc3NpbmdWYXJpYWJsZSIsImNvZXJjZWRPYmoiLCJfZXJyb3IiLCJfaW5oZXJpdHNMb29zZSIsIkFTVFZhbGlkYXRpb25Db250ZXh0IiwiX2FzdCIsIl9mcmFnbWVudHMiLCJfZnJhZ21lbnRTcHJlYWRzIiwiX3JlY3Vyc2l2ZWx5UmVmZXJlbmNlZEZyYWdtZW50cyIsIl9vbkVycm9yIiwiZ2V0RG9jdW1lbnQiLCJnZXRGcmFnbWVudCIsImZyYWdzIiwic3RhdGVtZW50IiwiZ2V0RnJhZ21lbnRTcHJlYWRzIiwic3ByZWFkcyIsInNldHNUb1Zpc2l0IiwiX3NldCRzZWxlY3Rpb25zMiIsImdldFJlY3Vyc2l2ZWx5UmVmZXJlbmNlZEZyYWdtZW50cyIsImNvbGxlY3RlZE5hbWVzIiwibm9kZXNUb1Zpc2l0IiwiX3RoaXMkZ2V0RnJhZ21lbnRTcHJlMiIsIlNETFZhbGlkYXRpb25Db250ZXh0IiwiX0FTVFZhbGlkYXRpb25Db250ZXh0IiwiZ2V0U2NoZW1hIiwiVmFsaWRhdGlvbkNvbnRleHQiLCJfQVNUVmFsaWRhdGlvbkNvbnRleHQyIiwiX3R5cGVJbmZvIiwiX3ZhcmlhYmxlVXNhZ2VzIiwiX3JlY3Vyc2l2ZVZhcmlhYmxlVXNhZ2VzIiwiZ2V0VmFyaWFibGVVc2FnZXMiLCJ1c2FnZXMiLCJuZXdVc2FnZXMiLCJnZXRSZWN1cnNpdmVWYXJpYWJsZVVzYWdlcyIsIl90aGlzJGdldFJlY3Vyc2l2ZWx5UjIiLCJmcmFnIiwiRXhlY3V0YWJsZURlZmluaXRpb25zUnVsZSIsIl9ub2RlJGRlZmluaXRpb25zMiIsImRlZk5hbWUiLCJGaWVsZHNPbkNvcnJlY3RUeXBlUnVsZSIsInN1Z2dlc3Rpb24iLCJzdWdnZXN0ZWRUeXBlcyIsInVzYWdlQ291bnQiLCJfc2NoZW1hJGdldFBvc3NpYmxlVHkyIiwiX3Bvc3NpYmxlVHlwZSRnZXRJbnRlMiIsIl91c2FnZUNvdW50JHBvc3NpYmxlSSIsInBvc3NpYmxlSW50ZXJmYWNlIiwidXNhZ2VDb3VudERpZmYiLCJnZXRTdWdnZXN0ZWRUeXBlTmFtZXMiLCJwb3NzaWJsZUZpZWxkTmFtZXMiLCJnZXRTdWdnZXN0ZWRGaWVsZE5hbWVzIiwiRnJhZ21lbnRzT25Db21wb3NpdGVUeXBlc1J1bGUiLCJLbm93bkFyZ3VtZW50TmFtZXNSdWxlIiwiS25vd25Bcmd1bWVudE5hbWVzT25EaXJlY3RpdmVzUnVsZSIsImFyZ05vZGUiLCJrbm93bkFyZ3NOYW1lcyIsImRpcmVjdGl2ZUFyZ3MiLCJkZWZpbmVkRGlyZWN0aXZlcyIsImFzdERlZmluaXRpb25zIiwiX2RlZiRhcmd1bWVudHMiLCJkaXJlY3RpdmVOYW1lIiwia25vd25BcmdzIiwiX2RpcmVjdGl2ZU5vZGUkYXJndW1lMiIsIktub3duRGlyZWN0aXZlc1J1bGUiLCJsb2NhdGlvbnNNYXAiLCJfcGFyZW50IiwiX3BhdGgiLCJjYW5kaWRhdGVMb2NhdGlvbiIsImFwcGxpZWRUbyIsImdldERpcmVjdGl2ZUxvY2F0aW9uRm9yT3BlcmF0aW9uIiwiZ2V0RGlyZWN0aXZlTG9jYXRpb25Gb3JBU1RQYXRoIiwiS25vd25GcmFnbWVudE5hbWVzUnVsZSIsIktub3duVHlwZU5hbWVzUnVsZSIsImV4aXN0aW5nVHlwZXNNYXAiLCJkZWZpbmVkVHlwZXMiLCJfY29udGV4dCRnZXREb2N1bWVudCQyIiwidHlwZU5hbWVzIiwiXzEiLCJfMiIsIl9hbmNlc3RvcnMkIiwiaXNTREwiLCJzdGFuZGFyZFR5cGVOYW1lcyIsImlzU3RhbmRhcmRUeXBlTmFtZSIsIkxvbmVBbm9ueW1vdXNPcGVyYXRpb25SdWxlIiwib3BlcmF0aW9uQ291bnQiLCJMb25lU2NoZW1hRGVmaW5pdGlvblJ1bGUiLCJfb2xkU2NoZW1hJGFzdE5vZGUiLCJhbHJlYWR5RGVmaW5lZCIsInNjaGVtYURlZmluaXRpb25zQ291bnQiLCJOb0ZyYWdtZW50Q3ljbGVzUnVsZSIsInZpc2l0ZWRGcmFncyIsInNwcmVhZFBhdGgiLCJzcHJlYWRQYXRoSW5kZXhCeU5hbWUiLCJzcHJlYWROb2RlcyIsInNwcmVhZE5vZGUiLCJzcHJlYWROYW1lIiwic3ByZWFkRnJhZ21lbnQiLCJ2aWFQYXRoIiwiTm9VbmRlZmluZWRWYXJpYWJsZXNSdWxlIiwidmFyaWFibGVOYW1lRGVmaW5lZCIsIk5vVW51c2VkRnJhZ21lbnRzUnVsZSIsIm9wZXJhdGlvbkRlZnMiLCJmcmFnbWVudERlZnMiLCJmcmFnbWVudE5hbWVVc2VkIiwiX2NvbnRleHQkZ2V0UmVjdXJzaXZlMiIsImZyYWdtZW50RGVmIiwiTm9VbnVzZWRWYXJpYWJsZXNSdWxlIiwidmFyaWFibGVEZWZzIiwidmFyaWFibGVOYW1lVXNlZCIsIl92YXJpYWJsZURlZnMyIiwidmFyaWFibGVEZWYiLCJyZWFzb25NZXNzYWdlIiwic3ViUmVhc29uIiwiT3ZlcmxhcHBpbmdGaWVsZHNDYW5CZU1lcmdlZFJ1bGUiLCJjb21wYXJlZEZyYWdtZW50UGFpcnMiLCJQYWlyU2V0IiwiY2FjaGVkRmllbGRzQW5kRnJhZ21lbnROYW1lcyIsImNvbmZsaWN0cyIsIl9nZXRGaWVsZHNBbmRGcmFnbWVudCIsImdldEZpZWxkc0FuZEZyYWdtZW50TmFtZXMiLCJmcmFnbWVudE5hbWVzIiwiX2k1IiwiY29uZmxpY3QiLCJmaW5kQ29uZmxpY3QiLCJjb2xsZWN0Q29uZmxpY3RzV2l0aGluIiwiY29sbGVjdENvbmZsaWN0c0JldHdlZW5GaWVsZHNBbmRGcmFnbWVudCIsImNvbGxlY3RDb25mbGljdHNCZXR3ZWVuRnJhZ21lbnRzIiwiZmluZENvbmZsaWN0c1dpdGhpblNlbGVjdGlvblNldCIsIl9yZWYyJCIsImZpZWxkczEiLCJmaWVsZHMyIiwicmVhc29uTXNnIiwiYXJlTXV0dWFsbHlFeGNsdXNpdmUiLCJfZ2V0UmVmZXJlbmNlZEZpZWxkc0EiLCJnZXRSZWZlcmVuY2VkRmllbGRzQW5kRnJhZ21lbnROYW1lcyIsImZpZWxkTWFwMiIsImZyYWdtZW50TmFtZXMyIiwiY29sbGVjdENvbmZsaWN0c0JldHdlZW4iLCJmcmFnbWVudE5hbWUxIiwiZnJhZ21lbnROYW1lMiIsImZyYWdtZW50MSIsImZyYWdtZW50MiIsIl9nZXRSZWZlcmVuY2VkRmllbGRzQTIiLCJmaWVsZE1hcDEiLCJmcmFnbWVudE5hbWVzMSIsIl9nZXRSZWZlcmVuY2VkRmllbGRzQTMiLCJwYXJlbnRGaWVsZHNBcmVNdXR1YWxseUV4Y2x1c2l2ZSIsIl9pNyIsImZpZWxkMSIsImZpZWxkMiIsImFyZ3VtZW50czEiLCJhcmd1bWVudHMyIiwicGFyZW50VHlwZTEiLCJub2RlMSIsImRlZjEiLCJwYXJlbnRUeXBlMiIsIm5vZGUyIiwiZGVmMiIsIl9ub2RlMSRhcmd1bWVudHMiLCJfbm9kZTIkYXJndW1lbnRzIiwibmFtZTEiLCJuYW1lMiIsImFyZ3VtZW50MSIsInZhbHVlMSIsInZhbHVlMiIsImFyZ3VtZW50MiIsImFyZ3VtZW50IiwidHlwZTEiLCJ0eXBlMiIsImRvVHlwZXNDb25mbGljdCIsInNlbGVjdGlvblNldDEiLCJzZWxlY3Rpb25TZXQyIiwiX2dldEZpZWxkc0FuZEZyYWdtZW50MiIsIl9nZXRGaWVsZHNBbmRGcmFnbWVudDMiLCJfaTMiLCJmaW5kQ29uZmxpY3RzQmV0d2VlblN1YlNlbGVjdGlvblNldHMiLCJhbGxGaWVsZHMiLCJzdWJmaWVsZENvbmZsaWN0cyIsImNhY2hlZCIsIm5vZGVBbmREZWZzIiwiX2NvbGxlY3RGaWVsZHNBbmRGcmFnbWVudE5hbWVzIiwiZnJhZ21lbnRUeXBlIiwiaW5saW5lRnJhZ21lbnRUeXBlIiwiX2RhdGEiLCJmaXJzdCIsIl9wYWlyU2V0QWRkIiwiUG9zc2libGVGcmFnbWVudFNwcmVhZHNSdWxlIiwiZnJhZ1R5cGUiLCJwYXJlbnRUeXBlU3RyIiwiZnJhZ1R5cGVTdHIiLCJnZXRGcmFnbWVudFR5cGUiLCJfZGVmS2luZFRvRXh0S2luZCIsIlBvc3NpYmxlVHlwZUV4dGVuc2lvbnNSdWxlIiwiY2hlY2tFeHRlbnNpb24iLCJleHBlY3RlZEtpbmQiLCJkZWZOb2RlIiwiZGVmS2luZFRvRXh0S2luZCIsImtpbmRTdHIiLCJleHRlbnNpb25LaW5kVG9UeXBlTmFtZSIsImFsbFR5cGVOYW1lcyIsIlByb3ZpZGVkUmVxdWlyZWRBcmd1bWVudHNSdWxlIiwiUHJvdmlkZWRSZXF1aXJlZEFyZ3VtZW50c09uRGlyZWN0aXZlc1J1bGUiLCJfZmllbGROb2RlJGFyZ3VtZW50cyIsImFyZ05vZGVzIiwiX2ZpZWxkRGVmJGFyZ3MyIiwiYXJnVHlwZVN0ciIsInJlcXVpcmVkQXJnc01hcCIsImlzUmVxdWlyZWRBcmd1bWVudE5vZGUiLCJyZXF1aXJlZEFyZ3MiLCJfZGlyZWN0aXZlTm9kZSRhcmd1bWUiLCJfYXJnTm9kZXMiLCJTY2FsYXJMZWFmc1J1bGUiLCJfZmllbGROYW1lIiwiX3R5cGVTdHIiLCJTaW5nbGVGaWVsZFN1YnNjcmlwdGlvbnNSdWxlIiwiVW5pcXVlQXJndW1lbnROYW1lc1J1bGUiLCJrbm93bkFyZ05hbWVzIiwiVW5pcXVlRGlyZWN0aXZlTmFtZXNSdWxlIiwia25vd25EaXJlY3RpdmVOYW1lcyIsIlVuaXF1ZURpcmVjdGl2ZXNQZXJMb2NhdGlvblJ1bGUiLCJ1bmlxdWVEaXJlY3RpdmVNYXAiLCJzY2hlbWFEaXJlY3RpdmVzIiwidHlwZURpcmVjdGl2ZXNNYXAiLCJzZWVuRGlyZWN0aXZlcyIsIl9ub2RlJGRpcmVjdGl2ZXMyIiwiVW5pcXVlRW51bVZhbHVlTmFtZXNSdWxlIiwiZXhpc3RpbmdUeXBlTWFwIiwia25vd25WYWx1ZU5hbWVzIiwiY2hlY2tWYWx1ZVVuaXF1ZW5lc3MiLCJ2YWx1ZU5vZGVzIiwidmFsdWVOYW1lcyIsInZhbHVlRGVmIiwiVW5pcXVlRmllbGREZWZpbml0aW9uTmFtZXNSdWxlIiwia25vd25GaWVsZE5hbWVzIiwiY2hlY2tGaWVsZFVuaXF1ZW5lc3MiLCJmaWVsZE5hbWVzIiwiaGFzRmllbGQiLCJVbmlxdWVGcmFnbWVudE5hbWVzUnVsZSIsImtub3duRnJhZ21lbnROYW1lcyIsIlVuaXF1ZUlucHV0RmllbGROYW1lc1J1bGUiLCJrbm93bk5hbWVTdGFjayIsImtub3duTmFtZXMiLCJVbmlxdWVPcGVyYXRpb25OYW1lc1J1bGUiLCJrbm93bk9wZXJhdGlvbk5hbWVzIiwiVW5pcXVlT3BlcmF0aW9uVHlwZXNSdWxlIiwiZGVmaW5lZE9wZXJhdGlvblR5cGVzIiwiZXhpc3RpbmdPcGVyYXRpb25UeXBlcyIsImNoZWNrT3BlcmF0aW9uVHlwZXMiLCJhbHJlYWR5RGVmaW5lZE9wZXJhdGlvblR5cGUiLCJVbmlxdWVUeXBlTmFtZXNSdWxlIiwia25vd25UeXBlTmFtZXMiLCJjaGVja1R5cGVOYW1lIiwiVW5pcXVlVmFyaWFibGVOYW1lc1J1bGUiLCJrbm93blZhcmlhYmxlTmFtZXMiLCJWYWx1ZXNPZkNvcnJlY3RUeXBlUnVsZSIsImlzVmFsaWRWYWx1ZU5vZGUiLCJmaWVsZE5vZGVNYXAiLCJsb2NhdGlvblR5cGUiLCJfdHlwZVN0cjIiLCJWYXJpYWJsZXNBcmVJbnB1dFR5cGVzUnVsZSIsIlZhcmlhYmxlc0luQWxsb3dlZFBvc2l0aW9uUnVsZSIsInZhckRlZk1hcCIsInZhckRlZiIsImFsbG93ZWRWYXJpYWJsZVVzYWdlIiwidmFyRGVmYXVsdFZhbHVlIiwibG9jYXRpb25EZWZhdWx0VmFsdWUiLCJudWxsYWJsZUxvY2F0aW9uVHlwZSIsImlucHV0T2JqZWN0RGVmIiwiaW5wdXRGaWVsZERlZiIsImVudW1WYWx1ZURlZiIsImVudW1UeXBlRGVmIiwiTm9TY2hlbWFJbnRyb3NwZWN0aW9uQ3VzdG9tUnVsZSIsInNwZWNpZmllZFJ1bGVzIiwic3BlY2lmaWVkU0RMUnVsZXMiLCJydWxlcyIsImFib3J0T2JqIiwicnVsZSIsInZhbGlkYXRlU0RMIiwic2NoZW1hVG9FeHRlbmQiLCJ2ZXJzaW9uSW5mbyIsIm1ham9yIiwibWlub3IiLCJwYXRjaCIsInByZVJlbGVhc2VUYWciLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJtb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIl0sInNvdXJjZVJvb3QiOiIifQ==