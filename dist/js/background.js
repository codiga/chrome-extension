/*! For license information please see background.js.LICENSE.txt */
(()=>{var e={"./node_modules/@urql/core/dist/8a6d4d1f.js":(e,n,t)=>{var r=t("./node_modules/graphql/index.mjs"),i=t("./node_modules/wonka/dist/wonka.js");function o(e){return"string"==typeof e?new r.GraphQLError(e):"object"==typeof e&&e.message?new r.GraphQLError(e.message,e.nodes,e.source,e.positions,e.path,e,e.extensions||{}):e}var a=function(e){function n(n){var t=n.networkError,r=n.response,i=(n.graphQLErrors||[]).map(o),a=function(e,n){var t="";return void 0!==e?t="[Network] "+e.message:(void 0!==n&&n.forEach((function(e){t+="[GraphQL] "+e.message+"\n"})),t.trim())}(t,i);e.call(this,a),this.name="CombinedError",this.message=a,this.graphQLErrors=i,this.networkError=t,this.response=r}return e&&(n.__proto__=e),(n.prototype=Object.create(e&&e.prototype)).constructor=n,n.prototype.toString=function(){return this.message},n}(Error);function s(e,n){e|=0;for(var t=0,r=0|n.length;t<r;t++)e=(e<<5)+e+n.charCodeAt(t);return e}function u(e){return s(5381,e)>>>0}var l=new Set,c=new WeakMap;function d(e){if(null===e||l.has(e))return"null";if("object"!=typeof e)return JSON.stringify(e)||"";if(e.toJSON)return d(e.toJSON());if(Array.isArray(e)){for(var n="[",t=0,r=e.length;t<r;t++){t>0&&(n+=",");var i=d(e[t]);n+=i.length>0?i:"null"}return n+"]"}var o=Object.keys(e).sort();if(!o.length&&e.constructor&&e.constructor!==Object){var a=c.get(e)||Math.random().toString(36).slice(2);return c.set(e,a),'{"__key":"'+a+'"}'}l.add(e);for(var s="{",u=0,p=o.length;u<p;u++){var f=o[u],m=d(e[f]);m&&(s.length>1&&(s+=","),s+=d(f)+":"+m)}return l.delete(e),s+"}"}function p(e){return l.clear(),d(e)}function f(e){var n=("string"!=typeof e?e.loc&&e.loc.source.body||r.print(e):e).replace(/([\s,]|#[^\n\r]+)+/g," ").trim();if("string"!=typeof e){var t="definitions"in e&&v(e);t&&(n="# "+t+"\n"+n),e.loc||(e.loc={start:0,end:n.length,source:{body:n,name:"gql",locationOffset:{line:1,column:1}}})}return n}var m=new Map;function h(e){var n,t;return"string"==typeof e?(n=u(f(e)),t=m.get(n)||r.parse(e,{noLocation:!0})):(n=e.__key||u(f(e)),t=m.get(n)||e),t.loc||f(t),t.__key=n,m.set(n,t),t}function v(e){for(var n=0,t=e.definitions.length;n<t;n++){var i=e.definitions[n];if(i.kind===r.Kind.OPERATION_DEFINITION&&i.name)return i.name.value}}function y(){return(y=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}function g(e,n,t){if(!("data"in n)&&!("errors"in n)||"path"in n)throw new Error("No Content");return{operation:e,data:n.data,error:Array.isArray(n.errors)?new a({graphQLErrors:n.errors,response:t}):void 0,extensions:"object"==typeof n.extensions&&n.extensions||void 0,hasNext:!!n.hasNext}}function T(e,n,t){var r=y({},e);if(r.hasNext=!!n.hasNext,!("path"in n))return"data"in n&&(r.data=n.data),r;Array.isArray(n.errors)&&(r.error=new a({graphQLErrors:r.error?r.error.graphQLErrors.concat(n.errors):n.errors,response:t}));for(var i,o=r.data=y({},r.data),s=0;s<n.path.length;)o=o[i=n.path[s++]]=Array.isArray(o[i])?[].concat(o[i]):y({},o[i]);return y(o,n.data),r}function E(e,n,t){return{operation:e,data:void 0,error:new a({networkError:n,response:t}),extensions:void 0}}function _(e){return"query"===e.kind&&!!e.context.preferGetMethod}var N="undefined"!=typeof Symbol?Symbol.asyncIterator:null,b="undefined"!=typeof TextDecoder?new TextDecoder:null,j=/content-type:[^\r\n]*application\/json/i,I=/boundary="?([^=";]+)"?/i;function O(e,n,t){var r=t.headers&&t.headers.get("Content-Type")||"";if(!/multipart\/mixed/i.test(r))return t.json().then((function(r){e(g(n,r,t))}));var i,o="---",a=r.match(I);a&&(o="--"+a[1]);var s=function(){};if(N&&t[N]){var u=t[N]();i=u.next.bind(u)}else{if(!("body"in t)||!t.body)throw new TypeError("Streaming requests unsupported");var l=t.body.getReader();s=l.cancel.bind(l),i=l.read.bind(l)}var c="",d=!0,p=null,f=null;return i().then((function r(a){if(!a.done){var s=function(e){return"undefined"!=typeof Buffer&&Buffer.isBuffer(e)?e.toString():b.decode(e)}(a.value),u=s.indexOf(o);for(u>-1?u+=c.length:u=c.indexOf(o),c+=s;u>-1;){var l=c.slice(0,u),m=c.slice(u+o.length);if(d)d=!1;else{var h=l.indexOf("\r\n\r\n")+4,v=l.slice(0,h),y=l.slice(h,l.lastIndexOf("\r\n")),E=void 0;if(j.test(v))try{E=JSON.parse(y),p=f=f?T(f,E,t):g(n,E,t)}catch(e){}if("--"===m.slice(0,2)||E&&!E.hasNext){if(!f)return e(g(n,{},t));break}}u=(c=m).indexOf(o)}}if(p&&(e(p),p=null),!a.done&&(!f||f.hasNext))return i().then(r)})).finally(s)}n.CombinedError=a,n._extends=y,n.createRequest=function(e,n){n||(n={});var t=h(e);return{key:s(t.__key,p(n))>>>0,query:t,variables:n}},n.getOperationName=v,n.getOperationType=function(e){for(var n=0,t=e.definitions.length;n<t;n++){var i=e.definitions[n];if(i.kind===r.Kind.OPERATION_DEFINITION)return i.operation}},n.keyDocument=h,n.makeErrorResult=E,n.makeFetchBody=function(e){return{query:r.print(e.query),operationName:v(e.query),variables:e.variables||void 0,extensions:void 0}},n.makeFetchOptions=function(e,n){var t=_(e),r="function"==typeof e.context.fetchOptions?e.context.fetchOptions():e.context.fetchOptions||{};return y({},r,{body:!t&&n?JSON.stringify(n):void 0,method:t?"GET":"POST",headers:t?r.headers:y({},{"content-type":"application/json"},r.headers)})},n.makeFetchSource=function(e,n,t){var r="manual"===t.redirect?400:300,o=e.context.fetch;return i.make((function(i){var a=i.next,s=i.complete,u="undefined"!=typeof AbortController?new AbortController:null;u&&(t.signal=u.signal);var l,c=!1,d=!1;return Promise.resolve().then((function(){if(!c)return(o||fetch)(n,t)})).then((function(n){if(n)return d=(l=n).status<200||l.status>=r,O(a,e,l)})).then(s).catch((function(n){if("AbortError"!==n.name){var t=E(e,d?new Error(l.statusText):n,l);a(t),s()}})),function(){c=!0,u&&u.abort()}}))},n.makeFetchURL=function(e,n){var t=_(e),r=e.context.url;if(!t||!n)return r;var i=[];return n.operationName&&i.push("operationName="+encodeURIComponent(n.operationName)),n.query&&i.push("query="+encodeURIComponent(n.query.replace(/#[^\n\r]+/g," ").trim())),n.variables&&i.push("variables="+encodeURIComponent(p(n.variables))),n.extensions&&i.push("extensions="+encodeURIComponent(p(n.extensions))),r+"?"+i.join("&")},n.makeResult=g,n.mergeResultPatch=T,n.stringifyDocument=f,n.stringifyVariables=p},"./node_modules/@urql/core/dist/urql-core.js":(e,n,t)=>{var r=t("./node_modules/graphql/index.mjs"),i=t("./node_modules/@urql/core/dist/8a6d4d1f.js"),o=t("./node_modules/wonka/dist/wonka.js");function a(e,n){if(Array.isArray(e))for(var t=0;t<e.length;t++)a(e[t],n);else if("object"==typeof e&&null!==e)for(var r in e)"__typename"===r&&"string"==typeof e[r]?n[e[r]]=0:a(e[r],n);return n}function s(e){return Object.keys(a(e,{}))}var u=function(e){if(e.selectionSet&&!e.selectionSet.selections.some((function(e){return e.kind===r.Kind.FIELD&&"__typename"===e.name.value&&!e.alias})))return i._extends({},e,{selectionSet:i._extends({},e.selectionSet,{selections:e.selectionSet.selections.concat([{kind:r.Kind.FIELD,name:{kind:r.Kind.NAME,value:"__typename"}}])})})},l=new Map;function c(e){var n=i.keyDocument(e),t=l.get(n.__key);return t||(t=r.visit(n,{Field:u,InlineFragment:u}),Object.defineProperty(t,"__key",{value:n.__key,enumerable:!1}),l.set(n.__key,t)),t}function d(e){return e&&"object"==typeof e?Object.keys(e).reduce((function(n,t){var r=e[t];return"__typename"===t?Object.defineProperty(n,"__typename",{enumerable:!1,value:r}):Array.isArray(r)?n[t]=r.map(d):n[t]=r&&"object"==typeof r&&"__typename"in r?d(r):r,n}),{}):e}function p(e){return e.toPromise=function(){return o.toPromise(o.take(1)(o.filter((function(e){return!e.stale&&!e.hasNext}))(e)))},e}function f(e,n,t){return t||(t=n.context),{key:n.key,query:n.query,variables:n.variables,kind:e,context:t}}function m(e,n){return f(e.kind,e,i._extends({},e.context,{meta:i._extends({},e.context.meta,n)}))}function h(){}function v(e,n,t){for(var o=0;o<t.length;o++)if(t[o].kind===r.Kind.FRAGMENT_DEFINITION){var a=t[o].name.value,s=i.stringifyDocument(t[o]);e.has(a)?e.get(a)!==s&&console.warn("[WARNING: Duplicate Fragment] A fragment with name `"+a+"` already exists in this document.\nWhile fragment names may not be unique across your source, each name must be unique per document."):(e.set(a,s),n.push(t[o]))}else n.push(t[o])}function y(e){var n=e.kind;return"mutation"!==n&&"query"!==n}function g(e){var n=e.forward,t=e.client,r=e.dispatchDebug,a=new Map,u=Object.create(null);function l(e){var n=f(e.kind,e);return n.query=c(e.query),n}function d(e){var n=e.context.requestPolicy;return"query"===e.kind&&"network-only"!==n&&("cache-only"===n||a.has(e.key))}return function(e){var c=o.share(e),p=o.map((function(e){var n=a.get(e.key);r(i._extends({},{operation:e},n?{type:"cacheHit",message:"The result was successfully retried from the cache"}:{type:"cacheMiss",message:"The result could not be retrieved from the cache"}));var o=i._extends({},n,{operation:m(e,{cacheOutcome:n?"hit":"miss"})});return"cache-and-network"===e.context.requestPolicy&&(o.stale=!0,T(t,e)),o}))(o.filter((function(e){return!y(e)&&d(e)}))(c)),f=o.tap((function(e){var n=e.operation;if(n){var i=s(e.data).concat(n.context.additionalTypenames||[]);if("mutation"===e.operation.kind){var o=new Set;r({type:"cacheInvalidation",message:"The following typenames have been invalidated: "+i,operation:n,data:{typenames:i,response:e},source:"cacheExchange"});for(var l=0;l<i.length;l++){var c=i[l],d=u[c]||(u[c]=new Set);d.forEach((function(e){o.add(e)})),d.clear()}o.forEach((function(e){a.has(e)&&(n=a.get(e).operation,a.delete(e),T(t,n))}))}else if("query"===n.kind&&e.data){a.set(n.key,e);for(var p=0;p<i.length;p++){var f=i[p];(u[f]||(u[f]=new Set)).add(n.key)}}}}))(n(o.filter((function(e){return"query"!==e.kind||"cache-only"!==e.context.requestPolicy}))(o.map((function(e){return m(e,{cacheOutcome:"miss"})}))(o.merge([o.map(l)(o.filter((function(e){return!y(e)&&!d(e)}))(c)),o.filter((function(e){return y(e)}))(c)])))));return o.merge([p,f])}}function T(e,n){return e.reexecuteOperation(f(n.kind,n,i._extends({},n.context,{requestPolicy:"network-only"})))}var E=new Set;function _(e){var n=e.forward,t=e.dispatchDebug,r=new Set;function i(e){var n=e.key,i=e.kind;if("teardown"===i)return r.delete(n),!0;if("query"!==i&&"subscription"!==i)return!0;var o=r.has(n);return r.add(n),o&&t({type:"dedup",message:"An operation has been deduped.",operation:e,source:"dedupExchange"}),!o}function a(e){e.hasNext||r.delete(e.operation.key)}return function(e){var t=o.filter(i)(e);return o.tap(a)(n(t))}}function N(e){var n=e.forward,t=e.dispatchDebug;return function(e){var r=o.share(e),a=o.mergeMap((function(e){var n=e.key,a=o.filter((function(e){return"teardown"===e.kind&&e.key===n}))(r),s=i.makeFetchBody(e),u=i.makeFetchURL(e,s),l=i.makeFetchOptions(e,s);return t({type:"fetchRequest",message:"A fetch request is being executed.",operation:e,data:{url:u,fetchOptions:l},source:"fetchExchange"}),o.onPush((function(n){var r=n.data?void 0:n.error;t({type:r?"fetchError":"fetchSuccess",message:"A "+(r?"failed":"successful")+" fetch response has been returned.",operation:e,data:{url:u,fetchOptions:l,value:r||n},source:"fetchExchange"})}))(o.takeUntil(a)(i.makeFetchSource(e,u,l)))}))(o.filter((function(e){return"query"===e.kind||"mutation"===e.kind}))(r)),s=n(o.filter((function(e){return"query"!==e.kind&&"mutation"!==e.kind}))(r));return o.merge([a,s])}}function b(e){var n=e.dispatchDebug;return function(e){return o.filter((function(){return!1}))(o.tap((function(e){if("teardown"!==e.kind){var t='No exchange has handled operations of kind "'+e.kind+"\". Check whether you've added an exchange responsible for these operations.";n({type:"fallbackCatch",message:t,operation:e,source:"fallbackExchange"}),console.warn(t)}}))(e))}}var j=b({dispatchDebug:h});function I(e){return function(n){var t=n.client,r=n.dispatchDebug;return e.reduceRight((function(e,n){return n({client:t,forward:e,dispatchDebug:function(e){r(i._extends({},{timestamp:Date.now(),source:n.name},e))}})}),n.forward)}}var O=[_,g,N],L=function e(n){if(!n.url)throw new Error("You are creating an urql-client without a url.");var t=new Map,r=new Map,a=[],s=o.makeSubject(),u=s.source,l=s.next,c=!1;function m(e){for(c=!0,e&&l(e);e=a.shift();)l(e);c=!1}function h(e){var n=o.filter((function(n){return n.operation.kind===e.kind&&n.operation.key===e.key}))(j);return g.maskTypename&&(n=o.map((function(e){return i._extends({},e,{data:d(e.data)})}))(n)),"mutation"===e.kind?o.take(1)(o.onStart((function(){return m(e)}))(n)):o.share(o.onEnd((function(){t.delete(e.key),r.delete(e.key);for(var n=a.length-1;n>=0;n--)a[n].key===e.key&&a.splice(n,1);m(f("teardown",e,e.context))}))(o.onPush((function(n){t.set(e.key,n)}))(o.switchMap((function(n){return"query"!==e.kind||n.stale?o.fromValue(n):o.merge([o.fromValue(n),o.map((function(){return i._extends({},n,{stale:!0})}))(o.take(1)(o.filter((function(n){return"query"===n.kind&&n.key===e.key&&"cache-only"!==n.context.requestPolicy}))(u)))])}))(o.takeUntil(o.filter((function(n){return"teardown"===n.kind&&n.key===e.key}))(u))(n)))))}var v,y=this instanceof e?this:Object.create(e.prototype),g=i._extends(y,{url:n.url,fetchOptions:n.fetchOptions,fetch:n.fetch,suspense:!!n.suspense,requestPolicy:n.requestPolicy||"cache-first",preferGetMethod:!!n.preferGetMethod,maskTypename:!!n.maskTypename,operations$:u,reexecuteOperation:function(e){("mutation"===e.kind||r.has(e.key))&&(a.push(e),c||Promise.resolve().then(m))},createOperationContext:function(e){return e||(e={}),i._extends({},{url:g.url,fetchOptions:g.fetchOptions,fetch:g.fetch,preferGetMethod:g.preferGetMethod},e,{suspense:e.suspense||!1!==e.suspense&&g.suspense,requestPolicy:e.requestPolicy||g.requestPolicy})},createRequestOperation:function(e,n,t){var r=i.getOperationType(n.query);if("teardown"!==e&&r!==e)throw new Error('Expected operation of type "'+e+'" but found "'+r+'"');return f(e,n,g.createOperationContext(t))},executeRequestOperation:function(e){return"mutation"===e.kind?h(e):o.make((function(n){var a=r.get(e.key);a||r.set(e.key,a=h(e));var s="cache-and-network"===e.context.requestPolicy||"network-only"===e.context.requestPolicy;return o.subscribe(n.next)(o.onEnd(n.complete)(o.onStart((function(){var r=t.get(e.key);if("subscription"===e.kind)return m(e);s&&m(e),null!=r&&r===t.get(e.key)?n.next(s?i._extends({},r,{stale:!0}):r):s||m(e)}))(a))).unsubscribe}))},executeQuery:function(e,n){var t=g.createRequestOperation("query",e,n);return g.executeRequestOperation(t)},executeSubscription:function(e,n){var t=g.createRequestOperation("subscription",e,n);return g.executeRequestOperation(t)},executeMutation:function(e,n){var t=g.createRequestOperation("mutation",e,n);return g.executeRequestOperation(t)},query:function(e,n,t){return t&&"boolean"==typeof t.suspense||(t=i._extends({},t,{suspense:!1})),p(g.executeQuery(i.createRequest(e,n),t))},readQuery:function(e,n,t){var r=null;return o.subscribe((function(e){r=e}))(g.query(e,n,t)).unsubscribe(),r},subscription:function(e,n,t){return g.executeSubscription(i.createRequest(e,n),t)},mutation:function(e,n,t){return p(g.executeMutation(i.createRequest(e,n),t))}}),T=o.makeSubject(),E=T.next,_=T.source;g.subscribeToDebugTarget=function(e){return o.subscribe(e)(_)},v=E;var N=I(void 0!==n.exchanges?n.exchanges:O),j=o.share(N({client:g,dispatchDebug:v,forward:b({dispatchDebug:v})})(u));return o.publish(j),g},S=L;n.CombinedError=i.CombinedError,n.createRequest=i.createRequest,n.getOperationName=i.getOperationName,n.makeErrorResult=i.makeErrorResult,n.makeResult=i.makeResult,n.mergeResultPatch=i.mergeResultPatch,n.stringifyVariables=i.stringifyVariables,n.Client=L,n.cacheExchange=g,n.composeExchanges=I,n.createClient=S,n.debugExchange=function(e){var n=e.forward;return function(e){return o.tap((function(e){return console.log("[Exchange debug]: Completed operation: ",e)}))(n(o.tap((function(e){return console.log("[Exchange debug]: Incoming operation: ",e)}))(e)))}},n.dedupExchange=_,n.defaultExchanges=O,n.errorExchange=function(e){var n=e.onError;return function(e){var t=e.forward;return function(e){return o.tap((function(e){var t=e.error;t&&n(t,e.operation)}))(t(e))}}},n.fallbackExchangeIO=j,n.fetchExchange=N,n.formatDocument=c,n.gql=function(){for(var e=arguments,n=new Map,t=[],o=[],a=Array.isArray(arguments[0])?arguments[0][0]:arguments[0]||"",s=1;s<arguments.length;s++){var u=e[s];u&&u.definitions?o.push.apply(o,u.definitions):a+=u,a+=e[0][s]}return v(n,t,i.keyDocument(a).definitions),v(n,t,o),i.keyDocument({kind:r.Kind.DOCUMENT,definitions:t})},n.makeOperation=f,n.maskTypename=d,n.ssrExchange=function(e){var n=!(!e||!e.staleWhileRevalidate),t=!(!e||!e.includeExtensions),r={},a=[];function s(e){a.push(e.operation.key),1===a.length&&Promise.resolve().then((function(){for(var e;e=a.shift();)r[e]=null}))}var u=function(a){var u=a.client,l=a.forward;return function(a){var c=e&&"boolean"==typeof e.isClient?!!e.isClient:!u.suspense,d=o.share(a),p=l(o.filter((function(e){return!r[e.key]||!!r[e.key].hasNext}))(d)),f=o.map((function(e){var o=function(e,n,t){return{operation:e,data:n.data?JSON.parse(n.data):void 0,extensions:t&&n.extensions?JSON.parse(n.extensions):void 0,error:n.error?new i.CombinedError({networkError:n.error.networkError?new Error(n.error.networkError):void 0,graphQLErrors:n.error.graphQLErrors}):void 0,hasNext:n.hasNext}}(e,r[e.key],t);return n&&!E.has(e.key)&&(o.stale=!0,E.add(e.key),T(u,e)),o}))(o.filter((function(e){return!!r[e.key]}))(d));return c?f=o.tap(s)(f):p=o.tap((function(e){var n=e.operation;if("mutation"!==n.kind){var i=function(e,n){var t=e.hasNext,r=e.data,i=e.extensions,o=e.error,a={};return void 0!==r&&(a.data=JSON.stringify(r)),n&&void 0!==i&&(a.extensions=JSON.stringify(i)),t&&(a.hasNext=!0),o&&(a.error={graphQLErrors:o.graphQLErrors.map((function(e){return e.path||e.extensions?{message:e.message,path:e.path,extensions:e.extensions}:e.message}))},o.networkError&&(a.error.networkError=""+o.networkError)),a}(e,t);r[n.key]=i}}))(p),o.merge([p,f])}};return u.restoreData=function(e){for(var n in e)null!==r[n]&&(r[n]=e[n])},u.extractData=function(){var e={};for(var n in r)null!=r[n]&&(e[n]=r[n]);return e},e&&e.initialState&&u.restoreData(e.initialState),u},n.subscriptionExchange=function(e){var n=e.forwardSubscription,t=e.enableAllOperations;return function(e){var a=e.client,s=e.forward;function u(e){var n=e.kind;return"subscription"===n||!!t&&("query"===n||"mutation"===n)}return function(e){var t=o.share(e),l=o.mergeMap((function(e){var s=e.key,u=o.filter((function(e){return"teardown"===e.kind&&e.key===s}))(t);return o.takeUntil(u)(function(e){var t=n({key:e.key.toString(36),query:r.print(e.query),variables:e.variables,context:i._extends({},e.context)});return o.make((function(n){var r,o=n.next,s=n.complete,u=!1;return Promise.resolve().then((function(){u||(r=t.subscribe({next:function(n){return o(i.makeResult(e,n))},error:function(n){return o(i.makeErrorResult(e,n))},complete:function(){u||(u=!0,"subscription"===e.kind&&a.reexecuteOperation(f("teardown",e,e.context)),s())}}))})),function(){u=!0,r&&r.unsubscribe()}}))}(e))}))(o.filter(u)(t)),c=s(o.filter((function(e){return!u(e)}))(t));return o.merge([l,c])}}}},"./src/background.ts":function(e,n,t){"use strict";var r=this&&this.__makeTemplateObject||function(e,n){return Object.defineProperty?Object.defineProperty(e,"raw",{value:n}):e.raw=n,e},i=this&&this.__awaiter||function(e,n,t,r){return new(t||(t=Promise))((function(i,o){function a(e){try{u(r.next(e))}catch(e){o(e)}}function s(e){try{u(r.throw(e))}catch(e){o(e)}}function u(e){var n;e.done?i(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(a,s)}u((r=r.apply(e,n||[])).next())}))},o=this&&this.__generator||function(e,n){var t,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(t)throw new TypeError("Generator is already executing.");for(;a;)try{if(t=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=n.call(e,a)}catch(e){o=[6,e],r=0}finally{t=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}};Object.defineProperty(n,"__esModule",{value:!0});var a=t("./node_modules/uuid/dist/esm-browser/index.js"),s=t("./node_modules/@urql/core/dist/urql-core.js"),u=(0,s.createClient)({url:"https://www.code-inspector.com/graphql"}),l={};chrome.storage.onChanged.addListener((function(e,n){for(var t=0,r=Object.entries(e);t<r.length;t++){var i=r[t],o=i[0],a=i[1],s=a.oldValue,u=a.newValue;console.log('Storage key "'+o+'" in namespace "'+n+'" changed.','Old value was "'+s+'", new value is "'+u+'".')}}));var c,d,p=function(e,n,t,i){return(0,s.gql)(c||(c=r(["mutation {\n    createFileAnalysis(language: ",', filename: "','", code: ',', fingerprint: "','")\n}'],["mutation {\n    createFileAnalysis(language: ",', filename: "','", code: ',', fingerprint: "','")\n}'])),t,i,JSON.stringify(e),n)},f=function(e,n){return(0,s.gql)(d||(d=r(["{\n    getFileAnalysis(id: ",', fingerprint: "','"){\n        violations {\n            line\n            description\n            tool\n            category\n            rule\n            severity\n        }\n        code\n        status\n        timestamp\n        runningTimeSeconds\n    }\n}'],["{\n    getFileAnalysis(id: ",', fingerprint: "','"){\n        violations {\n            line\n            description\n            tool\n            category\n            rule\n            severity\n        }\n        code\n        status\n        timestamp\n        runningTimeSeconds\n    }\n}'])),n,e)},m=function(){function e(e){this.innerAnalysisId=e}return e.prototype.shouldFetch=function(e){return this.innerAnalysisId===l[e]},e}();chrome.runtime.onMessage.addListener((function(e,n,t){return"validateCode"==e.contentScriptQuery&&function(e){return new Promise((function(n){return i(void 0,void 0,void 0,(function(){var t,r,s,c,d,h,v,y,g,T,E;return o(this,(function(_){switch(_.label){case 0:return[4,new Promise((function(e){chrome.storage.sync.get(["codiga-user"],(function(n){var t;if(n&&0===Object.keys(n).length&&n.constructor===Object){var r=(0,a.v4)();chrome.storage.sync.set(((t={})["codiga-user"]=r,t),(function(){e(r)}))}else e(n["codiga-user"])}))}))];case 1:return t=_.sent(),r=e.data.code,s=e.data.language,c=e.data.filename,d=e.data.id,h=(0,a.v4)(),l[d]=h,[4,(N=h,b=d,i(void 0,void 0,void 0,(function(){var e;return o(this,(function(n){switch(n.label){case 0:return e=new m(N),[4,new Promise((function(e){var n=setTimeout((function(){clearTimeout(n),e(!1)}),1e3)}))];case 1:return n.sent(),[2,e.shouldFetch(b)]}}))})))];case 2:return _.sent()?[4,u.mutation(p(r,t,s,c)).toPromise()]:[3,4];case 3:return y=_.sent(),[3,5];case 4:y=void 0,_.label=5;case 5:return(g=null==(v=y)?void 0:v.data.errors)&&g.length?(n({errors:g}),[2]):(v&&(T=v.data.createFileAnalysis,E=setInterval((function(){return i(void 0,void 0,void 0,(function(){var e,r,i,a,s,l;return o(this,(function(o){switch(o.label){case 0:return[4,u.query(f(t,T)).toPromise()];case 1:return e=o.sent(),(r=e.data.errors)&&n({errors:r}),"Done"===(null===(l=null===(s=e.data)||void 0===s?void 0:s.getFileAnalysis)||void 0===l?void 0:l.status)&&(clearInterval(E),c=e.data.getFileAnalysis.violations,"line",i=c.reduce((function(e,n){return(e[n.line]=e[n.line]||[]).push(n),e}),{}),a=Object.keys(i).map((function(e){return{line:e,group:i[e]}})),n({violations:a})),n({violations:[]}),[2]}var c}))}))}),2e3)),[2])}var N,b}))}))}))}(e).then((function(e){t(e)})),!0})),chrome.tabs.onUpdated.addListener((function(e,n,t){(n.url||"complete"===n.status)&&chrome.tabs.sendMessage(e,{action:"updateContainer"},(function(e){}))}))},"./node_modules/uuid/dist/esm-browser/index.js":(e,n,t)=>{"use strict";t.r(n),t.d(n,{v1:()=>r.default,v3:()=>i.default,v4:()=>o.default,v5:()=>a.default,NIL:()=>s.default,version:()=>u.default,validate:()=>l.default,stringify:()=>c.default,parse:()=>d.default});var r=t("./node_modules/uuid/dist/esm-browser/v1.js"),i=t("./node_modules/uuid/dist/esm-browser/v3.js"),o=t("./node_modules/uuid/dist/esm-browser/v4.js"),a=t("./node_modules/uuid/dist/esm-browser/v5.js"),s=t("./node_modules/uuid/dist/esm-browser/nil.js"),u=t("./node_modules/uuid/dist/esm-browser/version.js"),l=t("./node_modules/uuid/dist/esm-browser/validate.js"),c=t("./node_modules/uuid/dist/esm-browser/stringify.js"),d=t("./node_modules/uuid/dist/esm-browser/parse.js")},"./node_modules/uuid/dist/esm-browser/md5.js":(e,n,t)=>{"use strict";function r(e){return 14+(e+64>>>9<<4)+1}function i(e,n){var t=(65535&e)+(65535&n);return(e>>16)+(n>>16)+(t>>16)<<16|65535&t}function o(e,n,t,r,o,a){return i((s=i(i(n,e),i(r,a)))<<(u=o)|s>>>32-u,t);var s,u}function a(e,n,t,r,i,a,s){return o(n&t|~n&r,e,n,i,a,s)}function s(e,n,t,r,i,a,s){return o(n&r|t&~r,e,n,i,a,s)}function u(e,n,t,r,i,a,s){return o(n^t^r,e,n,i,a,s)}function l(e,n,t,r,i,a,s){return o(t^(n|~r),e,n,i,a,s)}t.r(n),t.d(n,{default:()=>c});const c=function(e){if("string"==typeof e){var n=unescape(encodeURIComponent(e));e=new Uint8Array(n.length);for(var t=0;t<n.length;++t)e[t]=n.charCodeAt(t)}return function(e){for(var n=[],t=32*e.length,r="0123456789abcdef",i=0;i<t;i+=8){var o=e[i>>5]>>>i%32&255,a=parseInt(r.charAt(o>>>4&15)+r.charAt(15&o),16);n.push(a)}return n}(function(e,n){e[n>>5]|=128<<n%32,e[r(n)-1]=n;for(var t=1732584193,o=-271733879,c=-1732584194,d=271733878,p=0;p<e.length;p+=16){var f=t,m=o,h=c,v=d;t=a(t,o,c,d,e[p],7,-680876936),d=a(d,t,o,c,e[p+1],12,-389564586),c=a(c,d,t,o,e[p+2],17,606105819),o=a(o,c,d,t,e[p+3],22,-1044525330),t=a(t,o,c,d,e[p+4],7,-176418897),d=a(d,t,o,c,e[p+5],12,1200080426),c=a(c,d,t,o,e[p+6],17,-1473231341),o=a(o,c,d,t,e[p+7],22,-45705983),t=a(t,o,c,d,e[p+8],7,1770035416),d=a(d,t,o,c,e[p+9],12,-1958414417),c=a(c,d,t,o,e[p+10],17,-42063),o=a(o,c,d,t,e[p+11],22,-1990404162),t=a(t,o,c,d,e[p+12],7,1804603682),d=a(d,t,o,c,e[p+13],12,-40341101),c=a(c,d,t,o,e[p+14],17,-1502002290),t=s(t,o=a(o,c,d,t,e[p+15],22,1236535329),c,d,e[p+1],5,-165796510),d=s(d,t,o,c,e[p+6],9,-1069501632),c=s(c,d,t,o,e[p+11],14,643717713),o=s(o,c,d,t,e[p],20,-373897302),t=s(t,o,c,d,e[p+5],5,-701558691),d=s(d,t,o,c,e[p+10],9,38016083),c=s(c,d,t,o,e[p+15],14,-660478335),o=s(o,c,d,t,e[p+4],20,-405537848),t=s(t,o,c,d,e[p+9],5,568446438),d=s(d,t,o,c,e[p+14],9,-1019803690),c=s(c,d,t,o,e[p+3],14,-187363961),o=s(o,c,d,t,e[p+8],20,1163531501),t=s(t,o,c,d,e[p+13],5,-1444681467),d=s(d,t,o,c,e[p+2],9,-51403784),c=s(c,d,t,o,e[p+7],14,1735328473),t=u(t,o=s(o,c,d,t,e[p+12],20,-1926607734),c,d,e[p+5],4,-378558),d=u(d,t,o,c,e[p+8],11,-2022574463),c=u(c,d,t,o,e[p+11],16,1839030562),o=u(o,c,d,t,e[p+14],23,-35309556),t=u(t,o,c,d,e[p+1],4,-1530992060),d=u(d,t,o,c,e[p+4],11,1272893353),c=u(c,d,t,o,e[p+7],16,-155497632),o=u(o,c,d,t,e[p+10],23,-1094730640),t=u(t,o,c,d,e[p+13],4,681279174),d=u(d,t,o,c,e[p],11,-358537222),c=u(c,d,t,o,e[p+3],16,-722521979),o=u(o,c,d,t,e[p+6],23,76029189),t=u(t,o,c,d,e[p+9],4,-640364487),d=u(d,t,o,c,e[p+12],11,-421815835),c=u(c,d,t,o,e[p+15],16,530742520),t=l(t,o=u(o,c,d,t,e[p+2],23,-995338651),c,d,e[p],6,-198630844),d=l(d,t,o,c,e[p+7],10,1126891415),c=l(c,d,t,o,e[p+14],15,-1416354905),o=l(o,c,d,t,e[p+5],21,-57434055),t=l(t,o,c,d,e[p+12],6,1700485571),d=l(d,t,o,c,e[p+3],10,-1894986606),c=l(c,d,t,o,e[p+10],15,-1051523),o=l(o,c,d,t,e[p+1],21,-2054922799),t=l(t,o,c,d,e[p+8],6,1873313359),d=l(d,t,o,c,e[p+15],10,-30611744),c=l(c,d,t,o,e[p+6],15,-1560198380),o=l(o,c,d,t,e[p+13],21,1309151649),t=l(t,o,c,d,e[p+4],6,-145523070),d=l(d,t,o,c,e[p+11],10,-1120210379),c=l(c,d,t,o,e[p+2],15,718787259),o=l(o,c,d,t,e[p+9],21,-343485551),t=i(t,f),o=i(o,m),c=i(c,h),d=i(d,v)}return[t,o,c,d]}(function(e){if(0===e.length)return[];for(var n=8*e.length,t=new Uint32Array(r(n)),i=0;i<n;i+=8)t[i>>5]|=(255&e[i/8])<<i%32;return t}(e),8*e.length))}},"./node_modules/uuid/dist/esm-browser/nil.js":(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>r});const r="00000000-0000-0000-0000-000000000000"},"./node_modules/uuid/dist/esm-browser/parse.js":(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>i});var r=t("./node_modules/uuid/dist/esm-browser/validate.js");const i=function(e){if(!(0,r.default)(e))throw TypeError("Invalid UUID");var n,t=new Uint8Array(16);return t[0]=(n=parseInt(e.slice(0,8),16))>>>24,t[1]=n>>>16&255,t[2]=n>>>8&255,t[3]=255&n,t[4]=(n=parseInt(e.slice(9,13),16))>>>8,t[5]=255&n,t[6]=(n=parseInt(e.slice(14,18),16))>>>8,t[7]=255&n,t[8]=(n=parseInt(e.slice(19,23),16))>>>8,t[9]=255&n,t[10]=(n=parseInt(e.slice(24,36),16))/1099511627776&255,t[11]=n/4294967296&255,t[12]=n>>>24&255,t[13]=n>>>16&255,t[14]=n>>>8&255,t[15]=255&n,t}},"./node_modules/uuid/dist/esm-browser/regex.js":(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>r});const r=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i},"./node_modules/uuid/dist/esm-browser/rng.js":(e,n,t)=>{"use strict";var r;t.r(n),t.d(n,{default:()=>o});var i=new Uint8Array(16);function o(){if(!r&&!(r="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return r(i)}},"./node_modules/uuid/dist/esm-browser/sha1.js":(e,n,t)=>{"use strict";function r(e,n,t,r){switch(e){case 0:return n&t^~n&r;case 1:case 3:return n^t^r;case 2:return n&t^n&r^t&r}}function i(e,n){return e<<n|e>>>32-n}t.r(n),t.d(n,{default:()=>o});const o=function(e){var n=[1518500249,1859775393,2400959708,3395469782],t=[1732584193,4023233417,2562383102,271733878,3285377520];if("string"==typeof e){var o=unescape(encodeURIComponent(e));e=[];for(var a=0;a<o.length;++a)e.push(o.charCodeAt(a))}else Array.isArray(e)||(e=Array.prototype.slice.call(e));e.push(128);for(var s=e.length/4+2,u=Math.ceil(s/16),l=new Array(u),c=0;c<u;++c){for(var d=new Uint32Array(16),p=0;p<16;++p)d[p]=e[64*c+4*p]<<24|e[64*c+4*p+1]<<16|e[64*c+4*p+2]<<8|e[64*c+4*p+3];l[c]=d}l[u-1][14]=8*(e.length-1)/Math.pow(2,32),l[u-1][14]=Math.floor(l[u-1][14]),l[u-1][15]=8*(e.length-1)&4294967295;for(var f=0;f<u;++f){for(var m=new Uint32Array(80),h=0;h<16;++h)m[h]=l[f][h];for(var v=16;v<80;++v)m[v]=i(m[v-3]^m[v-8]^m[v-14]^m[v-16],1);for(var y=t[0],g=t[1],T=t[2],E=t[3],_=t[4],N=0;N<80;++N){var b=Math.floor(N/20),j=i(y,5)+r(b,g,T,E)+_+n[b]+m[N]>>>0;_=E,E=T,T=i(g,30)>>>0,g=y,y=j}t[0]=t[0]+y>>>0,t[1]=t[1]+g>>>0,t[2]=t[2]+T>>>0,t[3]=t[3]+E>>>0,t[4]=t[4]+_>>>0}return[t[0]>>24&255,t[0]>>16&255,t[0]>>8&255,255&t[0],t[1]>>24&255,t[1]>>16&255,t[1]>>8&255,255&t[1],t[2]>>24&255,t[2]>>16&255,t[2]>>8&255,255&t[2],t[3]>>24&255,t[3]>>16&255,t[3]>>8&255,255&t[3],t[4]>>24&255,t[4]>>16&255,t[4]>>8&255,255&t[4]]}},"./node_modules/uuid/dist/esm-browser/stringify.js":(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>a});for(var r=t("./node_modules/uuid/dist/esm-browser/validate.js"),i=[],o=0;o<256;++o)i.push((o+256).toString(16).substr(1));const a=function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,t=(i[e[n+0]]+i[e[n+1]]+i[e[n+2]]+i[e[n+3]]+"-"+i[e[n+4]]+i[e[n+5]]+"-"+i[e[n+6]]+i[e[n+7]]+"-"+i[e[n+8]]+i[e[n+9]]+"-"+i[e[n+10]]+i[e[n+11]]+i[e[n+12]]+i[e[n+13]]+i[e[n+14]]+i[e[n+15]]).toLowerCase();if(!(0,r.default)(t))throw TypeError("Stringified UUID is invalid");return t}},"./node_modules/uuid/dist/esm-browser/v1.js":(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>l});var r,i,o=t("./node_modules/uuid/dist/esm-browser/rng.js"),a=t("./node_modules/uuid/dist/esm-browser/stringify.js"),s=0,u=0;const l=function(e,n,t){var l=n&&t||0,c=n||new Array(16),d=(e=e||{}).node||r,p=void 0!==e.clockseq?e.clockseq:i;if(null==d||null==p){var f=e.random||(e.rng||o.default)();null==d&&(d=r=[1|f[0],f[1],f[2],f[3],f[4],f[5]]),null==p&&(p=i=16383&(f[6]<<8|f[7]))}var m=void 0!==e.msecs?e.msecs:Date.now(),h=void 0!==e.nsecs?e.nsecs:u+1,v=m-s+(h-u)/1e4;if(v<0&&void 0===e.clockseq&&(p=p+1&16383),(v<0||m>s)&&void 0===e.nsecs&&(h=0),h>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");s=m,u=h,i=p;var y=(1e4*(268435455&(m+=122192928e5))+h)%4294967296;c[l++]=y>>>24&255,c[l++]=y>>>16&255,c[l++]=y>>>8&255,c[l++]=255&y;var g=m/4294967296*1e4&268435455;c[l++]=g>>>8&255,c[l++]=255&g,c[l++]=g>>>24&15|16,c[l++]=g>>>16&255,c[l++]=p>>>8|128,c[l++]=255&p;for(var T=0;T<6;++T)c[l+T]=d[T];return n||(0,a.default)(c)}},"./node_modules/uuid/dist/esm-browser/v3.js":(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>o});var r=t("./node_modules/uuid/dist/esm-browser/v35.js"),i=t("./node_modules/uuid/dist/esm-browser/md5.js");const o=(0,r.default)("v3",48,i.default)},"./node_modules/uuid/dist/esm-browser/v35.js":(e,n,t)=>{"use strict";t.r(n),t.d(n,{DNS:()=>o,URL:()=>a,default:()=>s});var r=t("./node_modules/uuid/dist/esm-browser/stringify.js"),i=t("./node_modules/uuid/dist/esm-browser/parse.js"),o="6ba7b810-9dad-11d1-80b4-00c04fd430c8",a="6ba7b811-9dad-11d1-80b4-00c04fd430c8";function s(e,n,t){function s(e,o,a,s){if("string"==typeof e&&(e=function(e){e=unescape(encodeURIComponent(e));for(var n=[],t=0;t<e.length;++t)n.push(e.charCodeAt(t));return n}(e)),"string"==typeof o&&(o=(0,i.default)(o)),16!==o.length)throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");var u=new Uint8Array(16+e.length);if(u.set(o),u.set(e,o.length),(u=t(u))[6]=15&u[6]|n,u[8]=63&u[8]|128,a){s=s||0;for(var l=0;l<16;++l)a[s+l]=u[l];return a}return(0,r.default)(u)}try{s.name=e}catch(e){}return s.DNS=o,s.URL=a,s}},"./node_modules/uuid/dist/esm-browser/v4.js":(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>o});var r=t("./node_modules/uuid/dist/esm-browser/rng.js"),i=t("./node_modules/uuid/dist/esm-browser/stringify.js");const o=function(e,n,t){var o=(e=e||{}).random||(e.rng||r.default)();if(o[6]=15&o[6]|64,o[8]=63&o[8]|128,n){t=t||0;for(var a=0;a<16;++a)n[t+a]=o[a];return n}return(0,i.default)(o)}},"./node_modules/uuid/dist/esm-browser/v5.js":(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>o});var r=t("./node_modules/uuid/dist/esm-browser/v35.js"),i=t("./node_modules/uuid/dist/esm-browser/sha1.js");const o=(0,r.default)("v5",80,i.default)},"./node_modules/uuid/dist/esm-browser/validate.js":(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>i});var r=t("./node_modules/uuid/dist/esm-browser/regex.js");const i=function(e){return"string"==typeof e&&r.default.test(e)}},"./node_modules/uuid/dist/esm-browser/version.js":(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>i});var r=t("./node_modules/uuid/dist/esm-browser/validate.js");const i=function(e){if(!(0,r.default)(e))throw TypeError("Invalid UUID");return parseInt(e.substr(14,1),16)}},"./node_modules/wonka/dist/wonka.js":(e,n)=>{"use strict";function t(e,n){return n.tag=e,n}function r(e){}function i(e){return function(n){var r=e.length;let i=!1,o=!1,a=!1,s=0;n(t(0,[function(u){if(u)i=!0;else if(o)a=!0;else{for(o=a=!0;a&&!i;)s<r?(u=e[s],s=s+1|0,a=!1,n(t(1,[u]))):(i=!0,n(0));o=!1}}]))}}function o(){}function a(e){e(0)}function s(e){let n=!1;e(t(0,[function(t){t?n=!0:n||e(0)}]))}function u(e){return void 0===e?((e=[A,0]).tag=256,e):(null===e||e[0]!==A||((e=[A,e[1]+1|0]).tag=256),e)}function l(e){return null===e||e[0]!==A?e:0!==(e=e[1])?[A,e-1|0]:void 0}function c(e){return function(n){return function(i){function o(n){"number"==typeof n?d&&(d=!1,void 0!==(n=a.shift())?(n=e(l(n)),d=!0,n(o)):f?i(0):u||(u=!0,s(0))):n.tag?d&&(i(n),p?p=!1:c(0)):(c=n=n[0],p=!1,n(0))}let a=[],s=r,u=!1,c=r,d=!1,p=!1,f=!1;n((function(n){"number"==typeof n?f||(f=!0,!d&&function(e){return 0===e.length}(a)&&i(0)):n.tag?f||(n=n[0],u=!1,d?a.push(n):(n=e(n),d=!0,n(o))):s=n[0]})),i(t(0,[function(e){if(e){if(f||(f=!0,s(1)),d)return d=!1,c(1)}else f||u||(u=!0,s(0)),d&&!p&&(p=!0,c(0))}]))}}}function d(e){return e}function p(e){return e}function f(e){return e(0)}function m(e){return function(n){return function(i){let o=r,a=!1,s=[],u=!1;n((function(n){"number"==typeof n?u||(u=!0,0===s.length&&i(0)):n.tag?u||(a=!1,function(e){function n(e){return e!==c}var l=function(e){"number"==typeof e?0!==s.length&&(s=s.filter(n),e=0===s.length,u&&e?i(0):!a&&e&&(a=!0,o(0))):e.tag?0!==s.length&&(i(t(1,[e[0]])),c(0)):(c=e=e[0],s=s.concat(e),e(0))};let c=r;1===e.length?e(l):e.bind(null,l)}(e(n[0])),a||(a=!0,o(0))):o=n[0]})),i(t(0,[function(e){e?(u||(u=!0,o(e)),s.forEach((function(n){return n(e)})),s=[]):(a||u?a=!1:(a=!0,o(0)),s.forEach(f))}]))}}}function h(e){return e}function v(e){return e}function y(e){return m(v)(e)}function g(e){return function(n){return function(r){let i=!1;return n((function(n){if("number"==typeof n)i||(i=!0,r(n));else if(n.tag)i||(e(n[0]),r(n));else{var o=n[0];r(t(0,[function(e){if(!i)return e&&(i=!0),o(e)}]))}}))}}}function T(e){e(0)}function E(e){return function(n){return function(i){function o(e){l&&("number"==typeof e?(l=!1,d?i(e):s||(s=!0,a(0))):e.tag?(i(e),c?c=!1:u(0)):(u=e=e[0],c=!1,e(0)))}let a=r,s=!1,u=r,l=!1,c=!1,d=!1;n((function(n){"number"==typeof n?d||(d=!0,l||i(0)):n.tag?d||(l&&(u(1),u=r),s?s=!1:(s=!0,a(0)),n=e(n[0]),l=!0,n(o)):a=n[0]})),i(t(0,[function(e){if(e){if(d||(d=!0,a(1)),l)return l=!1,u(1)}else d||s||(s=!0,a(0)),l&&!c&&(c=!0,u(0))}]))}}}function _(e){return e}function N(e){return function(n){return function(t){let o=[],a=r;return n((function(n){"number"==typeof n?i(o)(t):n.tag?(o.length>=e&&0<e&&o.shift(),o.push(n[0]),a(0)):(n=n[0],0>=e?(n(1),s(t)):(a=n,n(0)))}))}}}function b(e){return function(n){let t=r,i=!1;return n((function(n){"number"==typeof n?i=!0:n.tag?i||(e(n[0]),t(0)):(t=n=n[0],n(0))})),{unsubscribe:function(e){if(!i)return i=!0,t(1)}}}}function j(e){}function I(e){}function O(){}function L(){}function S(e,n,t){e.addEventListener(n,t)}function D(e,n,t){e.removeEventListener(n,t)}var A,w,R,k,q,x,F,G,V,C,K,U,Q,P,M,B,Y,J,X,z,H,W,$,Z,ee,ne,te,re,ie,oe,ae,se,ue,le,ce,de,pe,fe,me,he,ve,ye,ge,Te,Ee=i,_e=s;A=[],w=function(e){return function(n){return function(i){function o(e){"number"==typeof e?c||(c=!0,s(1),0<a.length&&i(t(1,[a])),i(0)):e.tag?!c&&0<a.length&&(e=a,a=[],i(t(1,[e]))):u=e[0]}let a=[],s=r,u=r,l=!1,c=!1;n((function(n){"number"==typeof n?c||(c=!0,u(1),0<a.length&&i(t(1,[a])),i(0)):n.tag?c||(a.push(n[0]),l?l=!1:(l=!0,s(0),u(0))):(s=n[0],e(o))})),i(t(0,[function(e){if(!c){if(e)return c=!0,s(1),u(1);if(!l)return l=!0,s(0),u(0)}}]))}}},R=function(e,n){return function(e,n){return function(i){let o,a,s=r,c=r,d=!1,p=0,f=!1;e((function(e){var n=a;"number"==typeof e?1>p?p=p+1|0:f||(f=!0,i(0)):e.tag?(e=e[0],void 0!==n?f||(o=u(e),d=!1,i(t(1,[[e,l(n)]]))):(o=u(e),d?d=!1:c(0))):s=e[0]})),n((function(e){var n=o;"number"==typeof e?1>p?p=p+1|0:f||(f=!0,i(0)):e.tag?(e=e[0],void 0!==n?f||(a=u(e),d=!1,i(t(1,[[l(n),e]]))):(a=u(e),d?d=!1:s(0))):c=e[0]})),i(t(0,[function(e){if(!f){if(e)return f=!0,s(1),c(1);if(!d)return d=!0,s(e),c(e)}}]))}}(e,n)},k=c,q=function(e){return c(d)(e)},x=function(e){return c(p)(i(e))},F=function(e){return function(n){return function(t){let i=r;return n((function(n){"number"==typeof n?t(n):n.tag?e(n[0])?t(n):i(0):(i=n[0],t(n))}))}}},G=function(e){return function(n){return function(r){return n((function(n){n="number"==typeof n?0:n.tag?t(1,[e(n[0])]):t(0,[n[0]]),r(n)}))}}},V=m,C=function(e){return m(h)(i(e))},K=y,U=y,Q=function(e){return function(n){return function(r){let i=!1;return n((function(n){if("number"==typeof n){if(i)return;return i=!0,r(n),e()}if(n.tag)i||r(n);else{var o=n[0];r(t(0,[function(n){if(!i)return n?(i=!0,o(n),e()):o(n)}]))}}))}}},P=g,M=g,B=function(e){return function(n){return function(t){return n((function(n){"number"==typeof n||n.tag?t(n):(t(n),e())}))}}},Y=function(e){return function(n){return function(i){let o,a=r,s=r,c=!1,d=!1;n((function(e){"number"==typeof e?d||(d=!0,s(1),i(0)):e.tag?(o=u(e[0]),c?c=!1:(c=!0,s(0),a(0))):a=e[0]})),e((function(e){var n=o;"number"==typeof e?d||(d=!0,a(1),i(0)):e.tag?void 0===n||d||(o=void 0,i(t(1,[l(n)]))):s=e[0]})),i(t(0,[function(e){if(!d){if(e)return d=!0,a(1),s(1);if(!c)return c=!0,a(0),s(0)}}]))}}},J=function(e,n){return function(e,n){return function(r){return function(i){let o=n;return r((function(n){"number"==typeof n?n=0:n.tag?(o=e(o,n[0]),n=t(1,[o])):n=t(0,[n[0]]),i(n)}))}}}(e,n)},X=function(e){function n(e){"number"==typeof e?(i.forEach(T),i=[]):e.tag?(a=!1,i.forEach((function(n){n(e)}))):o=e[0]}let i=[],o=r,a=!1;return function(r){function s(e){return e!==r}i=i.concat(r),1===i.length&&e(n),r(t(0,[function(e){if(e){if(i=i.filter(s),0===i.length)return o(1)}else a||(a=!0,o(e))}]))}},z=function(e){return function(n){return function(t){let i=r,o=e;return n((function(e){"number"==typeof e?t(e):e.tag?0<o?(o=o-1|0,i(0)):t(e):(i=e[0],t(e))}))}}},H=function(e){return function(n){return function(i){function o(e){"number"==typeof e?u&&(c=!0,a(1)):e.tag?(u=!1,s(1)):(s=e=e[0],e(0))}let a=r,s=r,u=!0,l=!1,c=!1;n((function(n){"number"==typeof n?(u&&s(1),c=!0,i(0)):n.tag?u||c?l?l=!1:(l=!0,a(0),s(0)):(l=!1,i(n)):(a=n[0],e(o))})),i(t(0,[function(e){if(!c)if(e){if(c=!0,a(1),u)return s(1)}else l||(l=!0,u&&s(0),a(0))}]))}}},W=function(e){return function(n){return function(t){let i=r,o=!0;return n((function(n){"number"==typeof n?t(n):n.tag?o?e(n[0])?i(0):(o=!1,t(n)):t(n):(i=n[0],t(n))}))}}},$=E,Z=function(e){return E(_)(e)},ee=function(e){return function(n){return function(i){let o=!1,a=0,s=r;n((function(n){"number"==typeof n?o||(o=!0,i(0)):n.tag?a<e&&!o&&(a=a+1|0,i(n),!o&&a>=e&&(o=!0,i(0),s(1))):(n=n[0],0>=e?(o=!0,i(0),n(1)):s=n)})),i(t(0,[function(n){if(!o){if(n)return o=!0,s(1);if(a<e)return s(0)}}]))}}},ne=N,te=function(e){return function(n){return function(i){function o(e){"number"!=typeof e&&(e.tag?(a=!0,s(1),i(0)):(u=e=e[0],e(0)))}let a=!1,s=r,u=r;n((function(n){"number"==typeof n?a||(a=!0,u(1),i(0)):n.tag?a||i(n):(s=n[0],e(o))})),i(t(0,[function(e){if(!a)return e?(a=!0,s(1),u(1)):s(0)}]))}}},re=function(e){return function(n){return function(t){let i=r,o=!1;return n((function(n){"number"==typeof n?o||(o=!0,t(0)):n.tag?o||(e(n[0])?t(n):(o=!0,t(0),i(1))):(i=n[0],t(n))}))}}},ie=b,oe=function(e){return function(n){b(e)(n)}},ae=function(e){return b(j)(e)},se=function(e){let n=[],t=r,i=!1;return e((function(e){"number"==typeof e?i=!0:e.tag?(n.push(e[0]),t(0)):(t=e=e[0],e(0))})),i||t(1),n},ue="function"==typeof Symbol?Symbol.observable||(Symbol.observable=Symbol("observable")):"@@observable",le=function(e){var n=void 0!==e[ue]?e[ue]():e;return function(e){var r=n.subscribe({next:function(n){e(t(1,[n]))},complete:function(){e(0)},error:I});e(t(0,[function(e){if(e)return r.unsubscribe()}]))}},ce=function(e){var n={subscribe:function(n,t,i){var o=("object"==typeof n?n.next.bind(n):n)||O,a=("object"==typeof n?n.complete.bind(n):i)||L;let s=r,u=!1;return e((function(e){if("number"==typeof e)return u=!0,a();if(e.tag){if(u)return;return o(e[0]),s(0)}s=e=e[0],e(0)})),{unsubscribe:function(){if(!u)return this.closed=!1,u=!0,s(1)},closed:!1}}};return n[ue]=function(e){return n},n},de=function(e){return function(n){var r=function(e,r){switch(e){case 0:n(t(0,[function(e){return r(e?2:1)}]));break;case 1:n(t(1,[r]));break;case 2:n(0)}};return 2===e.length?e(0,r):e.bind(null,0,r)}},pe=function(e){return function(n,t){if(0===n)return e((function(e){if("number"==typeof e)return 2===t.length?t(2,void 0):t.bind(null,2,void 0);if(e.tag)return e=e[0],2===t.length?t(1,e):t.bind(null,1,e);var n=e[0];return e=function(e){switch(e){case 1:n(0);break;case 2:n(1)}},2===t.length?t(0,e):t.bind(null,0,e)}))}},fe=function(e){return function(n){return function(r){let i,o=!1,a=!1;var s=function(e){void 0!==(e=i)&&(i=void 0,clearTimeout(l(e)))};return n((function(n){if("number"==typeof n)a||(a=!0,void 0!==i?o=!0:r(0));else if(n.tag)a||(s(),i=u(setTimeout((function(e){i=void 0,r(n),o&&r(0)}),e(n[0]))));else{var l=n[0];r(t(0,[function(e){if(!a)return e?(a=!0,o=!1,s(),l(1)):l(0)}]))}}))}}},me=function(e){return function(n){return function(t){let r=0;return n((function(n){"number"==typeof n||n.tag?(r=r+1|0,setTimeout((function(e){0!==r&&(r=r-1|0,t(n))}),e)):t(n)}))}}},he=function(e){return function(n){return function(r){function i(e){o=void 0,a=!1}let o,a=!1;var s=function(e){void 0!==(e=o)&&clearTimeout(l(e))};return n((function(n){if("number"==typeof n)s(),r(0);else if(n.tag)a||(a=!0,s(),o=u(setTimeout(i,e(n[0]))),r(n));else{var l=n[0];r(t(0,[function(e){return e?(s(),l(1)):l(e)}]))}}))}}},ve=function(e){return new Promise((function(n,t){N(1)(e)((function(e){"number"!=typeof e&&(e.tag?n(e[0]):e[0](0))}))}))},ye=function(e){return function(n){let r=0;var i=setInterval((function(e){e=r,r=r+1|0,n(t(1,[e]))}),e);n(t(0,[function(e){e&&clearInterval(i)}]))}},ge=function(e,n){return function(e,n){return function(r){var i=S,o=D,a=function(e){r(t(1,[e]))};return r(t(0,[function(t){if(t)return o(e,n,a)}])),i(e,n,a)}}(e,n)},Te=function(e){return function(n){let r=!1;e.then((function(e){return r||(n(t(1,[e])),n(0)),Promise.resolve(void 0)})),n(t(0,[function(e){e&&(r=!0)}]))}},n.buffer=w,n.combine=R,n.concat=x,n.concatAll=q,n.concatMap=k,n.debounce=fe,n.delay=me,n.empty=_e,n.filter=F,n.flatten=U,n.forEach=oe,n.fromArray=Ee,n.fromCallbag=de,n.fromDomEvent=ge,n.fromList=function(e){return function(n){let r=!1,i=!1,o=!1,a=e;n(t(0,[function(e){if(e)r=!0;else if(i)o=!0;else{for(i=o=!0;o&&!r;)(e=a)?(a=e[1],o=!1,n(t(1,[e[0]]))):(r=!0,n(0));i=!1}}]))}},n.fromObservable=le,n.fromPromise=Te,n.fromValue=function(e){return function(n){let r=!1;n(t(0,[function(i){i?r=!0:r||(r=!0,n(t(1,[e])),n(0))}]))}},n.interval=ye,n.make=function(e){return function(n){let r=o,i=!1;r=e({next:function(e){i||n(t(1,[e]))},complete:function(e){i||(i=!0,n(0))}}),n(t(0,[function(e){if(e&&!i)return i=!0,r()}]))}},n.makeSubject=function(e){let n=[],r=!1;return{source:function(e){function r(n){return n!==e}n=n.concat(e),e(t(0,[function(e){e&&(n=n.filter(r))}]))},next:function(e){r||n.forEach((function(n){n(t(1,[e]))}))},complete:function(e){r||(r=!0,n.forEach(a))}}},n.map=G,n.merge=C,n.mergeAll=K,n.mergeMap=V,n.never=function(e){e(t(0,[r]))},n.onEnd=Q,n.onPush=P,n.onStart=B,n.pipe=function(){for(var e=arguments,n=arguments[0],t=1,r=arguments.length;t<r;t++)n=e[t](n);return n},n.publish=ae,n.sample=Y,n.scan=J,n.share=X,n.skip=z,n.skipUntil=H,n.skipWhile=W,n.subscribe=ie,n.switchAll=Z,n.switchMap=$,n.take=ee,n.takeLast=ne,n.takeUntil=te,n.takeWhile=re,n.tap=M,n.throttle=he,n.toArray=se,n.toCallbag=pe,n.toObservable=ce,n.toPromise=ve},"./node_modules/graphql/error/GraphQLError.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{GraphQLError:()=>v,printError:()=>y});var r=t("./node_modules/graphql/jsutils/isObjectLike.mjs"),i=t("./node_modules/graphql/polyfills/symbols.mjs"),o=t("./node_modules/graphql/language/location.mjs"),a=t("./node_modules/graphql/language/printLocation.mjs");function s(e){return s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},s(e)}function u(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function l(e,n){return!n||"object"!==s(n)&&"function"!=typeof n?c(e):n}function c(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function d(e){var n="function"==typeof Map?new Map:void 0;return d=function(e){if(null===e||(t=e,-1===Function.toString.call(t).indexOf("[native code]")))return e;var t;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==n){if(n.has(e))return n.get(e);n.set(e,r)}function r(){return p(e,arguments,h(this).constructor)}return r.prototype=Object.create(e.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),m(r,e)},d(e)}function p(e,n,t){return p=f()?Reflect.construct:function(e,n,t){var r=[null];r.push.apply(r,n);var i=new(Function.bind.apply(e,r));return t&&m(i,t.prototype),i},p.apply(null,arguments)}function f(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function m(e,n){return m=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e},m(e,n)}function h(e){return h=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},h(e)}var v=function(e){!function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&m(e,n)}(p,e);var n,t,a,s,d=(n=p,t=f(),function(){var e,r=h(n);if(t){var i=h(this).constructor;e=Reflect.construct(r,arguments,i)}else e=r.apply(this,arguments);return l(this,e)});function p(e,n,t,i,a,s,u){var f,m,h,v,y;!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,p),y=d.call(this,e);var g,T=Array.isArray(n)?0!==n.length?n:void 0:n?[n]:void 0,E=t;!E&&T&&(E=null===(g=T[0].loc)||void 0===g?void 0:g.source);var _,N=i;!N&&T&&(N=T.reduce((function(e,n){return n.loc&&e.push(n.loc.start),e}),[])),N&&0===N.length&&(N=void 0),i&&t?_=i.map((function(e){return(0,o.getLocation)(t,e)})):T&&(_=T.reduce((function(e,n){return n.loc&&e.push((0,o.getLocation)(n.loc.source,n.loc.start)),e}),[]));var b=u;if(null==b&&null!=s){var j=s.extensions;(0,r.default)(j)&&(b=j)}return Object.defineProperties(c(y),{name:{value:"GraphQLError"},message:{value:e,enumerable:!0,writable:!0},locations:{value:null!==(f=_)&&void 0!==f?f:void 0,enumerable:null!=_},path:{value:null!=a?a:void 0,enumerable:null!=a},nodes:{value:null!=T?T:void 0},source:{value:null!==(m=E)&&void 0!==m?m:void 0},positions:{value:null!==(h=N)&&void 0!==h?h:void 0},originalError:{value:s},extensions:{value:null!==(v=b)&&void 0!==v?v:void 0,enumerable:null!=b}}),null!=s&&s.stack?(Object.defineProperty(c(y),"stack",{value:s.stack,writable:!0,configurable:!0}),l(y)):(Error.captureStackTrace?Error.captureStackTrace(c(y),p):Object.defineProperty(c(y),"stack",{value:Error().stack,writable:!0,configurable:!0}),y)}return a=p,(s=[{key:"toString",value:function(){return y(this)}},{key:i.SYMBOL_TO_STRING_TAG,get:function(){return"Object"}}])&&u(a.prototype,s),p}(d(Error));function y(e){var n=e.message;if(e.nodes)for(var t=0,r=e.nodes;t<r.length;t++){var i=r[t];i.loc&&(n+="\n\n"+(0,a.printLocation)(i.loc))}else if(e.source&&e.locations)for(var o=0,s=e.locations;o<s.length;o++){var u=s[o];n+="\n\n"+(0,a.printSourceLocation)(e.source,u)}return n}},"./node_modules/graphql/error/formatError.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{formatError:()=>i});var r=t("./node_modules/graphql/jsutils/devAssert.mjs");function i(e){var n;e||(0,r.default)(0,"Received null or undefined error.");var t=null!==(n=e.message)&&void 0!==n?n:"An unknown error occurred.",i=e.locations,o=e.path,a=e.extensions;return a?{message:t,locations:i,path:o,extensions:a}:{message:t,locations:i,path:o}}},"./node_modules/graphql/error/locatedError.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{locatedError:()=>o});var r=t("./node_modules/graphql/jsutils/inspect.mjs"),i=t("./node_modules/graphql/error/GraphQLError.mjs");function o(e,n,t){var o,a=e instanceof Error?e:new Error("Unexpected error value: "+(0,r.default)(e));return Array.isArray(a.path)?a:new i.GraphQLError(a.message,null!==(o=a.nodes)&&void 0!==o?o:n,a.source,a.positions,t,a)}},"./node_modules/graphql/error/syntaxError.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{syntaxError:()=>i});var r=t("./node_modules/graphql/error/GraphQLError.mjs");function i(e,n,t){return new r.GraphQLError("Syntax Error: ".concat(t),void 0,e,[n])}},"./node_modules/graphql/execution/execute.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{execute:()=>b,executeSync:()=>j,assertValidExecutionArguments:()=>L,buildExecutionContext:()=>S,collectFields:()=>A,buildResolveInfo:()=>q,defaultTypeResolver:()=>Q,defaultFieldResolver:()=>P,getFieldDef:()=>M});var r=t("./node_modules/graphql/jsutils/inspect.mjs"),i=t("./node_modules/graphql/jsutils/memoize3.mjs"),o=t("./node_modules/graphql/jsutils/invariant.mjs"),a=t("./node_modules/graphql/jsutils/devAssert.mjs"),s=t("./node_modules/graphql/jsutils/isPromise.mjs"),u=t("./node_modules/graphql/jsutils/isObjectLike.mjs"),l=t("./node_modules/graphql/jsutils/safeArrayFrom.mjs"),c=t("./node_modules/graphql/jsutils/promiseReduce.mjs"),d=t("./node_modules/graphql/jsutils/promiseForObject.mjs"),p=t("./node_modules/graphql/jsutils/Path.mjs"),f=t("./node_modules/graphql/error/GraphQLError.mjs"),m=t("./node_modules/graphql/error/locatedError.mjs"),h=t("./node_modules/graphql/language/kinds.mjs"),v=t("./node_modules/graphql/type/validate.mjs"),y=t("./node_modules/graphql/type/introspection.mjs"),g=t("./node_modules/graphql/type/directives.mjs"),T=t("./node_modules/graphql/type/definition.mjs"),E=t("./node_modules/graphql/utilities/typeFromAST.mjs"),_=t("./node_modules/graphql/utilities/getOperationRootType.mjs"),N=t("./node_modules/graphql/execution/values.mjs");function b(e,n,t,r,i,o,a,s){return I(1===arguments.length?e:{schema:e,document:n,rootValue:t,contextValue:r,variableValues:i,operationName:o,fieldResolver:a,typeResolver:s})}function j(e){var n=I(e);if((0,s.default)(n))throw new Error("GraphQL execution failed to complete synchronously.");return n}function I(e){var n=e.schema,t=e.document,r=e.rootValue,i=e.contextValue,o=e.variableValues,a=e.operationName,u=e.fieldResolver,l=e.typeResolver;L(n,t,o);var d=S(n,t,r,i,o,a,u,l);if(Array.isArray(d))return{errors:d};var f=function(e,n,t){var r=(0,_.getOperationRootType)(e.schema,n),i=A(e,r,n.selectionSet,Object.create(null),Object.create(null)),o=void 0;try{var a="mutation"===n.operation?function(e,n,t,r,i){return(0,c.default)(Object.keys(i),(function(r,o){var a=i[o],u=(0,p.addPath)(undefined,o,n.name),l=k(e,n,t,a,u);return void 0===l?r:(0,s.default)(l)?l.then((function(e){return r[o]=e,r})):(r[o]=l,r)}),Object.create(null))}(e,r,t,0,i):D(e,r,t,o,i);return(0,s.default)(a)?a.then(void 0,(function(n){return e.errors.push(n),Promise.resolve(null)})):a}catch(n){return e.errors.push(n),null}}(d,d.operation,r);return O(d,f)}function O(e,n){return(0,s.default)(n)?n.then((function(n){return O(e,n)})):0===e.errors.length?{data:n}:{errors:e.errors,data:n}}function L(e,n,t){n||(0,a.default)(0,"Must provide document."),(0,v.assertValidSchema)(e),null==t||(0,u.default)(t)||(0,a.default)(0,"Variables must be provided as an Object where each property is a variable value. Perhaps look to see if an unparsed JSON string was provided.")}function S(e,n,t,r,i,o,a,s){for(var u,l,c,d=Object.create(null),p=0,m=n.definitions;p<m.length;p++){var v=m[p];switch(v.kind){case h.Kind.OPERATION_DEFINITION:if(null==o){if(void 0!==c)return[new f.GraphQLError("Must provide operation name if query contains multiple operations.")];c=v}else(null===(u=v.name)||void 0===u?void 0:u.value)===o&&(c=v);break;case h.Kind.FRAGMENT_DEFINITION:d[v.name.value]=v}}if(!c)return null!=o?[new f.GraphQLError('Unknown operation named "'.concat(o,'".'))]:[new f.GraphQLError("Must provide an operation.")];var y=null!==(l=c.variableDefinitions)&&void 0!==l?l:[],g=(0,N.getVariableValues)(e,y,null!=i?i:{},{maxErrors:50});return g.errors?g.errors:{schema:e,fragments:d,rootValue:t,contextValue:r,operation:c,variableValues:g.coerced,fieldResolver:null!=a?a:P,typeResolver:null!=s?s:Q,errors:[]}}function D(e,n,t,r,i){for(var o=Object.create(null),a=!1,u=0,l=Object.keys(i);u<l.length;u++){var c=l[u],f=k(e,n,t,i[c],(0,p.addPath)(r,c,n.name));void 0!==f&&(o[c]=f,(0,s.default)(f)&&(a=!0))}return a?(0,d.default)(o):o}function A(e,n,t,r,i){for(var o=0,a=t.selections;o<a.length;o++){var s=a[o];switch(s.kind){case h.Kind.FIELD:if(!w(e,s))continue;var u=(d=s).alias?d.alias.value:d.name.value;r[u]||(r[u]=[]),r[u].push(s);break;case h.Kind.INLINE_FRAGMENT:if(!w(e,s)||!R(e,s,n))continue;A(e,n,s.selectionSet,r,i);break;case h.Kind.FRAGMENT_SPREAD:var l=s.name.value;if(i[l]||!w(e,s))continue;i[l]=!0;var c=e.fragments[l];if(!c||!R(e,c,n))continue;A(e,n,c.selectionSet,r,i)}}var d;return r}function w(e,n){var t=(0,N.getDirectiveValues)(g.GraphQLSkipDirective,n,e.variableValues);if(!0===(null==t?void 0:t.if))return!1;var r=(0,N.getDirectiveValues)(g.GraphQLIncludeDirective,n,e.variableValues);return!1!==(null==r?void 0:r.if)}function R(e,n,t){var r=n.typeCondition;if(!r)return!0;var i=(0,E.typeFromAST)(e.schema,r);return i===t||!!(0,T.isAbstractType)(i)&&e.schema.isSubType(i,t)}function k(e,n,t,r,i){var o,a=r[0].name.value,u=M(e.schema,n,a);if(u){var l=u.type,c=null!==(o=u.resolve)&&void 0!==o?o:e.fieldResolver,d=q(e,u,r,n,i);try{var f,h=c(t,(0,N.getArgumentValues)(u,r[0],e.variableValues),e.contextValue,d);return f=(0,s.default)(h)?h.then((function(n){return F(e,l,r,d,i,n)})):F(e,l,r,d,i,h),(0,s.default)(f)?f.then(void 0,(function(n){return x((0,m.locatedError)(n,r,(0,p.pathToArray)(i)),l,e)})):f}catch(n){return x((0,m.locatedError)(n,r,(0,p.pathToArray)(i)),l,e)}}}function q(e,n,t,r,i){return{fieldName:n.name,fieldNodes:t,returnType:n.type,parentType:r,path:i,schema:e.schema,fragments:e.fragments,rootValue:e.rootValue,operation:e.operation,variableValues:e.variableValues}}function x(e,n,t){if((0,T.isNonNullType)(n))throw e;return t.errors.push(e),null}function F(e,n,t,i,a,u){if(u instanceof Error)throw u;if((0,T.isNonNullType)(n)){var c=F(e,n.ofType,t,i,a,u);if(null===c)throw new Error("Cannot return null for non-nullable field ".concat(i.parentType.name,".").concat(i.fieldName,"."));return c}return null==u?null:(0,T.isListType)(n)?function(e,n,t,r,i,o){var a=n.ofType,u=!1,c=(0,l.default)(o,(function(n,o){var l=(0,p.addPath)(i,o,void 0);try{var c;return c=(0,s.default)(n)?n.then((function(n){return F(e,a,t,r,l,n)})):F(e,a,t,r,l,n),(0,s.default)(c)?(u=!0,c.then(void 0,(function(n){return x((0,m.locatedError)(n,t,(0,p.pathToArray)(l)),a,e)}))):c}catch(n){return x((0,m.locatedError)(n,t,(0,p.pathToArray)(l)),a,e)}}));if(null==c)throw new f.GraphQLError('Expected Iterable, but did not find one for field "'.concat(r.parentType.name,".").concat(r.fieldName,'".'));return u?Promise.all(c):c}(e,n,t,i,a,u):(0,T.isLeafType)(n)?function(e,n){var t=e.serialize(n);if(void 0===t)throw new Error('Expected a value of type "'.concat((0,r.default)(e),'" but ')+"received: ".concat((0,r.default)(n)));return t}(n,u):(0,T.isAbstractType)(n)?function(e,n,t,r,i,o){var a,u=null!==(a=n.resolveType)&&void 0!==a?a:e.typeResolver,l=e.contextValue,c=u(o,l,r,n);return(0,s.default)(c)?c.then((function(a){return V(e,G(a,e,n,t,r,o),t,r,i,o)})):V(e,G(c,e,n,t,r,o),t,r,i,o)}(e,n,t,i,a,u):(0,T.isObjectType)(n)?V(e,n,t,i,a,u):void(0,o.default)(0,"Cannot complete value of unexpected output type: "+(0,r.default)(n))}function G(e,n,t,i,o,a){if(null==e)throw new f.GraphQLError('Abstract type "'.concat(t.name,'" must resolve to an Object type at runtime for field "').concat(o.parentType.name,".").concat(o.fieldName,'". Either the "').concat(t.name,'" type should provide a "resolveType" function or each possible type should provide an "isTypeOf" function.'),i);var s=(0,T.isNamedType)(e)?e.name:e;if("string"!=typeof s)throw new f.GraphQLError('Abstract type "'.concat(t.name,'" must resolve to an Object type at runtime for field "').concat(o.parentType.name,".").concat(o.fieldName,'" with ')+"value ".concat((0,r.default)(a),', received "').concat((0,r.default)(e),'".'));var u=n.schema.getType(s);if(null==u)throw new f.GraphQLError('Abstract type "'.concat(t.name,'" was resolve to a type "').concat(s,'" that does not exist inside schema.'),i);if(!(0,T.isObjectType)(u))throw new f.GraphQLError('Abstract type "'.concat(t.name,'" was resolve to a non-object type "').concat(s,'".'),i);if(!n.schema.isSubType(t,u))throw new f.GraphQLError('Runtime Object type "'.concat(u.name,'" is not a possible type for "').concat(t.name,'".'),i);return u}function V(e,n,t,r,i,o){if(n.isTypeOf){var a=n.isTypeOf(o,e.contextValue,r);if((0,s.default)(a))return a.then((function(r){if(!r)throw C(n,o,t);return K(e,n,t,i,o)}));if(!a)throw C(n,o,t)}return K(e,n,t,i,o)}function C(e,n,t){return new f.GraphQLError('Expected value of type "'.concat(e.name,'" but got: ').concat((0,r.default)(n),"."),t)}function K(e,n,t,r,i){return D(e,n,i,r,U(e,n,t))}var U=(0,i.default)((function(e,n,t){for(var r=Object.create(null),i=Object.create(null),o=0;o<t.length;o++){var a=t[o];a.selectionSet&&(r=A(e,n,a.selectionSet,r,i))}return r})),Q=function(e,n,t,r){if((0,u.default)(e)&&"string"==typeof e.__typename)return e.__typename;for(var i=t.schema.getPossibleTypes(r),o=[],a=0;a<i.length;a++){var l=i[a];if(l.isTypeOf){var c=l.isTypeOf(e,n,t);if((0,s.default)(c))o[a]=c;else if(c)return l.name}}return o.length?Promise.all(o).then((function(e){for(var n=0;n<e.length;n++)if(e[n])return i[n].name})):void 0},P=function(e,n,t,r){if((0,u.default)(e)||"function"==typeof e){var i=e[r.fieldName];return"function"==typeof i?e[r.fieldName](n,t,r):i}};function M(e,n,t){return t===y.SchemaMetaFieldDef.name&&e.getQueryType()===n?y.SchemaMetaFieldDef:t===y.TypeMetaFieldDef.name&&e.getQueryType()===n?y.TypeMetaFieldDef:t===y.TypeNameMetaFieldDef.name?y.TypeNameMetaFieldDef:n.getFields()[t]}},"./node_modules/graphql/execution/values.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{getVariableValues:()=>m,getArgumentValues:()=>h,getDirectiveValues:()=>v});var r=t("./node_modules/graphql/polyfills/find.mjs"),i=t("./node_modules/graphql/jsutils/keyMap.mjs"),o=t("./node_modules/graphql/jsutils/inspect.mjs"),a=t("./node_modules/graphql/jsutils/printPathArray.mjs"),s=t("./node_modules/graphql/error/GraphQLError.mjs"),u=t("./node_modules/graphql/language/kinds.mjs"),l=t("./node_modules/graphql/language/printer.mjs"),c=t("./node_modules/graphql/type/definition.mjs"),d=t("./node_modules/graphql/utilities/typeFromAST.mjs"),p=t("./node_modules/graphql/utilities/valueFromAST.mjs"),f=t("./node_modules/graphql/utilities/coerceInputValue.mjs");function m(e,n,t,r){var i=[],u=null==r?void 0:r.maxErrors;try{var m=function(e,n,t,r){for(var i={},u=function(u){var m=n[u],h=m.variable.name.value,v=(0,d.typeFromAST)(e,m.type);if(!(0,c.isInputType)(v)){var g=(0,l.print)(m.type);return r(new s.GraphQLError('Variable "$'.concat(h,'" expected value of type "').concat(g,'" which cannot be used as an input type.'),m.type)),"continue"}if(!y(t,h)){if(m.defaultValue)i[h]=(0,p.valueFromAST)(m.defaultValue,v);else if((0,c.isNonNullType)(v)){var T=(0,o.default)(v);r(new s.GraphQLError('Variable "$'.concat(h,'" of required type "').concat(T,'" was not provided.'),m))}return"continue"}var E=t[h];if(null===E&&(0,c.isNonNullType)(v)){var _=(0,o.default)(v);return r(new s.GraphQLError('Variable "$'.concat(h,'" of non-null type "').concat(_,'" must not be null.'),m)),"continue"}i[h]=(0,f.coerceInputValue)(E,v,(function(e,n,t){var i='Variable "$'.concat(h,'" got invalid value ')+(0,o.default)(n);e.length>0&&(i+=' at "'.concat(h).concat((0,a.default)(e),'"')),r(new s.GraphQLError(i+"; "+t.message,m,void 0,void 0,void 0,t.originalError))}))},m=0;m<n.length;m++)u(m);return i}(e,n,t,(function(e){if(null!=u&&i.length>=u)throw new s.GraphQLError("Too many errors processing variables, error limit reached. Execution aborted.");i.push(e)}));if(0===i.length)return{coerced:m}}catch(e){i.push(e)}return{errors:i}}function h(e,n,t){for(var r,a={},d=null!==(r=n.arguments)&&void 0!==r?r:[],f=(0,i.default)(d,(function(e){return e.name.value})),m=0,h=e.args;m<h.length;m++){var v=h[m],g=v.name,T=v.type,E=f[g];if(E){var _=E.value,N=_.kind===u.Kind.NULL;if(_.kind===u.Kind.VARIABLE){var b=_.name.value;if(null==t||!y(t,b)){if(void 0!==v.defaultValue)a[g]=v.defaultValue;else if((0,c.isNonNullType)(T))throw new s.GraphQLError('Argument "'.concat(g,'" of required type "').concat((0,o.default)(T),'" ')+'was provided the variable "$'.concat(b,'" which was not provided a runtime value.'),_);continue}N=null==t[b]}if(N&&(0,c.isNonNullType)(T))throw new s.GraphQLError('Argument "'.concat(g,'" of non-null type "').concat((0,o.default)(T),'" ')+"must not be null.",_);var j=(0,p.valueFromAST)(_,T,t);if(void 0===j)throw new s.GraphQLError('Argument "'.concat(g,'" has invalid value ').concat((0,l.print)(_),"."),_);a[g]=j}else if(void 0!==v.defaultValue)a[g]=v.defaultValue;else if((0,c.isNonNullType)(T))throw new s.GraphQLError('Argument "'.concat(g,'" of required type "').concat((0,o.default)(T),'" ')+"was not provided.",n)}return a}function v(e,n,t){var i=n.directives&&(0,r.default)(n.directives,(function(n){return n.name.value===e.name}));if(i)return h(e,i,t)}function y(e,n){return Object.prototype.hasOwnProperty.call(e,n)}},"./node_modules/graphql/graphql.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{graphql:()=>u,graphqlSync:()=>l});var r=t("./node_modules/graphql/jsutils/isPromise.mjs"),i=t("./node_modules/graphql/language/parser.mjs"),o=t("./node_modules/graphql/validation/validate.mjs"),a=t("./node_modules/graphql/type/validate.mjs"),s=t("./node_modules/graphql/execution/execute.mjs");function u(e,n,t,r,i,o,a,s){var u=arguments;return new Promise((function(l){return l(1===u.length?c(e):c({schema:e,source:n,rootValue:t,contextValue:r,variableValues:i,operationName:o,fieldResolver:a,typeResolver:s}))}))}function l(e,n,t,i,o,a,s,u){var l=c(1===arguments.length?e:{schema:e,source:n,rootValue:t,contextValue:i,variableValues:o,operationName:a,fieldResolver:s,typeResolver:u});if((0,r.default)(l))throw new Error("GraphQL execution failed to complete synchronously.");return l}function c(e){var n,t=e.schema,r=e.source,u=e.rootValue,l=e.contextValue,c=e.variableValues,d=e.operationName,p=e.fieldResolver,f=e.typeResolver,m=(0,a.validateSchema)(t);if(m.length>0)return{errors:m};try{n=(0,i.parse)(r)}catch(e){return{errors:[e]}}var h=(0,o.validate)(t,n);return h.length>0?{errors:h}:(0,s.execute)({schema:t,document:n,rootValue:u,contextValue:l,variableValues:c,operationName:d,fieldResolver:p,typeResolver:f})}},"./node_modules/graphql/index.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{version:()=>r.version,versionInfo:()=>r.versionInfo,graphql:()=>i.graphql,graphqlSync:()=>i.graphqlSync,GraphQLSchema:()=>o.GraphQLSchema,GraphQLDirective:()=>a.GraphQLDirective,GraphQLScalarType:()=>s.GraphQLScalarType,GraphQLObjectType:()=>s.GraphQLObjectType,GraphQLInterfaceType:()=>s.GraphQLInterfaceType,GraphQLUnionType:()=>s.GraphQLUnionType,GraphQLEnumType:()=>s.GraphQLEnumType,GraphQLInputObjectType:()=>s.GraphQLInputObjectType,GraphQLList:()=>s.GraphQLList,GraphQLNonNull:()=>s.GraphQLNonNull,specifiedScalarTypes:()=>u.specifiedScalarTypes,GraphQLInt:()=>u.GraphQLInt,GraphQLFloat:()=>u.GraphQLFloat,GraphQLString:()=>u.GraphQLString,GraphQLBoolean:()=>u.GraphQLBoolean,GraphQLID:()=>u.GraphQLID,specifiedDirectives:()=>a.specifiedDirectives,GraphQLIncludeDirective:()=>a.GraphQLIncludeDirective,GraphQLSkipDirective:()=>a.GraphQLSkipDirective,GraphQLDeprecatedDirective:()=>a.GraphQLDeprecatedDirective,GraphQLSpecifiedByDirective:()=>a.GraphQLSpecifiedByDirective,TypeKind:()=>l.TypeKind,DEFAULT_DEPRECATION_REASON:()=>a.DEFAULT_DEPRECATION_REASON,introspectionTypes:()=>l.introspectionTypes,__Schema:()=>l.__Schema,__Directive:()=>l.__Directive,__DirectiveLocation:()=>l.__DirectiveLocation,__Type:()=>l.__Type,__Field:()=>l.__Field,__InputValue:()=>l.__InputValue,__EnumValue:()=>l.__EnumValue,__TypeKind:()=>l.__TypeKind,SchemaMetaFieldDef:()=>l.SchemaMetaFieldDef,TypeMetaFieldDef:()=>l.TypeMetaFieldDef,TypeNameMetaFieldDef:()=>l.TypeNameMetaFieldDef,isSchema:()=>o.isSchema,isDirective:()=>a.isDirective,isType:()=>s.isType,isScalarType:()=>s.isScalarType,isObjectType:()=>s.isObjectType,isInterfaceType:()=>s.isInterfaceType,isUnionType:()=>s.isUnionType,isEnumType:()=>s.isEnumType,isInputObjectType:()=>s.isInputObjectType,isListType:()=>s.isListType,isNonNullType:()=>s.isNonNullType,isInputType:()=>s.isInputType,isOutputType:()=>s.isOutputType,isLeafType:()=>s.isLeafType,isCompositeType:()=>s.isCompositeType,isAbstractType:()=>s.isAbstractType,isWrappingType:()=>s.isWrappingType,isNullableType:()=>s.isNullableType,isNamedType:()=>s.isNamedType,isRequiredArgument:()=>s.isRequiredArgument,isRequiredInputField:()=>s.isRequiredInputField,isSpecifiedScalarType:()=>u.isSpecifiedScalarType,isIntrospectionType:()=>l.isIntrospectionType,isSpecifiedDirective:()=>a.isSpecifiedDirective,assertSchema:()=>o.assertSchema,assertDirective:()=>a.assertDirective,assertType:()=>s.assertType,assertScalarType:()=>s.assertScalarType,assertObjectType:()=>s.assertObjectType,assertInterfaceType:()=>s.assertInterfaceType,assertUnionType:()=>s.assertUnionType,assertEnumType:()=>s.assertEnumType,assertInputObjectType:()=>s.assertInputObjectType,assertListType:()=>s.assertListType,assertNonNullType:()=>s.assertNonNullType,assertInputType:()=>s.assertInputType,assertOutputType:()=>s.assertOutputType,assertLeafType:()=>s.assertLeafType,assertCompositeType:()=>s.assertCompositeType,assertAbstractType:()=>s.assertAbstractType,assertWrappingType:()=>s.assertWrappingType,assertNullableType:()=>s.assertNullableType,assertNamedType:()=>s.assertNamedType,getNullableType:()=>s.getNullableType,getNamedType:()=>s.getNamedType,validateSchema:()=>c.validateSchema,assertValidSchema:()=>c.assertValidSchema,Token:()=>d.Token,Source:()=>p.Source,Location:()=>d.Location,getLocation:()=>f.getLocation,printLocation:()=>m.printLocation,printSourceLocation:()=>m.printSourceLocation,Lexer:()=>h.Lexer,TokenKind:()=>v.TokenKind,parse:()=>y.parse,parseValue:()=>y.parseValue,parseType:()=>y.parseType,print:()=>g.print,visit:()=>T.visit,visitInParallel:()=>T.visitInParallel,getVisitFn:()=>T.getVisitFn,BREAK:()=>T.BREAK,Kind:()=>E.Kind,DirectiveLocation:()=>_.DirectiveLocation,isDefinitionNode:()=>N.isDefinitionNode,isExecutableDefinitionNode:()=>N.isExecutableDefinitionNode,isSelectionNode:()=>N.isSelectionNode,isValueNode:()=>N.isValueNode,isTypeNode:()=>N.isTypeNode,isTypeSystemDefinitionNode:()=>N.isTypeSystemDefinitionNode,isTypeDefinitionNode:()=>N.isTypeDefinitionNode,isTypeSystemExtensionNode:()=>N.isTypeSystemExtensionNode,isTypeExtensionNode:()=>N.isTypeExtensionNode,execute:()=>b.execute,executeSync:()=>b.executeSync,defaultFieldResolver:()=>b.defaultFieldResolver,defaultTypeResolver:()=>b.defaultTypeResolver,responsePathAsArray:()=>j.pathToArray,getDirectiveValues:()=>I.getDirectiveValues,subscribe:()=>O.subscribe,createSourceEventStream:()=>O.createSourceEventStream,validate:()=>L.validate,ValidationContext:()=>S.ValidationContext,specifiedRules:()=>D.specifiedRules,ExecutableDefinitionsRule:()=>A.ExecutableDefinitionsRule,FieldsOnCorrectTypeRule:()=>w.FieldsOnCorrectTypeRule,FragmentsOnCompositeTypesRule:()=>R.FragmentsOnCompositeTypesRule,KnownArgumentNamesRule:()=>k.KnownArgumentNamesRule,KnownDirectivesRule:()=>q.KnownDirectivesRule,KnownFragmentNamesRule:()=>x.KnownFragmentNamesRule,KnownTypeNamesRule:()=>F.KnownTypeNamesRule,LoneAnonymousOperationRule:()=>G.LoneAnonymousOperationRule,NoFragmentCyclesRule:()=>V.NoFragmentCyclesRule,NoUndefinedVariablesRule:()=>C.NoUndefinedVariablesRule,NoUnusedFragmentsRule:()=>K.NoUnusedFragmentsRule,NoUnusedVariablesRule:()=>U.NoUnusedVariablesRule,OverlappingFieldsCanBeMergedRule:()=>Q.OverlappingFieldsCanBeMergedRule,PossibleFragmentSpreadsRule:()=>P.PossibleFragmentSpreadsRule,ProvidedRequiredArgumentsRule:()=>M.ProvidedRequiredArgumentsRule,ScalarLeafsRule:()=>B.ScalarLeafsRule,SingleFieldSubscriptionsRule:()=>Y.SingleFieldSubscriptionsRule,UniqueArgumentNamesRule:()=>J.UniqueArgumentNamesRule,UniqueDirectivesPerLocationRule:()=>X.UniqueDirectivesPerLocationRule,UniqueFragmentNamesRule:()=>z.UniqueFragmentNamesRule,UniqueInputFieldNamesRule:()=>H.UniqueInputFieldNamesRule,UniqueOperationNamesRule:()=>W.UniqueOperationNamesRule,UniqueVariableNamesRule:()=>$.UniqueVariableNamesRule,ValuesOfCorrectTypeRule:()=>Z.ValuesOfCorrectTypeRule,VariablesAreInputTypesRule:()=>ee.VariablesAreInputTypesRule,VariablesInAllowedPositionRule:()=>ne.VariablesInAllowedPositionRule,LoneSchemaDefinitionRule:()=>te.LoneSchemaDefinitionRule,UniqueOperationTypesRule:()=>re.UniqueOperationTypesRule,UniqueTypeNamesRule:()=>ie.UniqueTypeNamesRule,UniqueEnumValueNamesRule:()=>oe.UniqueEnumValueNamesRule,UniqueFieldDefinitionNamesRule:()=>ae.UniqueFieldDefinitionNamesRule,UniqueDirectiveNamesRule:()=>se.UniqueDirectiveNamesRule,PossibleTypeExtensionsRule:()=>ue.PossibleTypeExtensionsRule,NoDeprecatedCustomRule:()=>le.NoDeprecatedCustomRule,NoSchemaIntrospectionCustomRule:()=>ce.NoSchemaIntrospectionCustomRule,GraphQLError:()=>de.GraphQLError,syntaxError:()=>pe.syntaxError,locatedError:()=>fe.locatedError,printError:()=>de.printError,formatError:()=>me.formatError,getIntrospectionQuery:()=>he.getIntrospectionQuery,getOperationAST:()=>ve.getOperationAST,getOperationRootType:()=>ye.getOperationRootType,introspectionFromSchema:()=>ge.introspectionFromSchema,buildClientSchema:()=>Te.buildClientSchema,buildASTSchema:()=>Ee.buildASTSchema,buildSchema:()=>Ee.buildSchema,getDescription:()=>_e.getDescription,extendSchema:()=>_e.extendSchema,lexicographicSortSchema:()=>Ne.lexicographicSortSchema,printSchema:()=>be.printSchema,printType:()=>be.printType,printIntrospectionSchema:()=>be.printIntrospectionSchema,typeFromAST:()=>je.typeFromAST,valueFromAST:()=>Ie.valueFromAST,valueFromASTUntyped:()=>Oe.valueFromASTUntyped,astFromValue:()=>Le.astFromValue,TypeInfo:()=>Se.TypeInfo,visitWithTypeInfo:()=>Se.visitWithTypeInfo,coerceInputValue:()=>De.coerceInputValue,concatAST:()=>Ae.concatAST,separateOperations:()=>we.separateOperations,stripIgnoredCharacters:()=>Re.stripIgnoredCharacters,isEqualType:()=>ke.isEqualType,isTypeSubTypeOf:()=>ke.isTypeSubTypeOf,doTypesOverlap:()=>ke.doTypesOverlap,assertValidName:()=>qe.assertValidName,isValidNameError:()=>qe.isValidNameError,BreakingChangeType:()=>xe.BreakingChangeType,DangerousChangeType:()=>xe.DangerousChangeType,findBreakingChanges:()=>xe.findBreakingChanges,findDangerousChanges:()=>xe.findDangerousChanges,findDeprecatedUsages:()=>Fe.findDeprecatedUsages});var r=t("./node_modules/graphql/version.mjs"),i=t("./node_modules/graphql/graphql.mjs"),o=t("./node_modules/graphql/type/schema.mjs"),a=t("./node_modules/graphql/type/directives.mjs"),s=t("./node_modules/graphql/type/definition.mjs"),u=t("./node_modules/graphql/type/scalars.mjs"),l=t("./node_modules/graphql/type/introspection.mjs"),c=t("./node_modules/graphql/type/validate.mjs"),d=t("./node_modules/graphql/language/ast.mjs"),p=t("./node_modules/graphql/language/source.mjs"),f=t("./node_modules/graphql/language/location.mjs"),m=t("./node_modules/graphql/language/printLocation.mjs"),h=t("./node_modules/graphql/language/lexer.mjs"),v=t("./node_modules/graphql/language/tokenKind.mjs"),y=t("./node_modules/graphql/language/parser.mjs"),g=t("./node_modules/graphql/language/printer.mjs"),T=t("./node_modules/graphql/language/visitor.mjs"),E=t("./node_modules/graphql/language/kinds.mjs"),_=t("./node_modules/graphql/language/directiveLocation.mjs"),N=t("./node_modules/graphql/language/predicates.mjs"),b=t("./node_modules/graphql/execution/execute.mjs"),j=t("./node_modules/graphql/jsutils/Path.mjs"),I=t("./node_modules/graphql/execution/values.mjs"),O=t("./node_modules/graphql/subscription/subscribe.mjs"),L=t("./node_modules/graphql/validation/validate.mjs"),S=t("./node_modules/graphql/validation/ValidationContext.mjs"),D=t("./node_modules/graphql/validation/specifiedRules.mjs"),A=t("./node_modules/graphql/validation/rules/ExecutableDefinitionsRule.mjs"),w=t("./node_modules/graphql/validation/rules/FieldsOnCorrectTypeRule.mjs"),R=t("./node_modules/graphql/validation/rules/FragmentsOnCompositeTypesRule.mjs"),k=t("./node_modules/graphql/validation/rules/KnownArgumentNamesRule.mjs"),q=t("./node_modules/graphql/validation/rules/KnownDirectivesRule.mjs"),x=t("./node_modules/graphql/validation/rules/KnownFragmentNamesRule.mjs"),F=t("./node_modules/graphql/validation/rules/KnownTypeNamesRule.mjs"),G=t("./node_modules/graphql/validation/rules/LoneAnonymousOperationRule.mjs"),V=t("./node_modules/graphql/validation/rules/NoFragmentCyclesRule.mjs"),C=t("./node_modules/graphql/validation/rules/NoUndefinedVariablesRule.mjs"),K=t("./node_modules/graphql/validation/rules/NoUnusedFragmentsRule.mjs"),U=t("./node_modules/graphql/validation/rules/NoUnusedVariablesRule.mjs"),Q=t("./node_modules/graphql/validation/rules/OverlappingFieldsCanBeMergedRule.mjs"),P=t("./node_modules/graphql/validation/rules/PossibleFragmentSpreadsRule.mjs"),M=t("./node_modules/graphql/validation/rules/ProvidedRequiredArgumentsRule.mjs"),B=t("./node_modules/graphql/validation/rules/ScalarLeafsRule.mjs"),Y=t("./node_modules/graphql/validation/rules/SingleFieldSubscriptionsRule.mjs"),J=t("./node_modules/graphql/validation/rules/UniqueArgumentNamesRule.mjs"),X=t("./node_modules/graphql/validation/rules/UniqueDirectivesPerLocationRule.mjs"),z=t("./node_modules/graphql/validation/rules/UniqueFragmentNamesRule.mjs"),H=t("./node_modules/graphql/validation/rules/UniqueInputFieldNamesRule.mjs"),W=t("./node_modules/graphql/validation/rules/UniqueOperationNamesRule.mjs"),$=t("./node_modules/graphql/validation/rules/UniqueVariableNamesRule.mjs"),Z=t("./node_modules/graphql/validation/rules/ValuesOfCorrectTypeRule.mjs"),ee=t("./node_modules/graphql/validation/rules/VariablesAreInputTypesRule.mjs"),ne=t("./node_modules/graphql/validation/rules/VariablesInAllowedPositionRule.mjs"),te=t("./node_modules/graphql/validation/rules/LoneSchemaDefinitionRule.mjs"),re=t("./node_modules/graphql/validation/rules/UniqueOperationTypesRule.mjs"),ie=t("./node_modules/graphql/validation/rules/UniqueTypeNamesRule.mjs"),oe=t("./node_modules/graphql/validation/rules/UniqueEnumValueNamesRule.mjs"),ae=t("./node_modules/graphql/validation/rules/UniqueFieldDefinitionNamesRule.mjs"),se=t("./node_modules/graphql/validation/rules/UniqueDirectiveNamesRule.mjs"),ue=t("./node_modules/graphql/validation/rules/PossibleTypeExtensionsRule.mjs"),le=t("./node_modules/graphql/validation/rules/custom/NoDeprecatedCustomRule.mjs"),ce=t("./node_modules/graphql/validation/rules/custom/NoSchemaIntrospectionCustomRule.mjs"),de=t("./node_modules/graphql/error/GraphQLError.mjs"),pe=t("./node_modules/graphql/error/syntaxError.mjs"),fe=t("./node_modules/graphql/error/locatedError.mjs"),me=t("./node_modules/graphql/error/formatError.mjs"),he=t("./node_modules/graphql/utilities/getIntrospectionQuery.mjs"),ve=t("./node_modules/graphql/utilities/getOperationAST.mjs"),ye=t("./node_modules/graphql/utilities/getOperationRootType.mjs"),ge=t("./node_modules/graphql/utilities/introspectionFromSchema.mjs"),Te=t("./node_modules/graphql/utilities/buildClientSchema.mjs"),Ee=t("./node_modules/graphql/utilities/buildASTSchema.mjs"),_e=t("./node_modules/graphql/utilities/extendSchema.mjs"),Ne=t("./node_modules/graphql/utilities/lexicographicSortSchema.mjs"),be=t("./node_modules/graphql/utilities/printSchema.mjs"),je=t("./node_modules/graphql/utilities/typeFromAST.mjs"),Ie=t("./node_modules/graphql/utilities/valueFromAST.mjs"),Oe=t("./node_modules/graphql/utilities/valueFromASTUntyped.mjs"),Le=t("./node_modules/graphql/utilities/astFromValue.mjs"),Se=t("./node_modules/graphql/utilities/TypeInfo.mjs"),De=t("./node_modules/graphql/utilities/coerceInputValue.mjs"),Ae=t("./node_modules/graphql/utilities/concatAST.mjs"),we=t("./node_modules/graphql/utilities/separateOperations.mjs"),Re=t("./node_modules/graphql/utilities/stripIgnoredCharacters.mjs"),ke=t("./node_modules/graphql/utilities/typeComparators.mjs"),qe=t("./node_modules/graphql/utilities/assertValidName.mjs"),xe=t("./node_modules/graphql/utilities/findBreakingChanges.mjs"),Fe=t("./node_modules/graphql/utilities/findDeprecatedUsages.mjs")},"./node_modules/graphql/jsutils/Path.mjs":(e,n,t)=>{"use strict";function r(e,n,t){return{prev:e,key:n,typename:t}}function i(e){for(var n=[],t=e;t;)n.push(t.key),t=t.prev;return n.reverse()}t.r(n),t.d(n,{addPath:()=>r,pathToArray:()=>i})},"./node_modules/graphql/jsutils/defineInspect.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>o});var r=t("./node_modules/graphql/jsutils/invariant.mjs"),i=t("./node_modules/graphql/jsutils/nodejsCustomInspectSymbol.mjs");function o(e){var n=e.prototype.toJSON;"function"==typeof n||(0,r.default)(0),e.prototype.inspect=n,i.default&&(e.prototype[i.default]=n)}},"./node_modules/graphql/jsutils/devAssert.mjs":(e,n,t)=>{"use strict";function r(e,n){if(!Boolean(e))throw new Error(n)}t.r(n),t.d(n,{default:()=>r})},"./node_modules/graphql/jsutils/didYouMean.mjs":(e,n,t)=>{"use strict";function r(e,n){var t="string"==typeof e?[e,n]:[void 0,e],r=t[0],i=" Did you mean ";r&&(i+=r+" ");var o=t[1].map((function(e){return'"'.concat(e,'"')}));switch(o.length){case 0:return"";case 1:return i+o[0]+"?";case 2:return i+o[0]+" or "+o[1]+"?"}var a=o.slice(0,5),s=a.pop();return i+a.join(", ")+", or "+s+"?"}t.r(n),t.d(n,{default:()=>r})},"./node_modules/graphql/jsutils/identityFunc.mjs":(e,n,t)=>{"use strict";function r(e){return e}t.r(n),t.d(n,{default:()=>r})},"./node_modules/graphql/jsutils/inspect.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>o});var r=t("./node_modules/graphql/jsutils/nodejsCustomInspectSymbol.mjs");function i(e){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}function o(e){return a(e,[])}function a(e,n){switch(i(e)){case"string":return JSON.stringify(e);case"function":return e.name?"[function ".concat(e.name,"]"):"[function]";case"object":return null===e?"null":function(e,n){if(-1!==n.indexOf(e))return"[Circular]";var t=[].concat(n,[e]),i=function(e){var n=e[String(r.default)];return"function"==typeof n?n:"function"==typeof e.inspect?e.inspect:void 0}(e);if(void 0!==i){var o=i.call(e);if(o!==e)return"string"==typeof o?o:a(o,t)}else if(Array.isArray(e))return function(e,n){if(0===e.length)return"[]";if(n.length>2)return"[Array]";for(var t=Math.min(10,e.length),r=e.length-t,i=[],o=0;o<t;++o)i.push(a(e[o],n));return 1===r?i.push("... 1 more item"):r>1&&i.push("... ".concat(r," more items")),"["+i.join(", ")+"]"}(e,t);return function(e,n){var t=Object.keys(e);return 0===t.length?"{}":n.length>2?"["+function(e){var n=Object.prototype.toString.call(e).replace(/^\[object /,"").replace(/]$/,"");if("Object"===n&&"function"==typeof e.constructor){var t=e.constructor.name;if("string"==typeof t&&""!==t)return t}return n}(e)+"]":"{ "+t.map((function(t){return t+": "+a(e[t],n)})).join(", ")+" }"}(e,t)}(e,n);default:return String(e)}}},"./node_modules/graphql/jsutils/instanceOf.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>o});var r=t("./node_modules/graphql/jsutils/inspect.mjs");function i(e){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}const o=function(e,n){if(e instanceof n)return!0;if("object"===i(e)&&null!==e){var t,o=n.prototype[Symbol.toStringTag];if(o===(Symbol.toStringTag in e?e[Symbol.toStringTag]:null===(t=e.constructor)||void 0===t?void 0:t.name)){var a=(0,r.default)(e);throw new Error("Cannot use ".concat(o,' "').concat(a,'" from another module or realm.\n\nEnsure that there is only one instance of "graphql" in the node_modules\ndirectory. If different versions of "graphql" are the dependencies of other\nrelied on modules, use "resolutions" to ensure only one version is installed.\n\nhttps://yarnpkg.com/en/docs/selective-version-resolutions\n\nDuplicate "graphql" modules cannot be used at the same time since different\nversions may have different capabilities and behavior. The data from one\nversion used in the function from another could produce confusing and\nspurious results.'))}}return!1}},"./node_modules/graphql/jsutils/invariant.mjs":(e,n,t)=>{"use strict";function r(e,n){if(!Boolean(e))throw new Error(null!=n?n:"Unexpected invariant triggered.")}t.r(n),t.d(n,{default:()=>r})},"./node_modules/graphql/jsutils/isAsyncIterable.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>i});var r=t("./node_modules/graphql/polyfills/symbols.mjs");function i(e){return"function"==typeof(null==e?void 0:e[r.SYMBOL_ASYNC_ITERATOR])}},"./node_modules/graphql/jsutils/isObjectLike.mjs":(e,n,t)=>{"use strict";function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}function i(e){return"object"==r(e)&&null!==e}t.r(n),t.d(n,{default:()=>i})},"./node_modules/graphql/jsutils/isPromise.mjs":(e,n,t)=>{"use strict";function r(e){return"function"==typeof(null==e?void 0:e.then)}t.r(n),t.d(n,{default:()=>r})},"./node_modules/graphql/jsutils/keyMap.mjs":(e,n,t)=>{"use strict";function r(e,n){return e.reduce((function(e,t){return e[n(t)]=t,e}),Object.create(null))}t.r(n),t.d(n,{default:()=>r})},"./node_modules/graphql/jsutils/keyValMap.mjs":(e,n,t)=>{"use strict";function r(e,n,t){return e.reduce((function(e,r){return e[n(r)]=t(r),e}),Object.create(null))}t.r(n),t.d(n,{default:()=>r})},"./node_modules/graphql/jsutils/mapValue.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>i});var r=t("./node_modules/graphql/polyfills/objectEntries.mjs");function i(e,n){for(var t=Object.create(null),i=0,o=(0,r.default)(e);i<o.length;i++){var a=o[i],s=a[0],u=a[1];t[s]=n(u,s)}return t}},"./node_modules/graphql/jsutils/memoize3.mjs":(e,n,t)=>{"use strict";function r(e){var n;return function(t,r,i){n||(n=new WeakMap);var o,a=n.get(t);if(a){if(o=a.get(r)){var s=o.get(i);if(void 0!==s)return s}}else a=new WeakMap,n.set(t,a);o||(o=new WeakMap,a.set(r,o));var u=e(t,r,i);return o.set(i,u),u}}t.r(n),t.d(n,{default:()=>r})},"./node_modules/graphql/jsutils/naturalCompare.mjs":(e,n,t)=>{"use strict";function r(e,n){for(var t=0,r=0;t<e.length&&r<n.length;){var a=e.charCodeAt(t),s=n.charCodeAt(r);if(o(a)&&o(s)){var u=0;do{++t,u=10*u+a-i,a=e.charCodeAt(t)}while(o(a)&&u>0);var l=0;do{++r,l=10*l+s-i,s=n.charCodeAt(r)}while(o(s)&&l>0);if(u<l)return-1;if(u>l)return 1}else{if(a<s)return-1;if(a>s)return 1;++t,++r}}return e.length-n.length}t.r(n),t.d(n,{default:()=>r});var i=48;function o(e){return!isNaN(e)&&i<=e&&e<=57}},"./node_modules/graphql/jsutils/nodejsCustomInspectSymbol.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>r});const r="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):void 0},"./node_modules/graphql/jsutils/printPathArray.mjs":(e,n,t)=>{"use strict";function r(e){return e.map((function(e){return"number"==typeof e?"["+e.toString()+"]":"."+e})).join("")}t.r(n),t.d(n,{default:()=>r})},"./node_modules/graphql/jsutils/promiseForObject.mjs":(e,n,t)=>{"use strict";function r(e){var n=Object.keys(e),t=n.map((function(n){return e[n]}));return Promise.all(t).then((function(e){return e.reduce((function(e,t,r){return e[n[r]]=t,e}),Object.create(null))}))}t.r(n),t.d(n,{default:()=>r})},"./node_modules/graphql/jsutils/promiseReduce.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>i});var r=t("./node_modules/graphql/jsutils/isPromise.mjs");function i(e,n,t){return e.reduce((function(e,t){return(0,r.default)(e)?e.then((function(e){return n(e,t)})):n(e,t)}),t)}},"./node_modules/graphql/jsutils/safeArrayFrom.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>o});var r=t("./node_modules/graphql/polyfills/symbols.mjs");function i(e){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}function o(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:function(e){return e};if(null==e||"object"!==i(e))return null;if(Array.isArray(e))return e.map(n);var t=e[r.SYMBOL_ITERATOR];if("function"==typeof t){for(var o,a=t.call(e),s=[],u=0;!(o=a.next()).done;++u)s.push(n(o.value,u));return s}var l=e.length;if("number"==typeof l&&l>=0&&l%1==0){for(var c=[],d=0;d<l;++d){if(!Object.prototype.hasOwnProperty.call(e,d))return null;c.push(n(e[String(d)],d))}return c}return null}},"./node_modules/graphql/jsutils/suggestionList.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>i});var r=t("./node_modules/graphql/jsutils/naturalCompare.mjs");function i(e,n){for(var t=Object.create(null),i=new o(e),a=Math.floor(.4*e.length)+1,s=0;s<n.length;s++){var u=n[s],l=i.measure(u,a);void 0!==l&&(t[u]=l)}return Object.keys(t).sort((function(e,n){var i=t[e]-t[n];return 0!==i?i:(0,r.default)(e,n)}))}var o=function(){function e(e){this._input=e,this._inputLowerCase=e.toLowerCase(),this._inputArray=a(this._inputLowerCase),this._rows=[new Array(e.length+1).fill(0),new Array(e.length+1).fill(0),new Array(e.length+1).fill(0)]}return e.prototype.measure=function(e,n){if(this._input===e)return 0;var t=e.toLowerCase();if(this._inputLowerCase===t)return 1;var r=a(t),i=this._inputArray;if(r.length<i.length){var o=r;r=i,i=o}var s=r.length,u=i.length;if(!(s-u>n)){for(var l=this._rows,c=0;c<=u;c++)l[0][c]=c;for(var d=1;d<=s;d++){for(var p=l[(d-1)%3],f=l[d%3],m=f[0]=d,h=1;h<=u;h++){var v=r[d-1]===i[h-1]?0:1,y=Math.min(p[h]+1,f[h-1]+1,p[h-1]+v);if(d>1&&h>1&&r[d-1]===i[h-2]&&r[d-2]===i[h-1]){var g=l[(d-2)%3][h-2];y=Math.min(y,g+1)}y<m&&(m=y),f[h]=y}if(m>n)return}var T=l[s%3][u];return T<=n?T:void 0}},e}();function a(e){for(var n=e.length,t=new Array(n),r=0;r<n;++r)t[r]=e.charCodeAt(r);return t}},"./node_modules/graphql/jsutils/toObjMap.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>i});var r=t("./node_modules/graphql/polyfills/objectEntries.mjs");function i(e){if(null===Object.getPrototypeOf(e))return e;for(var n=Object.create(null),t=0,i=(0,r.default)(e);t<i.length;t++){var o=i[t],a=o[0],s=o[1];n[a]=s}return n}},"./node_modules/graphql/language/ast.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{Location:()=>i,Token:()=>o,isNode:()=>a});var r=t("./node_modules/graphql/jsutils/defineInspect.mjs"),i=function(){function e(e,n,t){this.start=e.start,this.end=n.end,this.startToken=e,this.endToken=n,this.source=t}return e.prototype.toJSON=function(){return{start:this.start,end:this.end}},e}();(0,r.default)(i);var o=function(){function e(e,n,t,r,i,o,a){this.kind=e,this.start=n,this.end=t,this.line=r,this.column=i,this.value=a,this.prev=o,this.next=null}return e.prototype.toJSON=function(){return{kind:this.kind,value:this.value,line:this.line,column:this.column}},e}();function a(e){return null!=e&&"string"==typeof e.kind}(0,r.default)(o)},"./node_modules/graphql/language/blockString.mjs":(e,n,t)=>{"use strict";function r(e){var n=e.split(/\r\n|[\n\r]/g),t=o(e);if(0!==t)for(var r=1;r<n.length;r++)n[r]=n[r].slice(t);for(var a=0;a<n.length&&i(n[a]);)++a;for(var s=n.length;s>a&&i(n[s-1]);)--s;return n.slice(a,s).join("\n")}function i(e){for(var n=0;n<e.length;++n)if(" "!==e[n]&&"\t"!==e[n])return!1;return!0}function o(e){for(var n,t=!0,r=!0,i=0,o=null,a=0;a<e.length;++a)switch(e.charCodeAt(a)){case 13:10===e.charCodeAt(a+1)&&++a;case 10:t=!1,r=!0,i=0;break;case 9:case 32:++i;break;default:r&&!t&&(null===o||i<o)&&(o=i),r=!1}return null!==(n=o)&&void 0!==n?n:0}function a(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",t=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=-1===e.indexOf("\n"),i=" "===e[0]||"\t"===e[0],o='"'===e[e.length-1],a="\\"===e[e.length-1],s=!r||o||a||t,u="";return!s||r&&i||(u+="\n"+n),u+=n?e.replace(/\n/g,"\n"+n):e,s&&(u+="\n"),'"""'+u.replace(/"""/g,'\\"""')+'"""'}t.r(n),t.d(n,{dedentBlockStringValue:()=>r,getBlockStringIndentation:()=>o,printBlockString:()=>a})},"./node_modules/graphql/language/directiveLocation.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{DirectiveLocation:()=>r});var r=Object.freeze({QUERY:"QUERY",MUTATION:"MUTATION",SUBSCRIPTION:"SUBSCRIPTION",FIELD:"FIELD",FRAGMENT_DEFINITION:"FRAGMENT_DEFINITION",FRAGMENT_SPREAD:"FRAGMENT_SPREAD",INLINE_FRAGMENT:"INLINE_FRAGMENT",VARIABLE_DEFINITION:"VARIABLE_DEFINITION",SCHEMA:"SCHEMA",SCALAR:"SCALAR",OBJECT:"OBJECT",FIELD_DEFINITION:"FIELD_DEFINITION",ARGUMENT_DEFINITION:"ARGUMENT_DEFINITION",INTERFACE:"INTERFACE",UNION:"UNION",ENUM:"ENUM",ENUM_VALUE:"ENUM_VALUE",INPUT_OBJECT:"INPUT_OBJECT",INPUT_FIELD_DEFINITION:"INPUT_FIELD_DEFINITION"})},"./node_modules/graphql/language/kinds.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{Kind:()=>r});var r=Object.freeze({NAME:"Name",DOCUMENT:"Document",OPERATION_DEFINITION:"OperationDefinition",VARIABLE_DEFINITION:"VariableDefinition",SELECTION_SET:"SelectionSet",FIELD:"Field",ARGUMENT:"Argument",FRAGMENT_SPREAD:"FragmentSpread",INLINE_FRAGMENT:"InlineFragment",FRAGMENT_DEFINITION:"FragmentDefinition",VARIABLE:"Variable",INT:"IntValue",FLOAT:"FloatValue",STRING:"StringValue",BOOLEAN:"BooleanValue",NULL:"NullValue",ENUM:"EnumValue",LIST:"ListValue",OBJECT:"ObjectValue",OBJECT_FIELD:"ObjectField",DIRECTIVE:"Directive",NAMED_TYPE:"NamedType",LIST_TYPE:"ListType",NON_NULL_TYPE:"NonNullType",SCHEMA_DEFINITION:"SchemaDefinition",OPERATION_TYPE_DEFINITION:"OperationTypeDefinition",SCALAR_TYPE_DEFINITION:"ScalarTypeDefinition",OBJECT_TYPE_DEFINITION:"ObjectTypeDefinition",FIELD_DEFINITION:"FieldDefinition",INPUT_VALUE_DEFINITION:"InputValueDefinition",INTERFACE_TYPE_DEFINITION:"InterfaceTypeDefinition",UNION_TYPE_DEFINITION:"UnionTypeDefinition",ENUM_TYPE_DEFINITION:"EnumTypeDefinition",ENUM_VALUE_DEFINITION:"EnumValueDefinition",INPUT_OBJECT_TYPE_DEFINITION:"InputObjectTypeDefinition",DIRECTIVE_DEFINITION:"DirectiveDefinition",SCHEMA_EXTENSION:"SchemaExtension",SCALAR_TYPE_EXTENSION:"ScalarTypeExtension",OBJECT_TYPE_EXTENSION:"ObjectTypeExtension",INTERFACE_TYPE_EXTENSION:"InterfaceTypeExtension",UNION_TYPE_EXTENSION:"UnionTypeExtension",ENUM_TYPE_EXTENSION:"EnumTypeExtension",INPUT_OBJECT_TYPE_EXTENSION:"InputObjectTypeExtension"})},"./node_modules/graphql/language/lexer.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{Lexer:()=>s,isPunctuatorTokenKind:()=>u});var r=t("./node_modules/graphql/error/syntaxError.mjs"),i=t("./node_modules/graphql/language/ast.mjs"),o=t("./node_modules/graphql/language/tokenKind.mjs"),a=t("./node_modules/graphql/language/blockString.mjs"),s=function(){function e(e){var n=new i.Token(o.TokenKind.SOF,0,0,0,0,null);this.source=e,this.lastToken=n,this.token=n,this.line=1,this.lineStart=0}var n=e.prototype;return n.advance=function(){return this.lastToken=this.token,this.token=this.lookahead()},n.lookahead=function(){var e=this.token;if(e.kind!==o.TokenKind.EOF)do{var n;e=null!==(n=e.next)&&void 0!==n?n:e.next=c(this,e)}while(e.kind===o.TokenKind.COMMENT);return e},e}();function u(e){return e===o.TokenKind.BANG||e===o.TokenKind.DOLLAR||e===o.TokenKind.AMP||e===o.TokenKind.PAREN_L||e===o.TokenKind.PAREN_R||e===o.TokenKind.SPREAD||e===o.TokenKind.COLON||e===o.TokenKind.EQUALS||e===o.TokenKind.AT||e===o.TokenKind.BRACKET_L||e===o.TokenKind.BRACKET_R||e===o.TokenKind.BRACE_L||e===o.TokenKind.PIPE||e===o.TokenKind.BRACE_R}function l(e){return isNaN(e)?o.TokenKind.EOF:e<127?JSON.stringify(String.fromCharCode(e)):'"\\u'.concat(("00"+e.toString(16).toUpperCase()).slice(-4),'"')}function c(e,n){for(var t=e.source,a=t.body,s=a.length,u=n.end;u<s;){var l=a.charCodeAt(u),c=e.line,m=1+u-e.lineStart;switch(l){case 65279:case 9:case 32:case 44:++u;continue;case 10:++u,++e.line,e.lineStart=u;continue;case 13:10===a.charCodeAt(u+1)?u+=2:++u,++e.line,e.lineStart=u;continue;case 33:return new i.Token(o.TokenKind.BANG,u,u+1,c,m,n);case 35:return p(t,u,c,m,n);case 36:return new i.Token(o.TokenKind.DOLLAR,u,u+1,c,m,n);case 38:return new i.Token(o.TokenKind.AMP,u,u+1,c,m,n);case 40:return new i.Token(o.TokenKind.PAREN_L,u,u+1,c,m,n);case 41:return new i.Token(o.TokenKind.PAREN_R,u,u+1,c,m,n);case 46:if(46===a.charCodeAt(u+1)&&46===a.charCodeAt(u+2))return new i.Token(o.TokenKind.SPREAD,u,u+3,c,m,n);break;case 58:return new i.Token(o.TokenKind.COLON,u,u+1,c,m,n);case 61:return new i.Token(o.TokenKind.EQUALS,u,u+1,c,m,n);case 64:return new i.Token(o.TokenKind.AT,u,u+1,c,m,n);case 91:return new i.Token(o.TokenKind.BRACKET_L,u,u+1,c,m,n);case 93:return new i.Token(o.TokenKind.BRACKET_R,u,u+1,c,m,n);case 123:return new i.Token(o.TokenKind.BRACE_L,u,u+1,c,m,n);case 124:return new i.Token(o.TokenKind.PIPE,u,u+1,c,m,n);case 125:return new i.Token(o.TokenKind.BRACE_R,u,u+1,c,m,n);case 34:return 34===a.charCodeAt(u+1)&&34===a.charCodeAt(u+2)?v(t,u,c,m,n,e):h(t,u,c,m,n);case 45:case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:return f(t,u,l,c,m,n);case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:return g(t,u,c,m,n)}throw(0,r.syntaxError)(t,u,d(l))}var y=e.line,T=1+u-e.lineStart;return new i.Token(o.TokenKind.EOF,s,s,y,T,n)}function d(e){return e<32&&9!==e&&10!==e&&13!==e?"Cannot contain the invalid character ".concat(l(e),"."):39===e?"Unexpected single quote character ('), did you mean to use a double quote (\")?":"Cannot parse the unexpected character ".concat(l(e),".")}function p(e,n,t,r,a){var s,u=e.body,l=n;do{s=u.charCodeAt(++l)}while(!isNaN(s)&&(s>31||9===s));return new i.Token(o.TokenKind.COMMENT,n,l,t,r,a,u.slice(n+1,l))}function f(e,n,t,a,s,u){var c=e.body,d=t,p=n,f=!1;if(45===d&&(d=c.charCodeAt(++p)),48===d){if((d=c.charCodeAt(++p))>=48&&d<=57)throw(0,r.syntaxError)(e,p,"Invalid number, unexpected digit after 0: ".concat(l(d),"."))}else p=m(e,p,d),d=c.charCodeAt(p);if(46===d&&(f=!0,d=c.charCodeAt(++p),p=m(e,p,d),d=c.charCodeAt(p)),69!==d&&101!==d||(f=!0,43!==(d=c.charCodeAt(++p))&&45!==d||(d=c.charCodeAt(++p)),p=m(e,p,d),d=c.charCodeAt(p)),46===d||function(e){return 95===e||e>=65&&e<=90||e>=97&&e<=122}(d))throw(0,r.syntaxError)(e,p,"Invalid number, expected digit but got: ".concat(l(d),"."));return new i.Token(f?o.TokenKind.FLOAT:o.TokenKind.INT,n,p,a,s,u,c.slice(n,p))}function m(e,n,t){var i=e.body,o=n,a=t;if(a>=48&&a<=57){do{a=i.charCodeAt(++o)}while(a>=48&&a<=57);return o}throw(0,r.syntaxError)(e,o,"Invalid number, expected digit but got: ".concat(l(a),"."))}function h(e,n,t,a,s){for(var u,c,d,p,f=e.body,m=n+1,h=m,v=0,g="";m<f.length&&!isNaN(v=f.charCodeAt(m))&&10!==v&&13!==v;){if(34===v)return g+=f.slice(h,m),new i.Token(o.TokenKind.STRING,n,m+1,t,a,s,g);if(v<32&&9!==v)throw(0,r.syntaxError)(e,m,"Invalid character within String: ".concat(l(v),"."));if(++m,92===v){switch(g+=f.slice(h,m-1),v=f.charCodeAt(m)){case 34:g+='"';break;case 47:g+="/";break;case 92:g+="\\";break;case 98:g+="\b";break;case 102:g+="\f";break;case 110:g+="\n";break;case 114:g+="\r";break;case 116:g+="\t";break;case 117:var T=(u=f.charCodeAt(m+1),c=f.charCodeAt(m+2),d=f.charCodeAt(m+3),p=f.charCodeAt(m+4),y(u)<<12|y(c)<<8|y(d)<<4|y(p));if(T<0){var E=f.slice(m+1,m+5);throw(0,r.syntaxError)(e,m,"Invalid character escape sequence: \\u".concat(E,"."))}g+=String.fromCharCode(T),m+=4;break;default:throw(0,r.syntaxError)(e,m,"Invalid character escape sequence: \\".concat(String.fromCharCode(v),"."))}h=++m}}throw(0,r.syntaxError)(e,m,"Unterminated string.")}function v(e,n,t,s,u,c){for(var d=e.body,p=n+3,f=p,m=0,h="";p<d.length&&!isNaN(m=d.charCodeAt(p));){if(34===m&&34===d.charCodeAt(p+1)&&34===d.charCodeAt(p+2))return h+=d.slice(f,p),new i.Token(o.TokenKind.BLOCK_STRING,n,p+3,t,s,u,(0,a.dedentBlockStringValue)(h));if(m<32&&9!==m&&10!==m&&13!==m)throw(0,r.syntaxError)(e,p,"Invalid character within String: ".concat(l(m),"."));10===m?(++p,++c.line,c.lineStart=p):13===m?(10===d.charCodeAt(p+1)?p+=2:++p,++c.line,c.lineStart=p):92===m&&34===d.charCodeAt(p+1)&&34===d.charCodeAt(p+2)&&34===d.charCodeAt(p+3)?(h+=d.slice(f,p)+'"""',f=p+=4):++p}throw(0,r.syntaxError)(e,p,"Unterminated string.")}function y(e){return e>=48&&e<=57?e-48:e>=65&&e<=70?e-55:e>=97&&e<=102?e-87:-1}function g(e,n,t,r,a){for(var s=e.body,u=s.length,l=n+1,c=0;l!==u&&!isNaN(c=s.charCodeAt(l))&&(95===c||c>=48&&c<=57||c>=65&&c<=90||c>=97&&c<=122);)++l;return new i.Token(o.TokenKind.NAME,n,l,t,r,a,s.slice(n,l))}},"./node_modules/graphql/language/location.mjs":(e,n,t)=>{"use strict";function r(e,n){for(var t,r=/\r\n|[\n\r]/g,i=1,o=n+1;(t=r.exec(e.body))&&t.index<n;)i+=1,o=n+1-(t.index+t[0].length);return{line:i,column:o}}t.r(n),t.d(n,{getLocation:()=>r})},"./node_modules/graphql/language/parser.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{parse:()=>c,parseValue:()=>d,parseType:()=>p,Parser:()=>f});var r=t("./node_modules/graphql/error/syntaxError.mjs"),i=t("./node_modules/graphql/language/kinds.mjs"),o=t("./node_modules/graphql/language/ast.mjs"),a=t("./node_modules/graphql/language/tokenKind.mjs"),s=t("./node_modules/graphql/language/source.mjs"),u=t("./node_modules/graphql/language/directiveLocation.mjs"),l=t("./node_modules/graphql/language/lexer.mjs");function c(e,n){return new f(e,n).parseDocument()}function d(e,n){var t=new f(e,n);t.expectToken(a.TokenKind.SOF);var r=t.parseValueLiteral(!1);return t.expectToken(a.TokenKind.EOF),r}function p(e,n){var t=new f(e,n);t.expectToken(a.TokenKind.SOF);var r=t.parseTypeReference();return t.expectToken(a.TokenKind.EOF),r}var f=function(){function e(e,n){var t=(0,s.isSource)(e)?e:new s.Source(e);this._lexer=new l.Lexer(t),this._options=n}var n=e.prototype;return n.parseName=function(){var e=this.expectToken(a.TokenKind.NAME);return{kind:i.Kind.NAME,value:e.value,loc:this.loc(e)}},n.parseDocument=function(){var e=this._lexer.token;return{kind:i.Kind.DOCUMENT,definitions:this.many(a.TokenKind.SOF,this.parseDefinition,a.TokenKind.EOF),loc:this.loc(e)}},n.parseDefinition=function(){if(this.peek(a.TokenKind.NAME))switch(this._lexer.token.value){case"query":case"mutation":case"subscription":return this.parseOperationDefinition();case"fragment":return this.parseFragmentDefinition();case"schema":case"scalar":case"type":case"interface":case"union":case"enum":case"input":case"directive":return this.parseTypeSystemDefinition();case"extend":return this.parseTypeSystemExtension()}else{if(this.peek(a.TokenKind.BRACE_L))return this.parseOperationDefinition();if(this.peekDescription())return this.parseTypeSystemDefinition()}throw this.unexpected()},n.parseOperationDefinition=function(){var e=this._lexer.token;if(this.peek(a.TokenKind.BRACE_L))return{kind:i.Kind.OPERATION_DEFINITION,operation:"query",name:void 0,variableDefinitions:[],directives:[],selectionSet:this.parseSelectionSet(),loc:this.loc(e)};var n,t=this.parseOperationType();return this.peek(a.TokenKind.NAME)&&(n=this.parseName()),{kind:i.Kind.OPERATION_DEFINITION,operation:t,name:n,variableDefinitions:this.parseVariableDefinitions(),directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet(),loc:this.loc(e)}},n.parseOperationType=function(){var e=this.expectToken(a.TokenKind.NAME);switch(e.value){case"query":return"query";case"mutation":return"mutation";case"subscription":return"subscription"}throw this.unexpected(e)},n.parseVariableDefinitions=function(){return this.optionalMany(a.TokenKind.PAREN_L,this.parseVariableDefinition,a.TokenKind.PAREN_R)},n.parseVariableDefinition=function(){var e=this._lexer.token;return{kind:i.Kind.VARIABLE_DEFINITION,variable:this.parseVariable(),type:(this.expectToken(a.TokenKind.COLON),this.parseTypeReference()),defaultValue:this.expectOptionalToken(a.TokenKind.EQUALS)?this.parseValueLiteral(!0):void 0,directives:this.parseDirectives(!0),loc:this.loc(e)}},n.parseVariable=function(){var e=this._lexer.token;return this.expectToken(a.TokenKind.DOLLAR),{kind:i.Kind.VARIABLE,name:this.parseName(),loc:this.loc(e)}},n.parseSelectionSet=function(){var e=this._lexer.token;return{kind:i.Kind.SELECTION_SET,selections:this.many(a.TokenKind.BRACE_L,this.parseSelection,a.TokenKind.BRACE_R),loc:this.loc(e)}},n.parseSelection=function(){return this.peek(a.TokenKind.SPREAD)?this.parseFragment():this.parseField()},n.parseField=function(){var e,n,t=this._lexer.token,r=this.parseName();return this.expectOptionalToken(a.TokenKind.COLON)?(e=r,n=this.parseName()):n=r,{kind:i.Kind.FIELD,alias:e,name:n,arguments:this.parseArguments(!1),directives:this.parseDirectives(!1),selectionSet:this.peek(a.TokenKind.BRACE_L)?this.parseSelectionSet():void 0,loc:this.loc(t)}},n.parseArguments=function(e){var n=e?this.parseConstArgument:this.parseArgument;return this.optionalMany(a.TokenKind.PAREN_L,n,a.TokenKind.PAREN_R)},n.parseArgument=function(){var e=this._lexer.token,n=this.parseName();return this.expectToken(a.TokenKind.COLON),{kind:i.Kind.ARGUMENT,name:n,value:this.parseValueLiteral(!1),loc:this.loc(e)}},n.parseConstArgument=function(){var e=this._lexer.token;return{kind:i.Kind.ARGUMENT,name:this.parseName(),value:(this.expectToken(a.TokenKind.COLON),this.parseValueLiteral(!0)),loc:this.loc(e)}},n.parseFragment=function(){var e=this._lexer.token;this.expectToken(a.TokenKind.SPREAD);var n=this.expectOptionalKeyword("on");return!n&&this.peek(a.TokenKind.NAME)?{kind:i.Kind.FRAGMENT_SPREAD,name:this.parseFragmentName(),directives:this.parseDirectives(!1),loc:this.loc(e)}:{kind:i.Kind.INLINE_FRAGMENT,typeCondition:n?this.parseNamedType():void 0,directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet(),loc:this.loc(e)}},n.parseFragmentDefinition=function(){var e,n=this._lexer.token;return this.expectKeyword("fragment"),!0===(null===(e=this._options)||void 0===e?void 0:e.experimentalFragmentVariables)?{kind:i.Kind.FRAGMENT_DEFINITION,name:this.parseFragmentName(),variableDefinitions:this.parseVariableDefinitions(),typeCondition:(this.expectKeyword("on"),this.parseNamedType()),directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet(),loc:this.loc(n)}:{kind:i.Kind.FRAGMENT_DEFINITION,name:this.parseFragmentName(),typeCondition:(this.expectKeyword("on"),this.parseNamedType()),directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet(),loc:this.loc(n)}},n.parseFragmentName=function(){if("on"===this._lexer.token.value)throw this.unexpected();return this.parseName()},n.parseValueLiteral=function(e){var n=this._lexer.token;switch(n.kind){case a.TokenKind.BRACKET_L:return this.parseList(e);case a.TokenKind.BRACE_L:return this.parseObject(e);case a.TokenKind.INT:return this._lexer.advance(),{kind:i.Kind.INT,value:n.value,loc:this.loc(n)};case a.TokenKind.FLOAT:return this._lexer.advance(),{kind:i.Kind.FLOAT,value:n.value,loc:this.loc(n)};case a.TokenKind.STRING:case a.TokenKind.BLOCK_STRING:return this.parseStringLiteral();case a.TokenKind.NAME:switch(this._lexer.advance(),n.value){case"true":return{kind:i.Kind.BOOLEAN,value:!0,loc:this.loc(n)};case"false":return{kind:i.Kind.BOOLEAN,value:!1,loc:this.loc(n)};case"null":return{kind:i.Kind.NULL,loc:this.loc(n)};default:return{kind:i.Kind.ENUM,value:n.value,loc:this.loc(n)}}case a.TokenKind.DOLLAR:if(!e)return this.parseVariable()}throw this.unexpected()},n.parseStringLiteral=function(){var e=this._lexer.token;return this._lexer.advance(),{kind:i.Kind.STRING,value:e.value,block:e.kind===a.TokenKind.BLOCK_STRING,loc:this.loc(e)}},n.parseList=function(e){var n=this,t=this._lexer.token;return{kind:i.Kind.LIST,values:this.any(a.TokenKind.BRACKET_L,(function(){return n.parseValueLiteral(e)}),a.TokenKind.BRACKET_R),loc:this.loc(t)}},n.parseObject=function(e){var n=this,t=this._lexer.token;return{kind:i.Kind.OBJECT,fields:this.any(a.TokenKind.BRACE_L,(function(){return n.parseObjectField(e)}),a.TokenKind.BRACE_R),loc:this.loc(t)}},n.parseObjectField=function(e){var n=this._lexer.token,t=this.parseName();return this.expectToken(a.TokenKind.COLON),{kind:i.Kind.OBJECT_FIELD,name:t,value:this.parseValueLiteral(e),loc:this.loc(n)}},n.parseDirectives=function(e){for(var n=[];this.peek(a.TokenKind.AT);)n.push(this.parseDirective(e));return n},n.parseDirective=function(e){var n=this._lexer.token;return this.expectToken(a.TokenKind.AT),{kind:i.Kind.DIRECTIVE,name:this.parseName(),arguments:this.parseArguments(e),loc:this.loc(n)}},n.parseTypeReference=function(){var e,n=this._lexer.token;return this.expectOptionalToken(a.TokenKind.BRACKET_L)?(e=this.parseTypeReference(),this.expectToken(a.TokenKind.BRACKET_R),e={kind:i.Kind.LIST_TYPE,type:e,loc:this.loc(n)}):e=this.parseNamedType(),this.expectOptionalToken(a.TokenKind.BANG)?{kind:i.Kind.NON_NULL_TYPE,type:e,loc:this.loc(n)}:e},n.parseNamedType=function(){var e=this._lexer.token;return{kind:i.Kind.NAMED_TYPE,name:this.parseName(),loc:this.loc(e)}},n.parseTypeSystemDefinition=function(){var e=this.peekDescription()?this._lexer.lookahead():this._lexer.token;if(e.kind===a.TokenKind.NAME)switch(e.value){case"schema":return this.parseSchemaDefinition();case"scalar":return this.parseScalarTypeDefinition();case"type":return this.parseObjectTypeDefinition();case"interface":return this.parseInterfaceTypeDefinition();case"union":return this.parseUnionTypeDefinition();case"enum":return this.parseEnumTypeDefinition();case"input":return this.parseInputObjectTypeDefinition();case"directive":return this.parseDirectiveDefinition()}throw this.unexpected(e)},n.peekDescription=function(){return this.peek(a.TokenKind.STRING)||this.peek(a.TokenKind.BLOCK_STRING)},n.parseDescription=function(){if(this.peekDescription())return this.parseStringLiteral()},n.parseSchemaDefinition=function(){var e=this._lexer.token,n=this.parseDescription();this.expectKeyword("schema");var t=this.parseDirectives(!0),r=this.many(a.TokenKind.BRACE_L,this.parseOperationTypeDefinition,a.TokenKind.BRACE_R);return{kind:i.Kind.SCHEMA_DEFINITION,description:n,directives:t,operationTypes:r,loc:this.loc(e)}},n.parseOperationTypeDefinition=function(){var e=this._lexer.token,n=this.parseOperationType();this.expectToken(a.TokenKind.COLON);var t=this.parseNamedType();return{kind:i.Kind.OPERATION_TYPE_DEFINITION,operation:n,type:t,loc:this.loc(e)}},n.parseScalarTypeDefinition=function(){var e=this._lexer.token,n=this.parseDescription();this.expectKeyword("scalar");var t=this.parseName(),r=this.parseDirectives(!0);return{kind:i.Kind.SCALAR_TYPE_DEFINITION,description:n,name:t,directives:r,loc:this.loc(e)}},n.parseObjectTypeDefinition=function(){var e=this._lexer.token,n=this.parseDescription();this.expectKeyword("type");var t=this.parseName(),r=this.parseImplementsInterfaces(),o=this.parseDirectives(!0),a=this.parseFieldsDefinition();return{kind:i.Kind.OBJECT_TYPE_DEFINITION,description:n,name:t,interfaces:r,directives:o,fields:a,loc:this.loc(e)}},n.parseImplementsInterfaces=function(){var e;if(!this.expectOptionalKeyword("implements"))return[];if(!0===(null===(e=this._options)||void 0===e?void 0:e.allowLegacySDLImplementsInterfaces)){var n=[];this.expectOptionalToken(a.TokenKind.AMP);do{n.push(this.parseNamedType())}while(this.expectOptionalToken(a.TokenKind.AMP)||this.peek(a.TokenKind.NAME));return n}return this.delimitedMany(a.TokenKind.AMP,this.parseNamedType)},n.parseFieldsDefinition=function(){var e;return!0===(null===(e=this._options)||void 0===e?void 0:e.allowLegacySDLEmptyFields)&&this.peek(a.TokenKind.BRACE_L)&&this._lexer.lookahead().kind===a.TokenKind.BRACE_R?(this._lexer.advance(),this._lexer.advance(),[]):this.optionalMany(a.TokenKind.BRACE_L,this.parseFieldDefinition,a.TokenKind.BRACE_R)},n.parseFieldDefinition=function(){var e=this._lexer.token,n=this.parseDescription(),t=this.parseName(),r=this.parseArgumentDefs();this.expectToken(a.TokenKind.COLON);var o=this.parseTypeReference(),s=this.parseDirectives(!0);return{kind:i.Kind.FIELD_DEFINITION,description:n,name:t,arguments:r,type:o,directives:s,loc:this.loc(e)}},n.parseArgumentDefs=function(){return this.optionalMany(a.TokenKind.PAREN_L,this.parseInputValueDef,a.TokenKind.PAREN_R)},n.parseInputValueDef=function(){var e=this._lexer.token,n=this.parseDescription(),t=this.parseName();this.expectToken(a.TokenKind.COLON);var r,o=this.parseTypeReference();this.expectOptionalToken(a.TokenKind.EQUALS)&&(r=this.parseValueLiteral(!0));var s=this.parseDirectives(!0);return{kind:i.Kind.INPUT_VALUE_DEFINITION,description:n,name:t,type:o,defaultValue:r,directives:s,loc:this.loc(e)}},n.parseInterfaceTypeDefinition=function(){var e=this._lexer.token,n=this.parseDescription();this.expectKeyword("interface");var t=this.parseName(),r=this.parseImplementsInterfaces(),o=this.parseDirectives(!0),a=this.parseFieldsDefinition();return{kind:i.Kind.INTERFACE_TYPE_DEFINITION,description:n,name:t,interfaces:r,directives:o,fields:a,loc:this.loc(e)}},n.parseUnionTypeDefinition=function(){var e=this._lexer.token,n=this.parseDescription();this.expectKeyword("union");var t=this.parseName(),r=this.parseDirectives(!0),o=this.parseUnionMemberTypes();return{kind:i.Kind.UNION_TYPE_DEFINITION,description:n,name:t,directives:r,types:o,loc:this.loc(e)}},n.parseUnionMemberTypes=function(){return this.expectOptionalToken(a.TokenKind.EQUALS)?this.delimitedMany(a.TokenKind.PIPE,this.parseNamedType):[]},n.parseEnumTypeDefinition=function(){var e=this._lexer.token,n=this.parseDescription();this.expectKeyword("enum");var t=this.parseName(),r=this.parseDirectives(!0),o=this.parseEnumValuesDefinition();return{kind:i.Kind.ENUM_TYPE_DEFINITION,description:n,name:t,directives:r,values:o,loc:this.loc(e)}},n.parseEnumValuesDefinition=function(){return this.optionalMany(a.TokenKind.BRACE_L,this.parseEnumValueDefinition,a.TokenKind.BRACE_R)},n.parseEnumValueDefinition=function(){var e=this._lexer.token,n=this.parseDescription(),t=this.parseName(),r=this.parseDirectives(!0);return{kind:i.Kind.ENUM_VALUE_DEFINITION,description:n,name:t,directives:r,loc:this.loc(e)}},n.parseInputObjectTypeDefinition=function(){var e=this._lexer.token,n=this.parseDescription();this.expectKeyword("input");var t=this.parseName(),r=this.parseDirectives(!0),o=this.parseInputFieldsDefinition();return{kind:i.Kind.INPUT_OBJECT_TYPE_DEFINITION,description:n,name:t,directives:r,fields:o,loc:this.loc(e)}},n.parseInputFieldsDefinition=function(){return this.optionalMany(a.TokenKind.BRACE_L,this.parseInputValueDef,a.TokenKind.BRACE_R)},n.parseTypeSystemExtension=function(){var e=this._lexer.lookahead();if(e.kind===a.TokenKind.NAME)switch(e.value){case"schema":return this.parseSchemaExtension();case"scalar":return this.parseScalarTypeExtension();case"type":return this.parseObjectTypeExtension();case"interface":return this.parseInterfaceTypeExtension();case"union":return this.parseUnionTypeExtension();case"enum":return this.parseEnumTypeExtension();case"input":return this.parseInputObjectTypeExtension()}throw this.unexpected(e)},n.parseSchemaExtension=function(){var e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("schema");var n=this.parseDirectives(!0),t=this.optionalMany(a.TokenKind.BRACE_L,this.parseOperationTypeDefinition,a.TokenKind.BRACE_R);if(0===n.length&&0===t.length)throw this.unexpected();return{kind:i.Kind.SCHEMA_EXTENSION,directives:n,operationTypes:t,loc:this.loc(e)}},n.parseScalarTypeExtension=function(){var e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("scalar");var n=this.parseName(),t=this.parseDirectives(!0);if(0===t.length)throw this.unexpected();return{kind:i.Kind.SCALAR_TYPE_EXTENSION,name:n,directives:t,loc:this.loc(e)}},n.parseObjectTypeExtension=function(){var e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("type");var n=this.parseName(),t=this.parseImplementsInterfaces(),r=this.parseDirectives(!0),o=this.parseFieldsDefinition();if(0===t.length&&0===r.length&&0===o.length)throw this.unexpected();return{kind:i.Kind.OBJECT_TYPE_EXTENSION,name:n,interfaces:t,directives:r,fields:o,loc:this.loc(e)}},n.parseInterfaceTypeExtension=function(){var e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("interface");var n=this.parseName(),t=this.parseImplementsInterfaces(),r=this.parseDirectives(!0),o=this.parseFieldsDefinition();if(0===t.length&&0===r.length&&0===o.length)throw this.unexpected();return{kind:i.Kind.INTERFACE_TYPE_EXTENSION,name:n,interfaces:t,directives:r,fields:o,loc:this.loc(e)}},n.parseUnionTypeExtension=function(){var e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("union");var n=this.parseName(),t=this.parseDirectives(!0),r=this.parseUnionMemberTypes();if(0===t.length&&0===r.length)throw this.unexpected();return{kind:i.Kind.UNION_TYPE_EXTENSION,name:n,directives:t,types:r,loc:this.loc(e)}},n.parseEnumTypeExtension=function(){var e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("enum");var n=this.parseName(),t=this.parseDirectives(!0),r=this.parseEnumValuesDefinition();if(0===t.length&&0===r.length)throw this.unexpected();return{kind:i.Kind.ENUM_TYPE_EXTENSION,name:n,directives:t,values:r,loc:this.loc(e)}},n.parseInputObjectTypeExtension=function(){var e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("input");var n=this.parseName(),t=this.parseDirectives(!0),r=this.parseInputFieldsDefinition();if(0===t.length&&0===r.length)throw this.unexpected();return{kind:i.Kind.INPUT_OBJECT_TYPE_EXTENSION,name:n,directives:t,fields:r,loc:this.loc(e)}},n.parseDirectiveDefinition=function(){var e=this._lexer.token,n=this.parseDescription();this.expectKeyword("directive"),this.expectToken(a.TokenKind.AT);var t=this.parseName(),r=this.parseArgumentDefs(),o=this.expectOptionalKeyword("repeatable");this.expectKeyword("on");var s=this.parseDirectiveLocations();return{kind:i.Kind.DIRECTIVE_DEFINITION,description:n,name:t,arguments:r,repeatable:o,locations:s,loc:this.loc(e)}},n.parseDirectiveLocations=function(){return this.delimitedMany(a.TokenKind.PIPE,this.parseDirectiveLocation)},n.parseDirectiveLocation=function(){var e=this._lexer.token,n=this.parseName();if(void 0!==u.DirectiveLocation[n.value])return n;throw this.unexpected(e)},n.loc=function(e){var n;if(!0!==(null===(n=this._options)||void 0===n?void 0:n.noLocation))return new o.Location(e,this._lexer.lastToken,this._lexer.source)},n.peek=function(e){return this._lexer.token.kind===e},n.expectToken=function(e){var n=this._lexer.token;if(n.kind===e)return this._lexer.advance(),n;throw(0,r.syntaxError)(this._lexer.source,n.start,"Expected ".concat(h(e),", found ").concat(m(n),"."))},n.expectOptionalToken=function(e){var n=this._lexer.token;if(n.kind===e)return this._lexer.advance(),n},n.expectKeyword=function(e){var n=this._lexer.token;if(n.kind!==a.TokenKind.NAME||n.value!==e)throw(0,r.syntaxError)(this._lexer.source,n.start,'Expected "'.concat(e,'", found ').concat(m(n),"."));this._lexer.advance()},n.expectOptionalKeyword=function(e){var n=this._lexer.token;return n.kind===a.TokenKind.NAME&&n.value===e&&(this._lexer.advance(),!0)},n.unexpected=function(e){var n=null!=e?e:this._lexer.token;return(0,r.syntaxError)(this._lexer.source,n.start,"Unexpected ".concat(m(n),"."))},n.any=function(e,n,t){this.expectToken(e);for(var r=[];!this.expectOptionalToken(t);)r.push(n.call(this));return r},n.optionalMany=function(e,n,t){if(this.expectOptionalToken(e)){var r=[];do{r.push(n.call(this))}while(!this.expectOptionalToken(t));return r}return[]},n.many=function(e,n,t){this.expectToken(e);var r=[];do{r.push(n.call(this))}while(!this.expectOptionalToken(t));return r},n.delimitedMany=function(e,n){this.expectOptionalToken(e);var t=[];do{t.push(n.call(this))}while(this.expectOptionalToken(e));return t},e}();function m(e){var n=e.value;return h(e.kind)+(null!=n?' "'.concat(n,'"'):"")}function h(e){return(0,l.isPunctuatorTokenKind)(e)?'"'.concat(e,'"'):e}},"./node_modules/graphql/language/predicates.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{isDefinitionNode:()=>i,isExecutableDefinitionNode:()=>o,isSelectionNode:()=>a,isValueNode:()=>s,isTypeNode:()=>u,isTypeSystemDefinitionNode:()=>l,isTypeDefinitionNode:()=>c,isTypeSystemExtensionNode:()=>d,isTypeExtensionNode:()=>p});var r=t("./node_modules/graphql/language/kinds.mjs");function i(e){return o(e)||l(e)||d(e)}function o(e){return e.kind===r.Kind.OPERATION_DEFINITION||e.kind===r.Kind.FRAGMENT_DEFINITION}function a(e){return e.kind===r.Kind.FIELD||e.kind===r.Kind.FRAGMENT_SPREAD||e.kind===r.Kind.INLINE_FRAGMENT}function s(e){return e.kind===r.Kind.VARIABLE||e.kind===r.Kind.INT||e.kind===r.Kind.FLOAT||e.kind===r.Kind.STRING||e.kind===r.Kind.BOOLEAN||e.kind===r.Kind.NULL||e.kind===r.Kind.ENUM||e.kind===r.Kind.LIST||e.kind===r.Kind.OBJECT}function u(e){return e.kind===r.Kind.NAMED_TYPE||e.kind===r.Kind.LIST_TYPE||e.kind===r.Kind.NON_NULL_TYPE}function l(e){return e.kind===r.Kind.SCHEMA_DEFINITION||c(e)||e.kind===r.Kind.DIRECTIVE_DEFINITION}function c(e){return e.kind===r.Kind.SCALAR_TYPE_DEFINITION||e.kind===r.Kind.OBJECT_TYPE_DEFINITION||e.kind===r.Kind.INTERFACE_TYPE_DEFINITION||e.kind===r.Kind.UNION_TYPE_DEFINITION||e.kind===r.Kind.ENUM_TYPE_DEFINITION||e.kind===r.Kind.INPUT_OBJECT_TYPE_DEFINITION}function d(e){return e.kind===r.Kind.SCHEMA_EXTENSION||p(e)}function p(e){return e.kind===r.Kind.SCALAR_TYPE_EXTENSION||e.kind===r.Kind.OBJECT_TYPE_EXTENSION||e.kind===r.Kind.INTERFACE_TYPE_EXTENSION||e.kind===r.Kind.UNION_TYPE_EXTENSION||e.kind===r.Kind.ENUM_TYPE_EXTENSION||e.kind===r.Kind.INPUT_OBJECT_TYPE_EXTENSION}},"./node_modules/graphql/language/printLocation.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{printLocation:()=>i,printSourceLocation:()=>o});var r=t("./node_modules/graphql/language/location.mjs");function i(e){return o(e.source,(0,r.getLocation)(e.source,e.start))}function o(e,n){var t=e.locationOffset.column-1,r=s(t)+e.body,i=n.line-1,o=e.locationOffset.line-1,u=n.line+o,l=1===n.line?t:0,c=n.column+l,d="".concat(e.name,":").concat(u,":").concat(c,"\n"),p=r.split(/\r\n|[\n\r]/g),f=p[i];if(f.length>120){for(var m=Math.floor(c/80),h=c%80,v=[],y=0;y<f.length;y+=80)v.push(f.slice(y,y+80));return d+a([["".concat(u),v[0]]].concat(v.slice(1,m+1).map((function(e){return["",e]})),[[" ",s(h-1)+"^"],["",v[m+1]]]))}return d+a([["".concat(u-1),p[i-1]],["".concat(u),f],["",s(c-1)+"^"],["".concat(u+1),p[i+1]]])}function a(e){var n=e.filter((function(e){return e[0],void 0!==e[1]})),t=Math.max.apply(Math,n.map((function(e){return e[0].length})));return n.map((function(e){var n,r=e[0],i=e[1];return s(t-(n=r).length)+n+(i?" | "+i:" |")})).join("\n")}function s(e){return Array(e+1).join(" ")}},"./node_modules/graphql/language/printer.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{print:()=>o});var r=t("./node_modules/graphql/language/visitor.mjs"),i=t("./node_modules/graphql/language/blockString.mjs");function o(e){return(0,r.visit)(e,{leave:a})}var a={Name:function(e){return e.value},Variable:function(e){return"$"+e.name},Document:function(e){return u(e.definitions,"\n\n")+"\n"},OperationDefinition:function(e){var n=e.operation,t=e.name,r=c("(",u(e.variableDefinitions,", "),")"),i=u(e.directives," "),o=e.selectionSet;return t||i||r||"query"!==n?u([n,u([t,r]),i,o]," "):o},VariableDefinition:function(e){var n=e.variable,t=e.type,r=e.defaultValue,i=e.directives;return n+": "+t+c(" = ",r)+c(" ",u(i," "))},SelectionSet:function(e){return l(e.selections)},Field:function(e){var n=e.alias,t=e.name,r=e.arguments,i=e.directives,o=e.selectionSet,a=c("",n,": ")+t,s=a+c("(",u(r,", "),")");return s.length>80&&(s=a+c("(\n",d(u(r,"\n")),"\n)")),u([s,u(i," "),o]," ")},Argument:function(e){return e.name+": "+e.value},FragmentSpread:function(e){return"..."+e.name+c(" ",u(e.directives," "))},InlineFragment:function(e){var n=e.typeCondition,t=e.directives,r=e.selectionSet;return u(["...",c("on ",n),u(t," "),r]," ")},FragmentDefinition:function(e){var n=e.name,t=e.typeCondition,r=e.variableDefinitions,i=e.directives,o=e.selectionSet;return"fragment ".concat(n).concat(c("(",u(r,", "),")")," ")+"on ".concat(t," ").concat(c("",u(i," ")," "))+o},IntValue:function(e){return e.value},FloatValue:function(e){return e.value},StringValue:function(e,n){var t=e.value;return e.block?(0,i.printBlockString)(t,"description"===n?"":"  "):JSON.stringify(t)},BooleanValue:function(e){return e.value?"true":"false"},NullValue:function(){return"null"},EnumValue:function(e){return e.value},ListValue:function(e){return"["+u(e.values,", ")+"]"},ObjectValue:function(e){return"{"+u(e.fields,", ")+"}"},ObjectField:function(e){return e.name+": "+e.value},Directive:function(e){return"@"+e.name+c("(",u(e.arguments,", "),")")},NamedType:function(e){return e.name},ListType:function(e){return"["+e.type+"]"},NonNullType:function(e){return e.type+"!"},SchemaDefinition:s((function(e){var n=e.directives,t=e.operationTypes;return u(["schema",u(n," "),l(t)]," ")})),OperationTypeDefinition:function(e){return e.operation+": "+e.type},ScalarTypeDefinition:s((function(e){return u(["scalar",e.name,u(e.directives," ")]," ")})),ObjectTypeDefinition:s((function(e){var n=e.name,t=e.interfaces,r=e.directives,i=e.fields;return u(["type",n,c("implements ",u(t," & ")),u(r," "),l(i)]," ")})),FieldDefinition:s((function(e){var n=e.name,t=e.arguments,r=e.type,i=e.directives;return n+(f(t)?c("(\n",d(u(t,"\n")),"\n)"):c("(",u(t,", "),")"))+": "+r+c(" ",u(i," "))})),InputValueDefinition:s((function(e){var n=e.name,t=e.type,r=e.defaultValue,i=e.directives;return u([n+": "+t,c("= ",r),u(i," ")]," ")})),InterfaceTypeDefinition:s((function(e){var n=e.name,t=e.interfaces,r=e.directives,i=e.fields;return u(["interface",n,c("implements ",u(t," & ")),u(r," "),l(i)]," ")})),UnionTypeDefinition:s((function(e){var n=e.name,t=e.directives,r=e.types;return u(["union",n,u(t," "),r&&0!==r.length?"= "+u(r," | "):""]," ")})),EnumTypeDefinition:s((function(e){var n=e.name,t=e.directives,r=e.values;return u(["enum",n,u(t," "),l(r)]," ")})),EnumValueDefinition:s((function(e){return u([e.name,u(e.directives," ")]," ")})),InputObjectTypeDefinition:s((function(e){var n=e.name,t=e.directives,r=e.fields;return u(["input",n,u(t," "),l(r)]," ")})),DirectiveDefinition:s((function(e){var n=e.name,t=e.arguments,r=e.repeatable,i=e.locations;return"directive @"+n+(f(t)?c("(\n",d(u(t,"\n")),"\n)"):c("(",u(t,", "),")"))+(r?" repeatable":"")+" on "+u(i," | ")})),SchemaExtension:function(e){var n=e.directives,t=e.operationTypes;return u(["extend schema",u(n," "),l(t)]," ")},ScalarTypeExtension:function(e){return u(["extend scalar",e.name,u(e.directives," ")]," ")},ObjectTypeExtension:function(e){var n=e.name,t=e.interfaces,r=e.directives,i=e.fields;return u(["extend type",n,c("implements ",u(t," & ")),u(r," "),l(i)]," ")},InterfaceTypeExtension:function(e){var n=e.name,t=e.interfaces,r=e.directives,i=e.fields;return u(["extend interface",n,c("implements ",u(t," & ")),u(r," "),l(i)]," ")},UnionTypeExtension:function(e){var n=e.name,t=e.directives,r=e.types;return u(["extend union",n,u(t," "),r&&0!==r.length?"= "+u(r," | "):""]," ")},EnumTypeExtension:function(e){var n=e.name,t=e.directives,r=e.values;return u(["extend enum",n,u(t," "),l(r)]," ")},InputObjectTypeExtension:function(e){var n=e.name,t=e.directives,r=e.fields;return u(["extend input",n,u(t," "),l(r)]," ")}};function s(e){return function(n){return u([n.description,e(n)],"\n")}}function u(e){var n,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return null!==(n=null==e?void 0:e.filter((function(e){return e})).join(t))&&void 0!==n?n:""}function l(e){return c("{\n",d(u(e,"\n")),"\n}")}function c(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";return null!=n&&""!==n?e+n+t:""}function d(e){return c("  ",e.replace(/\n/g,"\n  "))}function p(e){return-1!==e.indexOf("\n")}function f(e){return null!=e&&e.some(p)}},"./node_modules/graphql/language/source.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{Source:()=>u,isSource:()=>l});var r=t("./node_modules/graphql/polyfills/symbols.mjs"),i=t("./node_modules/graphql/jsutils/inspect.mjs"),o=t("./node_modules/graphql/jsutils/devAssert.mjs"),a=t("./node_modules/graphql/jsutils/instanceOf.mjs");function s(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var u=function(){function e(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"GraphQL request",t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{line:1,column:1};"string"==typeof e||(0,o.default)(0,"Body must be a string. Received: ".concat((0,i.default)(e),".")),this.body=e,this.name=n,this.locationOffset=t,this.locationOffset.line>0||(0,o.default)(0,"line in locationOffset is 1-indexed and must be positive."),this.locationOffset.column>0||(0,o.default)(0,"column in locationOffset is 1-indexed and must be positive.")}var n,t;return n=e,(t=[{key:r.SYMBOL_TO_STRING_TAG,get:function(){return"Source"}}])&&s(n.prototype,t),e}();function l(e){return(0,a.default)(e,u)}},"./node_modules/graphql/language/tokenKind.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{TokenKind:()=>r});var r=Object.freeze({SOF:"<SOF>",EOF:"<EOF>",BANG:"!",DOLLAR:"$",AMP:"&",PAREN_L:"(",PAREN_R:")",SPREAD:"...",COLON:":",EQUALS:"=",AT:"@",BRACKET_L:"[",BRACKET_R:"]",BRACE_L:"{",PIPE:"|",BRACE_R:"}",NAME:"Name",INT:"Int",FLOAT:"Float",STRING:"String",BLOCK_STRING:"BlockString",COMMENT:"Comment"})},"./node_modules/graphql/language/visitor.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{QueryDocumentKeys:()=>o,BREAK:()=>a,visit:()=>s,visitInParallel:()=>u,getVisitFn:()=>l});var r=t("./node_modules/graphql/jsutils/inspect.mjs"),i=t("./node_modules/graphql/language/ast.mjs"),o={Name:[],Document:["definitions"],OperationDefinition:["name","variableDefinitions","directives","selectionSet"],VariableDefinition:["variable","type","defaultValue","directives"],Variable:["name"],SelectionSet:["selections"],Field:["alias","name","arguments","directives","selectionSet"],Argument:["name","value"],FragmentSpread:["name","directives"],InlineFragment:["typeCondition","directives","selectionSet"],FragmentDefinition:["name","variableDefinitions","typeCondition","directives","selectionSet"],IntValue:[],FloatValue:[],StringValue:[],BooleanValue:[],NullValue:[],EnumValue:[],ListValue:["values"],ObjectValue:["fields"],ObjectField:["name","value"],Directive:["name","arguments"],NamedType:["name"],ListType:["type"],NonNullType:["type"],SchemaDefinition:["description","directives","operationTypes"],OperationTypeDefinition:["type"],ScalarTypeDefinition:["description","name","directives"],ObjectTypeDefinition:["description","name","interfaces","directives","fields"],FieldDefinition:["description","name","arguments","type","directives"],InputValueDefinition:["description","name","type","defaultValue","directives"],InterfaceTypeDefinition:["description","name","interfaces","directives","fields"],UnionTypeDefinition:["description","name","directives","types"],EnumTypeDefinition:["description","name","directives","values"],EnumValueDefinition:["description","name","directives"],InputObjectTypeDefinition:["description","name","directives","fields"],DirectiveDefinition:["description","name","arguments","locations"],SchemaExtension:["directives","operationTypes"],ScalarTypeExtension:["name","directives"],ObjectTypeExtension:["name","interfaces","directives","fields"],InterfaceTypeExtension:["name","interfaces","directives","fields"],UnionTypeExtension:["name","directives","types"],EnumTypeExtension:["name","directives","values"],InputObjectTypeExtension:["name","directives","fields"]},a=Object.freeze({});function s(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:o,s=void 0,u=Array.isArray(e),c=[e],d=-1,p=[],f=void 0,m=void 0,h=void 0,v=[],y=[],g=e;do{var T=++d===c.length,E=T&&0!==p.length;if(T){if(m=0===y.length?void 0:v[v.length-1],f=h,h=y.pop(),E){if(u)f=f.slice();else{for(var _={},N=0,b=Object.keys(f);N<b.length;N++){var j=b[N];_[j]=f[j]}f=_}for(var I=0,O=0;O<p.length;O++){var L=p[O][0],S=p[O][1];u&&(L-=I),u&&null===S?(f.splice(L,1),I++):f[L]=S}}d=s.index,c=s.keys,p=s.edits,u=s.inArray,s=s.prev}else{if(m=h?u?d:c[d]:void 0,null==(f=h?h[m]:g))continue;h&&v.push(m)}var D,A=void 0;if(!Array.isArray(f)){if(!(0,i.isNode)(f))throw new Error("Invalid AST Node: ".concat((0,r.default)(f),"."));var w=l(n,f.kind,T);if(w){if((A=w.call(n,f,m,h,v,y))===a)break;if(!1===A){if(!T){v.pop();continue}}else if(void 0!==A&&(p.push([m,A]),!T)){if(!(0,i.isNode)(A)){v.pop();continue}f=A}}}void 0===A&&E&&p.push([m,f]),T?v.pop():(s={inArray:u,index:d,keys:c,edits:p,prev:s},c=(u=Array.isArray(f))?f:null!==(D=t[f.kind])&&void 0!==D?D:[],d=-1,p=[],h&&y.push(h),h=f)}while(void 0!==s);return 0!==p.length&&(g=p[p.length-1][1]),g}function u(e){var n=new Array(e.length);return{enter:function(t){for(var r=0;r<e.length;r++)if(null==n[r]){var i=l(e[r],t.kind,!1);if(i){var o=i.apply(e[r],arguments);if(!1===o)n[r]=t;else if(o===a)n[r]=a;else if(void 0!==o)return o}}},leave:function(t){for(var r=0;r<e.length;r++)if(null==n[r]){var i=l(e[r],t.kind,!0);if(i){var o=i.apply(e[r],arguments);if(o===a)n[r]=a;else if(void 0!==o&&!1!==o)return o}}else n[r]===t&&(n[r]=null)}}}function l(e,n,t){var r=e[n];if(r){if(!t&&"function"==typeof r)return r;var i=t?r.leave:r.enter;if("function"==typeof i)return i}else{var o=t?e.leave:e.enter;if(o){if("function"==typeof o)return o;var a=o[n];if("function"==typeof a)return a}}}},"./node_modules/graphql/polyfills/arrayFrom.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>i});var r=t("./node_modules/graphql/polyfills/symbols.mjs");const i=Array.from||function(e,n,t){if(null==e)throw new TypeError("Array.from requires an array-like object - not null or undefined");var i=e[r.SYMBOL_ITERATOR];if("function"==typeof i){for(var o,a=i.call(e),s=[],u=0;!(o=a.next()).done;++u)if(s.push(n.call(t,o.value,u)),u>9999999)throw new TypeError("Near-infinite iteration.");return s}var l=e.length;if("number"==typeof l&&l>=0&&l%1==0){for(var c=[],d=0;d<l;++d)Object.prototype.hasOwnProperty.call(e,d)&&c.push(n.call(t,e[d],d));return c}return[]}},"./node_modules/graphql/polyfills/find.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>r});const r=Array.prototype.find?function(e,n){return Array.prototype.find.call(e,n)}:function(e,n){for(var t=0;t<e.length;t++){var r=e[t];if(n(r))return r}}},"./node_modules/graphql/polyfills/isFinite.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>r});const r=Number.isFinite||function(e){return"number"==typeof e&&isFinite(e)}},"./node_modules/graphql/polyfills/isInteger.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>r});const r=Number.isInteger||function(e){return"number"==typeof e&&isFinite(e)&&Math.floor(e)===e}},"./node_modules/graphql/polyfills/objectEntries.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>r});const r=Object.entries||function(e){return Object.keys(e).map((function(n){return[n,e[n]]}))}},"./node_modules/graphql/polyfills/objectValues.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>r});const r=Object.values||function(e){return Object.keys(e).map((function(n){return e[n]}))}},"./node_modules/graphql/polyfills/symbols.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{SYMBOL_ITERATOR:()=>r,SYMBOL_ASYNC_ITERATOR:()=>i,SYMBOL_TO_STRING_TAG:()=>o});var r="function"==typeof Symbol&&null!=Symbol.iterator?Symbol.iterator:"@@iterator",i="function"==typeof Symbol&&null!=Symbol.asyncIterator?Symbol.asyncIterator:"@@asyncIterator",o="function"==typeof Symbol&&null!=Symbol.toStringTag?Symbol.toStringTag:"@@toStringTag"},"./node_modules/graphql/subscription/mapAsyncIterator.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>i});var r=t("./node_modules/graphql/polyfills/symbols.mjs");function i(e,n,t){var i,s,u,l,c,d,p=e[r.SYMBOL_ASYNC_ITERATOR].call(e);function f(e){return e.done?e:o(e.value,n).then(a,s)}if("function"==typeof p.return&&(i=p.return,s=function(e){var n=function(){return Promise.reject(e)};return i.call(p).then(n,n)}),t){var m=t;u=function(e){return o(e,m).then(a,s)}}return l={next:function(){return p.next().then(f,u)},return:function(){return i?i.call(p).then(f,u):Promise.resolve({value:void 0,done:!0})},throw:function(e){return"function"==typeof p.throw?p.throw(e).then(f,u):Promise.reject(e).catch(s)}},d=function(){return this},(c=r.SYMBOL_ASYNC_ITERATOR)in l?Object.defineProperty(l,c,{value:d,enumerable:!0,configurable:!0,writable:!0}):l[c]=d,l}function o(e,n){return new Promise((function(t){return t(n(e))}))}function a(e){return{value:e,done:!1}}},"./node_modules/graphql/subscription/subscribe.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{subscribe:()=>p,createSourceEventStream:()=>h});var r=t("./node_modules/graphql/jsutils/inspect.mjs"),i=t("./node_modules/graphql/jsutils/isAsyncIterable.mjs"),o=t("./node_modules/graphql/jsutils/Path.mjs"),a=t("./node_modules/graphql/error/GraphQLError.mjs"),s=t("./node_modules/graphql/error/locatedError.mjs"),u=t("./node_modules/graphql/execution/values.mjs"),l=t("./node_modules/graphql/execution/execute.mjs"),c=t("./node_modules/graphql/utilities/getOperationRootType.mjs"),d=t("./node_modules/graphql/subscription/mapAsyncIterator.mjs");function p(e,n,t,r,i,o,a,s){return m(1===arguments.length?e:{schema:e,document:n,rootValue:t,contextValue:r,variableValues:i,operationName:o,fieldResolver:a,subscribeFieldResolver:s})}function f(e){if(e instanceof a.GraphQLError)return{errors:[e]};throw e}function m(e){var n=e.schema,t=e.document,r=e.rootValue,o=e.contextValue,a=e.variableValues,s=e.operationName,u=e.fieldResolver,c=e.subscribeFieldResolver,p=h(n,t,r,o,a,s,c),m=function(e){return(0,l.execute)({schema:n,document:t,rootValue:e,contextValue:o,variableValues:a,operationName:s,fieldResolver:u})};return p.then((function(e){return(0,i.default)(e)?(0,d.default)(e,m,f):e}))}function h(e,n,t,d,p,m,h){return(0,l.assertValidExecutionArguments)(e,n,p),new Promise((function(f){var v=(0,l.buildExecutionContext)(e,n,t,d,p,m,h);f(Array.isArray(v)?{errors:v}:function(e){var n=e.schema,t=e.operation,d=e.variableValues,p=e.rootValue,f=(0,c.getOperationRootType)(n,t),m=(0,l.collectFields)(e,f,t.selectionSet,Object.create(null),Object.create(null)),h=Object.keys(m)[0],v=m[h],y=v[0].name.value,g=(0,l.getFieldDef)(n,f,y);if(!g)throw new a.GraphQLError('The subscription field "'.concat(y,'" is not defined.'),v);var T=(0,o.addPath)(void 0,h,f.name),E=(0,l.buildResolveInfo)(e,g,v,f,T);return new Promise((function(n){var t,r=(0,u.getArgumentValues)(g,v[0],d),i=e.contextValue;n((null!==(t=g.subscribe)&&void 0!==t?t:e.fieldResolver)(p,r,i,E))})).then((function(e){if(e instanceof Error)throw(0,s.locatedError)(e,v,(0,o.pathToArray)(T));if(!(0,i.default)(e))throw new Error("Subscription field must return Async Iterable. "+"Received: ".concat((0,r.default)(e),"."));return e}),(function(e){throw(0,s.locatedError)(e,v,(0,o.pathToArray)(T))}))}(v))})).catch(f)}},"./node_modules/graphql/type/definition.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{isType:()=>b,assertType:()=>j,isScalarType:()=>I,assertScalarType:()=>O,isObjectType:()=>L,assertObjectType:()=>S,isInterfaceType:()=>D,assertInterfaceType:()=>A,isUnionType:()=>w,assertUnionType:()=>R,isEnumType:()=>k,assertEnumType:()=>q,isInputObjectType:()=>x,assertInputObjectType:()=>F,isListType:()=>G,assertListType:()=>V,isNonNullType:()=>C,assertNonNullType:()=>K,isInputType:()=>U,assertInputType:()=>Q,isOutputType:()=>P,assertOutputType:()=>M,isLeafType:()=>B,assertLeafType:()=>Y,isCompositeType:()=>J,assertCompositeType:()=>X,isAbstractType:()=>z,assertAbstractType:()=>H,GraphQLList:()=>W,GraphQLNonNull:()=>$,isWrappingType:()=>Z,assertWrappingType:()=>ee,isNullableType:()=>ne,assertNullableType:()=>te,getNullableType:()=>re,isNamedType:()=>ie,assertNamedType:()=>oe,getNamedType:()=>ae,GraphQLScalarType:()=>le,GraphQLObjectType:()=>ce,argsToArgsConfig:()=>he,isRequiredArgument:()=>ve,GraphQLInterfaceType:()=>ye,GraphQLUnionType:()=>ge,GraphQLEnumType:()=>Ee,GraphQLInputObjectType:()=>Ne,isRequiredInputField:()=>je});var r=t("./node_modules/graphql/polyfills/objectEntries.mjs"),i=t("./node_modules/graphql/polyfills/symbols.mjs"),o=t("./node_modules/graphql/jsutils/inspect.mjs"),a=t("./node_modules/graphql/jsutils/keyMap.mjs"),s=t("./node_modules/graphql/jsutils/mapValue.mjs"),u=t("./node_modules/graphql/jsutils/toObjMap.mjs"),l=t("./node_modules/graphql/jsutils/devAssert.mjs"),c=t("./node_modules/graphql/jsutils/keyValMap.mjs"),d=t("./node_modules/graphql/jsutils/instanceOf.mjs"),p=t("./node_modules/graphql/jsutils/didYouMean.mjs"),f=t("./node_modules/graphql/jsutils/isObjectLike.mjs"),m=t("./node_modules/graphql/jsutils/identityFunc.mjs"),h=t("./node_modules/graphql/jsutils/defineInspect.mjs"),v=t("./node_modules/graphql/jsutils/suggestionList.mjs"),y=t("./node_modules/graphql/error/GraphQLError.mjs"),g=t("./node_modules/graphql/language/kinds.mjs"),T=t("./node_modules/graphql/language/printer.mjs"),E=t("./node_modules/graphql/utilities/valueFromASTUntyped.mjs");function _(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function N(e,n,t){return n&&_(e.prototype,n),t&&_(e,t),e}function b(e){return I(e)||L(e)||D(e)||w(e)||k(e)||x(e)||G(e)||C(e)}function j(e){if(!b(e))throw new Error("Expected ".concat((0,o.default)(e)," to be a GraphQL type."));return e}function I(e){return(0,d.default)(e,le)}function O(e){if(!I(e))throw new Error("Expected ".concat((0,o.default)(e)," to be a GraphQL Scalar type."));return e}function L(e){return(0,d.default)(e,ce)}function S(e){if(!L(e))throw new Error("Expected ".concat((0,o.default)(e)," to be a GraphQL Object type."));return e}function D(e){return(0,d.default)(e,ye)}function A(e){if(!D(e))throw new Error("Expected ".concat((0,o.default)(e)," to be a GraphQL Interface type."));return e}function w(e){return(0,d.default)(e,ge)}function R(e){if(!w(e))throw new Error("Expected ".concat((0,o.default)(e)," to be a GraphQL Union type."));return e}function k(e){return(0,d.default)(e,Ee)}function q(e){if(!k(e))throw new Error("Expected ".concat((0,o.default)(e)," to be a GraphQL Enum type."));return e}function x(e){return(0,d.default)(e,Ne)}function F(e){if(!x(e))throw new Error("Expected ".concat((0,o.default)(e)," to be a GraphQL Input Object type."));return e}function G(e){return(0,d.default)(e,W)}function V(e){if(!G(e))throw new Error("Expected ".concat((0,o.default)(e)," to be a GraphQL List type."));return e}function C(e){return(0,d.default)(e,$)}function K(e){if(!C(e))throw new Error("Expected ".concat((0,o.default)(e)," to be a GraphQL Non-Null type."));return e}function U(e){return I(e)||k(e)||x(e)||Z(e)&&U(e.ofType)}function Q(e){if(!U(e))throw new Error("Expected ".concat((0,o.default)(e)," to be a GraphQL input type."));return e}function P(e){return I(e)||L(e)||D(e)||w(e)||k(e)||Z(e)&&P(e.ofType)}function M(e){if(!P(e))throw new Error("Expected ".concat((0,o.default)(e)," to be a GraphQL output type."));return e}function B(e){return I(e)||k(e)}function Y(e){if(!B(e))throw new Error("Expected ".concat((0,o.default)(e)," to be a GraphQL leaf type."));return e}function J(e){return L(e)||D(e)||w(e)}function X(e){if(!J(e))throw new Error("Expected ".concat((0,o.default)(e)," to be a GraphQL composite type."));return e}function z(e){return D(e)||w(e)}function H(e){if(!z(e))throw new Error("Expected ".concat((0,o.default)(e)," to be a GraphQL abstract type."));return e}function W(e){if(!(this instanceof W))return new W(e);this.ofType=j(e)}function $(e){if(!(this instanceof $))return new $(e);this.ofType=te(e)}function Z(e){return G(e)||C(e)}function ee(e){if(!Z(e))throw new Error("Expected ".concat((0,o.default)(e)," to be a GraphQL wrapping type."));return e}function ne(e){return b(e)&&!C(e)}function te(e){if(!ne(e))throw new Error("Expected ".concat((0,o.default)(e)," to be a GraphQL nullable type."));return e}function re(e){if(e)return C(e)?e.ofType:e}function ie(e){return I(e)||L(e)||D(e)||w(e)||k(e)||x(e)}function oe(e){if(!ie(e))throw new Error("Expected ".concat((0,o.default)(e)," to be a GraphQL named type."));return e}function ae(e){if(e){for(var n=e;Z(n);)n=n.ofType;return n}}function se(e){return"function"==typeof e?e():e}function ue(e){return e&&e.length>0?e:void 0}W.prototype.toString=function(){return"["+String(this.ofType)+"]"},W.prototype.toJSON=function(){return this.toString()},Object.defineProperty(W.prototype,i.SYMBOL_TO_STRING_TAG,{get:function(){return"GraphQLList"}}),(0,h.default)(W),$.prototype.toString=function(){return String(this.ofType)+"!"},$.prototype.toJSON=function(){return this.toString()},Object.defineProperty($.prototype,i.SYMBOL_TO_STRING_TAG,{get:function(){return"GraphQLNonNull"}}),(0,h.default)($);var le=function(){function e(e){var n,t,r,i=null!==(n=e.parseValue)&&void 0!==n?n:m.default;this.name=e.name,this.description=e.description,this.specifiedByUrl=e.specifiedByUrl,this.serialize=null!==(t=e.serialize)&&void 0!==t?t:m.default,this.parseValue=i,this.parseLiteral=null!==(r=e.parseLiteral)&&void 0!==r?r:function(e,n){return i((0,E.valueFromASTUntyped)(e,n))},this.extensions=e.extensions&&(0,u.default)(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=ue(e.extensionASTNodes),"string"==typeof e.name||(0,l.default)(0,"Must provide name."),null==e.specifiedByUrl||"string"==typeof e.specifiedByUrl||(0,l.default)(0,"".concat(this.name,' must provide "specifiedByUrl" as a string, ')+"but got: ".concat((0,o.default)(e.specifiedByUrl),".")),null==e.serialize||"function"==typeof e.serialize||(0,l.default)(0,"".concat(this.name,' must provide "serialize" function. If this custom Scalar is also used as an input type, ensure "parseValue" and "parseLiteral" functions are also provided.')),e.parseLiteral&&("function"==typeof e.parseValue&&"function"==typeof e.parseLiteral||(0,l.default)(0,"".concat(this.name,' must provide both "parseValue" and "parseLiteral" functions.')))}var n=e.prototype;return n.toConfig=function(){var e;return{name:this.name,description:this.description,specifiedByUrl:this.specifiedByUrl,serialize:this.serialize,parseValue:this.parseValue,parseLiteral:this.parseLiteral,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:null!==(e=this.extensionASTNodes)&&void 0!==e?e:[]}},n.toString=function(){return this.name},n.toJSON=function(){return this.toString()},N(e,[{key:i.SYMBOL_TO_STRING_TAG,get:function(){return"GraphQLScalarType"}}]),e}();(0,h.default)(le);var ce=function(){function e(e){this.name=e.name,this.description=e.description,this.isTypeOf=e.isTypeOf,this.extensions=e.extensions&&(0,u.default)(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=ue(e.extensionASTNodes),this._fields=pe.bind(void 0,e),this._interfaces=de.bind(void 0,e),"string"==typeof e.name||(0,l.default)(0,"Must provide name."),null==e.isTypeOf||"function"==typeof e.isTypeOf||(0,l.default)(0,"".concat(this.name,' must provide "isTypeOf" as a function, ')+"but got: ".concat((0,o.default)(e.isTypeOf),"."))}var n=e.prototype;return n.getFields=function(){return"function"==typeof this._fields&&(this._fields=this._fields()),this._fields},n.getInterfaces=function(){return"function"==typeof this._interfaces&&(this._interfaces=this._interfaces()),this._interfaces},n.toConfig=function(){return{name:this.name,description:this.description,interfaces:this.getInterfaces(),fields:me(this.getFields()),isTypeOf:this.isTypeOf,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes||[]}},n.toString=function(){return this.name},n.toJSON=function(){return this.toString()},N(e,[{key:i.SYMBOL_TO_STRING_TAG,get:function(){return"GraphQLObjectType"}}]),e}();function de(e){var n,t=null!==(n=se(e.interfaces))&&void 0!==n?n:[];return Array.isArray(t)||(0,l.default)(0,"".concat(e.name," interfaces must be an Array or a function which returns an Array.")),t}function pe(e){var n=se(e.fields);return fe(n)||(0,l.default)(0,"".concat(e.name," fields must be an object with field names as keys or a function which returns such an object.")),(0,s.default)(n,(function(n,t){var i;fe(n)||(0,l.default)(0,"".concat(e.name,".").concat(t," field config must be an object.")),!("isDeprecated"in n)||(0,l.default)(0,"".concat(e.name,".").concat(t,' should provide "deprecationReason" instead of "isDeprecated".')),null==n.resolve||"function"==typeof n.resolve||(0,l.default)(0,"".concat(e.name,".").concat(t," field resolver must be a function if ")+"provided, but got: ".concat((0,o.default)(n.resolve),"."));var a=null!==(i=n.args)&&void 0!==i?i:{};fe(a)||(0,l.default)(0,"".concat(e.name,".").concat(t," args must be an object with argument names as keys."));var s=(0,r.default)(a).map((function(e){var n=e[0],t=e[1];return{name:n,description:t.description,type:t.type,defaultValue:t.defaultValue,deprecationReason:t.deprecationReason,extensions:t.extensions&&(0,u.default)(t.extensions),astNode:t.astNode}}));return{name:t,description:n.description,type:n.type,args:s,resolve:n.resolve,subscribe:n.subscribe,isDeprecated:null!=n.deprecationReason,deprecationReason:n.deprecationReason,extensions:n.extensions&&(0,u.default)(n.extensions),astNode:n.astNode}}))}function fe(e){return(0,f.default)(e)&&!Array.isArray(e)}function me(e){return(0,s.default)(e,(function(e){return{description:e.description,type:e.type,args:he(e.args),resolve:e.resolve,subscribe:e.subscribe,deprecationReason:e.deprecationReason,extensions:e.extensions,astNode:e.astNode}}))}function he(e){return(0,c.default)(e,(function(e){return e.name}),(function(e){return{description:e.description,type:e.type,defaultValue:e.defaultValue,deprecationReason:e.deprecationReason,extensions:e.extensions,astNode:e.astNode}}))}function ve(e){return C(e.type)&&void 0===e.defaultValue}(0,h.default)(ce);var ye=function(){function e(e){this.name=e.name,this.description=e.description,this.resolveType=e.resolveType,this.extensions=e.extensions&&(0,u.default)(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=ue(e.extensionASTNodes),this._fields=pe.bind(void 0,e),this._interfaces=de.bind(void 0,e),"string"==typeof e.name||(0,l.default)(0,"Must provide name."),null==e.resolveType||"function"==typeof e.resolveType||(0,l.default)(0,"".concat(this.name,' must provide "resolveType" as a function, ')+"but got: ".concat((0,o.default)(e.resolveType),"."))}var n=e.prototype;return n.getFields=function(){return"function"==typeof this._fields&&(this._fields=this._fields()),this._fields},n.getInterfaces=function(){return"function"==typeof this._interfaces&&(this._interfaces=this._interfaces()),this._interfaces},n.toConfig=function(){var e;return{name:this.name,description:this.description,interfaces:this.getInterfaces(),fields:me(this.getFields()),resolveType:this.resolveType,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:null!==(e=this.extensionASTNodes)&&void 0!==e?e:[]}},n.toString=function(){return this.name},n.toJSON=function(){return this.toString()},N(e,[{key:i.SYMBOL_TO_STRING_TAG,get:function(){return"GraphQLInterfaceType"}}]),e}();(0,h.default)(ye);var ge=function(){function e(e){this.name=e.name,this.description=e.description,this.resolveType=e.resolveType,this.extensions=e.extensions&&(0,u.default)(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=ue(e.extensionASTNodes),this._types=Te.bind(void 0,e),"string"==typeof e.name||(0,l.default)(0,"Must provide name."),null==e.resolveType||"function"==typeof e.resolveType||(0,l.default)(0,"".concat(this.name,' must provide "resolveType" as a function, ')+"but got: ".concat((0,o.default)(e.resolveType),"."))}var n=e.prototype;return n.getTypes=function(){return"function"==typeof this._types&&(this._types=this._types()),this._types},n.toConfig=function(){var e;return{name:this.name,description:this.description,types:this.getTypes(),resolveType:this.resolveType,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:null!==(e=this.extensionASTNodes)&&void 0!==e?e:[]}},n.toString=function(){return this.name},n.toJSON=function(){return this.toString()},N(e,[{key:i.SYMBOL_TO_STRING_TAG,get:function(){return"GraphQLUnionType"}}]),e}();function Te(e){var n=se(e.types);return Array.isArray(n)||(0,l.default)(0,"Must provide Array of types or a function which returns such an array for Union ".concat(e.name,".")),n}(0,h.default)(ge);var Ee=function(){function e(e){var n,t;this.name=e.name,this.description=e.description,this.extensions=e.extensions&&(0,u.default)(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=ue(e.extensionASTNodes),this._values=(n=this.name,fe(t=e.values)||(0,l.default)(0,"".concat(n," values must be an object with value names as keys.")),(0,r.default)(t).map((function(e){var t=e[0],r=e[1];return fe(r)||(0,l.default)(0,"".concat(n,".").concat(t,' must refer to an object with a "value" key ')+"representing an internal value but got: ".concat((0,o.default)(r),".")),!("isDeprecated"in r)||(0,l.default)(0,"".concat(n,".").concat(t,' should provide "deprecationReason" instead of "isDeprecated".')),{name:t,description:r.description,value:void 0!==r.value?r.value:t,isDeprecated:null!=r.deprecationReason,deprecationReason:r.deprecationReason,extensions:r.extensions&&(0,u.default)(r.extensions),astNode:r.astNode}}))),this._valueLookup=new Map(this._values.map((function(e){return[e.value,e]}))),this._nameLookup=(0,a.default)(this._values,(function(e){return e.name})),"string"==typeof e.name||(0,l.default)(0,"Must provide name.")}var n=e.prototype;return n.getValues=function(){return this._values},n.getValue=function(e){return this._nameLookup[e]},n.serialize=function(e){var n=this._valueLookup.get(e);if(void 0===n)throw new y.GraphQLError('Enum "'.concat(this.name,'" cannot represent value: ').concat((0,o.default)(e)));return n.name},n.parseValue=function(e){if("string"!=typeof e){var n=(0,o.default)(e);throw new y.GraphQLError('Enum "'.concat(this.name,'" cannot represent non-string value: ').concat(n,".")+_e(this,n))}var t=this.getValue(e);if(null==t)throw new y.GraphQLError('Value "'.concat(e,'" does not exist in "').concat(this.name,'" enum.')+_e(this,e));return t.value},n.parseLiteral=function(e,n){if(e.kind!==g.Kind.ENUM){var t=(0,T.print)(e);throw new y.GraphQLError('Enum "'.concat(this.name,'" cannot represent non-enum value: ').concat(t,".")+_e(this,t),e)}var r=this.getValue(e.value);if(null==r){var i=(0,T.print)(e);throw new y.GraphQLError('Value "'.concat(i,'" does not exist in "').concat(this.name,'" enum.')+_e(this,i),e)}return r.value},n.toConfig=function(){var e,n=(0,c.default)(this.getValues(),(function(e){return e.name}),(function(e){return{description:e.description,value:e.value,deprecationReason:e.deprecationReason,extensions:e.extensions,astNode:e.astNode}}));return{name:this.name,description:this.description,values:n,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:null!==(e=this.extensionASTNodes)&&void 0!==e?e:[]}},n.toString=function(){return this.name},n.toJSON=function(){return this.toString()},N(e,[{key:i.SYMBOL_TO_STRING_TAG,get:function(){return"GraphQLEnumType"}}]),e}();function _e(e,n){var t=e.getValues().map((function(e){return e.name})),r=(0,v.default)(n,t);return(0,p.default)("the enum value",r)}(0,h.default)(Ee);var Ne=function(){function e(e){this.name=e.name,this.description=e.description,this.extensions=e.extensions&&(0,u.default)(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=ue(e.extensionASTNodes),this._fields=be.bind(void 0,e),"string"==typeof e.name||(0,l.default)(0,"Must provide name.")}var n=e.prototype;return n.getFields=function(){return"function"==typeof this._fields&&(this._fields=this._fields()),this._fields},n.toConfig=function(){var e,n=(0,s.default)(this.getFields(),(function(e){return{description:e.description,type:e.type,defaultValue:e.defaultValue,deprecationReason:e.deprecationReason,extensions:e.extensions,astNode:e.astNode}}));return{name:this.name,description:this.description,fields:n,extensions:this.extensions,astNode:this.astNode,extensionASTNodes:null!==(e=this.extensionASTNodes)&&void 0!==e?e:[]}},n.toString=function(){return this.name},n.toJSON=function(){return this.toString()},N(e,[{key:i.SYMBOL_TO_STRING_TAG,get:function(){return"GraphQLInputObjectType"}}]),e}();function be(e){var n=se(e.fields);return fe(n)||(0,l.default)(0,"".concat(e.name," fields must be an object with field names as keys or a function which returns such an object.")),(0,s.default)(n,(function(n,t){return!("resolve"in n)||(0,l.default)(0,"".concat(e.name,".").concat(t," field has a resolve property, but Input Types cannot define resolvers.")),{name:t,description:n.description,type:n.type,defaultValue:n.defaultValue,deprecationReason:n.deprecationReason,extensions:n.extensions&&(0,u.default)(n.extensions),astNode:n.astNode}}))}function je(e){return C(e.type)&&void 0===e.defaultValue}(0,h.default)(Ne)},"./node_modules/graphql/type/directives.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{isDirective:()=>h,assertDirective:()=>v,GraphQLDirective:()=>y,GraphQLIncludeDirective:()=>g,GraphQLSkipDirective:()=>T,DEFAULT_DEPRECATION_REASON:()=>E,GraphQLDeprecatedDirective:()=>_,GraphQLSpecifiedByDirective:()=>N,specifiedDirectives:()=>b,isSpecifiedDirective:()=>j});var r=t("./node_modules/graphql/polyfills/objectEntries.mjs"),i=t("./node_modules/graphql/polyfills/symbols.mjs"),o=t("./node_modules/graphql/jsutils/inspect.mjs"),a=t("./node_modules/graphql/jsutils/toObjMap.mjs"),s=t("./node_modules/graphql/jsutils/devAssert.mjs"),u=t("./node_modules/graphql/jsutils/instanceOf.mjs"),l=t("./node_modules/graphql/jsutils/isObjectLike.mjs"),c=t("./node_modules/graphql/jsutils/defineInspect.mjs"),d=t("./node_modules/graphql/language/directiveLocation.mjs"),p=t("./node_modules/graphql/type/scalars.mjs"),f=t("./node_modules/graphql/type/definition.mjs");function m(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function h(e){return(0,u.default)(e,y)}function v(e){if(!h(e))throw new Error("Expected ".concat((0,o.default)(e)," to be a GraphQL directive."));return e}var y=function(){function e(e){var n,t;this.name=e.name,this.description=e.description,this.locations=e.locations,this.isRepeatable=null!==(n=e.isRepeatable)&&void 0!==n&&n,this.extensions=e.extensions&&(0,a.default)(e.extensions),this.astNode=e.astNode,e.name||(0,s.default)(0,"Directive must be named."),Array.isArray(e.locations)||(0,s.default)(0,"@".concat(e.name," locations must be an Array."));var i=null!==(t=e.args)&&void 0!==t?t:{};(0,l.default)(i)&&!Array.isArray(i)||(0,s.default)(0,"@".concat(e.name," args must be an object with argument names as keys.")),this.args=(0,r.default)(i).map((function(e){var n=e[0],t=e[1];return{name:n,description:t.description,type:t.type,defaultValue:t.defaultValue,deprecationReason:t.deprecationReason,extensions:t.extensions&&(0,a.default)(t.extensions),astNode:t.astNode}}))}var n,t,o=e.prototype;return o.toConfig=function(){return{name:this.name,description:this.description,locations:this.locations,args:(0,f.argsToArgsConfig)(this.args),isRepeatable:this.isRepeatable,extensions:this.extensions,astNode:this.astNode}},o.toString=function(){return"@"+this.name},o.toJSON=function(){return this.toString()},n=e,(t=[{key:i.SYMBOL_TO_STRING_TAG,get:function(){return"GraphQLDirective"}}])&&m(n.prototype,t),e}();(0,c.default)(y);var g=new y({name:"include",description:"Directs the executor to include this field or fragment only when the `if` argument is true.",locations:[d.DirectiveLocation.FIELD,d.DirectiveLocation.FRAGMENT_SPREAD,d.DirectiveLocation.INLINE_FRAGMENT],args:{if:{type:new f.GraphQLNonNull(p.GraphQLBoolean),description:"Included when true."}}}),T=new y({name:"skip",description:"Directs the executor to skip this field or fragment when the `if` argument is true.",locations:[d.DirectiveLocation.FIELD,d.DirectiveLocation.FRAGMENT_SPREAD,d.DirectiveLocation.INLINE_FRAGMENT],args:{if:{type:new f.GraphQLNonNull(p.GraphQLBoolean),description:"Skipped when true."}}}),E="No longer supported",_=new y({name:"deprecated",description:"Marks an element of a GraphQL schema as no longer supported.",locations:[d.DirectiveLocation.FIELD_DEFINITION,d.DirectiveLocation.ARGUMENT_DEFINITION,d.DirectiveLocation.INPUT_FIELD_DEFINITION,d.DirectiveLocation.ENUM_VALUE],args:{reason:{type:p.GraphQLString,description:"Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https://commonmark.org/).",defaultValue:E}}}),N=new y({name:"specifiedBy",description:"Exposes a URL that specifies the behaviour of this scalar.",locations:[d.DirectiveLocation.SCALAR],args:{url:{type:new f.GraphQLNonNull(p.GraphQLString),description:"The URL that specifies the behaviour of this scalar."}}}),b=Object.freeze([g,T,_,N]);function j(e){return b.some((function(n){return n.name===e.name}))}},"./node_modules/graphql/type/introspection.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{__Schema:()=>d,__Directive:()=>p,__DirectiveLocation:()=>f,__Type:()=>m,__Field:()=>h,__InputValue:()=>v,__EnumValue:()=>y,TypeKind:()=>g,__TypeKind:()=>T,SchemaMetaFieldDef:()=>E,TypeMetaFieldDef:()=>_,TypeNameMetaFieldDef:()=>N,introspectionTypes:()=>b,isIntrospectionType:()=>j});var r=t("./node_modules/graphql/polyfills/objectValues.mjs"),i=t("./node_modules/graphql/jsutils/inspect.mjs"),o=t("./node_modules/graphql/jsutils/invariant.mjs"),a=t("./node_modules/graphql/language/printer.mjs"),s=t("./node_modules/graphql/language/directiveLocation.mjs"),u=t("./node_modules/graphql/utilities/astFromValue.mjs"),l=t("./node_modules/graphql/type/scalars.mjs"),c=t("./node_modules/graphql/type/definition.mjs"),d=new c.GraphQLObjectType({name:"__Schema",description:"A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.",fields:function(){return{description:{type:l.GraphQLString,resolve:function(e){return e.description}},types:{description:"A list of all types supported by this server.",type:new c.GraphQLNonNull(new c.GraphQLList(new c.GraphQLNonNull(m))),resolve:function(e){return(0,r.default)(e.getTypeMap())}},queryType:{description:"The type that query operations will be rooted at.",type:new c.GraphQLNonNull(m),resolve:function(e){return e.getQueryType()}},mutationType:{description:"If this server supports mutation, the type that mutation operations will be rooted at.",type:m,resolve:function(e){return e.getMutationType()}},subscriptionType:{description:"If this server support subscription, the type that subscription operations will be rooted at.",type:m,resolve:function(e){return e.getSubscriptionType()}},directives:{description:"A list of all directives supported by this server.",type:new c.GraphQLNonNull(new c.GraphQLList(new c.GraphQLNonNull(p))),resolve:function(e){return e.getDirectives()}}}}}),p=new c.GraphQLObjectType({name:"__Directive",description:"A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.\n\nIn some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.",fields:function(){return{name:{type:new c.GraphQLNonNull(l.GraphQLString),resolve:function(e){return e.name}},description:{type:l.GraphQLString,resolve:function(e){return e.description}},isRepeatable:{type:new c.GraphQLNonNull(l.GraphQLBoolean),resolve:function(e){return e.isRepeatable}},locations:{type:new c.GraphQLNonNull(new c.GraphQLList(new c.GraphQLNonNull(f))),resolve:function(e){return e.locations}},args:{type:new c.GraphQLNonNull(new c.GraphQLList(new c.GraphQLNonNull(v))),args:{includeDeprecated:{type:l.GraphQLBoolean,defaultValue:!1}},resolve:function(e,n){return n.includeDeprecated?e.args:e.args.filter((function(e){return null==e.deprecationReason}))}}}}}),f=new c.GraphQLEnumType({name:"__DirectiveLocation",description:"A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.",values:{QUERY:{value:s.DirectiveLocation.QUERY,description:"Location adjacent to a query operation."},MUTATION:{value:s.DirectiveLocation.MUTATION,description:"Location adjacent to a mutation operation."},SUBSCRIPTION:{value:s.DirectiveLocation.SUBSCRIPTION,description:"Location adjacent to a subscription operation."},FIELD:{value:s.DirectiveLocation.FIELD,description:"Location adjacent to a field."},FRAGMENT_DEFINITION:{value:s.DirectiveLocation.FRAGMENT_DEFINITION,description:"Location adjacent to a fragment definition."},FRAGMENT_SPREAD:{value:s.DirectiveLocation.FRAGMENT_SPREAD,description:"Location adjacent to a fragment spread."},INLINE_FRAGMENT:{value:s.DirectiveLocation.INLINE_FRAGMENT,description:"Location adjacent to an inline fragment."},VARIABLE_DEFINITION:{value:s.DirectiveLocation.VARIABLE_DEFINITION,description:"Location adjacent to a variable definition."},SCHEMA:{value:s.DirectiveLocation.SCHEMA,description:"Location adjacent to a schema definition."},SCALAR:{value:s.DirectiveLocation.SCALAR,description:"Location adjacent to a scalar definition."},OBJECT:{value:s.DirectiveLocation.OBJECT,description:"Location adjacent to an object type definition."},FIELD_DEFINITION:{value:s.DirectiveLocation.FIELD_DEFINITION,description:"Location adjacent to a field definition."},ARGUMENT_DEFINITION:{value:s.DirectiveLocation.ARGUMENT_DEFINITION,description:"Location adjacent to an argument definition."},INTERFACE:{value:s.DirectiveLocation.INTERFACE,description:"Location adjacent to an interface definition."},UNION:{value:s.DirectiveLocation.UNION,description:"Location adjacent to a union definition."},ENUM:{value:s.DirectiveLocation.ENUM,description:"Location adjacent to an enum definition."},ENUM_VALUE:{value:s.DirectiveLocation.ENUM_VALUE,description:"Location adjacent to an enum value definition."},INPUT_OBJECT:{value:s.DirectiveLocation.INPUT_OBJECT,description:"Location adjacent to an input object type definition."},INPUT_FIELD_DEFINITION:{value:s.DirectiveLocation.INPUT_FIELD_DEFINITION,description:"Location adjacent to an input object field definition."}}}),m=new c.GraphQLObjectType({name:"__Type",description:"The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\n\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByUrl`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.",fields:function(){return{kind:{type:new c.GraphQLNonNull(T),resolve:function(e){return(0,c.isScalarType)(e)?g.SCALAR:(0,c.isObjectType)(e)?g.OBJECT:(0,c.isInterfaceType)(e)?g.INTERFACE:(0,c.isUnionType)(e)?g.UNION:(0,c.isEnumType)(e)?g.ENUM:(0,c.isInputObjectType)(e)?g.INPUT_OBJECT:(0,c.isListType)(e)?g.LIST:(0,c.isNonNullType)(e)?g.NON_NULL:void(0,o.default)(0,'Unexpected type: "'.concat((0,i.default)(e),'".'))}},name:{type:l.GraphQLString,resolve:function(e){return void 0!==e.name?e.name:void 0}},description:{type:l.GraphQLString,resolve:function(e){return void 0!==e.description?e.description:void 0}},specifiedByUrl:{type:l.GraphQLString,resolve:function(e){return void 0!==e.specifiedByUrl?e.specifiedByUrl:void 0}},fields:{type:new c.GraphQLList(new c.GraphQLNonNull(h)),args:{includeDeprecated:{type:l.GraphQLBoolean,defaultValue:!1}},resolve:function(e,n){var t=n.includeDeprecated;if((0,c.isObjectType)(e)||(0,c.isInterfaceType)(e)){var i=(0,r.default)(e.getFields());return t?i:i.filter((function(e){return null==e.deprecationReason}))}}},interfaces:{type:new c.GraphQLList(new c.GraphQLNonNull(m)),resolve:function(e){if((0,c.isObjectType)(e)||(0,c.isInterfaceType)(e))return e.getInterfaces()}},possibleTypes:{type:new c.GraphQLList(new c.GraphQLNonNull(m)),resolve:function(e,n,t,r){var i=r.schema;if((0,c.isAbstractType)(e))return i.getPossibleTypes(e)}},enumValues:{type:new c.GraphQLList(new c.GraphQLNonNull(y)),args:{includeDeprecated:{type:l.GraphQLBoolean,defaultValue:!1}},resolve:function(e,n){var t=n.includeDeprecated;if((0,c.isEnumType)(e)){var r=e.getValues();return t?r:r.filter((function(e){return null==e.deprecationReason}))}}},inputFields:{type:new c.GraphQLList(new c.GraphQLNonNull(v)),args:{includeDeprecated:{type:l.GraphQLBoolean,defaultValue:!1}},resolve:function(e,n){var t=n.includeDeprecated;if((0,c.isInputObjectType)(e)){var i=(0,r.default)(e.getFields());return t?i:i.filter((function(e){return null==e.deprecationReason}))}}},ofType:{type:m,resolve:function(e){return void 0!==e.ofType?e.ofType:void 0}}}}}),h=new c.GraphQLObjectType({name:"__Field",description:"Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.",fields:function(){return{name:{type:new c.GraphQLNonNull(l.GraphQLString),resolve:function(e){return e.name}},description:{type:l.GraphQLString,resolve:function(e){return e.description}},args:{type:new c.GraphQLNonNull(new c.GraphQLList(new c.GraphQLNonNull(v))),args:{includeDeprecated:{type:l.GraphQLBoolean,defaultValue:!1}},resolve:function(e,n){return n.includeDeprecated?e.args:e.args.filter((function(e){return null==e.deprecationReason}))}},type:{type:new c.GraphQLNonNull(m),resolve:function(e){return e.type}},isDeprecated:{type:new c.GraphQLNonNull(l.GraphQLBoolean),resolve:function(e){return null!=e.deprecationReason}},deprecationReason:{type:l.GraphQLString,resolve:function(e){return e.deprecationReason}}}}}),v=new c.GraphQLObjectType({name:"__InputValue",description:"Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.",fields:function(){return{name:{type:new c.GraphQLNonNull(l.GraphQLString),resolve:function(e){return e.name}},description:{type:l.GraphQLString,resolve:function(e){return e.description}},type:{type:new c.GraphQLNonNull(m),resolve:function(e){return e.type}},defaultValue:{type:l.GraphQLString,description:"A GraphQL-formatted string representing the default value for this input value.",resolve:function(e){var n=e.type,t=e.defaultValue,r=(0,u.astFromValue)(t,n);return r?(0,a.print)(r):null}},isDeprecated:{type:new c.GraphQLNonNull(l.GraphQLBoolean),resolve:function(e){return null!=e.deprecationReason}},deprecationReason:{type:l.GraphQLString,resolve:function(e){return e.deprecationReason}}}}}),y=new c.GraphQLObjectType({name:"__EnumValue",description:"One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.",fields:function(){return{name:{type:new c.GraphQLNonNull(l.GraphQLString),resolve:function(e){return e.name}},description:{type:l.GraphQLString,resolve:function(e){return e.description}},isDeprecated:{type:new c.GraphQLNonNull(l.GraphQLBoolean),resolve:function(e){return null!=e.deprecationReason}},deprecationReason:{type:l.GraphQLString,resolve:function(e){return e.deprecationReason}}}}}),g=Object.freeze({SCALAR:"SCALAR",OBJECT:"OBJECT",INTERFACE:"INTERFACE",UNION:"UNION",ENUM:"ENUM",INPUT_OBJECT:"INPUT_OBJECT",LIST:"LIST",NON_NULL:"NON_NULL"}),T=new c.GraphQLEnumType({name:"__TypeKind",description:"An enum describing what kind of type a given `__Type` is.",values:{SCALAR:{value:g.SCALAR,description:"Indicates this type is a scalar."},OBJECT:{value:g.OBJECT,description:"Indicates this type is an object. `fields` and `interfaces` are valid fields."},INTERFACE:{value:g.INTERFACE,description:"Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields."},UNION:{value:g.UNION,description:"Indicates this type is a union. `possibleTypes` is a valid field."},ENUM:{value:g.ENUM,description:"Indicates this type is an enum. `enumValues` is a valid field."},INPUT_OBJECT:{value:g.INPUT_OBJECT,description:"Indicates this type is an input object. `inputFields` is a valid field."},LIST:{value:g.LIST,description:"Indicates this type is a list. `ofType` is a valid field."},NON_NULL:{value:g.NON_NULL,description:"Indicates this type is a non-null. `ofType` is a valid field."}}}),E={name:"__schema",type:new c.GraphQLNonNull(d),description:"Access the current type schema of this server.",args:[],resolve:function(e,n,t,r){return r.schema},isDeprecated:!1,deprecationReason:void 0,extensions:void 0,astNode:void 0},_={name:"__type",type:m,description:"Request the type information of a single type.",args:[{name:"name",description:void 0,type:new c.GraphQLNonNull(l.GraphQLString),defaultValue:void 0,deprecationReason:void 0,extensions:void 0,astNode:void 0}],resolve:function(e,n,t,r){var i=n.name;return r.schema.getType(i)},isDeprecated:!1,deprecationReason:void 0,extensions:void 0,astNode:void 0},N={name:"__typename",type:new c.GraphQLNonNull(l.GraphQLString),description:"The name of the current Object type at runtime.",args:[],resolve:function(e,n,t,r){return r.parentType.name},isDeprecated:!1,deprecationReason:void 0,extensions:void 0,astNode:void 0},b=Object.freeze([d,p,f,m,h,v,y,T]);function j(e){return b.some((function(n){var t=n.name;return e.name===t}))}},"./node_modules/graphql/type/scalars.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{GraphQLInt:()=>f,GraphQLFloat:()=>m,GraphQLString:()=>v,GraphQLBoolean:()=>y,GraphQLID:()=>g,specifiedScalarTypes:()=>T,isSpecifiedScalarType:()=>E});var r=t("./node_modules/graphql/polyfills/isFinite.mjs"),i=t("./node_modules/graphql/polyfills/isInteger.mjs"),o=t("./node_modules/graphql/jsutils/inspect.mjs"),a=t("./node_modules/graphql/jsutils/isObjectLike.mjs"),s=t("./node_modules/graphql/language/kinds.mjs"),u=t("./node_modules/graphql/language/printer.mjs"),l=t("./node_modules/graphql/error/GraphQLError.mjs"),c=t("./node_modules/graphql/type/definition.mjs"),d=2147483647,p=-2147483648,f=new c.GraphQLScalarType({name:"Int",description:"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.",serialize:function(e){var n=h(e);if("boolean"==typeof n)return n?1:0;var t=n;if("string"==typeof n&&""!==n&&(t=Number(n)),!(0,i.default)(t))throw new l.GraphQLError("Int cannot represent non-integer value: ".concat((0,o.default)(n)));if(t>d||t<p)throw new l.GraphQLError("Int cannot represent non 32-bit signed integer value: "+(0,o.default)(n));return t},parseValue:function(e){if(!(0,i.default)(e))throw new l.GraphQLError("Int cannot represent non-integer value: ".concat((0,o.default)(e)));if(e>d||e<p)throw new l.GraphQLError("Int cannot represent non 32-bit signed integer value: ".concat(e));return e},parseLiteral:function(e){if(e.kind!==s.Kind.INT)throw new l.GraphQLError("Int cannot represent non-integer value: ".concat((0,u.print)(e)),e);var n=parseInt(e.value,10);if(n>d||n<p)throw new l.GraphQLError("Int cannot represent non 32-bit signed integer value: ".concat(e.value),e);return n}}),m=new c.GraphQLScalarType({name:"Float",description:"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).",serialize:function(e){var n=h(e);if("boolean"==typeof n)return n?1:0;var t=n;if("string"==typeof n&&""!==n&&(t=Number(n)),!(0,r.default)(t))throw new l.GraphQLError("Float cannot represent non numeric value: ".concat((0,o.default)(n)));return t},parseValue:function(e){if(!(0,r.default)(e))throw new l.GraphQLError("Float cannot represent non numeric value: ".concat((0,o.default)(e)));return e},parseLiteral:function(e){if(e.kind!==s.Kind.FLOAT&&e.kind!==s.Kind.INT)throw new l.GraphQLError("Float cannot represent non numeric value: ".concat((0,u.print)(e)),e);return parseFloat(e.value)}});function h(e){if((0,a.default)(e)){if("function"==typeof e.valueOf){var n=e.valueOf();if(!(0,a.default)(n))return n}if("function"==typeof e.toJSON)return e.toJSON()}return e}var v=new c.GraphQLScalarType({name:"String",description:"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.",serialize:function(e){var n=h(e);if("string"==typeof n)return n;if("boolean"==typeof n)return n?"true":"false";if((0,r.default)(n))return n.toString();throw new l.GraphQLError("String cannot represent value: ".concat((0,o.default)(e)))},parseValue:function(e){if("string"!=typeof e)throw new l.GraphQLError("String cannot represent a non string value: ".concat((0,o.default)(e)));return e},parseLiteral:function(e){if(e.kind!==s.Kind.STRING)throw new l.GraphQLError("String cannot represent a non string value: ".concat((0,u.print)(e)),e);return e.value}}),y=new c.GraphQLScalarType({name:"Boolean",description:"The `Boolean` scalar type represents `true` or `false`.",serialize:function(e){var n=h(e);if("boolean"==typeof n)return n;if((0,r.default)(n))return 0!==n;throw new l.GraphQLError("Boolean cannot represent a non boolean value: ".concat((0,o.default)(n)))},parseValue:function(e){if("boolean"!=typeof e)throw new l.GraphQLError("Boolean cannot represent a non boolean value: ".concat((0,o.default)(e)));return e},parseLiteral:function(e){if(e.kind!==s.Kind.BOOLEAN)throw new l.GraphQLError("Boolean cannot represent a non boolean value: ".concat((0,u.print)(e)),e);return e.value}}),g=new c.GraphQLScalarType({name:"ID",description:'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.',serialize:function(e){var n=h(e);if("string"==typeof n)return n;if((0,i.default)(n))return String(n);throw new l.GraphQLError("ID cannot represent value: ".concat((0,o.default)(e)))},parseValue:function(e){if("string"==typeof e)return e;if((0,i.default)(e))return e.toString();throw new l.GraphQLError("ID cannot represent value: ".concat((0,o.default)(e)))},parseLiteral:function(e){if(e.kind!==s.Kind.STRING&&e.kind!==s.Kind.INT)throw new l.GraphQLError("ID cannot represent a non-string and non-integer value: "+(0,u.print)(e),e);return e.value}}),T=Object.freeze([v,f,m,y,g]);function E(e){return T.some((function(n){var t=n.name;return e.name===t}))}},"./node_modules/graphql/type/schema.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{isSchema:()=>v,assertSchema:()=>y,GraphQLSchema:()=>g});var r=t("./node_modules/graphql/polyfills/find.mjs"),i=t("./node_modules/graphql/polyfills/arrayFrom.mjs"),o=t("./node_modules/graphql/polyfills/objectValues.mjs"),a=t("./node_modules/graphql/polyfills/symbols.mjs"),s=t("./node_modules/graphql/jsutils/inspect.mjs"),u=t("./node_modules/graphql/jsutils/toObjMap.mjs"),l=t("./node_modules/graphql/jsutils/devAssert.mjs"),c=t("./node_modules/graphql/jsutils/instanceOf.mjs"),d=t("./node_modules/graphql/jsutils/isObjectLike.mjs"),p=t("./node_modules/graphql/type/introspection.mjs"),f=t("./node_modules/graphql/type/directives.mjs"),m=t("./node_modules/graphql/type/definition.mjs");function h(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function v(e){return(0,c.default)(e,g)}function y(e){if(!v(e))throw new Error("Expected ".concat((0,s.default)(e)," to be a GraphQL schema."));return e}var g=function(){function e(e){var n;this.__validationErrors=!0===e.assumeValid?[]:void 0,(0,d.default)(e)||(0,l.default)(0,"Must provide configuration object."),!e.types||Array.isArray(e.types)||(0,l.default)(0,'"types" must be Array if provided but got: '.concat((0,s.default)(e.types),".")),!e.directives||Array.isArray(e.directives)||(0,l.default)(0,'"directives" must be Array if provided but got: '+"".concat((0,s.default)(e.directives),".")),this.description=e.description,this.extensions=e.extensions&&(0,u.default)(e.extensions),this.astNode=e.astNode,this.extensionASTNodes=e.extensionASTNodes,this._queryType=e.query,this._mutationType=e.mutation,this._subscriptionType=e.subscription,this._directives=null!==(n=e.directives)&&void 0!==n?n:f.specifiedDirectives;var t=new Set(e.types);if(null!=e.types)for(var r=0,o=e.types;r<o.length;r++){var a=o[r];t.delete(a),T(a,t)}null!=this._queryType&&T(this._queryType,t),null!=this._mutationType&&T(this._mutationType,t),null!=this._subscriptionType&&T(this._subscriptionType,t);for(var c=0,h=this._directives;c<h.length;c++){var v=h[c];if((0,f.isDirective)(v))for(var y=0,g=v.args;y<g.length;y++)T(g[y].type,t)}T(p.__Schema,t),this._typeMap=Object.create(null),this._subTypeMap=Object.create(null),this._implementationsMap=Object.create(null);for(var E=0,_=(0,i.default)(t);E<_.length;E++){var N=_[E];if(null!=N){var b=N.name;if(b||(0,l.default)(0,"One of the provided types for building the Schema is missing a name."),void 0!==this._typeMap[b])throw new Error('Schema must contain uniquely named types but contains multiple types named "'.concat(b,'".'));if(this._typeMap[b]=N,(0,m.isInterfaceType)(N))for(var j=0,I=N.getInterfaces();j<I.length;j++){var O=I[j];if((0,m.isInterfaceType)(O)){var L=this._implementationsMap[O.name];void 0===L&&(L=this._implementationsMap[O.name]={objects:[],interfaces:[]}),L.interfaces.push(N)}}else if((0,m.isObjectType)(N))for(var S=0,D=N.getInterfaces();S<D.length;S++){var A=D[S];if((0,m.isInterfaceType)(A)){var w=this._implementationsMap[A.name];void 0===w&&(w=this._implementationsMap[A.name]={objects:[],interfaces:[]}),w.objects.push(N)}}}}}var n,t,c=e.prototype;return c.getQueryType=function(){return this._queryType},c.getMutationType=function(){return this._mutationType},c.getSubscriptionType=function(){return this._subscriptionType},c.getTypeMap=function(){return this._typeMap},c.getType=function(e){return this.getTypeMap()[e]},c.getPossibleTypes=function(e){return(0,m.isUnionType)(e)?e.getTypes():this.getImplementations(e).objects},c.getImplementations=function(e){var n=this._implementationsMap[e.name];return null!=n?n:{objects:[],interfaces:[]}},c.isPossibleType=function(e,n){return this.isSubType(e,n)},c.isSubType=function(e,n){var t=this._subTypeMap[e.name];if(void 0===t){if(t=Object.create(null),(0,m.isUnionType)(e))for(var r=0,i=e.getTypes();r<i.length;r++)t[i[r].name]=!0;else{for(var o=this.getImplementations(e),a=0,s=o.objects;a<s.length;a++)t[s[a].name]=!0;for(var u=0,l=o.interfaces;u<l.length;u++)t[l[u].name]=!0}this._subTypeMap[e.name]=t}return void 0!==t[n.name]},c.getDirectives=function(){return this._directives},c.getDirective=function(e){return(0,r.default)(this.getDirectives(),(function(n){return n.name===e}))},c.toConfig=function(){var e;return{description:this.description,query:this.getQueryType(),mutation:this.getMutationType(),subscription:this.getSubscriptionType(),types:(0,o.default)(this.getTypeMap()),directives:this.getDirectives().slice(),extensions:this.extensions,astNode:this.astNode,extensionASTNodes:null!==(e=this.extensionASTNodes)&&void 0!==e?e:[],assumeValid:void 0!==this.__validationErrors}},n=e,(t=[{key:a.SYMBOL_TO_STRING_TAG,get:function(){return"GraphQLSchema"}}])&&h(n.prototype,t),e}();function T(e,n){var t=(0,m.getNamedType)(e);if(!n.has(t))if(n.add(t),(0,m.isUnionType)(t))for(var r=0,i=t.getTypes();r<i.length;r++)T(i[r],n);else if((0,m.isObjectType)(t)||(0,m.isInterfaceType)(t)){for(var a=0,s=t.getInterfaces();a<s.length;a++)T(s[a],n);for(var u=0,l=(0,o.default)(t.getFields());u<l.length;u++){var c=l[u];T(c.type,n);for(var d=0,p=c.args;d<p.length;d++)T(p[d].type,n)}}else if((0,m.isInputObjectType)(t))for(var f=0,h=(0,o.default)(t.getFields());f<h.length;f++)T(h[f].type,n);return n}},"./node_modules/graphql/type/validate.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{validateSchema:()=>m,assertValidSchema:()=>h});var r=t("./node_modules/graphql/polyfills/find.mjs"),i=t("./node_modules/graphql/polyfills/objectValues.mjs"),o=t("./node_modules/graphql/jsutils/inspect.mjs"),a=t("./node_modules/graphql/error/GraphQLError.mjs"),s=t("./node_modules/graphql/error/locatedError.mjs"),u=t("./node_modules/graphql/utilities/assertValidName.mjs"),l=t("./node_modules/graphql/utilities/typeComparators.mjs"),c=t("./node_modules/graphql/type/schema.mjs"),d=t("./node_modules/graphql/type/introspection.mjs"),p=t("./node_modules/graphql/type/directives.mjs"),f=t("./node_modules/graphql/type/definition.mjs");function m(e){if((0,c.assertSchema)(e),e.__validationErrors)return e.__validationErrors;var n=new v(e);!function(e){var n=e.schema,t=n.getQueryType();if(t){if(!(0,f.isObjectType)(t)){var r;e.reportError("Query root type must be Object type, it cannot be ".concat((0,o.default)(t),"."),null!==(r=y(n,"query"))&&void 0!==r?r:t.astNode)}}else e.reportError("Query root type must be provided.",n.astNode);var i,a=n.getMutationType();a&&!(0,f.isObjectType)(a)&&e.reportError("Mutation root type must be Object type if provided, it cannot be "+"".concat((0,o.default)(a),"."),null!==(i=y(n,"mutation"))&&void 0!==i?i:a.astNode);var s,u=n.getSubscriptionType();u&&!(0,f.isObjectType)(u)&&e.reportError("Subscription root type must be Object type if provided, it cannot be "+"".concat((0,o.default)(u),"."),null!==(s=y(n,"subscription"))&&void 0!==s?s:u.astNode)}(n),function(e){for(var n=0,t=e.schema.getDirectives();n<t.length;n++){var r=t[n];if((0,p.isDirective)(r)){g(e,r);for(var i=0,a=r.args;i<a.length;i++){var s,u=a[i];g(e,u),(0,f.isInputType)(u.type)||e.reportError("The type of @".concat(r.name,"(").concat(u.name,":) must be Input Type ")+"but got: ".concat((0,o.default)(u.type),"."),u.astNode),(0,f.isRequiredArgument)(u)&&null!=u.deprecationReason&&e.reportError("Required argument @".concat(r.name,"(").concat(u.name,":) cannot be deprecated."),[A(u.astNode),null===(s=u.astNode)||void 0===s?void 0:s.type])}}else e.reportError("Expected directive but got: ".concat((0,o.default)(r),"."),null==r?void 0:r.astNode)}}(n),function(e){for(var n=function(e){var n=Object.create(null),t=[],r=Object.create(null);return function o(a){if(!n[a.name]){n[a.name]=!0,r[a.name]=t.length;for(var s=(0,i.default)(a.getFields()),u=0;u<s.length;u++){var l=s[u];if((0,f.isNonNullType)(l.type)&&(0,f.isInputObjectType)(l.type.ofType)){var c=l.type.ofType,d=r[c.name];if(t.push(l),void 0===d)o(c);else{var p=t.slice(d),m=p.map((function(e){return e.name})).join(".");e.reportError('Cannot reference Input Object "'.concat(c.name,'" within itself through a series of non-null fields: "').concat(m,'".'),p.map((function(e){return e.astNode})))}t.pop()}}r[a.name]=void 0}}}(e),t=e.schema.getTypeMap(),r=0,a=(0,i.default)(t);r<a.length;r++){var s=a[r];(0,f.isNamedType)(s)?((0,d.isIntrospectionType)(s)||g(e,s),(0,f.isObjectType)(s)||(0,f.isInterfaceType)(s)?(T(e,s),E(e,s)):(0,f.isUnionType)(s)?b(e,s):(0,f.isEnumType)(s)?j(e,s):(0,f.isInputObjectType)(s)&&(I(e,s),n(s))):e.reportError("Expected GraphQL named type but got: ".concat((0,o.default)(s),"."),s.astNode)}}(n);var t=n.getErrors();return e.__validationErrors=t,t}function h(e){var n=m(e);if(0!==n.length)throw new Error(n.map((function(e){return e.message})).join("\n\n"))}var v=function(){function e(e){this._errors=[],this.schema=e}var n=e.prototype;return n.reportError=function(e,n){var t=Array.isArray(n)?n.filter(Boolean):n;this.addError(new a.GraphQLError(e,t))},n.addError=function(e){this._errors.push(e)},n.getErrors=function(){return this._errors},e}();function y(e,n){for(var t=L(e,(function(e){return e.operationTypes})),r=0;r<t.length;r++){var i=t[r];if(i.operation===n)return i.type}}function g(e,n){var t=(0,u.isValidNameError)(n.name);t&&e.addError((0,s.locatedError)(t,n.astNode))}function T(e,n){var t=(0,i.default)(n.getFields());0===t.length&&e.reportError("Type ".concat(n.name," must define one or more fields."),O(n));for(var r=0;r<t.length;r++){var a,s=t[r];g(e,s),(0,f.isOutputType)(s.type)||e.reportError("The type of ".concat(n.name,".").concat(s.name," must be Output Type ")+"but got: ".concat((0,o.default)(s.type),"."),null===(a=s.astNode)||void 0===a?void 0:a.type);for(var u=0,l=s.args;u<l.length;u++){var c,d,p=l[u],m=p.name;g(e,p),(0,f.isInputType)(p.type)||e.reportError("The type of ".concat(n.name,".").concat(s.name,"(").concat(m,":) must be Input ")+"Type but got: ".concat((0,o.default)(p.type),"."),null===(c=p.astNode)||void 0===c?void 0:c.type),(0,f.isRequiredArgument)(p)&&null!=p.deprecationReason&&e.reportError("Required argument ".concat(n.name,".").concat(s.name,"(").concat(m,":) cannot be deprecated."),[A(p.astNode),null===(d=p.astNode)||void 0===d?void 0:d.type])}}}function E(e,n){for(var t=Object.create(null),r=0,i=n.getInterfaces();r<i.length;r++){var a=i[r];(0,f.isInterfaceType)(a)?n!==a?t[a.name]?e.reportError("Type ".concat(n.name," can only implement ").concat(a.name," once."),S(n,a)):(t[a.name]=!0,N(e,n,a),_(e,n,a)):e.reportError("Type ".concat(n.name," cannot implement itself because it would create a circular reference."),S(n,a)):e.reportError("Type ".concat((0,o.default)(n)," must only implement Interface types, ")+"it cannot implement ".concat((0,o.default)(a),"."),S(n,a))}}function _(e,n,t){for(var a=n.getFields(),s=0,u=(0,i.default)(t.getFields());s<u.length;s++){var c=u[s],d=c.name,p=a[d];if(p){var m,h;(0,l.isTypeSubTypeOf)(e.schema,p.type,c.type)||e.reportError("Interface field ".concat(t.name,".").concat(d," expects type ")+"".concat((0,o.default)(c.type)," but ").concat(n.name,".").concat(d," ")+"is type ".concat((0,o.default)(p.type),"."),[null===(m=c.astNode)||void 0===m?void 0:m.type,null===(h=p.astNode)||void 0===h?void 0:h.type]);for(var v=function(i,a){var s,u,c=a[i],f=c.name,m=(0,r.default)(p.args,(function(e){return e.name===f}));if(!m)return e.reportError("Interface field argument ".concat(t.name,".").concat(d,"(").concat(f,":) expected but ").concat(n.name,".").concat(d," does not provide it."),[c.astNode,p.astNode]),"continue";(0,l.isEqualType)(c.type,m.type)||e.reportError("Interface field argument ".concat(t.name,".").concat(d,"(").concat(f,":) ")+"expects type ".concat((0,o.default)(c.type)," but ")+"".concat(n.name,".").concat(d,"(").concat(f,":) is type ")+"".concat((0,o.default)(m.type),"."),[null===(s=c.astNode)||void 0===s?void 0:s.type,null===(u=m.astNode)||void 0===u?void 0:u.type])},y=0,g=c.args;y<g.length;y++)v(y,g);for(var T=function(i,o){var a=o[i],s=a.name;!(0,r.default)(c.args,(function(e){return e.name===s}))&&(0,f.isRequiredArgument)(a)&&e.reportError("Object field ".concat(n.name,".").concat(d," includes required argument ").concat(s," that is missing from the Interface field ").concat(t.name,".").concat(d,"."),[a.astNode,c.astNode])},E=0,_=p.args;E<_.length;E++)T(E,_)}else e.reportError("Interface field ".concat(t.name,".").concat(d," expected but ").concat(n.name," does not provide it."),[c.astNode].concat(O(n)))}}function N(e,n,t){for(var r=n.getInterfaces(),i=0,o=t.getInterfaces();i<o.length;i++){var a=o[i];-1===r.indexOf(a)&&e.reportError(a===n?"Type ".concat(n.name," cannot implement ").concat(t.name," because it would create a circular reference."):"Type ".concat(n.name," must implement ").concat(a.name," because it is implemented by ").concat(t.name,"."),[].concat(S(t,a),S(n,t)))}}function b(e,n){var t=n.getTypes();0===t.length&&e.reportError("Union type ".concat(n.name," must define one or more member types."),O(n));for(var r=Object.create(null),i=0;i<t.length;i++){var a=t[i];r[a.name]?e.reportError("Union type ".concat(n.name," can only include type ").concat(a.name," once."),D(n,a.name)):(r[a.name]=!0,(0,f.isObjectType)(a)||e.reportError("Union type ".concat(n.name," can only include Object types, ")+"it cannot include ".concat((0,o.default)(a),"."),D(n,String(a))))}}function j(e,n){var t=n.getValues();0===t.length&&e.reportError("Enum type ".concat(n.name," must define one or more values."),O(n));for(var r=0;r<t.length;r++){var i=t[r],o=i.name;g(e,i),"true"!==o&&"false"!==o&&"null"!==o||e.reportError("Enum type ".concat(n.name," cannot include value: ").concat(o,"."),i.astNode)}}function I(e,n){var t=(0,i.default)(n.getFields());0===t.length&&e.reportError("Input Object type ".concat(n.name," must define one or more fields."),O(n));for(var r=0;r<t.length;r++){var a,s,u=t[r];g(e,u),(0,f.isInputType)(u.type)||e.reportError("The type of ".concat(n.name,".").concat(u.name," must be Input Type ")+"but got: ".concat((0,o.default)(u.type),"."),null===(a=u.astNode)||void 0===a?void 0:a.type),(0,f.isRequiredInputField)(u)&&null!=u.deprecationReason&&e.reportError("Required input field ".concat(n.name,".").concat(u.name," cannot be deprecated."),[A(u.astNode),null===(s=u.astNode)||void 0===s?void 0:s.type])}}function O(e){var n=e.astNode,t=e.extensionASTNodes;return n?t?[n].concat(t):[n]:null!=t?t:[]}function L(e,n){for(var t=[],r=0,i=O(e);r<i.length;r++){var o,a=i[r];t=t.concat(null!==(o=n(a))&&void 0!==o?o:[])}return t}function S(e,n){return L(e,(function(e){return e.interfaces})).filter((function(e){return e.name.value===n.name}))}function D(e,n){return L(e,(function(e){return e.types})).filter((function(e){return e.name.value===n}))}function A(e){var n;return null==e||null===(n=e.directives)||void 0===n?void 0:n.find((function(e){return e.name.value===p.GraphQLDeprecatedDirective.name}))}},"./node_modules/graphql/utilities/TypeInfo.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{TypeInfo:()=>c,visitWithTypeInfo:()=>p});var r=t("./node_modules/graphql/polyfills/find.mjs"),i=t("./node_modules/graphql/language/kinds.mjs"),o=t("./node_modules/graphql/language/ast.mjs"),a=t("./node_modules/graphql/language/visitor.mjs"),s=t("./node_modules/graphql/type/definition.mjs"),u=t("./node_modules/graphql/type/introspection.mjs"),l=t("./node_modules/graphql/utilities/typeFromAST.mjs"),c=function(){function e(e,n,t){this._schema=e,this._typeStack=[],this._parentTypeStack=[],this._inputTypeStack=[],this._fieldDefStack=[],this._defaultValueStack=[],this._directive=null,this._argument=null,this._enumValue=null,this._getFieldDef=null!=n?n:d,t&&((0,s.isInputType)(t)&&this._inputTypeStack.push(t),(0,s.isCompositeType)(t)&&this._parentTypeStack.push(t),(0,s.isOutputType)(t)&&this._typeStack.push(t))}var n=e.prototype;return n.getType=function(){if(this._typeStack.length>0)return this._typeStack[this._typeStack.length-1]},n.getParentType=function(){if(this._parentTypeStack.length>0)return this._parentTypeStack[this._parentTypeStack.length-1]},n.getInputType=function(){if(this._inputTypeStack.length>0)return this._inputTypeStack[this._inputTypeStack.length-1]},n.getParentInputType=function(){if(this._inputTypeStack.length>1)return this._inputTypeStack[this._inputTypeStack.length-2]},n.getFieldDef=function(){if(this._fieldDefStack.length>0)return this._fieldDefStack[this._fieldDefStack.length-1]},n.getDefaultValue=function(){if(this._defaultValueStack.length>0)return this._defaultValueStack[this._defaultValueStack.length-1]},n.getDirective=function(){return this._directive},n.getArgument=function(){return this._argument},n.getEnumValue=function(){return this._enumValue},n.enter=function(e){var n=this._schema;switch(e.kind){case i.Kind.SELECTION_SET:var t=(0,s.getNamedType)(this.getType());this._parentTypeStack.push((0,s.isCompositeType)(t)?t:void 0);break;case i.Kind.FIELD:var o,a,u=this.getParentType();u&&(o=this._getFieldDef(n,u,e))&&(a=o.type),this._fieldDefStack.push(o),this._typeStack.push((0,s.isOutputType)(a)?a:void 0);break;case i.Kind.DIRECTIVE:this._directive=n.getDirective(e.name.value);break;case i.Kind.OPERATION_DEFINITION:var c;switch(e.operation){case"query":c=n.getQueryType();break;case"mutation":c=n.getMutationType();break;case"subscription":c=n.getSubscriptionType()}this._typeStack.push((0,s.isObjectType)(c)?c:void 0);break;case i.Kind.INLINE_FRAGMENT:case i.Kind.FRAGMENT_DEFINITION:var d=e.typeCondition,p=d?(0,l.typeFromAST)(n,d):(0,s.getNamedType)(this.getType());this._typeStack.push((0,s.isOutputType)(p)?p:void 0);break;case i.Kind.VARIABLE_DEFINITION:var f=(0,l.typeFromAST)(n,e.type);this._inputTypeStack.push((0,s.isInputType)(f)?f:void 0);break;case i.Kind.ARGUMENT:var m,h,v,y=null!==(m=this.getDirective())&&void 0!==m?m:this.getFieldDef();y&&(h=(0,r.default)(y.args,(function(n){return n.name===e.name.value})))&&(v=h.type),this._argument=h,this._defaultValueStack.push(h?h.defaultValue:void 0),this._inputTypeStack.push((0,s.isInputType)(v)?v:void 0);break;case i.Kind.LIST:var g=(0,s.getNullableType)(this.getInputType()),T=(0,s.isListType)(g)?g.ofType:g;this._defaultValueStack.push(void 0),this._inputTypeStack.push((0,s.isInputType)(T)?T:void 0);break;case i.Kind.OBJECT_FIELD:var E,_,N=(0,s.getNamedType)(this.getInputType());(0,s.isInputObjectType)(N)&&(_=N.getFields()[e.name.value])&&(E=_.type),this._defaultValueStack.push(_?_.defaultValue:void 0),this._inputTypeStack.push((0,s.isInputType)(E)?E:void 0);break;case i.Kind.ENUM:var b,j=(0,s.getNamedType)(this.getInputType());(0,s.isEnumType)(j)&&(b=j.getValue(e.value)),this._enumValue=b}},n.leave=function(e){switch(e.kind){case i.Kind.SELECTION_SET:this._parentTypeStack.pop();break;case i.Kind.FIELD:this._fieldDefStack.pop(),this._typeStack.pop();break;case i.Kind.DIRECTIVE:this._directive=null;break;case i.Kind.OPERATION_DEFINITION:case i.Kind.INLINE_FRAGMENT:case i.Kind.FRAGMENT_DEFINITION:this._typeStack.pop();break;case i.Kind.VARIABLE_DEFINITION:this._inputTypeStack.pop();break;case i.Kind.ARGUMENT:this._argument=null,this._defaultValueStack.pop(),this._inputTypeStack.pop();break;case i.Kind.LIST:case i.Kind.OBJECT_FIELD:this._defaultValueStack.pop(),this._inputTypeStack.pop();break;case i.Kind.ENUM:this._enumValue=null}},e}();function d(e,n,t){var r=t.name.value;return r===u.SchemaMetaFieldDef.name&&e.getQueryType()===n?u.SchemaMetaFieldDef:r===u.TypeMetaFieldDef.name&&e.getQueryType()===n?u.TypeMetaFieldDef:r===u.TypeNameMetaFieldDef.name&&(0,s.isCompositeType)(n)?u.TypeNameMetaFieldDef:(0,s.isObjectType)(n)||(0,s.isInterfaceType)(n)?n.getFields()[r]:void 0}function p(e,n){return{enter:function(t){e.enter(t);var r=(0,a.getVisitFn)(n,t.kind,!1);if(r){var i=r.apply(n,arguments);return void 0!==i&&(e.leave(t),(0,o.isNode)(i)&&e.enter(i)),i}},leave:function(t){var r,i=(0,a.getVisitFn)(n,t.kind,!0);return i&&(r=i.apply(n,arguments)),e.leave(t),r}}}},"./node_modules/graphql/utilities/assertValidName.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{assertValidName:()=>a,isValidNameError:()=>s});var r=t("./node_modules/graphql/jsutils/devAssert.mjs"),i=t("./node_modules/graphql/error/GraphQLError.mjs"),o=/^[_a-zA-Z][_a-zA-Z0-9]*$/;function a(e){var n=s(e);if(n)throw n;return e}function s(e){return"string"==typeof e||(0,r.default)(0,"Expected name to be a string."),e.length>1&&"_"===e[0]&&"_"===e[1]?new i.GraphQLError('Name "'.concat(e,'" must not begin with "__", which is reserved by GraphQL introspection.')):o.test(e)?void 0:new i.GraphQLError('Names must match /^[_a-zA-Z][_a-zA-Z0-9]*$/ but "'.concat(e,'" does not.'))}},"./node_modules/graphql/utilities/astFromValue.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{astFromValue:()=>p});var r=t("./node_modules/graphql/polyfills/isFinite.mjs"),i=t("./node_modules/graphql/polyfills/objectValues.mjs"),o=t("./node_modules/graphql/jsutils/inspect.mjs"),a=t("./node_modules/graphql/jsutils/invariant.mjs"),s=t("./node_modules/graphql/jsutils/isObjectLike.mjs"),u=t("./node_modules/graphql/jsutils/safeArrayFrom.mjs"),l=t("./node_modules/graphql/language/kinds.mjs"),c=t("./node_modules/graphql/type/scalars.mjs"),d=t("./node_modules/graphql/type/definition.mjs");function p(e,n){if((0,d.isNonNullType)(n)){var t=p(e,n.ofType);return(null==t?void 0:t.kind)===l.Kind.NULL?null:t}if(null===e)return{kind:l.Kind.NULL};if(void 0===e)return null;if((0,d.isListType)(n)){var m=n.ofType,h=(0,u.default)(e);if(null!=h){for(var v=[],y=0;y<h.length;y++){var g=p(h[y],m);null!=g&&v.push(g)}return{kind:l.Kind.LIST,values:v}}return p(e,m)}if((0,d.isInputObjectType)(n)){if(!(0,s.default)(e))return null;for(var T=[],E=0,_=(0,i.default)(n.getFields());E<_.length;E++){var N=_[E],b=p(e[N.name],N.type);b&&T.push({kind:l.Kind.OBJECT_FIELD,name:{kind:l.Kind.NAME,value:N.name},value:b})}return{kind:l.Kind.OBJECT,fields:T}}if((0,d.isLeafType)(n)){var j=n.serialize(e);if(null==j)return null;if("boolean"==typeof j)return{kind:l.Kind.BOOLEAN,value:j};if("number"==typeof j&&(0,r.default)(j)){var I=String(j);return f.test(I)?{kind:l.Kind.INT,value:I}:{kind:l.Kind.FLOAT,value:I}}if("string"==typeof j)return(0,d.isEnumType)(n)?{kind:l.Kind.ENUM,value:j}:n===c.GraphQLID&&f.test(j)?{kind:l.Kind.INT,value:j}:{kind:l.Kind.STRING,value:j};throw new TypeError("Cannot convert value to AST: ".concat((0,o.default)(j),"."))}(0,a.default)(0,"Unexpected input type: "+(0,o.default)(n))}var f=/^-?(?:0|[1-9][0-9]*)$/},"./node_modules/graphql/utilities/buildASTSchema.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{buildASTSchema:()=>c,buildSchema:()=>d});var r=t("./node_modules/graphql/jsutils/devAssert.mjs"),i=t("./node_modules/graphql/language/kinds.mjs"),o=t("./node_modules/graphql/language/parser.mjs"),a=t("./node_modules/graphql/validation/validate.mjs"),s=t("./node_modules/graphql/type/schema.mjs"),u=t("./node_modules/graphql/type/directives.mjs"),l=t("./node_modules/graphql/utilities/extendSchema.mjs");function c(e,n){null!=e&&e.kind===i.Kind.DOCUMENT||(0,r.default)(0,"Must provide valid Document AST."),!0!==(null==n?void 0:n.assumeValid)&&!0!==(null==n?void 0:n.assumeValidSDL)&&(0,a.assertValidSDL)(e);var t=(0,l.extendSchemaImpl)({description:void 0,types:[],directives:[],extensions:void 0,extensionASTNodes:[],assumeValid:!1},e,n);if(null==t.astNode)for(var o=0,c=t.types;o<c.length;o++){var d=c[o];switch(d.name){case"Query":t.query=d;break;case"Mutation":t.mutation=d;break;case"Subscription":t.subscription=d}}for(var p=t.directives,f=function(e){var n=u.specifiedDirectives[e];p.every((function(e){return e.name!==n.name}))&&p.push(n)},m=0;m<u.specifiedDirectives.length;m++)f(m);return new s.GraphQLSchema(t)}function d(e,n){return c((0,o.parse)(e,{noLocation:null==n?void 0:n.noLocation,allowLegacySDLEmptyFields:null==n?void 0:n.allowLegacySDLEmptyFields,allowLegacySDLImplementsInterfaces:null==n?void 0:n.allowLegacySDLImplementsInterfaces,experimentalFragmentVariables:null==n?void 0:n.experimentalFragmentVariables}),{commentDescriptions:null==n?void 0:n.commentDescriptions,assumeValidSDL:null==n?void 0:n.assumeValidSDL,assumeValid:null==n?void 0:n.assumeValid})}},"./node_modules/graphql/utilities/buildClientSchema.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{buildClientSchema:()=>h});var r=t("./node_modules/graphql/polyfills/objectValues.mjs"),i=t("./node_modules/graphql/jsutils/inspect.mjs"),o=t("./node_modules/graphql/jsutils/devAssert.mjs"),a=t("./node_modules/graphql/jsutils/keyValMap.mjs"),s=t("./node_modules/graphql/jsutils/isObjectLike.mjs"),u=t("./node_modules/graphql/language/parser.mjs"),l=t("./node_modules/graphql/type/schema.mjs"),c=t("./node_modules/graphql/type/directives.mjs"),d=t("./node_modules/graphql/type/scalars.mjs"),p=t("./node_modules/graphql/type/introspection.mjs"),f=t("./node_modules/graphql/type/definition.mjs"),m=t("./node_modules/graphql/utilities/valueFromAST.mjs");function h(e,n){(0,s.default)(e)&&(0,s.default)(e.__schema)||(0,o.default)(0,'Invalid or incomplete introspection result. Ensure that you are passing "data" property of introspection response and no "errors" was returned alongside: '.concat((0,i.default)(e),"."));for(var t=e.__schema,h=(0,a.default)(t.types,(function(e){return e.name}),(function(e){return function(e){if(null!=e&&null!=e.name&&null!=e.kind)switch(e.kind){case p.TypeKind.SCALAR:return r=e,new f.GraphQLScalarType({name:r.name,description:r.description,specifiedByUrl:r.specifiedByUrl});case p.TypeKind.OBJECT:return t=e,new f.GraphQLObjectType({name:t.name,description:t.description,interfaces:function(){return L(t)},fields:function(){return S(t)}});case p.TypeKind.INTERFACE:return n=e,new f.GraphQLInterfaceType({name:n.name,description:n.description,interfaces:function(){return L(n)},fields:function(){return S(n)}});case p.TypeKind.UNION:return function(e){if(!e.possibleTypes){var n=(0,i.default)(e);throw new Error("Introspection result missing possibleTypes: ".concat(n,"."))}return new f.GraphQLUnionType({name:e.name,description:e.description,types:function(){return e.possibleTypes.map(I)}})}(e);case p.TypeKind.ENUM:return function(e){if(!e.enumValues){var n=(0,i.default)(e);throw new Error("Introspection result missing enumValues: ".concat(n,"."))}return new f.GraphQLEnumType({name:e.name,description:e.description,values:(0,a.default)(e.enumValues,(function(e){return e.name}),(function(e){return{description:e.description,deprecationReason:e.deprecationReason}}))})}(e);case p.TypeKind.INPUT_OBJECT:return function(e){if(!e.inputFields){var n=(0,i.default)(e);throw new Error("Introspection result missing inputFields: ".concat(n,"."))}return new f.GraphQLInputObjectType({name:e.name,description:e.description,fields:function(){return A(e.inputFields)}})}(e)}var n,t,r,o=(0,i.default)(e);throw new Error("Invalid or incomplete introspection result. Ensure that a full introspection query is used in order to build a client schema: ".concat(o,"."))}(e)})),v=0,y=[].concat(d.specifiedScalarTypes,p.introspectionTypes);v<y.length;v++){var g=y[v];h[g.name]&&(h[g.name]=g)}var T=t.queryType?I(t.queryType):null,E=t.mutationType?I(t.mutationType):null,_=t.subscriptionType?I(t.subscriptionType):null,N=t.directives?t.directives.map((function(e){if(!e.args){var n=(0,i.default)(e);throw new Error("Introspection result missing directive args: ".concat(n,"."))}if(!e.locations){var t=(0,i.default)(e);throw new Error("Introspection result missing directive locations: ".concat(t,"."))}return new c.GraphQLDirective({name:e.name,description:e.description,isRepeatable:e.isRepeatable,locations:e.locations.slice(),args:A(e.args)})})):[];return new l.GraphQLSchema({description:t.description,query:T,mutation:E,subscription:_,types:(0,r.default)(h),directives:N,assumeValid:null==n?void 0:n.assumeValid});function b(e){if(e.kind===p.TypeKind.LIST){var n=e.ofType;if(!n)throw new Error("Decorated type deeper than introspection query.");return new f.GraphQLList(b(n))}if(e.kind===p.TypeKind.NON_NULL){var t=e.ofType;if(!t)throw new Error("Decorated type deeper than introspection query.");var r=b(t);return new f.GraphQLNonNull((0,f.assertNullableType)(r))}return j(e)}function j(e){var n=e.name;if(!n)throw new Error("Unknown type reference: ".concat((0,i.default)(e),"."));var t=h[n];if(!t)throw new Error("Invalid or incomplete schema, unknown type: ".concat(n,". Ensure that a full introspection query is used in order to build a client schema."));return t}function I(e){return(0,f.assertObjectType)(j(e))}function O(e){return(0,f.assertInterfaceType)(j(e))}function L(e){if(null===e.interfaces&&e.kind===p.TypeKind.INTERFACE)return[];if(!e.interfaces){var n=(0,i.default)(e);throw new Error("Introspection result missing interfaces: ".concat(n,"."))}return e.interfaces.map(O)}function S(e){if(!e.fields)throw new Error("Introspection result missing fields: ".concat((0,i.default)(e),"."));return(0,a.default)(e.fields,(function(e){return e.name}),D)}function D(e){var n=b(e.type);if(!(0,f.isOutputType)(n)){var t=(0,i.default)(n);throw new Error("Introspection must provide output type for fields, but received: ".concat(t,"."))}if(!e.args){var r=(0,i.default)(e);throw new Error("Introspection result missing field args: ".concat(r,"."))}return{description:e.description,deprecationReason:e.deprecationReason,type:n,args:A(e.args)}}function A(e){return(0,a.default)(e,(function(e){return e.name}),w)}function w(e){var n=b(e.type);if(!(0,f.isInputType)(n)){var t=(0,i.default)(n);throw new Error("Introspection must provide input type for arguments, but received: ".concat(t,"."))}var r=null!=e.defaultValue?(0,m.valueFromAST)((0,u.parseValue)(e.defaultValue),n):void 0;return{description:e.description,type:n,defaultValue:r,deprecationReason:e.deprecationReason}}}},"./node_modules/graphql/utilities/coerceInputValue.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{coerceInputValue:()=>m});var r=t("./node_modules/graphql/polyfills/objectValues.mjs"),i=t("./node_modules/graphql/jsutils/inspect.mjs"),o=t("./node_modules/graphql/jsutils/invariant.mjs"),a=t("./node_modules/graphql/jsutils/didYouMean.mjs"),s=t("./node_modules/graphql/jsutils/isObjectLike.mjs"),u=t("./node_modules/graphql/jsutils/safeArrayFrom.mjs"),l=t("./node_modules/graphql/jsutils/suggestionList.mjs"),c=t("./node_modules/graphql/jsutils/printPathArray.mjs"),d=t("./node_modules/graphql/jsutils/Path.mjs"),p=t("./node_modules/graphql/error/GraphQLError.mjs"),f=t("./node_modules/graphql/type/definition.mjs");function m(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:h;return v(e,n,t)}function h(e,n,t){var r="Invalid value "+(0,i.default)(n);throw e.length>0&&(r+=' at "value'.concat((0,c.default)(e),'"')),t.message=r+": "+t.message,t}function v(e,n,t,c){if((0,f.isNonNullType)(n))return null!=e?v(e,n.ofType,t,c):void t((0,d.pathToArray)(c),e,new p.GraphQLError('Expected non-nullable type "'.concat((0,i.default)(n),'" not to be null.')));if(null==e)return null;if((0,f.isListType)(n)){var m=n.ofType,h=(0,u.default)(e,(function(e,n){var r=(0,d.addPath)(c,n,void 0);return v(e,m,t,r)}));return null!=h?h:[v(e,m,t,c)]}if((0,f.isInputObjectType)(n)){if(!(0,s.default)(e))return void t((0,d.pathToArray)(c),e,new p.GraphQLError('Expected type "'.concat(n.name,'" to be an object.')));for(var y={},g=n.getFields(),T=0,E=(0,r.default)(g);T<E.length;T++){var _=E[T],N=e[_.name];if(void 0!==N)y[_.name]=v(N,_.type,t,(0,d.addPath)(c,_.name,n.name));else if(void 0!==_.defaultValue)y[_.name]=_.defaultValue;else if((0,f.isNonNullType)(_.type)){var b=(0,i.default)(_.type);t((0,d.pathToArray)(c),e,new p.GraphQLError('Field "'.concat(_.name,'" of required type "').concat(b,'" was not provided.')))}}for(var j=0,I=Object.keys(e);j<I.length;j++){var O=I[j];if(!g[O]){var L=(0,l.default)(O,Object.keys(n.getFields()));t((0,d.pathToArray)(c),e,new p.GraphQLError('Field "'.concat(O,'" is not defined by type "').concat(n.name,'".')+(0,a.default)(L)))}}return y}if((0,f.isLeafType)(n)){var S;try{S=n.parseValue(e)}catch(r){return void(r instanceof p.GraphQLError?t((0,d.pathToArray)(c),e,r):t((0,d.pathToArray)(c),e,new p.GraphQLError('Expected type "'.concat(n.name,'". ')+r.message,void 0,void 0,void 0,void 0,r)))}return void 0===S&&t((0,d.pathToArray)(c),e,new p.GraphQLError('Expected type "'.concat(n.name,'".'))),S}(0,o.default)(0,"Unexpected input type: "+(0,i.default)(n))}},"./node_modules/graphql/utilities/concatAST.mjs":(e,n,t)=>{"use strict";function r(e){for(var n=[],t=0;t<e.length;t++){var r=e[t];n=n.concat(r.definitions)}return{kind:"Document",definitions:n}}t.r(n),t.d(n,{concatAST:()=>r})},"./node_modules/graphql/utilities/extendSchema.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{extendSchema:()=>j,extendSchemaImpl:()=>I,getDescription:()=>D});var r=t("./node_modules/graphql/polyfills/objectValues.mjs"),i=t("./node_modules/graphql/jsutils/keyMap.mjs"),o=t("./node_modules/graphql/jsutils/inspect.mjs"),a=t("./node_modules/graphql/jsutils/mapValue.mjs"),s=t("./node_modules/graphql/jsutils/invariant.mjs"),u=t("./node_modules/graphql/jsutils/devAssert.mjs"),l=t("./node_modules/graphql/language/kinds.mjs"),c=t("./node_modules/graphql/language/tokenKind.mjs"),d=t("./node_modules/graphql/language/blockString.mjs"),p=t("./node_modules/graphql/language/predicates.mjs"),f=t("./node_modules/graphql/validation/validate.mjs"),m=t("./node_modules/graphql/execution/values.mjs"),h=t("./node_modules/graphql/type/schema.mjs"),v=t("./node_modules/graphql/type/scalars.mjs"),y=t("./node_modules/graphql/type/introspection.mjs"),g=t("./node_modules/graphql/type/directives.mjs"),T=t("./node_modules/graphql/type/definition.mjs"),E=t("./node_modules/graphql/utilities/valueFromAST.mjs");function _(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function N(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?_(Object(t),!0).forEach((function(n){b(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):_(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function b(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function j(e,n,t){(0,h.assertSchema)(e),null!=n&&n.kind===l.Kind.DOCUMENT||(0,u.default)(0,"Must provide valid Document AST."),!0!==(null==t?void 0:t.assumeValid)&&!0!==(null==t?void 0:t.assumeValidSDL)&&(0,f.assertValidSDLExtension)(n,e);var r=e.toConfig(),i=I(r,n,t);return r===i?e:new h.GraphQLSchema(i)}function I(e,n,t){for(var i,u,c,d,f,m=[],h=Object.create(null),_=[],b=[],j=0,I=n.definitions;j<I.length;j++){var A=I[j];if(A.kind===l.Kind.SCHEMA_DEFINITION)f=A;else if(A.kind===l.Kind.SCHEMA_EXTENSION)b.push(A);else if((0,p.isTypeDefinitionNode)(A))m.push(A);else if((0,p.isTypeExtensionNode)(A)){var w=A.name.value,R=h[w];h[w]=R?R.concat([A]):[A]}else A.kind===l.Kind.DIRECTIVE_DEFINITION&&_.push(A)}if(0===Object.keys(h).length&&0===m.length&&0===_.length&&0===b.length&&null==f)return e;for(var k=Object.create(null),q=0,x=e.types;q<x.length;q++){var F=x[q];k[F.name]=(G=F,(0,y.isIntrospectionType)(G)||(0,v.isSpecifiedScalarType)(G)?G:(0,T.isScalarType)(G)?function(e){for(var n,t=e.toConfig(),r=null!==(n=h[t.name])&&void 0!==n?n:[],i=t.specifiedByUrl,o=0;o<r.length;o++){var a;i=null!==(a=S(r[o]))&&void 0!==a?a:i}return new T.GraphQLScalarType(N(N({},t),{},{specifiedByUrl:i,extensionASTNodes:t.extensionASTNodes.concat(r)}))}(G):(0,T.isObjectType)(G)?function(e){var n,t=e.toConfig(),r=null!==(n=h[t.name])&&void 0!==n?n:[];return new T.GraphQLObjectType(N(N({},t),{},{interfaces:function(){return[].concat(e.getInterfaces().map(M),ee(r))},fields:function(){return N(N({},(0,a.default)(t.fields,B)),H(r))},extensionASTNodes:t.extensionASTNodes.concat(r)}))}(G):(0,T.isInterfaceType)(G)?function(e){var n,t=e.toConfig(),r=null!==(n=h[t.name])&&void 0!==n?n:[];return new T.GraphQLInterfaceType(N(N({},t),{},{interfaces:function(){return[].concat(e.getInterfaces().map(M),ee(r))},fields:function(){return N(N({},(0,a.default)(t.fields,B)),H(r))},extensionASTNodes:t.extensionASTNodes.concat(r)}))}(G):(0,T.isUnionType)(G)?function(e){var n,t=e.toConfig(),r=null!==(n=h[t.name])&&void 0!==n?n:[];return new T.GraphQLUnionType(N(N({},t),{},{types:function(){return[].concat(e.getTypes().map(M),ne(r))},extensionASTNodes:t.extensionASTNodes.concat(r)}))}(G):(0,T.isEnumType)(G)?function(e){var n,t=e.toConfig(),r=null!==(n=h[e.name])&&void 0!==n?n:[];return new T.GraphQLEnumType(N(N({},t),{},{values:N(N({},t.values),Z(r)),extensionASTNodes:t.extensionASTNodes.concat(r)}))}(G):(0,T.isInputObjectType)(G)?function(e){var n,t=e.toConfig(),r=null!==(n=h[t.name])&&void 0!==n?n:[];return new T.GraphQLInputObjectType(N(N({},t),{},{fields:function(){return N(N({},(0,a.default)(t.fields,(function(e){return N(N({},e),{},{type:P(e.type)})}))),$(r))},extensionASTNodes:t.extensionASTNodes.concat(r)}))}(G):void(0,s.default)(0,"Unexpected type: "+(0,o.default)(G)))}for(var G,V=0;V<m.length;V++){var C,K=m[V],U=K.name.value;k[U]=null!==(C=O[U])&&void 0!==C?C:te(K)}var Q=N(N({query:e.query&&M(e.query),mutation:e.mutation&&M(e.mutation),subscription:e.subscription&&M(e.subscription)},f&&J([f])),J(b));return N(N({description:null===(i=f)||void 0===i||null===(u=i.description)||void 0===u?void 0:u.value},Q),{},{types:(0,r.default)(k),directives:[].concat(e.directives.map((function(e){var n=e.toConfig();return new g.GraphQLDirective(N(N({},n),{},{args:(0,a.default)(n.args,Y)}))})),_.map((function(e){var n=e.locations.map((function(e){return e.value}));return new g.GraphQLDirective({name:e.name.value,description:D(e,t),locations:n,isRepeatable:e.repeatable,args:W(e.arguments),astNode:e})}))),extensions:void 0,astNode:null!==(c=f)&&void 0!==c?c:e.astNode,extensionASTNodes:e.extensionASTNodes.concat(b),assumeValid:null!==(d=null==t?void 0:t.assumeValid)&&void 0!==d&&d});function P(e){return(0,T.isListType)(e)?new T.GraphQLList(P(e.ofType)):(0,T.isNonNullType)(e)?new T.GraphQLNonNull(P(e.ofType)):M(e)}function M(e){return k[e.name]}function B(e){return N(N({},e),{},{type:P(e.type),args:(0,a.default)(e.args,Y)})}function Y(e){return N(N({},e),{},{type:P(e.type)})}function J(e){for(var n={},t=0;t<e.length;t++)for(var r,i=null!==(r=e[t].operationTypes)&&void 0!==r?r:[],o=0;o<i.length;o++){var a=i[o];n[a.operation]=X(a.type)}return n}function X(e){var n,t=e.name.value,r=null!==(n=O[t])&&void 0!==n?n:k[t];if(void 0===r)throw new Error('Unknown type: "'.concat(t,'".'));return r}function z(e){return e.kind===l.Kind.LIST_TYPE?new T.GraphQLList(z(e.type)):e.kind===l.Kind.NON_NULL_TYPE?new T.GraphQLNonNull(z(e.type)):X(e)}function H(e){for(var n=Object.create(null),r=0;r<e.length;r++)for(var i,o=null!==(i=e[r].fields)&&void 0!==i?i:[],a=0;a<o.length;a++){var s=o[a];n[s.name.value]={type:z(s.type),description:D(s,t),args:W(s.arguments),deprecationReason:L(s),astNode:s}}return n}function W(e){for(var n=null!=e?e:[],r=Object.create(null),i=0;i<n.length;i++){var o=n[i],a=z(o.type);r[o.name.value]={type:a,description:D(o,t),defaultValue:(0,E.valueFromAST)(o.defaultValue,a),deprecationReason:L(o),astNode:o}}return r}function $(e){for(var n=Object.create(null),r=0;r<e.length;r++)for(var i,o=null!==(i=e[r].fields)&&void 0!==i?i:[],a=0;a<o.length;a++){var s=o[a],u=z(s.type);n[s.name.value]={type:u,description:D(s,t),defaultValue:(0,E.valueFromAST)(s.defaultValue,u),deprecationReason:L(s),astNode:s}}return n}function Z(e){for(var n=Object.create(null),r=0;r<e.length;r++)for(var i,o=null!==(i=e[r].values)&&void 0!==i?i:[],a=0;a<o.length;a++){var s=o[a];n[s.name.value]={description:D(s,t),deprecationReason:L(s),astNode:s}}return n}function ee(e){for(var n=[],t=0;t<e.length;t++)for(var r,i=null!==(r=e[t].interfaces)&&void 0!==r?r:[],o=0;o<i.length;o++){var a=i[o];n.push(X(a))}return n}function ne(e){for(var n=[],t=0;t<e.length;t++)for(var r,i=null!==(r=e[t].types)&&void 0!==r?r:[],o=0;o<i.length;o++){var a=i[o];n.push(X(a))}return n}function te(e){var n,r=e.name.value,i=D(e,t),a=null!==(n=h[r])&&void 0!==n?n:[];switch(e.kind){case l.Kind.OBJECT_TYPE_DEFINITION:var u=a,c=[e].concat(u);return new T.GraphQLObjectType({name:r,description:i,interfaces:function(){return ee(c)},fields:function(){return H(c)},astNode:e,extensionASTNodes:u});case l.Kind.INTERFACE_TYPE_DEFINITION:var d=a,p=[e].concat(d);return new T.GraphQLInterfaceType({name:r,description:i,interfaces:function(){return ee(p)},fields:function(){return H(p)},astNode:e,extensionASTNodes:d});case l.Kind.ENUM_TYPE_DEFINITION:var f=a,m=[e].concat(f);return new T.GraphQLEnumType({name:r,description:i,values:Z(m),astNode:e,extensionASTNodes:f});case l.Kind.UNION_TYPE_DEFINITION:var v=a,y=[e].concat(v);return new T.GraphQLUnionType({name:r,description:i,types:function(){return ne(y)},astNode:e,extensionASTNodes:v});case l.Kind.SCALAR_TYPE_DEFINITION:var g=a;return new T.GraphQLScalarType({name:r,description:i,specifiedByUrl:S(e),astNode:e,extensionASTNodes:g});case l.Kind.INPUT_OBJECT_TYPE_DEFINITION:var E=a,_=[e].concat(E);return new T.GraphQLInputObjectType({name:r,description:i,fields:function(){return $(_)},astNode:e,extensionASTNodes:E})}(0,s.default)(0,"Unexpected type definition node: "+(0,o.default)(e))}}var O=(0,i.default)(v.specifiedScalarTypes.concat(y.introspectionTypes),(function(e){return e.name}));function L(e){var n=(0,m.getDirectiveValues)(g.GraphQLDeprecatedDirective,e);return null==n?void 0:n.reason}function S(e){var n=(0,m.getDirectiveValues)(g.GraphQLSpecifiedByDirective,e);return null==n?void 0:n.url}function D(e,n){if(e.description)return e.description.value;if(!0===(null==n?void 0:n.commentDescriptions)){var t=function(e){var n=e.loc;if(n){for(var t=[],r=n.startToken.prev;null!=r&&r.kind===c.TokenKind.COMMENT&&r.next&&r.prev&&r.line+1===r.next.line&&r.line!==r.prev.line;){var i=String(r.value);t.push(i),r=r.prev}return t.length>0?t.reverse().join("\n"):void 0}}(e);if(void 0!==t)return(0,d.dedentBlockStringValue)("\n"+t)}}},"./node_modules/graphql/utilities/findBreakingChanges.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{BreakingChangeType:()=>v,DangerousChangeType:()=>y,findBreakingChanges:()=>g,findDangerousChanges:()=>T});var r=t("./node_modules/graphql/polyfills/objectValues.mjs"),i=t("./node_modules/graphql/jsutils/keyMap.mjs"),o=t("./node_modules/graphql/jsutils/inspect.mjs"),a=t("./node_modules/graphql/jsutils/invariant.mjs"),s=t("./node_modules/graphql/jsutils/naturalCompare.mjs"),u=t("./node_modules/graphql/language/printer.mjs"),l=t("./node_modules/graphql/language/visitor.mjs"),c=t("./node_modules/graphql/type/scalars.mjs"),d=t("./node_modules/graphql/type/definition.mjs"),p=t("./node_modules/graphql/utilities/astFromValue.mjs");function f(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function m(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?f(Object(t),!0).forEach((function(n){h(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):f(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function h(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}var v=Object.freeze({TYPE_REMOVED:"TYPE_REMOVED",TYPE_CHANGED_KIND:"TYPE_CHANGED_KIND",TYPE_REMOVED_FROM_UNION:"TYPE_REMOVED_FROM_UNION",VALUE_REMOVED_FROM_ENUM:"VALUE_REMOVED_FROM_ENUM",REQUIRED_INPUT_FIELD_ADDED:"REQUIRED_INPUT_FIELD_ADDED",IMPLEMENTED_INTERFACE_REMOVED:"IMPLEMENTED_INTERFACE_REMOVED",FIELD_REMOVED:"FIELD_REMOVED",FIELD_CHANGED_KIND:"FIELD_CHANGED_KIND",REQUIRED_ARG_ADDED:"REQUIRED_ARG_ADDED",ARG_REMOVED:"ARG_REMOVED",ARG_CHANGED_KIND:"ARG_CHANGED_KIND",DIRECTIVE_REMOVED:"DIRECTIVE_REMOVED",DIRECTIVE_ARG_REMOVED:"DIRECTIVE_ARG_REMOVED",REQUIRED_DIRECTIVE_ARG_ADDED:"REQUIRED_DIRECTIVE_ARG_ADDED",DIRECTIVE_REPEATABLE_REMOVED:"DIRECTIVE_REPEATABLE_REMOVED",DIRECTIVE_LOCATION_REMOVED:"DIRECTIVE_LOCATION_REMOVED"}),y=Object.freeze({VALUE_ADDED_TO_ENUM:"VALUE_ADDED_TO_ENUM",TYPE_ADDED_TO_UNION:"TYPE_ADDED_TO_UNION",OPTIONAL_INPUT_FIELD_ADDED:"OPTIONAL_INPUT_FIELD_ADDED",OPTIONAL_ARG_ADDED:"OPTIONAL_ARG_ADDED",IMPLEMENTED_INTERFACE_ADDED:"IMPLEMENTED_INTERFACE_ADDED",ARG_DEFAULT_VALUE_CHANGE:"ARG_DEFAULT_VALUE_CHANGE"});function g(e,n){return E(e,n).filter((function(e){return e.type in v}))}function T(e,n){return E(e,n).filter((function(e){return e.type in y}))}function E(e,n){return[].concat(function(e,n){for(var t=[],i=w((0,r.default)(e.getTypeMap()),(0,r.default)(n.getTypeMap())),o=0,a=i.removed;o<a.length;o++){var s=a[o];t.push({type:v.TYPE_REMOVED,description:(0,c.isSpecifiedScalarType)(s)?"Standard scalar ".concat(s.name," was removed because it is not referenced anymore."):"".concat(s.name," was removed.")})}for(var u=0,l=i.persisted;u<l.length;u++){var p=l[u],f=p[0],m=p[1];(0,d.isEnumType)(f)&&(0,d.isEnumType)(m)?t.push.apply(t,b(f,m)):(0,d.isUnionType)(f)&&(0,d.isUnionType)(m)?t.push.apply(t,N(f,m)):(0,d.isInputObjectType)(f)&&(0,d.isInputObjectType)(m)?t.push.apply(t,_(f,m)):(0,d.isObjectType)(f)&&(0,d.isObjectType)(m)||(0,d.isInterfaceType)(f)&&(0,d.isInterfaceType)(m)?t.push.apply(t,I(f,m).concat(j(f,m))):f.constructor!==m.constructor&&t.push({type:v.TYPE_CHANGED_KIND,description:"".concat(f.name," changed from ")+"".concat(D(f)," to ").concat(D(m),".")})}return t}(e,n),function(e,n){for(var t=[],r=w(e.getDirectives(),n.getDirectives()),i=0,o=r.removed;i<o.length;i++){var a=o[i];t.push({type:v.DIRECTIVE_REMOVED,description:"".concat(a.name," was removed.")})}for(var s=0,u=r.persisted;s<u.length;s++){for(var l=u[s],c=l[0],p=l[1],f=w(c.args,p.args),m=0,h=f.added;m<h.length;m++){var y=h[m];(0,d.isRequiredArgument)(y)&&t.push({type:v.REQUIRED_DIRECTIVE_ARG_ADDED,description:"A required arg ".concat(y.name," on directive ").concat(c.name," was added.")})}for(var g=0,T=f.removed;g<T.length;g++){var E=T[g];t.push({type:v.DIRECTIVE_ARG_REMOVED,description:"".concat(E.name," was removed from ").concat(c.name,".")})}c.isRepeatable&&!p.isRepeatable&&t.push({type:v.DIRECTIVE_REPEATABLE_REMOVED,description:"Repeatable flag was removed from ".concat(c.name,".")});for(var _=0,N=c.locations;_<N.length;_++){var b=N[_];-1===p.locations.indexOf(b)&&t.push({type:v.DIRECTIVE_LOCATION_REMOVED,description:"".concat(b," was removed from ").concat(c.name,".")})}}return t}(e,n))}function _(e,n){for(var t=[],i=w((0,r.default)(e.getFields()),(0,r.default)(n.getFields())),o=0,a=i.added;o<a.length;o++){var s=a[o];(0,d.isRequiredInputField)(s)?t.push({type:v.REQUIRED_INPUT_FIELD_ADDED,description:"A required field ".concat(s.name," on input type ").concat(e.name," was added.")}):t.push({type:y.OPTIONAL_INPUT_FIELD_ADDED,description:"An optional field ".concat(s.name," on input type ").concat(e.name," was added.")})}for(var u=0,l=i.removed;u<l.length;u++){var c=l[u];t.push({type:v.FIELD_REMOVED,description:"".concat(e.name,".").concat(c.name," was removed.")})}for(var p=0,f=i.persisted;p<f.length;p++){var m=f[p],h=m[0],g=m[1];S(h.type,g.type)||t.push({type:v.FIELD_CHANGED_KIND,description:"".concat(e.name,".").concat(h.name," changed type from ")+"".concat(String(h.type)," to ").concat(String(g.type),".")})}return t}function N(e,n){for(var t=[],r=w(e.getTypes(),n.getTypes()),i=0,o=r.added;i<o.length;i++){var a=o[i];t.push({type:y.TYPE_ADDED_TO_UNION,description:"".concat(a.name," was added to union type ").concat(e.name,".")})}for(var s=0,u=r.removed;s<u.length;s++){var l=u[s];t.push({type:v.TYPE_REMOVED_FROM_UNION,description:"".concat(l.name," was removed from union type ").concat(e.name,".")})}return t}function b(e,n){for(var t=[],r=w(e.getValues(),n.getValues()),i=0,o=r.added;i<o.length;i++){var a=o[i];t.push({type:y.VALUE_ADDED_TO_ENUM,description:"".concat(a.name," was added to enum type ").concat(e.name,".")})}for(var s=0,u=r.removed;s<u.length;s++){var l=u[s];t.push({type:v.VALUE_REMOVED_FROM_ENUM,description:"".concat(l.name," was removed from enum type ").concat(e.name,".")})}return t}function j(e,n){for(var t=[],r=w(e.getInterfaces(),n.getInterfaces()),i=0,o=r.added;i<o.length;i++){var a=o[i];t.push({type:y.IMPLEMENTED_INTERFACE_ADDED,description:"".concat(a.name," added to interfaces implemented by ").concat(e.name,".")})}for(var s=0,u=r.removed;s<u.length;s++){var l=u[s];t.push({type:v.IMPLEMENTED_INTERFACE_REMOVED,description:"".concat(e.name," no longer implements interface ").concat(l.name,".")})}return t}function I(e,n){for(var t=[],i=w((0,r.default)(e.getFields()),(0,r.default)(n.getFields())),o=0,a=i.removed;o<a.length;o++){var s=a[o];t.push({type:v.FIELD_REMOVED,description:"".concat(e.name,".").concat(s.name," was removed.")})}for(var u=0,l=i.persisted;u<l.length;u++){var c=l[u],d=c[0],p=c[1];t.push.apply(t,O(e,d,p)),L(d.type,p.type)||t.push({type:v.FIELD_CHANGED_KIND,description:"".concat(e.name,".").concat(d.name," changed type from ")+"".concat(String(d.type)," to ").concat(String(p.type),".")})}return t}function O(e,n,t){for(var r=[],i=w(n.args,t.args),o=0,a=i.removed;o<a.length;o++){var s=a[o];r.push({type:v.ARG_REMOVED,description:"".concat(e.name,".").concat(n.name," arg ").concat(s.name," was removed.")})}for(var u=0,l=i.persisted;u<l.length;u++){var c=l[u],p=c[0],f=c[1];if(S(p.type,f.type)){if(void 0!==p.defaultValue)if(void 0===f.defaultValue)r.push({type:y.ARG_DEFAULT_VALUE_CHANGE,description:"".concat(e.name,".").concat(n.name," arg ").concat(p.name," defaultValue was removed.")});else{var m=A(p.defaultValue,p.type),h=A(f.defaultValue,f.type);m!==h&&r.push({type:y.ARG_DEFAULT_VALUE_CHANGE,description:"".concat(e.name,".").concat(n.name," arg ").concat(p.name," has changed defaultValue from ").concat(m," to ").concat(h,".")})}}else r.push({type:v.ARG_CHANGED_KIND,description:"".concat(e.name,".").concat(n.name," arg ").concat(p.name," has changed type from ")+"".concat(String(p.type)," to ").concat(String(f.type),".")})}for(var g=0,T=i.added;g<T.length;g++){var E=T[g];(0,d.isRequiredArgument)(E)?r.push({type:v.REQUIRED_ARG_ADDED,description:"A required arg ".concat(E.name," on ").concat(e.name,".").concat(n.name," was added.")}):r.push({type:y.OPTIONAL_ARG_ADDED,description:"An optional arg ".concat(E.name," on ").concat(e.name,".").concat(n.name," was added.")})}return r}function L(e,n){return(0,d.isListType)(e)?(0,d.isListType)(n)&&L(e.ofType,n.ofType)||(0,d.isNonNullType)(n)&&L(e,n.ofType):(0,d.isNonNullType)(e)?(0,d.isNonNullType)(n)&&L(e.ofType,n.ofType):(0,d.isNamedType)(n)&&e.name===n.name||(0,d.isNonNullType)(n)&&L(e,n.ofType)}function S(e,n){return(0,d.isListType)(e)?(0,d.isListType)(n)&&S(e.ofType,n.ofType):(0,d.isNonNullType)(e)?(0,d.isNonNullType)(n)&&S(e.ofType,n.ofType)||!(0,d.isNonNullType)(n)&&S(e.ofType,n):(0,d.isNamedType)(n)&&e.name===n.name}function D(e){return(0,d.isScalarType)(e)?"a Scalar type":(0,d.isObjectType)(e)?"an Object type":(0,d.isInterfaceType)(e)?"an Interface type":(0,d.isUnionType)(e)?"a Union type":(0,d.isEnumType)(e)?"an Enum type":(0,d.isInputObjectType)(e)?"an Input type":void(0,a.default)(0,"Unexpected type: "+(0,o.default)(e))}function A(e,n){var t=(0,p.astFromValue)(e,n);null!=t||(0,a.default)(0);var r=(0,l.visit)(t,{ObjectValue:function(e){var n=[].concat(e.fields);return n.sort((function(e,n){return(0,s.default)(e.name.value,n.name.value)})),m(m({},e),{},{fields:n})}});return(0,u.print)(r)}function w(e,n){for(var t=[],r=[],o=[],a=(0,i.default)(e,(function(e){return e.name})),s=(0,i.default)(n,(function(e){return e.name})),u=0;u<e.length;u++){var l=e[u],c=s[l.name];void 0===c?r.push(l):o.push([l,c])}for(var d=0;d<n.length;d++){var p=n[d];void 0===a[p.name]&&t.push(p)}return{added:t,persisted:o,removed:r}}},"./node_modules/graphql/utilities/findDeprecatedUsages.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{findDeprecatedUsages:()=>o});var r=t("./node_modules/graphql/validation/validate.mjs"),i=t("./node_modules/graphql/validation/rules/custom/NoDeprecatedCustomRule.mjs");function o(e,n){return(0,r.validate)(e,n,[i.NoDeprecatedCustomRule])}},"./node_modules/graphql/utilities/getIntrospectionQuery.mjs":(e,n,t)=>{"use strict";function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e){var n=function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}({descriptions:!0,specifiedByUrl:!1,directiveIsRepeatable:!1,schemaDescription:!1,inputValueDeprecation:!1},e),t=n.descriptions?"description":"",o=n.specifiedByUrl?"specifiedByUrl":"",a=n.directiveIsRepeatable?"isRepeatable":"",s=n.schemaDescription?t:"";function u(e){return n.inputValueDeprecation?e:""}return"\n    query IntrospectionQuery {\n      __schema {\n        ".concat(s,"\n        queryType { name }\n        mutationType { name }\n        subscriptionType { name }\n        types {\n          ...FullType\n        }\n        directives {\n          name\n          ").concat(t,"\n          ").concat(a,"\n          locations\n          args").concat(u("(includeDeprecated: true)")," {\n            ...InputValue\n          }\n        }\n      }\n    }\n\n    fragment FullType on __Type {\n      kind\n      name\n      ").concat(t,"\n      ").concat(o,"\n      fields(includeDeprecated: true) {\n        name\n        ").concat(t,"\n        args").concat(u("(includeDeprecated: true)")," {\n          ...InputValue\n        }\n        type {\n          ...TypeRef\n        }\n        isDeprecated\n        deprecationReason\n      }\n      inputFields").concat(u("(includeDeprecated: true)")," {\n        ...InputValue\n      }\n      interfaces {\n        ...TypeRef\n      }\n      enumValues(includeDeprecated: true) {\n        name\n        ").concat(t,"\n        isDeprecated\n        deprecationReason\n      }\n      possibleTypes {\n        ...TypeRef\n      }\n    }\n\n    fragment InputValue on __InputValue {\n      name\n      ").concat(t,"\n      type { ...TypeRef }\n      defaultValue\n      ").concat(u("isDeprecated"),"\n      ").concat(u("deprecationReason"),"\n    }\n\n    fragment TypeRef on __Type {\n      kind\n      name\n      ofType {\n        kind\n        name\n        ofType {\n          kind\n          name\n          ofType {\n            kind\n            name\n            ofType {\n              kind\n              name\n              ofType {\n                kind\n                name\n                ofType {\n                  kind\n                  name\n                  ofType {\n                    kind\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  ")}t.r(n),t.d(n,{getIntrospectionQuery:()=>o})},"./node_modules/graphql/utilities/getOperationAST.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{getOperationAST:()=>i});var r=t("./node_modules/graphql/language/kinds.mjs");function i(e,n){for(var t=null,i=0,o=e.definitions;i<o.length;i++){var a,s=o[i];if(s.kind===r.Kind.OPERATION_DEFINITION)if(null==n){if(t)return null;t=s}else if((null===(a=s.name)||void 0===a?void 0:a.value)===n)return s}return t}},"./node_modules/graphql/utilities/getOperationRootType.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{getOperationRootType:()=>i});var r=t("./node_modules/graphql/error/GraphQLError.mjs");function i(e,n){if("query"===n.operation){var t=e.getQueryType();if(!t)throw new r.GraphQLError("Schema does not define the required query root type.",n);return t}if("mutation"===n.operation){var i=e.getMutationType();if(!i)throw new r.GraphQLError("Schema is not configured for mutations.",n);return i}if("subscription"===n.operation){var o=e.getSubscriptionType();if(!o)throw new r.GraphQLError("Schema is not configured for subscriptions.",n);return o}throw new r.GraphQLError("Can only have query, mutation and subscription operations.",n)}},"./node_modules/graphql/utilities/introspectionFromSchema.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{introspectionFromSchema:()=>l});var r=t("./node_modules/graphql/jsutils/invariant.mjs"),i=t("./node_modules/graphql/language/parser.mjs"),o=t("./node_modules/graphql/execution/execute.mjs"),a=t("./node_modules/graphql/utilities/getIntrospectionQuery.mjs");function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function u(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=function(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){u(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}({specifiedByUrl:!0,directiveIsRepeatable:!0,schemaDescription:!0,inputValueDeprecation:!0},n),l=(0,i.parse)((0,a.getIntrospectionQuery)(t)),c=(0,o.executeSync)({schema:e,document:l});return!c.errors&&c.data||(0,r.default)(0),c.data}},"./node_modules/graphql/utilities/lexicographicSortSchema.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{lexicographicSortSchema:()=>h});var r=t("./node_modules/graphql/polyfills/objectValues.mjs"),i=t("./node_modules/graphql/jsutils/inspect.mjs"),o=t("./node_modules/graphql/jsutils/invariant.mjs"),a=t("./node_modules/graphql/jsutils/keyValMap.mjs"),s=t("./node_modules/graphql/jsutils/naturalCompare.mjs"),u=t("./node_modules/graphql/type/schema.mjs"),l=t("./node_modules/graphql/type/directives.mjs"),c=t("./node_modules/graphql/type/introspection.mjs"),d=t("./node_modules/graphql/type/definition.mjs");function p(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function f(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?p(Object(t),!0).forEach((function(n){m(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):p(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function m(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function h(e){var n=e.toConfig(),t=(0,a.default)(y(n.types),(function(e){return e.name}),(function(e){if((0,d.isScalarType)(e)||(0,c.isIntrospectionType)(e))return e;if((0,d.isObjectType)(e)){var n=e.toConfig();return new d.GraphQLObjectType(f(f({},n),{},{interfaces:function(){return E(n.interfaces)},fields:function(){return T(n.fields)}}))}if((0,d.isInterfaceType)(e)){var t=e.toConfig();return new d.GraphQLInterfaceType(f(f({},t),{},{interfaces:function(){return E(t.interfaces)},fields:function(){return T(t.fields)}}))}if((0,d.isUnionType)(e)){var r=e.toConfig();return new d.GraphQLUnionType(f(f({},r),{},{types:function(){return E(r.types)}}))}if((0,d.isEnumType)(e)){var a=e.toConfig();return new d.GraphQLEnumType(f(f({},a),{},{values:v(a.values)}))}if((0,d.isInputObjectType)(e)){var u=e.toConfig();return new d.GraphQLInputObjectType(f(f({},u),{},{fields:function(){return v(u.fields,(function(e){return f(f({},e),{},{type:s(e.type)})}))}}))}(0,o.default)(0,"Unexpected type: "+(0,i.default)(e))}));return new u.GraphQLSchema(f(f({},n),{},{types:(0,r.default)(t),directives:y(n.directives).map((function(e){var n=e.toConfig();return new l.GraphQLDirective(f(f({},n),{},{locations:g(n.locations,(function(e){return e})),args:h(n.args)}))})),query:m(n.query),mutation:m(n.mutation),subscription:m(n.subscription)}));function s(e){return(0,d.isListType)(e)?new d.GraphQLList(s(e.ofType)):(0,d.isNonNullType)(e)?new d.GraphQLNonNull(s(e.ofType)):p(e)}function p(e){return t[e.name]}function m(e){return e&&p(e)}function h(e){return v(e,(function(e){return f(f({},e),{},{type:s(e.type)})}))}function T(e){return v(e,(function(e){return f(f({},e),{},{type:s(e.type),args:h(e.args)})}))}function E(e){return y(e).map(p)}}function v(e,n){for(var t=Object.create(null),r=g(Object.keys(e),(function(e){return e})),i=0;i<r.length;i++){var o=r[i],a=e[o];t[o]=n?n(a):a}return t}function y(e){return g(e,(function(e){return e.name}))}function g(e,n){return e.slice().sort((function(e,t){var r=n(e),i=n(t);return(0,s.default)(r,i)}))}},"./node_modules/graphql/utilities/printSchema.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{printSchema:()=>f,printIntrospectionSchema:()=>m,printType:()=>g});var r=t("./node_modules/graphql/polyfills/objectValues.mjs"),i=t("./node_modules/graphql/jsutils/inspect.mjs"),o=t("./node_modules/graphql/jsutils/invariant.mjs"),a=t("./node_modules/graphql/language/printer.mjs"),s=t("./node_modules/graphql/language/blockString.mjs"),u=t("./node_modules/graphql/type/introspection.mjs"),l=t("./node_modules/graphql/type/scalars.mjs"),c=t("./node_modules/graphql/type/directives.mjs"),d=t("./node_modules/graphql/type/definition.mjs"),p=t("./node_modules/graphql/utilities/astFromValue.mjs");function f(e,n){return v(e,(function(e){return!(0,c.isSpecifiedDirective)(e)}),h,n)}function m(e,n){return v(e,c.isSpecifiedDirective,u.isIntrospectionType,n)}function h(e){return!(0,l.isSpecifiedScalarType)(e)&&!(0,u.isIntrospectionType)(e)}function v(e,n,t,i){var o=e.getDirectives().filter(n),a=(0,r.default)(e.getTypeMap()).filter(t);return[y(e)].concat(o.map((function(e){return function(e,n){return I(n,e)+"directive @"+e.name+N(n,e.args)+(e.isRepeatable?" repeatable":"")+" on "+e.locations.join(" | ")}(e,i)})),a.map((function(e){return g(e,i)}))).filter(Boolean).join("\n\n")+"\n"}function y(e){if(null!=e.description||!function(e){var n=e.getQueryType();if(n&&"Query"!==n.name)return!1;var t=e.getMutationType();if(t&&"Mutation"!==t.name)return!1;var r=e.getSubscriptionType();return!r||"Subscription"===r.name}(e)){var n=[],t=e.getQueryType();t&&n.push("  query: ".concat(t.name));var r=e.getMutationType();r&&n.push("  mutation: ".concat(r.name));var i=e.getSubscriptionType();return i&&n.push("  subscription: ".concat(i.name)),I({},e)+"schema {\n".concat(n.join("\n"),"\n}")}}function g(e,n){return(0,d.isScalarType)(e)?function(e,n){return I(n,e)+"scalar ".concat(e.name)+function(e){if(null==e.specifiedByUrl)return"";var n=e.specifiedByUrl,t=(0,p.astFromValue)(n,l.GraphQLString);return t||(0,o.default)(0,"Unexpected null value returned from `astFromValue` for specifiedByUrl")," @specifiedBy(url: "+(0,a.print)(t)+")"}(e)}(e,n):(0,d.isObjectType)(e)?function(e,n){return I(n,e)+"type ".concat(e.name)+T(e)+E(n,e)}(e,n):(0,d.isInterfaceType)(e)?function(e,n){return I(n,e)+"interface ".concat(e.name)+T(e)+E(n,e)}(e,n):(0,d.isUnionType)(e)?function(e,n){var t=e.getTypes(),r=t.length?" = "+t.join(" | "):"";return I(n,e)+"union "+e.name+r}(e,n):(0,d.isEnumType)(e)?function(e,n){var t=e.getValues().map((function(e,t){return I(n,e,"  ",!t)+"  "+e.name+j(e.deprecationReason)}));return I(n,e)+"enum ".concat(e.name)+_(t)}(e,n):(0,d.isInputObjectType)(e)?function(e,n){var t=(0,r.default)(e.getFields()).map((function(e,t){return I(n,e,"  ",!t)+"  "+b(e)}));return I(n,e)+"input ".concat(e.name)+_(t)}(e,n):void(0,o.default)(0,"Unexpected type: "+(0,i.default)(e))}function T(e){var n=e.getInterfaces();return n.length?" implements "+n.map((function(e){return e.name})).join(" & "):""}function E(e,n){return _((0,r.default)(n.getFields()).map((function(n,t){return I(e,n,"  ",!t)+"  "+n.name+N(e,n.args,"  ")+": "+String(n.type)+j(n.deprecationReason)})))}function _(e){return 0!==e.length?" {\n"+e.join("\n")+"\n}":""}function N(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";return 0===n.length?"":n.every((function(e){return!e.description}))?"("+n.map(b).join(", ")+")":"(\n"+n.map((function(n,r){return I(e,n,"  "+t,!r)+"  "+t+b(n)})).join("\n")+"\n"+t+")"}function b(e){var n=(0,p.astFromValue)(e.defaultValue,e.type),t=e.name+": "+String(e.type);return n&&(t+=" = ".concat((0,a.print)(n))),t+j(e.deprecationReason)}function j(e){if(null==e)return"";var n=(0,p.astFromValue)(e,l.GraphQLString);return n&&e!==c.DEFAULT_DEPRECATION_REASON?" @deprecated(reason: "+(0,a.print)(n)+")":" @deprecated"}function I(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",r=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],i=n.description;if(null==i)return"";if(!0===(null==e?void 0:e.commentDescriptions))return O(i,t,r);var o=i.length>70,a=(0,s.printBlockString)(i,"",o),u=t&&!r?"\n"+t:t;return u+a.replace(/\n/g,"\n"+t)+"\n"}function O(e,n,t){return(n&&!t?"\n":"")+e.split("\n").map((function(e){return n+(""!==e?"# "+e:"#")})).join("\n")+"\n"}},"./node_modules/graphql/utilities/separateOperations.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{separateOperations:()=>o});var r=t("./node_modules/graphql/language/kinds.mjs"),i=t("./node_modules/graphql/language/visitor.mjs");function o(e){for(var n=[],t=Object.create(null),i=0,o=e.definitions;i<o.length;i++){var u=o[i];switch(u.kind){case r.Kind.OPERATION_DEFINITION:n.push(u);break;case r.Kind.FRAGMENT_DEFINITION:t[u.name.value]=s(u.selectionSet)}}for(var l=Object.create(null),c=function(i){for(var o=n[i],u=new Set,c=0,d=s(o.selectionSet);c<d.length;c++){var p=d[c];a(u,t,p)}var f=o.name?o.name.value:"";l[f]={kind:r.Kind.DOCUMENT,definitions:e.definitions.filter((function(e){return e===o||e.kind===r.Kind.FRAGMENT_DEFINITION&&u.has(e.name.value)}))}},d=0;d<n.length;d++)c(d);return l}function a(e,n,t){if(!e.has(t)){e.add(t);var r=n[t];if(void 0!==r)for(var i=0;i<r.length;i++)a(e,n,r[i])}}function s(e){var n=[];return(0,i.visit)(e,{FragmentSpread:function(e){n.push(e.name.value)}}),n}},"./node_modules/graphql/utilities/stripIgnoredCharacters.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{stripIgnoredCharacters:()=>s});var r=t("./node_modules/graphql/language/source.mjs"),i=t("./node_modules/graphql/language/tokenKind.mjs"),o=t("./node_modules/graphql/language/lexer.mjs"),a=t("./node_modules/graphql/language/blockString.mjs");function s(e){for(var n=(0,r.isSource)(e)?e:new r.Source(e),t=n.body,a=new o.Lexer(n),s="",l=!1;a.advance().kind!==i.TokenKind.EOF;){var c=a.token,d=c.kind,p=!(0,o.isPunctuatorTokenKind)(c.kind);l&&(p||c.kind===i.TokenKind.SPREAD)&&(s+=" ");var f=t.slice(c.start,c.end);d===i.TokenKind.BLOCK_STRING?s+=u(f):s+=f,l=p}return s}function u(e){var n=e.slice(3,-3),t=(0,a.dedentBlockStringValue)(n);(0,a.getBlockStringIndentation)(t)>0&&(t="\n"+t);var r=t[t.length-1];return('"'===r&&'\\"""'!==t.slice(-4)||"\\"===r)&&(t+="\n"),'"""'+t+'"""'}},"./node_modules/graphql/utilities/typeComparators.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{isEqualType:()=>i,isTypeSubTypeOf:()=>o,doTypesOverlap:()=>a});var r=t("./node_modules/graphql/type/definition.mjs");function i(e,n){return e===n||((0,r.isNonNullType)(e)&&(0,r.isNonNullType)(n)||!(!(0,r.isListType)(e)||!(0,r.isListType)(n)))&&i(e.ofType,n.ofType)}function o(e,n,t){return n===t||((0,r.isNonNullType)(t)?!!(0,r.isNonNullType)(n)&&o(e,n.ofType,t.ofType):(0,r.isNonNullType)(n)?o(e,n.ofType,t):(0,r.isListType)(t)?!!(0,r.isListType)(n)&&o(e,n.ofType,t.ofType):!(0,r.isListType)(n)&&(0,r.isAbstractType)(t)&&((0,r.isInterfaceType)(n)||(0,r.isObjectType)(n))&&e.isSubType(t,n))}function a(e,n,t){return n===t||((0,r.isAbstractType)(n)?(0,r.isAbstractType)(t)?e.getPossibleTypes(n).some((function(n){return e.isSubType(t,n)})):e.isSubType(n,t):!!(0,r.isAbstractType)(t)&&e.isSubType(t,n))}},"./node_modules/graphql/utilities/typeFromAST.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{typeFromAST:()=>s});var r=t("./node_modules/graphql/jsutils/inspect.mjs"),i=t("./node_modules/graphql/jsutils/invariant.mjs"),o=t("./node_modules/graphql/language/kinds.mjs"),a=t("./node_modules/graphql/type/definition.mjs");function s(e,n){var t;return n.kind===o.Kind.LIST_TYPE?(t=s(e,n.type))&&new a.GraphQLList(t):n.kind===o.Kind.NON_NULL_TYPE?(t=s(e,n.type))&&new a.GraphQLNonNull(t):n.kind===o.Kind.NAMED_TYPE?e.getType(n.name.value):void(0,i.default)(0,"Unexpected type node: "+(0,r.default)(n))}},"./node_modules/graphql/utilities/valueFromAST.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{valueFromAST:()=>l});var r=t("./node_modules/graphql/polyfills/objectValues.mjs"),i=t("./node_modules/graphql/jsutils/keyMap.mjs"),o=t("./node_modules/graphql/jsutils/inspect.mjs"),a=t("./node_modules/graphql/jsutils/invariant.mjs"),s=t("./node_modules/graphql/language/kinds.mjs"),u=t("./node_modules/graphql/type/definition.mjs");function l(e,n,t){if(e){if(e.kind===s.Kind.VARIABLE){var d=e.name.value;if(null==t||void 0===t[d])return;var p=t[d];if(null===p&&(0,u.isNonNullType)(n))return;return p}if((0,u.isNonNullType)(n)){if(e.kind===s.Kind.NULL)return;return l(e,n.ofType,t)}if(e.kind===s.Kind.NULL)return null;if((0,u.isListType)(n)){var f=n.ofType;if(e.kind===s.Kind.LIST){for(var m=[],h=0,v=e.values;h<v.length;h++){var y=v[h];if(c(y,t)){if((0,u.isNonNullType)(f))return;m.push(null)}else{var g=l(y,f,t);if(void 0===g)return;m.push(g)}}return m}var T=l(e,f,t);if(void 0===T)return;return[T]}if((0,u.isInputObjectType)(n)){if(e.kind!==s.Kind.OBJECT)return;for(var E=Object.create(null),_=(0,i.default)(e.fields,(function(e){return e.name.value})),N=0,b=(0,r.default)(n.getFields());N<b.length;N++){var j=b[N],I=_[j.name];if(I&&!c(I.value,t)){var O=l(I.value,j.type,t);if(void 0===O)return;E[j.name]=O}else if(void 0!==j.defaultValue)E[j.name]=j.defaultValue;else if((0,u.isNonNullType)(j.type))return}return E}if((0,u.isLeafType)(n)){var L;try{L=n.parseLiteral(e,t)}catch(e){return}if(void 0===L)return;return L}(0,a.default)(0,"Unexpected input type: "+(0,o.default)(n))}}function c(e,n){return e.kind===s.Kind.VARIABLE&&(null==n||void 0===n[e.name.value])}},"./node_modules/graphql/utilities/valueFromASTUntyped.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{valueFromASTUntyped:()=>s});var r=t("./node_modules/graphql/jsutils/inspect.mjs"),i=t("./node_modules/graphql/jsutils/invariant.mjs"),o=t("./node_modules/graphql/jsutils/keyValMap.mjs"),a=t("./node_modules/graphql/language/kinds.mjs");function s(e,n){switch(e.kind){case a.Kind.NULL:return null;case a.Kind.INT:return parseInt(e.value,10);case a.Kind.FLOAT:return parseFloat(e.value);case a.Kind.STRING:case a.Kind.ENUM:case a.Kind.BOOLEAN:return e.value;case a.Kind.LIST:return e.values.map((function(e){return s(e,n)}));case a.Kind.OBJECT:return(0,o.default)(e.fields,(function(e){return e.name.value}),(function(e){return s(e.value,n)}));case a.Kind.VARIABLE:return null==n?void 0:n[e.name.value]}(0,i.default)(0,"Unexpected value node: "+(0,r.default)(e))}},"./node_modules/graphql/validation/ValidationContext.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{ASTValidationContext:()=>s,SDLValidationContext:()=>u,ValidationContext:()=>l});var r=t("./node_modules/graphql/language/kinds.mjs"),i=t("./node_modules/graphql/language/visitor.mjs"),o=t("./node_modules/graphql/utilities/TypeInfo.mjs");function a(e,n){e.prototype=Object.create(n.prototype),e.prototype.constructor=e,e.__proto__=n}var s=function(){function e(e,n){this._ast=e,this._fragments=void 0,this._fragmentSpreads=new Map,this._recursivelyReferencedFragments=new Map,this._onError=n}var n=e.prototype;return n.reportError=function(e){this._onError(e)},n.getDocument=function(){return this._ast},n.getFragment=function(e){var n=this._fragments;return n||(this._fragments=n=this.getDocument().definitions.reduce((function(e,n){return n.kind===r.Kind.FRAGMENT_DEFINITION&&(e[n.name.value]=n),e}),Object.create(null))),n[e]},n.getFragmentSpreads=function(e){var n=this._fragmentSpreads.get(e);if(!n){n=[];for(var t=[e];0!==t.length;)for(var i=0,o=t.pop().selections;i<o.length;i++){var a=o[i];a.kind===r.Kind.FRAGMENT_SPREAD?n.push(a):a.selectionSet&&t.push(a.selectionSet)}this._fragmentSpreads.set(e,n)}return n},n.getRecursivelyReferencedFragments=function(e){var n=this._recursivelyReferencedFragments.get(e);if(!n){n=[];for(var t=Object.create(null),r=[e.selectionSet];0!==r.length;)for(var i=r.pop(),o=0,a=this.getFragmentSpreads(i);o<a.length;o++){var s=a[o].name.value;if(!0!==t[s]){t[s]=!0;var u=this.getFragment(s);u&&(n.push(u),r.push(u.selectionSet))}}this._recursivelyReferencedFragments.set(e,n)}return n},e}(),u=function(e){function n(n,t,r){var i;return(i=e.call(this,n,r)||this)._schema=t,i}return a(n,e),n.prototype.getSchema=function(){return this._schema},n}(s),l=function(e){function n(n,t,r,i){var o;return(o=e.call(this,t,i)||this)._schema=n,o._typeInfo=r,o._variableUsages=new Map,o._recursiveVariableUsages=new Map,o}a(n,e);var t=n.prototype;return t.getSchema=function(){return this._schema},t.getVariableUsages=function(e){var n=this._variableUsages.get(e);if(!n){var t=[],r=new o.TypeInfo(this._schema);(0,i.visit)(e,(0,o.visitWithTypeInfo)(r,{VariableDefinition:function(){return!1},Variable:function(e){t.push({node:e,type:r.getInputType(),defaultValue:r.getDefaultValue()})}})),n=t,this._variableUsages.set(e,n)}return n},t.getRecursiveVariableUsages=function(e){var n=this._recursiveVariableUsages.get(e);if(!n){n=this.getVariableUsages(e);for(var t=0,r=this.getRecursivelyReferencedFragments(e);t<r.length;t++){var i=r[t];n=n.concat(this.getVariableUsages(i))}this._recursiveVariableUsages.set(e,n)}return n},t.getType=function(){return this._typeInfo.getType()},t.getParentType=function(){return this._typeInfo.getParentType()},t.getInputType=function(){return this._typeInfo.getInputType()},t.getParentInputType=function(){return this._typeInfo.getParentInputType()},t.getFieldDef=function(){return this._typeInfo.getFieldDef()},t.getDirective=function(){return this._typeInfo.getDirective()},t.getArgument=function(){return this._typeInfo.getArgument()},t.getEnumValue=function(){return this._typeInfo.getEnumValue()},n}(s)},"./node_modules/graphql/validation/rules/ExecutableDefinitionsRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{ExecutableDefinitionsRule:()=>a});var r=t("./node_modules/graphql/error/GraphQLError.mjs"),i=t("./node_modules/graphql/language/kinds.mjs"),o=t("./node_modules/graphql/language/predicates.mjs");function a(e){return{Document:function(n){for(var t=0,a=n.definitions;t<a.length;t++){var s=a[t];if(!(0,o.isExecutableDefinitionNode)(s)){var u=s.kind===i.Kind.SCHEMA_DEFINITION||s.kind===i.Kind.SCHEMA_EXTENSION?"schema":'"'+s.name.value+'"';e.reportError(new r.GraphQLError("The ".concat(u," definition is not executable."),s))}}return!1}}}},"./node_modules/graphql/validation/rules/FieldsOnCorrectTypeRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{FieldsOnCorrectTypeRule:()=>l});var r=t("./node_modules/graphql/polyfills/arrayFrom.mjs"),i=t("./node_modules/graphql/jsutils/didYouMean.mjs"),o=t("./node_modules/graphql/jsutils/suggestionList.mjs"),a=t("./node_modules/graphql/jsutils/naturalCompare.mjs"),s=t("./node_modules/graphql/error/GraphQLError.mjs"),u=t("./node_modules/graphql/type/definition.mjs");function l(e){return{Field:function(n){var t=e.getParentType();if(t&&!e.getFieldDef()){var l=e.getSchema(),c=n.name.value,d=(0,i.default)("to use an inline fragment on",function(e,n,t){if(!(0,u.isAbstractType)(n))return[];for(var i=new Set,o=Object.create(null),s=0,l=e.getPossibleTypes(n);s<l.length;s++){var c=l[s];if(c.getFields()[t]){i.add(c),o[c.name]=1;for(var d=0,p=c.getInterfaces();d<p.length;d++){var f,m=p[d];m.getFields()[t]&&(i.add(m),o[m.name]=(null!==(f=o[m.name])&&void 0!==f?f:0)+1)}}}return(0,r.default)(i).sort((function(n,t){var r=o[t.name]-o[n.name];return 0!==r?r:(0,u.isInterfaceType)(n)&&e.isSubType(n,t)?-1:(0,u.isInterfaceType)(t)&&e.isSubType(t,n)?1:(0,a.default)(n.name,t.name)})).map((function(e){return e.name}))}(l,t,c));""===d&&(d=(0,i.default)(function(e,n){if((0,u.isObjectType)(e)||(0,u.isInterfaceType)(e)){var t=Object.keys(e.getFields());return(0,o.default)(n,t)}return[]}(t,c))),e.reportError(new s.GraphQLError('Cannot query field "'.concat(c,'" on type "').concat(t.name,'".')+d,n))}}}}},"./node_modules/graphql/validation/rules/FragmentsOnCompositeTypesRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{FragmentsOnCompositeTypesRule:()=>s});var r=t("./node_modules/graphql/error/GraphQLError.mjs"),i=t("./node_modules/graphql/language/printer.mjs"),o=t("./node_modules/graphql/type/definition.mjs"),a=t("./node_modules/graphql/utilities/typeFromAST.mjs");function s(e){return{InlineFragment:function(n){var t=n.typeCondition;if(t){var s=(0,a.typeFromAST)(e.getSchema(),t);if(s&&!(0,o.isCompositeType)(s)){var u=(0,i.print)(t);e.reportError(new r.GraphQLError('Fragment cannot condition on non composite type "'.concat(u,'".'),t))}}},FragmentDefinition:function(n){var t=(0,a.typeFromAST)(e.getSchema(),n.typeCondition);if(t&&!(0,o.isCompositeType)(t)){var s=(0,i.print)(n.typeCondition);e.reportError(new r.GraphQLError('Fragment "'.concat(n.name.value,'" cannot condition on non composite type "').concat(s,'".'),n.typeCondition))}}}}},"./node_modules/graphql/validation/rules/KnownArgumentNamesRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{KnownArgumentNamesRule:()=>d,KnownArgumentNamesOnDirectivesRule:()=>p});var r=t("./node_modules/graphql/jsutils/didYouMean.mjs"),i=t("./node_modules/graphql/jsutils/suggestionList.mjs"),o=t("./node_modules/graphql/error/GraphQLError.mjs"),a=t("./node_modules/graphql/language/kinds.mjs"),s=t("./node_modules/graphql/type/directives.mjs");function u(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?u(Object(t),!0).forEach((function(n){c(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):u(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function d(e){return l(l({},p(e)),{},{Argument:function(n){var t=e.getArgument(),a=e.getFieldDef(),s=e.getParentType();if(!t&&a&&s){var u=n.name.value,l=a.args.map((function(e){return e.name})),c=(0,i.default)(u,l);e.reportError(new o.GraphQLError('Unknown argument "'.concat(u,'" on field "').concat(s.name,".").concat(a.name,'".')+(0,r.default)(c),n))}}})}function p(e){for(var n=Object.create(null),t=e.getSchema(),u=t?t.getDirectives():s.specifiedDirectives,l=0;l<u.length;l++){var c=u[l];n[c.name]=c.args.map((function(e){return e.name}))}for(var d=e.getDocument().definitions,p=0;p<d.length;p++){var f=d[p];if(f.kind===a.Kind.DIRECTIVE_DEFINITION){var m,h=null!==(m=f.arguments)&&void 0!==m?m:[];n[f.name.value]=h.map((function(e){return e.name.value}))}}return{Directive:function(t){var a=t.name.value,s=n[a];if(t.arguments&&s)for(var u=0,l=t.arguments;u<l.length;u++){var c=l[u],d=c.name.value;if(-1===s.indexOf(d)){var p=(0,i.default)(d,s);e.reportError(new o.GraphQLError('Unknown argument "'.concat(d,'" on directive "@').concat(a,'".')+(0,r.default)(p),c))}}return!1}}}},"./node_modules/graphql/validation/rules/KnownDirectivesRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{KnownDirectivesRule:()=>l});var r=t("./node_modules/graphql/jsutils/inspect.mjs"),i=t("./node_modules/graphql/jsutils/invariant.mjs"),o=t("./node_modules/graphql/error/GraphQLError.mjs"),a=t("./node_modules/graphql/language/kinds.mjs"),s=t("./node_modules/graphql/language/directiveLocation.mjs"),u=t("./node_modules/graphql/type/directives.mjs");function l(e){for(var n=Object.create(null),t=e.getSchema(),l=t?t.getDirectives():u.specifiedDirectives,c=0;c<l.length;c++){var d=l[c];n[d.name]=d.locations}for(var p=e.getDocument().definitions,f=0;f<p.length;f++){var m=p[f];m.kind===a.Kind.DIRECTIVE_DEFINITION&&(n[m.name.value]=m.locations.map((function(e){return e.value})))}return{Directive:function(t,u,l,c,d){var p=t.name.value,f=n[p];if(f){var m=function(e){var n=e[e.length-1];switch(!Array.isArray(n)||(0,i.default)(0),n.kind){case a.Kind.OPERATION_DEFINITION:return function(e){switch(e){case"query":return s.DirectiveLocation.QUERY;case"mutation":return s.DirectiveLocation.MUTATION;case"subscription":return s.DirectiveLocation.SUBSCRIPTION}(0,i.default)(0,"Unexpected operation: "+(0,r.default)(e))}(n.operation);case a.Kind.FIELD:return s.DirectiveLocation.FIELD;case a.Kind.FRAGMENT_SPREAD:return s.DirectiveLocation.FRAGMENT_SPREAD;case a.Kind.INLINE_FRAGMENT:return s.DirectiveLocation.INLINE_FRAGMENT;case a.Kind.FRAGMENT_DEFINITION:return s.DirectiveLocation.FRAGMENT_DEFINITION;case a.Kind.VARIABLE_DEFINITION:return s.DirectiveLocation.VARIABLE_DEFINITION;case a.Kind.SCHEMA_DEFINITION:case a.Kind.SCHEMA_EXTENSION:return s.DirectiveLocation.SCHEMA;case a.Kind.SCALAR_TYPE_DEFINITION:case a.Kind.SCALAR_TYPE_EXTENSION:return s.DirectiveLocation.SCALAR;case a.Kind.OBJECT_TYPE_DEFINITION:case a.Kind.OBJECT_TYPE_EXTENSION:return s.DirectiveLocation.OBJECT;case a.Kind.FIELD_DEFINITION:return s.DirectiveLocation.FIELD_DEFINITION;case a.Kind.INTERFACE_TYPE_DEFINITION:case a.Kind.INTERFACE_TYPE_EXTENSION:return s.DirectiveLocation.INTERFACE;case a.Kind.UNION_TYPE_DEFINITION:case a.Kind.UNION_TYPE_EXTENSION:return s.DirectiveLocation.UNION;case a.Kind.ENUM_TYPE_DEFINITION:case a.Kind.ENUM_TYPE_EXTENSION:return s.DirectiveLocation.ENUM;case a.Kind.ENUM_VALUE_DEFINITION:return s.DirectiveLocation.ENUM_VALUE;case a.Kind.INPUT_OBJECT_TYPE_DEFINITION:case a.Kind.INPUT_OBJECT_TYPE_EXTENSION:return s.DirectiveLocation.INPUT_OBJECT;case a.Kind.INPUT_VALUE_DEFINITION:return e[e.length-3].kind===a.Kind.INPUT_OBJECT_TYPE_DEFINITION?s.DirectiveLocation.INPUT_FIELD_DEFINITION:s.DirectiveLocation.ARGUMENT_DEFINITION}}(d);m&&-1===f.indexOf(m)&&e.reportError(new o.GraphQLError('Directive "@'.concat(p,'" may not be used on ').concat(m,"."),t))}else e.reportError(new o.GraphQLError('Unknown directive "@'.concat(p,'".'),t))}}}},"./node_modules/graphql/validation/rules/KnownFragmentNamesRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{KnownFragmentNamesRule:()=>i});var r=t("./node_modules/graphql/error/GraphQLError.mjs");function i(e){return{FragmentSpread:function(n){var t=n.name.value;e.getFragment(t)||e.reportError(new r.GraphQLError('Unknown fragment "'.concat(t,'".'),n.name))}}}},"./node_modules/graphql/validation/rules/KnownTypeNamesRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{KnownTypeNamesRule:()=>l});var r=t("./node_modules/graphql/jsutils/didYouMean.mjs"),i=t("./node_modules/graphql/jsutils/suggestionList.mjs"),o=t("./node_modules/graphql/error/GraphQLError.mjs"),a=t("./node_modules/graphql/language/predicates.mjs"),s=t("./node_modules/graphql/type/scalars.mjs"),u=t("./node_modules/graphql/type/introspection.mjs");function l(e){for(var n=e.getSchema(),t=n?n.getTypeMap():Object.create(null),s=Object.create(null),u=0,l=e.getDocument().definitions;u<l.length;u++){var d=l[u];(0,a.isTypeDefinitionNode)(d)&&(s[d.name.value]=!0)}var p=Object.keys(t).concat(Object.keys(s));return{NamedType:function(n,u,l,d,f){var m,h=n.name.value;if(!t[h]&&!s[h]){var v,y=null!==(v=f[2])&&void 0!==v?v:l,g=null!=y&&(m=y,!Array.isArray(m)&&((0,a.isTypeSystemDefinitionNode)(m)||(0,a.isTypeSystemExtensionNode)(m)));if(g&&function(e){return-1!==c.indexOf(e)}(h))return;var T=(0,i.default)(h,g?c.concat(p):p);e.reportError(new o.GraphQLError('Unknown type "'.concat(h,'".')+(0,r.default)(T),n))}}}}var c=[].concat(s.specifiedScalarTypes,u.introspectionTypes).map((function(e){return e.name}))},"./node_modules/graphql/validation/rules/LoneAnonymousOperationRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{LoneAnonymousOperationRule:()=>o});var r=t("./node_modules/graphql/error/GraphQLError.mjs"),i=t("./node_modules/graphql/language/kinds.mjs");function o(e){var n=0;return{Document:function(e){n=e.definitions.filter((function(e){return e.kind===i.Kind.OPERATION_DEFINITION})).length},OperationDefinition:function(t){!t.name&&n>1&&e.reportError(new r.GraphQLError("This anonymous operation must be the only defined operation.",t))}}}},"./node_modules/graphql/validation/rules/LoneSchemaDefinitionRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{LoneSchemaDefinitionRule:()=>i});var r=t("./node_modules/graphql/error/GraphQLError.mjs");function i(e){var n,t,i,o=e.getSchema(),a=null!==(n=null!==(t=null!==(i=null==o?void 0:o.astNode)&&void 0!==i?i:null==o?void 0:o.getQueryType())&&void 0!==t?t:null==o?void 0:o.getMutationType())&&void 0!==n?n:null==o?void 0:o.getSubscriptionType(),s=0;return{SchemaDefinition:function(n){a?e.reportError(new r.GraphQLError("Cannot define a new schema within a schema extension.",n)):(s>0&&e.reportError(new r.GraphQLError("Must provide only one schema definition.",n)),++s)}}}},"./node_modules/graphql/validation/rules/NoFragmentCyclesRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{NoFragmentCyclesRule:()=>i});var r=t("./node_modules/graphql/error/GraphQLError.mjs");function i(e){var n=Object.create(null),t=[],i=Object.create(null);return{OperationDefinition:function(){return!1},FragmentDefinition:function(e){return o(e),!1}};function o(a){if(!n[a.name.value]){var s=a.name.value;n[s]=!0;var u=e.getFragmentSpreads(a.selectionSet);if(0!==u.length){i[s]=t.length;for(var l=0;l<u.length;l++){var c=u[l],d=c.name.value,p=i[d];if(t.push(c),void 0===p){var f=e.getFragment(d);f&&o(f)}else{var m=t.slice(p),h=m.slice(0,-1).map((function(e){return'"'+e.name.value+'"'})).join(", ");e.reportError(new r.GraphQLError('Cannot spread fragment "'.concat(d,'" within itself')+(""!==h?" via ".concat(h,"."):"."),m))}t.pop()}i[s]=void 0}}}}},"./node_modules/graphql/validation/rules/NoUndefinedVariablesRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{NoUndefinedVariablesRule:()=>i});var r=t("./node_modules/graphql/error/GraphQLError.mjs");function i(e){var n=Object.create(null);return{OperationDefinition:{enter:function(){n=Object.create(null)},leave:function(t){for(var i=e.getRecursiveVariableUsages(t),o=0;o<i.length;o++){var a=i[o].node,s=a.name.value;!0!==n[s]&&e.reportError(new r.GraphQLError(t.name?'Variable "$'.concat(s,'" is not defined by operation "').concat(t.name.value,'".'):'Variable "$'.concat(s,'" is not defined.'),[a,t]))}}},VariableDefinition:function(e){n[e.variable.name.value]=!0}}}},"./node_modules/graphql/validation/rules/NoUnusedFragmentsRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{NoUnusedFragmentsRule:()=>i});var r=t("./node_modules/graphql/error/GraphQLError.mjs");function i(e){var n=[],t=[];return{OperationDefinition:function(e){return n.push(e),!1},FragmentDefinition:function(e){return t.push(e),!1},Document:{leave:function(){for(var i=Object.create(null),o=0;o<n.length;o++)for(var a=n[o],s=0,u=e.getRecursivelyReferencedFragments(a);s<u.length;s++)i[u[s].name.value]=!0;for(var l=0;l<t.length;l++){var c=t[l],d=c.name.value;!0!==i[d]&&e.reportError(new r.GraphQLError('Fragment "'.concat(d,'" is never used.'),c))}}}}}},"./node_modules/graphql/validation/rules/NoUnusedVariablesRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{NoUnusedVariablesRule:()=>i});var r=t("./node_modules/graphql/error/GraphQLError.mjs");function i(e){var n=[];return{OperationDefinition:{enter:function(){n=[]},leave:function(t){for(var i=Object.create(null),o=e.getRecursiveVariableUsages(t),a=0;a<o.length;a++)i[o[a].node.name.value]=!0;for(var s=0,u=n;s<u.length;s++){var l=u[s],c=l.variable.name.value;!0!==i[c]&&e.reportError(new r.GraphQLError(t.name?'Variable "$'.concat(c,'" is never used in operation "').concat(t.name.value,'".'):'Variable "$'.concat(c,'" is never used.'),l))}}},VariableDefinition:function(e){n.push(e)}}}},"./node_modules/graphql/validation/rules/OverlappingFieldsCanBeMergedRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{OverlappingFieldsCanBeMergedRule:()=>p});var r=t("./node_modules/graphql/polyfills/find.mjs"),i=t("./node_modules/graphql/polyfills/objectEntries.mjs"),o=t("./node_modules/graphql/jsutils/inspect.mjs"),a=t("./node_modules/graphql/error/GraphQLError.mjs"),s=t("./node_modules/graphql/language/kinds.mjs"),u=t("./node_modules/graphql/language/printer.mjs"),l=t("./node_modules/graphql/type/definition.mjs"),c=t("./node_modules/graphql/utilities/typeFromAST.mjs");function d(e){return Array.isArray(e)?e.map((function(e){var n=e[0],t=e[1];return'subfields "'.concat(n,'" conflict because ')+d(t)})).join(" and "):e}function p(e){var n=new _,t=new Map;return{SelectionSet:function(r){for(var o=function(e,n,t,r,o){var a=[],s=g(e,n,r,o),u=s[0],l=s[1];if(function(e,n,t,r,o){for(var a=0,s=(0,i.default)(o);a<s.length;a++){var u=s[a],l=u[0],c=u[1];if(c.length>1)for(var d=0;d<c.length;d++)for(var p=d+1;p<c.length;p++){var f=v(e,t,r,!1,l,c[d],c[p]);f&&n.push(f)}}}(e,a,n,t,u),0!==l.length)for(var c=0;c<l.length;c++){f(e,a,n,t,!1,u,l[c]);for(var d=c+1;d<l.length;d++)m(e,a,n,t,!1,l[c],l[d])}return a}(e,t,n,e.getParentType(),r),s=0;s<o.length;s++){var u=o[s],l=u[0],c=l[0],p=l[1],h=u[1],y=u[2],T=d(p);e.reportError(new a.GraphQLError('Fields "'.concat(c,'" conflict because ').concat(T,". Use different aliases on the fields to fetch both if this was intentional."),h.concat(y)))}}}}function f(e,n,t,r,i,o,a){var s=e.getFragment(a);if(s){var u=T(e,t,s),l=u[0],c=u[1];if(o!==l){h(e,n,t,r,i,o,l);for(var d=0;d<c.length;d++)f(e,n,t,r,i,o,c[d])}}}function m(e,n,t,r,i,o,a){if(o!==a&&!r.has(o,a,i)){r.add(o,a,i);var s=e.getFragment(o),u=e.getFragment(a);if(s&&u){var l=T(e,t,s),c=l[0],d=l[1],p=T(e,t,u),f=p[0],v=p[1];h(e,n,t,r,i,c,f);for(var y=0;y<v.length;y++)m(e,n,t,r,i,o,v[y]);for(var g=0;g<d.length;g++)m(e,n,t,r,i,d[g],a)}}}function h(e,n,t,r,i,o,a){for(var s=0,u=Object.keys(o);s<u.length;s++){var l=u[s],c=a[l];if(c)for(var d=o[l],p=0;p<d.length;p++)for(var f=0;f<c.length;f++){var m=v(e,t,r,i,l,d[p],c[f]);m&&n.push(m)}}}function v(e,n,t,i,a,s,c){var d,p,v=s[0],T=s[1],E=s[2],_=c[0],N=c[1],b=c[2],j=i||v!==_&&(0,l.isObjectType)(v)&&(0,l.isObjectType)(_);if(!j){var I,O,L=T.name.value,S=N.name.value;if(L!==S)return[[a,'"'.concat(L,'" and "').concat(S,'" are different fields')],[T],[N]];if(d=null!==(I=T.arguments)&&void 0!==I?I:[],p=null!==(O=N.arguments)&&void 0!==O?O:[],d.length!==p.length||!d.every((function(e){var n,t,i=(0,r.default)(p,(function(n){return n.name.value===e.name.value}));return!!i&&(n=e.value,t=i.value,(0,u.print)(n)===(0,u.print)(t))})))return[[a,"they have differing arguments"],[T],[N]]}var D=null==E?void 0:E.type,A=null==b?void 0:b.type;if(D&&A&&y(D,A))return[[a,'they return conflicting types "'.concat((0,o.default)(D),'" and "').concat((0,o.default)(A),'"')],[T],[N]];var w=T.selectionSet,R=N.selectionSet;if(w&&R){var k=function(e,n,t,r,i,o,a,s){var u=[],l=g(e,n,i,o),c=l[0],d=l[1],p=g(e,n,a,s),v=p[0],y=p[1];if(h(e,u,n,t,r,c,v),0!==y.length)for(var T=0;T<y.length;T++)f(e,u,n,t,r,c,y[T]);if(0!==d.length)for(var E=0;E<d.length;E++)f(e,u,n,t,r,v,d[E]);for(var _=0;_<d.length;_++)for(var N=0;N<y.length;N++)m(e,u,n,t,r,d[_],y[N]);return u}(e,n,t,j,(0,l.getNamedType)(D),w,(0,l.getNamedType)(A),R);return function(e,n,t,r){if(e.length>0)return[[n,e.map((function(e){return e[0]}))],e.reduce((function(e,n){var t=n[1];return e.concat(t)}),[t]),e.reduce((function(e,n){var t=n[2];return e.concat(t)}),[r])]}(k,a,T,N)}}function y(e,n){return(0,l.isListType)(e)?!(0,l.isListType)(n)||y(e.ofType,n.ofType):!!(0,l.isListType)(n)||((0,l.isNonNullType)(e)?!(0,l.isNonNullType)(n)||y(e.ofType,n.ofType):!!(0,l.isNonNullType)(n)||!(!(0,l.isLeafType)(e)&&!(0,l.isLeafType)(n))&&e!==n)}function g(e,n,t,r){var i=n.get(r);if(!i){var o=Object.create(null),a=Object.create(null);E(e,t,r,o,a),i=[o,Object.keys(a)],n.set(r,i)}return i}function T(e,n,t){var r=n.get(t.selectionSet);if(r)return r;var i=(0,c.typeFromAST)(e.getSchema(),t.typeCondition);return g(e,n,i,t.selectionSet)}function E(e,n,t,r,i){for(var o=0,a=t.selections;o<a.length;o++){var u=a[o];switch(u.kind){case s.Kind.FIELD:var d=u.name.value,p=void 0;((0,l.isObjectType)(n)||(0,l.isInterfaceType)(n))&&(p=n.getFields()[d]);var f=u.alias?u.alias.value:d;r[f]||(r[f]=[]),r[f].push([n,u,p]);break;case s.Kind.FRAGMENT_SPREAD:i[u.name.value]=!0;break;case s.Kind.INLINE_FRAGMENT:var m=u.typeCondition,h=m?(0,c.typeFromAST)(e.getSchema(),m):n;E(e,h,u.selectionSet,r,i)}}}var _=function(){function e(){this._data=Object.create(null)}var n=e.prototype;return n.has=function(e,n,t){var r=this._data[e],i=r&&r[n];return void 0!==i&&(!1!==t||!1===i)},n.add=function(e,n,t){this._pairSetAdd(e,n,t),this._pairSetAdd(n,e,t)},n._pairSetAdd=function(e,n,t){var r=this._data[e];r||(r=Object.create(null),this._data[e]=r),r[n]=t},e}()},"./node_modules/graphql/validation/rules/PossibleFragmentSpreadsRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{PossibleFragmentSpreadsRule:()=>u});var r=t("./node_modules/graphql/jsutils/inspect.mjs"),i=t("./node_modules/graphql/error/GraphQLError.mjs"),o=t("./node_modules/graphql/type/definition.mjs"),a=t("./node_modules/graphql/utilities/typeFromAST.mjs"),s=t("./node_modules/graphql/utilities/typeComparators.mjs");function u(e){return{InlineFragment:function(n){var t=e.getType(),a=e.getParentType();if((0,o.isCompositeType)(t)&&(0,o.isCompositeType)(a)&&!(0,s.doTypesOverlap)(e.getSchema(),t,a)){var u=(0,r.default)(a),l=(0,r.default)(t);e.reportError(new i.GraphQLError('Fragment cannot be spread here as objects of type "'.concat(u,'" can never be of type "').concat(l,'".'),n))}},FragmentSpread:function(n){var t=n.name.value,u=function(e,n){var t=e.getFragment(n);if(t){var r=(0,a.typeFromAST)(e.getSchema(),t.typeCondition);if((0,o.isCompositeType)(r))return r}}(e,t),l=e.getParentType();if(u&&l&&!(0,s.doTypesOverlap)(e.getSchema(),u,l)){var c=(0,r.default)(l),d=(0,r.default)(u);e.reportError(new i.GraphQLError('Fragment "'.concat(t,'" cannot be spread here as objects of type "').concat(c,'" can never be of type "').concat(d,'".'),n))}}}}},"./node_modules/graphql/validation/rules/PossibleTypeExtensionsRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{PossibleTypeExtensionsRule:()=>f});var r,i=t("./node_modules/graphql/jsutils/inspect.mjs"),o=t("./node_modules/graphql/jsutils/invariant.mjs"),a=t("./node_modules/graphql/jsutils/didYouMean.mjs"),s=t("./node_modules/graphql/jsutils/suggestionList.mjs"),u=t("./node_modules/graphql/error/GraphQLError.mjs"),l=t("./node_modules/graphql/language/kinds.mjs"),c=t("./node_modules/graphql/language/predicates.mjs"),d=t("./node_modules/graphql/type/definition.mjs");function p(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function f(e){for(var n=e.getSchema(),t=Object.create(null),r=0,p=e.getDocument().definitions;r<p.length;r++){var f=p[r];(0,c.isTypeDefinitionNode)(f)&&(t[f.name.value]=f)}return{ScalarTypeExtension:h,ObjectTypeExtension:h,InterfaceTypeExtension:h,UnionTypeExtension:h,EnumTypeExtension:h,InputObjectTypeExtension:h};function h(r){var c,p,f=r.name.value,h=t[f],v=null==n?void 0:n.getType(f);if(h?c=m[h.kind]:v&&(p=v,c=(0,d.isScalarType)(p)?l.Kind.SCALAR_TYPE_EXTENSION:(0,d.isObjectType)(p)?l.Kind.OBJECT_TYPE_EXTENSION:(0,d.isInterfaceType)(p)?l.Kind.INTERFACE_TYPE_EXTENSION:(0,d.isUnionType)(p)?l.Kind.UNION_TYPE_EXTENSION:(0,d.isEnumType)(p)?l.Kind.ENUM_TYPE_EXTENSION:(0,d.isInputObjectType)(p)?l.Kind.INPUT_OBJECT_TYPE_EXTENSION:void(0,o.default)(0,"Unexpected type: "+(0,i.default)(p))),c){if(c!==r.kind){var y=function(e){switch(e){case l.Kind.SCALAR_TYPE_EXTENSION:return"scalar";case l.Kind.OBJECT_TYPE_EXTENSION:return"object";case l.Kind.INTERFACE_TYPE_EXTENSION:return"interface";case l.Kind.UNION_TYPE_EXTENSION:return"union";case l.Kind.ENUM_TYPE_EXTENSION:return"enum";case l.Kind.INPUT_OBJECT_TYPE_EXTENSION:return"input object"}(0,o.default)(0,"Unexpected kind: "+(0,i.default)(e))}(r.kind);e.reportError(new u.GraphQLError("Cannot extend non-".concat(y,' type "').concat(f,'".'),h?[h,r]:r))}}else{var g=Object.keys(t);n&&(g=g.concat(Object.keys(n.getTypeMap())));var T=(0,s.default)(f,g);e.reportError(new u.GraphQLError('Cannot extend type "'.concat(f,'" because it is not defined.')+(0,a.default)(T),r.name))}}}var m=(p(r={},l.Kind.SCALAR_TYPE_DEFINITION,l.Kind.SCALAR_TYPE_EXTENSION),p(r,l.Kind.OBJECT_TYPE_DEFINITION,l.Kind.OBJECT_TYPE_EXTENSION),p(r,l.Kind.INTERFACE_TYPE_DEFINITION,l.Kind.INTERFACE_TYPE_EXTENSION),p(r,l.Kind.UNION_TYPE_DEFINITION,l.Kind.UNION_TYPE_EXTENSION),p(r,l.Kind.ENUM_TYPE_DEFINITION,l.Kind.ENUM_TYPE_EXTENSION),p(r,l.Kind.INPUT_OBJECT_TYPE_DEFINITION,l.Kind.INPUT_OBJECT_TYPE_EXTENSION),r)},"./node_modules/graphql/validation/rules/ProvidedRequiredArgumentsRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{ProvidedRequiredArgumentsRule:()=>f,ProvidedRequiredArgumentsOnDirectivesRule:()=>m});var r=t("./node_modules/graphql/jsutils/inspect.mjs"),i=t("./node_modules/graphql/jsutils/keyMap.mjs"),o=t("./node_modules/graphql/error/GraphQLError.mjs"),a=t("./node_modules/graphql/language/kinds.mjs"),s=t("./node_modules/graphql/language/printer.mjs"),u=t("./node_modules/graphql/type/directives.mjs"),l=t("./node_modules/graphql/type/definition.mjs");function c(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function d(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?c(Object(t),!0).forEach((function(n){p(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):c(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function f(e){return d(d({},m(e)),{},{Field:{leave:function(n){var t,a=e.getFieldDef();if(!a)return!1;for(var s=null!==(t=n.arguments)&&void 0!==t?t:[],u=(0,i.default)(s,(function(e){return e.name.value})),c=0,d=a.args;c<d.length;c++){var p=d[c];if(!u[p.name]&&(0,l.isRequiredArgument)(p)){var f=(0,r.default)(p.type);e.reportError(new o.GraphQLError('Field "'.concat(a.name,'" argument "').concat(p.name,'" of type "').concat(f,'" is required, but it was not provided.'),n))}}}}})}function m(e){for(var n=Object.create(null),t=e.getSchema(),c=t?t.getDirectives():u.specifiedDirectives,d=0;d<c.length;d++){var p=c[d];n[p.name]=(0,i.default)(p.args.filter(l.isRequiredArgument),(function(e){return e.name}))}for(var f=e.getDocument().definitions,m=0;m<f.length;m++){var v=f[m];if(v.kind===a.Kind.DIRECTIVE_DEFINITION){var y,g=null!==(y=v.arguments)&&void 0!==y?y:[];n[v.name.value]=(0,i.default)(g.filter(h),(function(e){return e.name.value}))}}return{Directive:{leave:function(t){var a=t.name.value,u=n[a];if(u)for(var c,d=null!==(c=t.arguments)&&void 0!==c?c:[],p=(0,i.default)(d,(function(e){return e.name.value})),f=0,m=Object.keys(u);f<m.length;f++){var h=m[f];if(!p[h]){var v=u[h].type,y=(0,l.isType)(v)?(0,r.default)(v):(0,s.print)(v);e.reportError(new o.GraphQLError('Directive "@'.concat(a,'" argument "').concat(h,'" of type "').concat(y,'" is required, but it was not provided.'),t))}}}}}}function h(e){return e.type.kind===a.Kind.NON_NULL_TYPE&&null==e.defaultValue}},"./node_modules/graphql/validation/rules/ScalarLeafsRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{ScalarLeafsRule:()=>a});var r=t("./node_modules/graphql/jsutils/inspect.mjs"),i=t("./node_modules/graphql/error/GraphQLError.mjs"),o=t("./node_modules/graphql/type/definition.mjs");function a(e){return{Field:function(n){var t=e.getType(),a=n.selectionSet;if(t)if((0,o.isLeafType)((0,o.getNamedType)(t))){if(a){var s=n.name.value,u=(0,r.default)(t);e.reportError(new i.GraphQLError('Field "'.concat(s,'" must not have a selection since type "').concat(u,'" has no subfields.'),a))}}else if(!a){var l=n.name.value,c=(0,r.default)(t);e.reportError(new i.GraphQLError('Field "'.concat(l,'" of type "').concat(c,'" must have a selection of subfields. Did you mean "').concat(l,' { ... }"?'),n))}}}}},"./node_modules/graphql/validation/rules/SingleFieldSubscriptionsRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{SingleFieldSubscriptionsRule:()=>i});var r=t("./node_modules/graphql/error/GraphQLError.mjs");function i(e){return{OperationDefinition:function(n){"subscription"===n.operation&&1!==n.selectionSet.selections.length&&e.reportError(new r.GraphQLError(n.name?'Subscription "'.concat(n.name.value,'" must select only one top level field.'):"Anonymous Subscription must select only one top level field.",n.selectionSet.selections.slice(1)))}}}},"./node_modules/graphql/validation/rules/UniqueArgumentNamesRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{UniqueArgumentNamesRule:()=>i});var r=t("./node_modules/graphql/error/GraphQLError.mjs");function i(e){var n=Object.create(null);return{Field:function(){n=Object.create(null)},Directive:function(){n=Object.create(null)},Argument:function(t){var i=t.name.value;return n[i]?e.reportError(new r.GraphQLError('There can be only one argument named "'.concat(i,'".'),[n[i],t.name])):n[i]=t.name,!1}}}},"./node_modules/graphql/validation/rules/UniqueDirectiveNamesRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{UniqueDirectiveNamesRule:()=>i});var r=t("./node_modules/graphql/error/GraphQLError.mjs");function i(e){var n=Object.create(null),t=e.getSchema();return{DirectiveDefinition:function(i){var o=i.name.value;if(null==t||!t.getDirective(o))return n[o]?e.reportError(new r.GraphQLError('There can be only one directive named "@'.concat(o,'".'),[n[o],i.name])):n[o]=i.name,!1;e.reportError(new r.GraphQLError('Directive "@'.concat(o,'" already exists in the schema. It cannot be redefined.'),i.name))}}}},"./node_modules/graphql/validation/rules/UniqueDirectivesPerLocationRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{UniqueDirectivesPerLocationRule:()=>s});var r=t("./node_modules/graphql/error/GraphQLError.mjs"),i=t("./node_modules/graphql/language/kinds.mjs"),o=t("./node_modules/graphql/language/predicates.mjs"),a=t("./node_modules/graphql/type/directives.mjs");function s(e){for(var n=Object.create(null),t=e.getSchema(),s=t?t.getDirectives():a.specifiedDirectives,u=0;u<s.length;u++){var l=s[u];n[l.name]=!l.isRepeatable}for(var c=e.getDocument().definitions,d=0;d<c.length;d++){var p=c[d];p.kind===i.Kind.DIRECTIVE_DEFINITION&&(n[p.name.value]=!p.repeatable)}var f=Object.create(null),m=Object.create(null);return{enter:function(t){if(null!=t.directives){var a;if(t.kind===i.Kind.SCHEMA_DEFINITION||t.kind===i.Kind.SCHEMA_EXTENSION)a=f;else if((0,o.isTypeDefinitionNode)(t)||(0,o.isTypeExtensionNode)(t)){var s=t.name.value;void 0===(a=m[s])&&(m[s]=a=Object.create(null))}else a=Object.create(null);for(var u=0,l=t.directives;u<l.length;u++){var c=l[u],d=c.name.value;n[d]&&(a[d]?e.reportError(new r.GraphQLError('The directive "@'.concat(d,'" can only be used once at this location.'),[a[d],c])):a[d]=c)}}}}}},"./node_modules/graphql/validation/rules/UniqueEnumValueNamesRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{UniqueEnumValueNamesRule:()=>o});var r=t("./node_modules/graphql/error/GraphQLError.mjs"),i=t("./node_modules/graphql/type/definition.mjs");function o(e){var n=e.getSchema(),t=n?n.getTypeMap():Object.create(null),o=Object.create(null);return{EnumTypeDefinition:a,EnumTypeExtension:a};function a(n){var a,s=n.name.value;o[s]||(o[s]=Object.create(null));for(var u=null!==(a=n.values)&&void 0!==a?a:[],l=o[s],c=0;c<u.length;c++){var d=u[c],p=d.name.value,f=t[s];(0,i.isEnumType)(f)&&f.getValue(p)?e.reportError(new r.GraphQLError('Enum value "'.concat(s,".").concat(p,'" already exists in the schema. It cannot also be defined in this type extension.'),d.name)):l[p]?e.reportError(new r.GraphQLError('Enum value "'.concat(s,".").concat(p,'" can only be defined once.'),[l[p],d.name])):l[p]=d.name}return!1}}},"./node_modules/graphql/validation/rules/UniqueFieldDefinitionNamesRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{UniqueFieldDefinitionNamesRule:()=>o});var r=t("./node_modules/graphql/error/GraphQLError.mjs"),i=t("./node_modules/graphql/type/definition.mjs");function o(e){var n=e.getSchema(),t=n?n.getTypeMap():Object.create(null),i=Object.create(null);return{InputObjectTypeDefinition:o,InputObjectTypeExtension:o,InterfaceTypeDefinition:o,InterfaceTypeExtension:o,ObjectTypeDefinition:o,ObjectTypeExtension:o};function o(n){var o,s=n.name.value;i[s]||(i[s]=Object.create(null));for(var u=null!==(o=n.fields)&&void 0!==o?o:[],l=i[s],c=0;c<u.length;c++){var d=u[c],p=d.name.value;a(t[s],p)?e.reportError(new r.GraphQLError('Field "'.concat(s,".").concat(p,'" already exists in the schema. It cannot also be defined in this type extension.'),d.name)):l[p]?e.reportError(new r.GraphQLError('Field "'.concat(s,".").concat(p,'" can only be defined once.'),[l[p],d.name])):l[p]=d.name}return!1}}function a(e,n){return!!((0,i.isObjectType)(e)||(0,i.isInterfaceType)(e)||(0,i.isInputObjectType)(e))&&null!=e.getFields()[n]}},"./node_modules/graphql/validation/rules/UniqueFragmentNamesRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{UniqueFragmentNamesRule:()=>i});var r=t("./node_modules/graphql/error/GraphQLError.mjs");function i(e){var n=Object.create(null);return{OperationDefinition:function(){return!1},FragmentDefinition:function(t){var i=t.name.value;return n[i]?e.reportError(new r.GraphQLError('There can be only one fragment named "'.concat(i,'".'),[n[i],t.name])):n[i]=t.name,!1}}}},"./node_modules/graphql/validation/rules/UniqueInputFieldNamesRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{UniqueInputFieldNamesRule:()=>i});var r=t("./node_modules/graphql/error/GraphQLError.mjs");function i(e){var n=[],t=Object.create(null);return{ObjectValue:{enter:function(){n.push(t),t=Object.create(null)},leave:function(){t=n.pop()}},ObjectField:function(n){var i=n.name.value;t[i]?e.reportError(new r.GraphQLError('There can be only one input field named "'.concat(i,'".'),[t[i],n.name])):t[i]=n.name}}}},"./node_modules/graphql/validation/rules/UniqueOperationNamesRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{UniqueOperationNamesRule:()=>i});var r=t("./node_modules/graphql/error/GraphQLError.mjs");function i(e){var n=Object.create(null);return{OperationDefinition:function(t){var i=t.name;return i&&(n[i.value]?e.reportError(new r.GraphQLError('There can be only one operation named "'.concat(i.value,'".'),[n[i.value],i])):n[i.value]=i),!1},FragmentDefinition:function(){return!1}}}},"./node_modules/graphql/validation/rules/UniqueOperationTypesRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{UniqueOperationTypesRule:()=>i});var r=t("./node_modules/graphql/error/GraphQLError.mjs");function i(e){var n=e.getSchema(),t=Object.create(null),i=n?{query:n.getQueryType(),mutation:n.getMutationType(),subscription:n.getSubscriptionType()}:{};return{SchemaDefinition:o,SchemaExtension:o};function o(n){for(var o,a=null!==(o=n.operationTypes)&&void 0!==o?o:[],s=0;s<a.length;s++){var u=a[s],l=u.operation,c=t[l];i[l]?e.reportError(new r.GraphQLError("Type for ".concat(l," already defined in the schema. It cannot be redefined."),u)):c?e.reportError(new r.GraphQLError("There can be only one ".concat(l," type in schema."),[c,u])):t[l]=u}return!1}}},"./node_modules/graphql/validation/rules/UniqueTypeNamesRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{UniqueTypeNamesRule:()=>i});var r=t("./node_modules/graphql/error/GraphQLError.mjs");function i(e){var n=Object.create(null),t=e.getSchema();return{ScalarTypeDefinition:i,ObjectTypeDefinition:i,InterfaceTypeDefinition:i,UnionTypeDefinition:i,EnumTypeDefinition:i,InputObjectTypeDefinition:i};function i(i){var o=i.name.value;if(null==t||!t.getType(o))return n[o]?e.reportError(new r.GraphQLError('There can be only one type named "'.concat(o,'".'),[n[o],i.name])):n[o]=i.name,!1;e.reportError(new r.GraphQLError('Type "'.concat(o,'" already exists in the schema. It cannot also be defined in this type definition.'),i.name))}}},"./node_modules/graphql/validation/rules/UniqueVariableNamesRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{UniqueVariableNamesRule:()=>i});var r=t("./node_modules/graphql/error/GraphQLError.mjs");function i(e){var n=Object.create(null);return{OperationDefinition:function(){n=Object.create(null)},VariableDefinition:function(t){var i=t.variable.name.value;n[i]?e.reportError(new r.GraphQLError('There can be only one variable named "$'.concat(i,'".'),[n[i],t.variable.name])):n[i]=t.variable.name}}}},"./node_modules/graphql/validation/rules/ValuesOfCorrectTypeRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{ValuesOfCorrectTypeRule:()=>d});var r=t("./node_modules/graphql/polyfills/objectValues.mjs"),i=t("./node_modules/graphql/jsutils/keyMap.mjs"),o=t("./node_modules/graphql/jsutils/inspect.mjs"),a=t("./node_modules/graphql/jsutils/didYouMean.mjs"),s=t("./node_modules/graphql/jsutils/suggestionList.mjs"),u=t("./node_modules/graphql/error/GraphQLError.mjs"),l=t("./node_modules/graphql/language/printer.mjs"),c=t("./node_modules/graphql/type/definition.mjs");function d(e){return{ListValue:function(n){var t=(0,c.getNullableType)(e.getParentInputType());if(!(0,c.isListType)(t))return p(e,n),!1},ObjectValue:function(n){var t=(0,c.getNamedType)(e.getInputType());if(!(0,c.isInputObjectType)(t))return p(e,n),!1;for(var a=(0,i.default)(n.fields,(function(e){return e.name.value})),s=0,l=(0,r.default)(t.getFields());s<l.length;s++){var d=l[s];if(!a[d.name]&&(0,c.isRequiredInputField)(d)){var f=(0,o.default)(d.type);e.reportError(new u.GraphQLError('Field "'.concat(t.name,".").concat(d.name,'" of required type "').concat(f,'" was not provided.'),n))}}},ObjectField:function(n){var t=(0,c.getNamedType)(e.getParentInputType());if(!e.getInputType()&&(0,c.isInputObjectType)(t)){var r=(0,s.default)(n.name.value,Object.keys(t.getFields()));e.reportError(new u.GraphQLError('Field "'.concat(n.name.value,'" is not defined by type "').concat(t.name,'".')+(0,a.default)(r),n))}},NullValue:function(n){var t=e.getInputType();(0,c.isNonNullType)(t)&&e.reportError(new u.GraphQLError('Expected value of type "'.concat((0,o.default)(t),'", found ').concat((0,l.print)(n),"."),n))},EnumValue:function(n){return p(e,n)},IntValue:function(n){return p(e,n)},FloatValue:function(n){return p(e,n)},StringValue:function(n){return p(e,n)},BooleanValue:function(n){return p(e,n)}}}function p(e,n){var t=e.getInputType();if(t){var r=(0,c.getNamedType)(t);if((0,c.isLeafType)(r))try{if(void 0===r.parseLiteral(n,void 0)){var i=(0,o.default)(t);e.reportError(new u.GraphQLError('Expected value of type "'.concat(i,'", found ').concat((0,l.print)(n),"."),n))}}catch(r){var a=(0,o.default)(t);r instanceof u.GraphQLError?e.reportError(r):e.reportError(new u.GraphQLError('Expected value of type "'.concat(a,'", found ').concat((0,l.print)(n),"; ")+r.message,n,void 0,void 0,void 0,r))}else{var s=(0,o.default)(t);e.reportError(new u.GraphQLError('Expected value of type "'.concat(s,'", found ').concat((0,l.print)(n),"."),n))}}}},"./node_modules/graphql/validation/rules/VariablesAreInputTypesRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{VariablesAreInputTypesRule:()=>s});var r=t("./node_modules/graphql/error/GraphQLError.mjs"),i=t("./node_modules/graphql/language/printer.mjs"),o=t("./node_modules/graphql/type/definition.mjs"),a=t("./node_modules/graphql/utilities/typeFromAST.mjs");function s(e){return{VariableDefinition:function(n){var t=(0,a.typeFromAST)(e.getSchema(),n.type);if(t&&!(0,o.isInputType)(t)){var s=n.variable.name.value,u=(0,i.print)(n.type);e.reportError(new r.GraphQLError('Variable "$'.concat(s,'" cannot be non-input type "').concat(u,'".'),n.type))}}}}},"./node_modules/graphql/validation/rules/VariablesInAllowedPositionRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{VariablesInAllowedPositionRule:()=>l});var r=t("./node_modules/graphql/jsutils/inspect.mjs"),i=t("./node_modules/graphql/error/GraphQLError.mjs"),o=t("./node_modules/graphql/language/kinds.mjs"),a=t("./node_modules/graphql/type/definition.mjs"),s=t("./node_modules/graphql/utilities/typeFromAST.mjs"),u=t("./node_modules/graphql/utilities/typeComparators.mjs");function l(e){var n=Object.create(null);return{OperationDefinition:{enter:function(){n=Object.create(null)},leave:function(t){for(var o=e.getRecursiveVariableUsages(t),a=0;a<o.length;a++){var u=o[a],l=u.node,d=u.type,p=u.defaultValue,f=l.name.value,m=n[f];if(m&&d){var h=e.getSchema(),v=(0,s.typeFromAST)(h,m.type);if(v&&!c(h,v,m.defaultValue,d,p)){var y=(0,r.default)(v),g=(0,r.default)(d);e.reportError(new i.GraphQLError('Variable "$'.concat(f,'" of type "').concat(y,'" used in position expecting type "').concat(g,'".'),[m,l]))}}}}},VariableDefinition:function(e){n[e.variable.name.value]=e}}}function c(e,n,t,r,i){if((0,a.isNonNullType)(r)&&!(0,a.isNonNullType)(n)){if((null==t||t.kind===o.Kind.NULL)&&void 0===i)return!1;var s=r.ofType;return(0,u.isTypeSubTypeOf)(e,n,s)}return(0,u.isTypeSubTypeOf)(e,n,r)}},"./node_modules/graphql/validation/rules/custom/NoDeprecatedCustomRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{NoDeprecatedCustomRule:()=>a});var r=t("./node_modules/graphql/jsutils/invariant.mjs"),i=t("./node_modules/graphql/error/GraphQLError.mjs"),o=t("./node_modules/graphql/type/definition.mjs");function a(e){return{Field:function(n){var t=e.getFieldDef(),o=null==t?void 0:t.deprecationReason;if(t&&null!=o){var a=e.getParentType();null!=a||(0,r.default)(0),e.reportError(new i.GraphQLError("The field ".concat(a.name,".").concat(t.name," is deprecated. ").concat(o),n))}},Argument:function(n){var t=e.getArgument(),o=null==t?void 0:t.deprecationReason;if(t&&null!=o){var a=e.getDirective();if(null!=a)e.reportError(new i.GraphQLError('Directive "@'.concat(a.name,'" argument "').concat(t.name,'" is deprecated. ').concat(o),n));else{var s=e.getParentType(),u=e.getFieldDef();null!=s&&null!=u||(0,r.default)(0),e.reportError(new i.GraphQLError('Field "'.concat(s.name,".").concat(u.name,'" argument "').concat(t.name,'" is deprecated. ').concat(o),n))}}},ObjectField:function(n){var t=(0,o.getNamedType)(e.getParentInputType());if((0,o.isInputObjectType)(t)){var r=t.getFields()[n.name.value],a=null==r?void 0:r.deprecationReason;null!=a&&e.reportError(new i.GraphQLError("The input field ".concat(t.name,".").concat(r.name," is deprecated. ").concat(a),n))}},EnumValue:function(n){var t=e.getEnumValue(),a=null==t?void 0:t.deprecationReason;if(t&&null!=a){var s=(0,o.getNamedType)(e.getInputType());null!=s||(0,r.default)(0),e.reportError(new i.GraphQLError('The enum value "'.concat(s.name,".").concat(t.name,'" is deprecated. ').concat(a),n))}}}}},"./node_modules/graphql/validation/rules/custom/NoSchemaIntrospectionCustomRule.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{NoSchemaIntrospectionCustomRule:()=>a});var r=t("./node_modules/graphql/error/GraphQLError.mjs"),i=t("./node_modules/graphql/type/definition.mjs"),o=t("./node_modules/graphql/type/introspection.mjs");function a(e){return{Field:function(n){var t=(0,i.getNamedType)(e.getType());t&&(0,o.isIntrospectionType)(t)&&e.reportError(new r.GraphQLError('GraphQL introspection has been disabled, but the requested query contained the field "'.concat(n.name.value,'".'),n))}}}},"./node_modules/graphql/validation/specifiedRules.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{specifiedRules:()=>F,specifiedSDLRules:()=>G});var r=t("./node_modules/graphql/validation/rules/ExecutableDefinitionsRule.mjs"),i=t("./node_modules/graphql/validation/rules/UniqueOperationNamesRule.mjs"),o=t("./node_modules/graphql/validation/rules/LoneAnonymousOperationRule.mjs"),a=t("./node_modules/graphql/validation/rules/SingleFieldSubscriptionsRule.mjs"),s=t("./node_modules/graphql/validation/rules/KnownTypeNamesRule.mjs"),u=t("./node_modules/graphql/validation/rules/FragmentsOnCompositeTypesRule.mjs"),l=t("./node_modules/graphql/validation/rules/VariablesAreInputTypesRule.mjs"),c=t("./node_modules/graphql/validation/rules/ScalarLeafsRule.mjs"),d=t("./node_modules/graphql/validation/rules/FieldsOnCorrectTypeRule.mjs"),p=t("./node_modules/graphql/validation/rules/UniqueFragmentNamesRule.mjs"),f=t("./node_modules/graphql/validation/rules/KnownFragmentNamesRule.mjs"),m=t("./node_modules/graphql/validation/rules/NoUnusedFragmentsRule.mjs"),h=t("./node_modules/graphql/validation/rules/PossibleFragmentSpreadsRule.mjs"),v=t("./node_modules/graphql/validation/rules/NoFragmentCyclesRule.mjs"),y=t("./node_modules/graphql/validation/rules/UniqueVariableNamesRule.mjs"),g=t("./node_modules/graphql/validation/rules/NoUndefinedVariablesRule.mjs"),T=t("./node_modules/graphql/validation/rules/NoUnusedVariablesRule.mjs"),E=t("./node_modules/graphql/validation/rules/KnownDirectivesRule.mjs"),_=t("./node_modules/graphql/validation/rules/UniqueDirectivesPerLocationRule.mjs"),N=t("./node_modules/graphql/validation/rules/KnownArgumentNamesRule.mjs"),b=t("./node_modules/graphql/validation/rules/UniqueArgumentNamesRule.mjs"),j=t("./node_modules/graphql/validation/rules/ValuesOfCorrectTypeRule.mjs"),I=t("./node_modules/graphql/validation/rules/ProvidedRequiredArgumentsRule.mjs"),O=t("./node_modules/graphql/validation/rules/VariablesInAllowedPositionRule.mjs"),L=t("./node_modules/graphql/validation/rules/OverlappingFieldsCanBeMergedRule.mjs"),S=t("./node_modules/graphql/validation/rules/UniqueInputFieldNamesRule.mjs"),D=t("./node_modules/graphql/validation/rules/LoneSchemaDefinitionRule.mjs"),A=t("./node_modules/graphql/validation/rules/UniqueOperationTypesRule.mjs"),w=t("./node_modules/graphql/validation/rules/UniqueTypeNamesRule.mjs"),R=t("./node_modules/graphql/validation/rules/UniqueEnumValueNamesRule.mjs"),k=t("./node_modules/graphql/validation/rules/UniqueFieldDefinitionNamesRule.mjs"),q=t("./node_modules/graphql/validation/rules/UniqueDirectiveNamesRule.mjs"),x=t("./node_modules/graphql/validation/rules/PossibleTypeExtensionsRule.mjs"),F=Object.freeze([r.ExecutableDefinitionsRule,i.UniqueOperationNamesRule,o.LoneAnonymousOperationRule,a.SingleFieldSubscriptionsRule,s.KnownTypeNamesRule,u.FragmentsOnCompositeTypesRule,l.VariablesAreInputTypesRule,c.ScalarLeafsRule,d.FieldsOnCorrectTypeRule,p.UniqueFragmentNamesRule,f.KnownFragmentNamesRule,m.NoUnusedFragmentsRule,h.PossibleFragmentSpreadsRule,v.NoFragmentCyclesRule,y.UniqueVariableNamesRule,g.NoUndefinedVariablesRule,T.NoUnusedVariablesRule,E.KnownDirectivesRule,_.UniqueDirectivesPerLocationRule,N.KnownArgumentNamesRule,b.UniqueArgumentNamesRule,j.ValuesOfCorrectTypeRule,I.ProvidedRequiredArgumentsRule,O.VariablesInAllowedPositionRule,L.OverlappingFieldsCanBeMergedRule,S.UniqueInputFieldNamesRule]),G=Object.freeze([D.LoneSchemaDefinitionRule,A.UniqueOperationTypesRule,w.UniqueTypeNamesRule,R.UniqueEnumValueNamesRule,k.UniqueFieldDefinitionNamesRule,q.UniqueDirectiveNamesRule,s.KnownTypeNamesRule,E.KnownDirectivesRule,_.UniqueDirectivesPerLocationRule,x.PossibleTypeExtensionsRule,N.KnownArgumentNamesOnDirectivesRule,b.UniqueArgumentNamesRule,S.UniqueInputFieldNamesRule,I.ProvidedRequiredArgumentsOnDirectivesRule])},"./node_modules/graphql/validation/validate.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{validate:()=>c,validateSDL:()=>d,assertValidSDL:()=>p,assertValidSDLExtension:()=>f});var r=t("./node_modules/graphql/jsutils/devAssert.mjs"),i=t("./node_modules/graphql/error/GraphQLError.mjs"),o=t("./node_modules/graphql/language/visitor.mjs"),a=t("./node_modules/graphql/type/validate.mjs"),s=t("./node_modules/graphql/utilities/TypeInfo.mjs"),u=t("./node_modules/graphql/validation/specifiedRules.mjs"),l=t("./node_modules/graphql/validation/ValidationContext.mjs");function c(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:u.specifiedRules,c=arguments.length>3&&void 0!==arguments[3]?arguments[3]:new s.TypeInfo(e),d=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{maxErrors:void 0};n||(0,r.default)(0,"Must provide document."),(0,a.assertValidSchema)(e);var p=Object.freeze({}),f=[],m=new l.ValidationContext(e,n,c,(function(e){if(null!=d.maxErrors&&f.length>=d.maxErrors)throw f.push(new i.GraphQLError("Too many validation errors, error limit reached. Validation aborted.")),p;f.push(e)})),h=(0,o.visitInParallel)(t.map((function(e){return e(m)})));try{(0,o.visit)(n,(0,s.visitWithTypeInfo)(c,h))}catch(e){if(e!==p)throw e}return f}function d(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:u.specifiedSDLRules,r=[],i=new l.SDLValidationContext(e,n,(function(e){r.push(e)})),a=t.map((function(e){return e(i)}));return(0,o.visit)(e,(0,o.visitInParallel)(a)),r}function p(e){var n=d(e);if(0!==n.length)throw new Error(n.map((function(e){return e.message})).join("\n\n"))}function f(e,n){var t=d(e,n);if(0!==t.length)throw new Error(t.map((function(e){return e.message})).join("\n\n"))}},"./node_modules/graphql/version.mjs":(e,n,t)=>{"use strict";t.r(n),t.d(n,{version:()=>r,versionInfo:()=>i});var r="15.6.1",i=Object.freeze({major:15,minor:6,patch:1,preReleaseTag:null})}},n={};function t(r){var i=n[r];if(void 0!==i)return i.exports;var o=n[r]={exports:{}};return e[r].call(o.exports,o,o.exports,t),o.exports}t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t("./src/background.ts")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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U2lsRSxFQUFvQnBzRSxFQUFFaUgsRUFBU0UsSUFDNUV4RyxPQUFPZ0osZUFBZTFDLEVBQVNFLEVBQUssQ0FBRXlDLFlBQVksRUFBTTNILElBQUs4akIsRUFBVzVlLE1DSjNFaWxFLEVBQW9CcHNFLEVBQUksQ0FBQzRlLEVBQUtrUCxJQUFVbnRCLE9BQU9ELFVBQVU2RCxlQUFlakUsS0FBS3NlLEVBQUtrUCxHQ0NsRnMrQyxFQUFvQmx0RSxFQUFLK0gsSUFDSCxvQkFBWDVCLFFBQTBCQSxPQUFPdXJCLGFBQzFDandCLE9BQU9nSixlQUFlMUMsRUFBUzVCLE9BQU91ckIsWUFBYSxDQUFFenNCLE1BQU8sV0FFN0R4RCxPQUFPZ0osZUFBZTFDLEVBQVMsYUFBYyxDQUFFOUMsT0FBTyxLQ0Y3QmlvRSxFQUFvQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL0B1cnFsL2NvcmUvZGlzdC84YTZkNGQxZi5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9AdXJxbC9jb3JlL2Rpc3QvdXJxbC1jb3JlLmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vc3JjL2JhY2tncm91bmQudHMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL21kNS5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvbmlsLmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci9wYXJzZS5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvcmVnZXguanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3JuZy5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvc2hhMS5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvc3RyaW5naWZ5LmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci92MS5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvdjMuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3YzNS5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvdjQuanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvdXVpZC9kaXN0L2VzbS1icm93c2VyL3Y1LmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL3V1aWQvZGlzdC9lc20tYnJvd3Nlci92YWxpZGF0ZS5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy91dWlkL2Rpc3QvZXNtLWJyb3dzZXIvdmVyc2lvbi5qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy93b25rYS9kaXN0L3dvbmthLmpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvZXJyb3IvR3JhcGhRTEVycm9yLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2Vycm9yL2Zvcm1hdEVycm9yLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2Vycm9yL2xvY2F0ZWRFcnJvci5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9lcnJvci9zeW50YXhFcnJvci5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9leGVjdXRpb24vZXhlY3V0ZS5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9leGVjdXRpb24vdmFsdWVzLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2dyYXBocWwubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvanN1dGlscy9QYXRoLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2pzdXRpbHMvZGVmaW5lSW5zcGVjdC5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL2RldkFzc2VydC5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL2RpZFlvdU1lYW4ubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvanN1dGlscy9pZGVudGl0eUZ1bmMubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvanN1dGlscy9pbnNwZWN0Lm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2pzdXRpbHMvaW5zdGFuY2VPZi5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL2ludmFyaWFudC5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL2lzQXN5bmNJdGVyYWJsZS5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL2lzT2JqZWN0TGlrZS5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL2lzUHJvbWlzZS5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL2tleU1hcC5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL2tleVZhbE1hcC5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL21hcFZhbHVlLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2pzdXRpbHMvbWVtb2l6ZTMubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvanN1dGlscy9uYXR1cmFsQ29tcGFyZS5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL25vZGVqc0N1c3RvbUluc3BlY3RTeW1ib2wubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvanN1dGlscy9wcmludFBhdGhBcnJheS5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL3Byb21pc2VGb3JPYmplY3QubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvanN1dGlscy9wcm9taXNlUmVkdWNlLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2pzdXRpbHMvc2FmZUFycmF5RnJvbS5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL3N1Z2dlc3Rpb25MaXN0Lm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2pzdXRpbHMvdG9PYmpNYXAubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvbGFuZ3VhZ2UvYXN0Lm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2xhbmd1YWdlL2Jsb2NrU3RyaW5nLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2xhbmd1YWdlL2RpcmVjdGl2ZUxvY2F0aW9uLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2xhbmd1YWdlL2tpbmRzLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2xhbmd1YWdlL2xleGVyLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2xhbmd1YWdlL2xvY2F0aW9uLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2xhbmd1YWdlL3BhcnNlci5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9sYW5ndWFnZS9wcmVkaWNhdGVzLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2xhbmd1YWdlL3ByaW50TG9jYXRpb24ubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvbGFuZ3VhZ2UvcHJpbnRlci5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9sYW5ndWFnZS9zb3VyY2UubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvbGFuZ3VhZ2UvdG9rZW5LaW5kLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2xhbmd1YWdlL3Zpc2l0b3IubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvcG9seWZpbGxzL2FycmF5RnJvbS5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9wb2x5ZmlsbHMvZmluZC5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9wb2x5ZmlsbHMvaXNGaW5pdGUubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvcG9seWZpbGxzL2lzSW50ZWdlci5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9wb2x5ZmlsbHMvb2JqZWN0RW50cmllcy5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9wb2x5ZmlsbHMvb2JqZWN0VmFsdWVzLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3BvbHlmaWxscy9zeW1ib2xzLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3N1YnNjcmlwdGlvbi9tYXBBc3luY0l0ZXJhdG9yLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3N1YnNjcmlwdGlvbi9zdWJzY3JpYmUubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdHlwZS9kZWZpbml0aW9uLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3R5cGUvZGlyZWN0aXZlcy5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC90eXBlL2ludHJvc3BlY3Rpb24ubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdHlwZS9zY2FsYXJzLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3R5cGUvc2NoZW1hLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3R5cGUvdmFsaWRhdGUubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdXRpbGl0aWVzL1R5cGVJbmZvLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3V0aWxpdGllcy9hc3NlcnRWYWxpZE5hbWUubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdXRpbGl0aWVzL2FzdEZyb21WYWx1ZS5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC91dGlsaXRpZXMvYnVpbGRBU1RTY2hlbWEubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdXRpbGl0aWVzL2J1aWxkQ2xpZW50U2NoZW1hLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3V0aWxpdGllcy9jb2VyY2VJbnB1dFZhbHVlLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3V0aWxpdGllcy9jb25jYXRBU1QubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdXRpbGl0aWVzL2V4dGVuZFNjaGVtYS5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC91dGlsaXRpZXMvZmluZEJyZWFraW5nQ2hhbmdlcy5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC91dGlsaXRpZXMvZmluZERlcHJlY2F0ZWRVc2FnZXMubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdXRpbGl0aWVzL2dldEludHJvc3BlY3Rpb25RdWVyeS5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC91dGlsaXRpZXMvZ2V0T3BlcmF0aW9uQVNULm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3V0aWxpdGllcy9nZXRPcGVyYXRpb25Sb290VHlwZS5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC91dGlsaXRpZXMvaW50cm9zcGVjdGlvbkZyb21TY2hlbWEubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdXRpbGl0aWVzL2xleGljb2dyYXBoaWNTb3J0U2NoZW1hLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3V0aWxpdGllcy9wcmludFNjaGVtYS5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC91dGlsaXRpZXMvc2VwYXJhdGVPcGVyYXRpb25zLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3V0aWxpdGllcy9zdHJpcElnbm9yZWRDaGFyYWN0ZXJzLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3V0aWxpdGllcy90eXBlQ29tcGFyYXRvcnMubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdXRpbGl0aWVzL3R5cGVGcm9tQVNULm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3V0aWxpdGllcy92YWx1ZUZyb21BU1QubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdXRpbGl0aWVzL3ZhbHVlRnJvbUFTVFVudHlwZWQubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdmFsaWRhdGlvbi9WYWxpZGF0aW9uQ29udGV4dC5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL0V4ZWN1dGFibGVEZWZpbml0aW9uc1J1bGUubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdmFsaWRhdGlvbi9ydWxlcy9GaWVsZHNPbkNvcnJlY3RUeXBlUnVsZS5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL0ZyYWdtZW50c09uQ29tcG9zaXRlVHlwZXNSdWxlLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3ZhbGlkYXRpb24vcnVsZXMvS25vd25Bcmd1bWVudE5hbWVzUnVsZS5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL0tub3duRGlyZWN0aXZlc1J1bGUubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdmFsaWRhdGlvbi9ydWxlcy9Lbm93bkZyYWdtZW50TmFtZXNSdWxlLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3ZhbGlkYXRpb24vcnVsZXMvS25vd25UeXBlTmFtZXNSdWxlLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3ZhbGlkYXRpb24vcnVsZXMvTG9uZUFub255bW91c09wZXJhdGlvblJ1bGUubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdmFsaWRhdGlvbi9ydWxlcy9Mb25lU2NoZW1hRGVmaW5pdGlvblJ1bGUubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdmFsaWRhdGlvbi9ydWxlcy9Ob0ZyYWdtZW50Q3ljbGVzUnVsZS5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL05vVW5kZWZpbmVkVmFyaWFibGVzUnVsZS5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL05vVW51c2VkRnJhZ21lbnRzUnVsZS5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL05vVW51c2VkVmFyaWFibGVzUnVsZS5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL092ZXJsYXBwaW5nRmllbGRzQ2FuQmVNZXJnZWRSdWxlLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3ZhbGlkYXRpb24vcnVsZXMvUG9zc2libGVGcmFnbWVudFNwcmVhZHNSdWxlLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3ZhbGlkYXRpb24vcnVsZXMvUG9zc2libGVUeXBlRXh0ZW5zaW9uc1J1bGUubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdmFsaWRhdGlvbi9ydWxlcy9Qcm92aWRlZFJlcXVpcmVkQXJndW1lbnRzUnVsZS5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL1NjYWxhckxlYWZzUnVsZS5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL1NpbmdsZUZpZWxkU3Vic2NyaXB0aW9uc1J1bGUubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdmFsaWRhdGlvbi9ydWxlcy9VbmlxdWVBcmd1bWVudE5hbWVzUnVsZS5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL1VuaXF1ZURpcmVjdGl2ZU5hbWVzUnVsZS5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL1VuaXF1ZURpcmVjdGl2ZXNQZXJMb2NhdGlvblJ1bGUubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdmFsaWRhdGlvbi9ydWxlcy9VbmlxdWVFbnVtVmFsdWVOYW1lc1J1bGUubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdmFsaWRhdGlvbi9ydWxlcy9VbmlxdWVGaWVsZERlZmluaXRpb25OYW1lc1J1bGUubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdmFsaWRhdGlvbi9ydWxlcy9VbmlxdWVGcmFnbWVudE5hbWVzUnVsZS5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL1VuaXF1ZUlucHV0RmllbGROYW1lc1J1bGUubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdmFsaWRhdGlvbi9ydWxlcy9VbmlxdWVPcGVyYXRpb25OYW1lc1J1bGUubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdmFsaWRhdGlvbi9ydWxlcy9VbmlxdWVPcGVyYXRpb25UeXBlc1J1bGUubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdmFsaWRhdGlvbi9ydWxlcy9VbmlxdWVUeXBlTmFtZXNSdWxlLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3ZhbGlkYXRpb24vcnVsZXMvVW5pcXVlVmFyaWFibGVOYW1lc1J1bGUubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdmFsaWRhdGlvbi9ydWxlcy9WYWx1ZXNPZkNvcnJlY3RUeXBlUnVsZS5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3J1bGVzL1ZhcmlhYmxlc0FyZUlucHV0VHlwZXNSdWxlLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3ZhbGlkYXRpb24vcnVsZXMvVmFyaWFibGVzSW5BbGxvd2VkUG9zaXRpb25SdWxlLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3ZhbGlkYXRpb24vcnVsZXMvY3VzdG9tL05vRGVwcmVjYXRlZEN1c3RvbVJ1bGUubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdmFsaWRhdGlvbi9ydWxlcy9jdXN0b20vTm9TY2hlbWFJbnRyb3NwZWN0aW9uQ3VzdG9tUnVsZS5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC92YWxpZGF0aW9uL3NwZWNpZmllZFJ1bGVzLm1qcyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3ZhbGlkYXRpb24vdmFsaWRhdGUubWpzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvdmVyc2lvbi5tanMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci93ZWJwYWNrL3N0YXJ0dXAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGUgPSByZXF1aXJlKFwiZ3JhcGhxbFwiKTtcblxudmFyIHIgPSByZXF1aXJlKFwid29ua2FcIik7XG5cbmZ1bmN0aW9uIHJlaHlkcmF0ZUdyYXBoUWxFcnJvcihyKSB7XG4gIGlmIChcInN0cmluZ1wiID09IHR5cGVvZiByKSB7XG4gICAgcmV0dXJuIG5ldyBlLkdyYXBoUUxFcnJvcihyKTtcbiAgfSBlbHNlIGlmIChcIm9iamVjdFwiID09IHR5cGVvZiByICYmIHIubWVzc2FnZSkge1xuICAgIHJldHVybiBuZXcgZS5HcmFwaFFMRXJyb3Ioci5tZXNzYWdlLCByLm5vZGVzLCByLnNvdXJjZSwgci5wb3NpdGlvbnMsIHIucGF0aCwgciwgci5leHRlbnNpb25zIHx8IHt9KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcjtcbiAgfVxufVxuXG52YXIgdCA9IGZ1bmN0aW9uKGUpIHtcbiAgZnVuY3Rpb24gQ29tYmluZWRFcnJvcihyKSB7XG4gICAgdmFyIHQgPSByLm5ldHdvcmtFcnJvcjtcbiAgICB2YXIgbiA9IHIucmVzcG9uc2U7XG4gICAgdmFyIG8gPSAoci5ncmFwaFFMRXJyb3JzIHx8IFtdKS5tYXAocmVoeWRyYXRlR3JhcGhRbEVycm9yKTtcbiAgICB2YXIgaSA9IGZ1bmN0aW9uIGdlbmVyYXRlRXJyb3JNZXNzYWdlKGUsIHIpIHtcbiAgICAgIHZhciB0ID0gXCJcIjtcbiAgICAgIGlmICh2b2lkIDAgIT09IGUpIHtcbiAgICAgICAgcmV0dXJuIHQgPSBcIltOZXR3b3JrXSBcIiArIGUubWVzc2FnZTtcbiAgICAgIH1cbiAgICAgIGlmICh2b2lkIDAgIT09IHIpIHtcbiAgICAgICAgci5mb3JFYWNoKChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgdCArPSBcIltHcmFwaFFMXSBcIiArIGUubWVzc2FnZSArIFwiXFxuXCI7XG4gICAgICAgIH0pKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0LnRyaW0oKTtcbiAgICB9KHQsIG8pO1xuICAgIGUuY2FsbCh0aGlzLCBpKTtcbiAgICB0aGlzLm5hbWUgPSBcIkNvbWJpbmVkRXJyb3JcIjtcbiAgICB0aGlzLm1lc3NhZ2UgPSBpO1xuICAgIHRoaXMuZ3JhcGhRTEVycm9ycyA9IG87XG4gICAgdGhpcy5uZXR3b3JrRXJyb3IgPSB0O1xuICAgIHRoaXMucmVzcG9uc2UgPSBuO1xuICB9XG4gIGlmIChlKSB7XG4gICAgQ29tYmluZWRFcnJvci5fX3Byb3RvX18gPSBlO1xuICB9XG4gIChDb21iaW5lZEVycm9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoZSAmJiBlLnByb3RvdHlwZSkpLmNvbnN0cnVjdG9yID0gQ29tYmluZWRFcnJvcjtcbiAgQ29tYmluZWRFcnJvci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tZXNzYWdlO1xuICB9O1xuICByZXR1cm4gQ29tYmluZWRFcnJvcjtcbn0oRXJyb3IpO1xuXG5mdW5jdGlvbiBwaGFzaChlLCByKSB7XG4gIGUgfD0gMDtcbiAgZm9yICh2YXIgdCA9IDAsIG4gPSAwIHwgci5sZW5ndGg7IHQgPCBuOyB0KyspIHtcbiAgICBlID0gKGUgPDwgNSkgKyBlICsgci5jaGFyQ29kZUF0KHQpO1xuICB9XG4gIHJldHVybiBlO1xufVxuXG5mdW5jdGlvbiBoYXNoKGUpIHtcbiAgcmV0dXJuIHBoYXNoKDUzODEsIGUpID4+PiAwO1xufVxuXG52YXIgbiA9IG5ldyBTZXQ7XG5cbnZhciBvID0gbmV3IFdlYWtNYXA7XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeShlKSB7XG4gIGlmIChudWxsID09PSBlIHx8IG4uaGFzKGUpKSB7XG4gICAgcmV0dXJuIFwibnVsbFwiO1xuICB9IGVsc2UgaWYgKFwib2JqZWN0XCIgIT0gdHlwZW9mIGUpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoZSkgfHwgXCJcIjtcbiAgfSBlbHNlIGlmIChlLnRvSlNPTikge1xuICAgIHJldHVybiBzdHJpbmdpZnkoZS50b0pTT04oKSk7XG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShlKSkge1xuICAgIHZhciByID0gXCJbXCI7XG4gICAgZm9yICh2YXIgdCA9IDAsIGkgPSBlLmxlbmd0aDsgdCA8IGk7IHQrKykge1xuICAgICAgaWYgKHQgPiAwKSB7XG4gICAgICAgIHIgKz0gXCIsXCI7XG4gICAgICB9XG4gICAgICB2YXIgYSA9IHN0cmluZ2lmeShlW3RdKTtcbiAgICAgIHIgKz0gYS5sZW5ndGggPiAwID8gYSA6IFwibnVsbFwiO1xuICAgIH1cbiAgICByZXR1cm4gciArPSBcIl1cIjtcbiAgfVxuICB2YXIgcyA9IE9iamVjdC5rZXlzKGUpLnNvcnQoKTtcbiAgaWYgKCFzLmxlbmd0aCAmJiBlLmNvbnN0cnVjdG9yICYmIGUuY29uc3RydWN0b3IgIT09IE9iamVjdCkge1xuICAgIHZhciB1ID0gby5nZXQoZSkgfHwgTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMik7XG4gICAgby5zZXQoZSwgdSk7XG4gICAgcmV0dXJuICd7XCJfX2tleVwiOlwiJyArIHUgKyAnXCJ9JztcbiAgfVxuICBuLmFkZChlKTtcbiAgdmFyIGYgPSBcIntcIjtcbiAgZm9yICh2YXIgYyA9IDAsIGwgPSBzLmxlbmd0aDsgYyA8IGw7IGMrKykge1xuICAgIHZhciBwID0gc1tjXTtcbiAgICB2YXIgaCA9IHN0cmluZ2lmeShlW3BdKTtcbiAgICBpZiAoaCkge1xuICAgICAgaWYgKGYubGVuZ3RoID4gMSkge1xuICAgICAgICBmICs9IFwiLFwiO1xuICAgICAgfVxuICAgICAgZiArPSBzdHJpbmdpZnkocCkgKyBcIjpcIiArIGg7XG4gICAgfVxuICB9XG4gIG4uZGVsZXRlKGUpO1xuICByZXR1cm4gZiArPSBcIn1cIjtcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5VmFyaWFibGVzKGUpIHtcbiAgbi5jbGVhcigpO1xuICByZXR1cm4gc3RyaW5naWZ5KGUpO1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlEb2N1bWVudChyKSB7XG4gIHZhciB0ID0gKFwic3RyaW5nXCIgIT0gdHlwZW9mIHIgPyByLmxvYyAmJiByLmxvYy5zb3VyY2UuYm9keSB8fCBlLnByaW50KHIpIDogcikucmVwbGFjZSgvKFtcXHMsXXwjW15cXG5cXHJdKykrL2csIFwiIFwiKS50cmltKCk7XG4gIGlmIChcInN0cmluZ1wiICE9IHR5cGVvZiByKSB7XG4gICAgdmFyIG4gPSBcImRlZmluaXRpb25zXCIgaW4gciAmJiBnZXRPcGVyYXRpb25OYW1lKHIpO1xuICAgIGlmIChuKSB7XG4gICAgICB0ID0gXCIjIFwiICsgbiArIFwiXFxuXCIgKyB0O1xuICAgIH1cbiAgICBpZiAoIXIubG9jKSB7XG4gICAgICByLmxvYyA9IHtcbiAgICAgICAgc3RhcnQ6IDAsXG4gICAgICAgIGVuZDogdC5sZW5ndGgsXG4gICAgICAgIHNvdXJjZToge1xuICAgICAgICAgIGJvZHk6IHQsXG4gICAgICAgICAgbmFtZTogXCJncWxcIixcbiAgICAgICAgICBsb2NhdGlvbk9mZnNldDoge1xuICAgICAgICAgICAgbGluZTogMSxcbiAgICAgICAgICAgIGNvbHVtbjogMVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHQ7XG59XG5cbnZhciBpID0gbmV3IE1hcDtcblxuZnVuY3Rpb24ga2V5RG9jdW1lbnQocikge1xuICB2YXIgdDtcbiAgdmFyIG47XG4gIGlmIChcInN0cmluZ1wiID09IHR5cGVvZiByKSB7XG4gICAgdCA9IGhhc2goc3RyaW5naWZ5RG9jdW1lbnQocikpO1xuICAgIG4gPSBpLmdldCh0KSB8fCBlLnBhcnNlKHIsIHtcbiAgICAgIG5vTG9jYXRpb246ICEwXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgdCA9IHIuX19rZXkgfHwgaGFzaChzdHJpbmdpZnlEb2N1bWVudChyKSk7XG4gICAgbiA9IGkuZ2V0KHQpIHx8IHI7XG4gIH1cbiAgaWYgKCFuLmxvYykge1xuICAgIHN0cmluZ2lmeURvY3VtZW50KG4pO1xuICB9XG4gIG4uX19rZXkgPSB0O1xuICBpLnNldCh0LCBuKTtcbiAgcmV0dXJuIG47XG59XG5cbmZ1bmN0aW9uIGdldE9wZXJhdGlvbk5hbWUocikge1xuICBmb3IgKHZhciB0ID0gMCwgbiA9IHIuZGVmaW5pdGlvbnMubGVuZ3RoOyB0IDwgbjsgdCsrKSB7XG4gICAgdmFyIG8gPSByLmRlZmluaXRpb25zW3RdO1xuICAgIGlmIChvLmtpbmQgPT09IGUuS2luZC5PUEVSQVRJT05fREVGSU5JVElPTiAmJiBvLm5hbWUpIHtcbiAgICAgIHJldHVybiBvLm5hbWUudmFsdWU7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICByZXR1cm4gKF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbihlKSB7XG4gICAgZm9yICh2YXIgciA9IDE7IHIgPCBhcmd1bWVudHMubGVuZ3RoOyByKyspIHtcbiAgICAgIHZhciB0ID0gYXJndW1lbnRzW3JdO1xuICAgICAgZm9yICh2YXIgbiBpbiB0KSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCwgbikpIHtcbiAgICAgICAgICBlW25dID0gdFtuXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZTtcbiAgfSkuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuZnVuY3Rpb24gbWFrZVJlc3VsdChlLCByLCBuKSB7XG4gIGlmICghKFwiZGF0YVwiIGluIHIpICYmICEoXCJlcnJvcnNcIiBpbiByKSB8fCBcInBhdGhcIiBpbiByKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gQ29udGVudFwiKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIG9wZXJhdGlvbjogZSxcbiAgICBkYXRhOiByLmRhdGEsXG4gICAgZXJyb3I6IEFycmF5LmlzQXJyYXkoci5lcnJvcnMpID8gbmV3IHQoe1xuICAgICAgZ3JhcGhRTEVycm9yczogci5lcnJvcnMsXG4gICAgICByZXNwb25zZTogblxuICAgIH0pIDogdm9pZCAwLFxuICAgIGV4dGVuc2lvbnM6IFwib2JqZWN0XCIgPT0gdHlwZW9mIHIuZXh0ZW5zaW9ucyAmJiByLmV4dGVuc2lvbnMgfHwgdm9pZCAwLFxuICAgIGhhc05leHQ6ICEhci5oYXNOZXh0XG4gIH07XG59XG5cbmZ1bmN0aW9uIG1lcmdlUmVzdWx0UGF0Y2goZSwgciwgbikge1xuICB2YXIgbyA9IF9leHRlbmRzKHt9LCBlKTtcbiAgby5oYXNOZXh0ID0gISFyLmhhc05leHQ7XG4gIGlmICghKFwicGF0aFwiIGluIHIpKSB7XG4gICAgaWYgKFwiZGF0YVwiIGluIHIpIHtcbiAgICAgIG8uZGF0YSA9IHIuZGF0YTtcbiAgICB9XG4gICAgcmV0dXJuIG87XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkoci5lcnJvcnMpKSB7XG4gICAgby5lcnJvciA9IG5ldyB0KHtcbiAgICAgIGdyYXBoUUxFcnJvcnM6IG8uZXJyb3IgPyBvLmVycm9yLmdyYXBoUUxFcnJvcnMuY29uY2F0KHIuZXJyb3JzKSA6IHIuZXJyb3JzLFxuICAgICAgcmVzcG9uc2U6IG5cbiAgICB9KTtcbiAgfVxuICB2YXIgaSA9IG8uZGF0YSA9IF9leHRlbmRzKHt9LCBvLmRhdGEpO1xuICB2YXIgYSA9IDA7XG4gIHZhciBzO1xuICB3aGlsZSAoYSA8IHIucGF0aC5sZW5ndGgpIHtcbiAgICBpID0gaVtzID0gci5wYXRoW2ErK11dID0gQXJyYXkuaXNBcnJheShpW3NdKSA/IFtdLmNvbmNhdChpW3NdKSA6IF9leHRlbmRzKHt9LCBpW3NdKTtcbiAgfVxuICBfZXh0ZW5kcyhpLCByLmRhdGEpO1xuICByZXR1cm4gbztcbn1cblxuZnVuY3Rpb24gbWFrZUVycm9yUmVzdWx0KGUsIHIsIG4pIHtcbiAgcmV0dXJuIHtcbiAgICBvcGVyYXRpb246IGUsXG4gICAgZGF0YTogdm9pZCAwLFxuICAgIGVycm9yOiBuZXcgdCh7XG4gICAgICBuZXR3b3JrRXJyb3I6IHIsXG4gICAgICByZXNwb25zZTogblxuICAgIH0pLFxuICAgIGV4dGVuc2lvbnM6IHZvaWQgMFxuICB9O1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VHZXQoZSkge1xuICByZXR1cm4gXCJxdWVyeVwiID09PSBlLmtpbmQgJiYgISFlLmNvbnRleHQucHJlZmVyR2V0TWV0aG9kO1xufVxuXG52YXIgYSA9IFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIFN5bWJvbCA/IFN5bWJvbC5hc3luY0l0ZXJhdG9yIDogbnVsbDtcblxudmFyIHMgPSBcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBUZXh0RGVjb2RlciA/IG5ldyBUZXh0RGVjb2RlciA6IG51bGw7XG5cbnZhciB1ID0gL2NvbnRlbnQtdHlwZTpbXlxcclxcbl0qYXBwbGljYXRpb25cXC9qc29uL2k7XG5cbnZhciBmID0gL2JvdW5kYXJ5PVwiPyhbXj1cIjtdKylcIj8vaTtcblxuZnVuY3Rpb24gZXhlY3V0ZUluY3JlbWVudGFsRmV0Y2goZSwgciwgdCkge1xuICB2YXIgbiA9IHQuaGVhZGVycyAmJiB0LmhlYWRlcnMuZ2V0KFwiQ29udGVudC1UeXBlXCIpIHx8IFwiXCI7XG4gIGlmICghL211bHRpcGFydFxcL21peGVkL2kudGVzdChuKSkge1xuICAgIHJldHVybiB0Lmpzb24oKS50aGVuKChmdW5jdGlvbihuKSB7XG4gICAgICBlKG1ha2VSZXN1bHQociwgbiwgdCkpO1xuICAgIH0pKTtcbiAgfVxuICB2YXIgbyA9IFwiLS0tXCI7XG4gIHZhciBpID0gbi5tYXRjaChmKTtcbiAgaWYgKGkpIHtcbiAgICBvID0gXCItLVwiICsgaVsxXTtcbiAgfVxuICB2YXIgYztcbiAgdmFyIGNhbmNlbCA9IGZ1bmN0aW9uKCkge307XG4gIGlmIChhICYmIHRbYV0pIHtcbiAgICB2YXIgbCA9IHRbYV0oKTtcbiAgICBjID0gbC5uZXh0LmJpbmQobCk7XG4gIH0gZWxzZSBpZiAoXCJib2R5XCIgaW4gdCAmJiB0LmJvZHkpIHtcbiAgICB2YXIgcCA9IHQuYm9keS5nZXRSZWFkZXIoKTtcbiAgICBjYW5jZWwgPSBwLmNhbmNlbC5iaW5kKHApO1xuICAgIGMgPSBwLnJlYWQuYmluZChwKTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3RyZWFtaW5nIHJlcXVlc3RzIHVuc3VwcG9ydGVkXCIpO1xuICB9XG4gIHZhciBoID0gXCJcIjtcbiAgdmFyIGQgPSAhMDtcbiAgdmFyIHYgPSBudWxsO1xuICB2YXIgeSA9IG51bGw7XG4gIHJldHVybiBjKCkudGhlbigoZnVuY3Rpb24gbmV4dChuKSB7XG4gICAgaWYgKCFuLmRvbmUpIHtcbiAgICAgIHZhciBpID0gZnVuY3Rpb24gdG9TdHJpbmcoZSkge1xuICAgICAgICByZXR1cm4gXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgQnVmZmVyICYmIEJ1ZmZlci5pc0J1ZmZlcihlKSA/IGUudG9TdHJpbmcoKSA6IHMuZGVjb2RlKGUpO1xuICAgICAgfShuLnZhbHVlKTtcbiAgICAgIHZhciBhID0gaS5pbmRleE9mKG8pO1xuICAgICAgaWYgKGEgPiAtMSkge1xuICAgICAgICBhICs9IGgubGVuZ3RoO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYSA9IGguaW5kZXhPZihvKTtcbiAgICAgIH1cbiAgICAgIGggKz0gaTtcbiAgICAgIHdoaWxlIChhID4gLTEpIHtcbiAgICAgICAgdmFyIGYgPSBoLnNsaWNlKDAsIGEpO1xuICAgICAgICB2YXIgbCA9IGguc2xpY2UoYSArIG8ubGVuZ3RoKTtcbiAgICAgICAgaWYgKGQpIHtcbiAgICAgICAgICBkID0gITE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHAgPSBmLmluZGV4T2YoXCJcXHJcXG5cXHJcXG5cIikgKyA0O1xuICAgICAgICAgIHZhciBtID0gZi5zbGljZSgwLCBwKTtcbiAgICAgICAgICB2YXIgZyA9IGYuc2xpY2UocCwgZi5sYXN0SW5kZXhPZihcIlxcclxcblwiKSk7XG4gICAgICAgICAgdmFyIHggPSB2b2lkIDA7XG4gICAgICAgICAgaWYgKHUudGVzdChtKSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgeCA9IEpTT04ucGFyc2UoZyk7XG4gICAgICAgICAgICAgIHYgPSB5ID0geSA/IG1lcmdlUmVzdWx0UGF0Y2goeSwgeCwgdCkgOiBtYWtlUmVzdWx0KHIsIHgsIHQpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKFwiLS1cIiA9PT0gbC5zbGljZSgwLCAyKSB8fCB4ICYmICF4Lmhhc05leHQpIHtcbiAgICAgICAgICAgIGlmICgheSkge1xuICAgICAgICAgICAgICByZXR1cm4gZShtYWtlUmVzdWx0KHIsIHt9LCB0KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYSA9IChoID0gbCkuaW5kZXhPZihvKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHYpIHtcbiAgICAgIGUodik7XG4gICAgICB2ID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKCFuLmRvbmUgJiYgKCF5IHx8IHkuaGFzTmV4dCkpIHtcbiAgICAgIHJldHVybiBjKCkudGhlbihuZXh0KTtcbiAgICB9XG4gIH0pKS5maW5hbGx5KGNhbmNlbCk7XG59XG5cbmV4cG9ydHMuQ29tYmluZWRFcnJvciA9IHQ7XG5cbmV4cG9ydHMuX2V4dGVuZHMgPSBfZXh0ZW5kcztcblxuZXhwb3J0cy5jcmVhdGVSZXF1ZXN0ID0gZnVuY3Rpb24gY3JlYXRlUmVxdWVzdChlLCByKSB7XG4gIGlmICghcikge1xuICAgIHIgPSB7fTtcbiAgfVxuICB2YXIgdCA9IGtleURvY3VtZW50KGUpO1xuICByZXR1cm4ge1xuICAgIGtleTogcGhhc2godC5fX2tleSwgc3RyaW5naWZ5VmFyaWFibGVzKHIpKSA+Pj4gMCxcbiAgICBxdWVyeTogdCxcbiAgICB2YXJpYWJsZXM6IHJcbiAgfTtcbn07XG5cbmV4cG9ydHMuZ2V0T3BlcmF0aW9uTmFtZSA9IGdldE9wZXJhdGlvbk5hbWU7XG5cbmV4cG9ydHMuZ2V0T3BlcmF0aW9uVHlwZSA9IGZ1bmN0aW9uIGdldE9wZXJhdGlvblR5cGUocikge1xuICBmb3IgKHZhciB0ID0gMCwgbiA9IHIuZGVmaW5pdGlvbnMubGVuZ3RoOyB0IDwgbjsgdCsrKSB7XG4gICAgdmFyIG8gPSByLmRlZmluaXRpb25zW3RdO1xuICAgIGlmIChvLmtpbmQgPT09IGUuS2luZC5PUEVSQVRJT05fREVGSU5JVElPTikge1xuICAgICAgcmV0dXJuIG8ub3BlcmF0aW9uO1xuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0cy5rZXlEb2N1bWVudCA9IGtleURvY3VtZW50O1xuXG5leHBvcnRzLm1ha2VFcnJvclJlc3VsdCA9IG1ha2VFcnJvclJlc3VsdDtcblxuZXhwb3J0cy5tYWtlRmV0Y2hCb2R5ID0gZnVuY3Rpb24gbWFrZUZldGNoQm9keShyKSB7XG4gIHJldHVybiB7XG4gICAgcXVlcnk6IGUucHJpbnQoci5xdWVyeSksXG4gICAgb3BlcmF0aW9uTmFtZTogZ2V0T3BlcmF0aW9uTmFtZShyLnF1ZXJ5KSxcbiAgICB2YXJpYWJsZXM6IHIudmFyaWFibGVzIHx8IHZvaWQgMCxcbiAgICBleHRlbnNpb25zOiB2b2lkIDBcbiAgfTtcbn07XG5cbmV4cG9ydHMubWFrZUZldGNoT3B0aW9ucyA9IGZ1bmN0aW9uIG1ha2VGZXRjaE9wdGlvbnMoZSwgcikge1xuICB2YXIgdCA9IHNob3VsZFVzZUdldChlKTtcbiAgdmFyIG4gPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGUuY29udGV4dC5mZXRjaE9wdGlvbnMgPyBlLmNvbnRleHQuZmV0Y2hPcHRpb25zKCkgOiBlLmNvbnRleHQuZmV0Y2hPcHRpb25zIHx8IHt9O1xuICByZXR1cm4gX2V4dGVuZHMoe30sIG4sIHtcbiAgICBib2R5OiAhdCAmJiByID8gSlNPTi5zdHJpbmdpZnkocikgOiB2b2lkIDAsXG4gICAgbWV0aG9kOiB0ID8gXCJHRVRcIiA6IFwiUE9TVFwiLFxuICAgIGhlYWRlcnM6IHQgPyBuLmhlYWRlcnMgOiBfZXh0ZW5kcyh7fSwge1xuICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCJcbiAgICB9LCBuLmhlYWRlcnMpXG4gIH0pO1xufTtcblxuZXhwb3J0cy5tYWtlRmV0Y2hTb3VyY2UgPSBmdW5jdGlvbiBtYWtlRmV0Y2hTb3VyY2UoZSwgdCwgbikge1xuICB2YXIgbyA9IFwibWFudWFsXCIgPT09IG4ucmVkaXJlY3QgPyA0MDAgOiAzMDA7XG4gIHZhciBpID0gZS5jb250ZXh0LmZldGNoO1xuICByZXR1cm4gci5tYWtlKChmdW5jdGlvbihyKSB7XG4gICAgdmFyIGEgPSByLm5leHQ7XG4gICAgdmFyIHMgPSByLmNvbXBsZXRlO1xuICAgIHZhciB1ID0gXCJ1bmRlZmluZWRcIiAhPSB0eXBlb2YgQWJvcnRDb250cm9sbGVyID8gbmV3IEFib3J0Q29udHJvbGxlciA6IG51bGw7XG4gICAgaWYgKHUpIHtcbiAgICAgIG4uc2lnbmFsID0gdS5zaWduYWw7XG4gICAgfVxuICAgIHZhciBmID0gITE7XG4gICAgdmFyIGMgPSAhMTtcbiAgICB2YXIgbDtcbiAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKChmdW5jdGlvbigpIHtcbiAgICAgIGlmIChmKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHJldHVybiAoaSB8fCBmZXRjaCkodCwgbik7XG4gICAgfSkpLnRoZW4oKGZ1bmN0aW9uKHIpIHtcbiAgICAgIGlmICghcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjID0gKGwgPSByKS5zdGF0dXMgPCAyMDAgfHwgbC5zdGF0dXMgPj0gbztcbiAgICAgIHJldHVybiBleGVjdXRlSW5jcmVtZW50YWxGZXRjaChhLCBlLCBsKTtcbiAgICB9KSkudGhlbihzKS5jYXRjaCgoZnVuY3Rpb24ocikge1xuICAgICAgaWYgKFwiQWJvcnRFcnJvclwiICE9PSByLm5hbWUpIHtcbiAgICAgICAgdmFyIHQgPSBtYWtlRXJyb3JSZXN1bHQoZSwgYyA/IG5ldyBFcnJvcihsLnN0YXR1c1RleHQpIDogciwgbCk7XG4gICAgICAgIGEodCk7XG4gICAgICAgIHMoKTtcbiAgICAgIH1cbiAgICB9KSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgZiA9ICEwO1xuICAgICAgaWYgKHUpIHtcbiAgICAgICAgdS5hYm9ydCgpO1xuICAgICAgfVxuICAgIH07XG4gIH0pKTtcbn07XG5cbmV4cG9ydHMubWFrZUZldGNoVVJMID0gZnVuY3Rpb24gbWFrZUZldGNoVVJMKGUsIHIpIHtcbiAgdmFyIHQgPSBzaG91bGRVc2VHZXQoZSk7XG4gIHZhciBuID0gZS5jb250ZXh0LnVybDtcbiAgaWYgKCF0IHx8ICFyKSB7XG4gICAgcmV0dXJuIG47XG4gIH1cbiAgdmFyIG8gPSBbXTtcbiAgaWYgKHIub3BlcmF0aW9uTmFtZSkge1xuICAgIG8ucHVzaChcIm9wZXJhdGlvbk5hbWU9XCIgKyBlbmNvZGVVUklDb21wb25lbnQoci5vcGVyYXRpb25OYW1lKSk7XG4gIH1cbiAgaWYgKHIucXVlcnkpIHtcbiAgICBvLnB1c2goXCJxdWVyeT1cIiArIGVuY29kZVVSSUNvbXBvbmVudChyLnF1ZXJ5LnJlcGxhY2UoLyNbXlxcblxccl0rL2csIFwiIFwiKS50cmltKCkpKTtcbiAgfVxuICBpZiAoci52YXJpYWJsZXMpIHtcbiAgICBvLnB1c2goXCJ2YXJpYWJsZXM9XCIgKyBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5naWZ5VmFyaWFibGVzKHIudmFyaWFibGVzKSkpO1xuICB9XG4gIGlmIChyLmV4dGVuc2lvbnMpIHtcbiAgICBvLnB1c2goXCJleHRlbnNpb25zPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVZhcmlhYmxlcyhyLmV4dGVuc2lvbnMpKSk7XG4gIH1cbiAgcmV0dXJuIG4gKyBcIj9cIiArIG8uam9pbihcIiZcIik7XG59O1xuXG5leHBvcnRzLm1ha2VSZXN1bHQgPSBtYWtlUmVzdWx0O1xuXG5leHBvcnRzLm1lcmdlUmVzdWx0UGF0Y2ggPSBtZXJnZVJlc3VsdFBhdGNoO1xuXG5leHBvcnRzLnN0cmluZ2lmeURvY3VtZW50ID0gc3RyaW5naWZ5RG9jdW1lbnQ7XG5cbmV4cG9ydHMuc3RyaW5naWZ5VmFyaWFibGVzID0gc3RyaW5naWZ5VmFyaWFibGVzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9OGE2ZDRkMWYuanMubWFwXG4iLCJ2YXIgZSA9IHJlcXVpcmUoXCJncmFwaHFsXCIpO1xuXG52YXIgdCA9IHJlcXVpcmUoXCIuLzhhNmQ0ZDFmLmpzXCIpO1xuXG52YXIgciA9IHJlcXVpcmUoXCJ3b25rYVwiKTtcblxuZnVuY3Rpb24gY29sbGVjdFR5cGVzKGUsIHQpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoZSkpIHtcbiAgICBmb3IgKHZhciByID0gMDsgciA8IGUubGVuZ3RoOyByKyspIHtcbiAgICAgIGNvbGxlY3RUeXBlcyhlW3JdLCB0KTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoXCJvYmplY3RcIiA9PSB0eXBlb2YgZSAmJiBudWxsICE9PSBlKSB7XG4gICAgZm9yICh2YXIgbiBpbiBlKSB7XG4gICAgICBpZiAoXCJfX3R5cGVuYW1lXCIgPT09IG4gJiYgXCJzdHJpbmdcIiA9PSB0eXBlb2YgZVtuXSkge1xuICAgICAgICB0W2Vbbl1dID0gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbGxlY3RUeXBlcyhlW25dLCB0KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHQ7XG59XG5cbmZ1bmN0aW9uIGNvbGxlY3RUeXBlc0Zyb21SZXNwb25zZShlKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhjb2xsZWN0VHlwZXMoZSwge30pKTtcbn1cblxudmFyIGZvcm1hdE5vZGUgPSBmdW5jdGlvbihyKSB7XG4gIGlmIChyLnNlbGVjdGlvblNldCAmJiAhci5zZWxlY3Rpb25TZXQuc2VsZWN0aW9ucy5zb21lKChmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIHQua2luZCA9PT0gZS5LaW5kLkZJRUxEICYmIFwiX190eXBlbmFtZVwiID09PSB0Lm5hbWUudmFsdWUgJiYgIXQuYWxpYXM7XG4gIH0pKSkge1xuICAgIHJldHVybiB0Ll9leHRlbmRzKHt9LCByLCB7XG4gICAgICBzZWxlY3Rpb25TZXQ6IHQuX2V4dGVuZHMoe30sIHIuc2VsZWN0aW9uU2V0LCB7XG4gICAgICAgIHNlbGVjdGlvbnM6IHIuc2VsZWN0aW9uU2V0LnNlbGVjdGlvbnMuY29uY2F0KFsge1xuICAgICAgICAgIGtpbmQ6IGUuS2luZC5GSUVMRCxcbiAgICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICBraW5kOiBlLktpbmQuTkFNRSxcbiAgICAgICAgICAgIHZhbHVlOiBcIl9fdHlwZW5hbWVcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSBdKVxuICAgICAgfSlcbiAgICB9KTtcbiAgfVxufTtcblxudmFyIG4gPSBuZXcgTWFwO1xuXG5mdW5jdGlvbiBmb3JtYXREb2N1bWVudChyKSB7XG4gIHZhciBhID0gdC5rZXlEb2N1bWVudChyKTtcbiAgdmFyIG8gPSBuLmdldChhLl9fa2V5KTtcbiAgaWYgKCFvKSB7XG4gICAgbyA9IGUudmlzaXQoYSwge1xuICAgICAgRmllbGQ6IGZvcm1hdE5vZGUsXG4gICAgICBJbmxpbmVGcmFnbWVudDogZm9ybWF0Tm9kZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcIl9fa2V5XCIsIHtcbiAgICAgIHZhbHVlOiBhLl9fa2V5LFxuICAgICAgZW51bWVyYWJsZTogITFcbiAgICB9KTtcbiAgICBuLnNldChhLl9fa2V5LCBvKTtcbiAgfVxuICByZXR1cm4gbztcbn1cblxuZnVuY3Rpb24gbWFza1R5cGVuYW1lKGUpIHtcbiAgaWYgKCFlIHx8IFwib2JqZWN0XCIgIT0gdHlwZW9mIGUpIHtcbiAgICByZXR1cm4gZTtcbiAgfVxuICByZXR1cm4gT2JqZWN0LmtleXMoZSkucmVkdWNlKChmdW5jdGlvbih0LCByKSB7XG4gICAgdmFyIG4gPSBlW3JdO1xuICAgIGlmIChcIl9fdHlwZW5hbWVcIiA9PT0gcikge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIFwiX190eXBlbmFtZVwiLCB7XG4gICAgICAgIGVudW1lcmFibGU6ICExLFxuICAgICAgICB2YWx1ZTogblxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KG4pKSB7XG4gICAgICB0W3JdID0gbi5tYXAobWFza1R5cGVuYW1lKTtcbiAgICB9IGVsc2UgaWYgKG4gJiYgXCJvYmplY3RcIiA9PSB0eXBlb2YgbiAmJiBcIl9fdHlwZW5hbWVcIiBpbiBuKSB7XG4gICAgICB0W3JdID0gbWFza1R5cGVuYW1lKG4pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0W3JdID0gbjtcbiAgICB9XG4gICAgcmV0dXJuIHQ7XG4gIH0pLCB7fSk7XG59XG5cbmZ1bmN0aW9uIHdpdGhQcm9taXNlKGUpIHtcbiAgZS50b1Byb21pc2UgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gci50b1Byb21pc2Uoci50YWtlKDEpKHIuZmlsdGVyKChmdW5jdGlvbihlKSB7XG4gICAgICByZXR1cm4gIWUuc3RhbGUgJiYgIWUuaGFzTmV4dDtcbiAgICB9KSkoZSkpKTtcbiAgfTtcbiAgcmV0dXJuIGU7XG59XG5cbmZ1bmN0aW9uIG1ha2VPcGVyYXRpb24oZSwgdCwgcikge1xuICBpZiAoIXIpIHtcbiAgICByID0gdC5jb250ZXh0O1xuICB9XG4gIHJldHVybiB7XG4gICAga2V5OiB0LmtleSxcbiAgICBxdWVyeTogdC5xdWVyeSxcbiAgICB2YXJpYWJsZXM6IHQudmFyaWFibGVzLFxuICAgIGtpbmQ6IGUsXG4gICAgY29udGV4dDogclxuICB9O1xufVxuXG5mdW5jdGlvbiBhZGRNZXRhZGF0YShlLCByKSB7XG4gIHJldHVybiBtYWtlT3BlcmF0aW9uKGUua2luZCwgZSwgdC5fZXh0ZW5kcyh7fSwgZS5jb250ZXh0LCB7XG4gICAgbWV0YTogdC5fZXh0ZW5kcyh7fSwgZS5jb250ZXh0Lm1ldGEsIHIpXG4gIH0pKTtcbn1cblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbmZ1bmN0aW9uIGFwcGx5RGVmaW5pdGlvbnMociwgbiwgYSkge1xuICBmb3IgKHZhciBvID0gMDsgbyA8IGEubGVuZ3RoOyBvKyspIHtcbiAgICBpZiAoYVtvXS5raW5kID09PSBlLktpbmQuRlJBR01FTlRfREVGSU5JVElPTikge1xuICAgICAgdmFyIGkgPSBhW29dLm5hbWUudmFsdWU7XG4gICAgICB2YXIgdSA9IHQuc3RyaW5naWZ5RG9jdW1lbnQoYVtvXSk7XG4gICAgICBpZiAoIXIuaGFzKGkpKSB7XG4gICAgICAgIHIuc2V0KGksIHUpO1xuICAgICAgICBuLnB1c2goYVtvXSk7XG4gICAgICB9IGVsc2UgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViAmJiByLmdldChpKSAhPT0gdSkge1xuICAgICAgICBjb25zb2xlLndhcm4oXCJbV0FSTklORzogRHVwbGljYXRlIEZyYWdtZW50XSBBIGZyYWdtZW50IHdpdGggbmFtZSBgXCIgKyBpICsgXCJgIGFscmVhZHkgZXhpc3RzIGluIHRoaXMgZG9jdW1lbnQuXFxuV2hpbGUgZnJhZ21lbnQgbmFtZXMgbWF5IG5vdCBiZSB1bmlxdWUgYWNyb3NzIHlvdXIgc291cmNlLCBlYWNoIG5hbWUgbXVzdCBiZSB1bmlxdWUgcGVyIGRvY3VtZW50LlwiKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbi5wdXNoKGFbb10pO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBzaG91bGRTa2lwKGUpIHtcbiAgdmFyIHQgPSBlLmtpbmQ7XG4gIHJldHVybiBcIm11dGF0aW9uXCIgIT09IHQgJiYgXCJxdWVyeVwiICE9PSB0O1xufVxuXG5mdW5jdGlvbiBjYWNoZUV4Y2hhbmdlKGUpIHtcbiAgdmFyIG4gPSBlLmZvcndhcmQ7XG4gIHZhciBhID0gZS5jbGllbnQ7XG4gIHZhciBvID0gZS5kaXNwYXRjaERlYnVnO1xuICB2YXIgaSA9IG5ldyBNYXA7XG4gIHZhciB1ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgZnVuY3Rpb24gbWFwVHlwZU5hbWVzKGUpIHtcbiAgICB2YXIgdCA9IG1ha2VPcGVyYXRpb24oZS5raW5kLCBlKTtcbiAgICB0LnF1ZXJ5ID0gZm9ybWF0RG9jdW1lbnQoZS5xdWVyeSk7XG4gICAgcmV0dXJuIHQ7XG4gIH1cbiAgZnVuY3Rpb24gaXNPcGVyYXRpb25DYWNoZWQoZSkge1xuICAgIHZhciB0ID0gZS5jb250ZXh0LnJlcXVlc3RQb2xpY3k7XG4gICAgcmV0dXJuIFwicXVlcnlcIiA9PT0gZS5raW5kICYmIFwibmV0d29yay1vbmx5XCIgIT09IHQgJiYgKFwiY2FjaGUtb25seVwiID09PSB0IHx8IGkuaGFzKGUua2V5KSk7XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uKGUpIHtcbiAgICB2YXIgYyA9IHIuc2hhcmUoZSk7XG4gICAgdmFyIHMgPSByLm1hcCgoZnVuY3Rpb24oZSkge1xuICAgICAgdmFyIHIgPSBpLmdldChlLmtleSk7XG4gICAgICBcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgJiYgbyh0Ll9leHRlbmRzKHt9LCB7XG4gICAgICAgIG9wZXJhdGlvbjogZVxuICAgICAgfSwgciA/IHtcbiAgICAgICAgdHlwZTogXCJjYWNoZUhpdFwiLFxuICAgICAgICBtZXNzYWdlOiBcIlRoZSByZXN1bHQgd2FzIHN1Y2Nlc3NmdWxseSByZXRyaWVkIGZyb20gdGhlIGNhY2hlXCJcbiAgICAgIH0gOiB7XG4gICAgICAgIHR5cGU6IFwiY2FjaGVNaXNzXCIsXG4gICAgICAgIG1lc3NhZ2U6IFwiVGhlIHJlc3VsdCBjb3VsZCBub3QgYmUgcmV0cmlldmVkIGZyb20gdGhlIGNhY2hlXCJcbiAgICAgIH0pKTtcbiAgICAgIHZhciBuID0gdC5fZXh0ZW5kcyh7fSwgciwge1xuICAgICAgICBvcGVyYXRpb246IGFkZE1ldGFkYXRhKGUsIHtcbiAgICAgICAgICBjYWNoZU91dGNvbWU6IHIgPyBcImhpdFwiIDogXCJtaXNzXCJcbiAgICAgICAgfSlcbiAgICAgIH0pO1xuICAgICAgaWYgKFwiY2FjaGUtYW5kLW5ldHdvcmtcIiA9PT0gZS5jb250ZXh0LnJlcXVlc3RQb2xpY3kpIHtcbiAgICAgICAgbi5zdGFsZSA9ICEwO1xuICAgICAgICByZWV4ZWN1dGVPcGVyYXRpb24oYSwgZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbjtcbiAgICB9KSkoci5maWx0ZXIoKGZ1bmN0aW9uKGUpIHtcbiAgICAgIHJldHVybiAhc2hvdWxkU2tpcChlKSAmJiBpc09wZXJhdGlvbkNhY2hlZChlKTtcbiAgICB9KSkoYykpO1xuICAgIHZhciBwID0gci50YXAoKGZ1bmN0aW9uKGUpIHtcbiAgICAgIHZhciB0ID0gZS5vcGVyYXRpb247XG4gICAgICBpZiAoIXQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIHIgPSBjb2xsZWN0VHlwZXNGcm9tUmVzcG9uc2UoZS5kYXRhKS5jb25jYXQodC5jb250ZXh0LmFkZGl0aW9uYWxUeXBlbmFtZXMgfHwgW10pO1xuICAgICAgaWYgKFwibXV0YXRpb25cIiA9PT0gZS5vcGVyYXRpb24ua2luZCkge1xuICAgICAgICB2YXIgbiA9IG5ldyBTZXQ7XG4gICAgICAgIFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViAmJiBvKHtcbiAgICAgICAgICB0eXBlOiBcImNhY2hlSW52YWxpZGF0aW9uXCIsXG4gICAgICAgICAgbWVzc2FnZTogXCJUaGUgZm9sbG93aW5nIHR5cGVuYW1lcyBoYXZlIGJlZW4gaW52YWxpZGF0ZWQ6IFwiICsgcixcbiAgICAgICAgICBvcGVyYXRpb246IHQsXG4gICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgdHlwZW5hbWVzOiByLFxuICAgICAgICAgICAgcmVzcG9uc2U6IGVcbiAgICAgICAgICB9LFxuICAgICAgICAgIHNvdXJjZTogXCJjYWNoZUV4Y2hhbmdlXCJcbiAgICAgICAgfSk7XG4gICAgICAgIGZvciAodmFyIGMgPSAwOyBjIDwgci5sZW5ndGg7IGMrKykge1xuICAgICAgICAgIHZhciBzID0gcltjXTtcbiAgICAgICAgICB2YXIgcCA9IHVbc10gfHwgKHVbc10gPSBuZXcgU2V0KTtcbiAgICAgICAgICBwLmZvckVhY2goKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIG4uYWRkKGUpO1xuICAgICAgICAgIH0pKTtcbiAgICAgICAgICBwLmNsZWFyKCk7XG4gICAgICAgIH1cbiAgICAgICAgbi5mb3JFYWNoKChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgaWYgKGkuaGFzKGUpKSB7XG4gICAgICAgICAgICB0ID0gaS5nZXQoZSkub3BlcmF0aW9uO1xuICAgICAgICAgICAgaS5kZWxldGUoZSk7XG4gICAgICAgICAgICByZWV4ZWN1dGVPcGVyYXRpb24oYSwgdCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KSk7XG4gICAgICB9IGVsc2UgaWYgKFwicXVlcnlcIiA9PT0gdC5raW5kICYmIGUuZGF0YSkge1xuICAgICAgICBpLnNldCh0LmtleSwgZSk7XG4gICAgICAgIGZvciAodmFyIGYgPSAwOyBmIDwgci5sZW5ndGg7IGYrKykge1xuICAgICAgICAgIHZhciBsID0gcltmXTtcbiAgICAgICAgICAodVtsXSB8fCAodVtsXSA9IG5ldyBTZXQpKS5hZGQodC5rZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSkpKG4oci5maWx0ZXIoKGZ1bmN0aW9uKGUpIHtcbiAgICAgIHJldHVybiBcInF1ZXJ5XCIgIT09IGUua2luZCB8fCBcImNhY2hlLW9ubHlcIiAhPT0gZS5jb250ZXh0LnJlcXVlc3RQb2xpY3k7XG4gICAgfSkpKHIubWFwKChmdW5jdGlvbihlKSB7XG4gICAgICByZXR1cm4gYWRkTWV0YWRhdGEoZSwge1xuICAgICAgICBjYWNoZU91dGNvbWU6IFwibWlzc1wiXG4gICAgICB9KTtcbiAgICB9KSkoci5tZXJnZShbIHIubWFwKG1hcFR5cGVOYW1lcykoci5maWx0ZXIoKGZ1bmN0aW9uKGUpIHtcbiAgICAgIHJldHVybiAhc2hvdWxkU2tpcChlKSAmJiAhaXNPcGVyYXRpb25DYWNoZWQoZSk7XG4gICAgfSkpKGMpKSwgci5maWx0ZXIoKGZ1bmN0aW9uKGUpIHtcbiAgICAgIHJldHVybiBzaG91bGRTa2lwKGUpO1xuICAgIH0pKShjKSBdKSkpKSk7XG4gICAgcmV0dXJuIHIubWVyZ2UoWyBzLCBwIF0pO1xuICB9O1xufVxuXG5mdW5jdGlvbiByZWV4ZWN1dGVPcGVyYXRpb24oZSwgcikge1xuICByZXR1cm4gZS5yZWV4ZWN1dGVPcGVyYXRpb24obWFrZU9wZXJhdGlvbihyLmtpbmQsIHIsIHQuX2V4dGVuZHMoe30sIHIuY29udGV4dCwge1xuICAgIHJlcXVlc3RQb2xpY3k6IFwibmV0d29yay1vbmx5XCJcbiAgfSkpKTtcbn1cblxudmFyIGEgPSBuZXcgU2V0O1xuXG5mdW5jdGlvbiBkZWR1cEV4Y2hhbmdlKGUpIHtcbiAgdmFyIHQgPSBlLmZvcndhcmQ7XG4gIHZhciBuID0gZS5kaXNwYXRjaERlYnVnO1xuICB2YXIgYSA9IG5ldyBTZXQ7XG4gIGZ1bmN0aW9uIGZpbHRlckluY29taW5nT3BlcmF0aW9uKGUpIHtcbiAgICB2YXIgdCA9IGUua2V5O1xuICAgIHZhciByID0gZS5raW5kO1xuICAgIGlmIChcInRlYXJkb3duXCIgPT09IHIpIHtcbiAgICAgIGEuZGVsZXRlKHQpO1xuICAgICAgcmV0dXJuICEwO1xuICAgIH1cbiAgICBpZiAoXCJxdWVyeVwiICE9PSByICYmIFwic3Vic2NyaXB0aW9uXCIgIT09IHIpIHtcbiAgICAgIHJldHVybiAhMDtcbiAgICB9XG4gICAgdmFyIG8gPSBhLmhhcyh0KTtcbiAgICBhLmFkZCh0KTtcbiAgICBpZiAobykge1xuICAgICAgXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WICYmIG4oe1xuICAgICAgICB0eXBlOiBcImRlZHVwXCIsXG4gICAgICAgIG1lc3NhZ2U6IFwiQW4gb3BlcmF0aW9uIGhhcyBiZWVuIGRlZHVwZWQuXCIsXG4gICAgICAgIG9wZXJhdGlvbjogZSxcbiAgICAgICAgc291cmNlOiBcImRlZHVwRXhjaGFuZ2VcIlxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiAhbztcbiAgfVxuICBmdW5jdGlvbiBhZnRlck9wZXJhdGlvblJlc3VsdChlKSB7XG4gICAgaWYgKCFlLmhhc05leHQpIHtcbiAgICAgIGEuZGVsZXRlKGUub3BlcmF0aW9uLmtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBmdW5jdGlvbihlKSB7XG4gICAgdmFyIG4gPSByLmZpbHRlcihmaWx0ZXJJbmNvbWluZ09wZXJhdGlvbikoZSk7XG4gICAgcmV0dXJuIHIudGFwKGFmdGVyT3BlcmF0aW9uUmVzdWx0KSh0KG4pKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZmV0Y2hFeGNoYW5nZShlKSB7XG4gIHZhciBuID0gZS5mb3J3YXJkO1xuICB2YXIgYSA9IGUuZGlzcGF0Y2hEZWJ1ZztcbiAgcmV0dXJuIGZ1bmN0aW9uKGUpIHtcbiAgICB2YXIgbyA9IHIuc2hhcmUoZSk7XG4gICAgdmFyIGkgPSByLm1lcmdlTWFwKChmdW5jdGlvbihlKSB7XG4gICAgICB2YXIgbiA9IGUua2V5O1xuICAgICAgdmFyIGkgPSByLmZpbHRlcigoZnVuY3Rpb24oZSkge1xuICAgICAgICByZXR1cm4gXCJ0ZWFyZG93blwiID09PSBlLmtpbmQgJiYgZS5rZXkgPT09IG47XG4gICAgICB9KSkobyk7XG4gICAgICB2YXIgdSA9IHQubWFrZUZldGNoQm9keShlKTtcbiAgICAgIHZhciBjID0gdC5tYWtlRmV0Y2hVUkwoZSwgdSk7XG4gICAgICB2YXIgcyA9IHQubWFrZUZldGNoT3B0aW9ucyhlLCB1KTtcbiAgICAgIFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViAmJiBhKHtcbiAgICAgICAgdHlwZTogXCJmZXRjaFJlcXVlc3RcIixcbiAgICAgICAgbWVzc2FnZTogXCJBIGZldGNoIHJlcXVlc3QgaXMgYmVpbmcgZXhlY3V0ZWQuXCIsXG4gICAgICAgIG9wZXJhdGlvbjogZSxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIHVybDogYyxcbiAgICAgICAgICBmZXRjaE9wdGlvbnM6IHNcbiAgICAgICAgfSxcbiAgICAgICAgc291cmNlOiBcImZldGNoRXhjaGFuZ2VcIlxuICAgICAgfSk7XG4gICAgICByZXR1cm4gci5vblB1c2goKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIHIgPSAhdC5kYXRhID8gdC5lcnJvciA6IHZvaWQgMDtcbiAgICAgICAgXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WICYmIGEoe1xuICAgICAgICAgIHR5cGU6IHIgPyBcImZldGNoRXJyb3JcIiA6IFwiZmV0Y2hTdWNjZXNzXCIsXG4gICAgICAgICAgbWVzc2FnZTogXCJBIFwiICsgKHIgPyBcImZhaWxlZFwiIDogXCJzdWNjZXNzZnVsXCIpICsgXCIgZmV0Y2ggcmVzcG9uc2UgaGFzIGJlZW4gcmV0dXJuZWQuXCIsXG4gICAgICAgICAgb3BlcmF0aW9uOiBlLFxuICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIHVybDogYyxcbiAgICAgICAgICAgIGZldGNoT3B0aW9uczogcyxcbiAgICAgICAgICAgIHZhbHVlOiByIHx8IHRcbiAgICAgICAgICB9LFxuICAgICAgICAgIHNvdXJjZTogXCJmZXRjaEV4Y2hhbmdlXCJcbiAgICAgICAgfSk7XG4gICAgICB9KSkoci50YWtlVW50aWwoaSkodC5tYWtlRmV0Y2hTb3VyY2UoZSwgYywgcykpKTtcbiAgICB9KSkoci5maWx0ZXIoKGZ1bmN0aW9uKGUpIHtcbiAgICAgIHJldHVybiBcInF1ZXJ5XCIgPT09IGUua2luZCB8fCBcIm11dGF0aW9uXCIgPT09IGUua2luZDtcbiAgICB9KSkobykpO1xuICAgIHZhciB1ID0gbihyLmZpbHRlcigoZnVuY3Rpb24oZSkge1xuICAgICAgcmV0dXJuIFwicXVlcnlcIiAhPT0gZS5raW5kICYmIFwibXV0YXRpb25cIiAhPT0gZS5raW5kO1xuICAgIH0pKShvKSk7XG4gICAgcmV0dXJuIHIubWVyZ2UoWyBpLCB1IF0pO1xuICB9O1xufVxuXG5mdW5jdGlvbiBmYWxsYmFja0V4Y2hhbmdlKGUpIHtcbiAgdmFyIHQgPSBlLmRpc3BhdGNoRGVidWc7XG4gIHJldHVybiBmdW5jdGlvbihlKSB7XG4gICAgcmV0dXJuIHIuZmlsdGVyKChmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAhMTtcbiAgICB9KSkoci50YXAoKGZ1bmN0aW9uKGUpIHtcbiAgICAgIGlmIChcInRlYXJkb3duXCIgIT09IGUua2luZCAmJiBcInByb2R1Y3Rpb25cIiAhPT0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICAgICAgdmFyIHIgPSAnTm8gZXhjaGFuZ2UgaGFzIGhhbmRsZWQgb3BlcmF0aW9ucyBvZiBraW5kIFwiJyArIGUua2luZCArIFwiXFxcIi4gQ2hlY2sgd2hldGhlciB5b3UndmUgYWRkZWQgYW4gZXhjaGFuZ2UgcmVzcG9uc2libGUgZm9yIHRoZXNlIG9wZXJhdGlvbnMuXCI7XG4gICAgICAgIFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViAmJiB0KHtcbiAgICAgICAgICB0eXBlOiBcImZhbGxiYWNrQ2F0Y2hcIixcbiAgICAgICAgICBtZXNzYWdlOiByLFxuICAgICAgICAgIG9wZXJhdGlvbjogZSxcbiAgICAgICAgICBzb3VyY2U6IFwiZmFsbGJhY2tFeGNoYW5nZVwiXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zb2xlLndhcm4ocik7XG4gICAgICB9XG4gICAgfSkpKGUpKTtcbiAgfTtcbn1cblxudmFyIG8gPSBmYWxsYmFja0V4Y2hhbmdlKHtcbiAgZGlzcGF0Y2hEZWJ1Zzogbm9vcFxufSk7XG5cbmZ1bmN0aW9uIGNvbXBvc2VFeGNoYW5nZXMoZSkge1xuICByZXR1cm4gZnVuY3Rpb24ocikge1xuICAgIHZhciBuID0gci5jbGllbnQ7XG4gICAgdmFyIGEgPSByLmRpc3BhdGNoRGVidWc7XG4gICAgcmV0dXJuIGUucmVkdWNlUmlnaHQoKGZ1bmN0aW9uKGUsIHIpIHtcbiAgICAgIHJldHVybiByKHtcbiAgICAgICAgY2xpZW50OiBuLFxuICAgICAgICBmb3J3YXJkOiBlLFxuICAgICAgICBkaXNwYXRjaERlYnVnOiBmdW5jdGlvbiBkaXNwYXRjaERlYnVnJDEoZSkge1xuICAgICAgICAgIFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViAmJiBhKHQuX2V4dGVuZHMoe30sIHtcbiAgICAgICAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKSxcbiAgICAgICAgICAgIHNvdXJjZTogci5uYW1lXG4gICAgICAgICAgfSwgZSkpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KSwgci5mb3J3YXJkKTtcbiAgfTtcbn1cblxudmFyIGkgPSBbIGRlZHVwRXhjaGFuZ2UsIGNhY2hlRXhjaGFuZ2UsIGZldGNoRXhjaGFuZ2UgXTtcblxudmFyIHUgPSBmdW5jdGlvbiBDbGllbnQoZSkge1xuICBpZiAoXCJwcm9kdWN0aW9uXCIgIT09IHByb2Nlc3MuZW52Lk5PREVfRU5WICYmICFlLnVybCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIllvdSBhcmUgY3JlYXRpbmcgYW4gdXJxbC1jbGllbnQgd2l0aG91dCBhIHVybC5cIik7XG4gIH1cbiAgdmFyIG4gPSBuZXcgTWFwO1xuICB2YXIgYSA9IG5ldyBNYXA7XG4gIHZhciBvID0gW107XG4gIHZhciB1ID0gci5tYWtlU3ViamVjdCgpO1xuICB2YXIgYyA9IHUuc291cmNlO1xuICB2YXIgcyA9IHUubmV4dDtcbiAgdmFyIHAgPSAhMTtcbiAgZnVuY3Rpb24gZGlzcGF0Y2hPcGVyYXRpb24oZSkge1xuICAgIHAgPSAhMDtcbiAgICBpZiAoZSkge1xuICAgICAgcyhlKTtcbiAgICB9XG4gICAgd2hpbGUgKGUgPSBvLnNoaWZ0KCkpIHtcbiAgICAgIHMoZSk7XG4gICAgfVxuICAgIHAgPSAhMTtcbiAgfVxuICBmdW5jdGlvbiBtYWtlUmVzdWx0U291cmNlKGUpIHtcbiAgICB2YXIgaSA9IHIuZmlsdGVyKChmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gdC5vcGVyYXRpb24ua2luZCA9PT0gZS5raW5kICYmIHQub3BlcmF0aW9uLmtleSA9PT0gZS5rZXk7XG4gICAgfSkpKGspO1xuICAgIGlmIChsLm1hc2tUeXBlbmFtZSkge1xuICAgICAgaSA9IHIubWFwKChmdW5jdGlvbihlKSB7XG4gICAgICAgIHJldHVybiB0Ll9leHRlbmRzKHt9LCBlLCB7XG4gICAgICAgICAgZGF0YTogbWFza1R5cGVuYW1lKGUuZGF0YSlcbiAgICAgICAgfSk7XG4gICAgICB9KSkoaSk7XG4gICAgfVxuICAgIGlmIChcIm11dGF0aW9uXCIgPT09IGUua2luZCkge1xuICAgICAgcmV0dXJuIHIudGFrZSgxKShyLm9uU3RhcnQoKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZGlzcGF0Y2hPcGVyYXRpb24oZSk7XG4gICAgICB9KSkoaSkpO1xuICAgIH1cbiAgICByZXR1cm4gci5zaGFyZShyLm9uRW5kKChmdW5jdGlvbigpIHtcbiAgICAgIG4uZGVsZXRlKGUua2V5KTtcbiAgICAgIGEuZGVsZXRlKGUua2V5KTtcbiAgICAgIGZvciAodmFyIHQgPSBvLmxlbmd0aCAtIDE7IHQgPj0gMDsgdC0tKSB7XG4gICAgICAgIGlmIChvW3RdLmtleSA9PT0gZS5rZXkpIHtcbiAgICAgICAgICBvLnNwbGljZSh0LCAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZGlzcGF0Y2hPcGVyYXRpb24obWFrZU9wZXJhdGlvbihcInRlYXJkb3duXCIsIGUsIGUuY29udGV4dCkpO1xuICAgIH0pKShyLm9uUHVzaCgoZnVuY3Rpb24odCkge1xuICAgICAgbi5zZXQoZS5rZXksIHQpO1xuICAgIH0pKShyLnN3aXRjaE1hcCgoZnVuY3Rpb24obikge1xuICAgICAgaWYgKFwicXVlcnlcIiAhPT0gZS5raW5kIHx8IG4uc3RhbGUpIHtcbiAgICAgICAgcmV0dXJuIHIuZnJvbVZhbHVlKG4pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHIubWVyZ2UoWyByLmZyb21WYWx1ZShuKSwgci5tYXAoKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdC5fZXh0ZW5kcyh7fSwgbiwge1xuICAgICAgICAgIHN0YWxlOiAhMFxuICAgICAgICB9KTtcbiAgICAgIH0pKShyLnRha2UoMSkoci5maWx0ZXIoKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgcmV0dXJuIFwicXVlcnlcIiA9PT0gdC5raW5kICYmIHQua2V5ID09PSBlLmtleSAmJiBcImNhY2hlLW9ubHlcIiAhPT0gdC5jb250ZXh0LnJlcXVlc3RQb2xpY3k7XG4gICAgICB9KSkoYykpKSBdKTtcbiAgICB9KSkoci50YWtlVW50aWwoci5maWx0ZXIoKGZ1bmN0aW9uKHQpIHtcbiAgICAgIHJldHVybiBcInRlYXJkb3duXCIgPT09IHQua2luZCAmJiB0LmtleSA9PT0gZS5rZXk7XG4gICAgfSkpKGMpKShpKSkpKSk7XG4gIH1cbiAgdmFyIGYgPSB0aGlzIGluc3RhbmNlb2YgQ2xpZW50ID8gdGhpcyA6IE9iamVjdC5jcmVhdGUoQ2xpZW50LnByb3RvdHlwZSk7XG4gIHZhciBsID0gdC5fZXh0ZW5kcyhmLCB7XG4gICAgdXJsOiBlLnVybCxcbiAgICBmZXRjaE9wdGlvbnM6IGUuZmV0Y2hPcHRpb25zLFxuICAgIGZldGNoOiBlLmZldGNoLFxuICAgIHN1c3BlbnNlOiAhIWUuc3VzcGVuc2UsXG4gICAgcmVxdWVzdFBvbGljeTogZS5yZXF1ZXN0UG9saWN5IHx8IFwiY2FjaGUtZmlyc3RcIixcbiAgICBwcmVmZXJHZXRNZXRob2Q6ICEhZS5wcmVmZXJHZXRNZXRob2QsXG4gICAgbWFza1R5cGVuYW1lOiAhIWUubWFza1R5cGVuYW1lLFxuICAgIG9wZXJhdGlvbnMkOiBjLFxuICAgIHJlZXhlY3V0ZU9wZXJhdGlvbjogZnVuY3Rpb24gcmVleGVjdXRlT3BlcmF0aW9uKGUpIHtcbiAgICAgIGlmIChcIm11dGF0aW9uXCIgPT09IGUua2luZCB8fCBhLmhhcyhlLmtleSkpIHtcbiAgICAgICAgby5wdXNoKGUpO1xuICAgICAgICBpZiAoIXApIHtcbiAgICAgICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKGRpc3BhdGNoT3BlcmF0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgY3JlYXRlT3BlcmF0aW9uQ29udGV4dDogZnVuY3Rpb24gY3JlYXRlT3BlcmF0aW9uQ29udGV4dChlKSB7XG4gICAgICBpZiAoIWUpIHtcbiAgICAgICAgZSA9IHt9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHQuX2V4dGVuZHMoe30sIHtcbiAgICAgICAgdXJsOiBsLnVybCxcbiAgICAgICAgZmV0Y2hPcHRpb25zOiBsLmZldGNoT3B0aW9ucyxcbiAgICAgICAgZmV0Y2g6IGwuZmV0Y2gsXG4gICAgICAgIHByZWZlckdldE1ldGhvZDogbC5wcmVmZXJHZXRNZXRob2RcbiAgICAgIH0sIGUsIHtcbiAgICAgICAgc3VzcGVuc2U6IGUuc3VzcGVuc2UgfHwgITEgIT09IGUuc3VzcGVuc2UgJiYgbC5zdXNwZW5zZSxcbiAgICAgICAgcmVxdWVzdFBvbGljeTogZS5yZXF1ZXN0UG9saWN5IHx8IGwucmVxdWVzdFBvbGljeVxuICAgICAgfSk7XG4gICAgfSxcbiAgICBjcmVhdGVSZXF1ZXN0T3BlcmF0aW9uOiBmdW5jdGlvbiBjcmVhdGVSZXF1ZXN0T3BlcmF0aW9uKGUsIHIsIG4pIHtcbiAgICAgIHZhciBhID0gdC5nZXRPcGVyYXRpb25UeXBlKHIucXVlcnkpO1xuICAgICAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOViAmJiBcInRlYXJkb3duXCIgIT09IGUgJiYgYSAhPT0gZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIG9wZXJhdGlvbiBvZiB0eXBlIFwiJyArIGUgKyAnXCIgYnV0IGZvdW5kIFwiJyArIGEgKyAnXCInKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYWtlT3BlcmF0aW9uKGUsIHIsIGwuY3JlYXRlT3BlcmF0aW9uQ29udGV4dChuKSk7XG4gICAgfSxcbiAgICBleGVjdXRlUmVxdWVzdE9wZXJhdGlvbjogZnVuY3Rpb24gZXhlY3V0ZVJlcXVlc3RPcGVyYXRpb24oZSkge1xuICAgICAgaWYgKFwibXV0YXRpb25cIiA9PT0gZS5raW5kKSB7XG4gICAgICAgIHJldHVybiBtYWtlUmVzdWx0U291cmNlKGUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHIubWFrZSgoZnVuY3Rpb24obykge1xuICAgICAgICB2YXIgaSA9IGEuZ2V0KGUua2V5KTtcbiAgICAgICAgaWYgKCFpKSB7XG4gICAgICAgICAgYS5zZXQoZS5rZXksIGkgPSBtYWtlUmVzdWx0U291cmNlKGUpKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdSA9IFwiY2FjaGUtYW5kLW5ldHdvcmtcIiA9PT0gZS5jb250ZXh0LnJlcXVlc3RQb2xpY3kgfHwgXCJuZXR3b3JrLW9ubHlcIiA9PT0gZS5jb250ZXh0LnJlcXVlc3RQb2xpY3k7XG4gICAgICAgIHJldHVybiByLnN1YnNjcmliZShvLm5leHQpKHIub25FbmQoby5jb21wbGV0ZSkoci5vblN0YXJ0KChmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgciA9IG4uZ2V0KGUua2V5KTtcbiAgICAgICAgICBpZiAoXCJzdWJzY3JpcHRpb25cIiA9PT0gZS5raW5kKSB7XG4gICAgICAgICAgICByZXR1cm4gZGlzcGF0Y2hPcGVyYXRpb24oZSk7XG4gICAgICAgICAgfSBlbHNlIGlmICh1KSB7XG4gICAgICAgICAgICBkaXNwYXRjaE9wZXJhdGlvbihlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG51bGwgIT0gciAmJiByID09PSBuLmdldChlLmtleSkpIHtcbiAgICAgICAgICAgIG8ubmV4dCh1ID8gdC5fZXh0ZW5kcyh7fSwgciwge1xuICAgICAgICAgICAgICBzdGFsZTogITBcbiAgICAgICAgICAgIH0pIDogcik7XG4gICAgICAgICAgfSBlbHNlIGlmICghdSkge1xuICAgICAgICAgICAgZGlzcGF0Y2hPcGVyYXRpb24oZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KSkoaSkpKS51bnN1YnNjcmliZTtcbiAgICAgIH0pKTtcbiAgICB9LFxuICAgIGV4ZWN1dGVRdWVyeTogZnVuY3Rpb24gZXhlY3V0ZVF1ZXJ5KGUsIHQpIHtcbiAgICAgIHZhciByID0gbC5jcmVhdGVSZXF1ZXN0T3BlcmF0aW9uKFwicXVlcnlcIiwgZSwgdCk7XG4gICAgICByZXR1cm4gbC5leGVjdXRlUmVxdWVzdE9wZXJhdGlvbihyKTtcbiAgICB9LFxuICAgIGV4ZWN1dGVTdWJzY3JpcHRpb246IGZ1bmN0aW9uIGV4ZWN1dGVTdWJzY3JpcHRpb24oZSwgdCkge1xuICAgICAgdmFyIHIgPSBsLmNyZWF0ZVJlcXVlc3RPcGVyYXRpb24oXCJzdWJzY3JpcHRpb25cIiwgZSwgdCk7XG4gICAgICByZXR1cm4gbC5leGVjdXRlUmVxdWVzdE9wZXJhdGlvbihyKTtcbiAgICB9LFxuICAgIGV4ZWN1dGVNdXRhdGlvbjogZnVuY3Rpb24gZXhlY3V0ZU11dGF0aW9uKGUsIHQpIHtcbiAgICAgIHZhciByID0gbC5jcmVhdGVSZXF1ZXN0T3BlcmF0aW9uKFwibXV0YXRpb25cIiwgZSwgdCk7XG4gICAgICByZXR1cm4gbC5leGVjdXRlUmVxdWVzdE9wZXJhdGlvbihyKTtcbiAgICB9LFxuICAgIHF1ZXJ5OiBmdW5jdGlvbiBxdWVyeShlLCByLCBuKSB7XG4gICAgICBpZiAoIW4gfHwgXCJib29sZWFuXCIgIT0gdHlwZW9mIG4uc3VzcGVuc2UpIHtcbiAgICAgICAgbiA9IHQuX2V4dGVuZHMoe30sIG4sIHtcbiAgICAgICAgICBzdXNwZW5zZTogITFcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gd2l0aFByb21pc2UobC5leGVjdXRlUXVlcnkodC5jcmVhdGVSZXF1ZXN0KGUsIHIpLCBuKSk7XG4gICAgfSxcbiAgICByZWFkUXVlcnk6IGZ1bmN0aW9uIHJlYWRRdWVyeShlLCB0LCBuKSB7XG4gICAgICB2YXIgYSA9IG51bGw7XG4gICAgICByLnN1YnNjcmliZSgoZnVuY3Rpb24oZSkge1xuICAgICAgICBhID0gZTtcbiAgICAgIH0pKShsLnF1ZXJ5KGUsIHQsIG4pKS51bnN1YnNjcmliZSgpO1xuICAgICAgcmV0dXJuIGE7XG4gICAgfSxcbiAgICBzdWJzY3JpcHRpb246IGZ1bmN0aW9uIHN1YnNjcmlwdGlvbihlLCByLCBuKSB7XG4gICAgICByZXR1cm4gbC5leGVjdXRlU3Vic2NyaXB0aW9uKHQuY3JlYXRlUmVxdWVzdChlLCByKSwgbik7XG4gICAgfSxcbiAgICBtdXRhdGlvbjogZnVuY3Rpb24gbXV0YXRpb24oZSwgciwgbikge1xuICAgICAgcmV0dXJuIHdpdGhQcm9taXNlKGwuZXhlY3V0ZU11dGF0aW9uKHQuY3JlYXRlUmVxdWVzdChlLCByKSwgbikpO1xuICAgIH1cbiAgfSk7XG4gIHZhciBkID0gbm9vcDtcbiAgaWYgKFwicHJvZHVjdGlvblwiICE9PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgIHZhciBoID0gci5tYWtlU3ViamVjdCgpO1xuICAgIHZhciB2ID0gaC5uZXh0O1xuICAgIHZhciBtID0gaC5zb3VyY2U7XG4gICAgbC5zdWJzY3JpYmVUb0RlYnVnVGFyZ2V0ID0gZnVuY3Rpb24oZSkge1xuICAgICAgcmV0dXJuIHIuc3Vic2NyaWJlKGUpKG0pO1xuICAgIH07XG4gICAgZCA9IHY7XG4gIH1cbiAgdmFyIHkgPSBjb21wb3NlRXhjaGFuZ2VzKHZvaWQgMCAhPT0gZS5leGNoYW5nZXMgPyBlLmV4Y2hhbmdlcyA6IGkpO1xuICB2YXIgayA9IHIuc2hhcmUoeSh7XG4gICAgY2xpZW50OiBsLFxuICAgIGRpc3BhdGNoRGVidWc6IGQsXG4gICAgZm9yd2FyZDogZmFsbGJhY2tFeGNoYW5nZSh7XG4gICAgICBkaXNwYXRjaERlYnVnOiBkXG4gICAgfSlcbiAgfSkoYykpO1xuICByLnB1Ymxpc2goayk7XG4gIHJldHVybiBsO1xufTtcblxudmFyIGMgPSB1O1xuXG5leHBvcnRzLkNvbWJpbmVkRXJyb3IgPSB0LkNvbWJpbmVkRXJyb3I7XG5cbmV4cG9ydHMuY3JlYXRlUmVxdWVzdCA9IHQuY3JlYXRlUmVxdWVzdDtcblxuZXhwb3J0cy5nZXRPcGVyYXRpb25OYW1lID0gdC5nZXRPcGVyYXRpb25OYW1lO1xuXG5leHBvcnRzLm1ha2VFcnJvclJlc3VsdCA9IHQubWFrZUVycm9yUmVzdWx0O1xuXG5leHBvcnRzLm1ha2VSZXN1bHQgPSB0Lm1ha2VSZXN1bHQ7XG5cbmV4cG9ydHMubWVyZ2VSZXN1bHRQYXRjaCA9IHQubWVyZ2VSZXN1bHRQYXRjaDtcblxuZXhwb3J0cy5zdHJpbmdpZnlWYXJpYWJsZXMgPSB0LnN0cmluZ2lmeVZhcmlhYmxlcztcblxuZXhwb3J0cy5DbGllbnQgPSB1O1xuXG5leHBvcnRzLmNhY2hlRXhjaGFuZ2UgPSBjYWNoZUV4Y2hhbmdlO1xuXG5leHBvcnRzLmNvbXBvc2VFeGNoYW5nZXMgPSBjb21wb3NlRXhjaGFuZ2VzO1xuXG5leHBvcnRzLmNyZWF0ZUNsaWVudCA9IGM7XG5cbmV4cG9ydHMuZGVidWdFeGNoYW5nZSA9IGZ1bmN0aW9uIGRlYnVnRXhjaGFuZ2UoZSkge1xuICB2YXIgdCA9IGUuZm9yd2FyZDtcbiAgaWYgKFwicHJvZHVjdGlvblwiID09PSBwcm9jZXNzLmVudi5OT0RFX0VOVikge1xuICAgIHJldHVybiBmdW5jdGlvbihlKSB7XG4gICAgICByZXR1cm4gdChlKTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmdW5jdGlvbihlKSB7XG4gICAgICByZXR1cm4gci50YXAoKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgcmV0dXJuIGNvbnNvbGUubG9nKFwiW0V4Y2hhbmdlIGRlYnVnXTogQ29tcGxldGVkIG9wZXJhdGlvbjogXCIsIGUpO1xuICAgICAgfSkpKHQoci50YXAoKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgcmV0dXJuIGNvbnNvbGUubG9nKFwiW0V4Y2hhbmdlIGRlYnVnXTogSW5jb21pbmcgb3BlcmF0aW9uOiBcIiwgZSk7XG4gICAgICB9KSkoZSkpKTtcbiAgICB9O1xuICB9XG59O1xuXG5leHBvcnRzLmRlZHVwRXhjaGFuZ2UgPSBkZWR1cEV4Y2hhbmdlO1xuXG5leHBvcnRzLmRlZmF1bHRFeGNoYW5nZXMgPSBpO1xuXG5leHBvcnRzLmVycm9yRXhjaGFuZ2UgPSBmdW5jdGlvbiBlcnJvckV4Y2hhbmdlKGUpIHtcbiAgdmFyIHQgPSBlLm9uRXJyb3I7XG4gIHJldHVybiBmdW5jdGlvbihlKSB7XG4gICAgdmFyIG4gPSBlLmZvcndhcmQ7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGUpIHtcbiAgICAgIHJldHVybiByLnRhcCgoZnVuY3Rpb24oZSkge1xuICAgICAgICB2YXIgciA9IGUuZXJyb3I7XG4gICAgICAgIGlmIChyKSB7XG4gICAgICAgICAgdChyLCBlLm9wZXJhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pKShuKGUpKTtcbiAgICB9O1xuICB9O1xufTtcblxuZXhwb3J0cy5mYWxsYmFja0V4Y2hhbmdlSU8gPSBvO1xuXG5leHBvcnRzLmZldGNoRXhjaGFuZ2UgPSBmZXRjaEV4Y2hhbmdlO1xuXG5leHBvcnRzLmZvcm1hdERvY3VtZW50ID0gZm9ybWF0RG9jdW1lbnQ7XG5cbmV4cG9ydHMuZ3FsID0gZnVuY3Rpb24gZ3FsKCkge1xuICB2YXIgciA9IGFyZ3VtZW50cztcbiAgdmFyIG4gPSBuZXcgTWFwO1xuICB2YXIgYSA9IFtdO1xuICB2YXIgbyA9IFtdO1xuICB2YXIgaSA9IEFycmF5LmlzQXJyYXkoYXJndW1lbnRzWzBdKSA/IGFyZ3VtZW50c1swXVswXSA6IGFyZ3VtZW50c1swXSB8fCBcIlwiO1xuICBmb3IgKHZhciB1ID0gMTsgdSA8IGFyZ3VtZW50cy5sZW5ndGg7IHUrKykge1xuICAgIHZhciBjID0gclt1XTtcbiAgICBpZiAoYyAmJiBjLmRlZmluaXRpb25zKSB7XG4gICAgICBvLnB1c2guYXBwbHkobywgYy5kZWZpbml0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGkgKz0gYztcbiAgICB9XG4gICAgaSArPSByWzBdW3VdO1xuICB9XG4gIGFwcGx5RGVmaW5pdGlvbnMobiwgYSwgdC5rZXlEb2N1bWVudChpKS5kZWZpbml0aW9ucyk7XG4gIGFwcGx5RGVmaW5pdGlvbnMobiwgYSwgbyk7XG4gIHJldHVybiB0LmtleURvY3VtZW50KHtcbiAgICBraW5kOiBlLktpbmQuRE9DVU1FTlQsXG4gICAgZGVmaW5pdGlvbnM6IGFcbiAgfSk7XG59O1xuXG5leHBvcnRzLm1ha2VPcGVyYXRpb24gPSBtYWtlT3BlcmF0aW9uO1xuXG5leHBvcnRzLm1hc2tUeXBlbmFtZSA9IG1hc2tUeXBlbmFtZTtcblxuZXhwb3J0cy5zc3JFeGNoYW5nZSA9IGZ1bmN0aW9uIHNzckV4Y2hhbmdlKGUpIHtcbiAgdmFyIG4gPSAhKCFlIHx8ICFlLnN0YWxlV2hpbGVSZXZhbGlkYXRlKTtcbiAgdmFyIG8gPSAhKCFlIHx8ICFlLmluY2x1ZGVFeHRlbnNpb25zKTtcbiAgdmFyIGkgPSB7fTtcbiAgdmFyIHUgPSBbXTtcbiAgZnVuY3Rpb24gaW52YWxpZGF0ZShlKSB7XG4gICAgdS5wdXNoKGUub3BlcmF0aW9uLmtleSk7XG4gICAgaWYgKDEgPT09IHUubGVuZ3RoKSB7XG4gICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGU7XG4gICAgICAgIHdoaWxlIChlID0gdS5zaGlmdCgpKSB7XG4gICAgICAgICAgaVtlXSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH0pKTtcbiAgICB9XG4gIH1cbiAgdmFyIHNzciA9IGZ1bmN0aW9uKHUpIHtcbiAgICB2YXIgYyA9IHUuY2xpZW50O1xuICAgIHZhciBzID0gdS5mb3J3YXJkO1xuICAgIHJldHVybiBmdW5jdGlvbih1KSB7XG4gICAgICB2YXIgcCA9IGUgJiYgXCJib29sZWFuXCIgPT0gdHlwZW9mIGUuaXNDbGllbnQgPyAhIWUuaXNDbGllbnQgOiAhYy5zdXNwZW5zZTtcbiAgICAgIHZhciBmID0gci5zaGFyZSh1KTtcbiAgICAgIHZhciBsID0gcyhyLmZpbHRlcigoZnVuY3Rpb24oZSkge1xuICAgICAgICByZXR1cm4gIWlbZS5rZXldIHx8ICEhaVtlLmtleV0uaGFzTmV4dDtcbiAgICAgIH0pKShmKSk7XG4gICAgICB2YXIgZCA9IHIubWFwKChmdW5jdGlvbihlKSB7XG4gICAgICAgIHZhciByID0gZnVuY3Rpb24gZGVzZXJpYWxpemVSZXN1bHQoZSwgciwgbikge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBvcGVyYXRpb246IGUsXG4gICAgICAgICAgICBkYXRhOiByLmRhdGEgPyBKU09OLnBhcnNlKHIuZGF0YSkgOiB2b2lkIDAsXG4gICAgICAgICAgICBleHRlbnNpb25zOiBuICYmIHIuZXh0ZW5zaW9ucyA/IEpTT04ucGFyc2Uoci5leHRlbnNpb25zKSA6IHZvaWQgMCxcbiAgICAgICAgICAgIGVycm9yOiByLmVycm9yID8gbmV3IHQuQ29tYmluZWRFcnJvcih7XG4gICAgICAgICAgICAgIG5ldHdvcmtFcnJvcjogci5lcnJvci5uZXR3b3JrRXJyb3IgPyBuZXcgRXJyb3Ioci5lcnJvci5uZXR3b3JrRXJyb3IpIDogdm9pZCAwLFxuICAgICAgICAgICAgICBncmFwaFFMRXJyb3JzOiByLmVycm9yLmdyYXBoUUxFcnJvcnNcbiAgICAgICAgICAgIH0pIDogdm9pZCAwLFxuICAgICAgICAgICAgaGFzTmV4dDogci5oYXNOZXh0XG4gICAgICAgICAgfTtcbiAgICAgICAgfShlLCBpW2Uua2V5XSwgbyk7XG4gICAgICAgIGlmIChuICYmICFhLmhhcyhlLmtleSkpIHtcbiAgICAgICAgICByLnN0YWxlID0gITA7XG4gICAgICAgICAgYS5hZGQoZS5rZXkpO1xuICAgICAgICAgIHJlZXhlY3V0ZU9wZXJhdGlvbihjLCBlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcjtcbiAgICAgIH0pKShyLmZpbHRlcigoZnVuY3Rpb24oZSkge1xuICAgICAgICByZXR1cm4gISFpW2Uua2V5XTtcbiAgICAgIH0pKShmKSk7XG4gICAgICBpZiAoIXApIHtcbiAgICAgICAgbCA9IHIudGFwKChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgdmFyIHQgPSBlLm9wZXJhdGlvbjtcbiAgICAgICAgICBpZiAoXCJtdXRhdGlvblwiICE9PSB0LmtpbmQpIHtcbiAgICAgICAgICAgIHZhciByID0gZnVuY3Rpb24gc2VyaWFsaXplUmVzdWx0KGUsIHQpIHtcbiAgICAgICAgICAgICAgdmFyIHIgPSBlLmhhc05leHQ7XG4gICAgICAgICAgICAgIHZhciBuID0gZS5kYXRhO1xuICAgICAgICAgICAgICB2YXIgYSA9IGUuZXh0ZW5zaW9ucztcbiAgICAgICAgICAgICAgdmFyIG8gPSBlLmVycm9yO1xuICAgICAgICAgICAgICB2YXIgaSA9IHt9O1xuICAgICAgICAgICAgICBpZiAodm9pZCAwICE9PSBuKSB7XG4gICAgICAgICAgICAgICAgaS5kYXRhID0gSlNPTi5zdHJpbmdpZnkobik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKHQgJiYgdm9pZCAwICE9PSBhKSB7XG4gICAgICAgICAgICAgICAgaS5leHRlbnNpb25zID0gSlNPTi5zdHJpbmdpZnkoYSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKHIpIHtcbiAgICAgICAgICAgICAgICBpLmhhc05leHQgPSAhMDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAobykge1xuICAgICAgICAgICAgICAgIGkuZXJyb3IgPSB7XG4gICAgICAgICAgICAgICAgICBncmFwaFFMRXJyb3JzOiBvLmdyYXBoUUxFcnJvcnMubWFwKChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZS5wYXRoICYmICFlLmV4dGVuc2lvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5tZXNzYWdlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogZS5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICAgIHBhdGg6IGUucGF0aCxcbiAgICAgICAgICAgICAgICAgICAgICBleHRlbnNpb25zOiBlLmV4dGVuc2lvbnNcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgaWYgKG8ubmV0d29ya0Vycm9yKSB7XG4gICAgICAgICAgICAgICAgICBpLmVycm9yLm5ldHdvcmtFcnJvciA9IFwiXCIgKyBvLm5ldHdvcmtFcnJvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9KGUsIG8pO1xuICAgICAgICAgICAgaVt0LmtleV0gPSByO1xuICAgICAgICAgIH1cbiAgICAgICAgfSkpKGwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZCA9IHIudGFwKGludmFsaWRhdGUpKGQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHIubWVyZ2UoWyBsLCBkIF0pO1xuICAgIH07XG4gIH07XG4gIHNzci5yZXN0b3JlRGF0YSA9IGZ1bmN0aW9uKGUpIHtcbiAgICBmb3IgKHZhciB0IGluIGUpIHtcbiAgICAgIGlmIChudWxsICE9PSBpW3RdKSB7XG4gICAgICAgIGlbdF0gPSBlW3RdO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgc3NyLmV4dHJhY3REYXRhID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGUgPSB7fTtcbiAgICBmb3IgKHZhciB0IGluIGkpIHtcbiAgICAgIGlmIChudWxsICE9IGlbdF0pIHtcbiAgICAgICAgZVt0XSA9IGlbdF07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBlO1xuICB9O1xuICBpZiAoZSAmJiBlLmluaXRpYWxTdGF0ZSkge1xuICAgIHNzci5yZXN0b3JlRGF0YShlLmluaXRpYWxTdGF0ZSk7XG4gIH1cbiAgcmV0dXJuIHNzcjtcbn07XG5cbmV4cG9ydHMuc3Vic2NyaXB0aW9uRXhjaGFuZ2UgPSBmdW5jdGlvbiBzdWJzY3JpcHRpb25FeGNoYW5nZShuKSB7XG4gIHZhciBhID0gbi5mb3J3YXJkU3Vic2NyaXB0aW9uO1xuICB2YXIgbyA9IG4uZW5hYmxlQWxsT3BlcmF0aW9ucztcbiAgcmV0dXJuIGZ1bmN0aW9uKG4pIHtcbiAgICB2YXIgaSA9IG4uY2xpZW50O1xuICAgIHZhciB1ID0gbi5mb3J3YXJkO1xuICAgIGZ1bmN0aW9uIGlzU3Vic2NyaXB0aW9uT3BlcmF0aW9uKGUpIHtcbiAgICAgIHZhciB0ID0gZS5raW5kO1xuICAgICAgcmV0dXJuIFwic3Vic2NyaXB0aW9uXCIgPT09IHQgfHwgISFvICYmIChcInF1ZXJ5XCIgPT09IHQgfHwgXCJtdXRhdGlvblwiID09PSB0KTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uKG4pIHtcbiAgICAgIHZhciBvID0gci5zaGFyZShuKTtcbiAgICAgIHZhciBjID0gci5tZXJnZU1hcCgoZnVuY3Rpb24obikge1xuICAgICAgICB2YXIgdSA9IG4ua2V5O1xuICAgICAgICB2YXIgYyA9IHIuZmlsdGVyKChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgcmV0dXJuIFwidGVhcmRvd25cIiA9PT0gZS5raW5kICYmIGUua2V5ID09PSB1O1xuICAgICAgICB9KSkobyk7XG4gICAgICAgIHJldHVybiByLnRha2VVbnRpbChjKShmdW5jdGlvbiBjcmVhdGVTdWJzY3JpcHRpb25Tb3VyY2Uobikge1xuICAgICAgICAgIHZhciBvID0gYSh7XG4gICAgICAgICAgICBrZXk6IG4ua2V5LnRvU3RyaW5nKDM2KSxcbiAgICAgICAgICAgIHF1ZXJ5OiBlLnByaW50KG4ucXVlcnkpLFxuICAgICAgICAgICAgdmFyaWFibGVzOiBuLnZhcmlhYmxlcyxcbiAgICAgICAgICAgIGNvbnRleHQ6IHQuX2V4dGVuZHMoe30sIG4uY29udGV4dClcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gci5tYWtlKChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICB2YXIgciA9IGUubmV4dDtcbiAgICAgICAgICAgIHZhciBhID0gZS5jb21wbGV0ZTtcbiAgICAgICAgICAgIHZhciB1ID0gITE7XG4gICAgICAgICAgICB2YXIgYztcbiAgICAgICAgICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICBpZiAodSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBjID0gby5zdWJzY3JpYmUoe1xuICAgICAgICAgICAgICAgIG5leHQ6IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiByKHQubWFrZVJlc3VsdChuLCBlKSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHIodC5tYWtlRXJyb3JSZXN1bHQobiwgZSkpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY29tcGxldGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgaWYgKCF1KSB7XG4gICAgICAgICAgICAgICAgICAgIHUgPSAhMDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKFwic3Vic2NyaXB0aW9uXCIgPT09IG4ua2luZCkge1xuICAgICAgICAgICAgICAgICAgICAgIGkucmVleGVjdXRlT3BlcmF0aW9uKG1ha2VPcGVyYXRpb24oXCJ0ZWFyZG93blwiLCBuLCBuLmNvbnRleHQpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBhKCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgdSA9ICEwO1xuICAgICAgICAgICAgICBpZiAoYykge1xuICAgICAgICAgICAgICAgIGMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9KSk7XG4gICAgICAgIH0obikpO1xuICAgICAgfSkpKHIuZmlsdGVyKGlzU3Vic2NyaXB0aW9uT3BlcmF0aW9uKShvKSk7XG4gICAgICB2YXIgcyA9IHUoci5maWx0ZXIoKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgcmV0dXJuICFpc1N1YnNjcmlwdGlvbk9wZXJhdGlvbihlKTtcbiAgICAgIH0pKShvKSk7XG4gICAgICByZXR1cm4gci5tZXJnZShbIGMsIHMgXSk7XG4gICAgfTtcbiAgfTtcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11cnFsLWNvcmUuanMubWFwXG4iLCJpbXBvcnQgeyB2NCBhcyB1dWlkdjQgfSBmcm9tIFwidXVpZFwiO1xuaW1wb3J0IHsgZ3FsLCBjcmVhdGVDbGllbnQgfSBmcm9tIFwiQHVycWwvY29yZVwiO1xuaW1wb3J0IHsgRG9jdW1lbnROb2RlLCBncmFwaHFsIH0gZnJvbSBcImdyYXBocWxcIjtcblxuY29uc3QgY2xpZW50ID0gY3JlYXRlQ2xpZW50KHtcbiAgdXJsOiBcImh0dHBzOi8vd3d3LmNvZGUtaW5zcGVjdG9yLmNvbS9ncmFwaHFsXCIsXG59KTtcblxuY29uc3QgcnVubmluZ1ZhbGlkYXRpb25zQ2FjaGU6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7fTtcblxuY29uc3QgU1RPUkFHRV9GSU5HRVJQUklOVF9LRVkgPSBcImNvZGlnYS11c2VyXCI7XG5cbmNocm9tZS5zdG9yYWdlLm9uQ2hhbmdlZC5hZGRMaXN0ZW5lcihmdW5jdGlvbiAoY2hhbmdlcywgbmFtZXNwYWNlKSB7XG4gIGZvciAobGV0IFtrZXksIHsgb2xkVmFsdWUsIG5ld1ZhbHVlIH1dIG9mIE9iamVjdC5lbnRyaWVzKGNoYW5nZXMpKSB7XG4gICAgY29uc29sZS5sb2coXG4gICAgICBgU3RvcmFnZSBrZXkgXCIke2tleX1cIiBpbiBuYW1lc3BhY2UgXCIke25hbWVzcGFjZX1cIiBjaGFuZ2VkLmAsXG4gICAgICBgT2xkIHZhbHVlIHdhcyBcIiR7b2xkVmFsdWV9XCIsIG5ldyB2YWx1ZSBpcyBcIiR7bmV3VmFsdWV9XCIuYFxuICAgICk7XG4gIH1cbn0pO1xuXG5jb25zdCBnZW5lcmF0ZUZpbmdlcnByaW50ID0gKCk6IFByb21pc2U8c3RyaW5nPiA9PiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgIGNocm9tZS5zdG9yYWdlLnN5bmMuZ2V0KFtTVE9SQUdFX0ZJTkdFUlBSSU5UX0tFWV0sIChyZXN1bHQpID0+IHtcbiAgICAgIGlmIChcbiAgICAgICAgcmVzdWx0ICYmXG4gICAgICAgIE9iamVjdC5rZXlzKHJlc3VsdCkubGVuZ3RoID09PSAwICYmXG4gICAgICAgIHJlc3VsdC5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0XG4gICAgICApIHtcbiAgICAgICAgY29uc3QgZmluZ2VycHJpbnQgPSB1dWlkdjQoKTtcbiAgICAgICAgY2hyb21lLnN0b3JhZ2Uuc3luYy5zZXQoXG4gICAgICAgICAgeyBbU1RPUkFHRV9GSU5HRVJQUklOVF9LRVldOiBmaW5nZXJwcmludCB9LFxuICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgIHJlc29sdmUoZmluZ2VycHJpbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc29sdmUocmVzdWx0W1NUT1JBR0VfRklOR0VSUFJJTlRfS0VZXSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufTtcblxuY29uc3QgY3JlYXRlRmlsZUFuYWx5c2lzTXV0YXRpb24gPSAoXG4gIGNvZGU6IHN0cmluZyxcbiAgZmluZ2VycHJpbnQ6IHN0cmluZyxcbiAgbGFuZ3VhZ2U6IHN0cmluZyxcbiAgZmlsZW5hbWU6IHN0cmluZ1xuKTogRG9jdW1lbnROb2RlID0+XG4gIGdxbGBtdXRhdGlvbiB7XG4gICAgY3JlYXRlRmlsZUFuYWx5c2lzKGxhbmd1YWdlOiAke2xhbmd1YWdlfSwgZmlsZW5hbWU6IFwiJHtmaWxlbmFtZX1cIiwgY29kZTogJHtKU09OLnN0cmluZ2lmeShcbiAgICBjb2RlXG4gICl9LCBmaW5nZXJwcmludDogXCIke2ZpbmdlcnByaW50fVwiKVxufWA7XG5cbmNvbnN0IGdldEZpbGVBbmFseXNpc1F1ZXJ5ID0gKGZpbmdlcnByaW50OiBzdHJpbmcsIGFuYWx5c2lzSWQ6IHN0cmluZykgPT5cbiAgZ3FsYHtcbiAgICBnZXRGaWxlQW5hbHlzaXMoaWQ6ICR7YW5hbHlzaXNJZH0sIGZpbmdlcnByaW50OiBcIiR7ZmluZ2VycHJpbnR9XCIpe1xuICAgICAgICB2aW9sYXRpb25zIHtcbiAgICAgICAgICAgIGxpbmVcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uXG4gICAgICAgICAgICB0b29sXG4gICAgICAgICAgICBjYXRlZ29yeVxuICAgICAgICAgICAgcnVsZVxuICAgICAgICAgICAgc2V2ZXJpdHlcbiAgICAgICAgfVxuICAgICAgICBjb2RlXG4gICAgICAgIHN0YXR1c1xuICAgICAgICB0aW1lc3RhbXBcbiAgICAgICAgcnVubmluZ1RpbWVTZWNvbmRzXG4gICAgfVxufWA7XG5cbmNsYXNzIEZldGNoQ2hlY2tlciB7XG4gIGlubmVyQW5hbHlzaXNJZDogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKGlubmVyQW5hbHlzaXNJZDogc3RyaW5nKSB7XG4gICAgdGhpcy5pbm5lckFuYWx5c2lzSWQgPSBpbm5lckFuYWx5c2lzSWQ7XG4gIH1cblxuICBzaG91bGRGZXRjaChjYWNoZUtleTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5uZXJBbmFseXNpc0lkID09PSBydW5uaW5nVmFsaWRhdGlvbnNDYWNoZVtjYWNoZUtleV07XG4gIH1cbn1cblxuY29uc3QgZ2V0U2hvdWxkRmV0Y2ggPSBhc3luYyAoZXhjZWN1dGlvbklkOiBzdHJpbmcsIGNhY2hlS2V5OiBzdHJpbmcpID0+IHtcbiAgY29uc3QgZmV0Y2hDaGVja2VyID0gbmV3IEZldGNoQ2hlY2tlcihleGNlY3V0aW9uSWQpO1xuXG4gIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgY29uc3QgdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgcmVzb2x2ZShmYWxzZSk7XG4gICAgfSwgMTAwMCk7XG4gIH0pO1xuXG4gIHJldHVybiBmZXRjaENoZWNrZXIuc2hvdWxkRmV0Y2goY2FjaGVLZXkpO1xufTtcblxuY29uc3QgZ3JvdXBCeSA9IChsOiBBcnJheTxhbnk+LCBrZXk6IHN0cmluZykgPT4ge1xuICByZXR1cm4gbC5yZWR1Y2UoKGFjYywgY3VycikgPT4ge1xuICAgIChhY2NbY3VycltrZXldXSA9IGFjY1tjdXJyW2tleV1dIHx8IFtdKS5wdXNoKGN1cnIpO1xuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbn07XG5cbnR5cGUgVmFsaWRhdGVDb2RlUmVxdWVzdCA9IHtcbiAgZGF0YTogeyBjb2RlOiBzdHJpbmc7IGxhbmd1YWdlOiBzdHJpbmc7IGZpbGVuYW1lOiBzdHJpbmc7IGlkOiBzdHJpbmcgfTtcbn07XG5jb25zdCB2YWxpZGF0ZUNvZGUgPSAocmVxdWVzdDogVmFsaWRhdGVDb2RlUmVxdWVzdCkgPT5cbiAgbmV3IFByb21pc2UoYXN5bmMgKHJlc29sdmUpID0+IHtcbiAgICBjb25zdCBmaW5nZXJwcmludCA9IGF3YWl0IGdlbmVyYXRlRmluZ2VycHJpbnQoKTtcbiAgICBjb25zdCBjb2RlID0gcmVxdWVzdC5kYXRhLmNvZGU7XG4gICAgY29uc3QgbGFuZ3VhZ2UgPSByZXF1ZXN0LmRhdGEubGFuZ3VhZ2U7XG4gICAgY29uc3QgZmlsZW5hbWUgPSByZXF1ZXN0LmRhdGEuZmlsZW5hbWU7XG5cbiAgICBjb25zdCBjb2RlRWxlbWVudElkID0gcmVxdWVzdC5kYXRhLmlkO1xuICAgIGNvbnN0IGV4ZWN1dGlvbklkID0gdXVpZHY0KCk7XG5cbiAgICBydW5uaW5nVmFsaWRhdGlvbnNDYWNoZVtjb2RlRWxlbWVudElkXSA9IGV4ZWN1dGlvbklkO1xuXG4gICAgY29uc3Qgc2hvdWxkRmV0Y2ggPSBhd2FpdCBnZXRTaG91bGRGZXRjaChleGVjdXRpb25JZCwgY29kZUVsZW1lbnRJZCk7XG5cbiAgICBjb25zdCBjcmVhdGVBbmFseXNpc1Jlc3VsdCA9IHNob3VsZEZldGNoXG4gICAgICA/IGF3YWl0IGNsaWVudFxuICAgICAgICAgIC5tdXRhdGlvbihcbiAgICAgICAgICAgIGNyZWF0ZUZpbGVBbmFseXNpc011dGF0aW9uKGNvZGUsIGZpbmdlcnByaW50LCBsYW5ndWFnZSwgZmlsZW5hbWUpXG4gICAgICAgICAgKVxuICAgICAgICAgIC50b1Byb21pc2UoKVxuICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICBjb25zdCBlcnJvcnMgPSBjcmVhdGVBbmFseXNpc1Jlc3VsdD8uZGF0YS5lcnJvcnM7XG4gICAgaWYgKGVycm9ycyAmJiBlcnJvcnMubGVuZ3RoKSB7XG4gICAgICByZXNvbHZlKHsgZXJyb3JzIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIEl0IHdvbid0IHJ1biB1bmxlc3MgaXQncyB0aGUgbGF0ZXN0IHR5cGVkIGNvZGVcbiAgICBpZiAoY3JlYXRlQW5hbHlzaXNSZXN1bHQpIHtcbiAgICAgIGNvbnN0IGFuYWx5c2lzSWQgPSBjcmVhdGVBbmFseXNpc1Jlc3VsdC5kYXRhLmNyZWF0ZUZpbGVBbmFseXNpcztcblxuICAgICAgY29uc3QgaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGdldEFuYWx5c2lzUmVzdWx0ID0gYXdhaXQgY2xpZW50XG4gICAgICAgICAgLnF1ZXJ5KGdldEZpbGVBbmFseXNpc1F1ZXJ5KGZpbmdlcnByaW50LCBhbmFseXNpc0lkKSlcbiAgICAgICAgICAudG9Qcm9taXNlKCk7XG5cbiAgICAgICAgY29uc3QgZXJyb3JzID0gZ2V0QW5hbHlzaXNSZXN1bHQuZGF0YS5lcnJvcnM7XG4gICAgICAgIGlmIChlcnJvcnMpIHtcbiAgICAgICAgICByZXNvbHZlKHsgZXJyb3JzIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGdldEFuYWx5c2lzUmVzdWx0LmRhdGE/LmdldEZpbGVBbmFseXNpcz8uc3RhdHVzID09PSBcIkRvbmVcIikge1xuICAgICAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpO1xuICAgICAgICAgIGNvbnN0IGdyb3VwZWRWaW9sYXRpb25zID0gZ3JvdXBCeShcbiAgICAgICAgICAgIGdldEFuYWx5c2lzUmVzdWx0LmRhdGEuZ2V0RmlsZUFuYWx5c2lzLnZpb2xhdGlvbnMsXG4gICAgICAgICAgICBcImxpbmVcIlxuICAgICAgICAgICk7XG4gICAgICAgICAgY29uc3QgbWFwcGVkVmlvbGF0aW9ucyA9IE9iamVjdC5rZXlzKGdyb3VwZWRWaW9sYXRpb25zKS5tYXAoKGtleSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgbGluZToga2V5LFxuICAgICAgICAgICAgICBncm91cDogZ3JvdXBlZFZpb2xhdGlvbnNba2V5XSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmVzb2x2ZSh7IHZpb2xhdGlvbnM6IG1hcHBlZFZpb2xhdGlvbnMgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXNvbHZlKHt2aW9sYXRpb25zOiBbXX0pXG4gICAgICB9LCAyMDAwKTtcbiAgICB9XG4gIH0pO1xuXG5jaHJvbWUucnVudGltZS5vbk1lc3NhZ2UuYWRkTGlzdGVuZXIoZnVuY3Rpb24gKHJlcXVlc3QsIHNlbmRlciwgc2VuZFJlc3BvbnNlKSB7XG4gIGlmIChyZXF1ZXN0LmNvbnRlbnRTY3JpcHRRdWVyeSA9PSBcInZhbGlkYXRlQ29kZVwiKSB7XG4gICAgdmFsaWRhdGVDb2RlKHJlcXVlc3QpLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgc2VuZFJlc3BvbnNlKHJlc3VsdCk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn0pO1xuXG4vLyBUbyBsb2FkIGNvbnRlbnQtc2NyaXB0IGFnYWluIHdoZW4gdXJsIGNoYW5nZXNcbmNocm9tZS50YWJzLm9uVXBkYXRlZC5hZGRMaXN0ZW5lcihmdW5jdGlvbiAodGFiSWQsIGNoYW5nZUluZm8sIHRhYikge1xuICBpZiAoY2hhbmdlSW5mby51cmwgfHwgY2hhbmdlSW5mby5zdGF0dXMgPT09IFwiY29tcGxldGVcIikge1xuICAgIGNocm9tZS50YWJzLnNlbmRNZXNzYWdlKFxuICAgICAgdGFiSWQsXG4gICAgICB7IGFjdGlvbjogXCJ1cGRhdGVDb250YWluZXJcIiB9LFxuICAgICAgZnVuY3Rpb24gKHJlc3BvbnNlKSB7fVxuICAgICk7XG4gIH1cbn0pO1xuIiwiLypcbiAqIEJyb3dzZXItY29tcGF0aWJsZSBKYXZhU2NyaXB0IE1ENVxuICpcbiAqIE1vZGlmaWNhdGlvbiBvZiBKYXZhU2NyaXB0IE1ENVxuICogaHR0cHM6Ly9naXRodWIuY29tL2JsdWVpbXAvSmF2YVNjcmlwdC1NRDVcbiAqXG4gKiBDb3B5cmlnaHQgMjAxMSwgU2ViYXN0aWFuIFRzY2hhblxuICogaHR0cHM6Ly9ibHVlaW1wLm5ldFxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZTpcbiAqIGh0dHBzOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvTUlUXG4gKlxuICogQmFzZWQgb25cbiAqIEEgSmF2YVNjcmlwdCBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgUlNBIERhdGEgU2VjdXJpdHksIEluYy4gTUQ1IE1lc3NhZ2VcbiAqIERpZ2VzdCBBbGdvcml0aG0sIGFzIGRlZmluZWQgaW4gUkZDIDEzMjEuXG4gKiBWZXJzaW9uIDIuMiBDb3B5cmlnaHQgKEMpIFBhdWwgSm9obnN0b24gMTk5OSAtIDIwMDlcbiAqIE90aGVyIGNvbnRyaWJ1dG9yczogR3JlZyBIb2x0LCBBbmRyZXcgS2VwZXJ0LCBZZG5hciwgTG9zdGluZXRcbiAqIERpc3RyaWJ1dGVkIHVuZGVyIHRoZSBCU0QgTGljZW5zZVxuICogU2VlIGh0dHA6Ly9wYWpob21lLm9yZy51ay9jcnlwdC9tZDUgZm9yIG1vcmUgaW5mby5cbiAqL1xuZnVuY3Rpb24gbWQ1KGJ5dGVzKSB7XG4gIGlmICh0eXBlb2YgYnl0ZXMgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIG1zZyA9IHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChieXRlcykpOyAvLyBVVEY4IGVzY2FwZVxuXG4gICAgYnl0ZXMgPSBuZXcgVWludDhBcnJheShtc2cubGVuZ3RoKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbXNnLmxlbmd0aDsgKytpKSB7XG4gICAgICBieXRlc1tpXSA9IG1zZy5jaGFyQ29kZUF0KGkpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtZDVUb0hleEVuY29kZWRBcnJheSh3b3Jkc1RvTWQ1KGJ5dGVzVG9Xb3JkcyhieXRlcyksIGJ5dGVzLmxlbmd0aCAqIDgpKTtcbn1cbi8qXG4gKiBDb252ZXJ0IGFuIGFycmF5IG9mIGxpdHRsZS1lbmRpYW4gd29yZHMgdG8gYW4gYXJyYXkgb2YgYnl0ZXNcbiAqL1xuXG5cbmZ1bmN0aW9uIG1kNVRvSGV4RW5jb2RlZEFycmF5KGlucHV0KSB7XG4gIHZhciBvdXRwdXQgPSBbXTtcbiAgdmFyIGxlbmd0aDMyID0gaW5wdXQubGVuZ3RoICogMzI7XG4gIHZhciBoZXhUYWIgPSAnMDEyMzQ1Njc4OWFiY2RlZic7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGgzMjsgaSArPSA4KSB7XG4gICAgdmFyIHggPSBpbnB1dFtpID4+IDVdID4+PiBpICUgMzIgJiAweGZmO1xuICAgIHZhciBoZXggPSBwYXJzZUludChoZXhUYWIuY2hhckF0KHggPj4+IDQgJiAweDBmKSArIGhleFRhYi5jaGFyQXQoeCAmIDB4MGYpLCAxNik7XG4gICAgb3V0cHV0LnB1c2goaGV4KTtcbiAgfVxuXG4gIHJldHVybiBvdXRwdXQ7XG59XG4vKipcbiAqIENhbGN1bGF0ZSBvdXRwdXQgbGVuZ3RoIHdpdGggcGFkZGluZyBhbmQgYml0IGxlbmd0aFxuICovXG5cblxuZnVuY3Rpb24gZ2V0T3V0cHV0TGVuZ3RoKGlucHV0TGVuZ3RoOCkge1xuICByZXR1cm4gKGlucHV0TGVuZ3RoOCArIDY0ID4+PiA5IDw8IDQpICsgMTQgKyAxO1xufVxuLypcbiAqIENhbGN1bGF0ZSB0aGUgTUQ1IG9mIGFuIGFycmF5IG9mIGxpdHRsZS1lbmRpYW4gd29yZHMsIGFuZCBhIGJpdCBsZW5ndGguXG4gKi9cblxuXG5mdW5jdGlvbiB3b3Jkc1RvTWQ1KHgsIGxlbikge1xuICAvKiBhcHBlbmQgcGFkZGluZyAqL1xuICB4W2xlbiA+PiA1XSB8PSAweDgwIDw8IGxlbiAlIDMyO1xuICB4W2dldE91dHB1dExlbmd0aChsZW4pIC0gMV0gPSBsZW47XG4gIHZhciBhID0gMTczMjU4NDE5MztcbiAgdmFyIGIgPSAtMjcxNzMzODc5O1xuICB2YXIgYyA9IC0xNzMyNTg0MTk0O1xuICB2YXIgZCA9IDI3MTczMzg3ODtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHgubGVuZ3RoOyBpICs9IDE2KSB7XG4gICAgdmFyIG9sZGEgPSBhO1xuICAgIHZhciBvbGRiID0gYjtcbiAgICB2YXIgb2xkYyA9IGM7XG4gICAgdmFyIG9sZGQgPSBkO1xuICAgIGEgPSBtZDVmZihhLCBiLCBjLCBkLCB4W2ldLCA3LCAtNjgwODc2OTM2KTtcbiAgICBkID0gbWQ1ZmYoZCwgYSwgYiwgYywgeFtpICsgMV0sIDEyLCAtMzg5NTY0NTg2KTtcbiAgICBjID0gbWQ1ZmYoYywgZCwgYSwgYiwgeFtpICsgMl0sIDE3LCA2MDYxMDU4MTkpO1xuICAgIGIgPSBtZDVmZihiLCBjLCBkLCBhLCB4W2kgKyAzXSwgMjIsIC0xMDQ0NTI1MzMwKTtcbiAgICBhID0gbWQ1ZmYoYSwgYiwgYywgZCwgeFtpICsgNF0sIDcsIC0xNzY0MTg4OTcpO1xuICAgIGQgPSBtZDVmZihkLCBhLCBiLCBjLCB4W2kgKyA1XSwgMTIsIDEyMDAwODA0MjYpO1xuICAgIGMgPSBtZDVmZihjLCBkLCBhLCBiLCB4W2kgKyA2XSwgMTcsIC0xNDczMjMxMzQxKTtcbiAgICBiID0gbWQ1ZmYoYiwgYywgZCwgYSwgeFtpICsgN10sIDIyLCAtNDU3MDU5ODMpO1xuICAgIGEgPSBtZDVmZihhLCBiLCBjLCBkLCB4W2kgKyA4XSwgNywgMTc3MDAzNTQxNik7XG4gICAgZCA9IG1kNWZmKGQsIGEsIGIsIGMsIHhbaSArIDldLCAxMiwgLTE5NTg0MTQ0MTcpO1xuICAgIGMgPSBtZDVmZihjLCBkLCBhLCBiLCB4W2kgKyAxMF0sIDE3LCAtNDIwNjMpO1xuICAgIGIgPSBtZDVmZihiLCBjLCBkLCBhLCB4W2kgKyAxMV0sIDIyLCAtMTk5MDQwNDE2Mik7XG4gICAgYSA9IG1kNWZmKGEsIGIsIGMsIGQsIHhbaSArIDEyXSwgNywgMTgwNDYwMzY4Mik7XG4gICAgZCA9IG1kNWZmKGQsIGEsIGIsIGMsIHhbaSArIDEzXSwgMTIsIC00MDM0MTEwMSk7XG4gICAgYyA9IG1kNWZmKGMsIGQsIGEsIGIsIHhbaSArIDE0XSwgMTcsIC0xNTAyMDAyMjkwKTtcbiAgICBiID0gbWQ1ZmYoYiwgYywgZCwgYSwgeFtpICsgMTVdLCAyMiwgMTIzNjUzNTMyOSk7XG4gICAgYSA9IG1kNWdnKGEsIGIsIGMsIGQsIHhbaSArIDFdLCA1LCAtMTY1Nzk2NTEwKTtcbiAgICBkID0gbWQ1Z2coZCwgYSwgYiwgYywgeFtpICsgNl0sIDksIC0xMDY5NTAxNjMyKTtcbiAgICBjID0gbWQ1Z2coYywgZCwgYSwgYiwgeFtpICsgMTFdLCAxNCwgNjQzNzE3NzEzKTtcbiAgICBiID0gbWQ1Z2coYiwgYywgZCwgYSwgeFtpXSwgMjAsIC0zNzM4OTczMDIpO1xuICAgIGEgPSBtZDVnZyhhLCBiLCBjLCBkLCB4W2kgKyA1XSwgNSwgLTcwMTU1ODY5MSk7XG4gICAgZCA9IG1kNWdnKGQsIGEsIGIsIGMsIHhbaSArIDEwXSwgOSwgMzgwMTYwODMpO1xuICAgIGMgPSBtZDVnZyhjLCBkLCBhLCBiLCB4W2kgKyAxNV0sIDE0LCAtNjYwNDc4MzM1KTtcbiAgICBiID0gbWQ1Z2coYiwgYywgZCwgYSwgeFtpICsgNF0sIDIwLCAtNDA1NTM3ODQ4KTtcbiAgICBhID0gbWQ1Z2coYSwgYiwgYywgZCwgeFtpICsgOV0sIDUsIDU2ODQ0NjQzOCk7XG4gICAgZCA9IG1kNWdnKGQsIGEsIGIsIGMsIHhbaSArIDE0XSwgOSwgLTEwMTk4MDM2OTApO1xuICAgIGMgPSBtZDVnZyhjLCBkLCBhLCBiLCB4W2kgKyAzXSwgMTQsIC0xODczNjM5NjEpO1xuICAgIGIgPSBtZDVnZyhiLCBjLCBkLCBhLCB4W2kgKyA4XSwgMjAsIDExNjM1MzE1MDEpO1xuICAgIGEgPSBtZDVnZyhhLCBiLCBjLCBkLCB4W2kgKyAxM10sIDUsIC0xNDQ0NjgxNDY3KTtcbiAgICBkID0gbWQ1Z2coZCwgYSwgYiwgYywgeFtpICsgMl0sIDksIC01MTQwMzc4NCk7XG4gICAgYyA9IG1kNWdnKGMsIGQsIGEsIGIsIHhbaSArIDddLCAxNCwgMTczNTMyODQ3Myk7XG4gICAgYiA9IG1kNWdnKGIsIGMsIGQsIGEsIHhbaSArIDEyXSwgMjAsIC0xOTI2NjA3NzM0KTtcbiAgICBhID0gbWQ1aGgoYSwgYiwgYywgZCwgeFtpICsgNV0sIDQsIC0zNzg1NTgpO1xuICAgIGQgPSBtZDVoaChkLCBhLCBiLCBjLCB4W2kgKyA4XSwgMTEsIC0yMDIyNTc0NDYzKTtcbiAgICBjID0gbWQ1aGgoYywgZCwgYSwgYiwgeFtpICsgMTFdLCAxNiwgMTgzOTAzMDU2Mik7XG4gICAgYiA9IG1kNWhoKGIsIGMsIGQsIGEsIHhbaSArIDE0XSwgMjMsIC0zNTMwOTU1Nik7XG4gICAgYSA9IG1kNWhoKGEsIGIsIGMsIGQsIHhbaSArIDFdLCA0LCAtMTUzMDk5MjA2MCk7XG4gICAgZCA9IG1kNWhoKGQsIGEsIGIsIGMsIHhbaSArIDRdLCAxMSwgMTI3Mjg5MzM1Myk7XG4gICAgYyA9IG1kNWhoKGMsIGQsIGEsIGIsIHhbaSArIDddLCAxNiwgLTE1NTQ5NzYzMik7XG4gICAgYiA9IG1kNWhoKGIsIGMsIGQsIGEsIHhbaSArIDEwXSwgMjMsIC0xMDk0NzMwNjQwKTtcbiAgICBhID0gbWQ1aGgoYSwgYiwgYywgZCwgeFtpICsgMTNdLCA0LCA2ODEyNzkxNzQpO1xuICAgIGQgPSBtZDVoaChkLCBhLCBiLCBjLCB4W2ldLCAxMSwgLTM1ODUzNzIyMik7XG4gICAgYyA9IG1kNWhoKGMsIGQsIGEsIGIsIHhbaSArIDNdLCAxNiwgLTcyMjUyMTk3OSk7XG4gICAgYiA9IG1kNWhoKGIsIGMsIGQsIGEsIHhbaSArIDZdLCAyMywgNzYwMjkxODkpO1xuICAgIGEgPSBtZDVoaChhLCBiLCBjLCBkLCB4W2kgKyA5XSwgNCwgLTY0MDM2NDQ4Nyk7XG4gICAgZCA9IG1kNWhoKGQsIGEsIGIsIGMsIHhbaSArIDEyXSwgMTEsIC00MjE4MTU4MzUpO1xuICAgIGMgPSBtZDVoaChjLCBkLCBhLCBiLCB4W2kgKyAxNV0sIDE2LCA1MzA3NDI1MjApO1xuICAgIGIgPSBtZDVoaChiLCBjLCBkLCBhLCB4W2kgKyAyXSwgMjMsIC05OTUzMzg2NTEpO1xuICAgIGEgPSBtZDVpaShhLCBiLCBjLCBkLCB4W2ldLCA2LCAtMTk4NjMwODQ0KTtcbiAgICBkID0gbWQ1aWkoZCwgYSwgYiwgYywgeFtpICsgN10sIDEwLCAxMTI2ODkxNDE1KTtcbiAgICBjID0gbWQ1aWkoYywgZCwgYSwgYiwgeFtpICsgMTRdLCAxNSwgLTE0MTYzNTQ5MDUpO1xuICAgIGIgPSBtZDVpaShiLCBjLCBkLCBhLCB4W2kgKyA1XSwgMjEsIC01NzQzNDA1NSk7XG4gICAgYSA9IG1kNWlpKGEsIGIsIGMsIGQsIHhbaSArIDEyXSwgNiwgMTcwMDQ4NTU3MSk7XG4gICAgZCA9IG1kNWlpKGQsIGEsIGIsIGMsIHhbaSArIDNdLCAxMCwgLTE4OTQ5ODY2MDYpO1xuICAgIGMgPSBtZDVpaShjLCBkLCBhLCBiLCB4W2kgKyAxMF0sIDE1LCAtMTA1MTUyMyk7XG4gICAgYiA9IG1kNWlpKGIsIGMsIGQsIGEsIHhbaSArIDFdLCAyMSwgLTIwNTQ5MjI3OTkpO1xuICAgIGEgPSBtZDVpaShhLCBiLCBjLCBkLCB4W2kgKyA4XSwgNiwgMTg3MzMxMzM1OSk7XG4gICAgZCA9IG1kNWlpKGQsIGEsIGIsIGMsIHhbaSArIDE1XSwgMTAsIC0zMDYxMTc0NCk7XG4gICAgYyA9IG1kNWlpKGMsIGQsIGEsIGIsIHhbaSArIDZdLCAxNSwgLTE1NjAxOTgzODApO1xuICAgIGIgPSBtZDVpaShiLCBjLCBkLCBhLCB4W2kgKyAxM10sIDIxLCAxMzA5MTUxNjQ5KTtcbiAgICBhID0gbWQ1aWkoYSwgYiwgYywgZCwgeFtpICsgNF0sIDYsIC0xNDU1MjMwNzApO1xuICAgIGQgPSBtZDVpaShkLCBhLCBiLCBjLCB4W2kgKyAxMV0sIDEwLCAtMTEyMDIxMDM3OSk7XG4gICAgYyA9IG1kNWlpKGMsIGQsIGEsIGIsIHhbaSArIDJdLCAxNSwgNzE4Nzg3MjU5KTtcbiAgICBiID0gbWQ1aWkoYiwgYywgZCwgYSwgeFtpICsgOV0sIDIxLCAtMzQzNDg1NTUxKTtcbiAgICBhID0gc2FmZUFkZChhLCBvbGRhKTtcbiAgICBiID0gc2FmZUFkZChiLCBvbGRiKTtcbiAgICBjID0gc2FmZUFkZChjLCBvbGRjKTtcbiAgICBkID0gc2FmZUFkZChkLCBvbGRkKTtcbiAgfVxuXG4gIHJldHVybiBbYSwgYiwgYywgZF07XG59XG4vKlxuICogQ29udmVydCBhbiBhcnJheSBieXRlcyB0byBhbiBhcnJheSBvZiBsaXR0bGUtZW5kaWFuIHdvcmRzXG4gKiBDaGFyYWN0ZXJzID4yNTUgaGF2ZSB0aGVpciBoaWdoLWJ5dGUgc2lsZW50bHkgaWdub3JlZC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGJ5dGVzVG9Xb3JkcyhpbnB1dCkge1xuICBpZiAoaW5wdXQubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgdmFyIGxlbmd0aDggPSBpbnB1dC5sZW5ndGggKiA4O1xuICB2YXIgb3V0cHV0ID0gbmV3IFVpbnQzMkFycmF5KGdldE91dHB1dExlbmd0aChsZW5ndGg4KSk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg4OyBpICs9IDgpIHtcbiAgICBvdXRwdXRbaSA+PiA1XSB8PSAoaW5wdXRbaSAvIDhdICYgMHhmZikgPDwgaSAlIDMyO1xuICB9XG5cbiAgcmV0dXJuIG91dHB1dDtcbn1cbi8qXG4gKiBBZGQgaW50ZWdlcnMsIHdyYXBwaW5nIGF0IDJeMzIuIFRoaXMgdXNlcyAxNi1iaXQgb3BlcmF0aW9ucyBpbnRlcm5hbGx5XG4gKiB0byB3b3JrIGFyb3VuZCBidWdzIGluIHNvbWUgSlMgaW50ZXJwcmV0ZXJzLlxuICovXG5cblxuZnVuY3Rpb24gc2FmZUFkZCh4LCB5KSB7XG4gIHZhciBsc3cgPSAoeCAmIDB4ZmZmZikgKyAoeSAmIDB4ZmZmZik7XG4gIHZhciBtc3cgPSAoeCA+PiAxNikgKyAoeSA+PiAxNikgKyAobHN3ID4+IDE2KTtcbiAgcmV0dXJuIG1zdyA8PCAxNiB8IGxzdyAmIDB4ZmZmZjtcbn1cbi8qXG4gKiBCaXR3aXNlIHJvdGF0ZSBhIDMyLWJpdCBudW1iZXIgdG8gdGhlIGxlZnQuXG4gKi9cblxuXG5mdW5jdGlvbiBiaXRSb3RhdGVMZWZ0KG51bSwgY250KSB7XG4gIHJldHVybiBudW0gPDwgY250IHwgbnVtID4+PiAzMiAtIGNudDtcbn1cbi8qXG4gKiBUaGVzZSBmdW5jdGlvbnMgaW1wbGVtZW50IHRoZSBmb3VyIGJhc2ljIG9wZXJhdGlvbnMgdGhlIGFsZ29yaXRobSB1c2VzLlxuICovXG5cblxuZnVuY3Rpb24gbWQ1Y21uKHEsIGEsIGIsIHgsIHMsIHQpIHtcbiAgcmV0dXJuIHNhZmVBZGQoYml0Um90YXRlTGVmdChzYWZlQWRkKHNhZmVBZGQoYSwgcSksIHNhZmVBZGQoeCwgdCkpLCBzKSwgYik7XG59XG5cbmZ1bmN0aW9uIG1kNWZmKGEsIGIsIGMsIGQsIHgsIHMsIHQpIHtcbiAgcmV0dXJuIG1kNWNtbihiICYgYyB8IH5iICYgZCwgYSwgYiwgeCwgcywgdCk7XG59XG5cbmZ1bmN0aW9uIG1kNWdnKGEsIGIsIGMsIGQsIHgsIHMsIHQpIHtcbiAgcmV0dXJuIG1kNWNtbihiICYgZCB8IGMgJiB+ZCwgYSwgYiwgeCwgcywgdCk7XG59XG5cbmZ1bmN0aW9uIG1kNWhoKGEsIGIsIGMsIGQsIHgsIHMsIHQpIHtcbiAgcmV0dXJuIG1kNWNtbihiIF4gYyBeIGQsIGEsIGIsIHgsIHMsIHQpO1xufVxuXG5mdW5jdGlvbiBtZDVpaShhLCBiLCBjLCBkLCB4LCBzLCB0KSB7XG4gIHJldHVybiBtZDVjbW4oYyBeIChiIHwgfmQpLCBhLCBiLCB4LCBzLCB0KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWQ1OyIsImV4cG9ydCBkZWZhdWx0ICcwMDAwMDAwMC0wMDAwLTAwMDAtMDAwMC0wMDAwMDAwMDAwMDAnOyIsImltcG9ydCB2YWxpZGF0ZSBmcm9tICcuL3ZhbGlkYXRlLmpzJztcblxuZnVuY3Rpb24gcGFyc2UodXVpZCkge1xuICBpZiAoIXZhbGlkYXRlKHV1aWQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKCdJbnZhbGlkIFVVSUQnKTtcbiAgfVxuXG4gIHZhciB2O1xuICB2YXIgYXJyID0gbmV3IFVpbnQ4QXJyYXkoMTYpOyAvLyBQYXJzZSAjIyMjIyMjIy0uLi4uLS4uLi4tLi4uLi0uLi4uLi4uLi4uLi5cblxuICBhcnJbMF0gPSAodiA9IHBhcnNlSW50KHV1aWQuc2xpY2UoMCwgOCksIDE2KSkgPj4+IDI0O1xuICBhcnJbMV0gPSB2ID4+PiAxNiAmIDB4ZmY7XG4gIGFyclsyXSA9IHYgPj4+IDggJiAweGZmO1xuICBhcnJbM10gPSB2ICYgMHhmZjsgLy8gUGFyc2UgLi4uLi4uLi4tIyMjIy0uLi4uLS4uLi4tLi4uLi4uLi4uLi4uXG5cbiAgYXJyWzRdID0gKHYgPSBwYXJzZUludCh1dWlkLnNsaWNlKDksIDEzKSwgMTYpKSA+Pj4gODtcbiAgYXJyWzVdID0gdiAmIDB4ZmY7IC8vIFBhcnNlIC4uLi4uLi4uLS4uLi4tIyMjIy0uLi4uLS4uLi4uLi4uLi4uLlxuXG4gIGFycls2XSA9ICh2ID0gcGFyc2VJbnQodXVpZC5zbGljZSgxNCwgMTgpLCAxNikpID4+PiA4O1xuICBhcnJbN10gPSB2ICYgMHhmZjsgLy8gUGFyc2UgLi4uLi4uLi4tLi4uLi0uLi4uLSMjIyMtLi4uLi4uLi4uLi4uXG5cbiAgYXJyWzhdID0gKHYgPSBwYXJzZUludCh1dWlkLnNsaWNlKDE5LCAyMyksIDE2KSkgPj4+IDg7XG4gIGFycls5XSA9IHYgJiAweGZmOyAvLyBQYXJzZSAuLi4uLi4uLi0uLi4uLS4uLi4tLi4uLi0jIyMjIyMjIyMjIyNcbiAgLy8gKFVzZSBcIi9cIiB0byBhdm9pZCAzMi1iaXQgdHJ1bmNhdGlvbiB3aGVuIGJpdC1zaGlmdGluZyBoaWdoLW9yZGVyIGJ5dGVzKVxuXG4gIGFyclsxMF0gPSAodiA9IHBhcnNlSW50KHV1aWQuc2xpY2UoMjQsIDM2KSwgMTYpKSAvIDB4MTAwMDAwMDAwMDAgJiAweGZmO1xuICBhcnJbMTFdID0gdiAvIDB4MTAwMDAwMDAwICYgMHhmZjtcbiAgYXJyWzEyXSA9IHYgPj4+IDI0ICYgMHhmZjtcbiAgYXJyWzEzXSA9IHYgPj4+IDE2ICYgMHhmZjtcbiAgYXJyWzE0XSA9IHYgPj4+IDggJiAweGZmO1xuICBhcnJbMTVdID0gdiAmIDB4ZmY7XG4gIHJldHVybiBhcnI7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHBhcnNlOyIsImV4cG9ydCBkZWZhdWx0IC9eKD86WzAtOWEtZl17OH0tWzAtOWEtZl17NH0tWzEtNV1bMC05YS1mXXszfS1bODlhYl1bMC05YS1mXXszfS1bMC05YS1mXXsxMn18MDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwKSQvaTsiLCIvLyBVbmlxdWUgSUQgY3JlYXRpb24gcmVxdWlyZXMgYSBoaWdoIHF1YWxpdHkgcmFuZG9tICMgZ2VuZXJhdG9yLiBJbiB0aGUgYnJvd3NlciB3ZSB0aGVyZWZvcmVcbi8vIHJlcXVpcmUgdGhlIGNyeXB0byBBUEkgYW5kIGRvIG5vdCBzdXBwb3J0IGJ1aWx0LWluIGZhbGxiYWNrIHRvIGxvd2VyIHF1YWxpdHkgcmFuZG9tIG51bWJlclxuLy8gZ2VuZXJhdG9ycyAobGlrZSBNYXRoLnJhbmRvbSgpKS5cbnZhciBnZXRSYW5kb21WYWx1ZXM7XG52YXIgcm5kczggPSBuZXcgVWludDhBcnJheSgxNik7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBybmcoKSB7XG4gIC8vIGxhenkgbG9hZCBzbyB0aGF0IGVudmlyb25tZW50cyB0aGF0IG5lZWQgdG8gcG9seWZpbGwgaGF2ZSBhIGNoYW5jZSB0byBkbyBzb1xuICBpZiAoIWdldFJhbmRvbVZhbHVlcykge1xuICAgIC8vIGdldFJhbmRvbVZhbHVlcyBuZWVkcyB0byBiZSBpbnZva2VkIGluIGEgY29udGV4dCB3aGVyZSBcInRoaXNcIiBpcyBhIENyeXB0byBpbXBsZW1lbnRhdGlvbi4gQWxzbyxcbiAgICAvLyBmaW5kIHRoZSBjb21wbGV0ZSBpbXBsZW1lbnRhdGlvbiBvZiBjcnlwdG8gKG1zQ3J5cHRvKSBvbiBJRTExLlxuICAgIGdldFJhbmRvbVZhbHVlcyA9IHR5cGVvZiBjcnlwdG8gIT09ICd1bmRlZmluZWQnICYmIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMgJiYgY3J5cHRvLmdldFJhbmRvbVZhbHVlcy5iaW5kKGNyeXB0bykgfHwgdHlwZW9mIG1zQ3J5cHRvICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgbXNDcnlwdG8uZ2V0UmFuZG9tVmFsdWVzID09PSAnZnVuY3Rpb24nICYmIG1zQ3J5cHRvLmdldFJhbmRvbVZhbHVlcy5iaW5kKG1zQ3J5cHRvKTtcblxuICAgIGlmICghZ2V0UmFuZG9tVmFsdWVzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NyeXB0by5nZXRSYW5kb21WYWx1ZXMoKSBub3Qgc3VwcG9ydGVkLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3V1aWRqcy91dWlkI2dldHJhbmRvbXZhbHVlcy1ub3Qtc3VwcG9ydGVkJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGdldFJhbmRvbVZhbHVlcyhybmRzOCk7XG59IiwiLy8gQWRhcHRlZCBmcm9tIENocmlzIFZlbmVzcycgU0hBMSBjb2RlIGF0XG4vLyBodHRwOi8vd3d3Lm1vdmFibGUtdHlwZS5jby51ay9zY3JpcHRzL3NoYTEuaHRtbFxuZnVuY3Rpb24gZihzLCB4LCB5LCB6KSB7XG4gIHN3aXRjaCAocykge1xuICAgIGNhc2UgMDpcbiAgICAgIHJldHVybiB4ICYgeSBeIH54ICYgejtcblxuICAgIGNhc2UgMTpcbiAgICAgIHJldHVybiB4IF4geSBeIHo7XG5cbiAgICBjYXNlIDI6XG4gICAgICByZXR1cm4geCAmIHkgXiB4ICYgeiBeIHkgJiB6O1xuXG4gICAgY2FzZSAzOlxuICAgICAgcmV0dXJuIHggXiB5IF4gejtcbiAgfVxufVxuXG5mdW5jdGlvbiBST1RMKHgsIG4pIHtcbiAgcmV0dXJuIHggPDwgbiB8IHggPj4+IDMyIC0gbjtcbn1cblxuZnVuY3Rpb24gc2hhMShieXRlcykge1xuICB2YXIgSyA9IFsweDVhODI3OTk5LCAweDZlZDllYmExLCAweDhmMWJiY2RjLCAweGNhNjJjMWQ2XTtcbiAgdmFyIEggPSBbMHg2NzQ1MjMwMSwgMHhlZmNkYWI4OSwgMHg5OGJhZGNmZSwgMHgxMDMyNTQ3NiwgMHhjM2QyZTFmMF07XG5cbiAgaWYgKHR5cGVvZiBieXRlcyA9PT0gJ3N0cmluZycpIHtcbiAgICB2YXIgbXNnID0gdW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KGJ5dGVzKSk7IC8vIFVURjggZXNjYXBlXG5cbiAgICBieXRlcyA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtc2cubGVuZ3RoOyArK2kpIHtcbiAgICAgIGJ5dGVzLnB1c2gobXNnLmNoYXJDb2RlQXQoaSkpO1xuICAgIH1cbiAgfSBlbHNlIGlmICghQXJyYXkuaXNBcnJheShieXRlcykpIHtcbiAgICAvLyBDb252ZXJ0IEFycmF5LWxpa2UgdG8gQXJyYXlcbiAgICBieXRlcyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGJ5dGVzKTtcbiAgfVxuXG4gIGJ5dGVzLnB1c2goMHg4MCk7XG4gIHZhciBsID0gYnl0ZXMubGVuZ3RoIC8gNCArIDI7XG4gIHZhciBOID0gTWF0aC5jZWlsKGwgLyAxNik7XG4gIHZhciBNID0gbmV3IEFycmF5KE4pO1xuXG4gIGZvciAodmFyIF9pID0gMDsgX2kgPCBOOyArK19pKSB7XG4gICAgdmFyIGFyciA9IG5ldyBVaW50MzJBcnJheSgxNik7XG5cbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IDE2OyArK2opIHtcbiAgICAgIGFycltqXSA9IGJ5dGVzW19pICogNjQgKyBqICogNF0gPDwgMjQgfCBieXRlc1tfaSAqIDY0ICsgaiAqIDQgKyAxXSA8PCAxNiB8IGJ5dGVzW19pICogNjQgKyBqICogNCArIDJdIDw8IDggfCBieXRlc1tfaSAqIDY0ICsgaiAqIDQgKyAzXTtcbiAgICB9XG5cbiAgICBNW19pXSA9IGFycjtcbiAgfVxuXG4gIE1bTiAtIDFdWzE0XSA9IChieXRlcy5sZW5ndGggLSAxKSAqIDggLyBNYXRoLnBvdygyLCAzMik7XG4gIE1bTiAtIDFdWzE0XSA9IE1hdGguZmxvb3IoTVtOIC0gMV1bMTRdKTtcbiAgTVtOIC0gMV1bMTVdID0gKGJ5dGVzLmxlbmd0aCAtIDEpICogOCAmIDB4ZmZmZmZmZmY7XG5cbiAgZm9yICh2YXIgX2kyID0gMDsgX2kyIDwgTjsgKytfaTIpIHtcbiAgICB2YXIgVyA9IG5ldyBVaW50MzJBcnJheSg4MCk7XG5cbiAgICBmb3IgKHZhciB0ID0gMDsgdCA8IDE2OyArK3QpIHtcbiAgICAgIFdbdF0gPSBNW19pMl1bdF07XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX3QgPSAxNjsgX3QgPCA4MDsgKytfdCkge1xuICAgICAgV1tfdF0gPSBST1RMKFdbX3QgLSAzXSBeIFdbX3QgLSA4XSBeIFdbX3QgLSAxNF0gXiBXW190IC0gMTZdLCAxKTtcbiAgICB9XG5cbiAgICB2YXIgYSA9IEhbMF07XG4gICAgdmFyIGIgPSBIWzFdO1xuICAgIHZhciBjID0gSFsyXTtcbiAgICB2YXIgZCA9IEhbM107XG4gICAgdmFyIGUgPSBIWzRdO1xuXG4gICAgZm9yICh2YXIgX3QyID0gMDsgX3QyIDwgODA7ICsrX3QyKSB7XG4gICAgICB2YXIgcyA9IE1hdGguZmxvb3IoX3QyIC8gMjApO1xuICAgICAgdmFyIFQgPSBST1RMKGEsIDUpICsgZihzLCBiLCBjLCBkKSArIGUgKyBLW3NdICsgV1tfdDJdID4+PiAwO1xuICAgICAgZSA9IGQ7XG4gICAgICBkID0gYztcbiAgICAgIGMgPSBST1RMKGIsIDMwKSA+Pj4gMDtcbiAgICAgIGIgPSBhO1xuICAgICAgYSA9IFQ7XG4gICAgfVxuXG4gICAgSFswXSA9IEhbMF0gKyBhID4+PiAwO1xuICAgIEhbMV0gPSBIWzFdICsgYiA+Pj4gMDtcbiAgICBIWzJdID0gSFsyXSArIGMgPj4+IDA7XG4gICAgSFszXSA9IEhbM10gKyBkID4+PiAwO1xuICAgIEhbNF0gPSBIWzRdICsgZSA+Pj4gMDtcbiAgfVxuXG4gIHJldHVybiBbSFswXSA+PiAyNCAmIDB4ZmYsIEhbMF0gPj4gMTYgJiAweGZmLCBIWzBdID4+IDggJiAweGZmLCBIWzBdICYgMHhmZiwgSFsxXSA+PiAyNCAmIDB4ZmYsIEhbMV0gPj4gMTYgJiAweGZmLCBIWzFdID4+IDggJiAweGZmLCBIWzFdICYgMHhmZiwgSFsyXSA+PiAyNCAmIDB4ZmYsIEhbMl0gPj4gMTYgJiAweGZmLCBIWzJdID4+IDggJiAweGZmLCBIWzJdICYgMHhmZiwgSFszXSA+PiAyNCAmIDB4ZmYsIEhbM10gPj4gMTYgJiAweGZmLCBIWzNdID4+IDggJiAweGZmLCBIWzNdICYgMHhmZiwgSFs0XSA+PiAyNCAmIDB4ZmYsIEhbNF0gPj4gMTYgJiAweGZmLCBIWzRdID4+IDggJiAweGZmLCBIWzRdICYgMHhmZl07XG59XG5cbmV4cG9ydCBkZWZhdWx0IHNoYTE7IiwiaW1wb3J0IHZhbGlkYXRlIGZyb20gJy4vdmFsaWRhdGUuanMnO1xuLyoqXG4gKiBDb252ZXJ0IGFycmF5IG9mIDE2IGJ5dGUgdmFsdWVzIHRvIFVVSUQgc3RyaW5nIGZvcm1hdCBvZiB0aGUgZm9ybTpcbiAqIFhYWFhYWFhYLVhYWFgtWFhYWC1YWFhYLVhYWFhYWFhYWFhYWFxuICovXG5cbnZhciBieXRlVG9IZXggPSBbXTtcblxuZm9yICh2YXIgaSA9IDA7IGkgPCAyNTY7ICsraSkge1xuICBieXRlVG9IZXgucHVzaCgoaSArIDB4MTAwKS50b1N0cmluZygxNikuc3Vic3RyKDEpKTtcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5KGFycikge1xuICB2YXIgb2Zmc2V0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwO1xuICAvLyBOb3RlOiBCZSBjYXJlZnVsIGVkaXRpbmcgdGhpcyBjb2RlISAgSXQncyBiZWVuIHR1bmVkIGZvciBwZXJmb3JtYW5jZVxuICAvLyBhbmQgd29ya3MgaW4gd2F5cyB5b3UgbWF5IG5vdCBleHBlY3QuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vdXVpZGpzL3V1aWQvcHVsbC80MzRcbiAgdmFyIHV1aWQgPSAoYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAwXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDFdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgMl1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyAzXV0gKyAnLScgKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDRdXSArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgNV1dICsgJy0nICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA2XV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDddXSArICctJyArIGJ5dGVUb0hleFthcnJbb2Zmc2V0ICsgOF1dICsgYnl0ZVRvSGV4W2FycltvZmZzZXQgKyA5XV0gKyAnLScgKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDEwXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDExXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDEyXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDEzXV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDE0XV0gKyBieXRlVG9IZXhbYXJyW29mZnNldCArIDE1XV0pLnRvTG93ZXJDYXNlKCk7IC8vIENvbnNpc3RlbmN5IGNoZWNrIGZvciB2YWxpZCBVVUlELiAgSWYgdGhpcyB0aHJvd3MsIGl0J3MgbGlrZWx5IGR1ZSB0byBvbmVcbiAgLy8gb2YgdGhlIGZvbGxvd2luZzpcbiAgLy8gLSBPbmUgb3IgbW9yZSBpbnB1dCBhcnJheSB2YWx1ZXMgZG9uJ3QgbWFwIHRvIGEgaGV4IG9jdGV0IChsZWFkaW5nIHRvXG4gIC8vIFwidW5kZWZpbmVkXCIgaW4gdGhlIHV1aWQpXG4gIC8vIC0gSW52YWxpZCBpbnB1dCB2YWx1ZXMgZm9yIHRoZSBSRkMgYHZlcnNpb25gIG9yIGB2YXJpYW50YCBmaWVsZHNcblxuICBpZiAoIXZhbGlkYXRlKHV1aWQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKCdTdHJpbmdpZmllZCBVVUlEIGlzIGludmFsaWQnKTtcbiAgfVxuXG4gIHJldHVybiB1dWlkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzdHJpbmdpZnk7IiwiaW1wb3J0IHJuZyBmcm9tICcuL3JuZy5qcyc7XG5pbXBvcnQgc3RyaW5naWZ5IGZyb20gJy4vc3RyaW5naWZ5LmpzJzsgLy8gKipgdjEoKWAgLSBHZW5lcmF0ZSB0aW1lLWJhc2VkIFVVSUQqKlxuLy9cbi8vIEluc3BpcmVkIGJ5IGh0dHBzOi8vZ2l0aHViLmNvbS9MaW9zSy9VVUlELmpzXG4vLyBhbmQgaHR0cDovL2RvY3MucHl0aG9uLm9yZy9saWJyYXJ5L3V1aWQuaHRtbFxuXG52YXIgX25vZGVJZDtcblxudmFyIF9jbG9ja3NlcTsgLy8gUHJldmlvdXMgdXVpZCBjcmVhdGlvbiB0aW1lXG5cblxudmFyIF9sYXN0TVNlY3MgPSAwO1xudmFyIF9sYXN0TlNlY3MgPSAwOyAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3V1aWRqcy91dWlkIGZvciBBUEkgZGV0YWlsc1xuXG5mdW5jdGlvbiB2MShvcHRpb25zLCBidWYsIG9mZnNldCkge1xuICB2YXIgaSA9IGJ1ZiAmJiBvZmZzZXQgfHwgMDtcbiAgdmFyIGIgPSBidWYgfHwgbmV3IEFycmF5KDE2KTtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHZhciBub2RlID0gb3B0aW9ucy5ub2RlIHx8IF9ub2RlSWQ7XG4gIHZhciBjbG9ja3NlcSA9IG9wdGlvbnMuY2xvY2tzZXEgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuY2xvY2tzZXEgOiBfY2xvY2tzZXE7IC8vIG5vZGUgYW5kIGNsb2Nrc2VxIG5lZWQgdG8gYmUgaW5pdGlhbGl6ZWQgdG8gcmFuZG9tIHZhbHVlcyBpZiB0aGV5J3JlIG5vdFxuICAvLyBzcGVjaWZpZWQuICBXZSBkbyB0aGlzIGxhemlseSB0byBtaW5pbWl6ZSBpc3N1ZXMgcmVsYXRlZCB0byBpbnN1ZmZpY2llbnRcbiAgLy8gc3lzdGVtIGVudHJvcHkuICBTZWUgIzE4OVxuXG4gIGlmIChub2RlID09IG51bGwgfHwgY2xvY2tzZXEgPT0gbnVsbCkge1xuICAgIHZhciBzZWVkQnl0ZXMgPSBvcHRpb25zLnJhbmRvbSB8fCAob3B0aW9ucy5ybmcgfHwgcm5nKSgpO1xuXG4gICAgaWYgKG5vZGUgPT0gbnVsbCkge1xuICAgICAgLy8gUGVyIDQuNSwgY3JlYXRlIGFuZCA0OC1iaXQgbm9kZSBpZCwgKDQ3IHJhbmRvbSBiaXRzICsgbXVsdGljYXN0IGJpdCA9IDEpXG4gICAgICBub2RlID0gX25vZGVJZCA9IFtzZWVkQnl0ZXNbMF0gfCAweDAxLCBzZWVkQnl0ZXNbMV0sIHNlZWRCeXRlc1syXSwgc2VlZEJ5dGVzWzNdLCBzZWVkQnl0ZXNbNF0sIHNlZWRCeXRlc1s1XV07XG4gICAgfVxuXG4gICAgaWYgKGNsb2Nrc2VxID09IG51bGwpIHtcbiAgICAgIC8vIFBlciA0LjIuMiwgcmFuZG9taXplICgxNCBiaXQpIGNsb2Nrc2VxXG4gICAgICBjbG9ja3NlcSA9IF9jbG9ja3NlcSA9IChzZWVkQnl0ZXNbNl0gPDwgOCB8IHNlZWRCeXRlc1s3XSkgJiAweDNmZmY7XG4gICAgfVxuICB9IC8vIFVVSUQgdGltZXN0YW1wcyBhcmUgMTAwIG5hbm8tc2Vjb25kIHVuaXRzIHNpbmNlIHRoZSBHcmVnb3JpYW4gZXBvY2gsXG4gIC8vICgxNTgyLTEwLTE1IDAwOjAwKS4gIEpTTnVtYmVycyBhcmVuJ3QgcHJlY2lzZSBlbm91Z2ggZm9yIHRoaXMsIHNvXG4gIC8vIHRpbWUgaXMgaGFuZGxlZCBpbnRlcm5hbGx5IGFzICdtc2VjcycgKGludGVnZXIgbWlsbGlzZWNvbmRzKSBhbmQgJ25zZWNzJ1xuICAvLyAoMTAwLW5hbm9zZWNvbmRzIG9mZnNldCBmcm9tIG1zZWNzKSBzaW5jZSB1bml4IGVwb2NoLCAxOTcwLTAxLTAxIDAwOjAwLlxuXG5cbiAgdmFyIG1zZWNzID0gb3B0aW9ucy5tc2VjcyAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5tc2VjcyA6IERhdGUubm93KCk7IC8vIFBlciA0LjIuMS4yLCB1c2UgY291bnQgb2YgdXVpZCdzIGdlbmVyYXRlZCBkdXJpbmcgdGhlIGN1cnJlbnQgY2xvY2tcbiAgLy8gY3ljbGUgdG8gc2ltdWxhdGUgaGlnaGVyIHJlc29sdXRpb24gY2xvY2tcblxuICB2YXIgbnNlY3MgPSBvcHRpb25zLm5zZWNzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLm5zZWNzIDogX2xhc3ROU2VjcyArIDE7IC8vIFRpbWUgc2luY2UgbGFzdCB1dWlkIGNyZWF0aW9uIChpbiBtc2VjcylcblxuICB2YXIgZHQgPSBtc2VjcyAtIF9sYXN0TVNlY3MgKyAobnNlY3MgLSBfbGFzdE5TZWNzKSAvIDEwMDAwOyAvLyBQZXIgNC4yLjEuMiwgQnVtcCBjbG9ja3NlcSBvbiBjbG9jayByZWdyZXNzaW9uXG5cbiAgaWYgKGR0IDwgMCAmJiBvcHRpb25zLmNsb2Nrc2VxID09PSB1bmRlZmluZWQpIHtcbiAgICBjbG9ja3NlcSA9IGNsb2Nrc2VxICsgMSAmIDB4M2ZmZjtcbiAgfSAvLyBSZXNldCBuc2VjcyBpZiBjbG9jayByZWdyZXNzZXMgKG5ldyBjbG9ja3NlcSkgb3Igd2UndmUgbW92ZWQgb250byBhIG5ld1xuICAvLyB0aW1lIGludGVydmFsXG5cblxuICBpZiAoKGR0IDwgMCB8fCBtc2VjcyA+IF9sYXN0TVNlY3MpICYmIG9wdGlvbnMubnNlY3MgPT09IHVuZGVmaW5lZCkge1xuICAgIG5zZWNzID0gMDtcbiAgfSAvLyBQZXIgNC4yLjEuMiBUaHJvdyBlcnJvciBpZiB0b28gbWFueSB1dWlkcyBhcmUgcmVxdWVzdGVkXG5cblxuICBpZiAobnNlY3MgPj0gMTAwMDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJ1dWlkLnYxKCk6IENhbid0IGNyZWF0ZSBtb3JlIHRoYW4gMTBNIHV1aWRzL3NlY1wiKTtcbiAgfVxuXG4gIF9sYXN0TVNlY3MgPSBtc2VjcztcbiAgX2xhc3ROU2VjcyA9IG5zZWNzO1xuICBfY2xvY2tzZXEgPSBjbG9ja3NlcTsgLy8gUGVyIDQuMS40IC0gQ29udmVydCBmcm9tIHVuaXggZXBvY2ggdG8gR3JlZ29yaWFuIGVwb2NoXG5cbiAgbXNlY3MgKz0gMTIyMTkyOTI4MDAwMDA7IC8vIGB0aW1lX2xvd2BcblxuICB2YXIgdGwgPSAoKG1zZWNzICYgMHhmZmZmZmZmKSAqIDEwMDAwICsgbnNlY3MpICUgMHgxMDAwMDAwMDA7XG4gIGJbaSsrXSA9IHRsID4+PiAyNCAmIDB4ZmY7XG4gIGJbaSsrXSA9IHRsID4+PiAxNiAmIDB4ZmY7XG4gIGJbaSsrXSA9IHRsID4+PiA4ICYgMHhmZjtcbiAgYltpKytdID0gdGwgJiAweGZmOyAvLyBgdGltZV9taWRgXG5cbiAgdmFyIHRtaCA9IG1zZWNzIC8gMHgxMDAwMDAwMDAgKiAxMDAwMCAmIDB4ZmZmZmZmZjtcbiAgYltpKytdID0gdG1oID4+PiA4ICYgMHhmZjtcbiAgYltpKytdID0gdG1oICYgMHhmZjsgLy8gYHRpbWVfaGlnaF9hbmRfdmVyc2lvbmBcblxuICBiW2krK10gPSB0bWggPj4+IDI0ICYgMHhmIHwgMHgxMDsgLy8gaW5jbHVkZSB2ZXJzaW9uXG5cbiAgYltpKytdID0gdG1oID4+PiAxNiAmIDB4ZmY7IC8vIGBjbG9ja19zZXFfaGlfYW5kX3Jlc2VydmVkYCAoUGVyIDQuMi4yIC0gaW5jbHVkZSB2YXJpYW50KVxuXG4gIGJbaSsrXSA9IGNsb2Nrc2VxID4+PiA4IHwgMHg4MDsgLy8gYGNsb2NrX3NlcV9sb3dgXG5cbiAgYltpKytdID0gY2xvY2tzZXEgJiAweGZmOyAvLyBgbm9kZWBcblxuICBmb3IgKHZhciBuID0gMDsgbiA8IDY7ICsrbikge1xuICAgIGJbaSArIG5dID0gbm9kZVtuXTtcbiAgfVxuXG4gIHJldHVybiBidWYgfHwgc3RyaW5naWZ5KGIpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB2MTsiLCJpbXBvcnQgdjM1IGZyb20gJy4vdjM1LmpzJztcbmltcG9ydCBtZDUgZnJvbSAnLi9tZDUuanMnO1xudmFyIHYzID0gdjM1KCd2MycsIDB4MzAsIG1kNSk7XG5leHBvcnQgZGVmYXVsdCB2MzsiLCJpbXBvcnQgc3RyaW5naWZ5IGZyb20gJy4vc3RyaW5naWZ5LmpzJztcbmltcG9ydCBwYXJzZSBmcm9tICcuL3BhcnNlLmpzJztcblxuZnVuY3Rpb24gc3RyaW5nVG9CeXRlcyhzdHIpIHtcbiAgc3RyID0gdW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KHN0cikpOyAvLyBVVEY4IGVzY2FwZVxuXG4gIHZhciBieXRlcyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgYnl0ZXMucHVzaChzdHIuY2hhckNvZGVBdChpKSk7XG4gIH1cblxuICByZXR1cm4gYnl0ZXM7XG59XG5cbmV4cG9ydCB2YXIgRE5TID0gJzZiYTdiODEwLTlkYWQtMTFkMS04MGI0LTAwYzA0ZmQ0MzBjOCc7XG5leHBvcnQgdmFyIFVSTCA9ICc2YmE3YjgxMS05ZGFkLTExZDEtODBiNC0wMGMwNGZkNDMwYzgnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKG5hbWUsIHZlcnNpb24sIGhhc2hmdW5jKSB7XG4gIGZ1bmN0aW9uIGdlbmVyYXRlVVVJRCh2YWx1ZSwgbmFtZXNwYWNlLCBidWYsIG9mZnNldCkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICB2YWx1ZSA9IHN0cmluZ1RvQnl0ZXModmFsdWUpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgbmFtZXNwYWNlID09PSAnc3RyaW5nJykge1xuICAgICAgbmFtZXNwYWNlID0gcGFyc2UobmFtZXNwYWNlKTtcbiAgICB9XG5cbiAgICBpZiAobmFtZXNwYWNlLmxlbmd0aCAhPT0gMTYpIHtcbiAgICAgIHRocm93IFR5cGVFcnJvcignTmFtZXNwYWNlIG11c3QgYmUgYXJyYXktbGlrZSAoMTYgaXRlcmFibGUgaW50ZWdlciB2YWx1ZXMsIDAtMjU1KScpO1xuICAgIH0gLy8gQ29tcHV0ZSBoYXNoIG9mIG5hbWVzcGFjZSBhbmQgdmFsdWUsIFBlciA0LjNcbiAgICAvLyBGdXR1cmU6IFVzZSBzcHJlYWQgc3ludGF4IHdoZW4gc3VwcG9ydGVkIG9uIGFsbCBwbGF0Zm9ybXMsIGUuZy4gYGJ5dGVzID1cbiAgICAvLyBoYXNoZnVuYyhbLi4ubmFtZXNwYWNlLCAuLi4gdmFsdWVdKWBcblxuXG4gICAgdmFyIGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoMTYgKyB2YWx1ZS5sZW5ndGgpO1xuICAgIGJ5dGVzLnNldChuYW1lc3BhY2UpO1xuICAgIGJ5dGVzLnNldCh2YWx1ZSwgbmFtZXNwYWNlLmxlbmd0aCk7XG4gICAgYnl0ZXMgPSBoYXNoZnVuYyhieXRlcyk7XG4gICAgYnl0ZXNbNl0gPSBieXRlc1s2XSAmIDB4MGYgfCB2ZXJzaW9uO1xuICAgIGJ5dGVzWzhdID0gYnl0ZXNbOF0gJiAweDNmIHwgMHg4MDtcblxuICAgIGlmIChidWYpIHtcbiAgICAgIG9mZnNldCA9IG9mZnNldCB8fCAwO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDE2OyArK2kpIHtcbiAgICAgICAgYnVmW29mZnNldCArIGldID0gYnl0ZXNbaV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBidWY7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0cmluZ2lmeShieXRlcyk7XG4gIH0gLy8gRnVuY3Rpb24jbmFtZSBpcyBub3Qgc2V0dGFibGUgb24gc29tZSBwbGF0Zm9ybXMgKCMyNzApXG5cblxuICB0cnkge1xuICAgIGdlbmVyYXRlVVVJRC5uYW1lID0gbmFtZTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVtcHR5XG4gIH0gY2F0Y2ggKGVycikge30gLy8gRm9yIENvbW1vbkpTIGRlZmF1bHQgZXhwb3J0IHN1cHBvcnRcblxuXG4gIGdlbmVyYXRlVVVJRC5ETlMgPSBETlM7XG4gIGdlbmVyYXRlVVVJRC5VUkwgPSBVUkw7XG4gIHJldHVybiBnZW5lcmF0ZVVVSUQ7XG59IiwiaW1wb3J0IHJuZyBmcm9tICcuL3JuZy5qcyc7XG5pbXBvcnQgc3RyaW5naWZ5IGZyb20gJy4vc3RyaW5naWZ5LmpzJztcblxuZnVuY3Rpb24gdjQob3B0aW9ucywgYnVmLCBvZmZzZXQpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHZhciBybmRzID0gb3B0aW9ucy5yYW5kb20gfHwgKG9wdGlvbnMucm5nIHx8IHJuZykoKTsgLy8gUGVyIDQuNCwgc2V0IGJpdHMgZm9yIHZlcnNpb24gYW5kIGBjbG9ja19zZXFfaGlfYW5kX3Jlc2VydmVkYFxuXG4gIHJuZHNbNl0gPSBybmRzWzZdICYgMHgwZiB8IDB4NDA7XG4gIHJuZHNbOF0gPSBybmRzWzhdICYgMHgzZiB8IDB4ODA7IC8vIENvcHkgYnl0ZXMgdG8gYnVmZmVyLCBpZiBwcm92aWRlZFxuXG4gIGlmIChidWYpIHtcbiAgICBvZmZzZXQgPSBvZmZzZXQgfHwgMDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgMTY7ICsraSkge1xuICAgICAgYnVmW29mZnNldCArIGldID0gcm5kc1tpXTtcbiAgICB9XG5cbiAgICByZXR1cm4gYnVmO1xuICB9XG5cbiAgcmV0dXJuIHN0cmluZ2lmeShybmRzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdjQ7IiwiaW1wb3J0IHYzNSBmcm9tICcuL3YzNS5qcyc7XG5pbXBvcnQgc2hhMSBmcm9tICcuL3NoYTEuanMnO1xudmFyIHY1ID0gdjM1KCd2NScsIDB4NTAsIHNoYTEpO1xuZXhwb3J0IGRlZmF1bHQgdjU7IiwiaW1wb3J0IFJFR0VYIGZyb20gJy4vcmVnZXguanMnO1xuXG5mdW5jdGlvbiB2YWxpZGF0ZSh1dWlkKSB7XG4gIHJldHVybiB0eXBlb2YgdXVpZCA9PT0gJ3N0cmluZycgJiYgUkVHRVgudGVzdCh1dWlkKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdmFsaWRhdGU7IiwiaW1wb3J0IHZhbGlkYXRlIGZyb20gJy4vdmFsaWRhdGUuanMnO1xuXG5mdW5jdGlvbiB2ZXJzaW9uKHV1aWQpIHtcbiAgaWYgKCF2YWxpZGF0ZSh1dWlkKSkge1xuICAgIHRocm93IFR5cGVFcnJvcignSW52YWxpZCBVVUlEJyk7XG4gIH1cblxuICByZXR1cm4gcGFyc2VJbnQodXVpZC5zdWJzdHIoMTQsIDEpLCAxNik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHZlcnNpb247IiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBfXyhhLCBiKSB7XG4gIGIudGFnID0gYTtcbiAgcmV0dXJuIGI7XG59XG5cbmZ1bmN0aW9uIHRhbGtiYWNrUGxhY2Vob2xkZXIoYSkge31cblxuZnVuY3Rpb24gZnJvbUFycmF5KGEpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChiKSB7XG4gICAgdmFyIGMgPSBhLmxlbmd0aDtcbiAgICBsZXQgZSA9ICExLFxuICAgICAgZCA9ICExLFxuICAgICAgZiA9ICExLFxuICAgICAgZyA9IDA7XG4gICAgYihcbiAgICAgIF9fKDAsIFtcbiAgICAgICAgZnVuY3Rpb24gKGgpIHtcbiAgICAgICAgICBpZiAoaCkge1xuICAgICAgICAgICAgZSA9ICEwO1xuICAgICAgICAgIH0gZWxzZSBpZiAoZCkge1xuICAgICAgICAgICAgZiA9ICEwO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb3IgKGQgPSBmID0gITA7IGYgJiYgIWU7ICkge1xuICAgICAgICAgICAgICBnIDwgYyA/ICgoaCA9IGFbZ10pLCAoZyA9IChnICsgMSkgfCAwKSwgKGYgPSAhMSksIGIoX18oMSwgW2hdKSkpIDogKChlID0gITApLCBiKDApKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGQgPSAhMTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICBdKVxuICAgICk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIF9yZWYoKSB7fVxuXG5mdW5jdGlvbiBfcmVmNChhKSB7XG4gIGEoMCk7XG59XG5cbmZ1bmN0aW9uIGVtcHR5KGEpIHtcbiAgbGV0IGIgPSAhMTtcbiAgYShcbiAgICBfXygwLCBbXG4gICAgICBmdW5jdGlvbiAoYykge1xuICAgICAgICBjID8gKGIgPSAhMCkgOiBiIHx8IGEoMCk7XG4gICAgICB9LFxuICAgIF0pXG4gICk7XG59XG5cbmZ1bmN0aW9uIHNvbWUoYSkge1xuICBpZiAodm9pZCAwID09PSBhKSB7XG4gICAgcmV0dXJuICgoYSA9IFt1bmRlZmluZWRIZWFkZXIsIDBdKS50YWcgPSAyNTYpLCBhO1xuICB9XG4gIGlmIChudWxsID09PSBhIHx8IGFbMF0gIT09IHVuZGVmaW5lZEhlYWRlcikge1xuICAgIHJldHVybiBhO1xuICB9XG4gIChhID0gW3VuZGVmaW5lZEhlYWRlciwgKGFbMV0gKyAxKSB8IDBdKS50YWcgPSAyNTY7XG4gIHJldHVybiBhO1xufVxuXG5mdW5jdGlvbiB2YWxGcm9tT3B0aW9uKGEpIHtcbiAgaWYgKG51bGwgPT09IGEgfHwgYVswXSAhPT0gdW5kZWZpbmVkSGVhZGVyKSB7XG4gICAgcmV0dXJuIGE7XG4gIH1cbiAgaWYgKDAgIT09IChhID0gYVsxXSkpIHtcbiAgICByZXR1cm4gW3VuZGVmaW5lZEhlYWRlciwgKGEgLSAxKSB8IDBdO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNvbmNhdE1hcChhKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoYikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYykge1xuICAgICAgZnVuY3Rpb24gZShiKSB7XG4gICAgICAgICdudW1iZXInID09IHR5cGVvZiBiXG4gICAgICAgICAgPyBrICYmXG4gICAgICAgICAgICAoKGsgPSAhMSksXG4gICAgICAgICAgICB2b2lkIDAgIT09IChiID0gZC5zaGlmdCgpKVxuICAgICAgICAgICAgICA/ICgoYiA9IGEodmFsRnJvbU9wdGlvbihiKSkpLCAoayA9ICEwKSwgYihlKSlcbiAgICAgICAgICAgICAgOiBtXG4gICAgICAgICAgICAgID8gYygwKVxuICAgICAgICAgICAgICA6IGcgfHwgKChnID0gITApLCBmKDApKSlcbiAgICAgICAgICA6IGIudGFnXG4gICAgICAgICAgPyBrICYmIChjKGIpLCBsID8gKGwgPSAhMSkgOiBoKDApKVxuICAgICAgICAgIDogKChoID0gYiA9IGJbMF0pLCAobCA9ICExKSwgYigwKSk7XG4gICAgICB9XG4gICAgICBsZXQgZCA9IFtdLFxuICAgICAgICBmID0gdGFsa2JhY2tQbGFjZWhvbGRlcixcbiAgICAgICAgZyA9ICExLFxuICAgICAgICBoID0gdGFsa2JhY2tQbGFjZWhvbGRlcixcbiAgICAgICAgayA9ICExLFxuICAgICAgICBsID0gITEsXG4gICAgICAgIG0gPSAhMTtcbiAgICAgIGIoZnVuY3Rpb24gKGIpIHtcbiAgICAgICAgJ251bWJlcicgPT0gdHlwZW9mIGJcbiAgICAgICAgICA/IG0gfHxcbiAgICAgICAgICAgICgobSA9ICEwKSxcbiAgICAgICAgICAgICFrICYmXG4gICAgICAgICAgICAgIChmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAwID09PSBhLmxlbmd0aDtcbiAgICAgICAgICAgICAgfSkoZCkgJiZcbiAgICAgICAgICAgICAgYygwKSlcbiAgICAgICAgICA6IGIudGFnXG4gICAgICAgICAgPyBtIHx8ICgoYiA9IGJbMF0pLCAoZyA9ICExKSwgayA/IGQucHVzaChiKSA6ICgoYiA9IGEoYikpLCAoayA9ICEwKSwgYihlKSkpXG4gICAgICAgICAgOiAoZiA9IGJbMF0pO1xuICAgICAgfSk7XG4gICAgICBjKFxuICAgICAgICBfXygwLCBbXG4gICAgICAgICAgZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgIGlmIChhKSB7XG4gICAgICAgICAgICAgIGlmICgobSB8fCAoKG0gPSAhMCksIGYoMSkpLCBrKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiAoayA9ICExKSwgaCgxKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbSB8fCBnIHx8ICgoZyA9ICEwKSwgZigwKSksIGsgJiYgIWwgJiYgKChsID0gITApLCBoKDApKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICBdKVxuICAgICAgKTtcbiAgICB9O1xuICB9O1xufVxuXG5mdW5jdGlvbiBfcmVmMyhhKSB7XG4gIHJldHVybiBhO1xufVxuXG5mdW5jdGlvbiBfcmVmNCQxKGEpIHtcbiAgcmV0dXJuIGE7XG59XG5cbmZ1bmN0aW9uIF9yZWY3KGEpIHtcbiAgcmV0dXJuIGEoMCk7XG59XG5cbmZ1bmN0aW9uIG1lcmdlTWFwKGEpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChiKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChjKSB7XG4gICAgICBsZXQgZSA9IHRhbGtiYWNrUGxhY2Vob2xkZXIsXG4gICAgICAgIGQgPSAhMSxcbiAgICAgICAgZiA9IFtdLFxuICAgICAgICBnID0gITE7XG4gICAgICBiKGZ1bmN0aW9uIChiKSB7XG4gICAgICAgICdudW1iZXInID09IHR5cGVvZiBiXG4gICAgICAgICAgPyBnIHx8ICgoZyA9ICEwKSwgMCA9PT0gZi5sZW5ndGggJiYgYygwKSlcbiAgICAgICAgICA6IGIudGFnXG4gICAgICAgICAgPyBnIHx8XG4gICAgICAgICAgICAoKGQgPSAhMSksXG4gICAgICAgICAgICAoZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgICAgZnVuY3Rpb24gYihhKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGEgIT09IGs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdmFyIGggPSBmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgICAgICdudW1iZXInID09IHR5cGVvZiBhXG4gICAgICAgICAgICAgICAgICA/IDAgIT09IGYubGVuZ3RoICYmXG4gICAgICAgICAgICAgICAgICAgICgoZiA9IGYuZmlsdGVyKGIpKSxcbiAgICAgICAgICAgICAgICAgICAgKGEgPSAwID09PSBmLmxlbmd0aCksXG4gICAgICAgICAgICAgICAgICAgIGcgJiYgYSA/IGMoMCkgOiAhZCAmJiBhICYmICgoZCA9ICEwKSwgZSgwKSkpXG4gICAgICAgICAgICAgICAgICA6IGEudGFnXG4gICAgICAgICAgICAgICAgICA/IDAgIT09IGYubGVuZ3RoICYmIChjKF9fKDEsIFthWzBdXSkpLCBrKDApKVxuICAgICAgICAgICAgICAgICAgOiAoKGsgPSBhID0gYVswXSksIChmID0gZi5jb25jYXQoYSkpLCBhKDApKTtcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgbGV0IGsgPSB0YWxrYmFja1BsYWNlaG9sZGVyO1xuICAgICAgICAgICAgICAxID09PSBhLmxlbmd0aCA/IGEoaCkgOiBhLmJpbmQobnVsbCwgaCk7XG4gICAgICAgICAgICB9KShhKGJbMF0pKSxcbiAgICAgICAgICAgIGQgfHwgKChkID0gITApLCBlKDApKSlcbiAgICAgICAgICA6IChlID0gYlswXSk7XG4gICAgICB9KTtcbiAgICAgIGMoXG4gICAgICAgIF9fKDAsIFtcbiAgICAgICAgICBmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgYVxuICAgICAgICAgICAgICA/IChnIHx8ICgoZyA9ICEwKSwgZShhKSksXG4gICAgICAgICAgICAgICAgZi5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gYyhhKTtcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAoZiA9IFtdKSlcbiAgICAgICAgICAgICAgOiAoZCB8fCBnID8gKGQgPSAhMSkgOiAoKGQgPSAhMCksIGUoMCkpLCBmLmZvckVhY2goX3JlZjcpKTtcbiAgICAgICAgICB9LFxuICAgICAgICBdKVxuICAgICAgKTtcbiAgICB9O1xuICB9O1xufVxuXG5mdW5jdGlvbiBfcmVmOChhKSB7XG4gIHJldHVybiBhO1xufVxuXG5mdW5jdGlvbiBfcmVmOShhKSB7XG4gIHJldHVybiBhO1xufVxuXG5mdW5jdGlvbiBtZXJnZUFsbChhKSB7XG4gIHJldHVybiBtZXJnZU1hcChfcmVmOSkoYSk7XG59XG5cbmZ1bmN0aW9uIG9uUHVzaChhKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoYikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYykge1xuICAgICAgbGV0IGUgPSAhMTtcbiAgICAgIHJldHVybiBiKGZ1bmN0aW9uIChkKSB7XG4gICAgICAgIGlmICgnbnVtYmVyJyA9PSB0eXBlb2YgZCkge1xuICAgICAgICAgIGUgfHwgKChlID0gITApLCBjKGQpKTtcbiAgICAgICAgfSBlbHNlIGlmIChkLnRhZykge1xuICAgICAgICAgIGUgfHwgKGEoZFswXSksIGMoZCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBnID0gZFswXTtcbiAgICAgICAgICBjKFxuICAgICAgICAgICAgX18oMCwgW1xuICAgICAgICAgICAgICBmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgICAgIGlmICghZSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGEgJiYgKGUgPSAhMCksIGcoYSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSlcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuICB9O1xufVxuXG5mdW5jdGlvbiBfcmVmMTEoYSkge1xuICBhKDApO1xufVxuXG5mdW5jdGlvbiBzd2l0Y2hNYXAoYSkge1xuICByZXR1cm4gZnVuY3Rpb24gKGIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGMpIHtcbiAgICAgIGZ1bmN0aW9uIGUoYSkge1xuICAgICAgICBoICYmXG4gICAgICAgICAgKCdudW1iZXInID09IHR5cGVvZiBhXG4gICAgICAgICAgICA/ICgoaCA9ICExKSwgbCA/IGMoYSkgOiBmIHx8ICgoZiA9ICEwKSwgZCgwKSkpXG4gICAgICAgICAgICA6IGEudGFnXG4gICAgICAgICAgICA/IChjKGEpLCBrID8gKGsgPSAhMSkgOiBnKDApKVxuICAgICAgICAgICAgOiAoKGcgPSBhID0gYVswXSksIChrID0gITEpLCBhKDApKSk7XG4gICAgICB9XG4gICAgICBsZXQgZCA9IHRhbGtiYWNrUGxhY2Vob2xkZXIsXG4gICAgICAgIGYgPSAhMSxcbiAgICAgICAgZyA9IHRhbGtiYWNrUGxhY2Vob2xkZXIsXG4gICAgICAgIGggPSAhMSxcbiAgICAgICAgayA9ICExLFxuICAgICAgICBsID0gITE7XG4gICAgICBiKGZ1bmN0aW9uIChiKSB7XG4gICAgICAgICdudW1iZXInID09IHR5cGVvZiBiXG4gICAgICAgICAgPyBsIHx8ICgobCA9ICEwKSwgaCB8fCBjKDApKVxuICAgICAgICAgIDogYi50YWdcbiAgICAgICAgICA/IGwgfHxcbiAgICAgICAgICAgIChoICYmIChnKDEpLCAoZyA9IHRhbGtiYWNrUGxhY2Vob2xkZXIpKSxcbiAgICAgICAgICAgIGYgPyAoZiA9ICExKSA6ICgoZiA9ICEwKSwgZCgwKSksXG4gICAgICAgICAgICAoYiA9IGEoYlswXSkpLFxuICAgICAgICAgICAgKGggPSAhMCksXG4gICAgICAgICAgICBiKGUpKVxuICAgICAgICAgIDogKGQgPSBiWzBdKTtcbiAgICAgIH0pO1xuICAgICAgYyhcbiAgICAgICAgX18oMCwgW1xuICAgICAgICAgIGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgICBpZiAoYSkge1xuICAgICAgICAgICAgICBpZiAoKGwgfHwgKChsID0gITApLCBkKDEpKSwgaCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKGggPSAhMSksIGcoMSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGwgfHwgZiB8fCAoKGYgPSAhMCksIGQoMCkpLCBoICYmICFrICYmICgoayA9ICEwKSwgZygwKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgXSlcbiAgICAgICk7XG4gICAgfTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gX3JlZjE2KGEpIHtcbiAgcmV0dXJuIGE7XG59XG5cbmZ1bmN0aW9uIHRha2VMYXN0KGEpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChiKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChjKSB7XG4gICAgICBsZXQgZSA9IFtdLFxuICAgICAgICBkID0gdGFsa2JhY2tQbGFjZWhvbGRlcjtcbiAgICAgIHJldHVybiBiKGZ1bmN0aW9uIChiKSB7XG4gICAgICAgICdudW1iZXInID09IHR5cGVvZiBiXG4gICAgICAgICAgPyBmcm9tQXJyYXkoZSkoYylcbiAgICAgICAgICA6IGIudGFnXG4gICAgICAgICAgPyAoZS5sZW5ndGggPj0gYSAmJiAwIDwgYSAmJiBlLnNoaWZ0KCksIGUucHVzaChiWzBdKSwgZCgwKSlcbiAgICAgICAgICA6ICgoYiA9IGJbMF0pLCAwID49IGEgPyAoYigxKSwgZW1wdHkoYykpIDogKChkID0gYiksIGIoMCkpKTtcbiAgICAgIH0pO1xuICAgIH07XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN1YnNjcmliZShhKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoYikge1xuICAgIGxldCBjID0gdGFsa2JhY2tQbGFjZWhvbGRlcixcbiAgICAgIGUgPSAhMTtcbiAgICBiKGZ1bmN0aW9uIChiKSB7XG4gICAgICAnbnVtYmVyJyA9PSB0eXBlb2YgYiA/IChlID0gITApIDogYi50YWcgPyBlIHx8IChhKGJbMF0pLCBjKDApKSA6ICgoYyA9IGIgPSBiWzBdKSwgYigwKSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVuc3Vic2NyaWJlOiBmdW5jdGlvbiAoYSkge1xuICAgICAgICBpZiAoIWUpIHtcbiAgICAgICAgICByZXR1cm4gKGUgPSAhMCksIGMoMSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgfTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gX3JlZiQxKGEpIHt9XG5cbmZ1bmN0aW9uIF9yZWYkMihhKSB7fVxuXG5mdW5jdGlvbiBfcmVmMigpIHt9XG5cbmZ1bmN0aW9uIF9yZWYzJDEoKSB7fVxuXG5mdW5jdGlvbiBfcmVmMyQyKGEsIGIsIGMpIHtcbiAgYS5hZGRFdmVudExpc3RlbmVyKGIsIGMpO1xufVxuXG5mdW5jdGlvbiBfcmVmNCQyKGEsIGIsIGMpIHtcbiAgYS5yZW1vdmVFdmVudExpc3RlbmVyKGIsIGMpO1xufVxuXG52YXIgdW5kZWZpbmVkSGVhZGVyLFxuICBidWZmZXIkMSxcbiAgY29tYmluZSQxLFxuICBjb25jYXRNYXAkMSxcbiAgY29uY2F0QWxsJDEsXG4gIGNvbmNhdCQxLFxuICBmaWx0ZXIkMSxcbiAgbWFwJDEsXG4gIG1lcmdlTWFwJDEsXG4gIG1lcmdlJDEsXG4gIG1lcmdlQWxsJDEsXG4gIGZsYXR0ZW4kMSxcbiAgb25FbmQkMSxcbiAgb25QdXNoJDEsXG4gIHRhcCQxLFxuICBvblN0YXJ0JDEsXG4gIHNhbXBsZSQxLFxuICBzY2FuJDEsXG4gIHNoYXJlJDEsXG4gIHNraXAkMSxcbiAgc2tpcFVudGlsJDEsXG4gIHNraXBXaGlsZSQxLFxuICBzd2l0Y2hNYXAkMSxcbiAgc3dpdGNoQWxsJDEsXG4gIHRha2UkMSxcbiAgdGFrZUxhc3QkMSxcbiAgdGFrZVVudGlsJDEsXG4gIHRha2VXaGlsZSQxLFxuICBzdWJzY3JpYmUkMSxcbiAgZm9yRWFjaCQxLFxuICBwdWJsaXNoJDEsXG4gIHRvQXJyYXkkMSxcbiAgb2JzZXJ2YWJsZVN5bWJvbCxcbiAgZnJvbU9ic2VydmFibGUkMixcbiAgdG9PYnNlcnZhYmxlJDIsXG4gIGZyb21DYWxsYmFnJDIsXG4gIHRvQ2FsbGJhZyQyLFxuICBkZWJvdW5jZSQxLFxuICBkZWxheSQxLFxuICB0aHJvdHRsZSQxLFxuICB0b1Byb21pc2UkMSxcbiAgaW50ZXJ2YWwkMSxcbiAgZnJvbURvbUV2ZW50JDEsXG4gIGZyb21Qcm9taXNlJDEsXG4gIGZyb21BcnJheSQxID0gZnJvbUFycmF5LFxuICBlbXB0eSQxID0gZW1wdHk7XG5cbnVuZGVmaW5lZEhlYWRlciA9IFtdO1xuXG4oYnVmZmVyJDEgPSBmdW5jdGlvbiAoYSkge1xuICByZXR1cm4gZnVuY3Rpb24gKGIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGMpIHtcbiAgICAgIGZ1bmN0aW9uIGUoYSkge1xuICAgICAgICAnbnVtYmVyJyA9PSB0eXBlb2YgYVxuICAgICAgICAgID8gayB8fCAoKGsgPSAhMCksIGYoMSksIDAgPCBkLmxlbmd0aCAmJiBjKF9fKDEsIFtkXSkpLCBjKDApKVxuICAgICAgICAgIDogYS50YWdcbiAgICAgICAgICA/ICFrICYmIDAgPCBkLmxlbmd0aCAmJiAoKGEgPSBkKSwgKGQgPSBbXSksIGMoX18oMSwgW2FdKSkpXG4gICAgICAgICAgOiAoZyA9IGFbMF0pO1xuICAgICAgfVxuICAgICAgbGV0IGQgPSBbXSxcbiAgICAgICAgZiA9IHRhbGtiYWNrUGxhY2Vob2xkZXIsXG4gICAgICAgIGcgPSB0YWxrYmFja1BsYWNlaG9sZGVyLFxuICAgICAgICBoID0gITEsXG4gICAgICAgIGsgPSAhMTtcbiAgICAgIGIoZnVuY3Rpb24gKGIpIHtcbiAgICAgICAgJ251bWJlcicgPT0gdHlwZW9mIGJcbiAgICAgICAgICA/IGsgfHwgKChrID0gITApLCBnKDEpLCAwIDwgZC5sZW5ndGggJiYgYyhfXygxLCBbZF0pKSwgYygwKSlcbiAgICAgICAgICA6IGIudGFnXG4gICAgICAgICAgPyBrIHx8IChkLnB1c2goYlswXSksIGggPyAoaCA9ICExKSA6ICgoaCA9ICEwKSwgZigwKSwgZygwKSkpXG4gICAgICAgICAgOiAoKGYgPSBiWzBdKSwgYShlKSk7XG4gICAgICB9KTtcbiAgICAgIGMoXG4gICAgICAgIF9fKDAsIFtcbiAgICAgICAgICBmdW5jdGlvbiAoYykge1xuICAgICAgICAgICAgaWYgKCFrKSB7XG4gICAgICAgICAgICAgIGlmIChjKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChrID0gITApLCBmKDEpLCBnKDEpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmICghaCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAoaCA9ICEwKSwgZigwKSwgZygwKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgIF0pXG4gICAgICApO1xuICAgIH07XG4gIH07XG59KSxcbiAgKGNvbWJpbmUkMSA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIGxldCBlID0gdGFsa2JhY2tQbGFjZWhvbGRlcixcbiAgICAgICAgICBkID0gdGFsa2JhY2tQbGFjZWhvbGRlcixcbiAgICAgICAgICBmID0gdm9pZCAwLFxuICAgICAgICAgIGcgPSB2b2lkIDAsXG4gICAgICAgICAgaCA9ICExLFxuICAgICAgICAgIGsgPSAwLFxuICAgICAgICAgIGwgPSAhMTtcbiAgICAgICAgYShmdW5jdGlvbiAoYSkge1xuICAgICAgICAgIHZhciBiID0gZztcbiAgICAgICAgICAnbnVtYmVyJyA9PSB0eXBlb2YgYVxuICAgICAgICAgICAgPyAxID4ga1xuICAgICAgICAgICAgICA/IChrID0gKGsgKyAxKSB8IDApXG4gICAgICAgICAgICAgIDogbCB8fCAoKGwgPSAhMCksIGMoMCkpXG4gICAgICAgICAgICA6IGEudGFnXG4gICAgICAgICAgICA/ICgoYSA9IGFbMF0pLFxuICAgICAgICAgICAgICB2b2lkIDAgIT09IGJcbiAgICAgICAgICAgICAgICA/IGwgfHwgKChmID0gc29tZShhKSksIChoID0gITEpLCBjKF9fKDEsIFtbYSwgdmFsRnJvbU9wdGlvbihiKV1dKSkpXG4gICAgICAgICAgICAgICAgOiAoKGYgPSBzb21lKGEpKSwgaCA/IChoID0gITEpIDogZCgwKSkpXG4gICAgICAgICAgICA6IChlID0gYVswXSk7XG4gICAgICAgIH0pO1xuICAgICAgICBiKGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgdmFyIGIgPSBmO1xuICAgICAgICAgICdudW1iZXInID09IHR5cGVvZiBhXG4gICAgICAgICAgICA/IDEgPiBrXG4gICAgICAgICAgICAgID8gKGsgPSAoayArIDEpIHwgMClcbiAgICAgICAgICAgICAgOiBsIHx8ICgobCA9ICEwKSwgYygwKSlcbiAgICAgICAgICAgIDogYS50YWdcbiAgICAgICAgICAgID8gKChhID0gYVswXSksXG4gICAgICAgICAgICAgIHZvaWQgMCAhPT0gYlxuICAgICAgICAgICAgICAgID8gbCB8fCAoKGcgPSBzb21lKGEpKSwgKGggPSAhMSksIGMoX18oMSwgW1t2YWxGcm9tT3B0aW9uKGIpLCBhXV0pKSlcbiAgICAgICAgICAgICAgICA6ICgoZyA9IHNvbWUoYSkpLCBoID8gKGggPSAhMSkgOiBlKDApKSlcbiAgICAgICAgICAgIDogKGQgPSBhWzBdKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGMoXG4gICAgICAgICAgX18oMCwgW1xuICAgICAgICAgICAgZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgICAgaWYgKCFsKSB7XG4gICAgICAgICAgICAgICAgaWYgKGEpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiAobCA9ICEwKSwgZSgxKSwgZCgxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFoKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gKGggPSAhMCksIGUoYSksIGQoYSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0pXG4gICAgICAgICk7XG4gICAgICB9O1xuICAgIH0pKGEsIGIpO1xuICB9KSxcbiAgKGNvbmNhdE1hcCQxID0gY29uY2F0TWFwKSxcbiAgKGNvbmNhdEFsbCQxID0gZnVuY3Rpb24gKGEpIHtcbiAgICByZXR1cm4gY29uY2F0TWFwKF9yZWYzKShhKTtcbiAgfSksXG4gIChjb25jYXQkMSA9IGZ1bmN0aW9uIChhKSB7XG4gICAgcmV0dXJuIGNvbmNhdE1hcChfcmVmNCQxKShmcm9tQXJyYXkoYSkpO1xuICB9KSxcbiAgKGZpbHRlciQxID0gZnVuY3Rpb24gKGEpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGIpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoYykge1xuICAgICAgICBsZXQgZSA9IHRhbGtiYWNrUGxhY2Vob2xkZXI7XG4gICAgICAgIHJldHVybiBiKGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgJ251bWJlcicgPT0gdHlwZW9mIGQgPyBjKGQpIDogZC50YWcgPyAoYShkWzBdKSA/IGMoZCkgOiBlKDApKSA6ICgoZSA9IGRbMF0pLCBjKGQpKTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH07XG4gIH0pLFxuICAobWFwJDEgPSBmdW5jdGlvbiAoYSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIHJldHVybiBiKGZ1bmN0aW9uIChiKSB7XG4gICAgICAgICAgYiA9ICdudW1iZXInID09IHR5cGVvZiBiID8gMCA6IGIudGFnID8gX18oMSwgW2EoYlswXSldKSA6IF9fKDAsIFtiWzBdXSk7XG4gICAgICAgICAgYyhiKTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH07XG4gIH0pLFxuICAobWVyZ2VNYXAkMSA9IG1lcmdlTWFwKSxcbiAgKG1lcmdlJDEgPSBmdW5jdGlvbiAoYSkge1xuICAgIHJldHVybiBtZXJnZU1hcChfcmVmOCkoZnJvbUFycmF5KGEpKTtcbiAgfSksXG4gIChtZXJnZUFsbCQxID0gbWVyZ2VBbGwpLFxuICAoZmxhdHRlbiQxID0gbWVyZ2VBbGwpLFxuICAob25FbmQkMSA9IGZ1bmN0aW9uIChhKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChiKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgbGV0IGUgPSAhMTtcbiAgICAgICAgcmV0dXJuIGIoZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICBpZiAoJ251bWJlcicgPT0gdHlwZW9mIGQpIHtcbiAgICAgICAgICAgIGlmIChlKSB7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGUgPSAhMDtcbiAgICAgICAgICAgIGMoZCk7XG4gICAgICAgICAgICByZXR1cm4gYSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZC50YWcpIHtcbiAgICAgICAgICAgIGUgfHwgYyhkKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGIgPSBkWzBdO1xuICAgICAgICAgICAgYyhcbiAgICAgICAgICAgICAgX18oMCwgW1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChjKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoIWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGMgPyAoKGUgPSAhMCksIGIoYyksIGEoKSkgOiBiKGMpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH07XG4gIH0pLFxuICAob25QdXNoJDEgPSBvblB1c2gpLFxuICAodGFwJDEgPSBvblB1c2gpLFxuICAob25TdGFydCQxID0gZnVuY3Rpb24gKGEpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGIpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoYykge1xuICAgICAgICByZXR1cm4gYihmdW5jdGlvbiAoYikge1xuICAgICAgICAgICdudW1iZXInID09IHR5cGVvZiBiID8gYyhiKSA6IGIudGFnID8gYyhiKSA6IChjKGIpLCBhKCkpO1xuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfTtcbiAgfSksXG4gIChzYW1wbGUkMSA9IGZ1bmN0aW9uIChhKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChiKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgbGV0IGUgPSB0YWxrYmFja1BsYWNlaG9sZGVyLFxuICAgICAgICAgIGQgPSB0YWxrYmFja1BsYWNlaG9sZGVyLFxuICAgICAgICAgIGYgPSB2b2lkIDAsXG4gICAgICAgICAgZyA9ICExLFxuICAgICAgICAgIGggPSAhMTtcbiAgICAgICAgYihmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICdudW1iZXInID09IHR5cGVvZiBhXG4gICAgICAgICAgICA/IGggfHwgKChoID0gITApLCBkKDEpLCBjKDApKVxuICAgICAgICAgICAgOiBhLnRhZ1xuICAgICAgICAgICAgPyAoKGYgPSBzb21lKGFbMF0pKSwgZyA/IChnID0gITEpIDogKChnID0gITApLCBkKDApLCBlKDApKSlcbiAgICAgICAgICAgIDogKGUgPSBhWzBdKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGEoZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICB2YXIgYiA9IGY7XG4gICAgICAgICAgJ251bWJlcicgPT0gdHlwZW9mIGFcbiAgICAgICAgICAgID8gaCB8fCAoKGggPSAhMCksIGUoMSksIGMoMCkpXG4gICAgICAgICAgICA6IGEudGFnXG4gICAgICAgICAgICA/IHZvaWQgMCA9PT0gYiB8fCBoIHx8ICgoZiA9IHZvaWQgMCksIGMoX18oMSwgW3ZhbEZyb21PcHRpb24oYildKSkpXG4gICAgICAgICAgICA6IChkID0gYVswXSk7XG4gICAgICAgIH0pO1xuICAgICAgICBjKFxuICAgICAgICAgIF9fKDAsIFtcbiAgICAgICAgICAgIGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgICAgIGlmICghaCkge1xuICAgICAgICAgICAgICAgIGlmIChhKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gKGggPSAhMCksIGUoMSksIGQoMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghZykge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIChnID0gITApLCBlKDApLCBkKDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICBdKVxuICAgICAgICApO1xuICAgICAgfTtcbiAgICB9O1xuICB9KSxcbiAgKHNjYW4kMSA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGxldCBkID0gYjtcbiAgICAgICAgICByZXR1cm4gYyhmdW5jdGlvbiAoYykge1xuICAgICAgICAgICAgJ251bWJlcicgPT0gdHlwZW9mIGNcbiAgICAgICAgICAgICAgPyAoYyA9IDApXG4gICAgICAgICAgICAgIDogYy50YWdcbiAgICAgICAgICAgICAgPyAoKGQgPSBhKGQsIGNbMF0pKSwgKGMgPSBfXygxLCBbZF0pKSlcbiAgICAgICAgICAgICAgOiAoYyA9IF9fKDAsIFtjWzBdXSkpO1xuICAgICAgICAgICAgZShjKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgIH07XG4gICAgfSkoYSwgYik7XG4gIH0pLFxuICAoc2hhcmUkMSA9IGZ1bmN0aW9uIChhKSB7XG4gICAgZnVuY3Rpb24gYihhKSB7XG4gICAgICAnbnVtYmVyJyA9PSB0eXBlb2YgYVxuICAgICAgICA/IChjLmZvckVhY2goX3JlZjExKSwgKGMgPSBbXSkpXG4gICAgICAgIDogYS50YWdcbiAgICAgICAgPyAoKGQgPSAhMSksXG4gICAgICAgICAgYy5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7XG4gICAgICAgICAgICBjKGEpO1xuICAgICAgICAgIH0pKVxuICAgICAgICA6IChlID0gYVswXSk7XG4gICAgfVxuICAgIGxldCBjID0gW10sXG4gICAgICBlID0gdGFsa2JhY2tQbGFjZWhvbGRlcixcbiAgICAgIGQgPSAhMTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGYpIHtcbiAgICAgIGZ1bmN0aW9uIGcoYSkge1xuICAgICAgICByZXR1cm4gYSAhPT0gZjtcbiAgICAgIH1cbiAgICAgIGMgPSBjLmNvbmNhdChmKTtcbiAgICAgIDEgPT09IGMubGVuZ3RoICYmIGEoYik7XG4gICAgICBmKFxuICAgICAgICBfXygwLCBbXG4gICAgICAgICAgZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgIGlmIChhKSB7XG4gICAgICAgICAgICAgIGlmICgoKGMgPSBjLmZpbHRlcihnKSksIDAgPT09IGMubGVuZ3RoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlKDEpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBkIHx8ICgoZCA9ICEwKSwgZShhKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgXSlcbiAgICAgICk7XG4gICAgfTtcbiAgfSksXG4gIChza2lwJDEgPSBmdW5jdGlvbiAoYSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIGxldCBlID0gdGFsa2JhY2tQbGFjZWhvbGRlcixcbiAgICAgICAgICBkID0gYTtcbiAgICAgICAgcmV0dXJuIGIoZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAnbnVtYmVyJyA9PSB0eXBlb2YgYVxuICAgICAgICAgICAgPyBjKGEpXG4gICAgICAgICAgICA6IGEudGFnXG4gICAgICAgICAgICA/IDAgPCBkXG4gICAgICAgICAgICAgID8gKChkID0gKGQgLSAxKSB8IDApLCBlKDApKVxuICAgICAgICAgICAgICA6IGMoYSlcbiAgICAgICAgICAgIDogKChlID0gYVswXSksIGMoYSkpO1xuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfTtcbiAgfSksXG4gIChza2lwVW50aWwkMSA9IGZ1bmN0aW9uIChhKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChiKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgZnVuY3Rpb24gZShhKSB7XG4gICAgICAgICAgJ251bWJlcicgPT0gdHlwZW9mIGFcbiAgICAgICAgICAgID8gZyAmJiAoKGsgPSAhMCksIGQoMSkpXG4gICAgICAgICAgICA6IGEudGFnXG4gICAgICAgICAgICA/ICgoZyA9ICExKSwgZigxKSlcbiAgICAgICAgICAgIDogKChmID0gYSA9IGFbMF0pLCBhKDApKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgZCA9IHRhbGtiYWNrUGxhY2Vob2xkZXIsXG4gICAgICAgICAgZiA9IHRhbGtiYWNrUGxhY2Vob2xkZXIsXG4gICAgICAgICAgZyA9ICEwLFxuICAgICAgICAgIGggPSAhMSxcbiAgICAgICAgICBrID0gITE7XG4gICAgICAgIGIoZnVuY3Rpb24gKGIpIHtcbiAgICAgICAgICAnbnVtYmVyJyA9PSB0eXBlb2YgYlxuICAgICAgICAgICAgPyAoZyAmJiBmKDEpLCAoayA9ICEwKSwgYygwKSlcbiAgICAgICAgICAgIDogYi50YWdcbiAgICAgICAgICAgID8gZyB8fCBrXG4gICAgICAgICAgICAgID8gaFxuICAgICAgICAgICAgICAgID8gKGggPSAhMSlcbiAgICAgICAgICAgICAgICA6ICgoaCA9ICEwKSwgZCgwKSwgZigwKSlcbiAgICAgICAgICAgICAgOiAoKGggPSAhMSksIGMoYikpXG4gICAgICAgICAgICA6ICgoZCA9IGJbMF0pLCBhKGUpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGMoXG4gICAgICAgICAgX18oMCwgW1xuICAgICAgICAgICAgZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgICAgaWYgKCFrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGEpIHtcbiAgICAgICAgICAgICAgICAgIGlmICgoKGsgPSAhMCksIGQoMSksIGcpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmKDEpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBoIHx8ICgoaCA9ICEwKSwgZyAmJiBmKDApLCBkKDApKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgXSlcbiAgICAgICAgKTtcbiAgICAgIH07XG4gICAgfTtcbiAgfSksXG4gIChza2lwV2hpbGUkMSA9IGZ1bmN0aW9uIChhKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChiKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgbGV0IGUgPSB0YWxrYmFja1BsYWNlaG9sZGVyLFxuICAgICAgICAgIGQgPSAhMDtcbiAgICAgICAgcmV0dXJuIGIoZnVuY3Rpb24gKGIpIHtcbiAgICAgICAgICAnbnVtYmVyJyA9PSB0eXBlb2YgYlxuICAgICAgICAgICAgPyBjKGIpXG4gICAgICAgICAgICA6IGIudGFnXG4gICAgICAgICAgICA/IGRcbiAgICAgICAgICAgICAgPyBhKGJbMF0pXG4gICAgICAgICAgICAgICAgPyBlKDApXG4gICAgICAgICAgICAgICAgOiAoKGQgPSAhMSksIGMoYikpXG4gICAgICAgICAgICAgIDogYyhiKVxuICAgICAgICAgICAgOiAoKGUgPSBiWzBdKSwgYyhiKSk7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9O1xuICB9KSxcbiAgKHN3aXRjaE1hcCQxID0gc3dpdGNoTWFwKSxcbiAgKHN3aXRjaEFsbCQxID0gZnVuY3Rpb24gKGEpIHtcbiAgICByZXR1cm4gc3dpdGNoTWFwKF9yZWYxNikoYSk7XG4gIH0pLFxuICAodGFrZSQxID0gZnVuY3Rpb24gKGEpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGIpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoYykge1xuICAgICAgICBsZXQgZSA9ICExLFxuICAgICAgICAgIGQgPSAwLFxuICAgICAgICAgIGYgPSB0YWxrYmFja1BsYWNlaG9sZGVyO1xuICAgICAgICBiKGZ1bmN0aW9uIChiKSB7XG4gICAgICAgICAgJ251bWJlcicgPT0gdHlwZW9mIGJcbiAgICAgICAgICAgID8gZSB8fCAoKGUgPSAhMCksIGMoMCkpXG4gICAgICAgICAgICA6IGIudGFnXG4gICAgICAgICAgICA/IGQgPCBhICYmICFlICYmICgoZCA9IChkICsgMSkgfCAwKSwgYyhiKSwgIWUgJiYgZCA+PSBhICYmICgoZSA9ICEwKSwgYygwKSwgZigxKSkpXG4gICAgICAgICAgICA6ICgoYiA9IGJbMF0pLCAwID49IGEgPyAoKGUgPSAhMCksIGMoMCksIGIoMSkpIDogKGYgPSBiKSk7XG4gICAgICAgIH0pO1xuICAgICAgICBjKFxuICAgICAgICAgIF9fKDAsIFtcbiAgICAgICAgICAgIGZ1bmN0aW9uIChiKSB7XG4gICAgICAgICAgICAgIGlmICghZSkge1xuICAgICAgICAgICAgICAgIGlmIChiKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gKGUgPSAhMCksIGYoMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChkIDwgYSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGYoMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0pXG4gICAgICAgICk7XG4gICAgICB9O1xuICAgIH07XG4gIH0pLFxuICAodGFrZUxhc3QkMSA9IHRha2VMYXN0KSxcbiAgKHRha2VVbnRpbCQxID0gZnVuY3Rpb24gKGEpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGIpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoYykge1xuICAgICAgICBmdW5jdGlvbiBlKGEpIHtcbiAgICAgICAgICAnbnVtYmVyJyAhPSB0eXBlb2YgYSAmJiAoYS50YWcgPyAoKGQgPSAhMCksIGYoMSksIGMoMCkpIDogKChnID0gYSA9IGFbMF0pLCBhKDApKSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGQgPSAhMSxcbiAgICAgICAgICBmID0gdGFsa2JhY2tQbGFjZWhvbGRlcixcbiAgICAgICAgICBnID0gdGFsa2JhY2tQbGFjZWhvbGRlcjtcbiAgICAgICAgYihmdW5jdGlvbiAoYikge1xuICAgICAgICAgICdudW1iZXInID09IHR5cGVvZiBiXG4gICAgICAgICAgICA/IGQgfHwgKChkID0gITApLCBnKDEpLCBjKDApKVxuICAgICAgICAgICAgOiBiLnRhZ1xuICAgICAgICAgICAgPyBkIHx8IGMoYilcbiAgICAgICAgICAgIDogKChmID0gYlswXSksIGEoZSkpO1xuICAgICAgICB9KTtcbiAgICAgICAgYyhcbiAgICAgICAgICBfXygwLCBbXG4gICAgICAgICAgICBmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgICBpZiAoIWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYSA/ICgoZCA9ICEwKSwgZigxKSwgZygxKSkgOiBmKDApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0pXG4gICAgICAgICk7XG4gICAgICB9O1xuICAgIH07XG4gIH0pLFxuICAodGFrZVdoaWxlJDEgPSBmdW5jdGlvbiAoYSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIGxldCBlID0gdGFsa2JhY2tQbGFjZWhvbGRlcixcbiAgICAgICAgICBkID0gITE7XG4gICAgICAgIHJldHVybiBiKGZ1bmN0aW9uIChiKSB7XG4gICAgICAgICAgJ251bWJlcicgPT0gdHlwZW9mIGJcbiAgICAgICAgICAgID8gZCB8fCAoKGQgPSAhMCksIGMoMCkpXG4gICAgICAgICAgICA6IGIudGFnXG4gICAgICAgICAgICA/IGQgfHwgKGEoYlswXSkgPyBjKGIpIDogKChkID0gITApLCBjKDApLCBlKDEpKSlcbiAgICAgICAgICAgIDogKChlID0gYlswXSksIGMoYikpO1xuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfTtcbiAgfSk7XG5cbihzdWJzY3JpYmUkMSA9IHN1YnNjcmliZSksXG4gIChmb3JFYWNoJDEgPSBmdW5jdGlvbiAoYSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYikge1xuICAgICAgc3Vic2NyaWJlKGEpKGIpO1xuICAgIH07XG4gIH0pLFxuICAocHVibGlzaCQxID0gZnVuY3Rpb24gKGEpIHtcbiAgICByZXR1cm4gc3Vic2NyaWJlKF9yZWYkMSkoYSk7XG4gIH0pLFxuICAodG9BcnJheSQxID0gZnVuY3Rpb24gKGEpIHtcbiAgICBsZXQgYiA9IFtdLFxuICAgICAgYyA9IHRhbGtiYWNrUGxhY2Vob2xkZXIsXG4gICAgICBlID0gITE7XG4gICAgYShmdW5jdGlvbiAoYSkge1xuICAgICAgJ251bWJlcicgPT0gdHlwZW9mIGEgPyAoZSA9ICEwKSA6IGEudGFnID8gKGIucHVzaChhWzBdKSwgYygwKSkgOiAoKGMgPSBhID0gYVswXSksIGEoMCkpO1xuICAgIH0pO1xuICAgIGUgfHwgYygxKTtcbiAgICByZXR1cm4gYjtcbiAgfSk7XG5cbm9ic2VydmFibGVTeW1ib2wgPVxuICAnZnVuY3Rpb24nID09IHR5cGVvZiBTeW1ib2xcbiAgICA/IFN5bWJvbC5vYnNlcnZhYmxlIHx8IChTeW1ib2wub2JzZXJ2YWJsZSA9IFN5bWJvbCgnb2JzZXJ2YWJsZScpKVxuICAgIDogJ0BAb2JzZXJ2YWJsZSc7XG5cbihmcm9tT2JzZXJ2YWJsZSQyID0gZnVuY3Rpb24gKGEpIHtcbiAgdmFyIGIgPSB2b2lkIDAgIT09IGFbb2JzZXJ2YWJsZVN5bWJvbF0gPyBhW29ic2VydmFibGVTeW1ib2xdKCkgOiBhO1xuICByZXR1cm4gZnVuY3Rpb24gKGEpIHtcbiAgICB2YXIgYyA9IGIuc3Vic2NyaWJlKHtcbiAgICAgIG5leHQ6IGZ1bmN0aW9uIChiKSB7XG4gICAgICAgIGEoX18oMSwgW2JdKSk7XG4gICAgICB9LFxuICAgICAgY29tcGxldGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYSgwKTtcbiAgICAgIH0sXG4gICAgICBlcnJvcjogX3JlZiQyLFxuICAgIH0pO1xuICAgIGEoXG4gICAgICBfXygwLCBbXG4gICAgICAgIGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgaWYgKGEpIHtcbiAgICAgICAgICAgIHJldHVybiBjLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgXSlcbiAgICApO1xuICB9O1xufSksXG4gICh0b09ic2VydmFibGUkMiA9IGZ1bmN0aW9uIChhKSB7XG4gICAgdmFyIGIgPSB7XG4gICAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uIChiLCBlLCBkKSB7XG4gICAgICAgIHZhciBjID0gKCdvYmplY3QnID09IHR5cGVvZiBiID8gYi5uZXh0LmJpbmQoYikgOiBiKSB8fCBfcmVmMixcbiAgICAgICAgICBnID0gKCdvYmplY3QnID09IHR5cGVvZiBiID8gYi5jb21wbGV0ZS5iaW5kKGIpIDogZCkgfHwgX3JlZjMkMTtcbiAgICAgICAgbGV0IGggPSB0YWxrYmFja1BsYWNlaG9sZGVyLFxuICAgICAgICAgIGsgPSAhMTtcbiAgICAgICAgYShmdW5jdGlvbiAoYSkge1xuICAgICAgICAgIGlmICgnbnVtYmVyJyA9PSB0eXBlb2YgYSkge1xuICAgICAgICAgICAgcmV0dXJuIChrID0gITApLCBnKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChhLnRhZykge1xuICAgICAgICAgICAgaWYgKGspIHtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYyhhWzBdKTtcbiAgICAgICAgICAgIHJldHVybiBoKDApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBoID0gYSA9IGFbMF07XG4gICAgICAgICAgYSgwKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdW5zdWJzY3JpYmU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICghaykge1xuICAgICAgICAgICAgICByZXR1cm4gKHRoaXMuY2xvc2VkID0gITEpLCAoayA9ICEwKSwgaCgxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIGNsb3NlZDogITEsXG4gICAgICAgIH07XG4gICAgICB9LFxuICAgIH07XG4gICAgYltvYnNlcnZhYmxlU3ltYm9sXSA9IGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gYjtcbiAgICB9O1xuICAgIHJldHVybiBiO1xuICB9KSxcbiAgKGZyb21DYWxsYmFnJDIgPSBmdW5jdGlvbiAoYSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYikge1xuICAgICAgdmFyIGMgPSBmdW5jdGlvbiAoYSwgYykge1xuICAgICAgICBzd2l0Y2ggKGEpIHtcbiAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICBiKFxuICAgICAgICAgICAgICBfXygwLCBbXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBhID8gYygyKSA6IGMoMSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIGIoX18oMSwgW2NdKSk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIGIoMCk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICByZXR1cm4gMiA9PT0gYS5sZW5ndGggPyBhKDAsIGMpIDogYS5iaW5kKG51bGwsIDAsIGMpO1xuICAgIH07XG4gIH0pLFxuICAodG9DYWxsYmFnJDIgPSBmdW5jdGlvbiAoYSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYiwgYykge1xuICAgICAgaWYgKDAgPT09IGIpIHtcbiAgICAgICAgcmV0dXJuIGEoZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICBpZiAoJ251bWJlcicgPT0gdHlwZW9mIGEpIHtcbiAgICAgICAgICAgIHJldHVybiAyID09PSBjLmxlbmd0aCA/IGMoMiwgdm9pZCAwKSA6IGMuYmluZChudWxsLCAyLCB2b2lkIDApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoYS50YWcpIHtcbiAgICAgICAgICAgIHJldHVybiAoYSA9IGFbMF0pLCAyID09PSBjLmxlbmd0aCA/IGMoMSwgYSkgOiBjLmJpbmQobnVsbCwgMSwgYSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBiID0gYVswXTtcbiAgICAgICAgICBhID0gZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoYSkge1xuICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgYigwKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgYigxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICAgIHJldHVybiAyID09PSBjLmxlbmd0aCA/IGMoMCwgYSkgOiBjLmJpbmQobnVsbCwgMCwgYSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gIH0pLFxuICAoZGVib3VuY2UkMSA9IGZ1bmN0aW9uIChhKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChiKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgbGV0IGUgPSB2b2lkIDAsXG4gICAgICAgICAgZCA9ICExLFxuICAgICAgICAgIGYgPSAhMTtcbiAgICAgICAgdmFyIGcgPSBmdW5jdGlvbiAoYSkge1xuICAgICAgICAgIHZvaWQgMCAhPT0gKGEgPSBlKSAmJiAoKGUgPSB2b2lkIDApLCBjbGVhclRpbWVvdXQodmFsRnJvbU9wdGlvbihhKSkpO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gYihmdW5jdGlvbiAoYikge1xuICAgICAgICAgIGlmICgnbnVtYmVyJyA9PSB0eXBlb2YgYikge1xuICAgICAgICAgICAgZiB8fCAoKGYgPSAhMCksIHZvaWQgMCAhPT0gZSA/IChkID0gITApIDogYygwKSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChiLnRhZykge1xuICAgICAgICAgICAgZiB8fFxuICAgICAgICAgICAgICAoZygpLFxuICAgICAgICAgICAgICAoZSA9IHNvbWUoXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgICAgICAgZSA9IHZvaWQgMDtcbiAgICAgICAgICAgICAgICAgIGMoYik7XG4gICAgICAgICAgICAgICAgICBkICYmIGMoMCk7XG4gICAgICAgICAgICAgICAgfSwgYShiWzBdKSlcbiAgICAgICAgICAgICAgKSkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgbCA9IGJbMF07XG4gICAgICAgICAgICBjKFxuICAgICAgICAgICAgICBfXygwLCBbXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgICAgICAgIGlmICghZikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYSA/ICgoZiA9ICEwKSwgKGQgPSAhMSksIGcoKSwgbCgxKSkgOiBsKDApO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH07XG4gIH0pLFxuICAoZGVsYXkkMSA9IGZ1bmN0aW9uIChhKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChiKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgbGV0IGUgPSAwO1xuICAgICAgICByZXR1cm4gYihmdW5jdGlvbiAoYikge1xuICAgICAgICAgICdudW1iZXInID09IHR5cGVvZiBiIHx8IGIudGFnXG4gICAgICAgICAgICA/ICgoZSA9IChlICsgMSkgfCAwKSxcbiAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgICAgIDAgIT09IGUgJiYgKChlID0gKGUgLSAxKSB8IDApLCBjKGIpKTtcbiAgICAgICAgICAgICAgfSwgYSkpXG4gICAgICAgICAgICA6IGMoYik7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICB9O1xuICB9KSxcbiAgKHRocm90dGxlJDEgPSBmdW5jdGlvbiAoYSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIGZ1bmN0aW9uIGUoYSkge1xuICAgICAgICAgIGYgPSB2b2lkIDA7XG4gICAgICAgICAgZCA9ICExO1xuICAgICAgICB9XG4gICAgICAgIGxldCBkID0gITEsXG4gICAgICAgICAgZiA9IHZvaWQgMDtcbiAgICAgICAgdmFyIGcgPSBmdW5jdGlvbiAoYSkge1xuICAgICAgICAgIHZvaWQgMCAhPT0gKGEgPSBmKSAmJiBjbGVhclRpbWVvdXQodmFsRnJvbU9wdGlvbihhKSk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBiKGZ1bmN0aW9uIChiKSB7XG4gICAgICAgICAgaWYgKCdudW1iZXInID09IHR5cGVvZiBiKSB7XG4gICAgICAgICAgICBnKCksIGMoMCk7XG4gICAgICAgICAgfSBlbHNlIGlmIChiLnRhZykge1xuICAgICAgICAgICAgZCB8fCAoKGQgPSAhMCksIGcoKSwgKGYgPSBzb21lKHNldFRpbWVvdXQoZSwgYShiWzBdKSkpKSwgYyhiKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBoID0gYlswXTtcbiAgICAgICAgICAgIGMoXG4gICAgICAgICAgICAgIF9fKDAsIFtcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGEgPyAoZygpLCBoKDEpKSA6IGgoYSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfTtcbiAgfSksXG4gICh0b1Byb21pc2UkMSA9IGZ1bmN0aW9uIChhKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChiLCBjKSB7XG4gICAgICB0YWtlTGFzdCgxKShhKShmdW5jdGlvbiAoYSkge1xuICAgICAgICBpZiAoJ251bWJlcicgIT0gdHlwZW9mIGEpIHtcbiAgICAgICAgICBpZiAoYS50YWcpIHtcbiAgICAgICAgICAgIGIoYVswXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFbMF0oMCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSksXG4gIChpbnRlcnZhbCQxID0gZnVuY3Rpb24gKGEpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGIpIHtcbiAgICAgIGxldCBjID0gMDtcbiAgICAgIHZhciBlID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgYSA9IGM7XG4gICAgICAgIGMgPSAoYyArIDEpIHwgMDtcbiAgICAgICAgYihfXygxLCBbYV0pKTtcbiAgICAgIH0sIGEpO1xuICAgICAgYihcbiAgICAgICAgX18oMCwgW1xuICAgICAgICAgIGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgICBhICYmIGNsZWFySW50ZXJ2YWwoZSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgXSlcbiAgICAgICk7XG4gICAgfTtcbiAgfSksXG4gIChmcm9tRG9tRXZlbnQkMSA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIChmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIHZhciBlID0gX3JlZjMkMixcbiAgICAgICAgICBkID0gX3JlZjQkMixcbiAgICAgICAgICBmID0gZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgICAgIGMoX18oMSwgW2FdKSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgYyhcbiAgICAgICAgICBfXygwLCBbXG4gICAgICAgICAgICBmdW5jdGlvbiAoYykge1xuICAgICAgICAgICAgICBpZiAoYykge1xuICAgICAgICAgICAgICAgIHJldHVybiBkKGEsIGIsIGYpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0pXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiBlKGEsIGIsIGYpO1xuICAgICAgfTtcbiAgICB9KShhLCBiKTtcbiAgfSksXG4gIChmcm9tUHJvbWlzZSQxID0gZnVuY3Rpb24gKGEpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGIpIHtcbiAgICAgIGxldCBjID0gITE7XG4gICAgICBhLnRoZW4oZnVuY3Rpb24gKGEpIHtcbiAgICAgICAgYyB8fCAoYihfXygxLCBbYV0pKSwgYigwKSk7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodm9pZCAwKTtcbiAgICAgIH0pO1xuICAgICAgYihcbiAgICAgICAgX18oMCwgW1xuICAgICAgICAgIGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgICBhICYmIChjID0gITApO1xuICAgICAgICAgIH0sXG4gICAgICAgIF0pXG4gICAgICApO1xuICAgIH07XG4gIH0pO1xuXG5leHBvcnRzLmJ1ZmZlciA9IGJ1ZmZlciQxO1xuXG5leHBvcnRzLmNvbWJpbmUgPSBjb21iaW5lJDE7XG5cbmV4cG9ydHMuY29uY2F0ID0gY29uY2F0JDE7XG5cbmV4cG9ydHMuY29uY2F0QWxsID0gY29uY2F0QWxsJDE7XG5cbmV4cG9ydHMuY29uY2F0TWFwID0gY29uY2F0TWFwJDE7XG5cbmV4cG9ydHMuZGVib3VuY2UgPSBkZWJvdW5jZSQxO1xuXG5leHBvcnRzLmRlbGF5ID0gZGVsYXkkMTtcblxuZXhwb3J0cy5lbXB0eSA9IGVtcHR5JDE7XG5cbmV4cG9ydHMuZmlsdGVyID0gZmlsdGVyJDE7XG5cbmV4cG9ydHMuZmxhdHRlbiA9IGZsYXR0ZW4kMTtcblxuZXhwb3J0cy5mb3JFYWNoID0gZm9yRWFjaCQxO1xuXG5leHBvcnRzLmZyb21BcnJheSA9IGZyb21BcnJheSQxO1xuXG5leHBvcnRzLmZyb21DYWxsYmFnID0gZnJvbUNhbGxiYWckMjtcblxuZXhwb3J0cy5mcm9tRG9tRXZlbnQgPSBmcm9tRG9tRXZlbnQkMTtcblxuZXhwb3J0cy5mcm9tTGlzdCA9IGZ1bmN0aW9uIChhKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoYikge1xuICAgIGxldCBjID0gITEsXG4gICAgICBlID0gITEsXG4gICAgICBkID0gITEsXG4gICAgICBmID0gYTtcbiAgICBiKFxuICAgICAgX18oMCwgW1xuICAgICAgICBmdW5jdGlvbiAoYSkge1xuICAgICAgICAgIGlmIChhKSB7XG4gICAgICAgICAgICBjID0gITA7XG4gICAgICAgICAgfSBlbHNlIGlmIChlKSB7XG4gICAgICAgICAgICBkID0gITA7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvciAoZSA9IGQgPSAhMDsgZCAmJiAhYzsgKSB7XG4gICAgICAgICAgICAgIChhID0gZikgPyAoKGYgPSBhWzFdKSwgKGQgPSAhMSksIGIoX18oMSwgW2FbMF1dKSkpIDogKChjID0gITApLCBiKDApKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGUgPSAhMTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICBdKVxuICAgICk7XG4gIH07XG59O1xuXG5leHBvcnRzLmZyb21PYnNlcnZhYmxlID0gZnJvbU9ic2VydmFibGUkMjtcblxuZXhwb3J0cy5mcm9tUHJvbWlzZSA9IGZyb21Qcm9taXNlJDE7XG5cbmV4cG9ydHMuZnJvbVZhbHVlID0gZnVuY3Rpb24gKGEpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChiKSB7XG4gICAgbGV0IGMgPSAhMTtcbiAgICBiKFxuICAgICAgX18oMCwgW1xuICAgICAgICBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGUgPyAoYyA9ICEwKSA6IGMgfHwgKChjID0gITApLCBiKF9fKDEsIFthXSkpLCBiKDApKTtcbiAgICAgICAgfSxcbiAgICAgIF0pXG4gICAgKTtcbiAgfTtcbn07XG5cbmV4cG9ydHMuaW50ZXJ2YWwgPSBpbnRlcnZhbCQxO1xuXG5leHBvcnRzLm1ha2UgPSBmdW5jdGlvbiAoYSkge1xuICByZXR1cm4gZnVuY3Rpb24gKGIpIHtcbiAgICBsZXQgYyA9IF9yZWYsXG4gICAgICBlID0gITE7XG4gICAgYyA9IGEoe1xuICAgICAgbmV4dDogZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgZSB8fCBiKF9fKDEsIFtkXSkpO1xuICAgICAgfSxcbiAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbiAoZCkge1xuICAgICAgICBlIHx8ICgoZSA9ICEwKSwgYigwKSk7XG4gICAgICB9LFxuICAgIH0pO1xuICAgIGIoXG4gICAgICBfXygwLCBbXG4gICAgICAgIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgaWYgKGQgJiYgIWUpIHtcbiAgICAgICAgICAgIHJldHVybiAoZSA9ICEwKSwgYygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgIF0pXG4gICAgKTtcbiAgfTtcbn07XG5cbmV4cG9ydHMubWFrZVN1YmplY3QgPSBmdW5jdGlvbiAoYSkge1xuICBsZXQgYiA9IFtdLFxuICAgIGMgPSAhMTtcbiAgcmV0dXJuIHtcbiAgICBzb3VyY2U6IGZ1bmN0aW9uIChjKSB7XG4gICAgICBmdW5jdGlvbiBkKGQpIHtcbiAgICAgICAgcmV0dXJuIGQgIT09IGM7XG4gICAgICB9XG4gICAgICBiID0gYi5jb25jYXQoYyk7XG4gICAgICBjKFxuICAgICAgICBfXygwLCBbXG4gICAgICAgICAgZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICAgIGMgJiYgKGIgPSBiLmZpbHRlcihkKSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgXSlcbiAgICAgICk7XG4gICAgfSxcbiAgICBuZXh0OiBmdW5jdGlvbiAoYSkge1xuICAgICAgYyB8fFxuICAgICAgICBiLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICBjKF9fKDEsIFthXSkpO1xuICAgICAgICB9KTtcbiAgICB9LFxuICAgIGNvbXBsZXRlOiBmdW5jdGlvbiAoYSkge1xuICAgICAgYyB8fCAoKGMgPSAhMCksIGIuZm9yRWFjaChfcmVmNCkpO1xuICAgIH0sXG4gIH07XG59O1xuXG5leHBvcnRzLm1hcCA9IG1hcCQxO1xuXG5leHBvcnRzLm1lcmdlID0gbWVyZ2UkMTtcblxuZXhwb3J0cy5tZXJnZUFsbCA9IG1lcmdlQWxsJDE7XG5cbmV4cG9ydHMubWVyZ2VNYXAgPSBtZXJnZU1hcCQxO1xuXG5leHBvcnRzLm5ldmVyID0gZnVuY3Rpb24gKGEpIHtcbiAgYShfXygwLCBbdGFsa2JhY2tQbGFjZWhvbGRlcl0pKTtcbn07XG5cbmV4cG9ydHMub25FbmQgPSBvbkVuZCQxO1xuXG5leHBvcnRzLm9uUHVzaCA9IG9uUHVzaCQxO1xuXG5leHBvcnRzLm9uU3RhcnQgPSBvblN0YXJ0JDE7XG5cbmV4cG9ydHMucGlwZSA9IGZ1bmN0aW9uICgpIHtcbiAgZm9yICh2YXIgYSA9IGFyZ3VtZW50cywgYiA9IGFyZ3VtZW50c1swXSwgYyA9IDEsIGUgPSBhcmd1bWVudHMubGVuZ3RoOyBjIDwgZTsgYysrKSB7XG4gICAgYiA9IGFbY10oYik7XG4gIH1cbiAgcmV0dXJuIGI7XG59O1xuXG5leHBvcnRzLnB1Ymxpc2ggPSBwdWJsaXNoJDE7XG5cbmV4cG9ydHMuc2FtcGxlID0gc2FtcGxlJDE7XG5cbmV4cG9ydHMuc2NhbiA9IHNjYW4kMTtcblxuZXhwb3J0cy5zaGFyZSA9IHNoYXJlJDE7XG5cbmV4cG9ydHMuc2tpcCA9IHNraXAkMTtcblxuZXhwb3J0cy5za2lwVW50aWwgPSBza2lwVW50aWwkMTtcblxuZXhwb3J0cy5za2lwV2hpbGUgPSBza2lwV2hpbGUkMTtcblxuZXhwb3J0cy5zdWJzY3JpYmUgPSBzdWJzY3JpYmUkMTtcblxuZXhwb3J0cy5zd2l0Y2hBbGwgPSBzd2l0Y2hBbGwkMTtcblxuZXhwb3J0cy5zd2l0Y2hNYXAgPSBzd2l0Y2hNYXAkMTtcblxuZXhwb3J0cy50YWtlID0gdGFrZSQxO1xuXG5leHBvcnRzLnRha2VMYXN0ID0gdGFrZUxhc3QkMTtcblxuZXhwb3J0cy50YWtlVW50aWwgPSB0YWtlVW50aWwkMTtcblxuZXhwb3J0cy50YWtlV2hpbGUgPSB0YWtlV2hpbGUkMTtcblxuZXhwb3J0cy50YXAgPSB0YXAkMTtcblxuZXhwb3J0cy50aHJvdHRsZSA9IHRocm90dGxlJDE7XG5cbmV4cG9ydHMudG9BcnJheSA9IHRvQXJyYXkkMTtcblxuZXhwb3J0cy50b0NhbGxiYWcgPSB0b0NhbGxiYWckMjtcblxuZXhwb3J0cy50b09ic2VydmFibGUgPSB0b09ic2VydmFibGUkMjtcblxuZXhwb3J0cy50b1Byb21pc2UgPSB0b1Byb21pc2UkMTtcbiIsImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfd3JhcE5hdGl2ZVN1cGVyKENsYXNzKSB7IHZhciBfY2FjaGUgPSB0eXBlb2YgTWFwID09PSBcImZ1bmN0aW9uXCIgPyBuZXcgTWFwKCkgOiB1bmRlZmluZWQ7IF93cmFwTmF0aXZlU3VwZXIgPSBmdW5jdGlvbiBfd3JhcE5hdGl2ZVN1cGVyKENsYXNzKSB7IGlmIChDbGFzcyA9PT0gbnVsbCB8fCAhX2lzTmF0aXZlRnVuY3Rpb24oQ2xhc3MpKSByZXR1cm4gQ2xhc3M7IGlmICh0eXBlb2YgQ2xhc3MgIT09IFwiZnVuY3Rpb25cIikgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gaWYgKHR5cGVvZiBfY2FjaGUgIT09IFwidW5kZWZpbmVkXCIpIHsgaWYgKF9jYWNoZS5oYXMoQ2xhc3MpKSByZXR1cm4gX2NhY2hlLmdldChDbGFzcyk7IF9jYWNoZS5zZXQoQ2xhc3MsIFdyYXBwZXIpOyB9IGZ1bmN0aW9uIFdyYXBwZXIoKSB7IHJldHVybiBfY29uc3RydWN0KENsYXNzLCBhcmd1bWVudHMsIF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3Rvcik7IH0gV3JhcHBlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKENsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogV3JhcHBlciwgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihXcmFwcGVyLCBDbGFzcyk7IH07IHJldHVybiBfd3JhcE5hdGl2ZVN1cGVyKENsYXNzKTsgfVxuXG5mdW5jdGlvbiBfY29uc3RydWN0KFBhcmVudCwgYXJncywgQ2xhc3MpIHsgaWYgKF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSkgeyBfY29uc3RydWN0ID0gUmVmbGVjdC5jb25zdHJ1Y3Q7IH0gZWxzZSB7IF9jb25zdHJ1Y3QgPSBmdW5jdGlvbiBfY29uc3RydWN0KFBhcmVudCwgYXJncywgQ2xhc3MpIHsgdmFyIGEgPSBbbnVsbF07IGEucHVzaC5hcHBseShhLCBhcmdzKTsgdmFyIENvbnN0cnVjdG9yID0gRnVuY3Rpb24uYmluZC5hcHBseShQYXJlbnQsIGEpOyB2YXIgaW5zdGFuY2UgPSBuZXcgQ29uc3RydWN0b3IoKTsgaWYgKENsYXNzKSBfc2V0UHJvdG90eXBlT2YoaW5zdGFuY2UsIENsYXNzLnByb3RvdHlwZSk7IHJldHVybiBpbnN0YW5jZTsgfTsgfSByZXR1cm4gX2NvbnN0cnVjdC5hcHBseShudWxsLCBhcmd1bWVudHMpOyB9XG5cbmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH1cblxuZnVuY3Rpb24gX2lzTmF0aXZlRnVuY3Rpb24oZm4pIHsgcmV0dXJuIEZ1bmN0aW9uLnRvU3RyaW5nLmNhbGwoZm4pLmluZGV4T2YoXCJbbmF0aXZlIGNvZGVdXCIpICE9PSAtMTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG5mdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9XG5cbi8vIEZJWE1FOlxuLy8gZmxvd2xpbnQgdW5pbml0aWFsaXplZC1pbnN0YW5jZS1wcm9wZXJ0eTpvZmZcbmltcG9ydCBpc09iamVjdExpa2UgZnJvbSBcIi4uL2pzdXRpbHMvaXNPYmplY3RMaWtlLm1qc1wiO1xuaW1wb3J0IHsgU1lNQk9MX1RPX1NUUklOR19UQUcgfSBmcm9tIFwiLi4vcG9seWZpbGxzL3N5bWJvbHMubWpzXCI7XG5pbXBvcnQgeyBnZXRMb2NhdGlvbiB9IGZyb20gXCIuLi9sYW5ndWFnZS9sb2NhdGlvbi5tanNcIjtcbmltcG9ydCB7IHByaW50TG9jYXRpb24sIHByaW50U291cmNlTG9jYXRpb24gfSBmcm9tIFwiLi4vbGFuZ3VhZ2UvcHJpbnRMb2NhdGlvbi5tanNcIjtcbi8qKlxuICogQSBHcmFwaFFMRXJyb3IgZGVzY3JpYmVzIGFuIEVycm9yIGZvdW5kIGR1cmluZyB0aGUgcGFyc2UsIHZhbGlkYXRlLCBvclxuICogZXhlY3V0ZSBwaGFzZXMgb2YgcGVyZm9ybWluZyBhIEdyYXBoUUwgb3BlcmF0aW9uLiBJbiBhZGRpdGlvbiB0byBhIG1lc3NhZ2VcbiAqIGFuZCBzdGFjayB0cmFjZSwgaXQgYWxzbyBpbmNsdWRlcyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgbG9jYXRpb25zIGluIGFcbiAqIEdyYXBoUUwgZG9jdW1lbnQgYW5kL29yIGV4ZWN1dGlvbiByZXN1bHQgdGhhdCBjb3JyZXNwb25kIHRvIHRoZSBFcnJvci5cbiAqL1xuXG5leHBvcnQgdmFyIEdyYXBoUUxFcnJvciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Vycm9yKSB7XG4gIF9pbmhlcml0cyhHcmFwaFFMRXJyb3IsIF9FcnJvcik7XG5cbiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihHcmFwaFFMRXJyb3IpO1xuXG4gIC8qKlxuICAgKiBBIG1lc3NhZ2UgZGVzY3JpYmluZyB0aGUgRXJyb3IgZm9yIGRlYnVnZ2luZyBwdXJwb3Nlcy5cbiAgICpcbiAgICogRW51bWVyYWJsZSwgYW5kIGFwcGVhcnMgaW4gdGhlIHJlc3VsdCBvZiBKU09OLnN0cmluZ2lmeSgpLlxuICAgKlxuICAgKiBOb3RlOiBzaG91bGQgYmUgdHJlYXRlZCBhcyByZWFkb25seSwgZGVzcGl0ZSBpbnZhcmlhbnQgdXNhZ2UuXG4gICAqL1xuXG4gIC8qKlxuICAgKiBBbiBhcnJheSBvZiB7IGxpbmUsIGNvbHVtbiB9IGxvY2F0aW9ucyB3aXRoaW4gdGhlIHNvdXJjZSBHcmFwaFFMIGRvY3VtZW50XG4gICAqIHdoaWNoIGNvcnJlc3BvbmQgdG8gdGhpcyBlcnJvci5cbiAgICpcbiAgICogRXJyb3JzIGR1cmluZyB2YWxpZGF0aW9uIG9mdGVuIGNvbnRhaW4gbXVsdGlwbGUgbG9jYXRpb25zLCBmb3IgZXhhbXBsZSB0b1xuICAgKiBwb2ludCBvdXQgdHdvIHRoaW5ncyB3aXRoIHRoZSBzYW1lIG5hbWUuIEVycm9ycyBkdXJpbmcgZXhlY3V0aW9uIGluY2x1ZGUgYVxuICAgKiBzaW5nbGUgbG9jYXRpb24sIHRoZSBmaWVsZCB3aGljaCBwcm9kdWNlZCB0aGUgZXJyb3IuXG4gICAqXG4gICAqIEVudW1lcmFibGUsIGFuZCBhcHBlYXJzIGluIHRoZSByZXN1bHQgb2YgSlNPTi5zdHJpbmdpZnkoKS5cbiAgICovXG5cbiAgLyoqXG4gICAqIEFuIGFycmF5IGRlc2NyaWJpbmcgdGhlIEpTT04tcGF0aCBpbnRvIHRoZSBleGVjdXRpb24gcmVzcG9uc2Ugd2hpY2hcbiAgICogY29ycmVzcG9uZHMgdG8gdGhpcyBlcnJvci4gT25seSBpbmNsdWRlZCBmb3IgZXJyb3JzIGR1cmluZyBleGVjdXRpb24uXG4gICAqXG4gICAqIEVudW1lcmFibGUsIGFuZCBhcHBlYXJzIGluIHRoZSByZXN1bHQgb2YgSlNPTi5zdHJpbmdpZnkoKS5cbiAgICovXG5cbiAgLyoqXG4gICAqIEFuIGFycmF5IG9mIEdyYXBoUUwgQVNUIE5vZGVzIGNvcnJlc3BvbmRpbmcgdG8gdGhpcyBlcnJvci5cbiAgICovXG5cbiAgLyoqXG4gICAqIFRoZSBzb3VyY2UgR3JhcGhRTCBkb2N1bWVudCBmb3IgdGhlIGZpcnN0IGxvY2F0aW9uIG9mIHRoaXMgZXJyb3IuXG4gICAqXG4gICAqIE5vdGUgdGhhdCBpZiB0aGlzIEVycm9yIHJlcHJlc2VudHMgbW9yZSB0aGFuIG9uZSBub2RlLCB0aGUgc291cmNlIG1heSBub3RcbiAgICogcmVwcmVzZW50IG5vZGVzIGFmdGVyIHRoZSBmaXJzdCBub2RlLlxuICAgKi9cblxuICAvKipcbiAgICogQW4gYXJyYXkgb2YgY2hhcmFjdGVyIG9mZnNldHMgd2l0aGluIHRoZSBzb3VyY2UgR3JhcGhRTCBkb2N1bWVudFxuICAgKiB3aGljaCBjb3JyZXNwb25kIHRvIHRoaXMgZXJyb3IuXG4gICAqL1xuXG4gIC8qKlxuICAgKiBUaGUgb3JpZ2luYWwgZXJyb3IgdGhyb3duIGZyb20gYSBmaWVsZCByZXNvbHZlciBkdXJpbmcgZXhlY3V0aW9uLlxuICAgKi9cblxuICAvKipcbiAgICogRXh0ZW5zaW9uIGZpZWxkcyB0byBhZGQgdG8gdGhlIGZvcm1hdHRlZCBlcnJvci5cbiAgICovXG4gIGZ1bmN0aW9uIEdyYXBoUUxFcnJvcihtZXNzYWdlLCBub2Rlcywgc291cmNlLCBwb3NpdGlvbnMsIHBhdGgsIG9yaWdpbmFsRXJyb3IsIGV4dGVuc2lvbnMpIHtcbiAgICB2YXIgX2xvY2F0aW9uczIsIF9zb3VyY2UyLCBfcG9zaXRpb25zMiwgX2V4dGVuc2lvbnMyO1xuXG4gICAgdmFyIF90aGlzO1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEdyYXBoUUxFcnJvcik7XG5cbiAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIG1lc3NhZ2UpOyAvLyBDb21wdXRlIGxpc3Qgb2YgYmxhbWUgbm9kZXMuXG5cbiAgICB2YXIgX25vZGVzID0gQXJyYXkuaXNBcnJheShub2RlcykgPyBub2Rlcy5sZW5ndGggIT09IDAgPyBub2RlcyA6IHVuZGVmaW5lZCA6IG5vZGVzID8gW25vZGVzXSA6IHVuZGVmaW5lZDsgLy8gQ29tcHV0ZSBsb2NhdGlvbnMgaW4gdGhlIHNvdXJjZSBmb3IgdGhlIGdpdmVuIG5vZGVzL3Bvc2l0aW9ucy5cblxuXG4gICAgdmFyIF9zb3VyY2UgPSBzb3VyY2U7XG5cbiAgICBpZiAoIV9zb3VyY2UgJiYgX25vZGVzKSB7XG4gICAgICB2YXIgX25vZGVzJDAkbG9jO1xuXG4gICAgICBfc291cmNlID0gKF9ub2RlcyQwJGxvYyA9IF9ub2Rlc1swXS5sb2MpID09PSBudWxsIHx8IF9ub2RlcyQwJGxvYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX25vZGVzJDAkbG9jLnNvdXJjZTtcbiAgICB9XG5cbiAgICB2YXIgX3Bvc2l0aW9ucyA9IHBvc2l0aW9ucztcblxuICAgIGlmICghX3Bvc2l0aW9ucyAmJiBfbm9kZXMpIHtcbiAgICAgIF9wb3NpdGlvbnMgPSBfbm9kZXMucmVkdWNlKGZ1bmN0aW9uIChsaXN0LCBub2RlKSB7XG4gICAgICAgIGlmIChub2RlLmxvYykge1xuICAgICAgICAgIGxpc3QucHVzaChub2RlLmxvYy5zdGFydCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbGlzdDtcbiAgICAgIH0sIFtdKTtcbiAgICB9XG5cbiAgICBpZiAoX3Bvc2l0aW9ucyAmJiBfcG9zaXRpb25zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgX3Bvc2l0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICB2YXIgX2xvY2F0aW9ucztcblxuICAgIGlmIChwb3NpdGlvbnMgJiYgc291cmNlKSB7XG4gICAgICBfbG9jYXRpb25zID0gcG9zaXRpb25zLm1hcChmdW5jdGlvbiAocG9zKSB7XG4gICAgICAgIHJldHVybiBnZXRMb2NhdGlvbihzb3VyY2UsIHBvcyk7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKF9ub2Rlcykge1xuICAgICAgX2xvY2F0aW9ucyA9IF9ub2Rlcy5yZWR1Y2UoZnVuY3Rpb24gKGxpc3QsIG5vZGUpIHtcbiAgICAgICAgaWYgKG5vZGUubG9jKSB7XG4gICAgICAgICAgbGlzdC5wdXNoKGdldExvY2F0aW9uKG5vZGUubG9jLnNvdXJjZSwgbm9kZS5sb2Muc3RhcnQpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBsaXN0O1xuICAgICAgfSwgW10pO1xuICAgIH1cblxuICAgIHZhciBfZXh0ZW5zaW9ucyA9IGV4dGVuc2lvbnM7XG5cbiAgICBpZiAoX2V4dGVuc2lvbnMgPT0gbnVsbCAmJiBvcmlnaW5hbEVycm9yICE9IG51bGwpIHtcbiAgICAgIHZhciBvcmlnaW5hbEV4dGVuc2lvbnMgPSBvcmlnaW5hbEVycm9yLmV4dGVuc2lvbnM7XG5cbiAgICAgIGlmIChpc09iamVjdExpa2Uob3JpZ2luYWxFeHRlbnNpb25zKSkge1xuICAgICAgICBfZXh0ZW5zaW9ucyA9IG9yaWdpbmFsRXh0ZW5zaW9ucztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwge1xuICAgICAgbmFtZToge1xuICAgICAgICB2YWx1ZTogJ0dyYXBoUUxFcnJvcidcbiAgICAgIH0sXG4gICAgICBtZXNzYWdlOiB7XG4gICAgICAgIHZhbHVlOiBtZXNzYWdlLFxuICAgICAgICAvLyBCeSBiZWluZyBlbnVtZXJhYmxlLCBKU09OLnN0cmluZ2lmeSB3aWxsIGluY2x1ZGUgYG1lc3NhZ2VgIGluIHRoZVxuICAgICAgICAvLyByZXN1bHRpbmcgb3V0cHV0LiBUaGlzIGVuc3VyZXMgdGhhdCB0aGUgc2ltcGxlc3QgcG9zc2libGUgR3JhcGhRTFxuICAgICAgICAvLyBzZXJ2aWNlIGFkaGVyZXMgdG8gdGhlIHNwZWMuXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgICB9LFxuICAgICAgbG9jYXRpb25zOiB7XG4gICAgICAgIC8vIENvZXJjaW5nIGZhbHN5IHZhbHVlcyB0byB1bmRlZmluZWQgZW5zdXJlcyB0aGV5IHdpbGwgbm90IGJlIGluY2x1ZGVkXG4gICAgICAgIC8vIGluIEpTT04uc3RyaW5naWZ5KCkgd2hlbiBub3QgcHJvdmlkZWQuXG4gICAgICAgIHZhbHVlOiAoX2xvY2F0aW9uczIgPSBfbG9jYXRpb25zKSAhPT0gbnVsbCAmJiBfbG9jYXRpb25zMiAhPT0gdm9pZCAwID8gX2xvY2F0aW9uczIgOiB1bmRlZmluZWQsXG4gICAgICAgIC8vIEJ5IGJlaW5nIGVudW1lcmFibGUsIEpTT04uc3RyaW5naWZ5IHdpbGwgaW5jbHVkZSBgbG9jYXRpb25zYCBpbiB0aGVcbiAgICAgICAgLy8gcmVzdWx0aW5nIG91dHB1dC4gVGhpcyBlbnN1cmVzIHRoYXQgdGhlIHNpbXBsZXN0IHBvc3NpYmxlIEdyYXBoUUxcbiAgICAgICAgLy8gc2VydmljZSBhZGhlcmVzIHRvIHRoZSBzcGVjLlxuICAgICAgICBlbnVtZXJhYmxlOiBfbG9jYXRpb25zICE9IG51bGxcbiAgICAgIH0sXG4gICAgICBwYXRoOiB7XG4gICAgICAgIC8vIENvZXJjaW5nIGZhbHN5IHZhbHVlcyB0byB1bmRlZmluZWQgZW5zdXJlcyB0aGV5IHdpbGwgbm90IGJlIGluY2x1ZGVkXG4gICAgICAgIC8vIGluIEpTT04uc3RyaW5naWZ5KCkgd2hlbiBub3QgcHJvdmlkZWQuXG4gICAgICAgIHZhbHVlOiBwYXRoICE9PSBudWxsICYmIHBhdGggIT09IHZvaWQgMCA/IHBhdGggOiB1bmRlZmluZWQsXG4gICAgICAgIC8vIEJ5IGJlaW5nIGVudW1lcmFibGUsIEpTT04uc3RyaW5naWZ5IHdpbGwgaW5jbHVkZSBgcGF0aGAgaW4gdGhlXG4gICAgICAgIC8vIHJlc3VsdGluZyBvdXRwdXQuIFRoaXMgZW5zdXJlcyB0aGF0IHRoZSBzaW1wbGVzdCBwb3NzaWJsZSBHcmFwaFFMXG4gICAgICAgIC8vIHNlcnZpY2UgYWRoZXJlcyB0byB0aGUgc3BlYy5cbiAgICAgICAgZW51bWVyYWJsZTogcGF0aCAhPSBudWxsXG4gICAgICB9LFxuICAgICAgbm9kZXM6IHtcbiAgICAgICAgdmFsdWU6IF9ub2RlcyAhPT0gbnVsbCAmJiBfbm9kZXMgIT09IHZvaWQgMCA/IF9ub2RlcyA6IHVuZGVmaW5lZFxuICAgICAgfSxcbiAgICAgIHNvdXJjZToge1xuICAgICAgICB2YWx1ZTogKF9zb3VyY2UyID0gX3NvdXJjZSkgIT09IG51bGwgJiYgX3NvdXJjZTIgIT09IHZvaWQgMCA/IF9zb3VyY2UyIDogdW5kZWZpbmVkXG4gICAgICB9LFxuICAgICAgcG9zaXRpb25zOiB7XG4gICAgICAgIHZhbHVlOiAoX3Bvc2l0aW9uczIgPSBfcG9zaXRpb25zKSAhPT0gbnVsbCAmJiBfcG9zaXRpb25zMiAhPT0gdm9pZCAwID8gX3Bvc2l0aW9uczIgOiB1bmRlZmluZWRcbiAgICAgIH0sXG4gICAgICBvcmlnaW5hbEVycm9yOiB7XG4gICAgICAgIHZhbHVlOiBvcmlnaW5hbEVycm9yXG4gICAgICB9LFxuICAgICAgZXh0ZW5zaW9uczoge1xuICAgICAgICAvLyBDb2VyY2luZyBmYWxzeSB2YWx1ZXMgdG8gdW5kZWZpbmVkIGVuc3VyZXMgdGhleSB3aWxsIG5vdCBiZSBpbmNsdWRlZFxuICAgICAgICAvLyBpbiBKU09OLnN0cmluZ2lmeSgpIHdoZW4gbm90IHByb3ZpZGVkLlxuICAgICAgICB2YWx1ZTogKF9leHRlbnNpb25zMiA9IF9leHRlbnNpb25zKSAhPT0gbnVsbCAmJiBfZXh0ZW5zaW9uczIgIT09IHZvaWQgMCA/IF9leHRlbnNpb25zMiA6IHVuZGVmaW5lZCxcbiAgICAgICAgLy8gQnkgYmVpbmcgZW51bWVyYWJsZSwgSlNPTi5zdHJpbmdpZnkgd2lsbCBpbmNsdWRlIGBwYXRoYCBpbiB0aGVcbiAgICAgICAgLy8gcmVzdWx0aW5nIG91dHB1dC4gVGhpcyBlbnN1cmVzIHRoYXQgdGhlIHNpbXBsZXN0IHBvc3NpYmxlIEdyYXBoUUxcbiAgICAgICAgLy8gc2VydmljZSBhZGhlcmVzIHRvIHRoZSBzcGVjLlxuICAgICAgICBlbnVtZXJhYmxlOiBfZXh0ZW5zaW9ucyAhPSBudWxsXG4gICAgICB9XG4gICAgfSk7IC8vIEluY2x1ZGUgKG5vbi1lbnVtZXJhYmxlKSBzdGFjayB0cmFjZS5cblxuICAgIGlmIChvcmlnaW5hbEVycm9yICE9PSBudWxsICYmIG9yaWdpbmFsRXJyb3IgIT09IHZvaWQgMCAmJiBvcmlnaW5hbEVycm9yLnN0YWNrKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICdzdGFjaycsIHtcbiAgICAgICAgdmFsdWU6IG9yaWdpbmFsRXJyb3Iuc3RhY2ssXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzKTtcbiAgICB9IC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0IChTZWU6ICdodHRwczovL2dpdGh1Yi5jb20vZ3JhcGhxbC9ncmFwaHFsLWpzL2lzc3Vlcy8yMzE3JylcblxuXG4gICAgaWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKSB7XG4gICAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgR3JhcGhRTEVycm9yKTtcbiAgICB9IGVsc2Uge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCAnc3RhY2snLCB7XG4gICAgICAgIHZhbHVlOiBFcnJvcigpLnN0YWNrLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoR3JhcGhRTEVycm9yLCBbe1xuICAgIGtleTogXCJ0b1N0cmluZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgIHJldHVybiBwcmludEVycm9yKHRoaXMpO1xuICAgIH0gLy8gRklYTUU6IHdvcmthcm91bmQgdG8gbm90IGJyZWFrIGNoYWkgY29tcGFyaXNvbnMsIHNob3VsZCBiZSByZW1vdmUgaW4gdjE2XG4gICAgLy8gJEZsb3dGaXhNZVt1bnN1cHBvcnRlZC1zeW50YXhdIEZsb3cgZG9lc24ndCBzdXBwb3J0IGNvbXB1dGVkIHByb3BlcnRpZXMgeWV0XG5cbiAgfSwge1xuICAgIGtleTogU1lNQk9MX1RPX1NUUklOR19UQUcsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gJ09iamVjdCc7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEdyYXBoUUxFcnJvcjtcbn0oIC8qI19fUFVSRV9fKi9fd3JhcE5hdGl2ZVN1cGVyKEVycm9yKSk7XG4vKipcbiAqIFByaW50cyBhIEdyYXBoUUxFcnJvciB0byBhIHN0cmluZywgcmVwcmVzZW50aW5nIHVzZWZ1bCBsb2NhdGlvbiBpbmZvcm1hdGlvblxuICogYWJvdXQgdGhlIGVycm9yJ3MgcG9zaXRpb24gaW4gdGhlIHNvdXJjZS5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcHJpbnRFcnJvcihlcnJvcikge1xuICB2YXIgb3V0cHV0ID0gZXJyb3IubWVzc2FnZTtcblxuICBpZiAoZXJyb3Iubm9kZXMpIHtcbiAgICBmb3IgKHZhciBfaTIgPSAwLCBfZXJyb3Ikbm9kZXMyID0gZXJyb3Iubm9kZXM7IF9pMiA8IF9lcnJvciRub2RlczIubGVuZ3RoOyBfaTIrKykge1xuICAgICAgdmFyIG5vZGUgPSBfZXJyb3Ikbm9kZXMyW19pMl07XG5cbiAgICAgIGlmIChub2RlLmxvYykge1xuICAgICAgICBvdXRwdXQgKz0gJ1xcblxcbicgKyBwcmludExvY2F0aW9uKG5vZGUubG9jKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoZXJyb3Iuc291cmNlICYmIGVycm9yLmxvY2F0aW9ucykge1xuICAgIGZvciAodmFyIF9pNCA9IDAsIF9lcnJvciRsb2NhdGlvbnMyID0gZXJyb3IubG9jYXRpb25zOyBfaTQgPCBfZXJyb3IkbG9jYXRpb25zMi5sZW5ndGg7IF9pNCsrKSB7XG4gICAgICB2YXIgbG9jYXRpb24gPSBfZXJyb3IkbG9jYXRpb25zMltfaTRdO1xuICAgICAgb3V0cHV0ICs9ICdcXG5cXG4nICsgcHJpbnRTb3VyY2VMb2NhdGlvbihlcnJvci5zb3VyY2UsIGxvY2F0aW9uKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb3V0cHV0O1xufVxuIiwiaW1wb3J0IGRldkFzc2VydCBmcm9tIFwiLi4vanN1dGlscy9kZXZBc3NlcnQubWpzXCI7XG5cbi8qKlxuICogR2l2ZW4gYSBHcmFwaFFMRXJyb3IsIGZvcm1hdCBpdCBhY2NvcmRpbmcgdG8gdGhlIHJ1bGVzIGRlc2NyaWJlZCBieSB0aGVcbiAqIFJlc3BvbnNlIEZvcm1hdCwgRXJyb3JzIHNlY3Rpb24gb2YgdGhlIEdyYXBoUUwgU3BlY2lmaWNhdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdEVycm9yKGVycm9yKSB7XG4gIHZhciBfZXJyb3IkbWVzc2FnZTtcblxuICBlcnJvciB8fCBkZXZBc3NlcnQoMCwgJ1JlY2VpdmVkIG51bGwgb3IgdW5kZWZpbmVkIGVycm9yLicpO1xuICB2YXIgbWVzc2FnZSA9IChfZXJyb3IkbWVzc2FnZSA9IGVycm9yLm1lc3NhZ2UpICE9PSBudWxsICYmIF9lcnJvciRtZXNzYWdlICE9PSB2b2lkIDAgPyBfZXJyb3IkbWVzc2FnZSA6ICdBbiB1bmtub3duIGVycm9yIG9jY3VycmVkLic7XG4gIHZhciBsb2NhdGlvbnMgPSBlcnJvci5sb2NhdGlvbnM7XG4gIHZhciBwYXRoID0gZXJyb3IucGF0aDtcbiAgdmFyIGV4dGVuc2lvbnMgPSBlcnJvci5leHRlbnNpb25zO1xuICByZXR1cm4gZXh0ZW5zaW9ucyA/IHtcbiAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgIGxvY2F0aW9uczogbG9jYXRpb25zLFxuICAgIHBhdGg6IHBhdGgsXG4gICAgZXh0ZW5zaW9uczogZXh0ZW5zaW9uc1xuICB9IDoge1xuICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgbG9jYXRpb25zOiBsb2NhdGlvbnMsXG4gICAgcGF0aDogcGF0aFxuICB9O1xufVxuLyoqXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ncmFwaHFsL2dyYXBocWwtc3BlYy9ibG9iL21hc3Rlci9zcGVjL1NlY3Rpb24lMjA3JTIwLS0lMjBSZXNwb25zZS5tZCNlcnJvcnNcbiAqL1xuIiwiaW1wb3J0IGluc3BlY3QgZnJvbSBcIi4uL2pzdXRpbHMvaW5zcGVjdC5tanNcIjtcbmltcG9ydCB7IEdyYXBoUUxFcnJvciB9IGZyb20gXCIuL0dyYXBoUUxFcnJvci5tanNcIjtcbi8qKlxuICogR2l2ZW4gYW4gYXJiaXRyYXJ5IHZhbHVlLCBwcmVzdW1hYmx5IHRocm93biB3aGlsZSBhdHRlbXB0aW5nIHRvIGV4ZWN1dGUgYVxuICogR3JhcGhRTCBvcGVyYXRpb24sIHByb2R1Y2UgYSBuZXcgR3JhcGhRTEVycm9yIGF3YXJlIG9mIHRoZSBsb2NhdGlvbiBpbiB0aGVcbiAqIGRvY3VtZW50IHJlc3BvbnNpYmxlIGZvciB0aGUgb3JpZ2luYWwgRXJyb3IuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGxvY2F0ZWRFcnJvcihyYXdPcmlnaW5hbEVycm9yLCBub2RlcywgcGF0aCkge1xuICB2YXIgX25vZGVzO1xuXG4gIC8vIFNvbWV0aW1lcyBhIG5vbi1lcnJvciBpcyB0aHJvd24sIHdyYXAgaXQgYXMgYW4gRXJyb3IgaW5zdGFuY2UgdG8gZW5zdXJlIGEgY29uc2lzdGVudCBFcnJvciBpbnRlcmZhY2UuXG4gIHZhciBvcmlnaW5hbEVycm9yID0gcmF3T3JpZ2luYWxFcnJvciBpbnN0YW5jZW9mIEVycm9yID8gcmF3T3JpZ2luYWxFcnJvciA6IG5ldyBFcnJvcignVW5leHBlY3RlZCBlcnJvciB2YWx1ZTogJyArIGluc3BlY3QocmF3T3JpZ2luYWxFcnJvcikpOyAvLyBOb3RlOiB0aGlzIHVzZXMgYSBicmFuZC1jaGVjayB0byBzdXBwb3J0IEdyYXBoUUwgZXJyb3JzIG9yaWdpbmF0aW5nIGZyb20gb3RoZXIgY29udGV4dHMuXG5cbiAgaWYgKEFycmF5LmlzQXJyYXkob3JpZ2luYWxFcnJvci5wYXRoKSkge1xuICAgIHJldHVybiBvcmlnaW5hbEVycm9yO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBHcmFwaFFMRXJyb3Iob3JpZ2luYWxFcnJvci5tZXNzYWdlLCAoX25vZGVzID0gb3JpZ2luYWxFcnJvci5ub2RlcykgIT09IG51bGwgJiYgX25vZGVzICE9PSB2b2lkIDAgPyBfbm9kZXMgOiBub2Rlcywgb3JpZ2luYWxFcnJvci5zb3VyY2UsIG9yaWdpbmFsRXJyb3IucG9zaXRpb25zLCBwYXRoLCBvcmlnaW5hbEVycm9yKTtcbn1cbiIsImltcG9ydCB7IEdyYXBoUUxFcnJvciB9IGZyb20gXCIuL0dyYXBoUUxFcnJvci5tanNcIjtcbi8qKlxuICogUHJvZHVjZXMgYSBHcmFwaFFMRXJyb3IgcmVwcmVzZW50aW5nIGEgc3ludGF4IGVycm9yLCBjb250YWluaW5nIHVzZWZ1bFxuICogZGVzY3JpcHRpdmUgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHN5bnRheCBlcnJvcidzIHBvc2l0aW9uIGluIHRoZSBzb3VyY2UuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHN5bnRheEVycm9yKHNvdXJjZSwgcG9zaXRpb24sIGRlc2NyaXB0aW9uKSB7XG4gIHJldHVybiBuZXcgR3JhcGhRTEVycm9yKFwiU3ludGF4IEVycm9yOiBcIi5jb25jYXQoZGVzY3JpcHRpb24pLCB1bmRlZmluZWQsIHNvdXJjZSwgW3Bvc2l0aW9uXSk7XG59XG4iLCJpbXBvcnQgaW5zcGVjdCBmcm9tIFwiLi4vanN1dGlscy9pbnNwZWN0Lm1qc1wiO1xuaW1wb3J0IG1lbW9pemUzIGZyb20gXCIuLi9qc3V0aWxzL21lbW9pemUzLm1qc1wiO1xuaW1wb3J0IGludmFyaWFudCBmcm9tIFwiLi4vanN1dGlscy9pbnZhcmlhbnQubWpzXCI7XG5pbXBvcnQgZGV2QXNzZXJ0IGZyb20gXCIuLi9qc3V0aWxzL2RldkFzc2VydC5tanNcIjtcbmltcG9ydCBpc1Byb21pc2UgZnJvbSBcIi4uL2pzdXRpbHMvaXNQcm9taXNlLm1qc1wiO1xuaW1wb3J0IGlzT2JqZWN0TGlrZSBmcm9tIFwiLi4vanN1dGlscy9pc09iamVjdExpa2UubWpzXCI7XG5pbXBvcnQgc2FmZUFycmF5RnJvbSBmcm9tIFwiLi4vanN1dGlscy9zYWZlQXJyYXlGcm9tLm1qc1wiO1xuaW1wb3J0IHByb21pc2VSZWR1Y2UgZnJvbSBcIi4uL2pzdXRpbHMvcHJvbWlzZVJlZHVjZS5tanNcIjtcbmltcG9ydCBwcm9taXNlRm9yT2JqZWN0IGZyb20gXCIuLi9qc3V0aWxzL3Byb21pc2VGb3JPYmplY3QubWpzXCI7XG5pbXBvcnQgeyBhZGRQYXRoLCBwYXRoVG9BcnJheSB9IGZyb20gXCIuLi9qc3V0aWxzL1BhdGgubWpzXCI7XG5pbXBvcnQgeyBHcmFwaFFMRXJyb3IgfSBmcm9tIFwiLi4vZXJyb3IvR3JhcGhRTEVycm9yLm1qc1wiO1xuaW1wb3J0IHsgbG9jYXRlZEVycm9yIH0gZnJvbSBcIi4uL2Vycm9yL2xvY2F0ZWRFcnJvci5tanNcIjtcbmltcG9ydCB7IEtpbmQgfSBmcm9tIFwiLi4vbGFuZ3VhZ2Uva2luZHMubWpzXCI7XG5pbXBvcnQgeyBhc3NlcnRWYWxpZFNjaGVtYSB9IGZyb20gXCIuLi90eXBlL3ZhbGlkYXRlLm1qc1wiO1xuaW1wb3J0IHsgU2NoZW1hTWV0YUZpZWxkRGVmLCBUeXBlTWV0YUZpZWxkRGVmLCBUeXBlTmFtZU1ldGFGaWVsZERlZiB9IGZyb20gXCIuLi90eXBlL2ludHJvc3BlY3Rpb24ubWpzXCI7XG5pbXBvcnQgeyBHcmFwaFFMSW5jbHVkZURpcmVjdGl2ZSwgR3JhcGhRTFNraXBEaXJlY3RpdmUgfSBmcm9tIFwiLi4vdHlwZS9kaXJlY3RpdmVzLm1qc1wiO1xuaW1wb3J0IHsgaXNOYW1lZFR5cGUsIGlzT2JqZWN0VHlwZSwgaXNBYnN0cmFjdFR5cGUsIGlzTGVhZlR5cGUsIGlzTGlzdFR5cGUsIGlzTm9uTnVsbFR5cGUgfSBmcm9tIFwiLi4vdHlwZS9kZWZpbml0aW9uLm1qc1wiO1xuaW1wb3J0IHsgdHlwZUZyb21BU1QgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3R5cGVGcm9tQVNULm1qc1wiO1xuaW1wb3J0IHsgZ2V0T3BlcmF0aW9uUm9vdFR5cGUgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2dldE9wZXJhdGlvblJvb3RUeXBlLm1qc1wiO1xuaW1wb3J0IHsgZ2V0VmFyaWFibGVWYWx1ZXMsIGdldEFyZ3VtZW50VmFsdWVzLCBnZXREaXJlY3RpdmVWYWx1ZXMgfSBmcm9tIFwiLi92YWx1ZXMubWpzXCI7XG4vKipcbiAqIFRlcm1pbm9sb2d5XG4gKlxuICogXCJEZWZpbml0aW9uc1wiIGFyZSB0aGUgZ2VuZXJpYyBuYW1lIGZvciB0b3AtbGV2ZWwgc3RhdGVtZW50cyBpbiB0aGUgZG9jdW1lbnQuXG4gKiBFeGFtcGxlcyBvZiB0aGlzIGluY2x1ZGU6XG4gKiAxKSBPcGVyYXRpb25zIChzdWNoIGFzIGEgcXVlcnkpXG4gKiAyKSBGcmFnbWVudHNcbiAqXG4gKiBcIk9wZXJhdGlvbnNcIiBhcmUgYSBnZW5lcmljIG5hbWUgZm9yIHJlcXVlc3RzIGluIHRoZSBkb2N1bWVudC5cbiAqIEV4YW1wbGVzIG9mIHRoaXMgaW5jbHVkZTpcbiAqIDEpIHF1ZXJ5LFxuICogMikgbXV0YXRpb25cbiAqXG4gKiBcIlNlbGVjdGlvbnNcIiBhcmUgdGhlIGRlZmluaXRpb25zIHRoYXQgY2FuIGFwcGVhciBsZWdhbGx5IGFuZCBhdFxuICogc2luZ2xlIGxldmVsIG9mIHRoZSBxdWVyeS4gVGhlc2UgaW5jbHVkZTpcbiAqIDEpIGZpZWxkIHJlZmVyZW5jZXMgZS5nIFwiYVwiXG4gKiAyKSBmcmFnbWVudCBcInNwcmVhZHNcIiBlLmcuIFwiLi4uY1wiXG4gKiAzKSBpbmxpbmUgZnJhZ21lbnQgXCJzcHJlYWRzXCIgZS5nLiBcIi4uLm9uIFR5cGUgeyBhIH1cIlxuICovXG5cbi8qKlxuICogRGF0YSB0aGF0IG11c3QgYmUgYXZhaWxhYmxlIGF0IGFsbCBwb2ludHMgZHVyaW5nIHF1ZXJ5IGV4ZWN1dGlvbi5cbiAqXG4gKiBOYW1lbHksIHNjaGVtYSBvZiB0aGUgdHlwZSBzeXN0ZW0gdGhhdCBpcyBjdXJyZW50bHkgZXhlY3V0aW5nLFxuICogYW5kIHRoZSBmcmFnbWVudHMgZGVmaW5lZCBpbiB0aGUgcXVlcnkgZG9jdW1lbnRcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZXhlY3V0ZShhcmdzT3JTY2hlbWEsIGRvY3VtZW50LCByb290VmFsdWUsIGNvbnRleHRWYWx1ZSwgdmFyaWFibGVWYWx1ZXMsIG9wZXJhdGlvbk5hbWUsIGZpZWxkUmVzb2x2ZXIsIHR5cGVSZXNvbHZlcikge1xuICAvKiBlc2xpbnQtZW5hYmxlIG5vLXJlZGVjbGFyZSAqL1xuICAvLyBFeHRyYWN0IGFyZ3VtZW50cyBmcm9tIG9iamVjdCBhcmdzIGlmIHByb3ZpZGVkLlxuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGV4ZWN1dGVJbXBsKGFyZ3NPclNjaGVtYSkgOiBleGVjdXRlSW1wbCh7XG4gICAgc2NoZW1hOiBhcmdzT3JTY2hlbWEsXG4gICAgZG9jdW1lbnQ6IGRvY3VtZW50LFxuICAgIHJvb3RWYWx1ZTogcm9vdFZhbHVlLFxuICAgIGNvbnRleHRWYWx1ZTogY29udGV4dFZhbHVlLFxuICAgIHZhcmlhYmxlVmFsdWVzOiB2YXJpYWJsZVZhbHVlcyxcbiAgICBvcGVyYXRpb25OYW1lOiBvcGVyYXRpb25OYW1lLFxuICAgIGZpZWxkUmVzb2x2ZXI6IGZpZWxkUmVzb2x2ZXIsXG4gICAgdHlwZVJlc29sdmVyOiB0eXBlUmVzb2x2ZXJcbiAgfSk7XG59XG4vKipcbiAqIEFsc28gaW1wbGVtZW50cyB0aGUgXCJFdmFsdWF0aW5nIHJlcXVlc3RzXCIgc2VjdGlvbiBvZiB0aGUgR3JhcGhRTCBzcGVjaWZpY2F0aW9uLlxuICogSG93ZXZlciwgaXQgZ3VhcmFudGVlcyB0byBjb21wbGV0ZSBzeW5jaHJvbm91c2x5IChvciB0aHJvdyBhbiBlcnJvcikgYXNzdW1pbmdcbiAqIHRoYXQgYWxsIGZpZWxkIHJlc29sdmVycyBhcmUgYWxzbyBzeW5jaHJvbm91cy5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZXhlY3V0ZVN5bmMoYXJncykge1xuICB2YXIgcmVzdWx0ID0gZXhlY3V0ZUltcGwoYXJncyk7IC8vIEFzc2VydCB0aGF0IHRoZSBleGVjdXRpb24gd2FzIHN5bmNocm9ub3VzLlxuXG4gIGlmIChpc1Byb21pc2UocmVzdWx0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcignR3JhcGhRTCBleGVjdXRpb24gZmFpbGVkIHRvIGNvbXBsZXRlIHN5bmNocm9ub3VzbHkuJyk7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBleGVjdXRlSW1wbChhcmdzKSB7XG4gIHZhciBzY2hlbWEgPSBhcmdzLnNjaGVtYSxcbiAgICAgIGRvY3VtZW50ID0gYXJncy5kb2N1bWVudCxcbiAgICAgIHJvb3RWYWx1ZSA9IGFyZ3Mucm9vdFZhbHVlLFxuICAgICAgY29udGV4dFZhbHVlID0gYXJncy5jb250ZXh0VmFsdWUsXG4gICAgICB2YXJpYWJsZVZhbHVlcyA9IGFyZ3MudmFyaWFibGVWYWx1ZXMsXG4gICAgICBvcGVyYXRpb25OYW1lID0gYXJncy5vcGVyYXRpb25OYW1lLFxuICAgICAgZmllbGRSZXNvbHZlciA9IGFyZ3MuZmllbGRSZXNvbHZlcixcbiAgICAgIHR5cGVSZXNvbHZlciA9IGFyZ3MudHlwZVJlc29sdmVyOyAvLyBJZiBhcmd1bWVudHMgYXJlIG1pc3Npbmcgb3IgaW5jb3JyZWN0LCB0aHJvdyBhbiBlcnJvci5cblxuICBhc3NlcnRWYWxpZEV4ZWN1dGlvbkFyZ3VtZW50cyhzY2hlbWEsIGRvY3VtZW50LCB2YXJpYWJsZVZhbHVlcyk7IC8vIElmIGEgdmFsaWQgZXhlY3V0aW9uIGNvbnRleHQgY2Fubm90IGJlIGNyZWF0ZWQgZHVlIHRvIGluY29ycmVjdCBhcmd1bWVudHMsXG4gIC8vIGEgXCJSZXNwb25zZVwiIHdpdGggb25seSBlcnJvcnMgaXMgcmV0dXJuZWQuXG5cbiAgdmFyIGV4ZUNvbnRleHQgPSBidWlsZEV4ZWN1dGlvbkNvbnRleHQoc2NoZW1hLCBkb2N1bWVudCwgcm9vdFZhbHVlLCBjb250ZXh0VmFsdWUsIHZhcmlhYmxlVmFsdWVzLCBvcGVyYXRpb25OYW1lLCBmaWVsZFJlc29sdmVyLCB0eXBlUmVzb2x2ZXIpOyAvLyBSZXR1cm4gZWFybHkgZXJyb3JzIGlmIGV4ZWN1dGlvbiBjb250ZXh0IGZhaWxlZC5cblxuICBpZiAoQXJyYXkuaXNBcnJheShleGVDb250ZXh0KSkge1xuICAgIHJldHVybiB7XG4gICAgICBlcnJvcnM6IGV4ZUNvbnRleHRcbiAgICB9O1xuICB9IC8vIFJldHVybiBhIFByb21pc2UgdGhhdCB3aWxsIGV2ZW50dWFsbHkgcmVzb2x2ZSB0byB0aGUgZGF0YSBkZXNjcmliZWQgYnlcbiAgLy8gVGhlIFwiUmVzcG9uc2VcIiBzZWN0aW9uIG9mIHRoZSBHcmFwaFFMIHNwZWNpZmljYXRpb24uXG4gIC8vXG4gIC8vIElmIGVycm9ycyBhcmUgZW5jb3VudGVyZWQgd2hpbGUgZXhlY3V0aW5nIGEgR3JhcGhRTCBmaWVsZCwgb25seSB0aGF0XG4gIC8vIGZpZWxkIGFuZCBpdHMgZGVzY2VuZGFudHMgd2lsbCBiZSBvbWl0dGVkLCBhbmQgc2libGluZyBmaWVsZHMgd2lsbCBzdGlsbFxuICAvLyBiZSBleGVjdXRlZC4gQW4gZXhlY3V0aW9uIHdoaWNoIGVuY291bnRlcnMgZXJyb3JzIHdpbGwgc3RpbGwgcmVzdWx0IGluIGFcbiAgLy8gcmVzb2x2ZWQgUHJvbWlzZS5cblxuXG4gIHZhciBkYXRhID0gZXhlY3V0ZU9wZXJhdGlvbihleGVDb250ZXh0LCBleGVDb250ZXh0Lm9wZXJhdGlvbiwgcm9vdFZhbHVlKTtcbiAgcmV0dXJuIGJ1aWxkUmVzcG9uc2UoZXhlQ29udGV4dCwgZGF0YSk7XG59XG4vKipcbiAqIEdpdmVuIGEgY29tcGxldGVkIGV4ZWN1dGlvbiBjb250ZXh0IGFuZCBkYXRhLCBidWlsZCB0aGUgeyBlcnJvcnMsIGRhdGEgfVxuICogcmVzcG9uc2UgZGVmaW5lZCBieSB0aGUgXCJSZXNwb25zZVwiIHNlY3Rpb24gb2YgdGhlIEdyYXBoUUwgc3BlY2lmaWNhdGlvbi5cbiAqL1xuXG5cbmZ1bmN0aW9uIGJ1aWxkUmVzcG9uc2UoZXhlQ29udGV4dCwgZGF0YSkge1xuICBpZiAoaXNQcm9taXNlKGRhdGEpKSB7XG4gICAgcmV0dXJuIGRhdGEudGhlbihmdW5jdGlvbiAocmVzb2x2ZWQpIHtcbiAgICAgIHJldHVybiBidWlsZFJlc3BvbnNlKGV4ZUNvbnRleHQsIHJlc29sdmVkKTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBleGVDb250ZXh0LmVycm9ycy5sZW5ndGggPT09IDAgPyB7XG4gICAgZGF0YTogZGF0YVxuICB9IDoge1xuICAgIGVycm9yczogZXhlQ29udGV4dC5lcnJvcnMsXG4gICAgZGF0YTogZGF0YVxuICB9O1xufVxuLyoqXG4gKiBFc3NlbnRpYWwgYXNzZXJ0aW9ucyBiZWZvcmUgZXhlY3V0aW5nIHRvIHByb3ZpZGUgZGV2ZWxvcGVyIGZlZWRiYWNrIGZvclxuICogaW1wcm9wZXIgdXNlIG9mIHRoZSBHcmFwaFFMIGxpYnJhcnkuXG4gKlxuICogQGludGVybmFsXG4gKi9cblxuXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0VmFsaWRFeGVjdXRpb25Bcmd1bWVudHMoc2NoZW1hLCBkb2N1bWVudCwgcmF3VmFyaWFibGVWYWx1ZXMpIHtcbiAgZG9jdW1lbnQgfHwgZGV2QXNzZXJ0KDAsICdNdXN0IHByb3ZpZGUgZG9jdW1lbnQuJyk7IC8vIElmIHRoZSBzY2hlbWEgdXNlZCBmb3IgZXhlY3V0aW9uIGlzIGludmFsaWQsIHRocm93IGFuIGVycm9yLlxuXG4gIGFzc2VydFZhbGlkU2NoZW1hKHNjaGVtYSk7IC8vIFZhcmlhYmxlcywgaWYgcHJvdmlkZWQsIG11c3QgYmUgYW4gb2JqZWN0LlxuXG4gIHJhd1ZhcmlhYmxlVmFsdWVzID09IG51bGwgfHwgaXNPYmplY3RMaWtlKHJhd1ZhcmlhYmxlVmFsdWVzKSB8fCBkZXZBc3NlcnQoMCwgJ1ZhcmlhYmxlcyBtdXN0IGJlIHByb3ZpZGVkIGFzIGFuIE9iamVjdCB3aGVyZSBlYWNoIHByb3BlcnR5IGlzIGEgdmFyaWFibGUgdmFsdWUuIFBlcmhhcHMgbG9vayB0byBzZWUgaWYgYW4gdW5wYXJzZWQgSlNPTiBzdHJpbmcgd2FzIHByb3ZpZGVkLicpO1xufVxuLyoqXG4gKiBDb25zdHJ1Y3RzIGEgRXhlY3V0aW9uQ29udGV4dCBvYmplY3QgZnJvbSB0aGUgYXJndW1lbnRzIHBhc3NlZCB0b1xuICogZXhlY3V0ZSwgd2hpY2ggd2Ugd2lsbCBwYXNzIHRocm91Z2hvdXQgdGhlIG90aGVyIGV4ZWN1dGlvbiBtZXRob2RzLlxuICpcbiAqIFRocm93cyBhIEdyYXBoUUxFcnJvciBpZiBhIHZhbGlkIGV4ZWN1dGlvbiBjb250ZXh0IGNhbm5vdCBiZSBjcmVhdGVkLlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBidWlsZEV4ZWN1dGlvbkNvbnRleHQoc2NoZW1hLCBkb2N1bWVudCwgcm9vdFZhbHVlLCBjb250ZXh0VmFsdWUsIHJhd1ZhcmlhYmxlVmFsdWVzLCBvcGVyYXRpb25OYW1lLCBmaWVsZFJlc29sdmVyLCB0eXBlUmVzb2x2ZXIpIHtcbiAgdmFyIF9kZWZpbml0aW9uJG5hbWUsIF9vcGVyYXRpb24kdmFyaWFibGVEZTtcblxuICB2YXIgb3BlcmF0aW9uO1xuICB2YXIgZnJhZ21lbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICBmb3IgKHZhciBfaTIgPSAwLCBfZG9jdW1lbnQkZGVmaW5pdGlvbnMyID0gZG9jdW1lbnQuZGVmaW5pdGlvbnM7IF9pMiA8IF9kb2N1bWVudCRkZWZpbml0aW9uczIubGVuZ3RoOyBfaTIrKykge1xuICAgIHZhciBkZWZpbml0aW9uID0gX2RvY3VtZW50JGRlZmluaXRpb25zMltfaTJdO1xuXG4gICAgc3dpdGNoIChkZWZpbml0aW9uLmtpbmQpIHtcbiAgICAgIGNhc2UgS2luZC5PUEVSQVRJT05fREVGSU5JVElPTjpcbiAgICAgICAgaWYgKG9wZXJhdGlvbk5hbWUgPT0gbnVsbCkge1xuICAgICAgICAgIGlmIChvcGVyYXRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIFtuZXcgR3JhcGhRTEVycm9yKCdNdXN0IHByb3ZpZGUgb3BlcmF0aW9uIG5hbWUgaWYgcXVlcnkgY29udGFpbnMgbXVsdGlwbGUgb3BlcmF0aW9ucy4nKV07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgb3BlcmF0aW9uID0gZGVmaW5pdGlvbjtcbiAgICAgICAgfSBlbHNlIGlmICgoKF9kZWZpbml0aW9uJG5hbWUgPSBkZWZpbml0aW9uLm5hbWUpID09PSBudWxsIHx8IF9kZWZpbml0aW9uJG5hbWUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kZWZpbml0aW9uJG5hbWUudmFsdWUpID09PSBvcGVyYXRpb25OYW1lKSB7XG4gICAgICAgICAgb3BlcmF0aW9uID0gZGVmaW5pdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIEtpbmQuRlJBR01FTlRfREVGSU5JVElPTjpcbiAgICAgICAgZnJhZ21lbnRzW2RlZmluaXRpb24ubmFtZS52YWx1ZV0gPSBkZWZpbml0aW9uO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBpZiAoIW9wZXJhdGlvbikge1xuICAgIGlmIChvcGVyYXRpb25OYW1lICE9IG51bGwpIHtcbiAgICAgIHJldHVybiBbbmV3IEdyYXBoUUxFcnJvcihcIlVua25vd24gb3BlcmF0aW9uIG5hbWVkIFxcXCJcIi5jb25jYXQob3BlcmF0aW9uTmFtZSwgXCJcXFwiLlwiKSldO1xuICAgIH1cblxuICAgIHJldHVybiBbbmV3IEdyYXBoUUxFcnJvcignTXVzdCBwcm92aWRlIGFuIG9wZXJhdGlvbi4nKV07XG4gIH0gLy8gaXN0YW5idWwgaWdub3JlIG5leHQgKFNlZTogJ2h0dHBzOi8vZ2l0aHViLmNvbS9ncmFwaHFsL2dyYXBocWwtanMvaXNzdWVzLzIyMDMnKVxuXG5cbiAgdmFyIHZhcmlhYmxlRGVmaW5pdGlvbnMgPSAoX29wZXJhdGlvbiR2YXJpYWJsZURlID0gb3BlcmF0aW9uLnZhcmlhYmxlRGVmaW5pdGlvbnMpICE9PSBudWxsICYmIF9vcGVyYXRpb24kdmFyaWFibGVEZSAhPT0gdm9pZCAwID8gX29wZXJhdGlvbiR2YXJpYWJsZURlIDogW107XG4gIHZhciBjb2VyY2VkVmFyaWFibGVWYWx1ZXMgPSBnZXRWYXJpYWJsZVZhbHVlcyhzY2hlbWEsIHZhcmlhYmxlRGVmaW5pdGlvbnMsIHJhd1ZhcmlhYmxlVmFsdWVzICE9PSBudWxsICYmIHJhd1ZhcmlhYmxlVmFsdWVzICE9PSB2b2lkIDAgPyByYXdWYXJpYWJsZVZhbHVlcyA6IHt9LCB7XG4gICAgbWF4RXJyb3JzOiA1MFxuICB9KTtcblxuICBpZiAoY29lcmNlZFZhcmlhYmxlVmFsdWVzLmVycm9ycykge1xuICAgIHJldHVybiBjb2VyY2VkVmFyaWFibGVWYWx1ZXMuZXJyb3JzO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzY2hlbWE6IHNjaGVtYSxcbiAgICBmcmFnbWVudHM6IGZyYWdtZW50cyxcbiAgICByb290VmFsdWU6IHJvb3RWYWx1ZSxcbiAgICBjb250ZXh0VmFsdWU6IGNvbnRleHRWYWx1ZSxcbiAgICBvcGVyYXRpb246IG9wZXJhdGlvbixcbiAgICB2YXJpYWJsZVZhbHVlczogY29lcmNlZFZhcmlhYmxlVmFsdWVzLmNvZXJjZWQsXG4gICAgZmllbGRSZXNvbHZlcjogZmllbGRSZXNvbHZlciAhPT0gbnVsbCAmJiBmaWVsZFJlc29sdmVyICE9PSB2b2lkIDAgPyBmaWVsZFJlc29sdmVyIDogZGVmYXVsdEZpZWxkUmVzb2x2ZXIsXG4gICAgdHlwZVJlc29sdmVyOiB0eXBlUmVzb2x2ZXIgIT09IG51bGwgJiYgdHlwZVJlc29sdmVyICE9PSB2b2lkIDAgPyB0eXBlUmVzb2x2ZXIgOiBkZWZhdWx0VHlwZVJlc29sdmVyLFxuICAgIGVycm9yczogW11cbiAgfTtcbn1cbi8qKlxuICogSW1wbGVtZW50cyB0aGUgXCJFdmFsdWF0aW5nIG9wZXJhdGlvbnNcIiBzZWN0aW9uIG9mIHRoZSBzcGVjLlxuICovXG5cbmZ1bmN0aW9uIGV4ZWN1dGVPcGVyYXRpb24oZXhlQ29udGV4dCwgb3BlcmF0aW9uLCByb290VmFsdWUpIHtcbiAgdmFyIHR5cGUgPSBnZXRPcGVyYXRpb25Sb290VHlwZShleGVDb250ZXh0LnNjaGVtYSwgb3BlcmF0aW9uKTtcbiAgdmFyIGZpZWxkcyA9IGNvbGxlY3RGaWVsZHMoZXhlQ29udGV4dCwgdHlwZSwgb3BlcmF0aW9uLnNlbGVjdGlvblNldCwgT2JqZWN0LmNyZWF0ZShudWxsKSwgT2JqZWN0LmNyZWF0ZShudWxsKSk7XG4gIHZhciBwYXRoID0gdW5kZWZpbmVkOyAvLyBFcnJvcnMgZnJvbSBzdWItZmllbGRzIG9mIGEgTm9uTnVsbCB0eXBlIG1heSBwcm9wYWdhdGUgdG8gdGhlIHRvcCBsZXZlbCxcbiAgLy8gYXQgd2hpY2ggcG9pbnQgd2Ugc3RpbGwgbG9nIHRoZSBlcnJvciBhbmQgbnVsbCB0aGUgcGFyZW50IGZpZWxkLCB3aGljaFxuICAvLyBpbiB0aGlzIGNhc2UgaXMgdGhlIGVudGlyZSByZXNwb25zZS5cblxuICB0cnkge1xuICAgIHZhciByZXN1bHQgPSBvcGVyYXRpb24ub3BlcmF0aW9uID09PSAnbXV0YXRpb24nID8gZXhlY3V0ZUZpZWxkc1NlcmlhbGx5KGV4ZUNvbnRleHQsIHR5cGUsIHJvb3RWYWx1ZSwgcGF0aCwgZmllbGRzKSA6IGV4ZWN1dGVGaWVsZHMoZXhlQ29udGV4dCwgdHlwZSwgcm9vdFZhbHVlLCBwYXRoLCBmaWVsZHMpO1xuXG4gICAgaWYgKGlzUHJvbWlzZShyZXN1bHQpKSB7XG4gICAgICByZXR1cm4gcmVzdWx0LnRoZW4odW5kZWZpbmVkLCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgZXhlQ29udGV4dC5lcnJvcnMucHVzaChlcnJvcik7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobnVsbCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGV4ZUNvbnRleHQuZXJyb3JzLnB1c2goZXJyb3IpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG4vKipcbiAqIEltcGxlbWVudHMgdGhlIFwiRXZhbHVhdGluZyBzZWxlY3Rpb24gc2V0c1wiIHNlY3Rpb24gb2YgdGhlIHNwZWNcbiAqIGZvciBcIndyaXRlXCIgbW9kZS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGV4ZWN1dGVGaWVsZHNTZXJpYWxseShleGVDb250ZXh0LCBwYXJlbnRUeXBlLCBzb3VyY2VWYWx1ZSwgcGF0aCwgZmllbGRzKSB7XG4gIHJldHVybiBwcm9taXNlUmVkdWNlKE9iamVjdC5rZXlzKGZpZWxkcyksIGZ1bmN0aW9uIChyZXN1bHRzLCByZXNwb25zZU5hbWUpIHtcbiAgICB2YXIgZmllbGROb2RlcyA9IGZpZWxkc1tyZXNwb25zZU5hbWVdO1xuICAgIHZhciBmaWVsZFBhdGggPSBhZGRQYXRoKHBhdGgsIHJlc3BvbnNlTmFtZSwgcGFyZW50VHlwZS5uYW1lKTtcbiAgICB2YXIgcmVzdWx0ID0gcmVzb2x2ZUZpZWxkKGV4ZUNvbnRleHQsIHBhcmVudFR5cGUsIHNvdXJjZVZhbHVlLCBmaWVsZE5vZGVzLCBmaWVsZFBhdGgpO1xuXG4gICAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gcmVzdWx0cztcbiAgICB9XG5cbiAgICBpZiAoaXNQcm9taXNlKHJlc3VsdCkpIHtcbiAgICAgIHJldHVybiByZXN1bHQudGhlbihmdW5jdGlvbiAocmVzb2x2ZWRSZXN1bHQpIHtcbiAgICAgICAgcmVzdWx0c1tyZXNwb25zZU5hbWVdID0gcmVzb2x2ZWRSZXN1bHQ7XG4gICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmVzdWx0c1tyZXNwb25zZU5hbWVdID0gcmVzdWx0O1xuICAgIHJldHVybiByZXN1bHRzO1xuICB9LCBPYmplY3QuY3JlYXRlKG51bGwpKTtcbn1cbi8qKlxuICogSW1wbGVtZW50cyB0aGUgXCJFdmFsdWF0aW5nIHNlbGVjdGlvbiBzZXRzXCIgc2VjdGlvbiBvZiB0aGUgc3BlY1xuICogZm9yIFwicmVhZFwiIG1vZGUuXG4gKi9cblxuXG5mdW5jdGlvbiBleGVjdXRlRmllbGRzKGV4ZUNvbnRleHQsIHBhcmVudFR5cGUsIHNvdXJjZVZhbHVlLCBwYXRoLCBmaWVsZHMpIHtcbiAgdmFyIHJlc3VsdHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2YXIgY29udGFpbnNQcm9taXNlID0gZmFsc2U7XG5cbiAgZm9yICh2YXIgX2k0ID0gMCwgX09iamVjdCRrZXlzMiA9IE9iamVjdC5rZXlzKGZpZWxkcyk7IF9pNCA8IF9PYmplY3Qka2V5czIubGVuZ3RoOyBfaTQrKykge1xuICAgIHZhciByZXNwb25zZU5hbWUgPSBfT2JqZWN0JGtleXMyW19pNF07XG4gICAgdmFyIGZpZWxkTm9kZXMgPSBmaWVsZHNbcmVzcG9uc2VOYW1lXTtcbiAgICB2YXIgZmllbGRQYXRoID0gYWRkUGF0aChwYXRoLCByZXNwb25zZU5hbWUsIHBhcmVudFR5cGUubmFtZSk7XG4gICAgdmFyIHJlc3VsdCA9IHJlc29sdmVGaWVsZChleGVDb250ZXh0LCBwYXJlbnRUeXBlLCBzb3VyY2VWYWx1ZSwgZmllbGROb2RlcywgZmllbGRQYXRoKTtcblxuICAgIGlmIChyZXN1bHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmVzdWx0c1tyZXNwb25zZU5hbWVdID0gcmVzdWx0O1xuXG4gICAgICBpZiAoaXNQcm9taXNlKHJlc3VsdCkpIHtcbiAgICAgICAgY29udGFpbnNQcm9taXNlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH0gLy8gSWYgdGhlcmUgYXJlIG5vIHByb21pc2VzLCB3ZSBjYW4ganVzdCByZXR1cm4gdGhlIG9iamVjdFxuXG5cbiAgaWYgKCFjb250YWluc1Byb21pc2UpIHtcbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfSAvLyBPdGhlcndpc2UsIHJlc3VsdHMgaXMgYSBtYXAgZnJvbSBmaWVsZCBuYW1lIHRvIHRoZSByZXN1bHQgb2YgcmVzb2x2aW5nIHRoYXRcbiAgLy8gZmllbGQsIHdoaWNoIGlzIHBvc3NpYmx5IGEgcHJvbWlzZS4gUmV0dXJuIGEgcHJvbWlzZSB0aGF0IHdpbGwgcmV0dXJuIHRoaXNcbiAgLy8gc2FtZSBtYXAsIGJ1dCB3aXRoIGFueSBwcm9taXNlcyByZXBsYWNlZCB3aXRoIHRoZSB2YWx1ZXMgdGhleSByZXNvbHZlZCB0by5cblxuXG4gIHJldHVybiBwcm9taXNlRm9yT2JqZWN0KHJlc3VsdHMpO1xufVxuLyoqXG4gKiBHaXZlbiBhIHNlbGVjdGlvblNldCwgYWRkcyBhbGwgb2YgdGhlIGZpZWxkcyBpbiB0aGF0IHNlbGVjdGlvbiB0b1xuICogdGhlIHBhc3NlZCBpbiBtYXAgb2YgZmllbGRzLCBhbmQgcmV0dXJucyBpdCBhdCB0aGUgZW5kLlxuICpcbiAqIENvbGxlY3RGaWVsZHMgcmVxdWlyZXMgdGhlIFwicnVudGltZSB0eXBlXCIgb2YgYW4gb2JqZWN0LiBGb3IgYSBmaWVsZCB3aGljaFxuICogcmV0dXJucyBhbiBJbnRlcmZhY2Ugb3IgVW5pb24gdHlwZSwgdGhlIFwicnVudGltZSB0eXBlXCIgd2lsbCBiZSB0aGUgYWN0dWFsXG4gKiBPYmplY3QgdHlwZSByZXR1cm5lZCBieSB0aGF0IGZpZWxkLlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbGxlY3RGaWVsZHMoZXhlQ29udGV4dCwgcnVudGltZVR5cGUsIHNlbGVjdGlvblNldCwgZmllbGRzLCB2aXNpdGVkRnJhZ21lbnROYW1lcykge1xuICBmb3IgKHZhciBfaTYgPSAwLCBfc2VsZWN0aW9uU2V0JHNlbGVjdGkyID0gc2VsZWN0aW9uU2V0LnNlbGVjdGlvbnM7IF9pNiA8IF9zZWxlY3Rpb25TZXQkc2VsZWN0aTIubGVuZ3RoOyBfaTYrKykge1xuICAgIHZhciBzZWxlY3Rpb24gPSBfc2VsZWN0aW9uU2V0JHNlbGVjdGkyW19pNl07XG5cbiAgICBzd2l0Y2ggKHNlbGVjdGlvbi5raW5kKSB7XG4gICAgICBjYXNlIEtpbmQuRklFTEQ6XG4gICAgICAgIHtcbiAgICAgICAgICBpZiAoIXNob3VsZEluY2x1ZGVOb2RlKGV4ZUNvbnRleHQsIHNlbGVjdGlvbikpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBuYW1lID0gZ2V0RmllbGRFbnRyeUtleShzZWxlY3Rpb24pO1xuXG4gICAgICAgICAgaWYgKCFmaWVsZHNbbmFtZV0pIHtcbiAgICAgICAgICAgIGZpZWxkc1tuYW1lXSA9IFtdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZpZWxkc1tuYW1lXS5wdXNoKHNlbGVjdGlvbik7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgY2FzZSBLaW5kLklOTElORV9GUkFHTUVOVDpcbiAgICAgICAge1xuICAgICAgICAgIGlmICghc2hvdWxkSW5jbHVkZU5vZGUoZXhlQ29udGV4dCwgc2VsZWN0aW9uKSB8fCAhZG9lc0ZyYWdtZW50Q29uZGl0aW9uTWF0Y2goZXhlQ29udGV4dCwgc2VsZWN0aW9uLCBydW50aW1lVHlwZSkpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbGxlY3RGaWVsZHMoZXhlQ29udGV4dCwgcnVudGltZVR5cGUsIHNlbGVjdGlvbi5zZWxlY3Rpb25TZXQsIGZpZWxkcywgdmlzaXRlZEZyYWdtZW50TmFtZXMpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgIGNhc2UgS2luZC5GUkFHTUVOVF9TUFJFQUQ6XG4gICAgICAgIHtcbiAgICAgICAgICB2YXIgZnJhZ05hbWUgPSBzZWxlY3Rpb24ubmFtZS52YWx1ZTtcblxuICAgICAgICAgIGlmICh2aXNpdGVkRnJhZ21lbnROYW1lc1tmcmFnTmFtZV0gfHwgIXNob3VsZEluY2x1ZGVOb2RlKGV4ZUNvbnRleHQsIHNlbGVjdGlvbikpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZpc2l0ZWRGcmFnbWVudE5hbWVzW2ZyYWdOYW1lXSA9IHRydWU7XG4gICAgICAgICAgdmFyIGZyYWdtZW50ID0gZXhlQ29udGV4dC5mcmFnbWVudHNbZnJhZ05hbWVdO1xuXG4gICAgICAgICAgaWYgKCFmcmFnbWVudCB8fCAhZG9lc0ZyYWdtZW50Q29uZGl0aW9uTWF0Y2goZXhlQ29udGV4dCwgZnJhZ21lbnQsIHJ1bnRpbWVUeXBlKSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29sbGVjdEZpZWxkcyhleGVDb250ZXh0LCBydW50aW1lVHlwZSwgZnJhZ21lbnQuc2VsZWN0aW9uU2V0LCBmaWVsZHMsIHZpc2l0ZWRGcmFnbWVudE5hbWVzKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmaWVsZHM7XG59XG4vKipcbiAqIERldGVybWluZXMgaWYgYSBmaWVsZCBzaG91bGQgYmUgaW5jbHVkZWQgYmFzZWQgb24gdGhlIEBpbmNsdWRlIGFuZCBAc2tpcFxuICogZGlyZWN0aXZlcywgd2hlcmUgQHNraXAgaGFzIGhpZ2hlciBwcmVjZWRlbmNlIHRoYW4gQGluY2x1ZGUuXG4gKi9cblxuZnVuY3Rpb24gc2hvdWxkSW5jbHVkZU5vZGUoZXhlQ29udGV4dCwgbm9kZSkge1xuICB2YXIgc2tpcCA9IGdldERpcmVjdGl2ZVZhbHVlcyhHcmFwaFFMU2tpcERpcmVjdGl2ZSwgbm9kZSwgZXhlQ29udGV4dC52YXJpYWJsZVZhbHVlcyk7XG5cbiAgaWYgKChza2lwID09PSBudWxsIHx8IHNraXAgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNraXAuaWYpID09PSB0cnVlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGluY2x1ZGUgPSBnZXREaXJlY3RpdmVWYWx1ZXMoR3JhcGhRTEluY2x1ZGVEaXJlY3RpdmUsIG5vZGUsIGV4ZUNvbnRleHQudmFyaWFibGVWYWx1ZXMpO1xuXG4gIGlmICgoaW5jbHVkZSA9PT0gbnVsbCB8fCBpbmNsdWRlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBpbmNsdWRlLmlmKSA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiBhIGZyYWdtZW50IGlzIGFwcGxpY2FibGUgdG8gdGhlIGdpdmVuIHR5cGUuXG4gKi9cblxuXG5mdW5jdGlvbiBkb2VzRnJhZ21lbnRDb25kaXRpb25NYXRjaChleGVDb250ZXh0LCBmcmFnbWVudCwgdHlwZSkge1xuICB2YXIgdHlwZUNvbmRpdGlvbk5vZGUgPSBmcmFnbWVudC50eXBlQ29uZGl0aW9uO1xuXG4gIGlmICghdHlwZUNvbmRpdGlvbk5vZGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHZhciBjb25kaXRpb25hbFR5cGUgPSB0eXBlRnJvbUFTVChleGVDb250ZXh0LnNjaGVtYSwgdHlwZUNvbmRpdGlvbk5vZGUpO1xuXG4gIGlmIChjb25kaXRpb25hbFR5cGUgPT09IHR5cGUpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmIChpc0Fic3RyYWN0VHlwZShjb25kaXRpb25hbFR5cGUpKSB7XG4gICAgcmV0dXJuIGV4ZUNvbnRleHQuc2NoZW1hLmlzU3ViVHlwZShjb25kaXRpb25hbFR5cGUsIHR5cGUpO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuLyoqXG4gKiBJbXBsZW1lbnRzIHRoZSBsb2dpYyB0byBjb21wdXRlIHRoZSBrZXkgb2YgYSBnaXZlbiBmaWVsZCdzIGVudHJ5XG4gKi9cblxuXG5mdW5jdGlvbiBnZXRGaWVsZEVudHJ5S2V5KG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUuYWxpYXMgPyBub2RlLmFsaWFzLnZhbHVlIDogbm9kZS5uYW1lLnZhbHVlO1xufVxuLyoqXG4gKiBSZXNvbHZlcyB0aGUgZmllbGQgb24gdGhlIGdpdmVuIHNvdXJjZSBvYmplY3QuIEluIHBhcnRpY3VsYXIsIHRoaXNcbiAqIGZpZ3VyZXMgb3V0IHRoZSB2YWx1ZSB0aGF0IHRoZSBmaWVsZCByZXR1cm5zIGJ5IGNhbGxpbmcgaXRzIHJlc29sdmUgZnVuY3Rpb24sXG4gKiB0aGVuIGNhbGxzIGNvbXBsZXRlVmFsdWUgdG8gY29tcGxldGUgcHJvbWlzZXMsIHNlcmlhbGl6ZSBzY2FsYXJzLCBvciBleGVjdXRlXG4gKiB0aGUgc3ViLXNlbGVjdGlvbi1zZXQgZm9yIG9iamVjdHMuXG4gKi9cblxuXG5mdW5jdGlvbiByZXNvbHZlRmllbGQoZXhlQ29udGV4dCwgcGFyZW50VHlwZSwgc291cmNlLCBmaWVsZE5vZGVzLCBwYXRoKSB7XG4gIHZhciBfZmllbGREZWYkcmVzb2x2ZTtcblxuICB2YXIgZmllbGROb2RlID0gZmllbGROb2Rlc1swXTtcbiAgdmFyIGZpZWxkTmFtZSA9IGZpZWxkTm9kZS5uYW1lLnZhbHVlO1xuICB2YXIgZmllbGREZWYgPSBnZXRGaWVsZERlZihleGVDb250ZXh0LnNjaGVtYSwgcGFyZW50VHlwZSwgZmllbGROYW1lKTtcblxuICBpZiAoIWZpZWxkRGVmKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHJldHVyblR5cGUgPSBmaWVsZERlZi50eXBlO1xuICB2YXIgcmVzb2x2ZUZuID0gKF9maWVsZERlZiRyZXNvbHZlID0gZmllbGREZWYucmVzb2x2ZSkgIT09IG51bGwgJiYgX2ZpZWxkRGVmJHJlc29sdmUgIT09IHZvaWQgMCA/IF9maWVsZERlZiRyZXNvbHZlIDogZXhlQ29udGV4dC5maWVsZFJlc29sdmVyO1xuICB2YXIgaW5mbyA9IGJ1aWxkUmVzb2x2ZUluZm8oZXhlQ29udGV4dCwgZmllbGREZWYsIGZpZWxkTm9kZXMsIHBhcmVudFR5cGUsIHBhdGgpOyAvLyBHZXQgdGhlIHJlc29sdmUgZnVuY3Rpb24sIHJlZ2FyZGxlc3Mgb2YgaWYgaXRzIHJlc3VsdCBpcyBub3JtYWwgb3IgYWJydXB0IChlcnJvcikuXG5cbiAgdHJ5IHtcbiAgICAvLyBCdWlsZCBhIEpTIG9iamVjdCBvZiBhcmd1bWVudHMgZnJvbSB0aGUgZmllbGQuYXJndW1lbnRzIEFTVCwgdXNpbmcgdGhlXG4gICAgLy8gdmFyaWFibGVzIHNjb3BlIHRvIGZ1bGZpbGwgYW55IHZhcmlhYmxlIHJlZmVyZW5jZXMuXG4gICAgLy8gVE9ETzogZmluZCBhIHdheSB0byBtZW1vaXplLCBpbiBjYXNlIHRoaXMgZmllbGQgaXMgd2l0aGluIGEgTGlzdCB0eXBlLlxuICAgIHZhciBhcmdzID0gZ2V0QXJndW1lbnRWYWx1ZXMoZmllbGREZWYsIGZpZWxkTm9kZXNbMF0sIGV4ZUNvbnRleHQudmFyaWFibGVWYWx1ZXMpOyAvLyBUaGUgcmVzb2x2ZSBmdW5jdGlvbidzIG9wdGlvbmFsIHRoaXJkIGFyZ3VtZW50IGlzIGEgY29udGV4dCB2YWx1ZSB0aGF0XG4gICAgLy8gaXMgcHJvdmlkZWQgdG8gZXZlcnkgcmVzb2x2ZSBmdW5jdGlvbiB3aXRoaW4gYW4gZXhlY3V0aW9uLiBJdCBpcyBjb21tb25seVxuICAgIC8vIHVzZWQgdG8gcmVwcmVzZW50IGFuIGF1dGhlbnRpY2F0ZWQgdXNlciwgb3IgcmVxdWVzdC1zcGVjaWZpYyBjYWNoZXMuXG5cbiAgICB2YXIgX2NvbnRleHRWYWx1ZSA9IGV4ZUNvbnRleHQuY29udGV4dFZhbHVlO1xuICAgIHZhciByZXN1bHQgPSByZXNvbHZlRm4oc291cmNlLCBhcmdzLCBfY29udGV4dFZhbHVlLCBpbmZvKTtcbiAgICB2YXIgY29tcGxldGVkO1xuXG4gICAgaWYgKGlzUHJvbWlzZShyZXN1bHQpKSB7XG4gICAgICBjb21wbGV0ZWQgPSByZXN1bHQudGhlbihmdW5jdGlvbiAocmVzb2x2ZWQpIHtcbiAgICAgICAgcmV0dXJuIGNvbXBsZXRlVmFsdWUoZXhlQ29udGV4dCwgcmV0dXJuVHlwZSwgZmllbGROb2RlcywgaW5mbywgcGF0aCwgcmVzb2x2ZWQpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbXBsZXRlZCA9IGNvbXBsZXRlVmFsdWUoZXhlQ29udGV4dCwgcmV0dXJuVHlwZSwgZmllbGROb2RlcywgaW5mbywgcGF0aCwgcmVzdWx0KTtcbiAgICB9XG5cbiAgICBpZiAoaXNQcm9taXNlKGNvbXBsZXRlZCkpIHtcbiAgICAgIC8vIE5vdGU6IHdlIGRvbid0IHJlbHkgb24gYSBgY2F0Y2hgIG1ldGhvZCwgYnV0IHdlIGRvIGV4cGVjdCBcInRoZW5hYmxlXCJcbiAgICAgIC8vIHRvIHRha2UgYSBzZWNvbmQgY2FsbGJhY2sgZm9yIHRoZSBlcnJvciBjYXNlLlxuICAgICAgcmV0dXJuIGNvbXBsZXRlZC50aGVuKHVuZGVmaW5lZCwgZnVuY3Rpb24gKHJhd0Vycm9yKSB7XG4gICAgICAgIHZhciBlcnJvciA9IGxvY2F0ZWRFcnJvcihyYXdFcnJvciwgZmllbGROb2RlcywgcGF0aFRvQXJyYXkocGF0aCkpO1xuICAgICAgICByZXR1cm4gaGFuZGxlRmllbGRFcnJvcihlcnJvciwgcmV0dXJuVHlwZSwgZXhlQ29udGV4dCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gY29tcGxldGVkO1xuICB9IGNhdGNoIChyYXdFcnJvcikge1xuICAgIHZhciBlcnJvciA9IGxvY2F0ZWRFcnJvcihyYXdFcnJvciwgZmllbGROb2RlcywgcGF0aFRvQXJyYXkocGF0aCkpO1xuICAgIHJldHVybiBoYW5kbGVGaWVsZEVycm9yKGVycm9yLCByZXR1cm5UeXBlLCBleGVDb250ZXh0KTtcbiAgfVxufVxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBidWlsZFJlc29sdmVJbmZvKGV4ZUNvbnRleHQsIGZpZWxkRGVmLCBmaWVsZE5vZGVzLCBwYXJlbnRUeXBlLCBwYXRoKSB7XG4gIC8vIFRoZSByZXNvbHZlIGZ1bmN0aW9uJ3Mgb3B0aW9uYWwgZm91cnRoIGFyZ3VtZW50IGlzIGEgY29sbGVjdGlvbiBvZlxuICAvLyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgY3VycmVudCBleGVjdXRpb24gc3RhdGUuXG4gIHJldHVybiB7XG4gICAgZmllbGROYW1lOiBmaWVsZERlZi5uYW1lLFxuICAgIGZpZWxkTm9kZXM6IGZpZWxkTm9kZXMsXG4gICAgcmV0dXJuVHlwZTogZmllbGREZWYudHlwZSxcbiAgICBwYXJlbnRUeXBlOiBwYXJlbnRUeXBlLFxuICAgIHBhdGg6IHBhdGgsXG4gICAgc2NoZW1hOiBleGVDb250ZXh0LnNjaGVtYSxcbiAgICBmcmFnbWVudHM6IGV4ZUNvbnRleHQuZnJhZ21lbnRzLFxuICAgIHJvb3RWYWx1ZTogZXhlQ29udGV4dC5yb290VmFsdWUsXG4gICAgb3BlcmF0aW9uOiBleGVDb250ZXh0Lm9wZXJhdGlvbixcbiAgICB2YXJpYWJsZVZhbHVlczogZXhlQ29udGV4dC52YXJpYWJsZVZhbHVlc1xuICB9O1xufVxuXG5mdW5jdGlvbiBoYW5kbGVGaWVsZEVycm9yKGVycm9yLCByZXR1cm5UeXBlLCBleGVDb250ZXh0KSB7XG4gIC8vIElmIHRoZSBmaWVsZCB0eXBlIGlzIG5vbi1udWxsYWJsZSwgdGhlbiBpdCBpcyByZXNvbHZlZCB3aXRob3V0IGFueVxuICAvLyBwcm90ZWN0aW9uIGZyb20gZXJyb3JzLCBob3dldmVyIGl0IHN0aWxsIHByb3Blcmx5IGxvY2F0ZXMgdGhlIGVycm9yLlxuICBpZiAoaXNOb25OdWxsVHlwZShyZXR1cm5UeXBlKSkge1xuICAgIHRocm93IGVycm9yO1xuICB9IC8vIE90aGVyd2lzZSwgZXJyb3IgcHJvdGVjdGlvbiBpcyBhcHBsaWVkLCBsb2dnaW5nIHRoZSBlcnJvciBhbmQgcmVzb2x2aW5nXG4gIC8vIGEgbnVsbCB2YWx1ZSBmb3IgdGhpcyBmaWVsZCBpZiBvbmUgaXMgZW5jb3VudGVyZWQuXG5cblxuICBleGVDb250ZXh0LmVycm9ycy5wdXNoKGVycm9yKTtcbiAgcmV0dXJuIG51bGw7XG59XG4vKipcbiAqIEltcGxlbWVudHMgdGhlIGluc3RydWN0aW9ucyBmb3IgY29tcGxldGVWYWx1ZSBhcyBkZWZpbmVkIGluIHRoZVxuICogXCJGaWVsZCBlbnRyaWVzXCIgc2VjdGlvbiBvZiB0aGUgc3BlYy5cbiAqXG4gKiBJZiB0aGUgZmllbGQgdHlwZSBpcyBOb24tTnVsbCwgdGhlbiB0aGlzIHJlY3Vyc2l2ZWx5IGNvbXBsZXRlcyB0aGUgdmFsdWVcbiAqIGZvciB0aGUgaW5uZXIgdHlwZS4gSXQgdGhyb3dzIGEgZmllbGQgZXJyb3IgaWYgdGhhdCBjb21wbGV0aW9uIHJldHVybnMgbnVsbCxcbiAqIGFzIHBlciB0aGUgXCJOdWxsYWJpbGl0eVwiIHNlY3Rpb24gb2YgdGhlIHNwZWMuXG4gKlxuICogSWYgdGhlIGZpZWxkIHR5cGUgaXMgYSBMaXN0LCB0aGVuIHRoaXMgcmVjdXJzaXZlbHkgY29tcGxldGVzIHRoZSB2YWx1ZVxuICogZm9yIHRoZSBpbm5lciB0eXBlIG9uIGVhY2ggaXRlbSBpbiB0aGUgbGlzdC5cbiAqXG4gKiBJZiB0aGUgZmllbGQgdHlwZSBpcyBhIFNjYWxhciBvciBFbnVtLCBlbnN1cmVzIHRoZSBjb21wbGV0ZWQgdmFsdWUgaXMgYSBsZWdhbFxuICogdmFsdWUgb2YgdGhlIHR5cGUgYnkgY2FsbGluZyB0aGUgYHNlcmlhbGl6ZWAgbWV0aG9kIG9mIEdyYXBoUUwgdHlwZVxuICogZGVmaW5pdGlvbi5cbiAqXG4gKiBJZiB0aGUgZmllbGQgaXMgYW4gYWJzdHJhY3QgdHlwZSwgZGV0ZXJtaW5lIHRoZSBydW50aW1lIHR5cGUgb2YgdGhlIHZhbHVlXG4gKiBhbmQgdGhlbiBjb21wbGV0ZSBiYXNlZCBvbiB0aGF0IHR5cGVcbiAqXG4gKiBPdGhlcndpc2UsIHRoZSBmaWVsZCB0eXBlIGV4cGVjdHMgYSBzdWItc2VsZWN0aW9uIHNldCwgYW5kIHdpbGwgY29tcGxldGUgdGhlXG4gKiB2YWx1ZSBieSBldmFsdWF0aW5nIGFsbCBzdWItc2VsZWN0aW9ucy5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNvbXBsZXRlVmFsdWUoZXhlQ29udGV4dCwgcmV0dXJuVHlwZSwgZmllbGROb2RlcywgaW5mbywgcGF0aCwgcmVzdWx0KSB7XG4gIC8vIElmIHJlc3VsdCBpcyBhbiBFcnJvciwgdGhyb3cgYSBsb2NhdGVkIGVycm9yLlxuICBpZiAocmVzdWx0IGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICB0aHJvdyByZXN1bHQ7XG4gIH0gLy8gSWYgZmllbGQgdHlwZSBpcyBOb25OdWxsLCBjb21wbGV0ZSBmb3IgaW5uZXIgdHlwZSwgYW5kIHRocm93IGZpZWxkIGVycm9yXG4gIC8vIGlmIHJlc3VsdCBpcyBudWxsLlxuXG5cbiAgaWYgKGlzTm9uTnVsbFR5cGUocmV0dXJuVHlwZSkpIHtcbiAgICB2YXIgY29tcGxldGVkID0gY29tcGxldGVWYWx1ZShleGVDb250ZXh0LCByZXR1cm5UeXBlLm9mVHlwZSwgZmllbGROb2RlcywgaW5mbywgcGF0aCwgcmVzdWx0KTtcblxuICAgIGlmIChjb21wbGV0ZWQgPT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCByZXR1cm4gbnVsbCBmb3Igbm9uLW51bGxhYmxlIGZpZWxkIFwiLmNvbmNhdChpbmZvLnBhcmVudFR5cGUubmFtZSwgXCIuXCIpLmNvbmNhdChpbmZvLmZpZWxkTmFtZSwgXCIuXCIpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY29tcGxldGVkO1xuICB9IC8vIElmIHJlc3VsdCB2YWx1ZSBpcyBudWxsIG9yIHVuZGVmaW5lZCB0aGVuIHJldHVybiBudWxsLlxuXG5cbiAgaWYgKHJlc3VsdCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH0gLy8gSWYgZmllbGQgdHlwZSBpcyBMaXN0LCBjb21wbGV0ZSBlYWNoIGl0ZW0gaW4gdGhlIGxpc3Qgd2l0aCB0aGUgaW5uZXIgdHlwZVxuXG5cbiAgaWYgKGlzTGlzdFR5cGUocmV0dXJuVHlwZSkpIHtcbiAgICByZXR1cm4gY29tcGxldGVMaXN0VmFsdWUoZXhlQ29udGV4dCwgcmV0dXJuVHlwZSwgZmllbGROb2RlcywgaW5mbywgcGF0aCwgcmVzdWx0KTtcbiAgfSAvLyBJZiBmaWVsZCB0eXBlIGlzIGEgbGVhZiB0eXBlLCBTY2FsYXIgb3IgRW51bSwgc2VyaWFsaXplIHRvIGEgdmFsaWQgdmFsdWUsXG4gIC8vIHJldHVybmluZyBudWxsIGlmIHNlcmlhbGl6YXRpb24gaXMgbm90IHBvc3NpYmxlLlxuXG5cbiAgaWYgKGlzTGVhZlR5cGUocmV0dXJuVHlwZSkpIHtcbiAgICByZXR1cm4gY29tcGxldGVMZWFmVmFsdWUocmV0dXJuVHlwZSwgcmVzdWx0KTtcbiAgfSAvLyBJZiBmaWVsZCB0eXBlIGlzIGFuIGFic3RyYWN0IHR5cGUsIEludGVyZmFjZSBvciBVbmlvbiwgZGV0ZXJtaW5lIHRoZVxuICAvLyBydW50aW1lIE9iamVjdCB0eXBlIGFuZCBjb21wbGV0ZSBmb3IgdGhhdCB0eXBlLlxuXG5cbiAgaWYgKGlzQWJzdHJhY3RUeXBlKHJldHVyblR5cGUpKSB7XG4gICAgcmV0dXJuIGNvbXBsZXRlQWJzdHJhY3RWYWx1ZShleGVDb250ZXh0LCByZXR1cm5UeXBlLCBmaWVsZE5vZGVzLCBpbmZvLCBwYXRoLCByZXN1bHQpO1xuICB9IC8vIElmIGZpZWxkIHR5cGUgaXMgT2JqZWN0LCBleGVjdXRlIGFuZCBjb21wbGV0ZSBhbGwgc3ViLXNlbGVjdGlvbnMuXG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBlbHNlIChTZWU6ICdodHRwczovL2dpdGh1Yi5jb20vZ3JhcGhxbC9ncmFwaHFsLWpzL2lzc3Vlcy8yNjE4JylcblxuXG4gIGlmIChpc09iamVjdFR5cGUocmV0dXJuVHlwZSkpIHtcbiAgICByZXR1cm4gY29tcGxldGVPYmplY3RWYWx1ZShleGVDb250ZXh0LCByZXR1cm5UeXBlLCBmaWVsZE5vZGVzLCBpbmZvLCBwYXRoLCByZXN1bHQpO1xuICB9IC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0IChOb3QgcmVhY2hhYmxlLiBBbGwgcG9zc2libGUgb3V0cHV0IHR5cGVzIGhhdmUgYmVlbiBjb25zaWRlcmVkKVxuXG5cbiAgZmFsc2UgfHwgaW52YXJpYW50KDAsICdDYW5ub3QgY29tcGxldGUgdmFsdWUgb2YgdW5leHBlY3RlZCBvdXRwdXQgdHlwZTogJyArIGluc3BlY3QocmV0dXJuVHlwZSkpO1xufVxuLyoqXG4gKiBDb21wbGV0ZSBhIGxpc3QgdmFsdWUgYnkgY29tcGxldGluZyBlYWNoIGl0ZW0gaW4gdGhlIGxpc3Qgd2l0aCB0aGVcbiAqIGlubmVyIHR5cGVcbiAqL1xuXG5cbmZ1bmN0aW9uIGNvbXBsZXRlTGlzdFZhbHVlKGV4ZUNvbnRleHQsIHJldHVyblR5cGUsIGZpZWxkTm9kZXMsIGluZm8sIHBhdGgsIHJlc3VsdCkge1xuICAvLyBUaGlzIGlzIHNwZWNpZmllZCBhcyBhIHNpbXBsZSBtYXAsIGhvd2V2ZXIgd2UncmUgb3B0aW1pemluZyB0aGUgcGF0aFxuICAvLyB3aGVyZSB0aGUgbGlzdCBjb250YWlucyBubyBQcm9taXNlcyBieSBhdm9pZGluZyBjcmVhdGluZyBhbm90aGVyIFByb21pc2UuXG4gIHZhciBpdGVtVHlwZSA9IHJldHVyblR5cGUub2ZUeXBlO1xuICB2YXIgY29udGFpbnNQcm9taXNlID0gZmFsc2U7XG4gIHZhciBjb21wbGV0ZWRSZXN1bHRzID0gc2FmZUFycmF5RnJvbShyZXN1bHQsIGZ1bmN0aW9uIChpdGVtLCBpbmRleCkge1xuICAgIC8vIE5vIG5lZWQgdG8gbW9kaWZ5IHRoZSBpbmZvIG9iamVjdCBjb250YWluaW5nIHRoZSBwYXRoLFxuICAgIC8vIHNpbmNlIGZyb20gaGVyZSBvbiBpdCBpcyBub3QgZXZlciBhY2Nlc3NlZCBieSByZXNvbHZlciBmdW5jdGlvbnMuXG4gICAgdmFyIGl0ZW1QYXRoID0gYWRkUGF0aChwYXRoLCBpbmRleCwgdW5kZWZpbmVkKTtcblxuICAgIHRyeSB7XG4gICAgICB2YXIgY29tcGxldGVkSXRlbTtcblxuICAgICAgaWYgKGlzUHJvbWlzZShpdGVtKSkge1xuICAgICAgICBjb21wbGV0ZWRJdGVtID0gaXRlbS50aGVuKGZ1bmN0aW9uIChyZXNvbHZlZCkge1xuICAgICAgICAgIHJldHVybiBjb21wbGV0ZVZhbHVlKGV4ZUNvbnRleHQsIGl0ZW1UeXBlLCBmaWVsZE5vZGVzLCBpbmZvLCBpdGVtUGF0aCwgcmVzb2x2ZWQpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbXBsZXRlZEl0ZW0gPSBjb21wbGV0ZVZhbHVlKGV4ZUNvbnRleHQsIGl0ZW1UeXBlLCBmaWVsZE5vZGVzLCBpbmZvLCBpdGVtUGF0aCwgaXRlbSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc1Byb21pc2UoY29tcGxldGVkSXRlbSkpIHtcbiAgICAgICAgY29udGFpbnNQcm9taXNlID0gdHJ1ZTsgLy8gTm90ZTogd2UgZG9uJ3QgcmVseSBvbiBhIGBjYXRjaGAgbWV0aG9kLCBidXQgd2UgZG8gZXhwZWN0IFwidGhlbmFibGVcIlxuICAgICAgICAvLyB0byB0YWtlIGEgc2Vjb25kIGNhbGxiYWNrIGZvciB0aGUgZXJyb3IgY2FzZS5cblxuICAgICAgICByZXR1cm4gY29tcGxldGVkSXRlbS50aGVuKHVuZGVmaW5lZCwgZnVuY3Rpb24gKHJhd0Vycm9yKSB7XG4gICAgICAgICAgdmFyIGVycm9yID0gbG9jYXRlZEVycm9yKHJhd0Vycm9yLCBmaWVsZE5vZGVzLCBwYXRoVG9BcnJheShpdGVtUGF0aCkpO1xuICAgICAgICAgIHJldHVybiBoYW5kbGVGaWVsZEVycm9yKGVycm9yLCBpdGVtVHlwZSwgZXhlQ29udGV4dCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29tcGxldGVkSXRlbTtcbiAgICB9IGNhdGNoIChyYXdFcnJvcikge1xuICAgICAgdmFyIGVycm9yID0gbG9jYXRlZEVycm9yKHJhd0Vycm9yLCBmaWVsZE5vZGVzLCBwYXRoVG9BcnJheShpdGVtUGF0aCkpO1xuICAgICAgcmV0dXJuIGhhbmRsZUZpZWxkRXJyb3IoZXJyb3IsIGl0ZW1UeXBlLCBleGVDb250ZXh0KTtcbiAgICB9XG4gIH0pO1xuXG4gIGlmIChjb21wbGV0ZWRSZXN1bHRzID09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgR3JhcGhRTEVycm9yKFwiRXhwZWN0ZWQgSXRlcmFibGUsIGJ1dCBkaWQgbm90IGZpbmQgb25lIGZvciBmaWVsZCBcXFwiXCIuY29uY2F0KGluZm8ucGFyZW50VHlwZS5uYW1lLCBcIi5cIikuY29uY2F0KGluZm8uZmllbGROYW1lLCBcIlxcXCIuXCIpKTtcbiAgfVxuXG4gIHJldHVybiBjb250YWluc1Byb21pc2UgPyBQcm9taXNlLmFsbChjb21wbGV0ZWRSZXN1bHRzKSA6IGNvbXBsZXRlZFJlc3VsdHM7XG59XG4vKipcbiAqIENvbXBsZXRlIGEgU2NhbGFyIG9yIEVudW0gYnkgc2VyaWFsaXppbmcgdG8gYSB2YWxpZCB2YWx1ZSwgcmV0dXJuaW5nXG4gKiBudWxsIGlmIHNlcmlhbGl6YXRpb24gaXMgbm90IHBvc3NpYmxlLlxuICovXG5cblxuZnVuY3Rpb24gY29tcGxldGVMZWFmVmFsdWUocmV0dXJuVHlwZSwgcmVzdWx0KSB7XG4gIHZhciBzZXJpYWxpemVkUmVzdWx0ID0gcmV0dXJuVHlwZS5zZXJpYWxpemUocmVzdWx0KTtcblxuICBpZiAoc2VyaWFsaXplZFJlc3VsdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRXhwZWN0ZWQgYSB2YWx1ZSBvZiB0eXBlIFxcXCJcIi5jb25jYXQoaW5zcGVjdChyZXR1cm5UeXBlKSwgXCJcXFwiIGJ1dCBcIikgKyBcInJlY2VpdmVkOiBcIi5jb25jYXQoaW5zcGVjdChyZXN1bHQpKSk7XG4gIH1cblxuICByZXR1cm4gc2VyaWFsaXplZFJlc3VsdDtcbn1cbi8qKlxuICogQ29tcGxldGUgYSB2YWx1ZSBvZiBhbiBhYnN0cmFjdCB0eXBlIGJ5IGRldGVybWluaW5nIHRoZSBydW50aW1lIG9iamVjdCB0eXBlXG4gKiBvZiB0aGF0IHZhbHVlLCB0aGVuIGNvbXBsZXRlIHRoZSB2YWx1ZSBmb3IgdGhhdCB0eXBlLlxuICovXG5cblxuZnVuY3Rpb24gY29tcGxldGVBYnN0cmFjdFZhbHVlKGV4ZUNvbnRleHQsIHJldHVyblR5cGUsIGZpZWxkTm9kZXMsIGluZm8sIHBhdGgsIHJlc3VsdCkge1xuICB2YXIgX3JldHVyblR5cGUkcmVzb2x2ZVR5O1xuXG4gIHZhciByZXNvbHZlVHlwZUZuID0gKF9yZXR1cm5UeXBlJHJlc29sdmVUeSA9IHJldHVyblR5cGUucmVzb2x2ZVR5cGUpICE9PSBudWxsICYmIF9yZXR1cm5UeXBlJHJlc29sdmVUeSAhPT0gdm9pZCAwID8gX3JldHVyblR5cGUkcmVzb2x2ZVR5IDogZXhlQ29udGV4dC50eXBlUmVzb2x2ZXI7XG4gIHZhciBjb250ZXh0VmFsdWUgPSBleGVDb250ZXh0LmNvbnRleHRWYWx1ZTtcbiAgdmFyIHJ1bnRpbWVUeXBlID0gcmVzb2x2ZVR5cGVGbihyZXN1bHQsIGNvbnRleHRWYWx1ZSwgaW5mbywgcmV0dXJuVHlwZSk7XG5cbiAgaWYgKGlzUHJvbWlzZShydW50aW1lVHlwZSkpIHtcbiAgICByZXR1cm4gcnVudGltZVR5cGUudGhlbihmdW5jdGlvbiAocmVzb2x2ZWRSdW50aW1lVHlwZSkge1xuICAgICAgcmV0dXJuIGNvbXBsZXRlT2JqZWN0VmFsdWUoZXhlQ29udGV4dCwgZW5zdXJlVmFsaWRSdW50aW1lVHlwZShyZXNvbHZlZFJ1bnRpbWVUeXBlLCBleGVDb250ZXh0LCByZXR1cm5UeXBlLCBmaWVsZE5vZGVzLCBpbmZvLCByZXN1bHQpLCBmaWVsZE5vZGVzLCBpbmZvLCBwYXRoLCByZXN1bHQpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGNvbXBsZXRlT2JqZWN0VmFsdWUoZXhlQ29udGV4dCwgZW5zdXJlVmFsaWRSdW50aW1lVHlwZShydW50aW1lVHlwZSwgZXhlQ29udGV4dCwgcmV0dXJuVHlwZSwgZmllbGROb2RlcywgaW5mbywgcmVzdWx0KSwgZmllbGROb2RlcywgaW5mbywgcGF0aCwgcmVzdWx0KTtcbn1cblxuZnVuY3Rpb24gZW5zdXJlVmFsaWRSdW50aW1lVHlwZShydW50aW1lVHlwZU9yTmFtZSwgZXhlQ29udGV4dCwgcmV0dXJuVHlwZSwgZmllbGROb2RlcywgaW5mbywgcmVzdWx0KSB7XG4gIGlmIChydW50aW1lVHlwZU9yTmFtZSA9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEdyYXBoUUxFcnJvcihcIkFic3RyYWN0IHR5cGUgXFxcIlwiLmNvbmNhdChyZXR1cm5UeXBlLm5hbWUsIFwiXFxcIiBtdXN0IHJlc29sdmUgdG8gYW4gT2JqZWN0IHR5cGUgYXQgcnVudGltZSBmb3IgZmllbGQgXFxcIlwiKS5jb25jYXQoaW5mby5wYXJlbnRUeXBlLm5hbWUsIFwiLlwiKS5jb25jYXQoaW5mby5maWVsZE5hbWUsIFwiXFxcIi4gRWl0aGVyIHRoZSBcXFwiXCIpLmNvbmNhdChyZXR1cm5UeXBlLm5hbWUsIFwiXFxcIiB0eXBlIHNob3VsZCBwcm92aWRlIGEgXFxcInJlc29sdmVUeXBlXFxcIiBmdW5jdGlvbiBvciBlYWNoIHBvc3NpYmxlIHR5cGUgc2hvdWxkIHByb3ZpZGUgYW4gXFxcImlzVHlwZU9mXFxcIiBmdW5jdGlvbi5cIiksIGZpZWxkTm9kZXMpO1xuICB9IC8vIEZJWE1FOiB0ZW1wb3Jhcnkgd29ya2Fyb3VuZCB1bnRpbCBzdXBwb3J0IGZvciBwYXNzaW5nIG9iamVjdCB0eXBlcyB3b3VsZCBiZSByZW1vdmVkIGluIHYxNi4wLjBcblxuXG4gIHZhciBydW50aW1lVHlwZU5hbWUgPSBpc05hbWVkVHlwZShydW50aW1lVHlwZU9yTmFtZSkgPyBydW50aW1lVHlwZU9yTmFtZS5uYW1lIDogcnVudGltZVR5cGVPck5hbWU7XG5cbiAgaWYgKHR5cGVvZiBydW50aW1lVHlwZU5hbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IEdyYXBoUUxFcnJvcihcIkFic3RyYWN0IHR5cGUgXFxcIlwiLmNvbmNhdChyZXR1cm5UeXBlLm5hbWUsIFwiXFxcIiBtdXN0IHJlc29sdmUgdG8gYW4gT2JqZWN0IHR5cGUgYXQgcnVudGltZSBmb3IgZmllbGQgXFxcIlwiKS5jb25jYXQoaW5mby5wYXJlbnRUeXBlLm5hbWUsIFwiLlwiKS5jb25jYXQoaW5mby5maWVsZE5hbWUsIFwiXFxcIiB3aXRoIFwiKSArIFwidmFsdWUgXCIuY29uY2F0KGluc3BlY3QocmVzdWx0KSwgXCIsIHJlY2VpdmVkIFxcXCJcIikuY29uY2F0KGluc3BlY3QocnVudGltZVR5cGVPck5hbWUpLCBcIlxcXCIuXCIpKTtcbiAgfVxuXG4gIHZhciBydW50aW1lVHlwZSA9IGV4ZUNvbnRleHQuc2NoZW1hLmdldFR5cGUocnVudGltZVR5cGVOYW1lKTtcblxuICBpZiAocnVudGltZVR5cGUgPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBHcmFwaFFMRXJyb3IoXCJBYnN0cmFjdCB0eXBlIFxcXCJcIi5jb25jYXQocmV0dXJuVHlwZS5uYW1lLCBcIlxcXCIgd2FzIHJlc29sdmUgdG8gYSB0eXBlIFxcXCJcIikuY29uY2F0KHJ1bnRpbWVUeXBlTmFtZSwgXCJcXFwiIHRoYXQgZG9lcyBub3QgZXhpc3QgaW5zaWRlIHNjaGVtYS5cIiksIGZpZWxkTm9kZXMpO1xuICB9XG5cbiAgaWYgKCFpc09iamVjdFR5cGUocnVudGltZVR5cGUpKSB7XG4gICAgdGhyb3cgbmV3IEdyYXBoUUxFcnJvcihcIkFic3RyYWN0IHR5cGUgXFxcIlwiLmNvbmNhdChyZXR1cm5UeXBlLm5hbWUsIFwiXFxcIiB3YXMgcmVzb2x2ZSB0byBhIG5vbi1vYmplY3QgdHlwZSBcXFwiXCIpLmNvbmNhdChydW50aW1lVHlwZU5hbWUsIFwiXFxcIi5cIiksIGZpZWxkTm9kZXMpO1xuICB9XG5cbiAgaWYgKCFleGVDb250ZXh0LnNjaGVtYS5pc1N1YlR5cGUocmV0dXJuVHlwZSwgcnVudGltZVR5cGUpKSB7XG4gICAgdGhyb3cgbmV3IEdyYXBoUUxFcnJvcihcIlJ1bnRpbWUgT2JqZWN0IHR5cGUgXFxcIlwiLmNvbmNhdChydW50aW1lVHlwZS5uYW1lLCBcIlxcXCIgaXMgbm90IGEgcG9zc2libGUgdHlwZSBmb3IgXFxcIlwiKS5jb25jYXQocmV0dXJuVHlwZS5uYW1lLCBcIlxcXCIuXCIpLCBmaWVsZE5vZGVzKTtcbiAgfVxuXG4gIHJldHVybiBydW50aW1lVHlwZTtcbn1cbi8qKlxuICogQ29tcGxldGUgYW4gT2JqZWN0IHZhbHVlIGJ5IGV4ZWN1dGluZyBhbGwgc3ViLXNlbGVjdGlvbnMuXG4gKi9cblxuXG5mdW5jdGlvbiBjb21wbGV0ZU9iamVjdFZhbHVlKGV4ZUNvbnRleHQsIHJldHVyblR5cGUsIGZpZWxkTm9kZXMsIGluZm8sIHBhdGgsIHJlc3VsdCkge1xuICAvLyBJZiB0aGVyZSBpcyBhbiBpc1R5cGVPZiBwcmVkaWNhdGUgZnVuY3Rpb24sIGNhbGwgaXQgd2l0aCB0aGVcbiAgLy8gY3VycmVudCByZXN1bHQuIElmIGlzVHlwZU9mIHJldHVybnMgZmFsc2UsIHRoZW4gcmFpc2UgYW4gZXJyb3IgcmF0aGVyXG4gIC8vIHRoYW4gY29udGludWluZyBleGVjdXRpb24uXG4gIGlmIChyZXR1cm5UeXBlLmlzVHlwZU9mKSB7XG4gICAgdmFyIGlzVHlwZU9mID0gcmV0dXJuVHlwZS5pc1R5cGVPZihyZXN1bHQsIGV4ZUNvbnRleHQuY29udGV4dFZhbHVlLCBpbmZvKTtcblxuICAgIGlmIChpc1Byb21pc2UoaXNUeXBlT2YpKSB7XG4gICAgICByZXR1cm4gaXNUeXBlT2YudGhlbihmdW5jdGlvbiAocmVzb2x2ZWRJc1R5cGVPZikge1xuICAgICAgICBpZiAoIXJlc29sdmVkSXNUeXBlT2YpIHtcbiAgICAgICAgICB0aHJvdyBpbnZhbGlkUmV0dXJuVHlwZUVycm9yKHJldHVyblR5cGUsIHJlc3VsdCwgZmllbGROb2Rlcyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY29sbGVjdEFuZEV4ZWN1dGVTdWJmaWVsZHMoZXhlQ29udGV4dCwgcmV0dXJuVHlwZSwgZmllbGROb2RlcywgcGF0aCwgcmVzdWx0KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICghaXNUeXBlT2YpIHtcbiAgICAgIHRocm93IGludmFsaWRSZXR1cm5UeXBlRXJyb3IocmV0dXJuVHlwZSwgcmVzdWx0LCBmaWVsZE5vZGVzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gY29sbGVjdEFuZEV4ZWN1dGVTdWJmaWVsZHMoZXhlQ29udGV4dCwgcmV0dXJuVHlwZSwgZmllbGROb2RlcywgcGF0aCwgcmVzdWx0KTtcbn1cblxuZnVuY3Rpb24gaW52YWxpZFJldHVyblR5cGVFcnJvcihyZXR1cm5UeXBlLCByZXN1bHQsIGZpZWxkTm9kZXMpIHtcbiAgcmV0dXJuIG5ldyBHcmFwaFFMRXJyb3IoXCJFeHBlY3RlZCB2YWx1ZSBvZiB0eXBlIFxcXCJcIi5jb25jYXQocmV0dXJuVHlwZS5uYW1lLCBcIlxcXCIgYnV0IGdvdDogXCIpLmNvbmNhdChpbnNwZWN0KHJlc3VsdCksIFwiLlwiKSwgZmllbGROb2Rlcyk7XG59XG5cbmZ1bmN0aW9uIGNvbGxlY3RBbmRFeGVjdXRlU3ViZmllbGRzKGV4ZUNvbnRleHQsIHJldHVyblR5cGUsIGZpZWxkTm9kZXMsIHBhdGgsIHJlc3VsdCkge1xuICAvLyBDb2xsZWN0IHN1Yi1maWVsZHMgdG8gZXhlY3V0ZSB0byBjb21wbGV0ZSB0aGlzIHZhbHVlLlxuICB2YXIgc3ViRmllbGROb2RlcyA9IGNvbGxlY3RTdWJmaWVsZHMoZXhlQ29udGV4dCwgcmV0dXJuVHlwZSwgZmllbGROb2Rlcyk7XG4gIHJldHVybiBleGVjdXRlRmllbGRzKGV4ZUNvbnRleHQsIHJldHVyblR5cGUsIHJlc3VsdCwgcGF0aCwgc3ViRmllbGROb2Rlcyk7XG59XG4vKipcbiAqIEEgbWVtb2l6ZWQgY29sbGVjdGlvbiBvZiByZWxldmFudCBzdWJmaWVsZHMgd2l0aCByZWdhcmQgdG8gdGhlIHJldHVyblxuICogdHlwZS4gTWVtb2l6aW5nIGVuc3VyZXMgdGhlIHN1YmZpZWxkcyBhcmUgbm90IHJlcGVhdGVkbHkgY2FsY3VsYXRlZCwgd2hpY2hcbiAqIHNhdmVzIG92ZXJoZWFkIHdoZW4gcmVzb2x2aW5nIGxpc3RzIG9mIHZhbHVlcy5cbiAqL1xuXG5cbnZhciBjb2xsZWN0U3ViZmllbGRzID0gbWVtb2l6ZTMoX2NvbGxlY3RTdWJmaWVsZHMpO1xuXG5mdW5jdGlvbiBfY29sbGVjdFN1YmZpZWxkcyhleGVDb250ZXh0LCByZXR1cm5UeXBlLCBmaWVsZE5vZGVzKSB7XG4gIHZhciBzdWJGaWVsZE5vZGVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdmFyIHZpc2l0ZWRGcmFnbWVudE5hbWVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICBmb3IgKHZhciBfaTggPSAwOyBfaTggPCBmaWVsZE5vZGVzLmxlbmd0aDsgX2k4KyspIHtcbiAgICB2YXIgbm9kZSA9IGZpZWxkTm9kZXNbX2k4XTtcblxuICAgIGlmIChub2RlLnNlbGVjdGlvblNldCkge1xuICAgICAgc3ViRmllbGROb2RlcyA9IGNvbGxlY3RGaWVsZHMoZXhlQ29udGV4dCwgcmV0dXJuVHlwZSwgbm9kZS5zZWxlY3Rpb25TZXQsIHN1YkZpZWxkTm9kZXMsIHZpc2l0ZWRGcmFnbWVudE5hbWVzKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc3ViRmllbGROb2Rlcztcbn1cbi8qKlxuICogSWYgYSByZXNvbHZlVHlwZSBmdW5jdGlvbiBpcyBub3QgZ2l2ZW4sIHRoZW4gYSBkZWZhdWx0IHJlc29sdmUgYmVoYXZpb3IgaXNcbiAqIHVzZWQgd2hpY2ggYXR0ZW1wdHMgdHdvIHN0cmF0ZWdpZXM6XG4gKlxuICogRmlyc3QsIFNlZSBpZiB0aGUgcHJvdmlkZWQgdmFsdWUgaGFzIGEgYF9fdHlwZW5hbWVgIGZpZWxkIGRlZmluZWQsIGlmIHNvLCB1c2VcbiAqIHRoYXQgdmFsdWUgYXMgbmFtZSBvZiB0aGUgcmVzb2x2ZWQgdHlwZS5cbiAqXG4gKiBPdGhlcndpc2UsIHRlc3QgZWFjaCBwb3NzaWJsZSB0eXBlIGZvciB0aGUgYWJzdHJhY3QgdHlwZSBieSBjYWxsaW5nXG4gKiBpc1R5cGVPZiBmb3IgdGhlIG9iamVjdCBiZWluZyBjb2VyY2VkLCByZXR1cm5pbmcgdGhlIGZpcnN0IHR5cGUgdGhhdCBtYXRjaGVzLlxuICovXG5cblxuZXhwb3J0IHZhciBkZWZhdWx0VHlwZVJlc29sdmVyID0gZnVuY3Rpb24gZGVmYXVsdFR5cGVSZXNvbHZlcih2YWx1ZSwgY29udGV4dFZhbHVlLCBpbmZvLCBhYnN0cmFjdFR5cGUpIHtcbiAgLy8gRmlyc3QsIGxvb2sgZm9yIGBfX3R5cGVuYW1lYC5cbiAgaWYgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgdHlwZW9mIHZhbHVlLl9fdHlwZW5hbWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbHVlLl9fdHlwZW5hbWU7XG4gIH0gLy8gT3RoZXJ3aXNlLCB0ZXN0IGVhY2ggcG9zc2libGUgdHlwZS5cblxuXG4gIHZhciBwb3NzaWJsZVR5cGVzID0gaW5mby5zY2hlbWEuZ2V0UG9zc2libGVUeXBlcyhhYnN0cmFjdFR5cGUpO1xuICB2YXIgcHJvbWlzZWRJc1R5cGVPZlJlc3VsdHMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBvc3NpYmxlVHlwZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdHlwZSA9IHBvc3NpYmxlVHlwZXNbaV07XG5cbiAgICBpZiAodHlwZS5pc1R5cGVPZikge1xuICAgICAgdmFyIGlzVHlwZU9mUmVzdWx0ID0gdHlwZS5pc1R5cGVPZih2YWx1ZSwgY29udGV4dFZhbHVlLCBpbmZvKTtcblxuICAgICAgaWYgKGlzUHJvbWlzZShpc1R5cGVPZlJlc3VsdCkpIHtcbiAgICAgICAgcHJvbWlzZWRJc1R5cGVPZlJlc3VsdHNbaV0gPSBpc1R5cGVPZlJlc3VsdDtcbiAgICAgIH0gZWxzZSBpZiAoaXNUeXBlT2ZSZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuIHR5cGUubmFtZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAocHJvbWlzZWRJc1R5cGVPZlJlc3VsdHMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VkSXNUeXBlT2ZSZXN1bHRzKS50aGVuKGZ1bmN0aW9uIChpc1R5cGVPZlJlc3VsdHMpIHtcbiAgICAgIGZvciAodmFyIF9pOSA9IDA7IF9pOSA8IGlzVHlwZU9mUmVzdWx0cy5sZW5ndGg7IF9pOSsrKSB7XG4gICAgICAgIGlmIChpc1R5cGVPZlJlc3VsdHNbX2k5XSkge1xuICAgICAgICAgIHJldHVybiBwb3NzaWJsZVR5cGVzW19pOV0ubmFtZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG59O1xuLyoqXG4gKiBJZiBhIHJlc29sdmUgZnVuY3Rpb24gaXMgbm90IGdpdmVuLCB0aGVuIGEgZGVmYXVsdCByZXNvbHZlIGJlaGF2aW9yIGlzIHVzZWRcbiAqIHdoaWNoIHRha2VzIHRoZSBwcm9wZXJ0eSBvZiB0aGUgc291cmNlIG9iamVjdCBvZiB0aGUgc2FtZSBuYW1lIGFzIHRoZSBmaWVsZFxuICogYW5kIHJldHVybnMgaXQgYXMgdGhlIHJlc3VsdCwgb3IgaWYgaXQncyBhIGZ1bmN0aW9uLCByZXR1cm5zIHRoZSByZXN1bHRcbiAqIG9mIGNhbGxpbmcgdGhhdCBmdW5jdGlvbiB3aGlsZSBwYXNzaW5nIGFsb25nIGFyZ3MgYW5kIGNvbnRleHQgdmFsdWUuXG4gKi9cblxuZXhwb3J0IHZhciBkZWZhdWx0RmllbGRSZXNvbHZlciA9IGZ1bmN0aW9uIGRlZmF1bHRGaWVsZFJlc29sdmVyKHNvdXJjZSwgYXJncywgY29udGV4dFZhbHVlLCBpbmZvKSB7XG4gIC8vIGVuc3VyZSBzb3VyY2UgaXMgYSB2YWx1ZSBmb3Igd2hpY2ggcHJvcGVydHkgYWNjZXNzIGlzIGFjY2VwdGFibGUuXG4gIGlmIChpc09iamVjdExpa2Uoc291cmNlKSB8fCB0eXBlb2Ygc291cmNlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIHByb3BlcnR5ID0gc291cmNlW2luZm8uZmllbGROYW1lXTtcblxuICAgIGlmICh0eXBlb2YgcHJvcGVydHkgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJldHVybiBzb3VyY2VbaW5mby5maWVsZE5hbWVdKGFyZ3MsIGNvbnRleHRWYWx1ZSwgaW5mbyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb3BlcnR5O1xuICB9XG59O1xuLyoqXG4gKiBUaGlzIG1ldGhvZCBsb29rcyB1cCB0aGUgZmllbGQgb24gdGhlIGdpdmVuIHR5cGUgZGVmaW5pdGlvbi5cbiAqIEl0IGhhcyBzcGVjaWFsIGNhc2luZyBmb3IgdGhlIHRocmVlIGludHJvc3BlY3Rpb24gZmllbGRzLFxuICogX19zY2hlbWEsIF9fdHlwZSBhbmQgX190eXBlbmFtZS4gX190eXBlbmFtZSBpcyBzcGVjaWFsIGJlY2F1c2VcbiAqIGl0IGNhbiBhbHdheXMgYmUgcXVlcmllZCBhcyBhIGZpZWxkLCBldmVuIGluIHNpdHVhdGlvbnMgd2hlcmUgbm9cbiAqIG90aGVyIGZpZWxkcyBhcmUgYWxsb3dlZCwgbGlrZSBvbiBhIFVuaW9uLiBfX3NjaGVtYSBhbmQgX190eXBlXG4gKiBjb3VsZCBnZXQgYXV0b21hdGljYWxseSBhZGRlZCB0byB0aGUgcXVlcnkgdHlwZSwgYnV0IHRoYXQgd291bGRcbiAqIHJlcXVpcmUgbXV0YXRpbmcgdHlwZSBkZWZpbml0aW9ucywgd2hpY2ggd291bGQgY2F1c2UgaXNzdWVzLlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRGaWVsZERlZihzY2hlbWEsIHBhcmVudFR5cGUsIGZpZWxkTmFtZSkge1xuICBpZiAoZmllbGROYW1lID09PSBTY2hlbWFNZXRhRmllbGREZWYubmFtZSAmJiBzY2hlbWEuZ2V0UXVlcnlUeXBlKCkgPT09IHBhcmVudFR5cGUpIHtcbiAgICByZXR1cm4gU2NoZW1hTWV0YUZpZWxkRGVmO1xuICB9IGVsc2UgaWYgKGZpZWxkTmFtZSA9PT0gVHlwZU1ldGFGaWVsZERlZi5uYW1lICYmIHNjaGVtYS5nZXRRdWVyeVR5cGUoKSA9PT0gcGFyZW50VHlwZSkge1xuICAgIHJldHVybiBUeXBlTWV0YUZpZWxkRGVmO1xuICB9IGVsc2UgaWYgKGZpZWxkTmFtZSA9PT0gVHlwZU5hbWVNZXRhRmllbGREZWYubmFtZSkge1xuICAgIHJldHVybiBUeXBlTmFtZU1ldGFGaWVsZERlZjtcbiAgfVxuXG4gIHJldHVybiBwYXJlbnRUeXBlLmdldEZpZWxkcygpW2ZpZWxkTmFtZV07XG59XG4iLCJpbXBvcnQgZmluZCBmcm9tIFwiLi4vcG9seWZpbGxzL2ZpbmQubWpzXCI7XG5pbXBvcnQga2V5TWFwIGZyb20gXCIuLi9qc3V0aWxzL2tleU1hcC5tanNcIjtcbmltcG9ydCBpbnNwZWN0IGZyb20gXCIuLi9qc3V0aWxzL2luc3BlY3QubWpzXCI7XG5pbXBvcnQgcHJpbnRQYXRoQXJyYXkgZnJvbSBcIi4uL2pzdXRpbHMvcHJpbnRQYXRoQXJyYXkubWpzXCI7XG5pbXBvcnQgeyBHcmFwaFFMRXJyb3IgfSBmcm9tIFwiLi4vZXJyb3IvR3JhcGhRTEVycm9yLm1qc1wiO1xuaW1wb3J0IHsgS2luZCB9IGZyb20gXCIuLi9sYW5ndWFnZS9raW5kcy5tanNcIjtcbmltcG9ydCB7IHByaW50IH0gZnJvbSBcIi4uL2xhbmd1YWdlL3ByaW50ZXIubWpzXCI7XG5pbXBvcnQgeyBpc0lucHV0VHlwZSwgaXNOb25OdWxsVHlwZSB9IGZyb20gXCIuLi90eXBlL2RlZmluaXRpb24ubWpzXCI7XG5pbXBvcnQgeyB0eXBlRnJvbUFTVCB9IGZyb20gXCIuLi91dGlsaXRpZXMvdHlwZUZyb21BU1QubWpzXCI7XG5pbXBvcnQgeyB2YWx1ZUZyb21BU1QgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3ZhbHVlRnJvbUFTVC5tanNcIjtcbmltcG9ydCB7IGNvZXJjZUlucHV0VmFsdWUgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL2NvZXJjZUlucHV0VmFsdWUubWpzXCI7XG5cbi8qKlxuICogUHJlcGFyZXMgYW4gb2JqZWN0IG1hcCBvZiB2YXJpYWJsZVZhbHVlcyBvZiB0aGUgY29ycmVjdCB0eXBlIGJhc2VkIG9uIHRoZVxuICogcHJvdmlkZWQgdmFyaWFibGUgZGVmaW5pdGlvbnMgYW5kIGFyYml0cmFyeSBpbnB1dC4gSWYgdGhlIGlucHV0IGNhbm5vdCBiZVxuICogcGFyc2VkIHRvIG1hdGNoIHRoZSB2YXJpYWJsZSBkZWZpbml0aW9ucywgYSBHcmFwaFFMRXJyb3Igd2lsbCBiZSB0aHJvd24uXG4gKlxuICogTm90ZTogVGhlIHJldHVybmVkIHZhbHVlIGlzIGEgcGxhaW4gT2JqZWN0IHdpdGggYSBwcm90b3R5cGUsIHNpbmNlIGl0IGlzXG4gKiBleHBvc2VkIHRvIHVzZXIgY29kZS4gQ2FyZSBzaG91bGQgYmUgdGFrZW4gdG8gbm90IHB1bGwgdmFsdWVzIGZyb20gdGhlXG4gKiBPYmplY3QgcHJvdG90eXBlLlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0VmFyaWFibGVWYWx1ZXMoc2NoZW1hLCB2YXJEZWZOb2RlcywgaW5wdXRzLCBvcHRpb25zKSB7XG4gIHZhciBlcnJvcnMgPSBbXTtcbiAgdmFyIG1heEVycm9ycyA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5tYXhFcnJvcnM7XG5cbiAgdHJ5IHtcbiAgICB2YXIgY29lcmNlZCA9IGNvZXJjZVZhcmlhYmxlVmFsdWVzKHNjaGVtYSwgdmFyRGVmTm9kZXMsIGlucHV0cywgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICBpZiAobWF4RXJyb3JzICE9IG51bGwgJiYgZXJyb3JzLmxlbmd0aCA+PSBtYXhFcnJvcnMpIHtcbiAgICAgICAgdGhyb3cgbmV3IEdyYXBoUUxFcnJvcignVG9vIG1hbnkgZXJyb3JzIHByb2Nlc3NpbmcgdmFyaWFibGVzLCBlcnJvciBsaW1pdCByZWFjaGVkLiBFeGVjdXRpb24gYWJvcnRlZC4nKTtcbiAgICAgIH1cblxuICAgICAgZXJyb3JzLnB1c2goZXJyb3IpO1xuICAgIH0pO1xuXG4gICAgaWYgKGVycm9ycy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGNvZXJjZWQ6IGNvZXJjZWRcbiAgICAgIH07XG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGVycm9ycy5wdXNoKGVycm9yKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZXJyb3JzOiBlcnJvcnNcbiAgfTtcbn1cblxuZnVuY3Rpb24gY29lcmNlVmFyaWFibGVWYWx1ZXMoc2NoZW1hLCB2YXJEZWZOb2RlcywgaW5wdXRzLCBvbkVycm9yKSB7XG4gIHZhciBjb2VyY2VkVmFsdWVzID0ge307XG5cbiAgdmFyIF9sb29wID0gZnVuY3Rpb24gX2xvb3AoX2kyKSB7XG4gICAgdmFyIHZhckRlZk5vZGUgPSB2YXJEZWZOb2Rlc1tfaTJdO1xuICAgIHZhciB2YXJOYW1lID0gdmFyRGVmTm9kZS52YXJpYWJsZS5uYW1lLnZhbHVlO1xuICAgIHZhciB2YXJUeXBlID0gdHlwZUZyb21BU1Qoc2NoZW1hLCB2YXJEZWZOb2RlLnR5cGUpO1xuXG4gICAgaWYgKCFpc0lucHV0VHlwZSh2YXJUeXBlKSkge1xuICAgICAgLy8gTXVzdCB1c2UgaW5wdXQgdHlwZXMgZm9yIHZhcmlhYmxlcy4gVGhpcyBzaG91bGQgYmUgY2F1Z2h0IGR1cmluZ1xuICAgICAgLy8gdmFsaWRhdGlvbiwgaG93ZXZlciBpcyBjaGVja2VkIGFnYWluIGhlcmUgZm9yIHNhZmV0eS5cbiAgICAgIHZhciB2YXJUeXBlU3RyID0gcHJpbnQodmFyRGVmTm9kZS50eXBlKTtcbiAgICAgIG9uRXJyb3IobmV3IEdyYXBoUUxFcnJvcihcIlZhcmlhYmxlIFxcXCIkXCIuY29uY2F0KHZhck5hbWUsIFwiXFxcIiBleHBlY3RlZCB2YWx1ZSBvZiB0eXBlIFxcXCJcIikuY29uY2F0KHZhclR5cGVTdHIsIFwiXFxcIiB3aGljaCBjYW5ub3QgYmUgdXNlZCBhcyBhbiBpbnB1dCB0eXBlLlwiKSwgdmFyRGVmTm9kZS50eXBlKSk7XG4gICAgICByZXR1cm4gXCJjb250aW51ZVwiO1xuICAgIH1cblxuICAgIGlmICghaGFzT3duUHJvcGVydHkoaW5wdXRzLCB2YXJOYW1lKSkge1xuICAgICAgaWYgKHZhckRlZk5vZGUuZGVmYXVsdFZhbHVlKSB7XG4gICAgICAgIGNvZXJjZWRWYWx1ZXNbdmFyTmFtZV0gPSB2YWx1ZUZyb21BU1QodmFyRGVmTm9kZS5kZWZhdWx0VmFsdWUsIHZhclR5cGUpO1xuICAgICAgfSBlbHNlIGlmIChpc05vbk51bGxUeXBlKHZhclR5cGUpKSB7XG4gICAgICAgIHZhciBfdmFyVHlwZVN0ciA9IGluc3BlY3QodmFyVHlwZSk7XG5cbiAgICAgICAgb25FcnJvcihuZXcgR3JhcGhRTEVycm9yKFwiVmFyaWFibGUgXFxcIiRcIi5jb25jYXQodmFyTmFtZSwgXCJcXFwiIG9mIHJlcXVpcmVkIHR5cGUgXFxcIlwiKS5jb25jYXQoX3ZhclR5cGVTdHIsIFwiXFxcIiB3YXMgbm90IHByb3ZpZGVkLlwiKSwgdmFyRGVmTm9kZSkpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gXCJjb250aW51ZVwiO1xuICAgIH1cblxuICAgIHZhciB2YWx1ZSA9IGlucHV0c1t2YXJOYW1lXTtcblxuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCAmJiBpc05vbk51bGxUeXBlKHZhclR5cGUpKSB7XG4gICAgICB2YXIgX3ZhclR5cGVTdHIyID0gaW5zcGVjdCh2YXJUeXBlKTtcblxuICAgICAgb25FcnJvcihuZXcgR3JhcGhRTEVycm9yKFwiVmFyaWFibGUgXFxcIiRcIi5jb25jYXQodmFyTmFtZSwgXCJcXFwiIG9mIG5vbi1udWxsIHR5cGUgXFxcIlwiKS5jb25jYXQoX3ZhclR5cGVTdHIyLCBcIlxcXCIgbXVzdCBub3QgYmUgbnVsbC5cIiksIHZhckRlZk5vZGUpKTtcbiAgICAgIHJldHVybiBcImNvbnRpbnVlXCI7XG4gICAgfVxuXG4gICAgY29lcmNlZFZhbHVlc1t2YXJOYW1lXSA9IGNvZXJjZUlucHV0VmFsdWUodmFsdWUsIHZhclR5cGUsIGZ1bmN0aW9uIChwYXRoLCBpbnZhbGlkVmFsdWUsIGVycm9yKSB7XG4gICAgICB2YXIgcHJlZml4ID0gXCJWYXJpYWJsZSBcXFwiJFwiLmNvbmNhdCh2YXJOYW1lLCBcIlxcXCIgZ290IGludmFsaWQgdmFsdWUgXCIpICsgaW5zcGVjdChpbnZhbGlkVmFsdWUpO1xuXG4gICAgICBpZiAocGF0aC5sZW5ndGggPiAwKSB7XG4gICAgICAgIHByZWZpeCArPSBcIiBhdCBcXFwiXCIuY29uY2F0KHZhck5hbWUpLmNvbmNhdChwcmludFBhdGhBcnJheShwYXRoKSwgXCJcXFwiXCIpO1xuICAgICAgfVxuXG4gICAgICBvbkVycm9yKG5ldyBHcmFwaFFMRXJyb3IocHJlZml4ICsgJzsgJyArIGVycm9yLm1lc3NhZ2UsIHZhckRlZk5vZGUsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGVycm9yLm9yaWdpbmFsRXJyb3IpKTtcbiAgICB9KTtcbiAgfTtcblxuICBmb3IgKHZhciBfaTIgPSAwOyBfaTIgPCB2YXJEZWZOb2Rlcy5sZW5ndGg7IF9pMisrKSB7XG4gICAgdmFyIF9yZXQgPSBfbG9vcChfaTIpO1xuXG4gICAgaWYgKF9yZXQgPT09IFwiY29udGludWVcIikgY29udGludWU7XG4gIH1cblxuICByZXR1cm4gY29lcmNlZFZhbHVlcztcbn1cbi8qKlxuICogUHJlcGFyZXMgYW4gb2JqZWN0IG1hcCBvZiBhcmd1bWVudCB2YWx1ZXMgZ2l2ZW4gYSBsaXN0IG9mIGFyZ3VtZW50XG4gKiBkZWZpbml0aW9ucyBhbmQgbGlzdCBvZiBhcmd1bWVudCBBU1Qgbm9kZXMuXG4gKlxuICogTm90ZTogVGhlIHJldHVybmVkIHZhbHVlIGlzIGEgcGxhaW4gT2JqZWN0IHdpdGggYSBwcm90b3R5cGUsIHNpbmNlIGl0IGlzXG4gKiBleHBvc2VkIHRvIHVzZXIgY29kZS4gQ2FyZSBzaG91bGQgYmUgdGFrZW4gdG8gbm90IHB1bGwgdmFsdWVzIGZyb20gdGhlXG4gKiBPYmplY3QgcHJvdG90eXBlLlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEFyZ3VtZW50VmFsdWVzKGRlZiwgbm9kZSwgdmFyaWFibGVWYWx1ZXMpIHtcbiAgdmFyIF9ub2RlJGFyZ3VtZW50cztcblxuICB2YXIgY29lcmNlZFZhbHVlcyA9IHt9OyAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAoU2VlOiAnaHR0cHM6Ly9naXRodWIuY29tL2dyYXBocWwvZ3JhcGhxbC1qcy9pc3N1ZXMvMjIwMycpXG5cbiAgdmFyIGFyZ3VtZW50Tm9kZXMgPSAoX25vZGUkYXJndW1lbnRzID0gbm9kZS5hcmd1bWVudHMpICE9PSBudWxsICYmIF9ub2RlJGFyZ3VtZW50cyAhPT0gdm9pZCAwID8gX25vZGUkYXJndW1lbnRzIDogW107XG4gIHZhciBhcmdOb2RlTWFwID0ga2V5TWFwKGFyZ3VtZW50Tm9kZXMsIGZ1bmN0aW9uIChhcmcpIHtcbiAgICByZXR1cm4gYXJnLm5hbWUudmFsdWU7XG4gIH0pO1xuXG4gIGZvciAodmFyIF9pNCA9IDAsIF9kZWYkYXJnczIgPSBkZWYuYXJnczsgX2k0IDwgX2RlZiRhcmdzMi5sZW5ndGg7IF9pNCsrKSB7XG4gICAgdmFyIGFyZ0RlZiA9IF9kZWYkYXJnczJbX2k0XTtcbiAgICB2YXIgbmFtZSA9IGFyZ0RlZi5uYW1lO1xuICAgIHZhciBhcmdUeXBlID0gYXJnRGVmLnR5cGU7XG4gICAgdmFyIGFyZ3VtZW50Tm9kZSA9IGFyZ05vZGVNYXBbbmFtZV07XG5cbiAgICBpZiAoIWFyZ3VtZW50Tm9kZSkge1xuICAgICAgaWYgKGFyZ0RlZi5kZWZhdWx0VmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb2VyY2VkVmFsdWVzW25hbWVdID0gYXJnRGVmLmRlZmF1bHRWYWx1ZTtcbiAgICAgIH0gZWxzZSBpZiAoaXNOb25OdWxsVHlwZShhcmdUeXBlKSkge1xuICAgICAgICB0aHJvdyBuZXcgR3JhcGhRTEVycm9yKFwiQXJndW1lbnQgXFxcIlwiLmNvbmNhdChuYW1lLCBcIlxcXCIgb2YgcmVxdWlyZWQgdHlwZSBcXFwiXCIpLmNvbmNhdChpbnNwZWN0KGFyZ1R5cGUpLCBcIlxcXCIgXCIpICsgJ3dhcyBub3QgcHJvdmlkZWQuJywgbm9kZSk7XG4gICAgICB9XG5cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHZhciB2YWx1ZU5vZGUgPSBhcmd1bWVudE5vZGUudmFsdWU7XG4gICAgdmFyIGlzTnVsbCA9IHZhbHVlTm9kZS5raW5kID09PSBLaW5kLk5VTEw7XG5cbiAgICBpZiAodmFsdWVOb2RlLmtpbmQgPT09IEtpbmQuVkFSSUFCTEUpIHtcbiAgICAgIHZhciB2YXJpYWJsZU5hbWUgPSB2YWx1ZU5vZGUubmFtZS52YWx1ZTtcblxuICAgICAgaWYgKHZhcmlhYmxlVmFsdWVzID09IG51bGwgfHwgIWhhc093blByb3BlcnR5KHZhcmlhYmxlVmFsdWVzLCB2YXJpYWJsZU5hbWUpKSB7XG4gICAgICAgIGlmIChhcmdEZWYuZGVmYXVsdFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBjb2VyY2VkVmFsdWVzW25hbWVdID0gYXJnRGVmLmRlZmF1bHRWYWx1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChpc05vbk51bGxUeXBlKGFyZ1R5cGUpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEdyYXBoUUxFcnJvcihcIkFyZ3VtZW50IFxcXCJcIi5jb25jYXQobmFtZSwgXCJcXFwiIG9mIHJlcXVpcmVkIHR5cGUgXFxcIlwiKS5jb25jYXQoaW5zcGVjdChhcmdUeXBlKSwgXCJcXFwiIFwiKSArIFwid2FzIHByb3ZpZGVkIHRoZSB2YXJpYWJsZSBcXFwiJFwiLmNvbmNhdCh2YXJpYWJsZU5hbWUsIFwiXFxcIiB3aGljaCB3YXMgbm90IHByb3ZpZGVkIGEgcnVudGltZSB2YWx1ZS5cIiksIHZhbHVlTm9kZSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaXNOdWxsID0gdmFyaWFibGVWYWx1ZXNbdmFyaWFibGVOYW1lXSA9PSBudWxsO1xuICAgIH1cblxuICAgIGlmIChpc051bGwgJiYgaXNOb25OdWxsVHlwZShhcmdUeXBlKSkge1xuICAgICAgdGhyb3cgbmV3IEdyYXBoUUxFcnJvcihcIkFyZ3VtZW50IFxcXCJcIi5jb25jYXQobmFtZSwgXCJcXFwiIG9mIG5vbi1udWxsIHR5cGUgXFxcIlwiKS5jb25jYXQoaW5zcGVjdChhcmdUeXBlKSwgXCJcXFwiIFwiKSArICdtdXN0IG5vdCBiZSBudWxsLicsIHZhbHVlTm9kZSk7XG4gICAgfVxuXG4gICAgdmFyIGNvZXJjZWRWYWx1ZSA9IHZhbHVlRnJvbUFTVCh2YWx1ZU5vZGUsIGFyZ1R5cGUsIHZhcmlhYmxlVmFsdWVzKTtcblxuICAgIGlmIChjb2VyY2VkVmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gTm90ZTogVmFsdWVzT2ZDb3JyZWN0VHlwZVJ1bGUgdmFsaWRhdGlvbiBzaG91bGQgY2F0Y2ggdGhpcyBiZWZvcmVcbiAgICAgIC8vIGV4ZWN1dGlvbi4gVGhpcyBpcyBhIHJ1bnRpbWUgY2hlY2sgdG8gZW5zdXJlIGV4ZWN1dGlvbiBkb2VzIG5vdFxuICAgICAgLy8gY29udGludWUgd2l0aCBhbiBpbnZhbGlkIGFyZ3VtZW50IHZhbHVlLlxuICAgICAgdGhyb3cgbmV3IEdyYXBoUUxFcnJvcihcIkFyZ3VtZW50IFxcXCJcIi5jb25jYXQobmFtZSwgXCJcXFwiIGhhcyBpbnZhbGlkIHZhbHVlIFwiKS5jb25jYXQocHJpbnQodmFsdWVOb2RlKSwgXCIuXCIpLCB2YWx1ZU5vZGUpO1xuICAgIH1cblxuICAgIGNvZXJjZWRWYWx1ZXNbbmFtZV0gPSBjb2VyY2VkVmFsdWU7XG4gIH1cblxuICByZXR1cm4gY29lcmNlZFZhbHVlcztcbn1cbi8qKlxuICogUHJlcGFyZXMgYW4gb2JqZWN0IG1hcCBvZiBhcmd1bWVudCB2YWx1ZXMgZ2l2ZW4gYSBkaXJlY3RpdmUgZGVmaW5pdGlvblxuICogYW5kIGEgQVNUIG5vZGUgd2hpY2ggbWF5IGNvbnRhaW4gZGlyZWN0aXZlcy4gT3B0aW9uYWxseSBhbHNvIGFjY2VwdHMgYSBtYXBcbiAqIG9mIHZhcmlhYmxlIHZhbHVlcy5cbiAqXG4gKiBJZiB0aGUgZGlyZWN0aXZlIGRvZXMgbm90IGV4aXN0IG9uIHRoZSBub2RlLCByZXR1cm5zIHVuZGVmaW5lZC5cbiAqXG4gKiBOb3RlOiBUaGUgcmV0dXJuZWQgdmFsdWUgaXMgYSBwbGFpbiBPYmplY3Qgd2l0aCBhIHByb3RvdHlwZSwgc2luY2UgaXQgaXNcbiAqIGV4cG9zZWQgdG8gdXNlciBjb2RlLiBDYXJlIHNob3VsZCBiZSB0YWtlbiB0byBub3QgcHVsbCB2YWx1ZXMgZnJvbSB0aGVcbiAqIE9iamVjdCBwcm90b3R5cGUuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGdldERpcmVjdGl2ZVZhbHVlcyhkaXJlY3RpdmVEZWYsIG5vZGUsIHZhcmlhYmxlVmFsdWVzKSB7XG4gIHZhciBkaXJlY3RpdmVOb2RlID0gbm9kZS5kaXJlY3RpdmVzICYmIGZpbmQobm9kZS5kaXJlY3RpdmVzLCBmdW5jdGlvbiAoZGlyZWN0aXZlKSB7XG4gICAgcmV0dXJuIGRpcmVjdGl2ZS5uYW1lLnZhbHVlID09PSBkaXJlY3RpdmVEZWYubmFtZTtcbiAgfSk7XG5cbiAgaWYgKGRpcmVjdGl2ZU5vZGUpIHtcbiAgICByZXR1cm4gZ2V0QXJndW1lbnRWYWx1ZXMoZGlyZWN0aXZlRGVmLCBkaXJlY3RpdmVOb2RlLCB2YXJpYWJsZVZhbHVlcyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaGFzT3duUHJvcGVydHkob2JqLCBwcm9wKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTtcbn1cbiIsImltcG9ydCBpc1Byb21pc2UgZnJvbSBcIi4vanN1dGlscy9pc1Byb21pc2UubWpzXCI7XG5pbXBvcnQgeyBwYXJzZSB9IGZyb20gXCIuL2xhbmd1YWdlL3BhcnNlci5tanNcIjtcbmltcG9ydCB7IHZhbGlkYXRlIH0gZnJvbSBcIi4vdmFsaWRhdGlvbi92YWxpZGF0ZS5tanNcIjtcbmltcG9ydCB7IHZhbGlkYXRlU2NoZW1hIH0gZnJvbSBcIi4vdHlwZS92YWxpZGF0ZS5tanNcIjtcbmltcG9ydCB7IGV4ZWN1dGUgfSBmcm9tIFwiLi9leGVjdXRpb24vZXhlY3V0ZS5tanNcIjtcbi8qKlxuICogVGhpcyBpcyB0aGUgcHJpbWFyeSBlbnRyeSBwb2ludCBmdW5jdGlvbiBmb3IgZnVsZmlsbGluZyBHcmFwaFFMIG9wZXJhdGlvbnNcbiAqIGJ5IHBhcnNpbmcsIHZhbGlkYXRpbmcsIGFuZCBleGVjdXRpbmcgYSBHcmFwaFFMIGRvY3VtZW50IGFsb25nIHNpZGUgYVxuICogR3JhcGhRTCBzY2hlbWEuXG4gKlxuICogTW9yZSBzb3BoaXN0aWNhdGVkIEdyYXBoUUwgc2VydmVycywgc3VjaCBhcyB0aG9zZSB3aGljaCBwZXJzaXN0IHF1ZXJpZXMsXG4gKiBtYXkgd2lzaCB0byBzZXBhcmF0ZSB0aGUgdmFsaWRhdGlvbiBhbmQgZXhlY3V0aW9uIHBoYXNlcyB0byBhIHN0YXRpYyB0aW1lXG4gKiB0b29saW5nIHN0ZXAsIGFuZCBhIHNlcnZlciBydW50aW1lIHN0ZXAuXG4gKlxuICogQWNjZXB0cyBlaXRoZXIgYW4gb2JqZWN0IHdpdGggbmFtZWQgYXJndW1lbnRzLCBvciBpbmRpdmlkdWFsIGFyZ3VtZW50czpcbiAqXG4gKiBzY2hlbWE6XG4gKiAgICBUaGUgR3JhcGhRTCB0eXBlIHN5c3RlbSB0byB1c2Ugd2hlbiB2YWxpZGF0aW5nIGFuZCBleGVjdXRpbmcgYSBxdWVyeS5cbiAqIHNvdXJjZTpcbiAqICAgIEEgR3JhcGhRTCBsYW5ndWFnZSBmb3JtYXR0ZWQgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgcmVxdWVzdGVkIG9wZXJhdGlvbi5cbiAqIHJvb3RWYWx1ZTpcbiAqICAgIFRoZSB2YWx1ZSBwcm92aWRlZCBhcyB0aGUgZmlyc3QgYXJndW1lbnQgdG8gcmVzb2x2ZXIgZnVuY3Rpb25zIG9uIHRoZSB0b3BcbiAqICAgIGxldmVsIHR5cGUgKGUuZy4gdGhlIHF1ZXJ5IG9iamVjdCB0eXBlKS5cbiAqIGNvbnRleHRWYWx1ZTpcbiAqICAgIFRoZSBjb250ZXh0IHZhbHVlIGlzIHByb3ZpZGVkIGFzIGFuIGFyZ3VtZW50IHRvIHJlc29sdmVyIGZ1bmN0aW9ucyBhZnRlclxuICogICAgZmllbGQgYXJndW1lbnRzLiBJdCBpcyB1c2VkIHRvIHBhc3Mgc2hhcmVkIGluZm9ybWF0aW9uIHVzZWZ1bCBhdCBhbnkgcG9pbnRcbiAqICAgIGR1cmluZyBleGVjdXRpbmcgdGhpcyBxdWVyeSwgZm9yIGV4YW1wbGUgdGhlIGN1cnJlbnRseSBsb2dnZWQgaW4gdXNlciBhbmRcbiAqICAgIGNvbm5lY3Rpb25zIHRvIGRhdGFiYXNlcyBvciBvdGhlciBzZXJ2aWNlcy5cbiAqIHZhcmlhYmxlVmFsdWVzOlxuICogICAgQSBtYXBwaW5nIG9mIHZhcmlhYmxlIG5hbWUgdG8gcnVudGltZSB2YWx1ZSB0byB1c2UgZm9yIGFsbCB2YXJpYWJsZXNcbiAqICAgIGRlZmluZWQgaW4gdGhlIHJlcXVlc3RTdHJpbmcuXG4gKiBvcGVyYXRpb25OYW1lOlxuICogICAgVGhlIG5hbWUgb2YgdGhlIG9wZXJhdGlvbiB0byB1c2UgaWYgcmVxdWVzdFN0cmluZyBjb250YWlucyBtdWx0aXBsZVxuICogICAgcG9zc2libGUgb3BlcmF0aW9ucy4gQ2FuIGJlIG9taXR0ZWQgaWYgcmVxdWVzdFN0cmluZyBjb250YWlucyBvbmx5XG4gKiAgICBvbmUgb3BlcmF0aW9uLlxuICogZmllbGRSZXNvbHZlcjpcbiAqICAgIEEgcmVzb2x2ZXIgZnVuY3Rpb24gdG8gdXNlIHdoZW4gb25lIGlzIG5vdCBwcm92aWRlZCBieSB0aGUgc2NoZW1hLlxuICogICAgSWYgbm90IHByb3ZpZGVkLCB0aGUgZGVmYXVsdCBmaWVsZCByZXNvbHZlciBpcyB1c2VkICh3aGljaCBsb29rcyBmb3IgYVxuICogICAgdmFsdWUgb3IgbWV0aG9kIG9uIHRoZSBzb3VyY2UgdmFsdWUgd2l0aCB0aGUgZmllbGQncyBuYW1lKS5cbiAqIHR5cGVSZXNvbHZlcjpcbiAqICAgIEEgdHlwZSByZXNvbHZlciBmdW5jdGlvbiB0byB1c2Ugd2hlbiBub25lIGlzIHByb3ZpZGVkIGJ5IHRoZSBzY2hlbWEuXG4gKiAgICBJZiBub3QgcHJvdmlkZWQsIHRoZSBkZWZhdWx0IHR5cGUgcmVzb2x2ZXIgaXMgdXNlZCAod2hpY2ggbG9va3MgZm9yIGFcbiAqICAgIGBfX3R5cGVuYW1lYCBmaWVsZCBvciBhbHRlcm5hdGl2ZWx5IGNhbGxzIHRoZSBgaXNUeXBlT2ZgIG1ldGhvZCkuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGdyYXBocWwoYXJnc09yU2NoZW1hLCBzb3VyY2UsIHJvb3RWYWx1ZSwgY29udGV4dFZhbHVlLCB2YXJpYWJsZVZhbHVlcywgb3BlcmF0aW9uTmFtZSwgZmllbGRSZXNvbHZlciwgdHlwZVJlc29sdmVyKSB7XG4gIHZhciBfYXJndW1lbnRzID0gYXJndW1lbnRzO1xuXG4gIC8qIGVzbGludC1lbmFibGUgbm8tcmVkZWNsYXJlICovXG4gIC8vIEFsd2F5cyByZXR1cm4gYSBQcm9taXNlIGZvciBhIGNvbnNpc3RlbnQgQVBJLlxuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICByZXR1cm4gcmVzb2x2ZSggLy8gRXh0cmFjdCBhcmd1bWVudHMgZnJvbSBvYmplY3QgYXJncyBpZiBwcm92aWRlZC5cbiAgICBfYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGdyYXBocWxJbXBsKGFyZ3NPclNjaGVtYSkgOiBncmFwaHFsSW1wbCh7XG4gICAgICBzY2hlbWE6IGFyZ3NPclNjaGVtYSxcbiAgICAgIHNvdXJjZTogc291cmNlLFxuICAgICAgcm9vdFZhbHVlOiByb290VmFsdWUsXG4gICAgICBjb250ZXh0VmFsdWU6IGNvbnRleHRWYWx1ZSxcbiAgICAgIHZhcmlhYmxlVmFsdWVzOiB2YXJpYWJsZVZhbHVlcyxcbiAgICAgIG9wZXJhdGlvbk5hbWU6IG9wZXJhdGlvbk5hbWUsXG4gICAgICBmaWVsZFJlc29sdmVyOiBmaWVsZFJlc29sdmVyLFxuICAgICAgdHlwZVJlc29sdmVyOiB0eXBlUmVzb2x2ZXJcbiAgICB9KSk7XG4gIH0pO1xufVxuLyoqXG4gKiBUaGUgZ3JhcGhxbFN5bmMgZnVuY3Rpb24gYWxzbyBmdWxmaWxscyBHcmFwaFFMIG9wZXJhdGlvbnMgYnkgcGFyc2luZyxcbiAqIHZhbGlkYXRpbmcsIGFuZCBleGVjdXRpbmcgYSBHcmFwaFFMIGRvY3VtZW50IGFsb25nIHNpZGUgYSBHcmFwaFFMIHNjaGVtYS5cbiAqIEhvd2V2ZXIsIGl0IGd1YXJhbnRlZXMgdG8gY29tcGxldGUgc3luY2hyb25vdXNseSAob3IgdGhyb3cgYW4gZXJyb3IpIGFzc3VtaW5nXG4gKiB0aGF0IGFsbCBmaWVsZCByZXNvbHZlcnMgYXJlIGFsc28gc3luY2hyb25vdXMuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGdyYXBocWxTeW5jKGFyZ3NPclNjaGVtYSwgc291cmNlLCByb290VmFsdWUsIGNvbnRleHRWYWx1ZSwgdmFyaWFibGVWYWx1ZXMsIG9wZXJhdGlvbk5hbWUsIGZpZWxkUmVzb2x2ZXIsIHR5cGVSZXNvbHZlcikge1xuICAvKiBlc2xpbnQtZW5hYmxlIG5vLXJlZGVjbGFyZSAqL1xuICAvLyBFeHRyYWN0IGFyZ3VtZW50cyBmcm9tIG9iamVjdCBhcmdzIGlmIHByb3ZpZGVkLlxuICB2YXIgcmVzdWx0ID0gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGdyYXBocWxJbXBsKGFyZ3NPclNjaGVtYSkgOiBncmFwaHFsSW1wbCh7XG4gICAgc2NoZW1hOiBhcmdzT3JTY2hlbWEsXG4gICAgc291cmNlOiBzb3VyY2UsXG4gICAgcm9vdFZhbHVlOiByb290VmFsdWUsXG4gICAgY29udGV4dFZhbHVlOiBjb250ZXh0VmFsdWUsXG4gICAgdmFyaWFibGVWYWx1ZXM6IHZhcmlhYmxlVmFsdWVzLFxuICAgIG9wZXJhdGlvbk5hbWU6IG9wZXJhdGlvbk5hbWUsXG4gICAgZmllbGRSZXNvbHZlcjogZmllbGRSZXNvbHZlcixcbiAgICB0eXBlUmVzb2x2ZXI6IHR5cGVSZXNvbHZlclxuICB9KTsgLy8gQXNzZXJ0IHRoYXQgdGhlIGV4ZWN1dGlvbiB3YXMgc3luY2hyb25vdXMuXG5cbiAgaWYgKGlzUHJvbWlzZShyZXN1bHQpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdHcmFwaFFMIGV4ZWN1dGlvbiBmYWlsZWQgdG8gY29tcGxldGUgc3luY2hyb25vdXNseS4nKTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGdyYXBocWxJbXBsKGFyZ3MpIHtcbiAgdmFyIHNjaGVtYSA9IGFyZ3Muc2NoZW1hLFxuICAgICAgc291cmNlID0gYXJncy5zb3VyY2UsXG4gICAgICByb290VmFsdWUgPSBhcmdzLnJvb3RWYWx1ZSxcbiAgICAgIGNvbnRleHRWYWx1ZSA9IGFyZ3MuY29udGV4dFZhbHVlLFxuICAgICAgdmFyaWFibGVWYWx1ZXMgPSBhcmdzLnZhcmlhYmxlVmFsdWVzLFxuICAgICAgb3BlcmF0aW9uTmFtZSA9IGFyZ3Mub3BlcmF0aW9uTmFtZSxcbiAgICAgIGZpZWxkUmVzb2x2ZXIgPSBhcmdzLmZpZWxkUmVzb2x2ZXIsXG4gICAgICB0eXBlUmVzb2x2ZXIgPSBhcmdzLnR5cGVSZXNvbHZlcjsgLy8gVmFsaWRhdGUgU2NoZW1hXG5cbiAgdmFyIHNjaGVtYVZhbGlkYXRpb25FcnJvcnMgPSB2YWxpZGF0ZVNjaGVtYShzY2hlbWEpO1xuXG4gIGlmIChzY2hlbWFWYWxpZGF0aW9uRXJyb3JzLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4ge1xuICAgICAgZXJyb3JzOiBzY2hlbWFWYWxpZGF0aW9uRXJyb3JzXG4gICAgfTtcbiAgfSAvLyBQYXJzZVxuXG5cbiAgdmFyIGRvY3VtZW50O1xuXG4gIHRyeSB7XG4gICAgZG9jdW1lbnQgPSBwYXJzZShzb3VyY2UpO1xuICB9IGNhdGNoIChzeW50YXhFcnJvcikge1xuICAgIHJldHVybiB7XG4gICAgICBlcnJvcnM6IFtzeW50YXhFcnJvcl1cbiAgICB9O1xuICB9IC8vIFZhbGlkYXRlXG5cblxuICB2YXIgdmFsaWRhdGlvbkVycm9ycyA9IHZhbGlkYXRlKHNjaGVtYSwgZG9jdW1lbnQpO1xuXG4gIGlmICh2YWxpZGF0aW9uRXJyb3JzLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4ge1xuICAgICAgZXJyb3JzOiB2YWxpZGF0aW9uRXJyb3JzXG4gICAgfTtcbiAgfSAvLyBFeGVjdXRlXG5cblxuICByZXR1cm4gZXhlY3V0ZSh7XG4gICAgc2NoZW1hOiBzY2hlbWEsXG4gICAgZG9jdW1lbnQ6IGRvY3VtZW50LFxuICAgIHJvb3RWYWx1ZTogcm9vdFZhbHVlLFxuICAgIGNvbnRleHRWYWx1ZTogY29udGV4dFZhbHVlLFxuICAgIHZhcmlhYmxlVmFsdWVzOiB2YXJpYWJsZVZhbHVlcyxcbiAgICBvcGVyYXRpb25OYW1lOiBvcGVyYXRpb25OYW1lLFxuICAgIGZpZWxkUmVzb2x2ZXI6IGZpZWxkUmVzb2x2ZXIsXG4gICAgdHlwZVJlc29sdmVyOiB0eXBlUmVzb2x2ZXJcbiAgfSk7XG59XG4iLCIvKipcbiAqIEdpdmVuIGEgUGF0aCBhbmQgYSBrZXksIHJldHVybiBhIG5ldyBQYXRoIGNvbnRhaW5pbmcgdGhlIG5ldyBrZXkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGRQYXRoKHByZXYsIGtleSwgdHlwZW5hbWUpIHtcbiAgcmV0dXJuIHtcbiAgICBwcmV2OiBwcmV2LFxuICAgIGtleToga2V5LFxuICAgIHR5cGVuYW1lOiB0eXBlbmFtZVxuICB9O1xufVxuLyoqXG4gKiBHaXZlbiBhIFBhdGgsIHJldHVybiBhbiBBcnJheSBvZiB0aGUgcGF0aCBrZXlzLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBwYXRoVG9BcnJheShwYXRoKSB7XG4gIHZhciBmbGF0dGVuZWQgPSBbXTtcbiAgdmFyIGN1cnIgPSBwYXRoO1xuXG4gIHdoaWxlIChjdXJyKSB7XG4gICAgZmxhdHRlbmVkLnB1c2goY3Vyci5rZXkpO1xuICAgIGN1cnIgPSBjdXJyLnByZXY7XG4gIH1cblxuICByZXR1cm4gZmxhdHRlbmVkLnJldmVyc2UoKTtcbn1cbiIsImltcG9ydCBpbnZhcmlhbnQgZnJvbSBcIi4vaW52YXJpYW50Lm1qc1wiO1xuaW1wb3J0IG5vZGVqc0N1c3RvbUluc3BlY3RTeW1ib2wgZnJvbSBcIi4vbm9kZWpzQ3VzdG9tSW5zcGVjdFN5bWJvbC5tanNcIjtcbi8qKlxuICogVGhlIGBkZWZpbmVJbnNwZWN0KClgIGZ1bmN0aW9uIGRlZmluZXMgYGluc3BlY3QoKWAgcHJvdG90eXBlIG1ldGhvZCBhcyBhbGlhcyBvZiBgdG9KU09OYFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRlZmluZUluc3BlY3QoY2xhc3NPYmplY3QpIHtcbiAgdmFyIGZuID0gY2xhc3NPYmplY3QucHJvdG90eXBlLnRvSlNPTjtcbiAgdHlwZW9mIGZuID09PSAnZnVuY3Rpb24nIHx8IGludmFyaWFudCgwKTtcbiAgY2xhc3NPYmplY3QucHJvdG90eXBlLmluc3BlY3QgPSBmbjsgLy8gaXN0YW5idWwgaWdub3JlIGVsc2UgKFNlZTogJ2h0dHBzOi8vZ2l0aHViLmNvbS9ncmFwaHFsL2dyYXBocWwtanMvaXNzdWVzLzIzMTcnKVxuXG4gIGlmIChub2RlanNDdXN0b21JbnNwZWN0U3ltYm9sKSB7XG4gICAgY2xhc3NPYmplY3QucHJvdG90eXBlW25vZGVqc0N1c3RvbUluc3BlY3RTeW1ib2xdID0gZm47XG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRldkFzc2VydChjb25kaXRpb24sIG1lc3NhZ2UpIHtcbiAgdmFyIGJvb2xlYW5Db25kaXRpb24gPSBCb29sZWFuKGNvbmRpdGlvbik7IC8vIGlzdGFuYnVsIGlnbm9yZSBlbHNlIChTZWUgdHJhbnNmb3JtYXRpb24gZG9uZSBpbiAnLi9yZXNvdXJjZXMvaW5saW5lSW52YXJpYW50LmpzJylcblxuICBpZiAoIWJvb2xlYW5Db25kaXRpb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIH1cbn1cbiIsInZhciBNQVhfU1VHR0VTVElPTlMgPSA1O1xuLyoqXG4gKiBHaXZlbiBbIEEsIEIsIEMgXSByZXR1cm4gJyBEaWQgeW91IG1lYW4gQSwgQiwgb3IgQz8nLlxuICovXG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZWRlY2xhcmVcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRpZFlvdU1lYW4oZmlyc3RBcmcsIHNlY29uZEFyZykge1xuICB2YXIgX3JlZiA9IHR5cGVvZiBmaXJzdEFyZyA9PT0gJ3N0cmluZycgPyBbZmlyc3RBcmcsIHNlY29uZEFyZ10gOiBbdW5kZWZpbmVkLCBmaXJzdEFyZ10sXG4gICAgICBzdWJNZXNzYWdlID0gX3JlZlswXSxcbiAgICAgIHN1Z2dlc3Rpb25zQXJnID0gX3JlZlsxXTtcblxuICB2YXIgbWVzc2FnZSA9ICcgRGlkIHlvdSBtZWFuICc7XG5cbiAgaWYgKHN1Yk1lc3NhZ2UpIHtcbiAgICBtZXNzYWdlICs9IHN1Yk1lc3NhZ2UgKyAnICc7XG4gIH1cblxuICB2YXIgc3VnZ2VzdGlvbnMgPSBzdWdnZXN0aW9uc0FyZy5tYXAoZnVuY3Rpb24gKHgpIHtcbiAgICByZXR1cm4gXCJcXFwiXCIuY29uY2F0KHgsIFwiXFxcIlwiKTtcbiAgfSk7XG5cbiAgc3dpdGNoIChzdWdnZXN0aW9ucy5sZW5ndGgpIHtcbiAgICBjYXNlIDA6XG4gICAgICByZXR1cm4gJyc7XG5cbiAgICBjYXNlIDE6XG4gICAgICByZXR1cm4gbWVzc2FnZSArIHN1Z2dlc3Rpb25zWzBdICsgJz8nO1xuXG4gICAgY2FzZSAyOlxuICAgICAgcmV0dXJuIG1lc3NhZ2UgKyBzdWdnZXN0aW9uc1swXSArICcgb3IgJyArIHN1Z2dlc3Rpb25zWzFdICsgJz8nO1xuICB9XG5cbiAgdmFyIHNlbGVjdGVkID0gc3VnZ2VzdGlvbnMuc2xpY2UoMCwgTUFYX1NVR0dFU1RJT05TKTtcbiAgdmFyIGxhc3RJdGVtID0gc2VsZWN0ZWQucG9wKCk7XG4gIHJldHVybiBtZXNzYWdlICsgc2VsZWN0ZWQuam9pbignLCAnKSArICcsIG9yICcgKyBsYXN0SXRlbSArICc/Jztcbn1cbiIsIi8qKlxuICogUmV0dXJucyB0aGUgZmlyc3QgYXJndW1lbnQgaXQgcmVjZWl2ZXMuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlkZW50aXR5RnVuYyh4KSB7XG4gIHJldHVybiB4O1xufVxuIiwiZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG4vKiBlc2xpbnQtZGlzYWJsZSBmbG93dHlwZS9uby13ZWFrLXR5cGVzICovXG5pbXBvcnQgbm9kZWpzQ3VzdG9tSW5zcGVjdFN5bWJvbCBmcm9tIFwiLi9ub2RlanNDdXN0b21JbnNwZWN0U3ltYm9sLm1qc1wiO1xudmFyIE1BWF9BUlJBWV9MRU5HVEggPSAxMDtcbnZhciBNQVhfUkVDVVJTSVZFX0RFUFRIID0gMjtcbi8qKlxuICogVXNlZCB0byBwcmludCB2YWx1ZXMgaW4gZXJyb3IgbWVzc2FnZXMuXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaW5zcGVjdCh2YWx1ZSkge1xuICByZXR1cm4gZm9ybWF0VmFsdWUodmFsdWUsIFtdKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VmFsdWUodmFsdWUsIHNlZW5WYWx1ZXMpIHtcbiAgc3dpdGNoIChfdHlwZW9mKHZhbHVlKSkge1xuICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuXG4gICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAgcmV0dXJuIHZhbHVlLm5hbWUgPyBcIltmdW5jdGlvbiBcIi5jb25jYXQodmFsdWUubmFtZSwgXCJdXCIpIDogJ1tmdW5jdGlvbl0nO1xuXG4gICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gJ251bGwnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZm9ybWF0T2JqZWN0VmFsdWUodmFsdWUsIHNlZW5WYWx1ZXMpO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBTdHJpbmcodmFsdWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZvcm1hdE9iamVjdFZhbHVlKHZhbHVlLCBwcmV2aW91c2x5U2VlblZhbHVlcykge1xuICBpZiAocHJldmlvdXNseVNlZW5WYWx1ZXMuaW5kZXhPZih2YWx1ZSkgIT09IC0xKSB7XG4gICAgcmV0dXJuICdbQ2lyY3VsYXJdJztcbiAgfVxuXG4gIHZhciBzZWVuVmFsdWVzID0gW10uY29uY2F0KHByZXZpb3VzbHlTZWVuVmFsdWVzLCBbdmFsdWVdKTtcbiAgdmFyIGN1c3RvbUluc3BlY3RGbiA9IGdldEN1c3RvbUZuKHZhbHVlKTtcblxuICBpZiAoY3VzdG9tSW5zcGVjdEZuICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgY3VzdG9tVmFsdWUgPSBjdXN0b21JbnNwZWN0Rm4uY2FsbCh2YWx1ZSk7IC8vIGNoZWNrIGZvciBpbmZpbml0ZSByZWN1cnNpb25cblxuICAgIGlmIChjdXN0b21WYWx1ZSAhPT0gdmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgY3VzdG9tVmFsdWUgPT09ICdzdHJpbmcnID8gY3VzdG9tVmFsdWUgOiBmb3JtYXRWYWx1ZShjdXN0b21WYWx1ZSwgc2VlblZhbHVlcyk7XG4gICAgfVxuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZvcm1hdEFycmF5KHZhbHVlLCBzZWVuVmFsdWVzKTtcbiAgfVxuXG4gIHJldHVybiBmb3JtYXRPYmplY3QodmFsdWUsIHNlZW5WYWx1ZXMpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRPYmplY3Qob2JqZWN0LCBzZWVuVmFsdWVzKSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTtcblxuICBpZiAoa2V5cy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gJ3t9JztcbiAgfVxuXG4gIGlmIChzZWVuVmFsdWVzLmxlbmd0aCA+IE1BWF9SRUNVUlNJVkVfREVQVEgpIHtcbiAgICByZXR1cm4gJ1snICsgZ2V0T2JqZWN0VGFnKG9iamVjdCkgKyAnXSc7XG4gIH1cblxuICB2YXIgcHJvcGVydGllcyA9IGtleXMubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2YXIgdmFsdWUgPSBmb3JtYXRWYWx1ZShvYmplY3Rba2V5XSwgc2VlblZhbHVlcyk7XG4gICAgcmV0dXJuIGtleSArICc6ICcgKyB2YWx1ZTtcbiAgfSk7XG4gIHJldHVybiAneyAnICsgcHJvcGVydGllcy5qb2luKCcsICcpICsgJyB9Jztcbn1cblxuZnVuY3Rpb24gZm9ybWF0QXJyYXkoYXJyYXksIHNlZW5WYWx1ZXMpIHtcbiAgaWYgKGFycmF5Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiAnW10nO1xuICB9XG5cbiAgaWYgKHNlZW5WYWx1ZXMubGVuZ3RoID4gTUFYX1JFQ1VSU0lWRV9ERVBUSCkge1xuICAgIHJldHVybiAnW0FycmF5XSc7XG4gIH1cblxuICB2YXIgbGVuID0gTWF0aC5taW4oTUFYX0FSUkFZX0xFTkdUSCwgYXJyYXkubGVuZ3RoKTtcbiAgdmFyIHJlbWFpbmluZyA9IGFycmF5Lmxlbmd0aCAtIGxlbjtcbiAgdmFyIGl0ZW1zID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgIGl0ZW1zLnB1c2goZm9ybWF0VmFsdWUoYXJyYXlbaV0sIHNlZW5WYWx1ZXMpKTtcbiAgfVxuXG4gIGlmIChyZW1haW5pbmcgPT09IDEpIHtcbiAgICBpdGVtcy5wdXNoKCcuLi4gMSBtb3JlIGl0ZW0nKTtcbiAgfSBlbHNlIGlmIChyZW1haW5pbmcgPiAxKSB7XG4gICAgaXRlbXMucHVzaChcIi4uLiBcIi5jb25jYXQocmVtYWluaW5nLCBcIiBtb3JlIGl0ZW1zXCIpKTtcbiAgfVxuXG4gIHJldHVybiAnWycgKyBpdGVtcy5qb2luKCcsICcpICsgJ10nO1xufVxuXG5mdW5jdGlvbiBnZXRDdXN0b21GbihvYmplY3QpIHtcbiAgdmFyIGN1c3RvbUluc3BlY3RGbiA9IG9iamVjdFtTdHJpbmcobm9kZWpzQ3VzdG9tSW5zcGVjdFN5bWJvbCldO1xuXG4gIGlmICh0eXBlb2YgY3VzdG9tSW5zcGVjdEZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGN1c3RvbUluc3BlY3RGbjtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb2JqZWN0Lmluc3BlY3QgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gb2JqZWN0Lmluc3BlY3Q7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0T2JqZWN0VGFnKG9iamVjdCkge1xuICB2YXIgdGFnID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iamVjdCkucmVwbGFjZSgvXlxcW29iamVjdCAvLCAnJykucmVwbGFjZSgvXSQvLCAnJyk7XG5cbiAgaWYgKHRhZyA9PT0gJ09iamVjdCcgJiYgdHlwZW9mIG9iamVjdC5jb25zdHJ1Y3RvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBuYW1lID0gb2JqZWN0LmNvbnN0cnVjdG9yLm5hbWU7XG5cbiAgICBpZiAodHlwZW9mIG5hbWUgPT09ICdzdHJpbmcnICYmIG5hbWUgIT09ICcnKSB7XG4gICAgICByZXR1cm4gbmFtZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFnO1xufVxuIiwiZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5pbXBvcnQgaW5zcGVjdCBmcm9tIFwiLi9pbnNwZWN0Lm1qc1wiO1xuLyoqXG4gKiBBIHJlcGxhY2VtZW50IGZvciBpbnN0YW5jZW9mIHdoaWNoIGluY2x1ZGVzIGFuIGVycm9yIHdhcm5pbmcgd2hlbiBtdWx0aS1yZWFsbVxuICogY29uc3RydWN0b3JzIGFyZSBkZXRlY3RlZC5cbiAqL1xuXG4vLyBTZWU6IGh0dHBzOi8vZXhwcmVzc2pzLmNvbS9lbi9hZHZhbmNlZC9iZXN0LXByYWN0aWNlLXBlcmZvcm1hbmNlLmh0bWwjc2V0LW5vZGVfZW52LXRvLXByb2R1Y3Rpb25cbi8vIFNlZTogaHR0cHM6Ly93ZWJwYWNrLmpzLm9yZy9ndWlkZXMvcHJvZHVjdGlvbi9cbmV4cG9ydCBkZWZhdWx0IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicgPyAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAoU2VlOiAnaHR0cHM6Ly9naXRodWIuY29tL2dyYXBocWwvZ3JhcGhxbC1qcy9pc3N1ZXMvMjMxNycpXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2hhZG93XG5mdW5jdGlvbiBpbnN0YW5jZU9mKHZhbHVlLCBjb25zdHJ1Y3Rvcikge1xuICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBjb25zdHJ1Y3Rvcjtcbn0gOiAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2hhZG93XG5mdW5jdGlvbiBpbnN0YW5jZU9mKHZhbHVlLCBjb25zdHJ1Y3Rvcikge1xuICBpZiAodmFsdWUgaW5zdGFuY2VvZiBjb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKF90eXBlb2YodmFsdWUpID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAhPT0gbnVsbCkge1xuICAgIHZhciBfdmFsdWUkY29uc3RydWN0b3I7XG5cbiAgICB2YXIgY2xhc3NOYW1lID0gY29uc3RydWN0b3IucHJvdG90eXBlW1N5bWJvbC50b1N0cmluZ1RhZ107XG4gICAgdmFyIHZhbHVlQ2xhc3NOYW1lID0gLy8gV2Ugc3RpbGwgbmVlZCB0byBzdXBwb3J0IGNvbnN0cnVjdG9yJ3MgbmFtZSB0byBkZXRlY3QgY29uZmxpY3RzIHdpdGggb2xkZXIgdmVyc2lvbnMgb2YgdGhpcyBsaWJyYXJ5LlxuICAgIFN5bWJvbC50b1N0cmluZ1RhZyBpbiB2YWx1ZSA/IHZhbHVlW1N5bWJvbC50b1N0cmluZ1RhZ10gOiAoX3ZhbHVlJGNvbnN0cnVjdG9yID0gdmFsdWUuY29uc3RydWN0b3IpID09PSBudWxsIHx8IF92YWx1ZSRjb25zdHJ1Y3RvciA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3ZhbHVlJGNvbnN0cnVjdG9yLm5hbWU7XG5cbiAgICBpZiAoY2xhc3NOYW1lID09PSB2YWx1ZUNsYXNzTmFtZSkge1xuICAgICAgdmFyIHN0cmluZ2lmaWVkVmFsdWUgPSBpbnNwZWN0KHZhbHVlKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCB1c2UgXCIuY29uY2F0KGNsYXNzTmFtZSwgXCIgXFxcIlwiKS5jb25jYXQoc3RyaW5naWZpZWRWYWx1ZSwgXCJcXFwiIGZyb20gYW5vdGhlciBtb2R1bGUgb3IgcmVhbG0uXFxuXFxuRW5zdXJlIHRoYXQgdGhlcmUgaXMgb25seSBvbmUgaW5zdGFuY2Ugb2YgXFxcImdyYXBocWxcXFwiIGluIHRoZSBub2RlX21vZHVsZXNcXG5kaXJlY3RvcnkuIElmIGRpZmZlcmVudCB2ZXJzaW9ucyBvZiBcXFwiZ3JhcGhxbFxcXCIgYXJlIHRoZSBkZXBlbmRlbmNpZXMgb2Ygb3RoZXJcXG5yZWxpZWQgb24gbW9kdWxlcywgdXNlIFxcXCJyZXNvbHV0aW9uc1xcXCIgdG8gZW5zdXJlIG9ubHkgb25lIHZlcnNpb24gaXMgaW5zdGFsbGVkLlxcblxcbmh0dHBzOi8veWFybnBrZy5jb20vZW4vZG9jcy9zZWxlY3RpdmUtdmVyc2lvbi1yZXNvbHV0aW9uc1xcblxcbkR1cGxpY2F0ZSBcXFwiZ3JhcGhxbFxcXCIgbW9kdWxlcyBjYW5ub3QgYmUgdXNlZCBhdCB0aGUgc2FtZSB0aW1lIHNpbmNlIGRpZmZlcmVudFxcbnZlcnNpb25zIG1heSBoYXZlIGRpZmZlcmVudCBjYXBhYmlsaXRpZXMgYW5kIGJlaGF2aW9yLiBUaGUgZGF0YSBmcm9tIG9uZVxcbnZlcnNpb24gdXNlZCBpbiB0aGUgZnVuY3Rpb24gZnJvbSBhbm90aGVyIGNvdWxkIHByb2R1Y2UgY29uZnVzaW5nIGFuZFxcbnNwdXJpb3VzIHJlc3VsdHMuXCIpKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuICB2YXIgYm9vbGVhbkNvbmRpdGlvbiA9IEJvb2xlYW4oY29uZGl0aW9uKTsgLy8gaXN0YW5idWwgaWdub3JlIGVsc2UgKFNlZSB0cmFuc2Zvcm1hdGlvbiBkb25lIGluICcuL3Jlc291cmNlcy9pbmxpbmVJbnZhcmlhbnQuanMnKVxuXG4gIGlmICghYm9vbGVhbkNvbmRpdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlICE9IG51bGwgPyBtZXNzYWdlIDogJ1VuZXhwZWN0ZWQgaW52YXJpYW50IHRyaWdnZXJlZC4nKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgU1lNQk9MX0FTWU5DX0lURVJBVE9SIH0gZnJvbSBcIi4uL3BvbHlmaWxscy9zeW1ib2xzLm1qc1wiO1xuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIHByb3ZpZGVkIG9iamVjdCBpbXBsZW1lbnRzIHRoZSBBc3luY0l0ZXJhdG9yIHByb3RvY29sIHZpYVxuICogZWl0aGVyIGltcGxlbWVudGluZyBhIGBTeW1ib2wuYXN5bmNJdGVyYXRvcmAgb3IgYFwiQEBhc3luY0l0ZXJhdG9yXCJgIG1ldGhvZC5cbiAqL1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVkZWNsYXJlXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0FzeW5jSXRlcmFibGUobWF5YmVBc3luY0l0ZXJhYmxlKSB7XG4gIHJldHVybiB0eXBlb2YgKG1heWJlQXN5bmNJdGVyYWJsZSA9PT0gbnVsbCB8fCBtYXliZUFzeW5jSXRlcmFibGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG1heWJlQXN5bmNJdGVyYWJsZVtTWU1CT0xfQVNZTkNfSVRFUkFUT1JdKSA9PT0gJ2Z1bmN0aW9uJztcbn1cbiIsImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuLyoqXG4gKiBSZXR1cm4gdHJ1ZSBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90XG4gKiBgbnVsbGAgYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuIF90eXBlb2YodmFsdWUpID09ICdvYmplY3QnICYmIHZhbHVlICE9PSBudWxsO1xufVxuIiwiLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIHZhbHVlIGFjdHMgbGlrZSBhIFByb21pc2UsIGkuZS4gaGFzIGEgXCJ0aGVuXCIgZnVuY3Rpb24sXG4gKiBvdGhlcndpc2UgcmV0dXJucyBmYWxzZS5cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlZGVjbGFyZVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNQcm9taXNlKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB2b2lkIDAgPyB2b2lkIDAgOiB2YWx1ZS50aGVuKSA9PT0gJ2Z1bmN0aW9uJztcbn1cbiIsIi8qKlxuICogQ3JlYXRlcyBhIGtleWVkIEpTIG9iamVjdCBmcm9tIGFuIGFycmF5LCBnaXZlbiBhIGZ1bmN0aW9uIHRvIHByb2R1Y2UgdGhlIGtleXNcbiAqIGZvciBlYWNoIHZhbHVlIGluIHRoZSBhcnJheS5cbiAqXG4gKiBUaGlzIHByb3ZpZGVzIGEgY29udmVuaWVudCBsb29rdXAgZm9yIHRoZSBhcnJheSBpdGVtcyBpZiB0aGUga2V5IGZ1bmN0aW9uXG4gKiBwcm9kdWNlcyB1bmlxdWUgcmVzdWx0cy5cbiAqXG4gKiAgICAgY29uc3QgcGhvbmVCb29rID0gW1xuICogICAgICAgeyBuYW1lOiAnSm9uJywgbnVtOiAnNTU1LTEyMzQnIH0sXG4gKiAgICAgICB7IG5hbWU6ICdKZW5ueScsIG51bTogJzg2Ny01MzA5JyB9XG4gKiAgICAgXVxuICpcbiAqICAgICAvLyB7IEpvbjogeyBuYW1lOiAnSm9uJywgbnVtOiAnNTU1LTEyMzQnIH0sXG4gKiAgICAgLy8gICBKZW5ueTogeyBuYW1lOiAnSmVubnknLCBudW06ICc4NjctNTMwOScgfSB9XG4gKiAgICAgY29uc3QgZW50cmllc0J5TmFtZSA9IGtleU1hcChcbiAqICAgICAgIHBob25lQm9vayxcbiAqICAgICAgIGVudHJ5ID0+IGVudHJ5Lm5hbWVcbiAqICAgICApXG4gKlxuICogICAgIC8vIHsgbmFtZTogJ0plbm55JywgbnVtOiAnODU3LTYzMDknIH1cbiAqICAgICBjb25zdCBqZW5ueUVudHJ5ID0gZW50cmllc0J5TmFtZVsnSmVubnknXVxuICpcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ga2V5TWFwKGxpc3QsIGtleUZuKSB7XG4gIHJldHVybiBsaXN0LnJlZHVjZShmdW5jdGlvbiAobWFwLCBpdGVtKSB7XG4gICAgbWFwW2tleUZuKGl0ZW0pXSA9IGl0ZW07XG4gICAgcmV0dXJuIG1hcDtcbiAgfSwgT2JqZWN0LmNyZWF0ZShudWxsKSk7XG59XG4iLCIvKipcbiAqIENyZWF0ZXMgYSBrZXllZCBKUyBvYmplY3QgZnJvbSBhbiBhcnJheSwgZ2l2ZW4gYSBmdW5jdGlvbiB0byBwcm9kdWNlIHRoZSBrZXlzXG4gKiBhbmQgYSBmdW5jdGlvbiB0byBwcm9kdWNlIHRoZSB2YWx1ZXMgZnJvbSBlYWNoIGl0ZW0gaW4gdGhlIGFycmF5LlxuICpcbiAqICAgICBjb25zdCBwaG9uZUJvb2sgPSBbXG4gKiAgICAgICB7IG5hbWU6ICdKb24nLCBudW06ICc1NTUtMTIzNCcgfSxcbiAqICAgICAgIHsgbmFtZTogJ0plbm55JywgbnVtOiAnODY3LTUzMDknIH1cbiAqICAgICBdXG4gKlxuICogICAgIC8vIHsgSm9uOiAnNTU1LTEyMzQnLCBKZW5ueTogJzg2Ny01MzA5JyB9XG4gKiAgICAgY29uc3QgcGhvbmVzQnlOYW1lID0ga2V5VmFsTWFwKFxuICogICAgICAgcGhvbmVCb29rLFxuICogICAgICAgZW50cnkgPT4gZW50cnkubmFtZSxcbiAqICAgICAgIGVudHJ5ID0+IGVudHJ5Lm51bVxuICogICAgIClcbiAqXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGtleVZhbE1hcChsaXN0LCBrZXlGbiwgdmFsRm4pIHtcbiAgcmV0dXJuIGxpc3QucmVkdWNlKGZ1bmN0aW9uIChtYXAsIGl0ZW0pIHtcbiAgICBtYXBba2V5Rm4oaXRlbSldID0gdmFsRm4oaXRlbSk7XG4gICAgcmV0dXJuIG1hcDtcbiAgfSwgT2JqZWN0LmNyZWF0ZShudWxsKSk7XG59XG4iLCJpbXBvcnQgb2JqZWN0RW50cmllcyBmcm9tIFwiLi4vcG9seWZpbGxzL29iamVjdEVudHJpZXMubWpzXCI7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBvYmplY3QgbWFwIHdpdGggdGhlIHNhbWUga2V5cyBhcyBgbWFwYCBhbmQgdmFsdWVzIGdlbmVyYXRlZCBieVxuICogcnVubmluZyBlYWNoIHZhbHVlIG9mIGBtYXBgIHRocnUgYGZuYC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWFwVmFsdWUobWFwLCBmbikge1xuICB2YXIgcmVzdWx0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICBmb3IgKHZhciBfaTIgPSAwLCBfb2JqZWN0RW50cmllczIgPSBvYmplY3RFbnRyaWVzKG1hcCk7IF9pMiA8IF9vYmplY3RFbnRyaWVzMi5sZW5ndGg7IF9pMisrKSB7XG4gICAgdmFyIF9yZWYyID0gX29iamVjdEVudHJpZXMyW19pMl07XG4gICAgdmFyIF9rZXkgPSBfcmVmMlswXTtcbiAgICB2YXIgX3ZhbHVlID0gX3JlZjJbMV07XG4gICAgcmVzdWx0W19rZXldID0gZm4oX3ZhbHVlLCBfa2V5KTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG4iLCIvKipcbiAqIE1lbW9pemVzIHRoZSBwcm92aWRlZCB0aHJlZS1hcmd1bWVudCBmdW5jdGlvbi5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWVtb2l6ZTMoZm4pIHtcbiAgdmFyIGNhY2hlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9pemVkKGExLCBhMiwgYTMpIHtcbiAgICBpZiAoIWNhY2hlMCkge1xuICAgICAgY2FjaGUwID0gbmV3IFdlYWtNYXAoKTtcbiAgICB9XG5cbiAgICB2YXIgY2FjaGUxID0gY2FjaGUwLmdldChhMSk7XG4gICAgdmFyIGNhY2hlMjtcblxuICAgIGlmIChjYWNoZTEpIHtcbiAgICAgIGNhY2hlMiA9IGNhY2hlMS5nZXQoYTIpO1xuXG4gICAgICBpZiAoY2FjaGUyKSB7XG4gICAgICAgIHZhciBjYWNoZWRWYWx1ZSA9IGNhY2hlMi5nZXQoYTMpO1xuXG4gICAgICAgIGlmIChjYWNoZWRWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgcmV0dXJuIGNhY2hlZFZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhY2hlMSA9IG5ldyBXZWFrTWFwKCk7XG4gICAgICBjYWNoZTAuc2V0KGExLCBjYWNoZTEpO1xuICAgIH1cblxuICAgIGlmICghY2FjaGUyKSB7XG4gICAgICBjYWNoZTIgPSBuZXcgV2Vha01hcCgpO1xuICAgICAgY2FjaGUxLnNldChhMiwgY2FjaGUyKTtcbiAgICB9XG5cbiAgICB2YXIgbmV3VmFsdWUgPSBmbihhMSwgYTIsIGEzKTtcbiAgICBjYWNoZTIuc2V0KGEzLCBuZXdWYWx1ZSk7XG4gICAgcmV0dXJuIG5ld1ZhbHVlO1xuICB9O1xufVxuIiwiLyoqXG4gKiBSZXR1cm5zIGEgbnVtYmVyIGluZGljYXRpbmcgd2hldGhlciBhIHJlZmVyZW5jZSBzdHJpbmcgY29tZXMgYmVmb3JlLCBvciBhZnRlcixcbiAqIG9yIGlzIHRoZSBzYW1lIGFzIHRoZSBnaXZlbiBzdHJpbmcgaW4gbmF0dXJhbCBzb3J0IG9yZGVyLlxuICpcbiAqIFNlZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTmF0dXJhbF9zb3J0X29yZGVyXG4gKlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBuYXR1cmFsQ29tcGFyZShhU3RyLCBiU3RyKSB7XG4gIHZhciBhSWR4ID0gMDtcbiAgdmFyIGJJZHggPSAwO1xuXG4gIHdoaWxlIChhSWR4IDwgYVN0ci5sZW5ndGggJiYgYklkeCA8IGJTdHIubGVuZ3RoKSB7XG4gICAgdmFyIGFDaGFyID0gYVN0ci5jaGFyQ29kZUF0KGFJZHgpO1xuICAgIHZhciBiQ2hhciA9IGJTdHIuY2hhckNvZGVBdChiSWR4KTtcblxuICAgIGlmIChpc0RpZ2l0KGFDaGFyKSAmJiBpc0RpZ2l0KGJDaGFyKSkge1xuICAgICAgdmFyIGFOdW0gPSAwO1xuXG4gICAgICBkbyB7XG4gICAgICAgICsrYUlkeDtcbiAgICAgICAgYU51bSA9IGFOdW0gKiAxMCArIGFDaGFyIC0gRElHSVRfMDtcbiAgICAgICAgYUNoYXIgPSBhU3RyLmNoYXJDb2RlQXQoYUlkeCk7XG4gICAgICB9IHdoaWxlIChpc0RpZ2l0KGFDaGFyKSAmJiBhTnVtID4gMCk7XG5cbiAgICAgIHZhciBiTnVtID0gMDtcblxuICAgICAgZG8ge1xuICAgICAgICArK2JJZHg7XG4gICAgICAgIGJOdW0gPSBiTnVtICogMTAgKyBiQ2hhciAtIERJR0lUXzA7XG4gICAgICAgIGJDaGFyID0gYlN0ci5jaGFyQ29kZUF0KGJJZHgpO1xuICAgICAgfSB3aGlsZSAoaXNEaWdpdChiQ2hhcikgJiYgYk51bSA+IDApO1xuXG4gICAgICBpZiAoYU51bSA8IGJOdW0pIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuXG4gICAgICBpZiAoYU51bSA+IGJOdW0pIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChhQ2hhciA8IGJDaGFyKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cblxuICAgICAgaWYgKGFDaGFyID4gYkNoYXIpIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICB9XG5cbiAgICAgICsrYUlkeDtcbiAgICAgICsrYklkeDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYVN0ci5sZW5ndGggLSBiU3RyLmxlbmd0aDtcbn1cbnZhciBESUdJVF8wID0gNDg7XG52YXIgRElHSVRfOSA9IDU3O1xuXG5mdW5jdGlvbiBpc0RpZ2l0KGNvZGUpIHtcbiAgcmV0dXJuICFpc05hTihjb2RlKSAmJiBESUdJVF8wIDw9IGNvZGUgJiYgY29kZSA8PSBESUdJVF85O1xufVxuIiwiLy8gaXN0YW5idWwgaWdub3JlIG5leHQgKFNlZTogJ2h0dHBzOi8vZ2l0aHViLmNvbS9ncmFwaHFsL2dyYXBocWwtanMvaXNzdWVzLzIzMTcnKVxudmFyIG5vZGVqc0N1c3RvbUluc3BlY3RTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBTeW1ib2wuZm9yID09PSAnZnVuY3Rpb24nID8gU3ltYm9sLmZvcignbm9kZWpzLnV0aWwuaW5zcGVjdC5jdXN0b20nKSA6IHVuZGVmaW5lZDtcbmV4cG9ydCBkZWZhdWx0IG5vZGVqc0N1c3RvbUluc3BlY3RTeW1ib2w7XG4iLCIvKipcbiAqIEJ1aWxkIGEgc3RyaW5nIGRlc2NyaWJpbmcgdGhlIHBhdGguXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHByaW50UGF0aEFycmF5KHBhdGgpIHtcbiAgcmV0dXJuIHBhdGgubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gdHlwZW9mIGtleSA9PT0gJ251bWJlcicgPyAnWycgKyBrZXkudG9TdHJpbmcoKSArICddJyA6ICcuJyArIGtleTtcbiAgfSkuam9pbignJyk7XG59XG4iLCIvKipcbiAqIFRoaXMgZnVuY3Rpb24gdHJhbnNmb3JtcyBhIEpTIG9iamVjdCBgT2JqTWFwPFByb21pc2U8VD4+YCBpbnRvXG4gKiBhIGBQcm9taXNlPE9iak1hcDxUPj5gXG4gKlxuICogVGhpcyBpcyBha2luIHRvIGJsdWViaXJkJ3MgYFByb21pc2UucHJvcHNgLCBidXQgaW1wbGVtZW50ZWQgb25seSB1c2luZ1xuICogYFByb21pc2UuYWxsYCBzbyBpdCB3aWxsIHdvcmsgd2l0aCBhbnkgaW1wbGVtZW50YXRpb24gb2YgRVM2IHByb21pc2VzLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwcm9taXNlRm9yT2JqZWN0KG9iamVjdCkge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG4gIHZhciB2YWx1ZXNBbmRQcm9taXNlcyA9IGtleXMubWFwKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIG9iamVjdFtuYW1lXTtcbiAgfSk7XG4gIHJldHVybiBQcm9taXNlLmFsbCh2YWx1ZXNBbmRQcm9taXNlcykudGhlbihmdW5jdGlvbiAodmFsdWVzKSB7XG4gICAgcmV0dXJuIHZhbHVlcy5yZWR1Y2UoZnVuY3Rpb24gKHJlc29sdmVkT2JqZWN0LCB2YWx1ZSwgaSkge1xuICAgICAgcmVzb2x2ZWRPYmplY3Rba2V5c1tpXV0gPSB2YWx1ZTtcbiAgICAgIHJldHVybiByZXNvbHZlZE9iamVjdDtcbiAgICB9LCBPYmplY3QuY3JlYXRlKG51bGwpKTtcbiAgfSk7XG59XG4iLCJpbXBvcnQgaXNQcm9taXNlIGZyb20gXCIuL2lzUHJvbWlzZS5tanNcIjtcbi8qKlxuICogU2ltaWxhciB0byBBcnJheS5wcm90b3R5cGUucmVkdWNlKCksIGhvd2V2ZXIgdGhlIHJlZHVjaW5nIGNhbGxiYWNrIG1heSByZXR1cm5cbiAqIGEgUHJvbWlzZSwgaW4gd2hpY2ggY2FzZSByZWR1Y3Rpb24gd2lsbCBjb250aW51ZSBhZnRlciBlYWNoIHByb21pc2UgcmVzb2x2ZXMuXG4gKlxuICogSWYgdGhlIGNhbGxiYWNrIGRvZXMgbm90IHJldHVybiBhIFByb21pc2UsIHRoZW4gdGhpcyBmdW5jdGlvbiB3aWxsIGFsc28gbm90XG4gKiByZXR1cm4gYSBQcm9taXNlLlxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHByb21pc2VSZWR1Y2UodmFsdWVzLCBjYWxsYmFjaywgaW5pdGlhbFZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZXMucmVkdWNlKGZ1bmN0aW9uIChwcmV2aW91cywgdmFsdWUpIHtcbiAgICByZXR1cm4gaXNQcm9taXNlKHByZXZpb3VzKSA/IHByZXZpb3VzLnRoZW4oZnVuY3Rpb24gKHJlc29sdmVkKSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2socmVzb2x2ZWQsIHZhbHVlKTtcbiAgICB9KSA6IGNhbGxiYWNrKHByZXZpb3VzLCB2YWx1ZSk7XG4gIH0sIGluaXRpYWxWYWx1ZSk7XG59XG4iLCJmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmltcG9ydCB7IFNZTUJPTF9JVEVSQVRPUiB9IGZyb20gXCIuLi9wb2x5ZmlsbHMvc3ltYm9scy5tanNcIjtcbi8qKlxuICogU2FmZXIgdmVyc2lvbiBvZiBgQXJyYXkuZnJvbWAgdGhhdCByZXR1cm4gYG51bGxgIGlmIHZhbHVlIGlzbid0IGNvbnZlcnRpYmxlIHRvIGFycmF5LlxuICogQWxzbyBwcm90ZWN0cyBhZ2FpbnN0IEFycmF5LWxpa2Ugb2JqZWN0cyB3aXRob3V0IGl0ZW1zLlxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogc2FmZUFycmF5RnJvbShbIDEsIDIsIDMgXSkgLy8gWzEsIDIsIDNdXG4gKiBzYWZlQXJyYXlGcm9tKCdBQkMnKSAvLyBudWxsXG4gKiBzYWZlQXJyYXlGcm9tKHsgbGVuZ3RoOiAxIH0pIC8vIG51bGxcbiAqIHNhZmVBcnJheUZyb20oeyBsZW5ndGg6IDEsIDA6ICdBbHBoYScgfSkgLy8gWydBbHBoYSddXG4gKiBzYWZlQXJyYXlGcm9tKHsga2V5OiAndmFsdWUnIH0pIC8vIG51bGxcbiAqIHNhZmVBcnJheUZyb20obmV3IE1hcCgpKSAvLyBbXVxuICpcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzYWZlQXJyYXlGcm9tKGNvbGxlY3Rpb24pIHtcbiAgdmFyIG1hcEZuID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmdW5jdGlvbiAoaXRlbSkge1xuICAgIHJldHVybiBpdGVtO1xuICB9O1xuXG4gIGlmIChjb2xsZWN0aW9uID09IG51bGwgfHwgX3R5cGVvZihjb2xsZWN0aW9uKSAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmIChBcnJheS5pc0FycmF5KGNvbGxlY3Rpb24pKSB7XG4gICAgcmV0dXJuIGNvbGxlY3Rpb24ubWFwKG1hcEZuKTtcbiAgfSAvLyBJcyBJdGVyYWJsZT9cblxuXG4gIHZhciBpdGVyYXRvck1ldGhvZCA9IGNvbGxlY3Rpb25bU1lNQk9MX0lURVJBVE9SXTtcblxuICBpZiAodHlwZW9mIGl0ZXJhdG9yTWV0aG9kID09PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtdXNlXVxuICAgIHZhciBpdGVyYXRvciA9IGl0ZXJhdG9yTWV0aG9kLmNhbGwoY29sbGVjdGlvbik7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHZhciBzdGVwO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgKytpKSB7XG4gICAgICByZXN1bHQucHVzaChtYXBGbihzdGVwLnZhbHVlLCBpKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSAvLyBJcyBBcnJheSBsaWtlP1xuXG5cbiAgdmFyIGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuXG4gIGlmICh0eXBlb2YgbGVuZ3RoID09PSAnbnVtYmVyJyAmJiBsZW5ndGggPj0gMCAmJiBsZW5ndGggJSAxID09PSAwKSB7XG4gICAgdmFyIF9yZXN1bHQgPSBbXTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsZW5ndGg7ICsrX2kpIHtcbiAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGNvbGxlY3Rpb24sIF9pKSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgX3Jlc3VsdC5wdXNoKG1hcEZuKGNvbGxlY3Rpb25bU3RyaW5nKF9pKV0sIF9pKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXN1bHQ7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cbiIsImltcG9ydCBuYXR1cmFsQ29tcGFyZSBmcm9tIFwiLi9uYXR1cmFsQ29tcGFyZS5tanNcIjtcbi8qKlxuICogR2l2ZW4gYW4gaW52YWxpZCBpbnB1dCBzdHJpbmcgYW5kIGEgbGlzdCBvZiB2YWxpZCBvcHRpb25zLCByZXR1cm5zIGEgZmlsdGVyZWRcbiAqIGxpc3Qgb2YgdmFsaWQgb3B0aW9ucyBzb3J0ZWQgYmFzZWQgb24gdGhlaXIgc2ltaWxhcml0eSB3aXRoIHRoZSBpbnB1dC5cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdWdnZXN0aW9uTGlzdChpbnB1dCwgb3B0aW9ucykge1xuICB2YXIgb3B0aW9uc0J5RGlzdGFuY2UgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2YXIgbGV4aWNhbERpc3RhbmNlID0gbmV3IExleGljYWxEaXN0YW5jZShpbnB1dCk7XG4gIHZhciB0aHJlc2hvbGQgPSBNYXRoLmZsb29yKGlucHV0Lmxlbmd0aCAqIDAuNCkgKyAxO1xuXG4gIGZvciAodmFyIF9pMiA9IDA7IF9pMiA8IG9wdGlvbnMubGVuZ3RoOyBfaTIrKykge1xuICAgIHZhciBvcHRpb24gPSBvcHRpb25zW19pMl07XG4gICAgdmFyIGRpc3RhbmNlID0gbGV4aWNhbERpc3RhbmNlLm1lYXN1cmUob3B0aW9uLCB0aHJlc2hvbGQpO1xuXG4gICAgaWYgKGRpc3RhbmNlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG9wdGlvbnNCeURpc3RhbmNlW29wdGlvbl0gPSBkaXN0YW5jZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LmtleXMob3B0aW9uc0J5RGlzdGFuY2UpLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICB2YXIgZGlzdGFuY2VEaWZmID0gb3B0aW9uc0J5RGlzdGFuY2VbYV0gLSBvcHRpb25zQnlEaXN0YW5jZVtiXTtcbiAgICByZXR1cm4gZGlzdGFuY2VEaWZmICE9PSAwID8gZGlzdGFuY2VEaWZmIDogbmF0dXJhbENvbXBhcmUoYSwgYik7XG4gIH0pO1xufVxuLyoqXG4gKiBDb21wdXRlcyB0aGUgbGV4aWNhbCBkaXN0YW5jZSBiZXR3ZWVuIHN0cmluZ3MgQSBhbmQgQi5cbiAqXG4gKiBUaGUgXCJkaXN0YW5jZVwiIGJldHdlZW4gdHdvIHN0cmluZ3MgaXMgZ2l2ZW4gYnkgY291bnRpbmcgdGhlIG1pbmltdW0gbnVtYmVyXG4gKiBvZiBlZGl0cyBuZWVkZWQgdG8gdHJhbnNmb3JtIHN0cmluZyBBIGludG8gc3RyaW5nIEIuIEFuIGVkaXQgY2FuIGJlIGFuXG4gKiBpbnNlcnRpb24sIGRlbGV0aW9uLCBvciBzdWJzdGl0dXRpb24gb2YgYSBzaW5nbGUgY2hhcmFjdGVyLCBvciBhIHN3YXAgb2YgdHdvXG4gKiBhZGphY2VudCBjaGFyYWN0ZXJzLlxuICpcbiAqIEluY2x1ZGVzIGEgY3VzdG9tIGFsdGVyYXRpb24gZnJvbSBEYW1lcmF1LUxldmVuc2h0ZWluIHRvIHRyZWF0IGNhc2UgY2hhbmdlc1xuICogYXMgYSBzaW5nbGUgZWRpdCB3aGljaCBoZWxwcyBpZGVudGlmeSBtaXMtY2FzZWQgdmFsdWVzIHdpdGggYW4gZWRpdCBkaXN0YW5jZVxuICogb2YgMS5cbiAqXG4gKiBUaGlzIGRpc3RhbmNlIGNhbiBiZSB1c2VmdWwgZm9yIGRldGVjdGluZyB0eXBvcyBpbiBpbnB1dCBvciBzb3J0aW5nXG4gKi9cblxudmFyIExleGljYWxEaXN0YW5jZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIExleGljYWxEaXN0YW5jZShpbnB1dCkge1xuICAgIHRoaXMuX2lucHV0ID0gaW5wdXQ7XG4gICAgdGhpcy5faW5wdXRMb3dlckNhc2UgPSBpbnB1dC50b0xvd2VyQ2FzZSgpO1xuICAgIHRoaXMuX2lucHV0QXJyYXkgPSBzdHJpbmdUb0FycmF5KHRoaXMuX2lucHV0TG93ZXJDYXNlKTtcbiAgICB0aGlzLl9yb3dzID0gW25ldyBBcnJheShpbnB1dC5sZW5ndGggKyAxKS5maWxsKDApLCBuZXcgQXJyYXkoaW5wdXQubGVuZ3RoICsgMSkuZmlsbCgwKSwgbmV3IEFycmF5KGlucHV0Lmxlbmd0aCArIDEpLmZpbGwoMCldO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IExleGljYWxEaXN0YW5jZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLm1lYXN1cmUgPSBmdW5jdGlvbiBtZWFzdXJlKG9wdGlvbiwgdGhyZXNob2xkKSB7XG4gICAgaWYgKHRoaXMuX2lucHV0ID09PSBvcHRpb24pIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIHZhciBvcHRpb25Mb3dlckNhc2UgPSBvcHRpb24udG9Mb3dlckNhc2UoKTsgLy8gQW55IGNhc2UgY2hhbmdlIGNvdW50cyBhcyBhIHNpbmdsZSBlZGl0XG5cbiAgICBpZiAodGhpcy5faW5wdXRMb3dlckNhc2UgPT09IG9wdGlvbkxvd2VyQ2FzZSkge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfVxuXG4gICAgdmFyIGEgPSBzdHJpbmdUb0FycmF5KG9wdGlvbkxvd2VyQ2FzZSk7XG4gICAgdmFyIGIgPSB0aGlzLl9pbnB1dEFycmF5O1xuXG4gICAgaWYgKGEubGVuZ3RoIDwgYi5sZW5ndGgpIHtcbiAgICAgIHZhciB0bXAgPSBhO1xuICAgICAgYSA9IGI7XG4gICAgICBiID0gdG1wO1xuICAgIH1cblxuICAgIHZhciBhTGVuZ3RoID0gYS5sZW5ndGg7XG4gICAgdmFyIGJMZW5ndGggPSBiLmxlbmd0aDtcblxuICAgIGlmIChhTGVuZ3RoIC0gYkxlbmd0aCA+IHRocmVzaG9sZCkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICB2YXIgcm93cyA9IHRoaXMuX3Jvd3M7XG5cbiAgICBmb3IgKHZhciBqID0gMDsgaiA8PSBiTGVuZ3RoOyBqKyspIHtcbiAgICAgIHJvd3NbMF1bal0gPSBqO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAxOyBpIDw9IGFMZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHVwUm93ID0gcm93c1soaSAtIDEpICUgM107XG4gICAgICB2YXIgY3VycmVudFJvdyA9IHJvd3NbaSAlIDNdO1xuICAgICAgdmFyIHNtYWxsZXN0Q2VsbCA9IGN1cnJlbnRSb3dbMF0gPSBpO1xuXG4gICAgICBmb3IgKHZhciBfaiA9IDE7IF9qIDw9IGJMZW5ndGg7IF9qKyspIHtcbiAgICAgICAgdmFyIGNvc3QgPSBhW2kgLSAxXSA9PT0gYltfaiAtIDFdID8gMCA6IDE7XG4gICAgICAgIHZhciBjdXJyZW50Q2VsbCA9IE1hdGgubWluKHVwUm93W19qXSArIDEsIC8vIGRlbGV0ZVxuICAgICAgICBjdXJyZW50Um93W19qIC0gMV0gKyAxLCAvLyBpbnNlcnRcbiAgICAgICAgdXBSb3dbX2ogLSAxXSArIGNvc3QgLy8gc3Vic3RpdHV0ZVxuICAgICAgICApO1xuXG4gICAgICAgIGlmIChpID4gMSAmJiBfaiA+IDEgJiYgYVtpIC0gMV0gPT09IGJbX2ogLSAyXSAmJiBhW2kgLSAyXSA9PT0gYltfaiAtIDFdKSB7XG4gICAgICAgICAgLy8gdHJhbnNwb3NpdGlvblxuICAgICAgICAgIHZhciBkb3VibGVEaWFnb25hbENlbGwgPSByb3dzWyhpIC0gMikgJSAzXVtfaiAtIDJdO1xuICAgICAgICAgIGN1cnJlbnRDZWxsID0gTWF0aC5taW4oY3VycmVudENlbGwsIGRvdWJsZURpYWdvbmFsQ2VsbCArIDEpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGN1cnJlbnRDZWxsIDwgc21hbGxlc3RDZWxsKSB7XG4gICAgICAgICAgc21hbGxlc3RDZWxsID0gY3VycmVudENlbGw7XG4gICAgICAgIH1cblxuICAgICAgICBjdXJyZW50Um93W19qXSA9IGN1cnJlbnRDZWxsO1xuICAgICAgfSAvLyBFYXJseSBleGl0LCBzaW5jZSBkaXN0YW5jZSBjYW4ndCBnbyBzbWFsbGVyIHRoYW4gc21hbGxlc3QgZWxlbWVudCBvZiB0aGUgcHJldmlvdXMgcm93LlxuXG5cbiAgICAgIGlmIChzbWFsbGVzdENlbGwgPiB0aHJlc2hvbGQpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZGlzdGFuY2UgPSByb3dzW2FMZW5ndGggJSAzXVtiTGVuZ3RoXTtcbiAgICByZXR1cm4gZGlzdGFuY2UgPD0gdGhyZXNob2xkID8gZGlzdGFuY2UgOiB1bmRlZmluZWQ7XG4gIH07XG5cbiAgcmV0dXJuIExleGljYWxEaXN0YW5jZTtcbn0oKTtcblxuZnVuY3Rpb24gc3RyaW5nVG9BcnJheShzdHIpIHtcbiAgdmFyIHN0ckxlbmd0aCA9IHN0ci5sZW5ndGg7XG4gIHZhciBhcnJheSA9IG5ldyBBcnJheShzdHJMZW5ndGgpO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyTGVuZ3RoOyArK2kpIHtcbiAgICBhcnJheVtpXSA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuICB9XG5cbiAgcmV0dXJuIGFycmF5O1xufVxuIiwiaW1wb3J0IG9iamVjdEVudHJpZXMgZnJvbSBcIi4uL3BvbHlmaWxscy9vYmplY3RFbnRyaWVzLm1qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdG9PYmpNYXAob2JqKSB7XG4gIC8qIGVzbGludC1lbmFibGUgbm8tcmVkZWNsYXJlICovXG4gIGlmIChPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICB2YXIgbWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICBmb3IgKHZhciBfaTIgPSAwLCBfb2JqZWN0RW50cmllczIgPSBvYmplY3RFbnRyaWVzKG9iaik7IF9pMiA8IF9vYmplY3RFbnRyaWVzMi5sZW5ndGg7IF9pMisrKSB7XG4gICAgdmFyIF9yZWYyID0gX29iamVjdEVudHJpZXMyW19pMl07XG4gICAgdmFyIGtleSA9IF9yZWYyWzBdO1xuICAgIHZhciB2YWx1ZSA9IF9yZWYyWzFdO1xuICAgIG1hcFtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gbWFwO1xufVxuIiwiaW1wb3J0IGRlZmluZUluc3BlY3QgZnJvbSBcIi4uL2pzdXRpbHMvZGVmaW5lSW5zcGVjdC5tanNcIjtcblxuLyoqXG4gKiBDb250YWlucyBhIHJhbmdlIG9mIFVURi04IGNoYXJhY3RlciBvZmZzZXRzIGFuZCB0b2tlbiByZWZlcmVuY2VzIHRoYXRcbiAqIGlkZW50aWZ5IHRoZSByZWdpb24gb2YgdGhlIHNvdXJjZSBmcm9tIHdoaWNoIHRoZSBBU1QgZGVyaXZlZC5cbiAqL1xuZXhwb3J0IHZhciBMb2NhdGlvbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIC8qKlxuICAgKiBUaGUgY2hhcmFjdGVyIG9mZnNldCBhdCB3aGljaCB0aGlzIE5vZGUgYmVnaW5zLlxuICAgKi9cblxuICAvKipcbiAgICogVGhlIGNoYXJhY3RlciBvZmZzZXQgYXQgd2hpY2ggdGhpcyBOb2RlIGVuZHMuXG4gICAqL1xuXG4gIC8qKlxuICAgKiBUaGUgVG9rZW4gYXQgd2hpY2ggdGhpcyBOb2RlIGJlZ2lucy5cbiAgICovXG5cbiAgLyoqXG4gICAqIFRoZSBUb2tlbiBhdCB3aGljaCB0aGlzIE5vZGUgZW5kcy5cbiAgICovXG5cbiAgLyoqXG4gICAqIFRoZSBTb3VyY2UgZG9jdW1lbnQgdGhlIEFTVCByZXByZXNlbnRzLlxuICAgKi9cbiAgZnVuY3Rpb24gTG9jYXRpb24oc3RhcnRUb2tlbiwgZW5kVG9rZW4sIHNvdXJjZSkge1xuICAgIHRoaXMuc3RhcnQgPSBzdGFydFRva2VuLnN0YXJ0O1xuICAgIHRoaXMuZW5kID0gZW5kVG9rZW4uZW5kO1xuICAgIHRoaXMuc3RhcnRUb2tlbiA9IHN0YXJ0VG9rZW47XG4gICAgdGhpcy5lbmRUb2tlbiA9IGVuZFRva2VuO1xuICAgIHRoaXMuc291cmNlID0gc291cmNlO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IExvY2F0aW9uLnByb3RvdHlwZTtcblxuICBfcHJvdG8udG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgIHJldHVybiB7XG4gICAgICBzdGFydDogdGhpcy5zdGFydCxcbiAgICAgIGVuZDogdGhpcy5lbmRcbiAgICB9O1xuICB9O1xuXG4gIHJldHVybiBMb2NhdGlvbjtcbn0oKTsgLy8gUHJpbnQgYSBzaW1wbGlmaWVkIGZvcm0gd2hlbiBhcHBlYXJpbmcgaW4gYGluc3BlY3RgIGFuZCBgdXRpbC5pbnNwZWN0YC5cblxuZGVmaW5lSW5zcGVjdChMb2NhdGlvbik7XG4vKipcbiAqIFJlcHJlc2VudHMgYSByYW5nZSBvZiBjaGFyYWN0ZXJzIHJlcHJlc2VudGVkIGJ5IGEgbGV4aWNhbCB0b2tlblxuICogd2l0aGluIGEgU291cmNlLlxuICovXG5cbmV4cG9ydCB2YXIgVG9rZW4gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAvKipcbiAgICogVGhlIGtpbmQgb2YgVG9rZW4uXG4gICAqL1xuXG4gIC8qKlxuICAgKiBUaGUgY2hhcmFjdGVyIG9mZnNldCBhdCB3aGljaCB0aGlzIE5vZGUgYmVnaW5zLlxuICAgKi9cblxuICAvKipcbiAgICogVGhlIGNoYXJhY3RlciBvZmZzZXQgYXQgd2hpY2ggdGhpcyBOb2RlIGVuZHMuXG4gICAqL1xuXG4gIC8qKlxuICAgKiBUaGUgMS1pbmRleGVkIGxpbmUgbnVtYmVyIG9uIHdoaWNoIHRoaXMgVG9rZW4gYXBwZWFycy5cbiAgICovXG5cbiAgLyoqXG4gICAqIFRoZSAxLWluZGV4ZWQgY29sdW1uIG51bWJlciBhdCB3aGljaCB0aGlzIFRva2VuIGJlZ2lucy5cbiAgICovXG5cbiAgLyoqXG4gICAqIEZvciBub24tcHVuY3R1YXRpb24gdG9rZW5zLCByZXByZXNlbnRzIHRoZSBpbnRlcnByZXRlZCB2YWx1ZSBvZiB0aGUgdG9rZW4uXG4gICAqL1xuXG4gIC8qKlxuICAgKiBUb2tlbnMgZXhpc3QgYXMgbm9kZXMgaW4gYSBkb3VibGUtbGlua2VkLWxpc3QgYW1vbmdzdCBhbGwgdG9rZW5zXG4gICAqIGluY2x1ZGluZyBpZ25vcmVkIHRva2Vucy4gPFNPRj4gaXMgYWx3YXlzIHRoZSBmaXJzdCBub2RlIGFuZCA8RU9GPlxuICAgKiB0aGUgbGFzdC5cbiAgICovXG4gIGZ1bmN0aW9uIFRva2VuKGtpbmQsIHN0YXJ0LCBlbmQsIGxpbmUsIGNvbHVtbiwgcHJldiwgdmFsdWUpIHtcbiAgICB0aGlzLmtpbmQgPSBraW5kO1xuICAgIHRoaXMuc3RhcnQgPSBzdGFydDtcbiAgICB0aGlzLmVuZCA9IGVuZDtcbiAgICB0aGlzLmxpbmUgPSBsaW5lO1xuICAgIHRoaXMuY29sdW1uID0gY29sdW1uO1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB0aGlzLnByZXYgPSBwcmV2O1xuICAgIHRoaXMubmV4dCA9IG51bGw7XG4gIH1cblxuICB2YXIgX3Byb3RvMiA9IFRva2VuLnByb3RvdHlwZTtcblxuICBfcHJvdG8yLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICByZXR1cm4ge1xuICAgICAga2luZDogdGhpcy5raW5kLFxuICAgICAgdmFsdWU6IHRoaXMudmFsdWUsXG4gICAgICBsaW5lOiB0aGlzLmxpbmUsXG4gICAgICBjb2x1bW46IHRoaXMuY29sdW1uXG4gICAgfTtcbiAgfTtcblxuICByZXR1cm4gVG9rZW47XG59KCk7IC8vIFByaW50IGEgc2ltcGxpZmllZCBmb3JtIHdoZW4gYXBwZWFyaW5nIGluIGBpbnNwZWN0YCBhbmQgYHV0aWwuaW5zcGVjdGAuXG5cbmRlZmluZUluc3BlY3QoVG9rZW4pO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaXNOb2RlKG1heWJlTm9kZSkge1xuICByZXR1cm4gbWF5YmVOb2RlICE9IG51bGwgJiYgdHlwZW9mIG1heWJlTm9kZS5raW5kID09PSAnc3RyaW5nJztcbn1cbi8qKlxuICogVGhlIGxpc3Qgb2YgYWxsIHBvc3NpYmxlIEFTVCBub2RlIHR5cGVzLlxuICovXG4iLCIvKipcbiAqIFByb2R1Y2VzIHRoZSB2YWx1ZSBvZiBhIGJsb2NrIHN0cmluZyBmcm9tIGl0cyBwYXJzZWQgcmF3IHZhbHVlLCBzaW1pbGFyIHRvXG4gKiBDb2ZmZWVTY3JpcHQncyBibG9jayBzdHJpbmcsIFB5dGhvbidzIGRvY3N0cmluZyB0cmltIG9yIFJ1YnkncyBzdHJpcF9oZXJlZG9jLlxuICpcbiAqIFRoaXMgaW1wbGVtZW50cyB0aGUgR3JhcGhRTCBzcGVjJ3MgQmxvY2tTdHJpbmdWYWx1ZSgpIHN0YXRpYyBhbGdvcml0aG0uXG4gKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWRlbnRCbG9ja1N0cmluZ1ZhbHVlKHJhd1N0cmluZykge1xuICAvLyBFeHBhbmQgYSBibG9jayBzdHJpbmcncyByYXcgdmFsdWUgaW50byBpbmRlcGVuZGVudCBsaW5lcy5cbiAgdmFyIGxpbmVzID0gcmF3U3RyaW5nLnNwbGl0KC9cXHJcXG58W1xcblxccl0vZyk7IC8vIFJlbW92ZSBjb21tb24gaW5kZW50YXRpb24gZnJvbSBhbGwgbGluZXMgYnV0IGZpcnN0LlxuXG4gIHZhciBjb21tb25JbmRlbnQgPSBnZXRCbG9ja1N0cmluZ0luZGVudGF0aW9uKHJhd1N0cmluZyk7XG5cbiAgaWYgKGNvbW1vbkluZGVudCAhPT0gMCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxpbmVzW2ldID0gbGluZXNbaV0uc2xpY2UoY29tbW9uSW5kZW50KTtcbiAgICB9XG4gIH0gLy8gUmVtb3ZlIGxlYWRpbmcgYW5kIHRyYWlsaW5nIGJsYW5rIGxpbmVzLlxuXG5cbiAgdmFyIHN0YXJ0TGluZSA9IDA7XG5cbiAgd2hpbGUgKHN0YXJ0TGluZSA8IGxpbmVzLmxlbmd0aCAmJiBpc0JsYW5rKGxpbmVzW3N0YXJ0TGluZV0pKSB7XG4gICAgKytzdGFydExpbmU7XG4gIH1cblxuICB2YXIgZW5kTGluZSA9IGxpbmVzLmxlbmd0aDtcblxuICB3aGlsZSAoZW5kTGluZSA+IHN0YXJ0TGluZSAmJiBpc0JsYW5rKGxpbmVzW2VuZExpbmUgLSAxXSkpIHtcbiAgICAtLWVuZExpbmU7XG4gIH0gLy8gUmV0dXJuIGEgc3RyaW5nIG9mIHRoZSBsaW5lcyBqb2luZWQgd2l0aCBVKzAwMEEuXG5cblxuICByZXR1cm4gbGluZXMuc2xpY2Uoc3RhcnRMaW5lLCBlbmRMaW5lKS5qb2luKCdcXG4nKTtcbn1cblxuZnVuY3Rpb24gaXNCbGFuayhzdHIpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoc3RyW2ldICE9PSAnICcgJiYgc3RyW2ldICE9PSAnXFx0Jykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRCbG9ja1N0cmluZ0luZGVudGF0aW9uKHZhbHVlKSB7XG4gIHZhciBfY29tbW9uSW5kZW50O1xuXG4gIHZhciBpc0ZpcnN0TGluZSA9IHRydWU7XG4gIHZhciBpc0VtcHR5TGluZSA9IHRydWU7XG4gIHZhciBpbmRlbnQgPSAwO1xuICB2YXIgY29tbW9uSW5kZW50ID0gbnVsbDtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgKytpKSB7XG4gICAgc3dpdGNoICh2YWx1ZS5jaGFyQ29kZUF0KGkpKSB7XG4gICAgICBjYXNlIDEzOlxuICAgICAgICAvLyAgXFxyXG4gICAgICAgIGlmICh2YWx1ZS5jaGFyQ29kZUF0KGkgKyAxKSA9PT0gMTApIHtcbiAgICAgICAgICArK2k7IC8vIHNraXAgXFxyXFxuIGFzIG9uZSBzeW1ib2xcbiAgICAgICAgfVxuXG4gICAgICAvLyBmYWxscyB0aHJvdWdoXG5cbiAgICAgIGNhc2UgMTA6XG4gICAgICAgIC8vICBcXG5cbiAgICAgICAgaXNGaXJzdExpbmUgPSBmYWxzZTtcbiAgICAgICAgaXNFbXB0eUxpbmUgPSB0cnVlO1xuICAgICAgICBpbmRlbnQgPSAwO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSA5OiAvLyAgIFxcdFxuXG4gICAgICBjYXNlIDMyOlxuICAgICAgICAvLyAgPHNwYWNlPlxuICAgICAgICArK2luZGVudDtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChpc0VtcHR5TGluZSAmJiAhaXNGaXJzdExpbmUgJiYgKGNvbW1vbkluZGVudCA9PT0gbnVsbCB8fCBpbmRlbnQgPCBjb21tb25JbmRlbnQpKSB7XG4gICAgICAgICAgY29tbW9uSW5kZW50ID0gaW5kZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgaXNFbXB0eUxpbmUgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gKF9jb21tb25JbmRlbnQgPSBjb21tb25JbmRlbnQpICE9PSBudWxsICYmIF9jb21tb25JbmRlbnQgIT09IHZvaWQgMCA/IF9jb21tb25JbmRlbnQgOiAwO1xufVxuLyoqXG4gKiBQcmludCBhIGJsb2NrIHN0cmluZyBpbiB0aGUgaW5kZW50ZWQgYmxvY2sgZm9ybSBieSBhZGRpbmcgYSBsZWFkaW5nIGFuZFxuICogdHJhaWxpbmcgYmxhbmsgbGluZS4gSG93ZXZlciwgaWYgYSBibG9jayBzdHJpbmcgc3RhcnRzIHdpdGggd2hpdGVzcGFjZSBhbmQgaXNcbiAqIGEgc2luZ2xlLWxpbmUsIGFkZGluZyBhIGxlYWRpbmcgYmxhbmsgbGluZSB3b3VsZCBzdHJpcCB0aGF0IHdoaXRlc3BhY2UuXG4gKlxuICogQGludGVybmFsXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHByaW50QmxvY2tTdHJpbmcodmFsdWUpIHtcbiAgdmFyIGluZGVudGF0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAnJztcbiAgdmFyIHByZWZlck11bHRpcGxlTGluZXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZhbHNlO1xuICB2YXIgaXNTaW5nbGVMaW5lID0gdmFsdWUuaW5kZXhPZignXFxuJykgPT09IC0xO1xuICB2YXIgaGFzTGVhZGluZ1NwYWNlID0gdmFsdWVbMF0gPT09ICcgJyB8fCB2YWx1ZVswXSA9PT0gJ1xcdCc7XG4gIHZhciBoYXNUcmFpbGluZ1F1b3RlID0gdmFsdWVbdmFsdWUubGVuZ3RoIC0gMV0gPT09ICdcIic7XG4gIHZhciBoYXNUcmFpbGluZ1NsYXNoID0gdmFsdWVbdmFsdWUubGVuZ3RoIC0gMV0gPT09ICdcXFxcJztcbiAgdmFyIHByaW50QXNNdWx0aXBsZUxpbmVzID0gIWlzU2luZ2xlTGluZSB8fCBoYXNUcmFpbGluZ1F1b3RlIHx8IGhhc1RyYWlsaW5nU2xhc2ggfHwgcHJlZmVyTXVsdGlwbGVMaW5lcztcbiAgdmFyIHJlc3VsdCA9ICcnOyAvLyBGb3JtYXQgYSBtdWx0aS1saW5lIGJsb2NrIHF1b3RlIHRvIGFjY291bnQgZm9yIGxlYWRpbmcgc3BhY2UuXG5cbiAgaWYgKHByaW50QXNNdWx0aXBsZUxpbmVzICYmICEoaXNTaW5nbGVMaW5lICYmIGhhc0xlYWRpbmdTcGFjZSkpIHtcbiAgICByZXN1bHQgKz0gJ1xcbicgKyBpbmRlbnRhdGlvbjtcbiAgfVxuXG4gIHJlc3VsdCArPSBpbmRlbnRhdGlvbiA/IHZhbHVlLnJlcGxhY2UoL1xcbi9nLCAnXFxuJyArIGluZGVudGF0aW9uKSA6IHZhbHVlO1xuXG4gIGlmIChwcmludEFzTXVsdGlwbGVMaW5lcykge1xuICAgIHJlc3VsdCArPSAnXFxuJztcbiAgfVxuXG4gIHJldHVybiAnXCJcIlwiJyArIHJlc3VsdC5yZXBsYWNlKC9cIlwiXCIvZywgJ1xcXFxcIlwiXCInKSArICdcIlwiXCInO1xufVxuIiwiLyoqXG4gKiBUaGUgc2V0IG9mIGFsbG93ZWQgZGlyZWN0aXZlIGxvY2F0aW9uIHZhbHVlcy5cbiAqL1xuZXhwb3J0IHZhciBEaXJlY3RpdmVMb2NhdGlvbiA9IE9iamVjdC5mcmVlemUoe1xuICAvLyBSZXF1ZXN0IERlZmluaXRpb25zXG4gIFFVRVJZOiAnUVVFUlknLFxuICBNVVRBVElPTjogJ01VVEFUSU9OJyxcbiAgU1VCU0NSSVBUSU9OOiAnU1VCU0NSSVBUSU9OJyxcbiAgRklFTEQ6ICdGSUVMRCcsXG4gIEZSQUdNRU5UX0RFRklOSVRJT046ICdGUkFHTUVOVF9ERUZJTklUSU9OJyxcbiAgRlJBR01FTlRfU1BSRUFEOiAnRlJBR01FTlRfU1BSRUFEJyxcbiAgSU5MSU5FX0ZSQUdNRU5UOiAnSU5MSU5FX0ZSQUdNRU5UJyxcbiAgVkFSSUFCTEVfREVGSU5JVElPTjogJ1ZBUklBQkxFX0RFRklOSVRJT04nLFxuICAvLyBUeXBlIFN5c3RlbSBEZWZpbml0aW9uc1xuICBTQ0hFTUE6ICdTQ0hFTUEnLFxuICBTQ0FMQVI6ICdTQ0FMQVInLFxuICBPQkpFQ1Q6ICdPQkpFQ1QnLFxuICBGSUVMRF9ERUZJTklUSU9OOiAnRklFTERfREVGSU5JVElPTicsXG4gIEFSR1VNRU5UX0RFRklOSVRJT046ICdBUkdVTUVOVF9ERUZJTklUSU9OJyxcbiAgSU5URVJGQUNFOiAnSU5URVJGQUNFJyxcbiAgVU5JT046ICdVTklPTicsXG4gIEVOVU06ICdFTlVNJyxcbiAgRU5VTV9WQUxVRTogJ0VOVU1fVkFMVUUnLFxuICBJTlBVVF9PQkpFQ1Q6ICdJTlBVVF9PQkpFQ1QnLFxuICBJTlBVVF9GSUVMRF9ERUZJTklUSU9OOiAnSU5QVVRfRklFTERfREVGSU5JVElPTidcbn0pO1xuLyoqXG4gKiBUaGUgZW51bSB0eXBlIHJlcHJlc2VudGluZyB0aGUgZGlyZWN0aXZlIGxvY2F0aW9uIHZhbHVlcy5cbiAqL1xuIiwiLyoqXG4gKiBUaGUgc2V0IG9mIGFsbG93ZWQga2luZCB2YWx1ZXMgZm9yIEFTVCBub2Rlcy5cbiAqL1xuZXhwb3J0IHZhciBLaW5kID0gT2JqZWN0LmZyZWV6ZSh7XG4gIC8vIE5hbWVcbiAgTkFNRTogJ05hbWUnLFxuICAvLyBEb2N1bWVudFxuICBET0NVTUVOVDogJ0RvY3VtZW50JyxcbiAgT1BFUkFUSU9OX0RFRklOSVRJT046ICdPcGVyYXRpb25EZWZpbml0aW9uJyxcbiAgVkFSSUFCTEVfREVGSU5JVElPTjogJ1ZhcmlhYmxlRGVmaW5pdGlvbicsXG4gIFNFTEVDVElPTl9TRVQ6ICdTZWxlY3Rpb25TZXQnLFxuICBGSUVMRDogJ0ZpZWxkJyxcbiAgQVJHVU1FTlQ6ICdBcmd1bWVudCcsXG4gIC8vIEZyYWdtZW50c1xuICBGUkFHTUVOVF9TUFJFQUQ6ICdGcmFnbWVudFNwcmVhZCcsXG4gIElOTElORV9GUkFHTUVOVDogJ0lubGluZUZyYWdtZW50JyxcbiAgRlJBR01FTlRfREVGSU5JVElPTjogJ0ZyYWdtZW50RGVmaW5pdGlvbicsXG4gIC8vIFZhbHVlc1xuICBWQVJJQUJMRTogJ1ZhcmlhYmxlJyxcbiAgSU5UOiAnSW50VmFsdWUnLFxuICBGTE9BVDogJ0Zsb2F0VmFsdWUnLFxuICBTVFJJTkc6ICdTdHJpbmdWYWx1ZScsXG4gIEJPT0xFQU46ICdCb29sZWFuVmFsdWUnLFxuICBOVUxMOiAnTnVsbFZhbHVlJyxcbiAgRU5VTTogJ0VudW1WYWx1ZScsXG4gIExJU1Q6ICdMaXN0VmFsdWUnLFxuICBPQkpFQ1Q6ICdPYmplY3RWYWx1ZScsXG4gIE9CSkVDVF9GSUVMRDogJ09iamVjdEZpZWxkJyxcbiAgLy8gRGlyZWN0aXZlc1xuICBESVJFQ1RJVkU6ICdEaXJlY3RpdmUnLFxuICAvLyBUeXBlc1xuICBOQU1FRF9UWVBFOiAnTmFtZWRUeXBlJyxcbiAgTElTVF9UWVBFOiAnTGlzdFR5cGUnLFxuICBOT05fTlVMTF9UWVBFOiAnTm9uTnVsbFR5cGUnLFxuICAvLyBUeXBlIFN5c3RlbSBEZWZpbml0aW9uc1xuICBTQ0hFTUFfREVGSU5JVElPTjogJ1NjaGVtYURlZmluaXRpb24nLFxuICBPUEVSQVRJT05fVFlQRV9ERUZJTklUSU9OOiAnT3BlcmF0aW9uVHlwZURlZmluaXRpb24nLFxuICAvLyBUeXBlIERlZmluaXRpb25zXG4gIFNDQUxBUl9UWVBFX0RFRklOSVRJT046ICdTY2FsYXJUeXBlRGVmaW5pdGlvbicsXG4gIE9CSkVDVF9UWVBFX0RFRklOSVRJT046ICdPYmplY3RUeXBlRGVmaW5pdGlvbicsXG4gIEZJRUxEX0RFRklOSVRJT046ICdGaWVsZERlZmluaXRpb24nLFxuICBJTlBVVF9WQUxVRV9ERUZJTklUSU9OOiAnSW5wdXRWYWx1ZURlZmluaXRpb24nLFxuICBJTlRFUkZBQ0VfVFlQRV9ERUZJTklUSU9OOiAnSW50ZXJmYWNlVHlwZURlZmluaXRpb24nLFxuICBVTklPTl9UWVBFX0RFRklOSVRJT046ICdVbmlvblR5cGVEZWZpbml0aW9uJyxcbiAgRU5VTV9UWVBFX0RFRklOSVRJT046ICdFbnVtVHlwZURlZmluaXRpb24nLFxuICBFTlVNX1ZBTFVFX0RFRklOSVRJT046ICdFbnVtVmFsdWVEZWZpbml0aW9uJyxcbiAgSU5QVVRfT0JKRUNUX1RZUEVfREVGSU5JVElPTjogJ0lucHV0T2JqZWN0VHlwZURlZmluaXRpb24nLFxuICAvLyBEaXJlY3RpdmUgRGVmaW5pdGlvbnNcbiAgRElSRUNUSVZFX0RFRklOSVRJT046ICdEaXJlY3RpdmVEZWZpbml0aW9uJyxcbiAgLy8gVHlwZSBTeXN0ZW0gRXh0ZW5zaW9uc1xuICBTQ0hFTUFfRVhURU5TSU9OOiAnU2NoZW1hRXh0ZW5zaW9uJyxcbiAgLy8gVHlwZSBFeHRlbnNpb25zXG4gIFNDQUxBUl9UWVBFX0VYVEVOU0lPTjogJ1NjYWxhclR5cGVFeHRlbnNpb24nLFxuICBPQkpFQ1RfVFlQRV9FWFRFTlNJT046ICdPYmplY3RUeXBlRXh0ZW5zaW9uJyxcbiAgSU5URVJGQUNFX1RZUEVfRVhURU5TSU9OOiAnSW50ZXJmYWNlVHlwZUV4dGVuc2lvbicsXG4gIFVOSU9OX1RZUEVfRVhURU5TSU9OOiAnVW5pb25UeXBlRXh0ZW5zaW9uJyxcbiAgRU5VTV9UWVBFX0VYVEVOU0lPTjogJ0VudW1UeXBlRXh0ZW5zaW9uJyxcbiAgSU5QVVRfT0JKRUNUX1RZUEVfRVhURU5TSU9OOiAnSW5wdXRPYmplY3RUeXBlRXh0ZW5zaW9uJ1xufSk7XG4vKipcbiAqIFRoZSBlbnVtIHR5cGUgcmVwcmVzZW50aW5nIHRoZSBwb3NzaWJsZSBraW5kIHZhbHVlcyBvZiBBU1Qgbm9kZXMuXG4gKi9cbiIsImltcG9ydCB7IHN5bnRheEVycm9yIH0gZnJvbSBcIi4uL2Vycm9yL3N5bnRheEVycm9yLm1qc1wiO1xuaW1wb3J0IHsgVG9rZW4gfSBmcm9tIFwiLi9hc3QubWpzXCI7XG5pbXBvcnQgeyBUb2tlbktpbmQgfSBmcm9tIFwiLi90b2tlbktpbmQubWpzXCI7XG5pbXBvcnQgeyBkZWRlbnRCbG9ja1N0cmluZ1ZhbHVlIH0gZnJvbSBcIi4vYmxvY2tTdHJpbmcubWpzXCI7XG4vKipcbiAqIEdpdmVuIGEgU291cmNlIG9iamVjdCwgY3JlYXRlcyBhIExleGVyIGZvciB0aGF0IHNvdXJjZS5cbiAqIEEgTGV4ZXIgaXMgYSBzdGF0ZWZ1bCBzdHJlYW0gZ2VuZXJhdG9yIGluIHRoYXQgZXZlcnkgdGltZVxuICogaXQgaXMgYWR2YW5jZWQsIGl0IHJldHVybnMgdGhlIG5leHQgdG9rZW4gaW4gdGhlIFNvdXJjZS4gQXNzdW1pbmcgdGhlXG4gKiBzb3VyY2UgbGV4ZXMsIHRoZSBmaW5hbCBUb2tlbiBlbWl0dGVkIGJ5IHRoZSBsZXhlciB3aWxsIGJlIG9mIGtpbmRcbiAqIEVPRiwgYWZ0ZXIgd2hpY2ggdGhlIGxleGVyIHdpbGwgcmVwZWF0ZWRseSByZXR1cm4gdGhlIHNhbWUgRU9GIHRva2VuXG4gKiB3aGVuZXZlciBjYWxsZWQuXG4gKi9cblxuZXhwb3J0IHZhciBMZXhlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIC8qKlxuICAgKiBUaGUgcHJldmlvdXNseSBmb2N1c2VkIG5vbi1pZ25vcmVkIHRva2VuLlxuICAgKi9cblxuICAvKipcbiAgICogVGhlIGN1cnJlbnRseSBmb2N1c2VkIG5vbi1pZ25vcmVkIHRva2VuLlxuICAgKi9cblxuICAvKipcbiAgICogVGhlICgxLWluZGV4ZWQpIGxpbmUgY29udGFpbmluZyB0aGUgY3VycmVudCB0b2tlbi5cbiAgICovXG5cbiAgLyoqXG4gICAqIFRoZSBjaGFyYWN0ZXIgb2Zmc2V0IGF0IHdoaWNoIHRoZSBjdXJyZW50IGxpbmUgYmVnaW5zLlxuICAgKi9cbiAgZnVuY3Rpb24gTGV4ZXIoc291cmNlKSB7XG4gICAgdmFyIHN0YXJ0T2ZGaWxlVG9rZW4gPSBuZXcgVG9rZW4oVG9rZW5LaW5kLlNPRiwgMCwgMCwgMCwgMCwgbnVsbCk7XG4gICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgdGhpcy5sYXN0VG9rZW4gPSBzdGFydE9mRmlsZVRva2VuO1xuICAgIHRoaXMudG9rZW4gPSBzdGFydE9mRmlsZVRva2VuO1xuICAgIHRoaXMubGluZSA9IDE7XG4gICAgdGhpcy5saW5lU3RhcnQgPSAwO1xuICB9XG4gIC8qKlxuICAgKiBBZHZhbmNlcyB0aGUgdG9rZW4gc3RyZWFtIHRvIHRoZSBuZXh0IG5vbi1pZ25vcmVkIHRva2VuLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBMZXhlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmFkdmFuY2UgPSBmdW5jdGlvbiBhZHZhbmNlKCkge1xuICAgIHRoaXMubGFzdFRva2VuID0gdGhpcy50b2tlbjtcbiAgICB2YXIgdG9rZW4gPSB0aGlzLnRva2VuID0gdGhpcy5sb29rYWhlYWQoKTtcbiAgICByZXR1cm4gdG9rZW47XG4gIH1cbiAgLyoqXG4gICAqIExvb2tzIGFoZWFkIGFuZCByZXR1cm5zIHRoZSBuZXh0IG5vbi1pZ25vcmVkIHRva2VuLCBidXQgZG9lcyBub3QgY2hhbmdlXG4gICAqIHRoZSBzdGF0ZSBvZiBMZXhlci5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ubG9va2FoZWFkID0gZnVuY3Rpb24gbG9va2FoZWFkKCkge1xuICAgIHZhciB0b2tlbiA9IHRoaXMudG9rZW47XG5cbiAgICBpZiAodG9rZW4ua2luZCAhPT0gVG9rZW5LaW5kLkVPRikge1xuICAgICAgZG8ge1xuICAgICAgICB2YXIgX3Rva2VuJG5leHQ7XG5cbiAgICAgICAgLy8gTm90ZTogbmV4dCBpcyBvbmx5IG11dGFibGUgZHVyaW5nIHBhcnNpbmcsIHNvIHdlIGNhc3QgdG8gYWxsb3cgdGhpcy5cbiAgICAgICAgdG9rZW4gPSAoX3Rva2VuJG5leHQgPSB0b2tlbi5uZXh0KSAhPT0gbnVsbCAmJiBfdG9rZW4kbmV4dCAhPT0gdm9pZCAwID8gX3Rva2VuJG5leHQgOiB0b2tlbi5uZXh0ID0gcmVhZFRva2VuKHRoaXMsIHRva2VuKTtcbiAgICAgIH0gd2hpbGUgKHRva2VuLmtpbmQgPT09IFRva2VuS2luZC5DT01NRU5UKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdG9rZW47XG4gIH07XG5cbiAgcmV0dXJuIExleGVyO1xufSgpO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaXNQdW5jdHVhdG9yVG9rZW5LaW5kKGtpbmQpIHtcbiAgcmV0dXJuIGtpbmQgPT09IFRva2VuS2luZC5CQU5HIHx8IGtpbmQgPT09IFRva2VuS2luZC5ET0xMQVIgfHwga2luZCA9PT0gVG9rZW5LaW5kLkFNUCB8fCBraW5kID09PSBUb2tlbktpbmQuUEFSRU5fTCB8fCBraW5kID09PSBUb2tlbktpbmQuUEFSRU5fUiB8fCBraW5kID09PSBUb2tlbktpbmQuU1BSRUFEIHx8IGtpbmQgPT09IFRva2VuS2luZC5DT0xPTiB8fCBraW5kID09PSBUb2tlbktpbmQuRVFVQUxTIHx8IGtpbmQgPT09IFRva2VuS2luZC5BVCB8fCBraW5kID09PSBUb2tlbktpbmQuQlJBQ0tFVF9MIHx8IGtpbmQgPT09IFRva2VuS2luZC5CUkFDS0VUX1IgfHwga2luZCA9PT0gVG9rZW5LaW5kLkJSQUNFX0wgfHwga2luZCA9PT0gVG9rZW5LaW5kLlBJUEUgfHwga2luZCA9PT0gVG9rZW5LaW5kLkJSQUNFX1I7XG59XG5cbmZ1bmN0aW9uIHByaW50Q2hhckNvZGUoY29kZSkge1xuICByZXR1cm4gKC8vIE5hTi91bmRlZmluZWQgcmVwcmVzZW50cyBhY2Nlc3MgYmV5b25kIHRoZSBlbmQgb2YgdGhlIGZpbGUuXG4gICAgaXNOYU4oY29kZSkgPyBUb2tlbktpbmQuRU9GIDogLy8gVHJ1c3QgSlNPTiBmb3IgQVNDSUkuXG4gICAgY29kZSA8IDB4MDA3ZiA/IEpTT04uc3RyaW5naWZ5KFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSkpIDogLy8gT3RoZXJ3aXNlIHByaW50IHRoZSBlc2NhcGVkIGZvcm0uXG4gICAgXCJcXFwiXFxcXHVcIi5jb25jYXQoKCcwMCcgKyBjb2RlLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpKS5zbGljZSgtNCksIFwiXFxcIlwiKVxuICApO1xufVxuLyoqXG4gKiBHZXRzIHRoZSBuZXh0IHRva2VuIGZyb20gdGhlIHNvdXJjZSBzdGFydGluZyBhdCB0aGUgZ2l2ZW4gcG9zaXRpb24uXG4gKlxuICogVGhpcyBza2lwcyBvdmVyIHdoaXRlc3BhY2UgdW50aWwgaXQgZmluZHMgdGhlIG5leHQgbGV4YWJsZSB0b2tlbiwgdGhlbiBsZXhlc1xuICogcHVuY3R1YXRvcnMgaW1tZWRpYXRlbHkgb3IgY2FsbHMgdGhlIGFwcHJvcHJpYXRlIGhlbHBlciBmdW5jdGlvbiBmb3IgbW9yZVxuICogY29tcGxpY2F0ZWQgdG9rZW5zLlxuICovXG5cblxuZnVuY3Rpb24gcmVhZFRva2VuKGxleGVyLCBwcmV2KSB7XG4gIHZhciBzb3VyY2UgPSBsZXhlci5zb3VyY2U7XG4gIHZhciBib2R5ID0gc291cmNlLmJvZHk7XG4gIHZhciBib2R5TGVuZ3RoID0gYm9keS5sZW5ndGg7XG4gIHZhciBwb3MgPSBwcmV2LmVuZDtcblxuICB3aGlsZSAocG9zIDwgYm9keUxlbmd0aCkge1xuICAgIHZhciBjb2RlID0gYm9keS5jaGFyQ29kZUF0KHBvcyk7XG4gICAgdmFyIF9saW5lID0gbGV4ZXIubGluZTtcblxuICAgIHZhciBfY29sID0gMSArIHBvcyAtIGxleGVyLmxpbmVTdGFydDsgLy8gU291cmNlQ2hhcmFjdGVyXG5cblxuICAgIHN3aXRjaCAoY29kZSkge1xuICAgICAgY2FzZSAweGZlZmY6IC8vIDxCT00+XG5cbiAgICAgIGNhc2UgOTogLy8gICBcXHRcblxuICAgICAgY2FzZSAzMjogLy8gIDxzcGFjZT5cblxuICAgICAgY2FzZSA0NDpcbiAgICAgICAgLy8gICxcbiAgICAgICAgKytwb3M7XG4gICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICBjYXNlIDEwOlxuICAgICAgICAvLyAgXFxuXG4gICAgICAgICsrcG9zO1xuICAgICAgICArK2xleGVyLmxpbmU7XG4gICAgICAgIGxleGVyLmxpbmVTdGFydCA9IHBvcztcbiAgICAgICAgY29udGludWU7XG5cbiAgICAgIGNhc2UgMTM6XG4gICAgICAgIC8vICBcXHJcbiAgICAgICAgaWYgKGJvZHkuY2hhckNvZGVBdChwb3MgKyAxKSA9PT0gMTApIHtcbiAgICAgICAgICBwb3MgKz0gMjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICArK3BvcztcbiAgICAgICAgfVxuXG4gICAgICAgICsrbGV4ZXIubGluZTtcbiAgICAgICAgbGV4ZXIubGluZVN0YXJ0ID0gcG9zO1xuICAgICAgICBjb250aW51ZTtcblxuICAgICAgY2FzZSAzMzpcbiAgICAgICAgLy8gICFcbiAgICAgICAgcmV0dXJuIG5ldyBUb2tlbihUb2tlbktpbmQuQkFORywgcG9zLCBwb3MgKyAxLCBfbGluZSwgX2NvbCwgcHJldik7XG5cbiAgICAgIGNhc2UgMzU6XG4gICAgICAgIC8vICAjXG4gICAgICAgIHJldHVybiByZWFkQ29tbWVudChzb3VyY2UsIHBvcywgX2xpbmUsIF9jb2wsIHByZXYpO1xuXG4gICAgICBjYXNlIDM2OlxuICAgICAgICAvLyAgJFxuICAgICAgICByZXR1cm4gbmV3IFRva2VuKFRva2VuS2luZC5ET0xMQVIsIHBvcywgcG9zICsgMSwgX2xpbmUsIF9jb2wsIHByZXYpO1xuXG4gICAgICBjYXNlIDM4OlxuICAgICAgICAvLyAgJlxuICAgICAgICByZXR1cm4gbmV3IFRva2VuKFRva2VuS2luZC5BTVAsIHBvcywgcG9zICsgMSwgX2xpbmUsIF9jb2wsIHByZXYpO1xuXG4gICAgICBjYXNlIDQwOlxuICAgICAgICAvLyAgKFxuICAgICAgICByZXR1cm4gbmV3IFRva2VuKFRva2VuS2luZC5QQVJFTl9MLCBwb3MsIHBvcyArIDEsIF9saW5lLCBfY29sLCBwcmV2KTtcblxuICAgICAgY2FzZSA0MTpcbiAgICAgICAgLy8gIClcbiAgICAgICAgcmV0dXJuIG5ldyBUb2tlbihUb2tlbktpbmQuUEFSRU5fUiwgcG9zLCBwb3MgKyAxLCBfbGluZSwgX2NvbCwgcHJldik7XG5cbiAgICAgIGNhc2UgNDY6XG4gICAgICAgIC8vICAuXG4gICAgICAgIGlmIChib2R5LmNoYXJDb2RlQXQocG9zICsgMSkgPT09IDQ2ICYmIGJvZHkuY2hhckNvZGVBdChwb3MgKyAyKSA9PT0gNDYpIHtcbiAgICAgICAgICByZXR1cm4gbmV3IFRva2VuKFRva2VuS2luZC5TUFJFQUQsIHBvcywgcG9zICsgMywgX2xpbmUsIF9jb2wsIHByZXYpO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgNTg6XG4gICAgICAgIC8vICA6XG4gICAgICAgIHJldHVybiBuZXcgVG9rZW4oVG9rZW5LaW5kLkNPTE9OLCBwb3MsIHBvcyArIDEsIF9saW5lLCBfY29sLCBwcmV2KTtcblxuICAgICAgY2FzZSA2MTpcbiAgICAgICAgLy8gID1cbiAgICAgICAgcmV0dXJuIG5ldyBUb2tlbihUb2tlbktpbmQuRVFVQUxTLCBwb3MsIHBvcyArIDEsIF9saW5lLCBfY29sLCBwcmV2KTtcblxuICAgICAgY2FzZSA2NDpcbiAgICAgICAgLy8gIEBcbiAgICAgICAgcmV0dXJuIG5ldyBUb2tlbihUb2tlbktpbmQuQVQsIHBvcywgcG9zICsgMSwgX2xpbmUsIF9jb2wsIHByZXYpO1xuXG4gICAgICBjYXNlIDkxOlxuICAgICAgICAvLyAgW1xuICAgICAgICByZXR1cm4gbmV3IFRva2VuKFRva2VuS2luZC5CUkFDS0VUX0wsIHBvcywgcG9zICsgMSwgX2xpbmUsIF9jb2wsIHByZXYpO1xuXG4gICAgICBjYXNlIDkzOlxuICAgICAgICAvLyAgXVxuICAgICAgICByZXR1cm4gbmV3IFRva2VuKFRva2VuS2luZC5CUkFDS0VUX1IsIHBvcywgcG9zICsgMSwgX2xpbmUsIF9jb2wsIHByZXYpO1xuXG4gICAgICBjYXNlIDEyMzpcbiAgICAgICAgLy8ge1xuICAgICAgICByZXR1cm4gbmV3IFRva2VuKFRva2VuS2luZC5CUkFDRV9MLCBwb3MsIHBvcyArIDEsIF9saW5lLCBfY29sLCBwcmV2KTtcblxuICAgICAgY2FzZSAxMjQ6XG4gICAgICAgIC8vIHxcbiAgICAgICAgcmV0dXJuIG5ldyBUb2tlbihUb2tlbktpbmQuUElQRSwgcG9zLCBwb3MgKyAxLCBfbGluZSwgX2NvbCwgcHJldik7XG5cbiAgICAgIGNhc2UgMTI1OlxuICAgICAgICAvLyB9XG4gICAgICAgIHJldHVybiBuZXcgVG9rZW4oVG9rZW5LaW5kLkJSQUNFX1IsIHBvcywgcG9zICsgMSwgX2xpbmUsIF9jb2wsIHByZXYpO1xuXG4gICAgICBjYXNlIDM0OlxuICAgICAgICAvLyAgXCJcbiAgICAgICAgaWYgKGJvZHkuY2hhckNvZGVBdChwb3MgKyAxKSA9PT0gMzQgJiYgYm9keS5jaGFyQ29kZUF0KHBvcyArIDIpID09PSAzNCkge1xuICAgICAgICAgIHJldHVybiByZWFkQmxvY2tTdHJpbmcoc291cmNlLCBwb3MsIF9saW5lLCBfY29sLCBwcmV2LCBsZXhlcik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVhZFN0cmluZyhzb3VyY2UsIHBvcywgX2xpbmUsIF9jb2wsIHByZXYpO1xuXG4gICAgICBjYXNlIDQ1OiAvLyAgLVxuXG4gICAgICBjYXNlIDQ4OiAvLyAgMFxuXG4gICAgICBjYXNlIDQ5OiAvLyAgMVxuXG4gICAgICBjYXNlIDUwOiAvLyAgMlxuXG4gICAgICBjYXNlIDUxOiAvLyAgM1xuXG4gICAgICBjYXNlIDUyOiAvLyAgNFxuXG4gICAgICBjYXNlIDUzOiAvLyAgNVxuXG4gICAgICBjYXNlIDU0OiAvLyAgNlxuXG4gICAgICBjYXNlIDU1OiAvLyAgN1xuXG4gICAgICBjYXNlIDU2OiAvLyAgOFxuXG4gICAgICBjYXNlIDU3OlxuICAgICAgICAvLyAgOVxuICAgICAgICByZXR1cm4gcmVhZE51bWJlcihzb3VyY2UsIHBvcywgY29kZSwgX2xpbmUsIF9jb2wsIHByZXYpO1xuXG4gICAgICBjYXNlIDY1OiAvLyAgQVxuXG4gICAgICBjYXNlIDY2OiAvLyAgQlxuXG4gICAgICBjYXNlIDY3OiAvLyAgQ1xuXG4gICAgICBjYXNlIDY4OiAvLyAgRFxuXG4gICAgICBjYXNlIDY5OiAvLyAgRVxuXG4gICAgICBjYXNlIDcwOiAvLyAgRlxuXG4gICAgICBjYXNlIDcxOiAvLyAgR1xuXG4gICAgICBjYXNlIDcyOiAvLyAgSFxuXG4gICAgICBjYXNlIDczOiAvLyAgSVxuXG4gICAgICBjYXNlIDc0OiAvLyAgSlxuXG4gICAgICBjYXNlIDc1OiAvLyAgS1xuXG4gICAgICBjYXNlIDc2OiAvLyAgTFxuXG4gICAgICBjYXNlIDc3OiAvLyAgTVxuXG4gICAgICBjYXNlIDc4OiAvLyAgTlxuXG4gICAgICBjYXNlIDc5OiAvLyAgT1xuXG4gICAgICBjYXNlIDgwOiAvLyAgUFxuXG4gICAgICBjYXNlIDgxOiAvLyAgUVxuXG4gICAgICBjYXNlIDgyOiAvLyAgUlxuXG4gICAgICBjYXNlIDgzOiAvLyAgU1xuXG4gICAgICBjYXNlIDg0OiAvLyAgVFxuXG4gICAgICBjYXNlIDg1OiAvLyAgVVxuXG4gICAgICBjYXNlIDg2OiAvLyAgVlxuXG4gICAgICBjYXNlIDg3OiAvLyAgV1xuXG4gICAgICBjYXNlIDg4OiAvLyAgWFxuXG4gICAgICBjYXNlIDg5OiAvLyAgWVxuXG4gICAgICBjYXNlIDkwOiAvLyAgWlxuXG4gICAgICBjYXNlIDk1OiAvLyAgX1xuXG4gICAgICBjYXNlIDk3OiAvLyAgYVxuXG4gICAgICBjYXNlIDk4OiAvLyAgYlxuXG4gICAgICBjYXNlIDk5OiAvLyAgY1xuXG4gICAgICBjYXNlIDEwMDogLy8gZFxuXG4gICAgICBjYXNlIDEwMTogLy8gZVxuXG4gICAgICBjYXNlIDEwMjogLy8gZlxuXG4gICAgICBjYXNlIDEwMzogLy8gZ1xuXG4gICAgICBjYXNlIDEwNDogLy8gaFxuXG4gICAgICBjYXNlIDEwNTogLy8gaVxuXG4gICAgICBjYXNlIDEwNjogLy8galxuXG4gICAgICBjYXNlIDEwNzogLy8ga1xuXG4gICAgICBjYXNlIDEwODogLy8gbFxuXG4gICAgICBjYXNlIDEwOTogLy8gbVxuXG4gICAgICBjYXNlIDExMDogLy8gblxuXG4gICAgICBjYXNlIDExMTogLy8gb1xuXG4gICAgICBjYXNlIDExMjogLy8gcFxuXG4gICAgICBjYXNlIDExMzogLy8gcVxuXG4gICAgICBjYXNlIDExNDogLy8gclxuXG4gICAgICBjYXNlIDExNTogLy8gc1xuXG4gICAgICBjYXNlIDExNjogLy8gdFxuXG4gICAgICBjYXNlIDExNzogLy8gdVxuXG4gICAgICBjYXNlIDExODogLy8gdlxuXG4gICAgICBjYXNlIDExOTogLy8gd1xuXG4gICAgICBjYXNlIDEyMDogLy8geFxuXG4gICAgICBjYXNlIDEyMTogLy8geVxuXG4gICAgICBjYXNlIDEyMjpcbiAgICAgICAgLy8gelxuICAgICAgICByZXR1cm4gcmVhZE5hbWUoc291cmNlLCBwb3MsIF9saW5lLCBfY29sLCBwcmV2KTtcbiAgICB9XG5cbiAgICB0aHJvdyBzeW50YXhFcnJvcihzb3VyY2UsIHBvcywgdW5leHBlY3RlZENoYXJhY3Rlck1lc3NhZ2UoY29kZSkpO1xuICB9XG5cbiAgdmFyIGxpbmUgPSBsZXhlci5saW5lO1xuICB2YXIgY29sID0gMSArIHBvcyAtIGxleGVyLmxpbmVTdGFydDtcbiAgcmV0dXJuIG5ldyBUb2tlbihUb2tlbktpbmQuRU9GLCBib2R5TGVuZ3RoLCBib2R5TGVuZ3RoLCBsaW5lLCBjb2wsIHByZXYpO1xufVxuLyoqXG4gKiBSZXBvcnQgYSBtZXNzYWdlIHRoYXQgYW4gdW5leHBlY3RlZCBjaGFyYWN0ZXIgd2FzIGVuY291bnRlcmVkLlxuICovXG5cblxuZnVuY3Rpb24gdW5leHBlY3RlZENoYXJhY3Rlck1lc3NhZ2UoY29kZSkge1xuICBpZiAoY29kZSA8IDB4MDAyMCAmJiBjb2RlICE9PSAweDAwMDkgJiYgY29kZSAhPT0gMHgwMDBhICYmIGNvZGUgIT09IDB4MDAwZCkge1xuICAgIHJldHVybiBcIkNhbm5vdCBjb250YWluIHRoZSBpbnZhbGlkIGNoYXJhY3RlciBcIi5jb25jYXQocHJpbnRDaGFyQ29kZShjb2RlKSwgXCIuXCIpO1xuICB9XG5cbiAgaWYgKGNvZGUgPT09IDM5KSB7XG4gICAgLy8gJ1xuICAgIHJldHVybiAnVW5leHBlY3RlZCBzaW5nbGUgcXVvdGUgY2hhcmFjdGVyIChcXCcpLCBkaWQgeW91IG1lYW4gdG8gdXNlIGEgZG91YmxlIHF1b3RlIChcIik/JztcbiAgfVxuXG4gIHJldHVybiBcIkNhbm5vdCBwYXJzZSB0aGUgdW5leHBlY3RlZCBjaGFyYWN0ZXIgXCIuY29uY2F0KHByaW50Q2hhckNvZGUoY29kZSksIFwiLlwiKTtcbn1cbi8qKlxuICogUmVhZHMgYSBjb21tZW50IHRva2VuIGZyb20gdGhlIHNvdXJjZSBmaWxlLlxuICpcbiAqICNbXFx1MDAwOVxcdTAwMjAtXFx1RkZGRl0qXG4gKi9cblxuXG5mdW5jdGlvbiByZWFkQ29tbWVudChzb3VyY2UsIHN0YXJ0LCBsaW5lLCBjb2wsIHByZXYpIHtcbiAgdmFyIGJvZHkgPSBzb3VyY2UuYm9keTtcbiAgdmFyIGNvZGU7XG4gIHZhciBwb3NpdGlvbiA9IHN0YXJ0O1xuXG4gIGRvIHtcbiAgICBjb2RlID0gYm9keS5jaGFyQ29kZUF0KCsrcG9zaXRpb24pO1xuICB9IHdoaWxlICghaXNOYU4oY29kZSkgJiYgKCAvLyBTb3VyY2VDaGFyYWN0ZXIgYnV0IG5vdCBMaW5lVGVybWluYXRvclxuICBjb2RlID4gMHgwMDFmIHx8IGNvZGUgPT09IDB4MDAwOSkpO1xuXG4gIHJldHVybiBuZXcgVG9rZW4oVG9rZW5LaW5kLkNPTU1FTlQsIHN0YXJ0LCBwb3NpdGlvbiwgbGluZSwgY29sLCBwcmV2LCBib2R5LnNsaWNlKHN0YXJ0ICsgMSwgcG9zaXRpb24pKTtcbn1cbi8qKlxuICogUmVhZHMgYSBudW1iZXIgdG9rZW4gZnJvbSB0aGUgc291cmNlIGZpbGUsIGVpdGhlciBhIGZsb2F0XG4gKiBvciBhbiBpbnQgZGVwZW5kaW5nIG9uIHdoZXRoZXIgYSBkZWNpbWFsIHBvaW50IGFwcGVhcnMuXG4gKlxuICogSW50OiAgIC0/KDB8WzEtOV1bMC05XSopXG4gKiBGbG9hdDogLT8oMHxbMS05XVswLTldKikoXFwuWzAtOV0rKT8oKEV8ZSkoK3wtKT9bMC05XSspP1xuICovXG5cblxuZnVuY3Rpb24gcmVhZE51bWJlcihzb3VyY2UsIHN0YXJ0LCBmaXJzdENvZGUsIGxpbmUsIGNvbCwgcHJldikge1xuICB2YXIgYm9keSA9IHNvdXJjZS5ib2R5O1xuICB2YXIgY29kZSA9IGZpcnN0Q29kZTtcbiAgdmFyIHBvc2l0aW9uID0gc3RhcnQ7XG4gIHZhciBpc0Zsb2F0ID0gZmFsc2U7XG5cbiAgaWYgKGNvZGUgPT09IDQ1KSB7XG4gICAgLy8gLVxuICAgIGNvZGUgPSBib2R5LmNoYXJDb2RlQXQoKytwb3NpdGlvbik7XG4gIH1cblxuICBpZiAoY29kZSA9PT0gNDgpIHtcbiAgICAvLyAwXG4gICAgY29kZSA9IGJvZHkuY2hhckNvZGVBdCgrK3Bvc2l0aW9uKTtcblxuICAgIGlmIChjb2RlID49IDQ4ICYmIGNvZGUgPD0gNTcpIHtcbiAgICAgIHRocm93IHN5bnRheEVycm9yKHNvdXJjZSwgcG9zaXRpb24sIFwiSW52YWxpZCBudW1iZXIsIHVuZXhwZWN0ZWQgZGlnaXQgYWZ0ZXIgMDogXCIuY29uY2F0KHByaW50Q2hhckNvZGUoY29kZSksIFwiLlwiKSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHBvc2l0aW9uID0gcmVhZERpZ2l0cyhzb3VyY2UsIHBvc2l0aW9uLCBjb2RlKTtcbiAgICBjb2RlID0gYm9keS5jaGFyQ29kZUF0KHBvc2l0aW9uKTtcbiAgfVxuXG4gIGlmIChjb2RlID09PSA0Nikge1xuICAgIC8vIC5cbiAgICBpc0Zsb2F0ID0gdHJ1ZTtcbiAgICBjb2RlID0gYm9keS5jaGFyQ29kZUF0KCsrcG9zaXRpb24pO1xuICAgIHBvc2l0aW9uID0gcmVhZERpZ2l0cyhzb3VyY2UsIHBvc2l0aW9uLCBjb2RlKTtcbiAgICBjb2RlID0gYm9keS5jaGFyQ29kZUF0KHBvc2l0aW9uKTtcbiAgfVxuXG4gIGlmIChjb2RlID09PSA2OSB8fCBjb2RlID09PSAxMDEpIHtcbiAgICAvLyBFIGVcbiAgICBpc0Zsb2F0ID0gdHJ1ZTtcbiAgICBjb2RlID0gYm9keS5jaGFyQ29kZUF0KCsrcG9zaXRpb24pO1xuXG4gICAgaWYgKGNvZGUgPT09IDQzIHx8IGNvZGUgPT09IDQ1KSB7XG4gICAgICAvLyArIC1cbiAgICAgIGNvZGUgPSBib2R5LmNoYXJDb2RlQXQoKytwb3NpdGlvbik7XG4gICAgfVxuXG4gICAgcG9zaXRpb24gPSByZWFkRGlnaXRzKHNvdXJjZSwgcG9zaXRpb24sIGNvZGUpO1xuICAgIGNvZGUgPSBib2R5LmNoYXJDb2RlQXQocG9zaXRpb24pO1xuICB9IC8vIE51bWJlcnMgY2Fubm90IGJlIGZvbGxvd2VkIGJ5IC4gb3IgTmFtZVN0YXJ0XG5cblxuICBpZiAoY29kZSA9PT0gNDYgfHwgaXNOYW1lU3RhcnQoY29kZSkpIHtcbiAgICB0aHJvdyBzeW50YXhFcnJvcihzb3VyY2UsIHBvc2l0aW9uLCBcIkludmFsaWQgbnVtYmVyLCBleHBlY3RlZCBkaWdpdCBidXQgZ290OiBcIi5jb25jYXQocHJpbnRDaGFyQ29kZShjb2RlKSwgXCIuXCIpKTtcbiAgfVxuXG4gIHJldHVybiBuZXcgVG9rZW4oaXNGbG9hdCA/IFRva2VuS2luZC5GTE9BVCA6IFRva2VuS2luZC5JTlQsIHN0YXJ0LCBwb3NpdGlvbiwgbGluZSwgY29sLCBwcmV2LCBib2R5LnNsaWNlKHN0YXJ0LCBwb3NpdGlvbikpO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBuZXcgcG9zaXRpb24gaW4gdGhlIHNvdXJjZSBhZnRlciByZWFkaW5nIGRpZ2l0cy5cbiAqL1xuXG5cbmZ1bmN0aW9uIHJlYWREaWdpdHMoc291cmNlLCBzdGFydCwgZmlyc3RDb2RlKSB7XG4gIHZhciBib2R5ID0gc291cmNlLmJvZHk7XG4gIHZhciBwb3NpdGlvbiA9IHN0YXJ0O1xuICB2YXIgY29kZSA9IGZpcnN0Q29kZTtcblxuICBpZiAoY29kZSA+PSA0OCAmJiBjb2RlIDw9IDU3KSB7XG4gICAgLy8gMCAtIDlcbiAgICBkbyB7XG4gICAgICBjb2RlID0gYm9keS5jaGFyQ29kZUF0KCsrcG9zaXRpb24pO1xuICAgIH0gd2hpbGUgKGNvZGUgPj0gNDggJiYgY29kZSA8PSA1Nyk7IC8vIDAgLSA5XG5cblxuICAgIHJldHVybiBwb3NpdGlvbjtcbiAgfVxuXG4gIHRocm93IHN5bnRheEVycm9yKHNvdXJjZSwgcG9zaXRpb24sIFwiSW52YWxpZCBudW1iZXIsIGV4cGVjdGVkIGRpZ2l0IGJ1dCBnb3Q6IFwiLmNvbmNhdChwcmludENoYXJDb2RlKGNvZGUpLCBcIi5cIikpO1xufVxuLyoqXG4gKiBSZWFkcyBhIHN0cmluZyB0b2tlbiBmcm9tIHRoZSBzb3VyY2UgZmlsZS5cbiAqXG4gKiBcIihbXlwiXFxcXFxcdTAwMEFcXHUwMDBEXXwoXFxcXCh1WzAtOWEtZkEtRl17NH18W1wiXFxcXC9iZm5ydF0pKSkqXCJcbiAqL1xuXG5cbmZ1bmN0aW9uIHJlYWRTdHJpbmcoc291cmNlLCBzdGFydCwgbGluZSwgY29sLCBwcmV2KSB7XG4gIHZhciBib2R5ID0gc291cmNlLmJvZHk7XG4gIHZhciBwb3NpdGlvbiA9IHN0YXJ0ICsgMTtcbiAgdmFyIGNodW5rU3RhcnQgPSBwb3NpdGlvbjtcbiAgdmFyIGNvZGUgPSAwO1xuICB2YXIgdmFsdWUgPSAnJztcblxuICB3aGlsZSAocG9zaXRpb24gPCBib2R5Lmxlbmd0aCAmJiAhaXNOYU4oY29kZSA9IGJvZHkuY2hhckNvZGVBdChwb3NpdGlvbikpICYmIC8vIG5vdCBMaW5lVGVybWluYXRvclxuICBjb2RlICE9PSAweDAwMGEgJiYgY29kZSAhPT0gMHgwMDBkKSB7XG4gICAgLy8gQ2xvc2luZyBRdW90ZSAoXCIpXG4gICAgaWYgKGNvZGUgPT09IDM0KSB7XG4gICAgICB2YWx1ZSArPSBib2R5LnNsaWNlKGNodW5rU3RhcnQsIHBvc2l0aW9uKTtcbiAgICAgIHJldHVybiBuZXcgVG9rZW4oVG9rZW5LaW5kLlNUUklORywgc3RhcnQsIHBvc2l0aW9uICsgMSwgbGluZSwgY29sLCBwcmV2LCB2YWx1ZSk7XG4gICAgfSAvLyBTb3VyY2VDaGFyYWN0ZXJcblxuXG4gICAgaWYgKGNvZGUgPCAweDAwMjAgJiYgY29kZSAhPT0gMHgwMDA5KSB7XG4gICAgICB0aHJvdyBzeW50YXhFcnJvcihzb3VyY2UsIHBvc2l0aW9uLCBcIkludmFsaWQgY2hhcmFjdGVyIHdpdGhpbiBTdHJpbmc6IFwiLmNvbmNhdChwcmludENoYXJDb2RlKGNvZGUpLCBcIi5cIikpO1xuICAgIH1cblxuICAgICsrcG9zaXRpb247XG5cbiAgICBpZiAoY29kZSA9PT0gOTIpIHtcbiAgICAgIC8vIFxcXG4gICAgICB2YWx1ZSArPSBib2R5LnNsaWNlKGNodW5rU3RhcnQsIHBvc2l0aW9uIC0gMSk7XG4gICAgICBjb2RlID0gYm9keS5jaGFyQ29kZUF0KHBvc2l0aW9uKTtcblxuICAgICAgc3dpdGNoIChjb2RlKSB7XG4gICAgICAgIGNhc2UgMzQ6XG4gICAgICAgICAgdmFsdWUgKz0gJ1wiJztcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDQ3OlxuICAgICAgICAgIHZhbHVlICs9ICcvJztcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDkyOlxuICAgICAgICAgIHZhbHVlICs9ICdcXFxcJztcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDk4OlxuICAgICAgICAgIHZhbHVlICs9ICdcXGInO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgMTAyOlxuICAgICAgICAgIHZhbHVlICs9ICdcXGYnO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgMTEwOlxuICAgICAgICAgIHZhbHVlICs9ICdcXG4nO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgMTE0OlxuICAgICAgICAgIHZhbHVlICs9ICdcXHInO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgMTE2OlxuICAgICAgICAgIHZhbHVlICs9ICdcXHQnO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgMTE3OlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIC8vIHVYWFhYXG4gICAgICAgICAgICB2YXIgY2hhckNvZGUgPSB1bmlDaGFyQ29kZShib2R5LmNoYXJDb2RlQXQocG9zaXRpb24gKyAxKSwgYm9keS5jaGFyQ29kZUF0KHBvc2l0aW9uICsgMiksIGJvZHkuY2hhckNvZGVBdChwb3NpdGlvbiArIDMpLCBib2R5LmNoYXJDb2RlQXQocG9zaXRpb24gKyA0KSk7XG5cbiAgICAgICAgICAgIGlmIChjaGFyQ29kZSA8IDApIHtcbiAgICAgICAgICAgICAgdmFyIGludmFsaWRTZXF1ZW5jZSA9IGJvZHkuc2xpY2UocG9zaXRpb24gKyAxLCBwb3NpdGlvbiArIDUpO1xuICAgICAgICAgICAgICB0aHJvdyBzeW50YXhFcnJvcihzb3VyY2UsIHBvc2l0aW9uLCBcIkludmFsaWQgY2hhcmFjdGVyIGVzY2FwZSBzZXF1ZW5jZTogXFxcXHVcIi5jb25jYXQoaW52YWxpZFNlcXVlbmNlLCBcIi5cIikpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YWx1ZSArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNoYXJDb2RlKTtcbiAgICAgICAgICAgIHBvc2l0aW9uICs9IDQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBzeW50YXhFcnJvcihzb3VyY2UsIHBvc2l0aW9uLCBcIkludmFsaWQgY2hhcmFjdGVyIGVzY2FwZSBzZXF1ZW5jZTogXFxcXFwiLmNvbmNhdChTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUpLCBcIi5cIikpO1xuICAgICAgfVxuXG4gICAgICArK3Bvc2l0aW9uO1xuICAgICAgY2h1bmtTdGFydCA9IHBvc2l0aW9uO1xuICAgIH1cbiAgfVxuXG4gIHRocm93IHN5bnRheEVycm9yKHNvdXJjZSwgcG9zaXRpb24sICdVbnRlcm1pbmF0ZWQgc3RyaW5nLicpO1xufVxuLyoqXG4gKiBSZWFkcyBhIGJsb2NrIHN0cmluZyB0b2tlbiBmcm9tIHRoZSBzb3VyY2UgZmlsZS5cbiAqXG4gKiBcIlwiXCIoXCI/XCI/KFxcXFxcIlwiXCJ8XFxcXCg/IT1cIlwiXCIpfFteXCJcXFxcXSkpKlwiXCJcIlxuICovXG5cblxuZnVuY3Rpb24gcmVhZEJsb2NrU3RyaW5nKHNvdXJjZSwgc3RhcnQsIGxpbmUsIGNvbCwgcHJldiwgbGV4ZXIpIHtcbiAgdmFyIGJvZHkgPSBzb3VyY2UuYm9keTtcbiAgdmFyIHBvc2l0aW9uID0gc3RhcnQgKyAzO1xuICB2YXIgY2h1bmtTdGFydCA9IHBvc2l0aW9uO1xuICB2YXIgY29kZSA9IDA7XG4gIHZhciByYXdWYWx1ZSA9ICcnO1xuXG4gIHdoaWxlIChwb3NpdGlvbiA8IGJvZHkubGVuZ3RoICYmICFpc05hTihjb2RlID0gYm9keS5jaGFyQ29kZUF0KHBvc2l0aW9uKSkpIHtcbiAgICAvLyBDbG9zaW5nIFRyaXBsZS1RdW90ZSAoXCJcIlwiKVxuICAgIGlmIChjb2RlID09PSAzNCAmJiBib2R5LmNoYXJDb2RlQXQocG9zaXRpb24gKyAxKSA9PT0gMzQgJiYgYm9keS5jaGFyQ29kZUF0KHBvc2l0aW9uICsgMikgPT09IDM0KSB7XG4gICAgICByYXdWYWx1ZSArPSBib2R5LnNsaWNlKGNodW5rU3RhcnQsIHBvc2l0aW9uKTtcbiAgICAgIHJldHVybiBuZXcgVG9rZW4oVG9rZW5LaW5kLkJMT0NLX1NUUklORywgc3RhcnQsIHBvc2l0aW9uICsgMywgbGluZSwgY29sLCBwcmV2LCBkZWRlbnRCbG9ja1N0cmluZ1ZhbHVlKHJhd1ZhbHVlKSk7XG4gICAgfSAvLyBTb3VyY2VDaGFyYWN0ZXJcblxuXG4gICAgaWYgKGNvZGUgPCAweDAwMjAgJiYgY29kZSAhPT0gMHgwMDA5ICYmIGNvZGUgIT09IDB4MDAwYSAmJiBjb2RlICE9PSAweDAwMGQpIHtcbiAgICAgIHRocm93IHN5bnRheEVycm9yKHNvdXJjZSwgcG9zaXRpb24sIFwiSW52YWxpZCBjaGFyYWN0ZXIgd2l0aGluIFN0cmluZzogXCIuY29uY2F0KHByaW50Q2hhckNvZGUoY29kZSksIFwiLlwiKSk7XG4gICAgfVxuXG4gICAgaWYgKGNvZGUgPT09IDEwKSB7XG4gICAgICAvLyBuZXcgbGluZVxuICAgICAgKytwb3NpdGlvbjtcbiAgICAgICsrbGV4ZXIubGluZTtcbiAgICAgIGxleGVyLmxpbmVTdGFydCA9IHBvc2l0aW9uO1xuICAgIH0gZWxzZSBpZiAoY29kZSA9PT0gMTMpIHtcbiAgICAgIC8vIGNhcnJpYWdlIHJldHVyblxuICAgICAgaWYgKGJvZHkuY2hhckNvZGVBdChwb3NpdGlvbiArIDEpID09PSAxMCkge1xuICAgICAgICBwb3NpdGlvbiArPSAyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgKytwb3NpdGlvbjtcbiAgICAgIH1cblxuICAgICAgKytsZXhlci5saW5lO1xuICAgICAgbGV4ZXIubGluZVN0YXJ0ID0gcG9zaXRpb247XG4gICAgfSBlbHNlIGlmICggLy8gRXNjYXBlIFRyaXBsZS1RdW90ZSAoXFxcIlwiXCIpXG4gICAgY29kZSA9PT0gOTIgJiYgYm9keS5jaGFyQ29kZUF0KHBvc2l0aW9uICsgMSkgPT09IDM0ICYmIGJvZHkuY2hhckNvZGVBdChwb3NpdGlvbiArIDIpID09PSAzNCAmJiBib2R5LmNoYXJDb2RlQXQocG9zaXRpb24gKyAzKSA9PT0gMzQpIHtcbiAgICAgIHJhd1ZhbHVlICs9IGJvZHkuc2xpY2UoY2h1bmtTdGFydCwgcG9zaXRpb24pICsgJ1wiXCJcIic7XG4gICAgICBwb3NpdGlvbiArPSA0O1xuICAgICAgY2h1bmtTdGFydCA9IHBvc2l0aW9uO1xuICAgIH0gZWxzZSB7XG4gICAgICArK3Bvc2l0aW9uO1xuICAgIH1cbiAgfVxuXG4gIHRocm93IHN5bnRheEVycm9yKHNvdXJjZSwgcG9zaXRpb24sICdVbnRlcm1pbmF0ZWQgc3RyaW5nLicpO1xufVxuLyoqXG4gKiBDb252ZXJ0cyBmb3VyIGhleGFkZWNpbWFsIGNoYXJzIHRvIHRoZSBpbnRlZ2VyIHRoYXQgdGhlXG4gKiBzdHJpbmcgcmVwcmVzZW50cy4gRm9yIGV4YW1wbGUsIHVuaUNoYXJDb2RlKCcwJywnMCcsJzAnLCdmJylcbiAqIHdpbGwgcmV0dXJuIDE1LCBhbmQgdW5pQ2hhckNvZGUoJzAnLCcwJywnZicsJ2YnKSByZXR1cm5zIDI1NS5cbiAqXG4gKiBSZXR1cm5zIGEgbmVnYXRpdmUgbnVtYmVyIG9uIGVycm9yLCBpZiBhIGNoYXIgd2FzIGludmFsaWQuXG4gKlxuICogVGhpcyBpcyBpbXBsZW1lbnRlZCBieSBub3RpbmcgdGhhdCBjaGFyMmhleCgpIHJldHVybnMgLTEgb24gZXJyb3IsXG4gKiB3aGljaCBtZWFucyB0aGUgcmVzdWx0IG9mIE9SaW5nIHRoZSBjaGFyMmhleCgpIHdpbGwgYWxzbyBiZSBuZWdhdGl2ZS5cbiAqL1xuXG5cbmZ1bmN0aW9uIHVuaUNoYXJDb2RlKGEsIGIsIGMsIGQpIHtcbiAgcmV0dXJuIGNoYXIyaGV4KGEpIDw8IDEyIHwgY2hhcjJoZXgoYikgPDwgOCB8IGNoYXIyaGV4KGMpIDw8IDQgfCBjaGFyMmhleChkKTtcbn1cbi8qKlxuICogQ29udmVydHMgYSBoZXggY2hhcmFjdGVyIHRvIGl0cyBpbnRlZ2VyIHZhbHVlLlxuICogJzAnIGJlY29tZXMgMCwgJzknIGJlY29tZXMgOVxuICogJ0EnIGJlY29tZXMgMTAsICdGJyBiZWNvbWVzIDE1XG4gKiAnYScgYmVjb21lcyAxMCwgJ2YnIGJlY29tZXMgMTVcbiAqXG4gKiBSZXR1cm5zIC0xIG9uIGVycm9yLlxuICovXG5cblxuZnVuY3Rpb24gY2hhcjJoZXgoYSkge1xuICByZXR1cm4gYSA+PSA0OCAmJiBhIDw9IDU3ID8gYSAtIDQ4IC8vIDAtOVxuICA6IGEgPj0gNjUgJiYgYSA8PSA3MCA/IGEgLSA1NSAvLyBBLUZcbiAgOiBhID49IDk3ICYmIGEgPD0gMTAyID8gYSAtIDg3IC8vIGEtZlxuICA6IC0xO1xufVxuLyoqXG4gKiBSZWFkcyBhbiBhbHBoYW51bWVyaWMgKyB1bmRlcnNjb3JlIG5hbWUgZnJvbSB0aGUgc291cmNlLlxuICpcbiAqIFtfQS1aYS16XVtfMC05QS1aYS16XSpcbiAqL1xuXG5cbmZ1bmN0aW9uIHJlYWROYW1lKHNvdXJjZSwgc3RhcnQsIGxpbmUsIGNvbCwgcHJldikge1xuICB2YXIgYm9keSA9IHNvdXJjZS5ib2R5O1xuICB2YXIgYm9keUxlbmd0aCA9IGJvZHkubGVuZ3RoO1xuICB2YXIgcG9zaXRpb24gPSBzdGFydCArIDE7XG4gIHZhciBjb2RlID0gMDtcblxuICB3aGlsZSAocG9zaXRpb24gIT09IGJvZHlMZW5ndGggJiYgIWlzTmFOKGNvZGUgPSBib2R5LmNoYXJDb2RlQXQocG9zaXRpb24pKSAmJiAoY29kZSA9PT0gOTUgfHwgLy8gX1xuICBjb2RlID49IDQ4ICYmIGNvZGUgPD0gNTcgfHwgLy8gMC05XG4gIGNvZGUgPj0gNjUgJiYgY29kZSA8PSA5MCB8fCAvLyBBLVpcbiAgY29kZSA+PSA5NyAmJiBjb2RlIDw9IDEyMikgLy8gYS16XG4gICkge1xuICAgICsrcG9zaXRpb247XG4gIH1cblxuICByZXR1cm4gbmV3IFRva2VuKFRva2VuS2luZC5OQU1FLCBzdGFydCwgcG9zaXRpb24sIGxpbmUsIGNvbCwgcHJldiwgYm9keS5zbGljZShzdGFydCwgcG9zaXRpb24pKTtcbn0gLy8gXyBBLVogYS16XG5cblxuZnVuY3Rpb24gaXNOYW1lU3RhcnQoY29kZSkge1xuICByZXR1cm4gY29kZSA9PT0gOTUgfHwgY29kZSA+PSA2NSAmJiBjb2RlIDw9IDkwIHx8IGNvZGUgPj0gOTcgJiYgY29kZSA8PSAxMjI7XG59XG4iLCIvKipcbiAqIFJlcHJlc2VudHMgYSBsb2NhdGlvbiBpbiBhIFNvdXJjZS5cbiAqL1xuXG4vKipcbiAqIFRha2VzIGEgU291cmNlIGFuZCBhIFVURi04IGNoYXJhY3RlciBvZmZzZXQsIGFuZCByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nXG4gKiBsaW5lIGFuZCBjb2x1bW4gYXMgYSBTb3VyY2VMb2NhdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldExvY2F0aW9uKHNvdXJjZSwgcG9zaXRpb24pIHtcbiAgdmFyIGxpbmVSZWdleHAgPSAvXFxyXFxufFtcXG5cXHJdL2c7XG4gIHZhciBsaW5lID0gMTtcbiAgdmFyIGNvbHVtbiA9IHBvc2l0aW9uICsgMTtcbiAgdmFyIG1hdGNoO1xuXG4gIHdoaWxlICgobWF0Y2ggPSBsaW5lUmVnZXhwLmV4ZWMoc291cmNlLmJvZHkpKSAmJiBtYXRjaC5pbmRleCA8IHBvc2l0aW9uKSB7XG4gICAgbGluZSArPSAxO1xuICAgIGNvbHVtbiA9IHBvc2l0aW9uICsgMSAtIChtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aCk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGxpbmU6IGxpbmUsXG4gICAgY29sdW1uOiBjb2x1bW5cbiAgfTtcbn1cbiIsImltcG9ydCB7IHN5bnRheEVycm9yIH0gZnJvbSBcIi4uL2Vycm9yL3N5bnRheEVycm9yLm1qc1wiO1xuaW1wb3J0IHsgS2luZCB9IGZyb20gXCIuL2tpbmRzLm1qc1wiO1xuaW1wb3J0IHsgTG9jYXRpb24gfSBmcm9tIFwiLi9hc3QubWpzXCI7XG5pbXBvcnQgeyBUb2tlbktpbmQgfSBmcm9tIFwiLi90b2tlbktpbmQubWpzXCI7XG5pbXBvcnQgeyBTb3VyY2UsIGlzU291cmNlIH0gZnJvbSBcIi4vc291cmNlLm1qc1wiO1xuaW1wb3J0IHsgRGlyZWN0aXZlTG9jYXRpb24gfSBmcm9tIFwiLi9kaXJlY3RpdmVMb2NhdGlvbi5tanNcIjtcbmltcG9ydCB7IExleGVyLCBpc1B1bmN0dWF0b3JUb2tlbktpbmQgfSBmcm9tIFwiLi9sZXhlci5tanNcIjtcbi8qKlxuICogQ29uZmlndXJhdGlvbiBvcHRpb25zIHRvIGNvbnRyb2wgcGFyc2VyIGJlaGF2aW9yXG4gKi9cblxuLyoqXG4gKiBHaXZlbiBhIEdyYXBoUUwgc291cmNlLCBwYXJzZXMgaXQgaW50byBhIERvY3VtZW50LlxuICogVGhyb3dzIEdyYXBoUUxFcnJvciBpZiBhIHN5bnRheCBlcnJvciBpcyBlbmNvdW50ZXJlZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlKHNvdXJjZSwgb3B0aW9ucykge1xuICB2YXIgcGFyc2VyID0gbmV3IFBhcnNlcihzb3VyY2UsIG9wdGlvbnMpO1xuICByZXR1cm4gcGFyc2VyLnBhcnNlRG9jdW1lbnQoKTtcbn1cbi8qKlxuICogR2l2ZW4gYSBzdHJpbmcgY29udGFpbmluZyBhIEdyYXBoUUwgdmFsdWUgKGV4LiBgWzQyXWApLCBwYXJzZSB0aGUgQVNUIGZvclxuICogdGhhdCB2YWx1ZS5cbiAqIFRocm93cyBHcmFwaFFMRXJyb3IgaWYgYSBzeW50YXggZXJyb3IgaXMgZW5jb3VudGVyZWQuXG4gKlxuICogVGhpcyBpcyB1c2VmdWwgd2l0aGluIHRvb2xzIHRoYXQgb3BlcmF0ZSB1cG9uIEdyYXBoUUwgVmFsdWVzIGRpcmVjdGx5IGFuZFxuICogaW4gaXNvbGF0aW9uIG9mIGNvbXBsZXRlIEdyYXBoUUwgZG9jdW1lbnRzLlxuICpcbiAqIENvbnNpZGVyIHByb3ZpZGluZyB0aGUgcmVzdWx0cyB0byB0aGUgdXRpbGl0eSBmdW5jdGlvbjogdmFsdWVGcm9tQVNUKCkuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlVmFsdWUoc291cmNlLCBvcHRpb25zKSB7XG4gIHZhciBwYXJzZXIgPSBuZXcgUGFyc2VyKHNvdXJjZSwgb3B0aW9ucyk7XG4gIHBhcnNlci5leHBlY3RUb2tlbihUb2tlbktpbmQuU09GKTtcbiAgdmFyIHZhbHVlID0gcGFyc2VyLnBhcnNlVmFsdWVMaXRlcmFsKGZhbHNlKTtcbiAgcGFyc2VyLmV4cGVjdFRva2VuKFRva2VuS2luZC5FT0YpO1xuICByZXR1cm4gdmFsdWU7XG59XG4vKipcbiAqIEdpdmVuIGEgc3RyaW5nIGNvbnRhaW5pbmcgYSBHcmFwaFFMIFR5cGUgKGV4LiBgW0ludCFdYCksIHBhcnNlIHRoZSBBU1QgZm9yXG4gKiB0aGF0IHR5cGUuXG4gKiBUaHJvd3MgR3JhcGhRTEVycm9yIGlmIGEgc3ludGF4IGVycm9yIGlzIGVuY291bnRlcmVkLlxuICpcbiAqIFRoaXMgaXMgdXNlZnVsIHdpdGhpbiB0b29scyB0aGF0IG9wZXJhdGUgdXBvbiBHcmFwaFFMIFR5cGVzIGRpcmVjdGx5IGFuZFxuICogaW4gaXNvbGF0aW9uIG9mIGNvbXBsZXRlIEdyYXBoUUwgZG9jdW1lbnRzLlxuICpcbiAqIENvbnNpZGVyIHByb3ZpZGluZyB0aGUgcmVzdWx0cyB0byB0aGUgdXRpbGl0eSBmdW5jdGlvbjogdHlwZUZyb21BU1QoKS5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VUeXBlKHNvdXJjZSwgb3B0aW9ucykge1xuICB2YXIgcGFyc2VyID0gbmV3IFBhcnNlcihzb3VyY2UsIG9wdGlvbnMpO1xuICBwYXJzZXIuZXhwZWN0VG9rZW4oVG9rZW5LaW5kLlNPRik7XG4gIHZhciB0eXBlID0gcGFyc2VyLnBhcnNlVHlwZVJlZmVyZW5jZSgpO1xuICBwYXJzZXIuZXhwZWN0VG9rZW4oVG9rZW5LaW5kLkVPRik7XG4gIHJldHVybiB0eXBlO1xufVxuLyoqXG4gKiBUaGlzIGNsYXNzIGlzIGV4cG9ydGVkIG9ubHkgdG8gYXNzaXN0IHBlb3BsZSBpbiBpbXBsZW1lbnRpbmcgdGhlaXIgb3duIHBhcnNlcnNcbiAqIHdpdGhvdXQgZHVwbGljYXRpbmcgdG9vIG11Y2ggY29kZSBhbmQgc2hvdWxkIGJlIHVzZWQgb25seSBhcyBsYXN0IHJlc29ydCBmb3IgY2FzZXNcbiAqIHN1Y2ggYXMgZXhwZXJpbWVudGFsIHN5bnRheCBvciBpZiBjZXJ0YWluIGZlYXR1cmVzIGNvdWxkIG5vdCBiZSBjb250cmlidXRlZCB1cHN0cmVhbS5cbiAqXG4gKiBJdCBpcyBzdGlsbCBwYXJ0IG9mIHRoZSBpbnRlcm5hbCBBUEkgYW5kIGlzIHZlcnNpb25lZCwgc28gYW55IGNoYW5nZXMgdG8gaXQgYXJlIG5ldmVyXG4gKiBjb25zaWRlcmVkIGJyZWFraW5nIGNoYW5nZXMuIElmIHlvdSBzdGlsbCBuZWVkIHRvIHN1cHBvcnQgbXVsdGlwbGUgdmVyc2lvbnMgb2YgdGhlXG4gKiBsaWJyYXJ5LCBwbGVhc2UgdXNlIHRoZSBgdmVyc2lvbkluZm9gIHZhcmlhYmxlIGZvciB2ZXJzaW9uIGRldGVjdGlvbi5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuXG5leHBvcnQgdmFyIFBhcnNlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFBhcnNlcihzb3VyY2UsIG9wdGlvbnMpIHtcbiAgICB2YXIgc291cmNlT2JqID0gaXNTb3VyY2Uoc291cmNlKSA/IHNvdXJjZSA6IG5ldyBTb3VyY2Uoc291cmNlKTtcbiAgICB0aGlzLl9sZXhlciA9IG5ldyBMZXhlcihzb3VyY2VPYmopO1xuICAgIHRoaXMuX29wdGlvbnMgPSBvcHRpb25zO1xuICB9XG4gIC8qKlxuICAgKiBDb252ZXJ0cyBhIG5hbWUgbGV4IHRva2VuIGludG8gYSBuYW1lIHBhcnNlIG5vZGUuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IFBhcnNlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnBhcnNlTmFtZSA9IGZ1bmN0aW9uIHBhcnNlTmFtZSgpIHtcbiAgICB2YXIgdG9rZW4gPSB0aGlzLmV4cGVjdFRva2VuKFRva2VuS2luZC5OQU1FKTtcbiAgICByZXR1cm4ge1xuICAgICAga2luZDogS2luZC5OQU1FLFxuICAgICAgdmFsdWU6IHRva2VuLnZhbHVlLFxuICAgICAgbG9jOiB0aGlzLmxvYyh0b2tlbilcbiAgICB9O1xuICB9IC8vIEltcGxlbWVudHMgdGhlIHBhcnNpbmcgcnVsZXMgaW4gdGhlIERvY3VtZW50IHNlY3Rpb24uXG5cbiAgLyoqXG4gICAqIERvY3VtZW50IDogRGVmaW5pdGlvbitcbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFyc2VEb2N1bWVudCA9IGZ1bmN0aW9uIHBhcnNlRG9jdW1lbnQoKSB7XG4gICAgdmFyIHN0YXJ0ID0gdGhpcy5fbGV4ZXIudG9rZW47XG4gICAgcmV0dXJuIHtcbiAgICAgIGtpbmQ6IEtpbmQuRE9DVU1FTlQsXG4gICAgICBkZWZpbml0aW9uczogdGhpcy5tYW55KFRva2VuS2luZC5TT0YsIHRoaXMucGFyc2VEZWZpbml0aW9uLCBUb2tlbktpbmQuRU9GKSxcbiAgICAgIGxvYzogdGhpcy5sb2Moc3RhcnQpXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogRGVmaW5pdGlvbiA6XG4gICAqICAgLSBFeGVjdXRhYmxlRGVmaW5pdGlvblxuICAgKiAgIC0gVHlwZVN5c3RlbURlZmluaXRpb25cbiAgICogICAtIFR5cGVTeXN0ZW1FeHRlbnNpb25cbiAgICpcbiAgICogRXhlY3V0YWJsZURlZmluaXRpb24gOlxuICAgKiAgIC0gT3BlcmF0aW9uRGVmaW5pdGlvblxuICAgKiAgIC0gRnJhZ21lbnREZWZpbml0aW9uXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBhcnNlRGVmaW5pdGlvbiA9IGZ1bmN0aW9uIHBhcnNlRGVmaW5pdGlvbigpIHtcbiAgICBpZiAodGhpcy5wZWVrKFRva2VuS2luZC5OQU1FKSkge1xuICAgICAgc3dpdGNoICh0aGlzLl9sZXhlci50b2tlbi52YWx1ZSkge1xuICAgICAgICBjYXNlICdxdWVyeSc6XG4gICAgICAgIGNhc2UgJ211dGF0aW9uJzpcbiAgICAgICAgY2FzZSAnc3Vic2NyaXB0aW9uJzpcbiAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZU9wZXJhdGlvbkRlZmluaXRpb24oKTtcblxuICAgICAgICBjYXNlICdmcmFnbWVudCc6XG4gICAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VGcmFnbWVudERlZmluaXRpb24oKTtcblxuICAgICAgICBjYXNlICdzY2hlbWEnOlxuICAgICAgICBjYXNlICdzY2FsYXInOlxuICAgICAgICBjYXNlICd0eXBlJzpcbiAgICAgICAgY2FzZSAnaW50ZXJmYWNlJzpcbiAgICAgICAgY2FzZSAndW5pb24nOlxuICAgICAgICBjYXNlICdlbnVtJzpcbiAgICAgICAgY2FzZSAnaW5wdXQnOlxuICAgICAgICBjYXNlICdkaXJlY3RpdmUnOlxuICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlVHlwZVN5c3RlbURlZmluaXRpb24oKTtcblxuICAgICAgICBjYXNlICdleHRlbmQnOlxuICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlVHlwZVN5c3RlbUV4dGVuc2lvbigpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGhpcy5wZWVrKFRva2VuS2luZC5CUkFDRV9MKSkge1xuICAgICAgcmV0dXJuIHRoaXMucGFyc2VPcGVyYXRpb25EZWZpbml0aW9uKCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnBlZWtEZXNjcmlwdGlvbigpKSB7XG4gICAgICByZXR1cm4gdGhpcy5wYXJzZVR5cGVTeXN0ZW1EZWZpbml0aW9uKCk7XG4gICAgfVxuXG4gICAgdGhyb3cgdGhpcy51bmV4cGVjdGVkKCk7XG4gIH0gLy8gSW1wbGVtZW50cyB0aGUgcGFyc2luZyBydWxlcyBpbiB0aGUgT3BlcmF0aW9ucyBzZWN0aW9uLlxuXG4gIC8qKlxuICAgKiBPcGVyYXRpb25EZWZpbml0aW9uIDpcbiAgICogIC0gU2VsZWN0aW9uU2V0XG4gICAqICAtIE9wZXJhdGlvblR5cGUgTmFtZT8gVmFyaWFibGVEZWZpbml0aW9ucz8gRGlyZWN0aXZlcz8gU2VsZWN0aW9uU2V0XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBhcnNlT3BlcmF0aW9uRGVmaW5pdGlvbiA9IGZ1bmN0aW9uIHBhcnNlT3BlcmF0aW9uRGVmaW5pdGlvbigpIHtcbiAgICB2YXIgc3RhcnQgPSB0aGlzLl9sZXhlci50b2tlbjtcblxuICAgIGlmICh0aGlzLnBlZWsoVG9rZW5LaW5kLkJSQUNFX0wpKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBraW5kOiBLaW5kLk9QRVJBVElPTl9ERUZJTklUSU9OLFxuICAgICAgICBvcGVyYXRpb246ICdxdWVyeScsXG4gICAgICAgIG5hbWU6IHVuZGVmaW5lZCxcbiAgICAgICAgdmFyaWFibGVEZWZpbml0aW9uczogW10sXG4gICAgICAgIGRpcmVjdGl2ZXM6IFtdLFxuICAgICAgICBzZWxlY3Rpb25TZXQ6IHRoaXMucGFyc2VTZWxlY3Rpb25TZXQoKSxcbiAgICAgICAgbG9jOiB0aGlzLmxvYyhzdGFydClcbiAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIG9wZXJhdGlvbiA9IHRoaXMucGFyc2VPcGVyYXRpb25UeXBlKCk7XG4gICAgdmFyIG5hbWU7XG5cbiAgICBpZiAodGhpcy5wZWVrKFRva2VuS2luZC5OQU1FKSkge1xuICAgICAgbmFtZSA9IHRoaXMucGFyc2VOYW1lKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGtpbmQ6IEtpbmQuT1BFUkFUSU9OX0RFRklOSVRJT04sXG4gICAgICBvcGVyYXRpb246IG9wZXJhdGlvbixcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICB2YXJpYWJsZURlZmluaXRpb25zOiB0aGlzLnBhcnNlVmFyaWFibGVEZWZpbml0aW9ucygpLFxuICAgICAgZGlyZWN0aXZlczogdGhpcy5wYXJzZURpcmVjdGl2ZXMoZmFsc2UpLFxuICAgICAgc2VsZWN0aW9uU2V0OiB0aGlzLnBhcnNlU2VsZWN0aW9uU2V0KCksXG4gICAgICBsb2M6IHRoaXMubG9jKHN0YXJ0KVxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIE9wZXJhdGlvblR5cGUgOiBvbmUgb2YgcXVlcnkgbXV0YXRpb24gc3Vic2NyaXB0aW9uXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBhcnNlT3BlcmF0aW9uVHlwZSA9IGZ1bmN0aW9uIHBhcnNlT3BlcmF0aW9uVHlwZSgpIHtcbiAgICB2YXIgb3BlcmF0aW9uVG9rZW4gPSB0aGlzLmV4cGVjdFRva2VuKFRva2VuS2luZC5OQU1FKTtcblxuICAgIHN3aXRjaCAob3BlcmF0aW9uVG9rZW4udmFsdWUpIHtcbiAgICAgIGNhc2UgJ3F1ZXJ5JzpcbiAgICAgICAgcmV0dXJuICdxdWVyeSc7XG5cbiAgICAgIGNhc2UgJ211dGF0aW9uJzpcbiAgICAgICAgcmV0dXJuICdtdXRhdGlvbic7XG5cbiAgICAgIGNhc2UgJ3N1YnNjcmlwdGlvbic6XG4gICAgICAgIHJldHVybiAnc3Vic2NyaXB0aW9uJztcbiAgICB9XG5cbiAgICB0aHJvdyB0aGlzLnVuZXhwZWN0ZWQob3BlcmF0aW9uVG9rZW4pO1xuICB9XG4gIC8qKlxuICAgKiBWYXJpYWJsZURlZmluaXRpb25zIDogKCBWYXJpYWJsZURlZmluaXRpb24rIClcbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFyc2VWYXJpYWJsZURlZmluaXRpb25zID0gZnVuY3Rpb24gcGFyc2VWYXJpYWJsZURlZmluaXRpb25zKCkge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbmFsTWFueShUb2tlbktpbmQuUEFSRU5fTCwgdGhpcy5wYXJzZVZhcmlhYmxlRGVmaW5pdGlvbiwgVG9rZW5LaW5kLlBBUkVOX1IpO1xuICB9XG4gIC8qKlxuICAgKiBWYXJpYWJsZURlZmluaXRpb24gOiBWYXJpYWJsZSA6IFR5cGUgRGVmYXVsdFZhbHVlPyBEaXJlY3RpdmVzW0NvbnN0XT9cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFyc2VWYXJpYWJsZURlZmluaXRpb24gPSBmdW5jdGlvbiBwYXJzZVZhcmlhYmxlRGVmaW5pdGlvbigpIHtcbiAgICB2YXIgc3RhcnQgPSB0aGlzLl9sZXhlci50b2tlbjtcbiAgICByZXR1cm4ge1xuICAgICAga2luZDogS2luZC5WQVJJQUJMRV9ERUZJTklUSU9OLFxuICAgICAgdmFyaWFibGU6IHRoaXMucGFyc2VWYXJpYWJsZSgpLFxuICAgICAgdHlwZTogKHRoaXMuZXhwZWN0VG9rZW4oVG9rZW5LaW5kLkNPTE9OKSwgdGhpcy5wYXJzZVR5cGVSZWZlcmVuY2UoKSksXG4gICAgICBkZWZhdWx0VmFsdWU6IHRoaXMuZXhwZWN0T3B0aW9uYWxUb2tlbihUb2tlbktpbmQuRVFVQUxTKSA/IHRoaXMucGFyc2VWYWx1ZUxpdGVyYWwodHJ1ZSkgOiB1bmRlZmluZWQsXG4gICAgICBkaXJlY3RpdmVzOiB0aGlzLnBhcnNlRGlyZWN0aXZlcyh0cnVlKSxcbiAgICAgIGxvYzogdGhpcy5sb2Moc3RhcnQpXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogVmFyaWFibGUgOiAkIE5hbWVcbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFyc2VWYXJpYWJsZSA9IGZ1bmN0aW9uIHBhcnNlVmFyaWFibGUoKSB7XG4gICAgdmFyIHN0YXJ0ID0gdGhpcy5fbGV4ZXIudG9rZW47XG4gICAgdGhpcy5leHBlY3RUb2tlbihUb2tlbktpbmQuRE9MTEFSKTtcbiAgICByZXR1cm4ge1xuICAgICAga2luZDogS2luZC5WQVJJQUJMRSxcbiAgICAgIG5hbWU6IHRoaXMucGFyc2VOYW1lKCksXG4gICAgICBsb2M6IHRoaXMubG9jKHN0YXJ0KVxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIFNlbGVjdGlvblNldCA6IHsgU2VsZWN0aW9uKyB9XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBhcnNlU2VsZWN0aW9uU2V0ID0gZnVuY3Rpb24gcGFyc2VTZWxlY3Rpb25TZXQoKSB7XG4gICAgdmFyIHN0YXJ0ID0gdGhpcy5fbGV4ZXIudG9rZW47XG4gICAgcmV0dXJuIHtcbiAgICAgIGtpbmQ6IEtpbmQuU0VMRUNUSU9OX1NFVCxcbiAgICAgIHNlbGVjdGlvbnM6IHRoaXMubWFueShUb2tlbktpbmQuQlJBQ0VfTCwgdGhpcy5wYXJzZVNlbGVjdGlvbiwgVG9rZW5LaW5kLkJSQUNFX1IpLFxuICAgICAgbG9jOiB0aGlzLmxvYyhzdGFydClcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBTZWxlY3Rpb24gOlxuICAgKiAgIC0gRmllbGRcbiAgICogICAtIEZyYWdtZW50U3ByZWFkXG4gICAqICAgLSBJbmxpbmVGcmFnbWVudFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wYXJzZVNlbGVjdGlvbiA9IGZ1bmN0aW9uIHBhcnNlU2VsZWN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnBlZWsoVG9rZW5LaW5kLlNQUkVBRCkgPyB0aGlzLnBhcnNlRnJhZ21lbnQoKSA6IHRoaXMucGFyc2VGaWVsZCgpO1xuICB9XG4gIC8qKlxuICAgKiBGaWVsZCA6IEFsaWFzPyBOYW1lIEFyZ3VtZW50cz8gRGlyZWN0aXZlcz8gU2VsZWN0aW9uU2V0P1xuICAgKlxuICAgKiBBbGlhcyA6IE5hbWUgOlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wYXJzZUZpZWxkID0gZnVuY3Rpb24gcGFyc2VGaWVsZCgpIHtcbiAgICB2YXIgc3RhcnQgPSB0aGlzLl9sZXhlci50b2tlbjtcbiAgICB2YXIgbmFtZU9yQWxpYXMgPSB0aGlzLnBhcnNlTmFtZSgpO1xuICAgIHZhciBhbGlhcztcbiAgICB2YXIgbmFtZTtcblxuICAgIGlmICh0aGlzLmV4cGVjdE9wdGlvbmFsVG9rZW4oVG9rZW5LaW5kLkNPTE9OKSkge1xuICAgICAgYWxpYXMgPSBuYW1lT3JBbGlhcztcbiAgICAgIG5hbWUgPSB0aGlzLnBhcnNlTmFtZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBuYW1lID0gbmFtZU9yQWxpYXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGtpbmQ6IEtpbmQuRklFTEQsXG4gICAgICBhbGlhczogYWxpYXMsXG4gICAgICBuYW1lOiBuYW1lLFxuICAgICAgYXJndW1lbnRzOiB0aGlzLnBhcnNlQXJndW1lbnRzKGZhbHNlKSxcbiAgICAgIGRpcmVjdGl2ZXM6IHRoaXMucGFyc2VEaXJlY3RpdmVzKGZhbHNlKSxcbiAgICAgIHNlbGVjdGlvblNldDogdGhpcy5wZWVrKFRva2VuS2luZC5CUkFDRV9MKSA/IHRoaXMucGFyc2VTZWxlY3Rpb25TZXQoKSA6IHVuZGVmaW5lZCxcbiAgICAgIGxvYzogdGhpcy5sb2Moc3RhcnQpXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogQXJndW1lbnRzW0NvbnN0XSA6ICggQXJndW1lbnRbP0NvbnN0XSsgKVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wYXJzZUFyZ3VtZW50cyA9IGZ1bmN0aW9uIHBhcnNlQXJndW1lbnRzKGlzQ29uc3QpIHtcbiAgICB2YXIgaXRlbSA9IGlzQ29uc3QgPyB0aGlzLnBhcnNlQ29uc3RBcmd1bWVudCA6IHRoaXMucGFyc2VBcmd1bWVudDtcbiAgICByZXR1cm4gdGhpcy5vcHRpb25hbE1hbnkoVG9rZW5LaW5kLlBBUkVOX0wsIGl0ZW0sIFRva2VuS2luZC5QQVJFTl9SKTtcbiAgfVxuICAvKipcbiAgICogQXJndW1lbnRbQ29uc3RdIDogTmFtZSA6IFZhbHVlWz9Db25zdF1cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFyc2VBcmd1bWVudCA9IGZ1bmN0aW9uIHBhcnNlQXJndW1lbnQoKSB7XG4gICAgdmFyIHN0YXJ0ID0gdGhpcy5fbGV4ZXIudG9rZW47XG4gICAgdmFyIG5hbWUgPSB0aGlzLnBhcnNlTmFtZSgpO1xuICAgIHRoaXMuZXhwZWN0VG9rZW4oVG9rZW5LaW5kLkNPTE9OKTtcbiAgICByZXR1cm4ge1xuICAgICAga2luZDogS2luZC5BUkdVTUVOVCxcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICB2YWx1ZTogdGhpcy5wYXJzZVZhbHVlTGl0ZXJhbChmYWxzZSksXG4gICAgICBsb2M6IHRoaXMubG9jKHN0YXJ0KVxuICAgIH07XG4gIH07XG5cbiAgX3Byb3RvLnBhcnNlQ29uc3RBcmd1bWVudCA9IGZ1bmN0aW9uIHBhcnNlQ29uc3RBcmd1bWVudCgpIHtcbiAgICB2YXIgc3RhcnQgPSB0aGlzLl9sZXhlci50b2tlbjtcbiAgICByZXR1cm4ge1xuICAgICAga2luZDogS2luZC5BUkdVTUVOVCxcbiAgICAgIG5hbWU6IHRoaXMucGFyc2VOYW1lKCksXG4gICAgICB2YWx1ZTogKHRoaXMuZXhwZWN0VG9rZW4oVG9rZW5LaW5kLkNPTE9OKSwgdGhpcy5wYXJzZVZhbHVlTGl0ZXJhbCh0cnVlKSksXG4gICAgICBsb2M6IHRoaXMubG9jKHN0YXJ0KVxuICAgIH07XG4gIH0gLy8gSW1wbGVtZW50cyB0aGUgcGFyc2luZyBydWxlcyBpbiB0aGUgRnJhZ21lbnRzIHNlY3Rpb24uXG5cbiAgLyoqXG4gICAqIENvcnJlc3BvbmRzIHRvIGJvdGggRnJhZ21lbnRTcHJlYWQgYW5kIElubGluZUZyYWdtZW50IGluIHRoZSBzcGVjLlxuICAgKlxuICAgKiBGcmFnbWVudFNwcmVhZCA6IC4uLiBGcmFnbWVudE5hbWUgRGlyZWN0aXZlcz9cbiAgICpcbiAgICogSW5saW5lRnJhZ21lbnQgOiAuLi4gVHlwZUNvbmRpdGlvbj8gRGlyZWN0aXZlcz8gU2VsZWN0aW9uU2V0XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBhcnNlRnJhZ21lbnQgPSBmdW5jdGlvbiBwYXJzZUZyYWdtZW50KCkge1xuICAgIHZhciBzdGFydCA9IHRoaXMuX2xleGVyLnRva2VuO1xuICAgIHRoaXMuZXhwZWN0VG9rZW4oVG9rZW5LaW5kLlNQUkVBRCk7XG4gICAgdmFyIGhhc1R5cGVDb25kaXRpb24gPSB0aGlzLmV4cGVjdE9wdGlvbmFsS2V5d29yZCgnb24nKTtcblxuICAgIGlmICghaGFzVHlwZUNvbmRpdGlvbiAmJiB0aGlzLnBlZWsoVG9rZW5LaW5kLk5BTUUpKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBraW5kOiBLaW5kLkZSQUdNRU5UX1NQUkVBRCxcbiAgICAgICAgbmFtZTogdGhpcy5wYXJzZUZyYWdtZW50TmFtZSgpLFxuICAgICAgICBkaXJlY3RpdmVzOiB0aGlzLnBhcnNlRGlyZWN0aXZlcyhmYWxzZSksXG4gICAgICAgIGxvYzogdGhpcy5sb2Moc3RhcnQpXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBraW5kOiBLaW5kLklOTElORV9GUkFHTUVOVCxcbiAgICAgIHR5cGVDb25kaXRpb246IGhhc1R5cGVDb25kaXRpb24gPyB0aGlzLnBhcnNlTmFtZWRUeXBlKCkgOiB1bmRlZmluZWQsXG4gICAgICBkaXJlY3RpdmVzOiB0aGlzLnBhcnNlRGlyZWN0aXZlcyhmYWxzZSksXG4gICAgICBzZWxlY3Rpb25TZXQ6IHRoaXMucGFyc2VTZWxlY3Rpb25TZXQoKSxcbiAgICAgIGxvYzogdGhpcy5sb2Moc3RhcnQpXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogRnJhZ21lbnREZWZpbml0aW9uIDpcbiAgICogICAtIGZyYWdtZW50IEZyYWdtZW50TmFtZSBvbiBUeXBlQ29uZGl0aW9uIERpcmVjdGl2ZXM/IFNlbGVjdGlvblNldFxuICAgKlxuICAgKiBUeXBlQ29uZGl0aW9uIDogTmFtZWRUeXBlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBhcnNlRnJhZ21lbnREZWZpbml0aW9uID0gZnVuY3Rpb24gcGFyc2VGcmFnbWVudERlZmluaXRpb24oKSB7XG4gICAgdmFyIF90aGlzJF9vcHRpb25zO1xuXG4gICAgdmFyIHN0YXJ0ID0gdGhpcy5fbGV4ZXIudG9rZW47XG4gICAgdGhpcy5leHBlY3RLZXl3b3JkKCdmcmFnbWVudCcpOyAvLyBFeHBlcmltZW50YWwgc3VwcG9ydCBmb3IgZGVmaW5pbmcgdmFyaWFibGVzIHdpdGhpbiBmcmFnbWVudHMgY2hhbmdlc1xuICAgIC8vIHRoZSBncmFtbWFyIG9mIEZyYWdtZW50RGVmaW5pdGlvbjpcbiAgICAvLyAgIC0gZnJhZ21lbnQgRnJhZ21lbnROYW1lIFZhcmlhYmxlRGVmaW5pdGlvbnM/IG9uIFR5cGVDb25kaXRpb24gRGlyZWN0aXZlcz8gU2VsZWN0aW9uU2V0XG5cbiAgICBpZiAoKChfdGhpcyRfb3B0aW9ucyA9IHRoaXMuX29wdGlvbnMpID09PSBudWxsIHx8IF90aGlzJF9vcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdGhpcyRfb3B0aW9ucy5leHBlcmltZW50YWxGcmFnbWVudFZhcmlhYmxlcykgPT09IHRydWUpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGtpbmQ6IEtpbmQuRlJBR01FTlRfREVGSU5JVElPTixcbiAgICAgICAgbmFtZTogdGhpcy5wYXJzZUZyYWdtZW50TmFtZSgpLFxuICAgICAgICB2YXJpYWJsZURlZmluaXRpb25zOiB0aGlzLnBhcnNlVmFyaWFibGVEZWZpbml0aW9ucygpLFxuICAgICAgICB0eXBlQ29uZGl0aW9uOiAodGhpcy5leHBlY3RLZXl3b3JkKCdvbicpLCB0aGlzLnBhcnNlTmFtZWRUeXBlKCkpLFxuICAgICAgICBkaXJlY3RpdmVzOiB0aGlzLnBhcnNlRGlyZWN0aXZlcyhmYWxzZSksXG4gICAgICAgIHNlbGVjdGlvblNldDogdGhpcy5wYXJzZVNlbGVjdGlvblNldCgpLFxuICAgICAgICBsb2M6IHRoaXMubG9jKHN0YXJ0KVxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAga2luZDogS2luZC5GUkFHTUVOVF9ERUZJTklUSU9OLFxuICAgICAgbmFtZTogdGhpcy5wYXJzZUZyYWdtZW50TmFtZSgpLFxuICAgICAgdHlwZUNvbmRpdGlvbjogKHRoaXMuZXhwZWN0S2V5d29yZCgnb24nKSwgdGhpcy5wYXJzZU5hbWVkVHlwZSgpKSxcbiAgICAgIGRpcmVjdGl2ZXM6IHRoaXMucGFyc2VEaXJlY3RpdmVzKGZhbHNlKSxcbiAgICAgIHNlbGVjdGlvblNldDogdGhpcy5wYXJzZVNlbGVjdGlvblNldCgpLFxuICAgICAgbG9jOiB0aGlzLmxvYyhzdGFydClcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBGcmFnbWVudE5hbWUgOiBOYW1lIGJ1dCBub3QgYG9uYFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wYXJzZUZyYWdtZW50TmFtZSA9IGZ1bmN0aW9uIHBhcnNlRnJhZ21lbnROYW1lKCkge1xuICAgIGlmICh0aGlzLl9sZXhlci50b2tlbi52YWx1ZSA9PT0gJ29uJykge1xuICAgICAgdGhyb3cgdGhpcy51bmV4cGVjdGVkKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucGFyc2VOYW1lKCk7XG4gIH0gLy8gSW1wbGVtZW50cyB0aGUgcGFyc2luZyBydWxlcyBpbiB0aGUgVmFsdWVzIHNlY3Rpb24uXG5cbiAgLyoqXG4gICAqIFZhbHVlW0NvbnN0XSA6XG4gICAqICAgLSBbfkNvbnN0XSBWYXJpYWJsZVxuICAgKiAgIC0gSW50VmFsdWVcbiAgICogICAtIEZsb2F0VmFsdWVcbiAgICogICAtIFN0cmluZ1ZhbHVlXG4gICAqICAgLSBCb29sZWFuVmFsdWVcbiAgICogICAtIE51bGxWYWx1ZVxuICAgKiAgIC0gRW51bVZhbHVlXG4gICAqICAgLSBMaXN0VmFsdWVbP0NvbnN0XVxuICAgKiAgIC0gT2JqZWN0VmFsdWVbP0NvbnN0XVxuICAgKlxuICAgKiBCb29sZWFuVmFsdWUgOiBvbmUgb2YgYHRydWVgIGBmYWxzZWBcbiAgICpcbiAgICogTnVsbFZhbHVlIDogYG51bGxgXG4gICAqXG4gICAqIEVudW1WYWx1ZSA6IE5hbWUgYnV0IG5vdCBgdHJ1ZWAsIGBmYWxzZWAgb3IgYG51bGxgXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBhcnNlVmFsdWVMaXRlcmFsID0gZnVuY3Rpb24gcGFyc2VWYWx1ZUxpdGVyYWwoaXNDb25zdCkge1xuICAgIHZhciB0b2tlbiA9IHRoaXMuX2xleGVyLnRva2VuO1xuXG4gICAgc3dpdGNoICh0b2tlbi5raW5kKSB7XG4gICAgICBjYXNlIFRva2VuS2luZC5CUkFDS0VUX0w6XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlTGlzdChpc0NvbnN0KTtcblxuICAgICAgY2FzZSBUb2tlbktpbmQuQlJBQ0VfTDpcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VPYmplY3QoaXNDb25zdCk7XG5cbiAgICAgIGNhc2UgVG9rZW5LaW5kLklOVDpcbiAgICAgICAgdGhpcy5fbGV4ZXIuYWR2YW5jZSgpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAga2luZDogS2luZC5JTlQsXG4gICAgICAgICAgdmFsdWU6IHRva2VuLnZhbHVlLFxuICAgICAgICAgIGxvYzogdGhpcy5sb2ModG9rZW4pXG4gICAgICAgIH07XG5cbiAgICAgIGNhc2UgVG9rZW5LaW5kLkZMT0FUOlxuICAgICAgICB0aGlzLl9sZXhlci5hZHZhbmNlKCk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBraW5kOiBLaW5kLkZMT0FULFxuICAgICAgICAgIHZhbHVlOiB0b2tlbi52YWx1ZSxcbiAgICAgICAgICBsb2M6IHRoaXMubG9jKHRva2VuKVxuICAgICAgICB9O1xuXG4gICAgICBjYXNlIFRva2VuS2luZC5TVFJJTkc6XG4gICAgICBjYXNlIFRva2VuS2luZC5CTE9DS19TVFJJTkc6XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlU3RyaW5nTGl0ZXJhbCgpO1xuXG4gICAgICBjYXNlIFRva2VuS2luZC5OQU1FOlxuICAgICAgICB0aGlzLl9sZXhlci5hZHZhbmNlKCk7XG5cbiAgICAgICAgc3dpdGNoICh0b2tlbi52YWx1ZSkge1xuICAgICAgICAgIGNhc2UgJ3RydWUnOlxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAga2luZDogS2luZC5CT09MRUFOLFxuICAgICAgICAgICAgICB2YWx1ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgbG9jOiB0aGlzLmxvYyh0b2tlbilcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICBjYXNlICdmYWxzZSc6XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBraW5kOiBLaW5kLkJPT0xFQU4sXG4gICAgICAgICAgICAgIHZhbHVlOiBmYWxzZSxcbiAgICAgICAgICAgICAgbG9jOiB0aGlzLmxvYyh0b2tlbilcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICBjYXNlICdudWxsJzpcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIGtpbmQ6IEtpbmQuTlVMTCxcbiAgICAgICAgICAgICAgbG9jOiB0aGlzLmxvYyh0b2tlbilcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAga2luZDogS2luZC5FTlVNLFxuICAgICAgICAgICAgICB2YWx1ZTogdG9rZW4udmFsdWUsXG4gICAgICAgICAgICAgIGxvYzogdGhpcy5sb2ModG9rZW4pXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgIGNhc2UgVG9rZW5LaW5kLkRPTExBUjpcbiAgICAgICAgaWYgKCFpc0NvbnN0KSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VWYXJpYWJsZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgdGhyb3cgdGhpcy51bmV4cGVjdGVkKCk7XG4gIH07XG5cbiAgX3Byb3RvLnBhcnNlU3RyaW5nTGl0ZXJhbCA9IGZ1bmN0aW9uIHBhcnNlU3RyaW5nTGl0ZXJhbCgpIHtcbiAgICB2YXIgdG9rZW4gPSB0aGlzLl9sZXhlci50b2tlbjtcblxuICAgIHRoaXMuX2xleGVyLmFkdmFuY2UoKTtcblxuICAgIHJldHVybiB7XG4gICAgICBraW5kOiBLaW5kLlNUUklORyxcbiAgICAgIHZhbHVlOiB0b2tlbi52YWx1ZSxcbiAgICAgIGJsb2NrOiB0b2tlbi5raW5kID09PSBUb2tlbktpbmQuQkxPQ0tfU1RSSU5HLFxuICAgICAgbG9jOiB0aGlzLmxvYyh0b2tlbilcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBMaXN0VmFsdWVbQ29uc3RdIDpcbiAgICogICAtIFsgXVxuICAgKiAgIC0gWyBWYWx1ZVs/Q29uc3RdKyBdXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBhcnNlTGlzdCA9IGZ1bmN0aW9uIHBhcnNlTGlzdChpc0NvbnN0KSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBzdGFydCA9IHRoaXMuX2xleGVyLnRva2VuO1xuXG4gICAgdmFyIGl0ZW0gPSBmdW5jdGlvbiBpdGVtKCkge1xuICAgICAgcmV0dXJuIF90aGlzLnBhcnNlVmFsdWVMaXRlcmFsKGlzQ29uc3QpO1xuICAgIH07XG5cbiAgICByZXR1cm4ge1xuICAgICAga2luZDogS2luZC5MSVNULFxuICAgICAgdmFsdWVzOiB0aGlzLmFueShUb2tlbktpbmQuQlJBQ0tFVF9MLCBpdGVtLCBUb2tlbktpbmQuQlJBQ0tFVF9SKSxcbiAgICAgIGxvYzogdGhpcy5sb2Moc3RhcnQpXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogT2JqZWN0VmFsdWVbQ29uc3RdIDpcbiAgICogICAtIHsgfVxuICAgKiAgIC0geyBPYmplY3RGaWVsZFs/Q29uc3RdKyB9XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBhcnNlT2JqZWN0ID0gZnVuY3Rpb24gcGFyc2VPYmplY3QoaXNDb25zdCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIHN0YXJ0ID0gdGhpcy5fbGV4ZXIudG9rZW47XG5cbiAgICB2YXIgaXRlbSA9IGZ1bmN0aW9uIGl0ZW0oKSB7XG4gICAgICByZXR1cm4gX3RoaXMyLnBhcnNlT2JqZWN0RmllbGQoaXNDb25zdCk7XG4gICAgfTtcblxuICAgIHJldHVybiB7XG4gICAgICBraW5kOiBLaW5kLk9CSkVDVCxcbiAgICAgIGZpZWxkczogdGhpcy5hbnkoVG9rZW5LaW5kLkJSQUNFX0wsIGl0ZW0sIFRva2VuS2luZC5CUkFDRV9SKSxcbiAgICAgIGxvYzogdGhpcy5sb2Moc3RhcnQpXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogT2JqZWN0RmllbGRbQ29uc3RdIDogTmFtZSA6IFZhbHVlWz9Db25zdF1cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFyc2VPYmplY3RGaWVsZCA9IGZ1bmN0aW9uIHBhcnNlT2JqZWN0RmllbGQoaXNDb25zdCkge1xuICAgIHZhciBzdGFydCA9IHRoaXMuX2xleGVyLnRva2VuO1xuICAgIHZhciBuYW1lID0gdGhpcy5wYXJzZU5hbWUoKTtcbiAgICB0aGlzLmV4cGVjdFRva2VuKFRva2VuS2luZC5DT0xPTik7XG4gICAgcmV0dXJuIHtcbiAgICAgIGtpbmQ6IEtpbmQuT0JKRUNUX0ZJRUxELFxuICAgICAgbmFtZTogbmFtZSxcbiAgICAgIHZhbHVlOiB0aGlzLnBhcnNlVmFsdWVMaXRlcmFsKGlzQ29uc3QpLFxuICAgICAgbG9jOiB0aGlzLmxvYyhzdGFydClcbiAgICB9O1xuICB9IC8vIEltcGxlbWVudHMgdGhlIHBhcnNpbmcgcnVsZXMgaW4gdGhlIERpcmVjdGl2ZXMgc2VjdGlvbi5cblxuICAvKipcbiAgICogRGlyZWN0aXZlc1tDb25zdF0gOiBEaXJlY3RpdmVbP0NvbnN0XStcbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFyc2VEaXJlY3RpdmVzID0gZnVuY3Rpb24gcGFyc2VEaXJlY3RpdmVzKGlzQ29uc3QpIHtcbiAgICB2YXIgZGlyZWN0aXZlcyA9IFtdO1xuXG4gICAgd2hpbGUgKHRoaXMucGVlayhUb2tlbktpbmQuQVQpKSB7XG4gICAgICBkaXJlY3RpdmVzLnB1c2godGhpcy5wYXJzZURpcmVjdGl2ZShpc0NvbnN0KSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRpcmVjdGl2ZXM7XG4gIH1cbiAgLyoqXG4gICAqIERpcmVjdGl2ZVtDb25zdF0gOiBAIE5hbWUgQXJndW1lbnRzWz9Db25zdF0/XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBhcnNlRGlyZWN0aXZlID0gZnVuY3Rpb24gcGFyc2VEaXJlY3RpdmUoaXNDb25zdCkge1xuICAgIHZhciBzdGFydCA9IHRoaXMuX2xleGVyLnRva2VuO1xuICAgIHRoaXMuZXhwZWN0VG9rZW4oVG9rZW5LaW5kLkFUKTtcbiAgICByZXR1cm4ge1xuICAgICAga2luZDogS2luZC5ESVJFQ1RJVkUsXG4gICAgICBuYW1lOiB0aGlzLnBhcnNlTmFtZSgpLFxuICAgICAgYXJndW1lbnRzOiB0aGlzLnBhcnNlQXJndW1lbnRzKGlzQ29uc3QpLFxuICAgICAgbG9jOiB0aGlzLmxvYyhzdGFydClcbiAgICB9O1xuICB9IC8vIEltcGxlbWVudHMgdGhlIHBhcnNpbmcgcnVsZXMgaW4gdGhlIFR5cGVzIHNlY3Rpb24uXG5cbiAgLyoqXG4gICAqIFR5cGUgOlxuICAgKiAgIC0gTmFtZWRUeXBlXG4gICAqICAgLSBMaXN0VHlwZVxuICAgKiAgIC0gTm9uTnVsbFR5cGVcbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFyc2VUeXBlUmVmZXJlbmNlID0gZnVuY3Rpb24gcGFyc2VUeXBlUmVmZXJlbmNlKCkge1xuICAgIHZhciBzdGFydCA9IHRoaXMuX2xleGVyLnRva2VuO1xuICAgIHZhciB0eXBlO1xuXG4gICAgaWYgKHRoaXMuZXhwZWN0T3B0aW9uYWxUb2tlbihUb2tlbktpbmQuQlJBQ0tFVF9MKSkge1xuICAgICAgdHlwZSA9IHRoaXMucGFyc2VUeXBlUmVmZXJlbmNlKCk7XG4gICAgICB0aGlzLmV4cGVjdFRva2VuKFRva2VuS2luZC5CUkFDS0VUX1IpO1xuICAgICAgdHlwZSA9IHtcbiAgICAgICAga2luZDogS2luZC5MSVNUX1RZUEUsXG4gICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgIGxvYzogdGhpcy5sb2Moc3RhcnQpXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICB0eXBlID0gdGhpcy5wYXJzZU5hbWVkVHlwZSgpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmV4cGVjdE9wdGlvbmFsVG9rZW4oVG9rZW5LaW5kLkJBTkcpKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBraW5kOiBLaW5kLk5PTl9OVUxMX1RZUEUsXG4gICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgIGxvYzogdGhpcy5sb2Moc3RhcnQpXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB0eXBlO1xuICB9XG4gIC8qKlxuICAgKiBOYW1lZFR5cGUgOiBOYW1lXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBhcnNlTmFtZWRUeXBlID0gZnVuY3Rpb24gcGFyc2VOYW1lZFR5cGUoKSB7XG4gICAgdmFyIHN0YXJ0ID0gdGhpcy5fbGV4ZXIudG9rZW47XG4gICAgcmV0dXJuIHtcbiAgICAgIGtpbmQ6IEtpbmQuTkFNRURfVFlQRSxcbiAgICAgIG5hbWU6IHRoaXMucGFyc2VOYW1lKCksXG4gICAgICBsb2M6IHRoaXMubG9jKHN0YXJ0KVxuICAgIH07XG4gIH0gLy8gSW1wbGVtZW50cyB0aGUgcGFyc2luZyBydWxlcyBpbiB0aGUgVHlwZSBEZWZpbml0aW9uIHNlY3Rpb24uXG5cbiAgLyoqXG4gICAqIFR5cGVTeXN0ZW1EZWZpbml0aW9uIDpcbiAgICogICAtIFNjaGVtYURlZmluaXRpb25cbiAgICogICAtIFR5cGVEZWZpbml0aW9uXG4gICAqICAgLSBEaXJlY3RpdmVEZWZpbml0aW9uXG4gICAqXG4gICAqIFR5cGVEZWZpbml0aW9uIDpcbiAgICogICAtIFNjYWxhclR5cGVEZWZpbml0aW9uXG4gICAqICAgLSBPYmplY3RUeXBlRGVmaW5pdGlvblxuICAgKiAgIC0gSW50ZXJmYWNlVHlwZURlZmluaXRpb25cbiAgICogICAtIFVuaW9uVHlwZURlZmluaXRpb25cbiAgICogICAtIEVudW1UeXBlRGVmaW5pdGlvblxuICAgKiAgIC0gSW5wdXRPYmplY3RUeXBlRGVmaW5pdGlvblxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wYXJzZVR5cGVTeXN0ZW1EZWZpbml0aW9uID0gZnVuY3Rpb24gcGFyc2VUeXBlU3lzdGVtRGVmaW5pdGlvbigpIHtcbiAgICAvLyBNYW55IGRlZmluaXRpb25zIGJlZ2luIHdpdGggYSBkZXNjcmlwdGlvbiBhbmQgcmVxdWlyZSBhIGxvb2thaGVhZC5cbiAgICB2YXIga2V5d29yZFRva2VuID0gdGhpcy5wZWVrRGVzY3JpcHRpb24oKSA/IHRoaXMuX2xleGVyLmxvb2thaGVhZCgpIDogdGhpcy5fbGV4ZXIudG9rZW47XG5cbiAgICBpZiAoa2V5d29yZFRva2VuLmtpbmQgPT09IFRva2VuS2luZC5OQU1FKSB7XG4gICAgICBzd2l0Y2ggKGtleXdvcmRUb2tlbi52YWx1ZSkge1xuICAgICAgICBjYXNlICdzY2hlbWEnOlxuICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlU2NoZW1hRGVmaW5pdGlvbigpO1xuXG4gICAgICAgIGNhc2UgJ3NjYWxhcic6XG4gICAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VTY2FsYXJUeXBlRGVmaW5pdGlvbigpO1xuXG4gICAgICAgIGNhc2UgJ3R5cGUnOlxuICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlT2JqZWN0VHlwZURlZmluaXRpb24oKTtcblxuICAgICAgICBjYXNlICdpbnRlcmZhY2UnOlxuICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlSW50ZXJmYWNlVHlwZURlZmluaXRpb24oKTtcblxuICAgICAgICBjYXNlICd1bmlvbic6XG4gICAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VVbmlvblR5cGVEZWZpbml0aW9uKCk7XG5cbiAgICAgICAgY2FzZSAnZW51bSc6XG4gICAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VFbnVtVHlwZURlZmluaXRpb24oKTtcblxuICAgICAgICBjYXNlICdpbnB1dCc6XG4gICAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VJbnB1dE9iamVjdFR5cGVEZWZpbml0aW9uKCk7XG5cbiAgICAgICAgY2FzZSAnZGlyZWN0aXZlJzpcbiAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZURpcmVjdGl2ZURlZmluaXRpb24oKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aHJvdyB0aGlzLnVuZXhwZWN0ZWQoa2V5d29yZFRva2VuKTtcbiAgfTtcblxuICBfcHJvdG8ucGVla0Rlc2NyaXB0aW9uID0gZnVuY3Rpb24gcGVla0Rlc2NyaXB0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnBlZWsoVG9rZW5LaW5kLlNUUklORykgfHwgdGhpcy5wZWVrKFRva2VuS2luZC5CTE9DS19TVFJJTkcpO1xuICB9XG4gIC8qKlxuICAgKiBEZXNjcmlwdGlvbiA6IFN0cmluZ1ZhbHVlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBhcnNlRGVzY3JpcHRpb24gPSBmdW5jdGlvbiBwYXJzZURlc2NyaXB0aW9uKCkge1xuICAgIGlmICh0aGlzLnBlZWtEZXNjcmlwdGlvbigpKSB7XG4gICAgICByZXR1cm4gdGhpcy5wYXJzZVN0cmluZ0xpdGVyYWwoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFNjaGVtYURlZmluaXRpb24gOiBEZXNjcmlwdGlvbj8gc2NoZW1hIERpcmVjdGl2ZXNbQ29uc3RdPyB7IE9wZXJhdGlvblR5cGVEZWZpbml0aW9uKyB9XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBhcnNlU2NoZW1hRGVmaW5pdGlvbiA9IGZ1bmN0aW9uIHBhcnNlU2NoZW1hRGVmaW5pdGlvbigpIHtcbiAgICB2YXIgc3RhcnQgPSB0aGlzLl9sZXhlci50b2tlbjtcbiAgICB2YXIgZGVzY3JpcHRpb24gPSB0aGlzLnBhcnNlRGVzY3JpcHRpb24oKTtcbiAgICB0aGlzLmV4cGVjdEtleXdvcmQoJ3NjaGVtYScpO1xuICAgIHZhciBkaXJlY3RpdmVzID0gdGhpcy5wYXJzZURpcmVjdGl2ZXModHJ1ZSk7XG4gICAgdmFyIG9wZXJhdGlvblR5cGVzID0gdGhpcy5tYW55KFRva2VuS2luZC5CUkFDRV9MLCB0aGlzLnBhcnNlT3BlcmF0aW9uVHlwZURlZmluaXRpb24sIFRva2VuS2luZC5CUkFDRV9SKTtcbiAgICByZXR1cm4ge1xuICAgICAga2luZDogS2luZC5TQ0hFTUFfREVGSU5JVElPTixcbiAgICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbixcbiAgICAgIGRpcmVjdGl2ZXM6IGRpcmVjdGl2ZXMsXG4gICAgICBvcGVyYXRpb25UeXBlczogb3BlcmF0aW9uVHlwZXMsXG4gICAgICBsb2M6IHRoaXMubG9jKHN0YXJ0KVxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIE9wZXJhdGlvblR5cGVEZWZpbml0aW9uIDogT3BlcmF0aW9uVHlwZSA6IE5hbWVkVHlwZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wYXJzZU9wZXJhdGlvblR5cGVEZWZpbml0aW9uID0gZnVuY3Rpb24gcGFyc2VPcGVyYXRpb25UeXBlRGVmaW5pdGlvbigpIHtcbiAgICB2YXIgc3RhcnQgPSB0aGlzLl9sZXhlci50b2tlbjtcbiAgICB2YXIgb3BlcmF0aW9uID0gdGhpcy5wYXJzZU9wZXJhdGlvblR5cGUoKTtcbiAgICB0aGlzLmV4cGVjdFRva2VuKFRva2VuS2luZC5DT0xPTik7XG4gICAgdmFyIHR5cGUgPSB0aGlzLnBhcnNlTmFtZWRUeXBlKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGtpbmQ6IEtpbmQuT1BFUkFUSU9OX1RZUEVfREVGSU5JVElPTixcbiAgICAgIG9wZXJhdGlvbjogb3BlcmF0aW9uLFxuICAgICAgdHlwZTogdHlwZSxcbiAgICAgIGxvYzogdGhpcy5sb2Moc3RhcnQpXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogU2NhbGFyVHlwZURlZmluaXRpb24gOiBEZXNjcmlwdGlvbj8gc2NhbGFyIE5hbWUgRGlyZWN0aXZlc1tDb25zdF0/XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBhcnNlU2NhbGFyVHlwZURlZmluaXRpb24gPSBmdW5jdGlvbiBwYXJzZVNjYWxhclR5cGVEZWZpbml0aW9uKCkge1xuICAgIHZhciBzdGFydCA9IHRoaXMuX2xleGVyLnRva2VuO1xuICAgIHZhciBkZXNjcmlwdGlvbiA9IHRoaXMucGFyc2VEZXNjcmlwdGlvbigpO1xuICAgIHRoaXMuZXhwZWN0S2V5d29yZCgnc2NhbGFyJyk7XG4gICAgdmFyIG5hbWUgPSB0aGlzLnBhcnNlTmFtZSgpO1xuICAgIHZhciBkaXJlY3RpdmVzID0gdGhpcy5wYXJzZURpcmVjdGl2ZXModHJ1ZSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGtpbmQ6IEtpbmQuU0NBTEFSX1RZUEVfREVGSU5JVElPTixcbiAgICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbixcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICBkaXJlY3RpdmVzOiBkaXJlY3RpdmVzLFxuICAgICAgbG9jOiB0aGlzLmxvYyhzdGFydClcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBPYmplY3RUeXBlRGVmaW5pdGlvbiA6XG4gICAqICAgRGVzY3JpcHRpb24/XG4gICAqICAgdHlwZSBOYW1lIEltcGxlbWVudHNJbnRlcmZhY2VzPyBEaXJlY3RpdmVzW0NvbnN0XT8gRmllbGRzRGVmaW5pdGlvbj9cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFyc2VPYmplY3RUeXBlRGVmaW5pdGlvbiA9IGZ1bmN0aW9uIHBhcnNlT2JqZWN0VHlwZURlZmluaXRpb24oKSB7XG4gICAgdmFyIHN0YXJ0ID0gdGhpcy5fbGV4ZXIudG9rZW47XG4gICAgdmFyIGRlc2NyaXB0aW9uID0gdGhpcy5wYXJzZURlc2NyaXB0aW9uKCk7XG4gICAgdGhpcy5leHBlY3RLZXl3b3JkKCd0eXBlJyk7XG4gICAgdmFyIG5hbWUgPSB0aGlzLnBhcnNlTmFtZSgpO1xuICAgIHZhciBpbnRlcmZhY2VzID0gdGhpcy5wYXJzZUltcGxlbWVudHNJbnRlcmZhY2VzKCk7XG4gICAgdmFyIGRpcmVjdGl2ZXMgPSB0aGlzLnBhcnNlRGlyZWN0aXZlcyh0cnVlKTtcbiAgICB2YXIgZmllbGRzID0gdGhpcy5wYXJzZUZpZWxkc0RlZmluaXRpb24oKTtcbiAgICByZXR1cm4ge1xuICAgICAga2luZDogS2luZC5PQkpFQ1RfVFlQRV9ERUZJTklUSU9OLFxuICAgICAgZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uLFxuICAgICAgbmFtZTogbmFtZSxcbiAgICAgIGludGVyZmFjZXM6IGludGVyZmFjZXMsXG4gICAgICBkaXJlY3RpdmVzOiBkaXJlY3RpdmVzLFxuICAgICAgZmllbGRzOiBmaWVsZHMsXG4gICAgICBsb2M6IHRoaXMubG9jKHN0YXJ0KVxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIEltcGxlbWVudHNJbnRlcmZhY2VzIDpcbiAgICogICAtIGltcGxlbWVudHMgYCZgPyBOYW1lZFR5cGVcbiAgICogICAtIEltcGxlbWVudHNJbnRlcmZhY2VzICYgTmFtZWRUeXBlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBhcnNlSW1wbGVtZW50c0ludGVyZmFjZXMgPSBmdW5jdGlvbiBwYXJzZUltcGxlbWVudHNJbnRlcmZhY2VzKCkge1xuICAgIHZhciBfdGhpcyRfb3B0aW9uczI7XG5cbiAgICBpZiAoIXRoaXMuZXhwZWN0T3B0aW9uYWxLZXl3b3JkKCdpbXBsZW1lbnRzJykpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICBpZiAoKChfdGhpcyRfb3B0aW9uczIgPSB0aGlzLl9vcHRpb25zKSA9PT0gbnVsbCB8fCBfdGhpcyRfb3B0aW9uczIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF90aGlzJF9vcHRpb25zMi5hbGxvd0xlZ2FjeVNETEltcGxlbWVudHNJbnRlcmZhY2VzKSA9PT0gdHJ1ZSkge1xuICAgICAgdmFyIHR5cGVzID0gW107IC8vIE9wdGlvbmFsIGxlYWRpbmcgYW1wZXJzYW5kXG5cbiAgICAgIHRoaXMuZXhwZWN0T3B0aW9uYWxUb2tlbihUb2tlbktpbmQuQU1QKTtcblxuICAgICAgZG8ge1xuICAgICAgICB0eXBlcy5wdXNoKHRoaXMucGFyc2VOYW1lZFR5cGUoKSk7XG4gICAgICB9IHdoaWxlICh0aGlzLmV4cGVjdE9wdGlvbmFsVG9rZW4oVG9rZW5LaW5kLkFNUCkgfHwgdGhpcy5wZWVrKFRva2VuS2luZC5OQU1FKSk7XG5cbiAgICAgIHJldHVybiB0eXBlcztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5kZWxpbWl0ZWRNYW55KFRva2VuS2luZC5BTVAsIHRoaXMucGFyc2VOYW1lZFR5cGUpO1xuICB9XG4gIC8qKlxuICAgKiBGaWVsZHNEZWZpbml0aW9uIDogeyBGaWVsZERlZmluaXRpb24rIH1cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFyc2VGaWVsZHNEZWZpbml0aW9uID0gZnVuY3Rpb24gcGFyc2VGaWVsZHNEZWZpbml0aW9uKCkge1xuICAgIHZhciBfdGhpcyRfb3B0aW9uczM7XG5cbiAgICAvLyBMZWdhY3kgc3VwcG9ydCBmb3IgdGhlIFNETD9cbiAgICBpZiAoKChfdGhpcyRfb3B0aW9uczMgPSB0aGlzLl9vcHRpb25zKSA9PT0gbnVsbCB8fCBfdGhpcyRfb3B0aW9uczMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF90aGlzJF9vcHRpb25zMy5hbGxvd0xlZ2FjeVNETEVtcHR5RmllbGRzKSA9PT0gdHJ1ZSAmJiB0aGlzLnBlZWsoVG9rZW5LaW5kLkJSQUNFX0wpICYmIHRoaXMuX2xleGVyLmxvb2thaGVhZCgpLmtpbmQgPT09IFRva2VuS2luZC5CUkFDRV9SKSB7XG4gICAgICB0aGlzLl9sZXhlci5hZHZhbmNlKCk7XG5cbiAgICAgIHRoaXMuX2xleGVyLmFkdmFuY2UoKTtcblxuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLm9wdGlvbmFsTWFueShUb2tlbktpbmQuQlJBQ0VfTCwgdGhpcy5wYXJzZUZpZWxkRGVmaW5pdGlvbiwgVG9rZW5LaW5kLkJSQUNFX1IpO1xuICB9XG4gIC8qKlxuICAgKiBGaWVsZERlZmluaXRpb24gOlxuICAgKiAgIC0gRGVzY3JpcHRpb24/IE5hbWUgQXJndW1lbnRzRGVmaW5pdGlvbj8gOiBUeXBlIERpcmVjdGl2ZXNbQ29uc3RdP1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wYXJzZUZpZWxkRGVmaW5pdGlvbiA9IGZ1bmN0aW9uIHBhcnNlRmllbGREZWZpbml0aW9uKCkge1xuICAgIHZhciBzdGFydCA9IHRoaXMuX2xleGVyLnRva2VuO1xuICAgIHZhciBkZXNjcmlwdGlvbiA9IHRoaXMucGFyc2VEZXNjcmlwdGlvbigpO1xuICAgIHZhciBuYW1lID0gdGhpcy5wYXJzZU5hbWUoKTtcbiAgICB2YXIgYXJncyA9IHRoaXMucGFyc2VBcmd1bWVudERlZnMoKTtcbiAgICB0aGlzLmV4cGVjdFRva2VuKFRva2VuS2luZC5DT0xPTik7XG4gICAgdmFyIHR5cGUgPSB0aGlzLnBhcnNlVHlwZVJlZmVyZW5jZSgpO1xuICAgIHZhciBkaXJlY3RpdmVzID0gdGhpcy5wYXJzZURpcmVjdGl2ZXModHJ1ZSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGtpbmQ6IEtpbmQuRklFTERfREVGSU5JVElPTixcbiAgICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbixcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICBhcmd1bWVudHM6IGFyZ3MsXG4gICAgICB0eXBlOiB0eXBlLFxuICAgICAgZGlyZWN0aXZlczogZGlyZWN0aXZlcyxcbiAgICAgIGxvYzogdGhpcy5sb2Moc3RhcnQpXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogQXJndW1lbnRzRGVmaW5pdGlvbiA6ICggSW5wdXRWYWx1ZURlZmluaXRpb24rIClcbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFyc2VBcmd1bWVudERlZnMgPSBmdW5jdGlvbiBwYXJzZUFyZ3VtZW50RGVmcygpIHtcbiAgICByZXR1cm4gdGhpcy5vcHRpb25hbE1hbnkoVG9rZW5LaW5kLlBBUkVOX0wsIHRoaXMucGFyc2VJbnB1dFZhbHVlRGVmLCBUb2tlbktpbmQuUEFSRU5fUik7XG4gIH1cbiAgLyoqXG4gICAqIElucHV0VmFsdWVEZWZpbml0aW9uIDpcbiAgICogICAtIERlc2NyaXB0aW9uPyBOYW1lIDogVHlwZSBEZWZhdWx0VmFsdWU/IERpcmVjdGl2ZXNbQ29uc3RdP1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wYXJzZUlucHV0VmFsdWVEZWYgPSBmdW5jdGlvbiBwYXJzZUlucHV0VmFsdWVEZWYoKSB7XG4gICAgdmFyIHN0YXJ0ID0gdGhpcy5fbGV4ZXIudG9rZW47XG4gICAgdmFyIGRlc2NyaXB0aW9uID0gdGhpcy5wYXJzZURlc2NyaXB0aW9uKCk7XG4gICAgdmFyIG5hbWUgPSB0aGlzLnBhcnNlTmFtZSgpO1xuICAgIHRoaXMuZXhwZWN0VG9rZW4oVG9rZW5LaW5kLkNPTE9OKTtcbiAgICB2YXIgdHlwZSA9IHRoaXMucGFyc2VUeXBlUmVmZXJlbmNlKCk7XG4gICAgdmFyIGRlZmF1bHRWYWx1ZTtcblxuICAgIGlmICh0aGlzLmV4cGVjdE9wdGlvbmFsVG9rZW4oVG9rZW5LaW5kLkVRVUFMUykpIHtcbiAgICAgIGRlZmF1bHRWYWx1ZSA9IHRoaXMucGFyc2VWYWx1ZUxpdGVyYWwodHJ1ZSk7XG4gICAgfVxuXG4gICAgdmFyIGRpcmVjdGl2ZXMgPSB0aGlzLnBhcnNlRGlyZWN0aXZlcyh0cnVlKTtcbiAgICByZXR1cm4ge1xuICAgICAga2luZDogS2luZC5JTlBVVF9WQUxVRV9ERUZJTklUSU9OLFxuICAgICAgZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uLFxuICAgICAgbmFtZTogbmFtZSxcbiAgICAgIHR5cGU6IHR5cGUsXG4gICAgICBkZWZhdWx0VmFsdWU6IGRlZmF1bHRWYWx1ZSxcbiAgICAgIGRpcmVjdGl2ZXM6IGRpcmVjdGl2ZXMsXG4gICAgICBsb2M6IHRoaXMubG9jKHN0YXJ0KVxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIEludGVyZmFjZVR5cGVEZWZpbml0aW9uIDpcbiAgICogICAtIERlc2NyaXB0aW9uPyBpbnRlcmZhY2UgTmFtZSBEaXJlY3RpdmVzW0NvbnN0XT8gRmllbGRzRGVmaW5pdGlvbj9cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFyc2VJbnRlcmZhY2VUeXBlRGVmaW5pdGlvbiA9IGZ1bmN0aW9uIHBhcnNlSW50ZXJmYWNlVHlwZURlZmluaXRpb24oKSB7XG4gICAgdmFyIHN0YXJ0ID0gdGhpcy5fbGV4ZXIudG9rZW47XG4gICAgdmFyIGRlc2NyaXB0aW9uID0gdGhpcy5wYXJzZURlc2NyaXB0aW9uKCk7XG4gICAgdGhpcy5leHBlY3RLZXl3b3JkKCdpbnRlcmZhY2UnKTtcbiAgICB2YXIgbmFtZSA9IHRoaXMucGFyc2VOYW1lKCk7XG4gICAgdmFyIGludGVyZmFjZXMgPSB0aGlzLnBhcnNlSW1wbGVtZW50c0ludGVyZmFjZXMoKTtcbiAgICB2YXIgZGlyZWN0aXZlcyA9IHRoaXMucGFyc2VEaXJlY3RpdmVzKHRydWUpO1xuICAgIHZhciBmaWVsZHMgPSB0aGlzLnBhcnNlRmllbGRzRGVmaW5pdGlvbigpO1xuICAgIHJldHVybiB7XG4gICAgICBraW5kOiBLaW5kLklOVEVSRkFDRV9UWVBFX0RFRklOSVRJT04sXG4gICAgICBkZXNjcmlwdGlvbjogZGVzY3JpcHRpb24sXG4gICAgICBuYW1lOiBuYW1lLFxuICAgICAgaW50ZXJmYWNlczogaW50ZXJmYWNlcyxcbiAgICAgIGRpcmVjdGl2ZXM6IGRpcmVjdGl2ZXMsXG4gICAgICBmaWVsZHM6IGZpZWxkcyxcbiAgICAgIGxvYzogdGhpcy5sb2Moc3RhcnQpXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogVW5pb25UeXBlRGVmaW5pdGlvbiA6XG4gICAqICAgLSBEZXNjcmlwdGlvbj8gdW5pb24gTmFtZSBEaXJlY3RpdmVzW0NvbnN0XT8gVW5pb25NZW1iZXJUeXBlcz9cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFyc2VVbmlvblR5cGVEZWZpbml0aW9uID0gZnVuY3Rpb24gcGFyc2VVbmlvblR5cGVEZWZpbml0aW9uKCkge1xuICAgIHZhciBzdGFydCA9IHRoaXMuX2xleGVyLnRva2VuO1xuICAgIHZhciBkZXNjcmlwdGlvbiA9IHRoaXMucGFyc2VEZXNjcmlwdGlvbigpO1xuICAgIHRoaXMuZXhwZWN0S2V5d29yZCgndW5pb24nKTtcbiAgICB2YXIgbmFtZSA9IHRoaXMucGFyc2VOYW1lKCk7XG4gICAgdmFyIGRpcmVjdGl2ZXMgPSB0aGlzLnBhcnNlRGlyZWN0aXZlcyh0cnVlKTtcbiAgICB2YXIgdHlwZXMgPSB0aGlzLnBhcnNlVW5pb25NZW1iZXJUeXBlcygpO1xuICAgIHJldHVybiB7XG4gICAgICBraW5kOiBLaW5kLlVOSU9OX1RZUEVfREVGSU5JVElPTixcbiAgICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbixcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICBkaXJlY3RpdmVzOiBkaXJlY3RpdmVzLFxuICAgICAgdHlwZXM6IHR5cGVzLFxuICAgICAgbG9jOiB0aGlzLmxvYyhzdGFydClcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBVbmlvbk1lbWJlclR5cGVzIDpcbiAgICogICAtID0gYHxgPyBOYW1lZFR5cGVcbiAgICogICAtIFVuaW9uTWVtYmVyVHlwZXMgfCBOYW1lZFR5cGVcbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFyc2VVbmlvbk1lbWJlclR5cGVzID0gZnVuY3Rpb24gcGFyc2VVbmlvbk1lbWJlclR5cGVzKCkge1xuICAgIHJldHVybiB0aGlzLmV4cGVjdE9wdGlvbmFsVG9rZW4oVG9rZW5LaW5kLkVRVUFMUykgPyB0aGlzLmRlbGltaXRlZE1hbnkoVG9rZW5LaW5kLlBJUEUsIHRoaXMucGFyc2VOYW1lZFR5cGUpIDogW107XG4gIH1cbiAgLyoqXG4gICAqIEVudW1UeXBlRGVmaW5pdGlvbiA6XG4gICAqICAgLSBEZXNjcmlwdGlvbj8gZW51bSBOYW1lIERpcmVjdGl2ZXNbQ29uc3RdPyBFbnVtVmFsdWVzRGVmaW5pdGlvbj9cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFyc2VFbnVtVHlwZURlZmluaXRpb24gPSBmdW5jdGlvbiBwYXJzZUVudW1UeXBlRGVmaW5pdGlvbigpIHtcbiAgICB2YXIgc3RhcnQgPSB0aGlzLl9sZXhlci50b2tlbjtcbiAgICB2YXIgZGVzY3JpcHRpb24gPSB0aGlzLnBhcnNlRGVzY3JpcHRpb24oKTtcbiAgICB0aGlzLmV4cGVjdEtleXdvcmQoJ2VudW0nKTtcbiAgICB2YXIgbmFtZSA9IHRoaXMucGFyc2VOYW1lKCk7XG4gICAgdmFyIGRpcmVjdGl2ZXMgPSB0aGlzLnBhcnNlRGlyZWN0aXZlcyh0cnVlKTtcbiAgICB2YXIgdmFsdWVzID0gdGhpcy5wYXJzZUVudW1WYWx1ZXNEZWZpbml0aW9uKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGtpbmQ6IEtpbmQuRU5VTV9UWVBFX0RFRklOSVRJT04sXG4gICAgICBkZXNjcmlwdGlvbjogZGVzY3JpcHRpb24sXG4gICAgICBuYW1lOiBuYW1lLFxuICAgICAgZGlyZWN0aXZlczogZGlyZWN0aXZlcyxcbiAgICAgIHZhbHVlczogdmFsdWVzLFxuICAgICAgbG9jOiB0aGlzLmxvYyhzdGFydClcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBFbnVtVmFsdWVzRGVmaW5pdGlvbiA6IHsgRW51bVZhbHVlRGVmaW5pdGlvbisgfVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wYXJzZUVudW1WYWx1ZXNEZWZpbml0aW9uID0gZnVuY3Rpb24gcGFyc2VFbnVtVmFsdWVzRGVmaW5pdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5vcHRpb25hbE1hbnkoVG9rZW5LaW5kLkJSQUNFX0wsIHRoaXMucGFyc2VFbnVtVmFsdWVEZWZpbml0aW9uLCBUb2tlbktpbmQuQlJBQ0VfUik7XG4gIH1cbiAgLyoqXG4gICAqIEVudW1WYWx1ZURlZmluaXRpb24gOiBEZXNjcmlwdGlvbj8gRW51bVZhbHVlIERpcmVjdGl2ZXNbQ29uc3RdP1xuICAgKlxuICAgKiBFbnVtVmFsdWUgOiBOYW1lXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBhcnNlRW51bVZhbHVlRGVmaW5pdGlvbiA9IGZ1bmN0aW9uIHBhcnNlRW51bVZhbHVlRGVmaW5pdGlvbigpIHtcbiAgICB2YXIgc3RhcnQgPSB0aGlzLl9sZXhlci50b2tlbjtcbiAgICB2YXIgZGVzY3JpcHRpb24gPSB0aGlzLnBhcnNlRGVzY3JpcHRpb24oKTtcbiAgICB2YXIgbmFtZSA9IHRoaXMucGFyc2VOYW1lKCk7XG4gICAgdmFyIGRpcmVjdGl2ZXMgPSB0aGlzLnBhcnNlRGlyZWN0aXZlcyh0cnVlKTtcbiAgICByZXR1cm4ge1xuICAgICAga2luZDogS2luZC5FTlVNX1ZBTFVFX0RFRklOSVRJT04sXG4gICAgICBkZXNjcmlwdGlvbjogZGVzY3JpcHRpb24sXG4gICAgICBuYW1lOiBuYW1lLFxuICAgICAgZGlyZWN0aXZlczogZGlyZWN0aXZlcyxcbiAgICAgIGxvYzogdGhpcy5sb2Moc3RhcnQpXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogSW5wdXRPYmplY3RUeXBlRGVmaW5pdGlvbiA6XG4gICAqICAgLSBEZXNjcmlwdGlvbj8gaW5wdXQgTmFtZSBEaXJlY3RpdmVzW0NvbnN0XT8gSW5wdXRGaWVsZHNEZWZpbml0aW9uP1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wYXJzZUlucHV0T2JqZWN0VHlwZURlZmluaXRpb24gPSBmdW5jdGlvbiBwYXJzZUlucHV0T2JqZWN0VHlwZURlZmluaXRpb24oKSB7XG4gICAgdmFyIHN0YXJ0ID0gdGhpcy5fbGV4ZXIudG9rZW47XG4gICAgdmFyIGRlc2NyaXB0aW9uID0gdGhpcy5wYXJzZURlc2NyaXB0aW9uKCk7XG4gICAgdGhpcy5leHBlY3RLZXl3b3JkKCdpbnB1dCcpO1xuICAgIHZhciBuYW1lID0gdGhpcy5wYXJzZU5hbWUoKTtcbiAgICB2YXIgZGlyZWN0aXZlcyA9IHRoaXMucGFyc2VEaXJlY3RpdmVzKHRydWUpO1xuICAgIHZhciBmaWVsZHMgPSB0aGlzLnBhcnNlSW5wdXRGaWVsZHNEZWZpbml0aW9uKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGtpbmQ6IEtpbmQuSU5QVVRfT0JKRUNUX1RZUEVfREVGSU5JVElPTixcbiAgICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbixcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICBkaXJlY3RpdmVzOiBkaXJlY3RpdmVzLFxuICAgICAgZmllbGRzOiBmaWVsZHMsXG4gICAgICBsb2M6IHRoaXMubG9jKHN0YXJ0KVxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIElucHV0RmllbGRzRGVmaW5pdGlvbiA6IHsgSW5wdXRWYWx1ZURlZmluaXRpb24rIH1cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFyc2VJbnB1dEZpZWxkc0RlZmluaXRpb24gPSBmdW5jdGlvbiBwYXJzZUlucHV0RmllbGRzRGVmaW5pdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5vcHRpb25hbE1hbnkoVG9rZW5LaW5kLkJSQUNFX0wsIHRoaXMucGFyc2VJbnB1dFZhbHVlRGVmLCBUb2tlbktpbmQuQlJBQ0VfUik7XG4gIH1cbiAgLyoqXG4gICAqIFR5cGVTeXN0ZW1FeHRlbnNpb24gOlxuICAgKiAgIC0gU2NoZW1hRXh0ZW5zaW9uXG4gICAqICAgLSBUeXBlRXh0ZW5zaW9uXG4gICAqXG4gICAqIFR5cGVFeHRlbnNpb24gOlxuICAgKiAgIC0gU2NhbGFyVHlwZUV4dGVuc2lvblxuICAgKiAgIC0gT2JqZWN0VHlwZUV4dGVuc2lvblxuICAgKiAgIC0gSW50ZXJmYWNlVHlwZUV4dGVuc2lvblxuICAgKiAgIC0gVW5pb25UeXBlRXh0ZW5zaW9uXG4gICAqICAgLSBFbnVtVHlwZUV4dGVuc2lvblxuICAgKiAgIC0gSW5wdXRPYmplY3RUeXBlRGVmaW5pdGlvblxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wYXJzZVR5cGVTeXN0ZW1FeHRlbnNpb24gPSBmdW5jdGlvbiBwYXJzZVR5cGVTeXN0ZW1FeHRlbnNpb24oKSB7XG4gICAgdmFyIGtleXdvcmRUb2tlbiA9IHRoaXMuX2xleGVyLmxvb2thaGVhZCgpO1xuXG4gICAgaWYgKGtleXdvcmRUb2tlbi5raW5kID09PSBUb2tlbktpbmQuTkFNRSkge1xuICAgICAgc3dpdGNoIChrZXl3b3JkVG9rZW4udmFsdWUpIHtcbiAgICAgICAgY2FzZSAnc2NoZW1hJzpcbiAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZVNjaGVtYUV4dGVuc2lvbigpO1xuXG4gICAgICAgIGNhc2UgJ3NjYWxhcic6XG4gICAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VTY2FsYXJUeXBlRXh0ZW5zaW9uKCk7XG5cbiAgICAgICAgY2FzZSAndHlwZSc6XG4gICAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VPYmplY3RUeXBlRXh0ZW5zaW9uKCk7XG5cbiAgICAgICAgY2FzZSAnaW50ZXJmYWNlJzpcbiAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZUludGVyZmFjZVR5cGVFeHRlbnNpb24oKTtcblxuICAgICAgICBjYXNlICd1bmlvbic6XG4gICAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VVbmlvblR5cGVFeHRlbnNpb24oKTtcblxuICAgICAgICBjYXNlICdlbnVtJzpcbiAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZUVudW1UeXBlRXh0ZW5zaW9uKCk7XG5cbiAgICAgICAgY2FzZSAnaW5wdXQnOlxuICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlSW5wdXRPYmplY3RUeXBlRXh0ZW5zaW9uKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhyb3cgdGhpcy51bmV4cGVjdGVkKGtleXdvcmRUb2tlbik7XG4gIH1cbiAgLyoqXG4gICAqIFNjaGVtYUV4dGVuc2lvbiA6XG4gICAqICAtIGV4dGVuZCBzY2hlbWEgRGlyZWN0aXZlc1tDb25zdF0/IHsgT3BlcmF0aW9uVHlwZURlZmluaXRpb24rIH1cbiAgICogIC0gZXh0ZW5kIHNjaGVtYSBEaXJlY3RpdmVzW0NvbnN0XVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wYXJzZVNjaGVtYUV4dGVuc2lvbiA9IGZ1bmN0aW9uIHBhcnNlU2NoZW1hRXh0ZW5zaW9uKCkge1xuICAgIHZhciBzdGFydCA9IHRoaXMuX2xleGVyLnRva2VuO1xuICAgIHRoaXMuZXhwZWN0S2V5d29yZCgnZXh0ZW5kJyk7XG4gICAgdGhpcy5leHBlY3RLZXl3b3JkKCdzY2hlbWEnKTtcbiAgICB2YXIgZGlyZWN0aXZlcyA9IHRoaXMucGFyc2VEaXJlY3RpdmVzKHRydWUpO1xuICAgIHZhciBvcGVyYXRpb25UeXBlcyA9IHRoaXMub3B0aW9uYWxNYW55KFRva2VuS2luZC5CUkFDRV9MLCB0aGlzLnBhcnNlT3BlcmF0aW9uVHlwZURlZmluaXRpb24sIFRva2VuS2luZC5CUkFDRV9SKTtcblxuICAgIGlmIChkaXJlY3RpdmVzLmxlbmd0aCA9PT0gMCAmJiBvcGVyYXRpb25UeXBlcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRocm93IHRoaXMudW5leHBlY3RlZCgpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBraW5kOiBLaW5kLlNDSEVNQV9FWFRFTlNJT04sXG4gICAgICBkaXJlY3RpdmVzOiBkaXJlY3RpdmVzLFxuICAgICAgb3BlcmF0aW9uVHlwZXM6IG9wZXJhdGlvblR5cGVzLFxuICAgICAgbG9jOiB0aGlzLmxvYyhzdGFydClcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBTY2FsYXJUeXBlRXh0ZW5zaW9uIDpcbiAgICogICAtIGV4dGVuZCBzY2FsYXIgTmFtZSBEaXJlY3RpdmVzW0NvbnN0XVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wYXJzZVNjYWxhclR5cGVFeHRlbnNpb24gPSBmdW5jdGlvbiBwYXJzZVNjYWxhclR5cGVFeHRlbnNpb24oKSB7XG4gICAgdmFyIHN0YXJ0ID0gdGhpcy5fbGV4ZXIudG9rZW47XG4gICAgdGhpcy5leHBlY3RLZXl3b3JkKCdleHRlbmQnKTtcbiAgICB0aGlzLmV4cGVjdEtleXdvcmQoJ3NjYWxhcicpO1xuICAgIHZhciBuYW1lID0gdGhpcy5wYXJzZU5hbWUoKTtcbiAgICB2YXIgZGlyZWN0aXZlcyA9IHRoaXMucGFyc2VEaXJlY3RpdmVzKHRydWUpO1xuXG4gICAgaWYgKGRpcmVjdGl2ZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aHJvdyB0aGlzLnVuZXhwZWN0ZWQoKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAga2luZDogS2luZC5TQ0FMQVJfVFlQRV9FWFRFTlNJT04sXG4gICAgICBuYW1lOiBuYW1lLFxuICAgICAgZGlyZWN0aXZlczogZGlyZWN0aXZlcyxcbiAgICAgIGxvYzogdGhpcy5sb2Moc3RhcnQpXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogT2JqZWN0VHlwZUV4dGVuc2lvbiA6XG4gICAqICAtIGV4dGVuZCB0eXBlIE5hbWUgSW1wbGVtZW50c0ludGVyZmFjZXM/IERpcmVjdGl2ZXNbQ29uc3RdPyBGaWVsZHNEZWZpbml0aW9uXG4gICAqICAtIGV4dGVuZCB0eXBlIE5hbWUgSW1wbGVtZW50c0ludGVyZmFjZXM/IERpcmVjdGl2ZXNbQ29uc3RdXG4gICAqICAtIGV4dGVuZCB0eXBlIE5hbWUgSW1wbGVtZW50c0ludGVyZmFjZXNcbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFyc2VPYmplY3RUeXBlRXh0ZW5zaW9uID0gZnVuY3Rpb24gcGFyc2VPYmplY3RUeXBlRXh0ZW5zaW9uKCkge1xuICAgIHZhciBzdGFydCA9IHRoaXMuX2xleGVyLnRva2VuO1xuICAgIHRoaXMuZXhwZWN0S2V5d29yZCgnZXh0ZW5kJyk7XG4gICAgdGhpcy5leHBlY3RLZXl3b3JkKCd0eXBlJyk7XG4gICAgdmFyIG5hbWUgPSB0aGlzLnBhcnNlTmFtZSgpO1xuICAgIHZhciBpbnRlcmZhY2VzID0gdGhpcy5wYXJzZUltcGxlbWVudHNJbnRlcmZhY2VzKCk7XG4gICAgdmFyIGRpcmVjdGl2ZXMgPSB0aGlzLnBhcnNlRGlyZWN0aXZlcyh0cnVlKTtcbiAgICB2YXIgZmllbGRzID0gdGhpcy5wYXJzZUZpZWxkc0RlZmluaXRpb24oKTtcblxuICAgIGlmIChpbnRlcmZhY2VzLmxlbmd0aCA9PT0gMCAmJiBkaXJlY3RpdmVzLmxlbmd0aCA9PT0gMCAmJiBmaWVsZHMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aHJvdyB0aGlzLnVuZXhwZWN0ZWQoKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAga2luZDogS2luZC5PQkpFQ1RfVFlQRV9FWFRFTlNJT04sXG4gICAgICBuYW1lOiBuYW1lLFxuICAgICAgaW50ZXJmYWNlczogaW50ZXJmYWNlcyxcbiAgICAgIGRpcmVjdGl2ZXM6IGRpcmVjdGl2ZXMsXG4gICAgICBmaWVsZHM6IGZpZWxkcyxcbiAgICAgIGxvYzogdGhpcy5sb2Moc3RhcnQpXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogSW50ZXJmYWNlVHlwZUV4dGVuc2lvbiA6XG4gICAqICAtIGV4dGVuZCBpbnRlcmZhY2UgTmFtZSBJbXBsZW1lbnRzSW50ZXJmYWNlcz8gRGlyZWN0aXZlc1tDb25zdF0/IEZpZWxkc0RlZmluaXRpb25cbiAgICogIC0gZXh0ZW5kIGludGVyZmFjZSBOYW1lIEltcGxlbWVudHNJbnRlcmZhY2VzPyBEaXJlY3RpdmVzW0NvbnN0XVxuICAgKiAgLSBleHRlbmQgaW50ZXJmYWNlIE5hbWUgSW1wbGVtZW50c0ludGVyZmFjZXNcbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFyc2VJbnRlcmZhY2VUeXBlRXh0ZW5zaW9uID0gZnVuY3Rpb24gcGFyc2VJbnRlcmZhY2VUeXBlRXh0ZW5zaW9uKCkge1xuICAgIHZhciBzdGFydCA9IHRoaXMuX2xleGVyLnRva2VuO1xuICAgIHRoaXMuZXhwZWN0S2V5d29yZCgnZXh0ZW5kJyk7XG4gICAgdGhpcy5leHBlY3RLZXl3b3JkKCdpbnRlcmZhY2UnKTtcbiAgICB2YXIgbmFtZSA9IHRoaXMucGFyc2VOYW1lKCk7XG4gICAgdmFyIGludGVyZmFjZXMgPSB0aGlzLnBhcnNlSW1wbGVtZW50c0ludGVyZmFjZXMoKTtcbiAgICB2YXIgZGlyZWN0aXZlcyA9IHRoaXMucGFyc2VEaXJlY3RpdmVzKHRydWUpO1xuICAgIHZhciBmaWVsZHMgPSB0aGlzLnBhcnNlRmllbGRzRGVmaW5pdGlvbigpO1xuXG4gICAgaWYgKGludGVyZmFjZXMubGVuZ3RoID09PSAwICYmIGRpcmVjdGl2ZXMubGVuZ3RoID09PSAwICYmIGZpZWxkcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRocm93IHRoaXMudW5leHBlY3RlZCgpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBraW5kOiBLaW5kLklOVEVSRkFDRV9UWVBFX0VYVEVOU0lPTixcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICBpbnRlcmZhY2VzOiBpbnRlcmZhY2VzLFxuICAgICAgZGlyZWN0aXZlczogZGlyZWN0aXZlcyxcbiAgICAgIGZpZWxkczogZmllbGRzLFxuICAgICAgbG9jOiB0aGlzLmxvYyhzdGFydClcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBVbmlvblR5cGVFeHRlbnNpb24gOlxuICAgKiAgIC0gZXh0ZW5kIHVuaW9uIE5hbWUgRGlyZWN0aXZlc1tDb25zdF0/IFVuaW9uTWVtYmVyVHlwZXNcbiAgICogICAtIGV4dGVuZCB1bmlvbiBOYW1lIERpcmVjdGl2ZXNbQ29uc3RdXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBhcnNlVW5pb25UeXBlRXh0ZW5zaW9uID0gZnVuY3Rpb24gcGFyc2VVbmlvblR5cGVFeHRlbnNpb24oKSB7XG4gICAgdmFyIHN0YXJ0ID0gdGhpcy5fbGV4ZXIudG9rZW47XG4gICAgdGhpcy5leHBlY3RLZXl3b3JkKCdleHRlbmQnKTtcbiAgICB0aGlzLmV4cGVjdEtleXdvcmQoJ3VuaW9uJyk7XG4gICAgdmFyIG5hbWUgPSB0aGlzLnBhcnNlTmFtZSgpO1xuICAgIHZhciBkaXJlY3RpdmVzID0gdGhpcy5wYXJzZURpcmVjdGl2ZXModHJ1ZSk7XG4gICAgdmFyIHR5cGVzID0gdGhpcy5wYXJzZVVuaW9uTWVtYmVyVHlwZXMoKTtcblxuICAgIGlmIChkaXJlY3RpdmVzLmxlbmd0aCA9PT0gMCAmJiB0eXBlcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRocm93IHRoaXMudW5leHBlY3RlZCgpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBraW5kOiBLaW5kLlVOSU9OX1RZUEVfRVhURU5TSU9OLFxuICAgICAgbmFtZTogbmFtZSxcbiAgICAgIGRpcmVjdGl2ZXM6IGRpcmVjdGl2ZXMsXG4gICAgICB0eXBlczogdHlwZXMsXG4gICAgICBsb2M6IHRoaXMubG9jKHN0YXJ0KVxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIEVudW1UeXBlRXh0ZW5zaW9uIDpcbiAgICogICAtIGV4dGVuZCBlbnVtIE5hbWUgRGlyZWN0aXZlc1tDb25zdF0/IEVudW1WYWx1ZXNEZWZpbml0aW9uXG4gICAqICAgLSBleHRlbmQgZW51bSBOYW1lIERpcmVjdGl2ZXNbQ29uc3RdXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBhcnNlRW51bVR5cGVFeHRlbnNpb24gPSBmdW5jdGlvbiBwYXJzZUVudW1UeXBlRXh0ZW5zaW9uKCkge1xuICAgIHZhciBzdGFydCA9IHRoaXMuX2xleGVyLnRva2VuO1xuICAgIHRoaXMuZXhwZWN0S2V5d29yZCgnZXh0ZW5kJyk7XG4gICAgdGhpcy5leHBlY3RLZXl3b3JkKCdlbnVtJyk7XG4gICAgdmFyIG5hbWUgPSB0aGlzLnBhcnNlTmFtZSgpO1xuICAgIHZhciBkaXJlY3RpdmVzID0gdGhpcy5wYXJzZURpcmVjdGl2ZXModHJ1ZSk7XG4gICAgdmFyIHZhbHVlcyA9IHRoaXMucGFyc2VFbnVtVmFsdWVzRGVmaW5pdGlvbigpO1xuXG4gICAgaWYgKGRpcmVjdGl2ZXMubGVuZ3RoID09PSAwICYmIHZhbHVlcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRocm93IHRoaXMudW5leHBlY3RlZCgpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBraW5kOiBLaW5kLkVOVU1fVFlQRV9FWFRFTlNJT04sXG4gICAgICBuYW1lOiBuYW1lLFxuICAgICAgZGlyZWN0aXZlczogZGlyZWN0aXZlcyxcbiAgICAgIHZhbHVlczogdmFsdWVzLFxuICAgICAgbG9jOiB0aGlzLmxvYyhzdGFydClcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBJbnB1dE9iamVjdFR5cGVFeHRlbnNpb24gOlxuICAgKiAgIC0gZXh0ZW5kIGlucHV0IE5hbWUgRGlyZWN0aXZlc1tDb25zdF0/IElucHV0RmllbGRzRGVmaW5pdGlvblxuICAgKiAgIC0gZXh0ZW5kIGlucHV0IE5hbWUgRGlyZWN0aXZlc1tDb25zdF1cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFyc2VJbnB1dE9iamVjdFR5cGVFeHRlbnNpb24gPSBmdW5jdGlvbiBwYXJzZUlucHV0T2JqZWN0VHlwZUV4dGVuc2lvbigpIHtcbiAgICB2YXIgc3RhcnQgPSB0aGlzLl9sZXhlci50b2tlbjtcbiAgICB0aGlzLmV4cGVjdEtleXdvcmQoJ2V4dGVuZCcpO1xuICAgIHRoaXMuZXhwZWN0S2V5d29yZCgnaW5wdXQnKTtcbiAgICB2YXIgbmFtZSA9IHRoaXMucGFyc2VOYW1lKCk7XG4gICAgdmFyIGRpcmVjdGl2ZXMgPSB0aGlzLnBhcnNlRGlyZWN0aXZlcyh0cnVlKTtcbiAgICB2YXIgZmllbGRzID0gdGhpcy5wYXJzZUlucHV0RmllbGRzRGVmaW5pdGlvbigpO1xuXG4gICAgaWYgKGRpcmVjdGl2ZXMubGVuZ3RoID09PSAwICYmIGZpZWxkcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRocm93IHRoaXMudW5leHBlY3RlZCgpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBraW5kOiBLaW5kLklOUFVUX09CSkVDVF9UWVBFX0VYVEVOU0lPTixcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICBkaXJlY3RpdmVzOiBkaXJlY3RpdmVzLFxuICAgICAgZmllbGRzOiBmaWVsZHMsXG4gICAgICBsb2M6IHRoaXMubG9jKHN0YXJ0KVxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIERpcmVjdGl2ZURlZmluaXRpb24gOlxuICAgKiAgIC0gRGVzY3JpcHRpb24/IGRpcmVjdGl2ZSBAIE5hbWUgQXJndW1lbnRzRGVmaW5pdGlvbj8gYHJlcGVhdGFibGVgPyBvbiBEaXJlY3RpdmVMb2NhdGlvbnNcbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFyc2VEaXJlY3RpdmVEZWZpbml0aW9uID0gZnVuY3Rpb24gcGFyc2VEaXJlY3RpdmVEZWZpbml0aW9uKCkge1xuICAgIHZhciBzdGFydCA9IHRoaXMuX2xleGVyLnRva2VuO1xuICAgIHZhciBkZXNjcmlwdGlvbiA9IHRoaXMucGFyc2VEZXNjcmlwdGlvbigpO1xuICAgIHRoaXMuZXhwZWN0S2V5d29yZCgnZGlyZWN0aXZlJyk7XG4gICAgdGhpcy5leHBlY3RUb2tlbihUb2tlbktpbmQuQVQpO1xuICAgIHZhciBuYW1lID0gdGhpcy5wYXJzZU5hbWUoKTtcbiAgICB2YXIgYXJncyA9IHRoaXMucGFyc2VBcmd1bWVudERlZnMoKTtcbiAgICB2YXIgcmVwZWF0YWJsZSA9IHRoaXMuZXhwZWN0T3B0aW9uYWxLZXl3b3JkKCdyZXBlYXRhYmxlJyk7XG4gICAgdGhpcy5leHBlY3RLZXl3b3JkKCdvbicpO1xuICAgIHZhciBsb2NhdGlvbnMgPSB0aGlzLnBhcnNlRGlyZWN0aXZlTG9jYXRpb25zKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGtpbmQ6IEtpbmQuRElSRUNUSVZFX0RFRklOSVRJT04sXG4gICAgICBkZXNjcmlwdGlvbjogZGVzY3JpcHRpb24sXG4gICAgICBuYW1lOiBuYW1lLFxuICAgICAgYXJndW1lbnRzOiBhcmdzLFxuICAgICAgcmVwZWF0YWJsZTogcmVwZWF0YWJsZSxcbiAgICAgIGxvY2F0aW9uczogbG9jYXRpb25zLFxuICAgICAgbG9jOiB0aGlzLmxvYyhzdGFydClcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBEaXJlY3RpdmVMb2NhdGlvbnMgOlxuICAgKiAgIC0gYHxgPyBEaXJlY3RpdmVMb2NhdGlvblxuICAgKiAgIC0gRGlyZWN0aXZlTG9jYXRpb25zIHwgRGlyZWN0aXZlTG9jYXRpb25cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFyc2VEaXJlY3RpdmVMb2NhdGlvbnMgPSBmdW5jdGlvbiBwYXJzZURpcmVjdGl2ZUxvY2F0aW9ucygpIHtcbiAgICByZXR1cm4gdGhpcy5kZWxpbWl0ZWRNYW55KFRva2VuS2luZC5QSVBFLCB0aGlzLnBhcnNlRGlyZWN0aXZlTG9jYXRpb24pO1xuICB9XG4gIC8qXG4gICAqIERpcmVjdGl2ZUxvY2F0aW9uIDpcbiAgICogICAtIEV4ZWN1dGFibGVEaXJlY3RpdmVMb2NhdGlvblxuICAgKiAgIC0gVHlwZVN5c3RlbURpcmVjdGl2ZUxvY2F0aW9uXG4gICAqXG4gICAqIEV4ZWN1dGFibGVEaXJlY3RpdmVMb2NhdGlvbiA6IG9uZSBvZlxuICAgKiAgIGBRVUVSWWBcbiAgICogICBgTVVUQVRJT05gXG4gICAqICAgYFNVQlNDUklQVElPTmBcbiAgICogICBgRklFTERgXG4gICAqICAgYEZSQUdNRU5UX0RFRklOSVRJT05gXG4gICAqICAgYEZSQUdNRU5UX1NQUkVBRGBcbiAgICogICBgSU5MSU5FX0ZSQUdNRU5UYFxuICAgKlxuICAgKiBUeXBlU3lzdGVtRGlyZWN0aXZlTG9jYXRpb24gOiBvbmUgb2ZcbiAgICogICBgU0NIRU1BYFxuICAgKiAgIGBTQ0FMQVJgXG4gICAqICAgYE9CSkVDVGBcbiAgICogICBgRklFTERfREVGSU5JVElPTmBcbiAgICogICBgQVJHVU1FTlRfREVGSU5JVElPTmBcbiAgICogICBgSU5URVJGQUNFYFxuICAgKiAgIGBVTklPTmBcbiAgICogICBgRU5VTWBcbiAgICogICBgRU5VTV9WQUxVRWBcbiAgICogICBgSU5QVVRfT0JKRUNUYFxuICAgKiAgIGBJTlBVVF9GSUVMRF9ERUZJTklUSU9OYFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wYXJzZURpcmVjdGl2ZUxvY2F0aW9uID0gZnVuY3Rpb24gcGFyc2VEaXJlY3RpdmVMb2NhdGlvbigpIHtcbiAgICB2YXIgc3RhcnQgPSB0aGlzLl9sZXhlci50b2tlbjtcbiAgICB2YXIgbmFtZSA9IHRoaXMucGFyc2VOYW1lKCk7XG5cbiAgICBpZiAoRGlyZWN0aXZlTG9jYXRpb25bbmFtZS52YWx1ZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIG5hbWU7XG4gICAgfVxuXG4gICAgdGhyb3cgdGhpcy51bmV4cGVjdGVkKHN0YXJ0KTtcbiAgfSAvLyBDb3JlIHBhcnNpbmcgdXRpbGl0eSBmdW5jdGlvbnNcblxuICAvKipcbiAgICogUmV0dXJucyBhIGxvY2F0aW9uIG9iamVjdCwgdXNlZCB0byBpZGVudGlmeSB0aGUgcGxhY2UgaW4gdGhlIHNvdXJjZSB0aGF0IGNyZWF0ZWQgYSBnaXZlbiBwYXJzZWQgb2JqZWN0LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5sb2MgPSBmdW5jdGlvbiBsb2Moc3RhcnRUb2tlbikge1xuICAgIHZhciBfdGhpcyRfb3B0aW9uczQ7XG5cbiAgICBpZiAoKChfdGhpcyRfb3B0aW9uczQgPSB0aGlzLl9vcHRpb25zKSA9PT0gbnVsbCB8fCBfdGhpcyRfb3B0aW9uczQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF90aGlzJF9vcHRpb25zNC5ub0xvY2F0aW9uKSAhPT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuIG5ldyBMb2NhdGlvbihzdGFydFRva2VuLCB0aGlzLl9sZXhlci5sYXN0VG9rZW4sIHRoaXMuX2xleGVyLnNvdXJjZSk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIGlmIHRoZSBuZXh0IHRva2VuIGlzIG9mIGEgZ2l2ZW4ga2luZFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wZWVrID0gZnVuY3Rpb24gcGVlayhraW5kKSB7XG4gICAgcmV0dXJuIHRoaXMuX2xleGVyLnRva2VuLmtpbmQgPT09IGtpbmQ7XG4gIH1cbiAgLyoqXG4gICAqIElmIHRoZSBuZXh0IHRva2VuIGlzIG9mIHRoZSBnaXZlbiBraW5kLCByZXR1cm4gdGhhdCB0b2tlbiBhZnRlciBhZHZhbmNpbmcgdGhlIGxleGVyLlxuICAgKiBPdGhlcndpc2UsIGRvIG5vdCBjaGFuZ2UgdGhlIHBhcnNlciBzdGF0ZSBhbmQgdGhyb3cgYW4gZXJyb3IuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmV4cGVjdFRva2VuID0gZnVuY3Rpb24gZXhwZWN0VG9rZW4oa2luZCkge1xuICAgIHZhciB0b2tlbiA9IHRoaXMuX2xleGVyLnRva2VuO1xuXG4gICAgaWYgKHRva2VuLmtpbmQgPT09IGtpbmQpIHtcbiAgICAgIHRoaXMuX2xleGVyLmFkdmFuY2UoKTtcblxuICAgICAgcmV0dXJuIHRva2VuO1xuICAgIH1cblxuICAgIHRocm93IHN5bnRheEVycm9yKHRoaXMuX2xleGVyLnNvdXJjZSwgdG9rZW4uc3RhcnQsIFwiRXhwZWN0ZWQgXCIuY29uY2F0KGdldFRva2VuS2luZERlc2Moa2luZCksIFwiLCBmb3VuZCBcIikuY29uY2F0KGdldFRva2VuRGVzYyh0b2tlbiksIFwiLlwiKSk7XG4gIH1cbiAgLyoqXG4gICAqIElmIHRoZSBuZXh0IHRva2VuIGlzIG9mIHRoZSBnaXZlbiBraW5kLCByZXR1cm4gdGhhdCB0b2tlbiBhZnRlciBhZHZhbmNpbmcgdGhlIGxleGVyLlxuICAgKiBPdGhlcndpc2UsIGRvIG5vdCBjaGFuZ2UgdGhlIHBhcnNlciBzdGF0ZSBhbmQgcmV0dXJuIHVuZGVmaW5lZC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZXhwZWN0T3B0aW9uYWxUb2tlbiA9IGZ1bmN0aW9uIGV4cGVjdE9wdGlvbmFsVG9rZW4oa2luZCkge1xuICAgIHZhciB0b2tlbiA9IHRoaXMuX2xleGVyLnRva2VuO1xuXG4gICAgaWYgKHRva2VuLmtpbmQgPT09IGtpbmQpIHtcbiAgICAgIHRoaXMuX2xleGVyLmFkdmFuY2UoKTtcblxuICAgICAgcmV0dXJuIHRva2VuO1xuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbiAgLyoqXG4gICAqIElmIHRoZSBuZXh0IHRva2VuIGlzIGEgZ2l2ZW4ga2V5d29yZCwgYWR2YW5jZSB0aGUgbGV4ZXIuXG4gICAqIE90aGVyd2lzZSwgZG8gbm90IGNoYW5nZSB0aGUgcGFyc2VyIHN0YXRlIGFuZCB0aHJvdyBhbiBlcnJvci5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZXhwZWN0S2V5d29yZCA9IGZ1bmN0aW9uIGV4cGVjdEtleXdvcmQodmFsdWUpIHtcbiAgICB2YXIgdG9rZW4gPSB0aGlzLl9sZXhlci50b2tlbjtcblxuICAgIGlmICh0b2tlbi5raW5kID09PSBUb2tlbktpbmQuTkFNRSAmJiB0b2tlbi52YWx1ZSA9PT0gdmFsdWUpIHtcbiAgICAgIHRoaXMuX2xleGVyLmFkdmFuY2UoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgc3ludGF4RXJyb3IodGhpcy5fbGV4ZXIuc291cmNlLCB0b2tlbi5zdGFydCwgXCJFeHBlY3RlZCBcXFwiXCIuY29uY2F0KHZhbHVlLCBcIlxcXCIsIGZvdW5kIFwiKS5jb25jYXQoZ2V0VG9rZW5EZXNjKHRva2VuKSwgXCIuXCIpKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIElmIHRoZSBuZXh0IHRva2VuIGlzIGEgZ2l2ZW4ga2V5d29yZCwgcmV0dXJuIFwidHJ1ZVwiIGFmdGVyIGFkdmFuY2luZyB0aGUgbGV4ZXIuXG4gICAqIE90aGVyd2lzZSwgZG8gbm90IGNoYW5nZSB0aGUgcGFyc2VyIHN0YXRlIGFuZCByZXR1cm4gXCJmYWxzZVwiLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5leHBlY3RPcHRpb25hbEtleXdvcmQgPSBmdW5jdGlvbiBleHBlY3RPcHRpb25hbEtleXdvcmQodmFsdWUpIHtcbiAgICB2YXIgdG9rZW4gPSB0aGlzLl9sZXhlci50b2tlbjtcblxuICAgIGlmICh0b2tlbi5raW5kID09PSBUb2tlbktpbmQuTkFNRSAmJiB0b2tlbi52YWx1ZSA9PT0gdmFsdWUpIHtcbiAgICAgIHRoaXMuX2xleGVyLmFkdmFuY2UoKTtcblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8qKlxuICAgKiBIZWxwZXIgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIGFuIGVycm9yIHdoZW4gYW4gdW5leHBlY3RlZCBsZXhlZCB0b2tlbiBpcyBlbmNvdW50ZXJlZC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udW5leHBlY3RlZCA9IGZ1bmN0aW9uIHVuZXhwZWN0ZWQoYXRUb2tlbikge1xuICAgIHZhciB0b2tlbiA9IGF0VG9rZW4gIT09IG51bGwgJiYgYXRUb2tlbiAhPT0gdm9pZCAwID8gYXRUb2tlbiA6IHRoaXMuX2xleGVyLnRva2VuO1xuICAgIHJldHVybiBzeW50YXhFcnJvcih0aGlzLl9sZXhlci5zb3VyY2UsIHRva2VuLnN0YXJ0LCBcIlVuZXhwZWN0ZWQgXCIuY29uY2F0KGdldFRva2VuRGVzYyh0b2tlbiksIFwiLlwiKSk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYSBwb3NzaWJseSBlbXB0eSBsaXN0IG9mIHBhcnNlIG5vZGVzLCBkZXRlcm1pbmVkIGJ5IHRoZSBwYXJzZUZuLlxuICAgKiBUaGlzIGxpc3QgYmVnaW5zIHdpdGggYSBsZXggdG9rZW4gb2Ygb3BlbktpbmQgYW5kIGVuZHMgd2l0aCBhIGxleCB0b2tlbiBvZiBjbG9zZUtpbmQuXG4gICAqIEFkdmFuY2VzIHRoZSBwYXJzZXIgdG8gdGhlIG5leHQgbGV4IHRva2VuIGFmdGVyIHRoZSBjbG9zaW5nIHRva2VuLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5hbnkgPSBmdW5jdGlvbiBhbnkob3BlbktpbmQsIHBhcnNlRm4sIGNsb3NlS2luZCkge1xuICAgIHRoaXMuZXhwZWN0VG9rZW4ob3BlbktpbmQpO1xuICAgIHZhciBub2RlcyA9IFtdO1xuXG4gICAgd2hpbGUgKCF0aGlzLmV4cGVjdE9wdGlvbmFsVG9rZW4oY2xvc2VLaW5kKSkge1xuICAgICAgbm9kZXMucHVzaChwYXJzZUZuLmNhbGwodGhpcykpO1xuICAgIH1cblxuICAgIHJldHVybiBub2RlcztcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhIGxpc3Qgb2YgcGFyc2Ugbm9kZXMsIGRldGVybWluZWQgYnkgdGhlIHBhcnNlRm4uXG4gICAqIEl0IGNhbiBiZSBlbXB0eSBvbmx5IGlmIG9wZW4gdG9rZW4gaXMgbWlzc2luZyBvdGhlcndpc2UgaXQgd2lsbCBhbHdheXMgcmV0dXJuIG5vbi1lbXB0eSBsaXN0XG4gICAqIHRoYXQgYmVnaW5zIHdpdGggYSBsZXggdG9rZW4gb2Ygb3BlbktpbmQgYW5kIGVuZHMgd2l0aCBhIGxleCB0b2tlbiBvZiBjbG9zZUtpbmQuXG4gICAqIEFkdmFuY2VzIHRoZSBwYXJzZXIgdG8gdGhlIG5leHQgbGV4IHRva2VuIGFmdGVyIHRoZSBjbG9zaW5nIHRva2VuLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5vcHRpb25hbE1hbnkgPSBmdW5jdGlvbiBvcHRpb25hbE1hbnkob3BlbktpbmQsIHBhcnNlRm4sIGNsb3NlS2luZCkge1xuICAgIGlmICh0aGlzLmV4cGVjdE9wdGlvbmFsVG9rZW4ob3BlbktpbmQpKSB7XG4gICAgICB2YXIgbm9kZXMgPSBbXTtcblxuICAgICAgZG8ge1xuICAgICAgICBub2Rlcy5wdXNoKHBhcnNlRm4uY2FsbCh0aGlzKSk7XG4gICAgICB9IHdoaWxlICghdGhpcy5leHBlY3RPcHRpb25hbFRva2VuKGNsb3NlS2luZCkpO1xuXG4gICAgICByZXR1cm4gbm9kZXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbm9uLWVtcHR5IGxpc3Qgb2YgcGFyc2Ugbm9kZXMsIGRldGVybWluZWQgYnkgdGhlIHBhcnNlRm4uXG4gICAqIFRoaXMgbGlzdCBiZWdpbnMgd2l0aCBhIGxleCB0b2tlbiBvZiBvcGVuS2luZCBhbmQgZW5kcyB3aXRoIGEgbGV4IHRva2VuIG9mIGNsb3NlS2luZC5cbiAgICogQWR2YW5jZXMgdGhlIHBhcnNlciB0byB0aGUgbmV4dCBsZXggdG9rZW4gYWZ0ZXIgdGhlIGNsb3NpbmcgdG9rZW4uXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLm1hbnkgPSBmdW5jdGlvbiBtYW55KG9wZW5LaW5kLCBwYXJzZUZuLCBjbG9zZUtpbmQpIHtcbiAgICB0aGlzLmV4cGVjdFRva2VuKG9wZW5LaW5kKTtcbiAgICB2YXIgbm9kZXMgPSBbXTtcblxuICAgIGRvIHtcbiAgICAgIG5vZGVzLnB1c2gocGFyc2VGbi5jYWxsKHRoaXMpKTtcbiAgICB9IHdoaWxlICghdGhpcy5leHBlY3RPcHRpb25hbFRva2VuKGNsb3NlS2luZCkpO1xuXG4gICAgcmV0dXJuIG5vZGVzO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbm9uLWVtcHR5IGxpc3Qgb2YgcGFyc2Ugbm9kZXMsIGRldGVybWluZWQgYnkgdGhlIHBhcnNlRm4uXG4gICAqIFRoaXMgbGlzdCBtYXkgYmVnaW4gd2l0aCBhIGxleCB0b2tlbiBvZiBkZWxpbWl0ZXJLaW5kIGZvbGxvd2VkIGJ5IGl0ZW1zIHNlcGFyYXRlZCBieSBsZXggdG9rZW5zIG9mIHRva2VuS2luZC5cbiAgICogQWR2YW5jZXMgdGhlIHBhcnNlciB0byB0aGUgbmV4dCBsZXggdG9rZW4gYWZ0ZXIgbGFzdCBpdGVtIGluIHRoZSBsaXN0LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5kZWxpbWl0ZWRNYW55ID0gZnVuY3Rpb24gZGVsaW1pdGVkTWFueShkZWxpbWl0ZXJLaW5kLCBwYXJzZUZuKSB7XG4gICAgdGhpcy5leHBlY3RPcHRpb25hbFRva2VuKGRlbGltaXRlcktpbmQpO1xuICAgIHZhciBub2RlcyA9IFtdO1xuXG4gICAgZG8ge1xuICAgICAgbm9kZXMucHVzaChwYXJzZUZuLmNhbGwodGhpcykpO1xuICAgIH0gd2hpbGUgKHRoaXMuZXhwZWN0T3B0aW9uYWxUb2tlbihkZWxpbWl0ZXJLaW5kKSk7XG5cbiAgICByZXR1cm4gbm9kZXM7XG4gIH07XG5cbiAgcmV0dXJuIFBhcnNlcjtcbn0oKTtcbi8qKlxuICogQSBoZWxwZXIgZnVuY3Rpb24gdG8gZGVzY3JpYmUgYSB0b2tlbiBhcyBhIHN0cmluZyBmb3IgZGVidWdnaW5nLlxuICovXG5cbmZ1bmN0aW9uIGdldFRva2VuRGVzYyh0b2tlbikge1xuICB2YXIgdmFsdWUgPSB0b2tlbi52YWx1ZTtcbiAgcmV0dXJuIGdldFRva2VuS2luZERlc2ModG9rZW4ua2luZCkgKyAodmFsdWUgIT0gbnVsbCA/IFwiIFxcXCJcIi5jb25jYXQodmFsdWUsIFwiXFxcIlwiKSA6ICcnKTtcbn1cbi8qKlxuICogQSBoZWxwZXIgZnVuY3Rpb24gdG8gZGVzY3JpYmUgYSB0b2tlbiBraW5kIGFzIGEgc3RyaW5nIGZvciBkZWJ1Z2dpbmcuXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRUb2tlbktpbmREZXNjKGtpbmQpIHtcbiAgcmV0dXJuIGlzUHVuY3R1YXRvclRva2VuS2luZChraW5kKSA/IFwiXFxcIlwiLmNvbmNhdChraW5kLCBcIlxcXCJcIikgOiBraW5kO1xufVxuIiwiaW1wb3J0IHsgS2luZCB9IGZyb20gXCIuL2tpbmRzLm1qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIGlzRGVmaW5pdGlvbk5vZGUobm9kZSkge1xuICByZXR1cm4gaXNFeGVjdXRhYmxlRGVmaW5pdGlvbk5vZGUobm9kZSkgfHwgaXNUeXBlU3lzdGVtRGVmaW5pdGlvbk5vZGUobm9kZSkgfHwgaXNUeXBlU3lzdGVtRXh0ZW5zaW9uTm9kZShub2RlKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0V4ZWN1dGFibGVEZWZpbml0aW9uTm9kZShub2RlKSB7XG4gIHJldHVybiBub2RlLmtpbmQgPT09IEtpbmQuT1BFUkFUSU9OX0RFRklOSVRJT04gfHwgbm9kZS5raW5kID09PSBLaW5kLkZSQUdNRU5UX0RFRklOSVRJT047XG59XG5leHBvcnQgZnVuY3Rpb24gaXNTZWxlY3Rpb25Ob2RlKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUua2luZCA9PT0gS2luZC5GSUVMRCB8fCBub2RlLmtpbmQgPT09IEtpbmQuRlJBR01FTlRfU1BSRUFEIHx8IG5vZGUua2luZCA9PT0gS2luZC5JTkxJTkVfRlJBR01FTlQ7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNWYWx1ZU5vZGUobm9kZSkge1xuICByZXR1cm4gbm9kZS5raW5kID09PSBLaW5kLlZBUklBQkxFIHx8IG5vZGUua2luZCA9PT0gS2luZC5JTlQgfHwgbm9kZS5raW5kID09PSBLaW5kLkZMT0FUIHx8IG5vZGUua2luZCA9PT0gS2luZC5TVFJJTkcgfHwgbm9kZS5raW5kID09PSBLaW5kLkJPT0xFQU4gfHwgbm9kZS5raW5kID09PSBLaW5kLk5VTEwgfHwgbm9kZS5raW5kID09PSBLaW5kLkVOVU0gfHwgbm9kZS5raW5kID09PSBLaW5kLkxJU1QgfHwgbm9kZS5raW5kID09PSBLaW5kLk9CSkVDVDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1R5cGVOb2RlKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUua2luZCA9PT0gS2luZC5OQU1FRF9UWVBFIHx8IG5vZGUua2luZCA9PT0gS2luZC5MSVNUX1RZUEUgfHwgbm9kZS5raW5kID09PSBLaW5kLk5PTl9OVUxMX1RZUEU7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNUeXBlU3lzdGVtRGVmaW5pdGlvbk5vZGUobm9kZSkge1xuICByZXR1cm4gbm9kZS5raW5kID09PSBLaW5kLlNDSEVNQV9ERUZJTklUSU9OIHx8IGlzVHlwZURlZmluaXRpb25Ob2RlKG5vZGUpIHx8IG5vZGUua2luZCA9PT0gS2luZC5ESVJFQ1RJVkVfREVGSU5JVElPTjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1R5cGVEZWZpbml0aW9uTm9kZShub2RlKSB7XG4gIHJldHVybiBub2RlLmtpbmQgPT09IEtpbmQuU0NBTEFSX1RZUEVfREVGSU5JVElPTiB8fCBub2RlLmtpbmQgPT09IEtpbmQuT0JKRUNUX1RZUEVfREVGSU5JVElPTiB8fCBub2RlLmtpbmQgPT09IEtpbmQuSU5URVJGQUNFX1RZUEVfREVGSU5JVElPTiB8fCBub2RlLmtpbmQgPT09IEtpbmQuVU5JT05fVFlQRV9ERUZJTklUSU9OIHx8IG5vZGUua2luZCA9PT0gS2luZC5FTlVNX1RZUEVfREVGSU5JVElPTiB8fCBub2RlLmtpbmQgPT09IEtpbmQuSU5QVVRfT0JKRUNUX1RZUEVfREVGSU5JVElPTjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1R5cGVTeXN0ZW1FeHRlbnNpb25Ob2RlKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUua2luZCA9PT0gS2luZC5TQ0hFTUFfRVhURU5TSU9OIHx8IGlzVHlwZUV4dGVuc2lvbk5vZGUobm9kZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNUeXBlRXh0ZW5zaW9uTm9kZShub2RlKSB7XG4gIHJldHVybiBub2RlLmtpbmQgPT09IEtpbmQuU0NBTEFSX1RZUEVfRVhURU5TSU9OIHx8IG5vZGUua2luZCA9PT0gS2luZC5PQkpFQ1RfVFlQRV9FWFRFTlNJT04gfHwgbm9kZS5raW5kID09PSBLaW5kLklOVEVSRkFDRV9UWVBFX0VYVEVOU0lPTiB8fCBub2RlLmtpbmQgPT09IEtpbmQuVU5JT05fVFlQRV9FWFRFTlNJT04gfHwgbm9kZS5raW5kID09PSBLaW5kLkVOVU1fVFlQRV9FWFRFTlNJT04gfHwgbm9kZS5raW5kID09PSBLaW5kLklOUFVUX09CSkVDVF9UWVBFX0VYVEVOU0lPTjtcbn1cbiIsImltcG9ydCB7IGdldExvY2F0aW9uIH0gZnJvbSBcIi4vbG9jYXRpb24ubWpzXCI7XG4vKipcbiAqIFJlbmRlciBhIGhlbHBmdWwgZGVzY3JpcHRpb24gb2YgdGhlIGxvY2F0aW9uIGluIHRoZSBHcmFwaFFMIFNvdXJjZSBkb2N1bWVudC5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcHJpbnRMb2NhdGlvbihsb2NhdGlvbikge1xuICByZXR1cm4gcHJpbnRTb3VyY2VMb2NhdGlvbihsb2NhdGlvbi5zb3VyY2UsIGdldExvY2F0aW9uKGxvY2F0aW9uLnNvdXJjZSwgbG9jYXRpb24uc3RhcnQpKTtcbn1cbi8qKlxuICogUmVuZGVyIGEgaGVscGZ1bCBkZXNjcmlwdGlvbiBvZiB0aGUgbG9jYXRpb24gaW4gdGhlIEdyYXBoUUwgU291cmNlIGRvY3VtZW50LlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBwcmludFNvdXJjZUxvY2F0aW9uKHNvdXJjZSwgc291cmNlTG9jYXRpb24pIHtcbiAgdmFyIGZpcnN0TGluZUNvbHVtbk9mZnNldCA9IHNvdXJjZS5sb2NhdGlvbk9mZnNldC5jb2x1bW4gLSAxO1xuICB2YXIgYm9keSA9IHdoaXRlc3BhY2UoZmlyc3RMaW5lQ29sdW1uT2Zmc2V0KSArIHNvdXJjZS5ib2R5O1xuICB2YXIgbGluZUluZGV4ID0gc291cmNlTG9jYXRpb24ubGluZSAtIDE7XG4gIHZhciBsaW5lT2Zmc2V0ID0gc291cmNlLmxvY2F0aW9uT2Zmc2V0LmxpbmUgLSAxO1xuICB2YXIgbGluZU51bSA9IHNvdXJjZUxvY2F0aW9uLmxpbmUgKyBsaW5lT2Zmc2V0O1xuICB2YXIgY29sdW1uT2Zmc2V0ID0gc291cmNlTG9jYXRpb24ubGluZSA9PT0gMSA/IGZpcnN0TGluZUNvbHVtbk9mZnNldCA6IDA7XG4gIHZhciBjb2x1bW5OdW0gPSBzb3VyY2VMb2NhdGlvbi5jb2x1bW4gKyBjb2x1bW5PZmZzZXQ7XG4gIHZhciBsb2NhdGlvblN0ciA9IFwiXCIuY29uY2F0KHNvdXJjZS5uYW1lLCBcIjpcIikuY29uY2F0KGxpbmVOdW0sIFwiOlwiKS5jb25jYXQoY29sdW1uTnVtLCBcIlxcblwiKTtcbiAgdmFyIGxpbmVzID0gYm9keS5zcGxpdCgvXFxyXFxufFtcXG5cXHJdL2cpO1xuICB2YXIgbG9jYXRpb25MaW5lID0gbGluZXNbbGluZUluZGV4XTsgLy8gU3BlY2lhbCBjYXNlIGZvciBtaW5pZmllZCBkb2N1bWVudHNcblxuICBpZiAobG9jYXRpb25MaW5lLmxlbmd0aCA+IDEyMCkge1xuICAgIHZhciBzdWJMaW5lSW5kZXggPSBNYXRoLmZsb29yKGNvbHVtbk51bSAvIDgwKTtcbiAgICB2YXIgc3ViTGluZUNvbHVtbk51bSA9IGNvbHVtbk51bSAlIDgwO1xuICAgIHZhciBzdWJMaW5lcyA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsb2NhdGlvbkxpbmUubGVuZ3RoOyBpICs9IDgwKSB7XG4gICAgICBzdWJMaW5lcy5wdXNoKGxvY2F0aW9uTGluZS5zbGljZShpLCBpICsgODApKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbG9jYXRpb25TdHIgKyBwcmludFByZWZpeGVkTGluZXMoW1tcIlwiLmNvbmNhdChsaW5lTnVtKSwgc3ViTGluZXNbMF1dXS5jb25jYXQoc3ViTGluZXMuc2xpY2UoMSwgc3ViTGluZUluZGV4ICsgMSkubWFwKGZ1bmN0aW9uIChzdWJMaW5lKSB7XG4gICAgICByZXR1cm4gWycnLCBzdWJMaW5lXTtcbiAgICB9KSwgW1snICcsIHdoaXRlc3BhY2Uoc3ViTGluZUNvbHVtbk51bSAtIDEpICsgJ14nXSwgWycnLCBzdWJMaW5lc1tzdWJMaW5lSW5kZXggKyAxXV1dKSk7XG4gIH1cblxuICByZXR1cm4gbG9jYXRpb25TdHIgKyBwcmludFByZWZpeGVkTGluZXMoWy8vIExpbmVzIHNwZWNpZmllZCBsaWtlIHRoaXM6IFtcInByZWZpeFwiLCBcInN0cmluZ1wiXSxcbiAgW1wiXCIuY29uY2F0KGxpbmVOdW0gLSAxKSwgbGluZXNbbGluZUluZGV4IC0gMV1dLCBbXCJcIi5jb25jYXQobGluZU51bSksIGxvY2F0aW9uTGluZV0sIFsnJywgd2hpdGVzcGFjZShjb2x1bW5OdW0gLSAxKSArICdeJ10sIFtcIlwiLmNvbmNhdChsaW5lTnVtICsgMSksIGxpbmVzW2xpbmVJbmRleCArIDFdXV0pO1xufVxuXG5mdW5jdGlvbiBwcmludFByZWZpeGVkTGluZXMobGluZXMpIHtcbiAgdmFyIGV4aXN0aW5nTGluZXMgPSBsaW5lcy5maWx0ZXIoZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgXyA9IF9yZWZbMF0sXG4gICAgICAgIGxpbmUgPSBfcmVmWzFdO1xuICAgIHJldHVybiBsaW5lICE9PSB1bmRlZmluZWQ7XG4gIH0pO1xuICB2YXIgcGFkTGVuID0gTWF0aC5tYXguYXBwbHkoTWF0aCwgZXhpc3RpbmdMaW5lcy5tYXAoZnVuY3Rpb24gKF9yZWYyKSB7XG4gICAgdmFyIHByZWZpeCA9IF9yZWYyWzBdO1xuICAgIHJldHVybiBwcmVmaXgubGVuZ3RoO1xuICB9KSk7XG4gIHJldHVybiBleGlzdGluZ0xpbmVzLm1hcChmdW5jdGlvbiAoX3JlZjMpIHtcbiAgICB2YXIgcHJlZml4ID0gX3JlZjNbMF0sXG4gICAgICAgIGxpbmUgPSBfcmVmM1sxXTtcbiAgICByZXR1cm4gbGVmdFBhZChwYWRMZW4sIHByZWZpeCkgKyAobGluZSA/ICcgfCAnICsgbGluZSA6ICcgfCcpO1xuICB9KS5qb2luKCdcXG4nKTtcbn1cblxuZnVuY3Rpb24gd2hpdGVzcGFjZShsZW4pIHtcbiAgcmV0dXJuIEFycmF5KGxlbiArIDEpLmpvaW4oJyAnKTtcbn1cblxuZnVuY3Rpb24gbGVmdFBhZChsZW4sIHN0cikge1xuICByZXR1cm4gd2hpdGVzcGFjZShsZW4gLSBzdHIubGVuZ3RoKSArIHN0cjtcbn1cbiIsImltcG9ydCB7IHZpc2l0IH0gZnJvbSBcIi4vdmlzaXRvci5tanNcIjtcbmltcG9ydCB7IHByaW50QmxvY2tTdHJpbmcgfSBmcm9tIFwiLi9ibG9ja1N0cmluZy5tanNcIjtcbi8qKlxuICogQ29udmVydHMgYW4gQVNUIGludG8gYSBzdHJpbmcsIHVzaW5nIG9uZSBzZXQgb2YgcmVhc29uYWJsZVxuICogZm9ybWF0dGluZyBydWxlcy5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcHJpbnQoYXN0KSB7XG4gIHJldHVybiB2aXNpdChhc3QsIHtcbiAgICBsZWF2ZTogcHJpbnREb2NBU1RSZWR1Y2VyXG4gIH0pO1xufVxudmFyIE1BWF9MSU5FX0xFTkdUSCA9IDgwOyAvLyBUT0RPOiBwcm92aWRlIGJldHRlciB0eXBlIGNvdmVyYWdlIGluIGZ1dHVyZVxuXG52YXIgcHJpbnREb2NBU1RSZWR1Y2VyID0ge1xuICBOYW1lOiBmdW5jdGlvbiBOYW1lKG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS52YWx1ZTtcbiAgfSxcbiAgVmFyaWFibGU6IGZ1bmN0aW9uIFZhcmlhYmxlKG5vZGUpIHtcbiAgICByZXR1cm4gJyQnICsgbm9kZS5uYW1lO1xuICB9LFxuICAvLyBEb2N1bWVudFxuICBEb2N1bWVudDogZnVuY3Rpb24gRG9jdW1lbnQobm9kZSkge1xuICAgIHJldHVybiBqb2luKG5vZGUuZGVmaW5pdGlvbnMsICdcXG5cXG4nKSArICdcXG4nO1xuICB9LFxuICBPcGVyYXRpb25EZWZpbml0aW9uOiBmdW5jdGlvbiBPcGVyYXRpb25EZWZpbml0aW9uKG5vZGUpIHtcbiAgICB2YXIgb3AgPSBub2RlLm9wZXJhdGlvbjtcbiAgICB2YXIgbmFtZSA9IG5vZGUubmFtZTtcbiAgICB2YXIgdmFyRGVmcyA9IHdyYXAoJygnLCBqb2luKG5vZGUudmFyaWFibGVEZWZpbml0aW9ucywgJywgJyksICcpJyk7XG4gICAgdmFyIGRpcmVjdGl2ZXMgPSBqb2luKG5vZGUuZGlyZWN0aXZlcywgJyAnKTtcbiAgICB2YXIgc2VsZWN0aW9uU2V0ID0gbm9kZS5zZWxlY3Rpb25TZXQ7IC8vIEFub255bW91cyBxdWVyaWVzIHdpdGggbm8gZGlyZWN0aXZlcyBvciB2YXJpYWJsZSBkZWZpbml0aW9ucyBjYW4gdXNlXG4gICAgLy8gdGhlIHF1ZXJ5IHNob3J0IGZvcm0uXG5cbiAgICByZXR1cm4gIW5hbWUgJiYgIWRpcmVjdGl2ZXMgJiYgIXZhckRlZnMgJiYgb3AgPT09ICdxdWVyeScgPyBzZWxlY3Rpb25TZXQgOiBqb2luKFtvcCwgam9pbihbbmFtZSwgdmFyRGVmc10pLCBkaXJlY3RpdmVzLCBzZWxlY3Rpb25TZXRdLCAnICcpO1xuICB9LFxuICBWYXJpYWJsZURlZmluaXRpb246IGZ1bmN0aW9uIFZhcmlhYmxlRGVmaW5pdGlvbihfcmVmKSB7XG4gICAgdmFyIHZhcmlhYmxlID0gX3JlZi52YXJpYWJsZSxcbiAgICAgICAgdHlwZSA9IF9yZWYudHlwZSxcbiAgICAgICAgZGVmYXVsdFZhbHVlID0gX3JlZi5kZWZhdWx0VmFsdWUsXG4gICAgICAgIGRpcmVjdGl2ZXMgPSBfcmVmLmRpcmVjdGl2ZXM7XG4gICAgcmV0dXJuIHZhcmlhYmxlICsgJzogJyArIHR5cGUgKyB3cmFwKCcgPSAnLCBkZWZhdWx0VmFsdWUpICsgd3JhcCgnICcsIGpvaW4oZGlyZWN0aXZlcywgJyAnKSk7XG4gIH0sXG4gIFNlbGVjdGlvblNldDogZnVuY3Rpb24gU2VsZWN0aW9uU2V0KF9yZWYyKSB7XG4gICAgdmFyIHNlbGVjdGlvbnMgPSBfcmVmMi5zZWxlY3Rpb25zO1xuICAgIHJldHVybiBibG9jayhzZWxlY3Rpb25zKTtcbiAgfSxcbiAgRmllbGQ6IGZ1bmN0aW9uIEZpZWxkKF9yZWYzKSB7XG4gICAgdmFyIGFsaWFzID0gX3JlZjMuYWxpYXMsXG4gICAgICAgIG5hbWUgPSBfcmVmMy5uYW1lLFxuICAgICAgICBhcmdzID0gX3JlZjMuYXJndW1lbnRzLFxuICAgICAgICBkaXJlY3RpdmVzID0gX3JlZjMuZGlyZWN0aXZlcyxcbiAgICAgICAgc2VsZWN0aW9uU2V0ID0gX3JlZjMuc2VsZWN0aW9uU2V0O1xuICAgIHZhciBwcmVmaXggPSB3cmFwKCcnLCBhbGlhcywgJzogJykgKyBuYW1lO1xuICAgIHZhciBhcmdzTGluZSA9IHByZWZpeCArIHdyYXAoJygnLCBqb2luKGFyZ3MsICcsICcpLCAnKScpO1xuXG4gICAgaWYgKGFyZ3NMaW5lLmxlbmd0aCA+IE1BWF9MSU5FX0xFTkdUSCkge1xuICAgICAgYXJnc0xpbmUgPSBwcmVmaXggKyB3cmFwKCcoXFxuJywgaW5kZW50KGpvaW4oYXJncywgJ1xcbicpKSwgJ1xcbiknKTtcbiAgICB9XG5cbiAgICByZXR1cm4gam9pbihbYXJnc0xpbmUsIGpvaW4oZGlyZWN0aXZlcywgJyAnKSwgc2VsZWN0aW9uU2V0XSwgJyAnKTtcbiAgfSxcbiAgQXJndW1lbnQ6IGZ1bmN0aW9uIEFyZ3VtZW50KF9yZWY0KSB7XG4gICAgdmFyIG5hbWUgPSBfcmVmNC5uYW1lLFxuICAgICAgICB2YWx1ZSA9IF9yZWY0LnZhbHVlO1xuICAgIHJldHVybiBuYW1lICsgJzogJyArIHZhbHVlO1xuICB9LFxuICAvLyBGcmFnbWVudHNcbiAgRnJhZ21lbnRTcHJlYWQ6IGZ1bmN0aW9uIEZyYWdtZW50U3ByZWFkKF9yZWY1KSB7XG4gICAgdmFyIG5hbWUgPSBfcmVmNS5uYW1lLFxuICAgICAgICBkaXJlY3RpdmVzID0gX3JlZjUuZGlyZWN0aXZlcztcbiAgICByZXR1cm4gJy4uLicgKyBuYW1lICsgd3JhcCgnICcsIGpvaW4oZGlyZWN0aXZlcywgJyAnKSk7XG4gIH0sXG4gIElubGluZUZyYWdtZW50OiBmdW5jdGlvbiBJbmxpbmVGcmFnbWVudChfcmVmNikge1xuICAgIHZhciB0eXBlQ29uZGl0aW9uID0gX3JlZjYudHlwZUNvbmRpdGlvbixcbiAgICAgICAgZGlyZWN0aXZlcyA9IF9yZWY2LmRpcmVjdGl2ZXMsXG4gICAgICAgIHNlbGVjdGlvblNldCA9IF9yZWY2LnNlbGVjdGlvblNldDtcbiAgICByZXR1cm4gam9pbihbJy4uLicsIHdyYXAoJ29uICcsIHR5cGVDb25kaXRpb24pLCBqb2luKGRpcmVjdGl2ZXMsICcgJyksIHNlbGVjdGlvblNldF0sICcgJyk7XG4gIH0sXG4gIEZyYWdtZW50RGVmaW5pdGlvbjogZnVuY3Rpb24gRnJhZ21lbnREZWZpbml0aW9uKF9yZWY3KSB7XG4gICAgdmFyIG5hbWUgPSBfcmVmNy5uYW1lLFxuICAgICAgICB0eXBlQ29uZGl0aW9uID0gX3JlZjcudHlwZUNvbmRpdGlvbixcbiAgICAgICAgdmFyaWFibGVEZWZpbml0aW9ucyA9IF9yZWY3LnZhcmlhYmxlRGVmaW5pdGlvbnMsXG4gICAgICAgIGRpcmVjdGl2ZXMgPSBfcmVmNy5kaXJlY3RpdmVzLFxuICAgICAgICBzZWxlY3Rpb25TZXQgPSBfcmVmNy5zZWxlY3Rpb25TZXQ7XG4gICAgcmV0dXJuICgvLyBOb3RlOiBmcmFnbWVudCB2YXJpYWJsZSBkZWZpbml0aW9ucyBhcmUgZXhwZXJpbWVudGFsIGFuZCBtYXkgYmUgY2hhbmdlZFxuICAgICAgLy8gb3IgcmVtb3ZlZCBpbiB0aGUgZnV0dXJlLlxuICAgICAgXCJmcmFnbWVudCBcIi5jb25jYXQobmFtZSkuY29uY2F0KHdyYXAoJygnLCBqb2luKHZhcmlhYmxlRGVmaW5pdGlvbnMsICcsICcpLCAnKScpLCBcIiBcIikgKyBcIm9uIFwiLmNvbmNhdCh0eXBlQ29uZGl0aW9uLCBcIiBcIikuY29uY2F0KHdyYXAoJycsIGpvaW4oZGlyZWN0aXZlcywgJyAnKSwgJyAnKSkgKyBzZWxlY3Rpb25TZXRcbiAgICApO1xuICB9LFxuICAvLyBWYWx1ZVxuICBJbnRWYWx1ZTogZnVuY3Rpb24gSW50VmFsdWUoX3JlZjgpIHtcbiAgICB2YXIgdmFsdWUgPSBfcmVmOC52YWx1ZTtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH0sXG4gIEZsb2F0VmFsdWU6IGZ1bmN0aW9uIEZsb2F0VmFsdWUoX3JlZjkpIHtcbiAgICB2YXIgdmFsdWUgPSBfcmVmOS52YWx1ZTtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH0sXG4gIFN0cmluZ1ZhbHVlOiBmdW5jdGlvbiBTdHJpbmdWYWx1ZShfcmVmMTAsIGtleSkge1xuICAgIHZhciB2YWx1ZSA9IF9yZWYxMC52YWx1ZSxcbiAgICAgICAgaXNCbG9ja1N0cmluZyA9IF9yZWYxMC5ibG9jaztcbiAgICByZXR1cm4gaXNCbG9ja1N0cmluZyA/IHByaW50QmxvY2tTdHJpbmcodmFsdWUsIGtleSA9PT0gJ2Rlc2NyaXB0aW9uJyA/ICcnIDogJyAgJykgOiBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG4gIH0sXG4gIEJvb2xlYW5WYWx1ZTogZnVuY3Rpb24gQm9vbGVhblZhbHVlKF9yZWYxMSkge1xuICAgIHZhciB2YWx1ZSA9IF9yZWYxMS52YWx1ZTtcbiAgICByZXR1cm4gdmFsdWUgPyAndHJ1ZScgOiAnZmFsc2UnO1xuICB9LFxuICBOdWxsVmFsdWU6IGZ1bmN0aW9uIE51bGxWYWx1ZSgpIHtcbiAgICByZXR1cm4gJ251bGwnO1xuICB9LFxuICBFbnVtVmFsdWU6IGZ1bmN0aW9uIEVudW1WYWx1ZShfcmVmMTIpIHtcbiAgICB2YXIgdmFsdWUgPSBfcmVmMTIudmFsdWU7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9LFxuICBMaXN0VmFsdWU6IGZ1bmN0aW9uIExpc3RWYWx1ZShfcmVmMTMpIHtcbiAgICB2YXIgdmFsdWVzID0gX3JlZjEzLnZhbHVlcztcbiAgICByZXR1cm4gJ1snICsgam9pbih2YWx1ZXMsICcsICcpICsgJ10nO1xuICB9LFxuICBPYmplY3RWYWx1ZTogZnVuY3Rpb24gT2JqZWN0VmFsdWUoX3JlZjE0KSB7XG4gICAgdmFyIGZpZWxkcyA9IF9yZWYxNC5maWVsZHM7XG4gICAgcmV0dXJuICd7JyArIGpvaW4oZmllbGRzLCAnLCAnKSArICd9JztcbiAgfSxcbiAgT2JqZWN0RmllbGQ6IGZ1bmN0aW9uIE9iamVjdEZpZWxkKF9yZWYxNSkge1xuICAgIHZhciBuYW1lID0gX3JlZjE1Lm5hbWUsXG4gICAgICAgIHZhbHVlID0gX3JlZjE1LnZhbHVlO1xuICAgIHJldHVybiBuYW1lICsgJzogJyArIHZhbHVlO1xuICB9LFxuICAvLyBEaXJlY3RpdmVcbiAgRGlyZWN0aXZlOiBmdW5jdGlvbiBEaXJlY3RpdmUoX3JlZjE2KSB7XG4gICAgdmFyIG5hbWUgPSBfcmVmMTYubmFtZSxcbiAgICAgICAgYXJncyA9IF9yZWYxNi5hcmd1bWVudHM7XG4gICAgcmV0dXJuICdAJyArIG5hbWUgKyB3cmFwKCcoJywgam9pbihhcmdzLCAnLCAnKSwgJyknKTtcbiAgfSxcbiAgLy8gVHlwZVxuICBOYW1lZFR5cGU6IGZ1bmN0aW9uIE5hbWVkVHlwZShfcmVmMTcpIHtcbiAgICB2YXIgbmFtZSA9IF9yZWYxNy5uYW1lO1xuICAgIHJldHVybiBuYW1lO1xuICB9LFxuICBMaXN0VHlwZTogZnVuY3Rpb24gTGlzdFR5cGUoX3JlZjE4KSB7XG4gICAgdmFyIHR5cGUgPSBfcmVmMTgudHlwZTtcbiAgICByZXR1cm4gJ1snICsgdHlwZSArICddJztcbiAgfSxcbiAgTm9uTnVsbFR5cGU6IGZ1bmN0aW9uIE5vbk51bGxUeXBlKF9yZWYxOSkge1xuICAgIHZhciB0eXBlID0gX3JlZjE5LnR5cGU7XG4gICAgcmV0dXJuIHR5cGUgKyAnISc7XG4gIH0sXG4gIC8vIFR5cGUgU3lzdGVtIERlZmluaXRpb25zXG4gIFNjaGVtYURlZmluaXRpb246IGFkZERlc2NyaXB0aW9uKGZ1bmN0aW9uIChfcmVmMjApIHtcbiAgICB2YXIgZGlyZWN0aXZlcyA9IF9yZWYyMC5kaXJlY3RpdmVzLFxuICAgICAgICBvcGVyYXRpb25UeXBlcyA9IF9yZWYyMC5vcGVyYXRpb25UeXBlcztcbiAgICByZXR1cm4gam9pbihbJ3NjaGVtYScsIGpvaW4oZGlyZWN0aXZlcywgJyAnKSwgYmxvY2sob3BlcmF0aW9uVHlwZXMpXSwgJyAnKTtcbiAgfSksXG4gIE9wZXJhdGlvblR5cGVEZWZpbml0aW9uOiBmdW5jdGlvbiBPcGVyYXRpb25UeXBlRGVmaW5pdGlvbihfcmVmMjEpIHtcbiAgICB2YXIgb3BlcmF0aW9uID0gX3JlZjIxLm9wZXJhdGlvbixcbiAgICAgICAgdHlwZSA9IF9yZWYyMS50eXBlO1xuICAgIHJldHVybiBvcGVyYXRpb24gKyAnOiAnICsgdHlwZTtcbiAgfSxcbiAgU2NhbGFyVHlwZURlZmluaXRpb246IGFkZERlc2NyaXB0aW9uKGZ1bmN0aW9uIChfcmVmMjIpIHtcbiAgICB2YXIgbmFtZSA9IF9yZWYyMi5uYW1lLFxuICAgICAgICBkaXJlY3RpdmVzID0gX3JlZjIyLmRpcmVjdGl2ZXM7XG4gICAgcmV0dXJuIGpvaW4oWydzY2FsYXInLCBuYW1lLCBqb2luKGRpcmVjdGl2ZXMsICcgJyldLCAnICcpO1xuICB9KSxcbiAgT2JqZWN0VHlwZURlZmluaXRpb246IGFkZERlc2NyaXB0aW9uKGZ1bmN0aW9uIChfcmVmMjMpIHtcbiAgICB2YXIgbmFtZSA9IF9yZWYyMy5uYW1lLFxuICAgICAgICBpbnRlcmZhY2VzID0gX3JlZjIzLmludGVyZmFjZXMsXG4gICAgICAgIGRpcmVjdGl2ZXMgPSBfcmVmMjMuZGlyZWN0aXZlcyxcbiAgICAgICAgZmllbGRzID0gX3JlZjIzLmZpZWxkcztcbiAgICByZXR1cm4gam9pbihbJ3R5cGUnLCBuYW1lLCB3cmFwKCdpbXBsZW1lbnRzICcsIGpvaW4oaW50ZXJmYWNlcywgJyAmICcpKSwgam9pbihkaXJlY3RpdmVzLCAnICcpLCBibG9jayhmaWVsZHMpXSwgJyAnKTtcbiAgfSksXG4gIEZpZWxkRGVmaW5pdGlvbjogYWRkRGVzY3JpcHRpb24oZnVuY3Rpb24gKF9yZWYyNCkge1xuICAgIHZhciBuYW1lID0gX3JlZjI0Lm5hbWUsXG4gICAgICAgIGFyZ3MgPSBfcmVmMjQuYXJndW1lbnRzLFxuICAgICAgICB0eXBlID0gX3JlZjI0LnR5cGUsXG4gICAgICAgIGRpcmVjdGl2ZXMgPSBfcmVmMjQuZGlyZWN0aXZlcztcbiAgICByZXR1cm4gbmFtZSArIChoYXNNdWx0aWxpbmVJdGVtcyhhcmdzKSA/IHdyYXAoJyhcXG4nLCBpbmRlbnQoam9pbihhcmdzLCAnXFxuJykpLCAnXFxuKScpIDogd3JhcCgnKCcsIGpvaW4oYXJncywgJywgJyksICcpJykpICsgJzogJyArIHR5cGUgKyB3cmFwKCcgJywgam9pbihkaXJlY3RpdmVzLCAnICcpKTtcbiAgfSksXG4gIElucHV0VmFsdWVEZWZpbml0aW9uOiBhZGREZXNjcmlwdGlvbihmdW5jdGlvbiAoX3JlZjI1KSB7XG4gICAgdmFyIG5hbWUgPSBfcmVmMjUubmFtZSxcbiAgICAgICAgdHlwZSA9IF9yZWYyNS50eXBlLFxuICAgICAgICBkZWZhdWx0VmFsdWUgPSBfcmVmMjUuZGVmYXVsdFZhbHVlLFxuICAgICAgICBkaXJlY3RpdmVzID0gX3JlZjI1LmRpcmVjdGl2ZXM7XG4gICAgcmV0dXJuIGpvaW4oW25hbWUgKyAnOiAnICsgdHlwZSwgd3JhcCgnPSAnLCBkZWZhdWx0VmFsdWUpLCBqb2luKGRpcmVjdGl2ZXMsICcgJyldLCAnICcpO1xuICB9KSxcbiAgSW50ZXJmYWNlVHlwZURlZmluaXRpb246IGFkZERlc2NyaXB0aW9uKGZ1bmN0aW9uIChfcmVmMjYpIHtcbiAgICB2YXIgbmFtZSA9IF9yZWYyNi5uYW1lLFxuICAgICAgICBpbnRlcmZhY2VzID0gX3JlZjI2LmludGVyZmFjZXMsXG4gICAgICAgIGRpcmVjdGl2ZXMgPSBfcmVmMjYuZGlyZWN0aXZlcyxcbiAgICAgICAgZmllbGRzID0gX3JlZjI2LmZpZWxkcztcbiAgICByZXR1cm4gam9pbihbJ2ludGVyZmFjZScsIG5hbWUsIHdyYXAoJ2ltcGxlbWVudHMgJywgam9pbihpbnRlcmZhY2VzLCAnICYgJykpLCBqb2luKGRpcmVjdGl2ZXMsICcgJyksIGJsb2NrKGZpZWxkcyldLCAnICcpO1xuICB9KSxcbiAgVW5pb25UeXBlRGVmaW5pdGlvbjogYWRkRGVzY3JpcHRpb24oZnVuY3Rpb24gKF9yZWYyNykge1xuICAgIHZhciBuYW1lID0gX3JlZjI3Lm5hbWUsXG4gICAgICAgIGRpcmVjdGl2ZXMgPSBfcmVmMjcuZGlyZWN0aXZlcyxcbiAgICAgICAgdHlwZXMgPSBfcmVmMjcudHlwZXM7XG4gICAgcmV0dXJuIGpvaW4oWyd1bmlvbicsIG5hbWUsIGpvaW4oZGlyZWN0aXZlcywgJyAnKSwgdHlwZXMgJiYgdHlwZXMubGVuZ3RoICE9PSAwID8gJz0gJyArIGpvaW4odHlwZXMsICcgfCAnKSA6ICcnXSwgJyAnKTtcbiAgfSksXG4gIEVudW1UeXBlRGVmaW5pdGlvbjogYWRkRGVzY3JpcHRpb24oZnVuY3Rpb24gKF9yZWYyOCkge1xuICAgIHZhciBuYW1lID0gX3JlZjI4Lm5hbWUsXG4gICAgICAgIGRpcmVjdGl2ZXMgPSBfcmVmMjguZGlyZWN0aXZlcyxcbiAgICAgICAgdmFsdWVzID0gX3JlZjI4LnZhbHVlcztcbiAgICByZXR1cm4gam9pbihbJ2VudW0nLCBuYW1lLCBqb2luKGRpcmVjdGl2ZXMsICcgJyksIGJsb2NrKHZhbHVlcyldLCAnICcpO1xuICB9KSxcbiAgRW51bVZhbHVlRGVmaW5pdGlvbjogYWRkRGVzY3JpcHRpb24oZnVuY3Rpb24gKF9yZWYyOSkge1xuICAgIHZhciBuYW1lID0gX3JlZjI5Lm5hbWUsXG4gICAgICAgIGRpcmVjdGl2ZXMgPSBfcmVmMjkuZGlyZWN0aXZlcztcbiAgICByZXR1cm4gam9pbihbbmFtZSwgam9pbihkaXJlY3RpdmVzLCAnICcpXSwgJyAnKTtcbiAgfSksXG4gIElucHV0T2JqZWN0VHlwZURlZmluaXRpb246IGFkZERlc2NyaXB0aW9uKGZ1bmN0aW9uIChfcmVmMzApIHtcbiAgICB2YXIgbmFtZSA9IF9yZWYzMC5uYW1lLFxuICAgICAgICBkaXJlY3RpdmVzID0gX3JlZjMwLmRpcmVjdGl2ZXMsXG4gICAgICAgIGZpZWxkcyA9IF9yZWYzMC5maWVsZHM7XG4gICAgcmV0dXJuIGpvaW4oWydpbnB1dCcsIG5hbWUsIGpvaW4oZGlyZWN0aXZlcywgJyAnKSwgYmxvY2soZmllbGRzKV0sICcgJyk7XG4gIH0pLFxuICBEaXJlY3RpdmVEZWZpbml0aW9uOiBhZGREZXNjcmlwdGlvbihmdW5jdGlvbiAoX3JlZjMxKSB7XG4gICAgdmFyIG5hbWUgPSBfcmVmMzEubmFtZSxcbiAgICAgICAgYXJncyA9IF9yZWYzMS5hcmd1bWVudHMsXG4gICAgICAgIHJlcGVhdGFibGUgPSBfcmVmMzEucmVwZWF0YWJsZSxcbiAgICAgICAgbG9jYXRpb25zID0gX3JlZjMxLmxvY2F0aW9ucztcbiAgICByZXR1cm4gJ2RpcmVjdGl2ZSBAJyArIG5hbWUgKyAoaGFzTXVsdGlsaW5lSXRlbXMoYXJncykgPyB3cmFwKCcoXFxuJywgaW5kZW50KGpvaW4oYXJncywgJ1xcbicpKSwgJ1xcbiknKSA6IHdyYXAoJygnLCBqb2luKGFyZ3MsICcsICcpLCAnKScpKSArIChyZXBlYXRhYmxlID8gJyByZXBlYXRhYmxlJyA6ICcnKSArICcgb24gJyArIGpvaW4obG9jYXRpb25zLCAnIHwgJyk7XG4gIH0pLFxuICBTY2hlbWFFeHRlbnNpb246IGZ1bmN0aW9uIFNjaGVtYUV4dGVuc2lvbihfcmVmMzIpIHtcbiAgICB2YXIgZGlyZWN0aXZlcyA9IF9yZWYzMi5kaXJlY3RpdmVzLFxuICAgICAgICBvcGVyYXRpb25UeXBlcyA9IF9yZWYzMi5vcGVyYXRpb25UeXBlcztcbiAgICByZXR1cm4gam9pbihbJ2V4dGVuZCBzY2hlbWEnLCBqb2luKGRpcmVjdGl2ZXMsICcgJyksIGJsb2NrKG9wZXJhdGlvblR5cGVzKV0sICcgJyk7XG4gIH0sXG4gIFNjYWxhclR5cGVFeHRlbnNpb246IGZ1bmN0aW9uIFNjYWxhclR5cGVFeHRlbnNpb24oX3JlZjMzKSB7XG4gICAgdmFyIG5hbWUgPSBfcmVmMzMubmFtZSxcbiAgICAgICAgZGlyZWN0aXZlcyA9IF9yZWYzMy5kaXJlY3RpdmVzO1xuICAgIHJldHVybiBqb2luKFsnZXh0ZW5kIHNjYWxhcicsIG5hbWUsIGpvaW4oZGlyZWN0aXZlcywgJyAnKV0sICcgJyk7XG4gIH0sXG4gIE9iamVjdFR5cGVFeHRlbnNpb246IGZ1bmN0aW9uIE9iamVjdFR5cGVFeHRlbnNpb24oX3JlZjM0KSB7XG4gICAgdmFyIG5hbWUgPSBfcmVmMzQubmFtZSxcbiAgICAgICAgaW50ZXJmYWNlcyA9IF9yZWYzNC5pbnRlcmZhY2VzLFxuICAgICAgICBkaXJlY3RpdmVzID0gX3JlZjM0LmRpcmVjdGl2ZXMsXG4gICAgICAgIGZpZWxkcyA9IF9yZWYzNC5maWVsZHM7XG4gICAgcmV0dXJuIGpvaW4oWydleHRlbmQgdHlwZScsIG5hbWUsIHdyYXAoJ2ltcGxlbWVudHMgJywgam9pbihpbnRlcmZhY2VzLCAnICYgJykpLCBqb2luKGRpcmVjdGl2ZXMsICcgJyksIGJsb2NrKGZpZWxkcyldLCAnICcpO1xuICB9LFxuICBJbnRlcmZhY2VUeXBlRXh0ZW5zaW9uOiBmdW5jdGlvbiBJbnRlcmZhY2VUeXBlRXh0ZW5zaW9uKF9yZWYzNSkge1xuICAgIHZhciBuYW1lID0gX3JlZjM1Lm5hbWUsXG4gICAgICAgIGludGVyZmFjZXMgPSBfcmVmMzUuaW50ZXJmYWNlcyxcbiAgICAgICAgZGlyZWN0aXZlcyA9IF9yZWYzNS5kaXJlY3RpdmVzLFxuICAgICAgICBmaWVsZHMgPSBfcmVmMzUuZmllbGRzO1xuICAgIHJldHVybiBqb2luKFsnZXh0ZW5kIGludGVyZmFjZScsIG5hbWUsIHdyYXAoJ2ltcGxlbWVudHMgJywgam9pbihpbnRlcmZhY2VzLCAnICYgJykpLCBqb2luKGRpcmVjdGl2ZXMsICcgJyksIGJsb2NrKGZpZWxkcyldLCAnICcpO1xuICB9LFxuICBVbmlvblR5cGVFeHRlbnNpb246IGZ1bmN0aW9uIFVuaW9uVHlwZUV4dGVuc2lvbihfcmVmMzYpIHtcbiAgICB2YXIgbmFtZSA9IF9yZWYzNi5uYW1lLFxuICAgICAgICBkaXJlY3RpdmVzID0gX3JlZjM2LmRpcmVjdGl2ZXMsXG4gICAgICAgIHR5cGVzID0gX3JlZjM2LnR5cGVzO1xuICAgIHJldHVybiBqb2luKFsnZXh0ZW5kIHVuaW9uJywgbmFtZSwgam9pbihkaXJlY3RpdmVzLCAnICcpLCB0eXBlcyAmJiB0eXBlcy5sZW5ndGggIT09IDAgPyAnPSAnICsgam9pbih0eXBlcywgJyB8ICcpIDogJyddLCAnICcpO1xuICB9LFxuICBFbnVtVHlwZUV4dGVuc2lvbjogZnVuY3Rpb24gRW51bVR5cGVFeHRlbnNpb24oX3JlZjM3KSB7XG4gICAgdmFyIG5hbWUgPSBfcmVmMzcubmFtZSxcbiAgICAgICAgZGlyZWN0aXZlcyA9IF9yZWYzNy5kaXJlY3RpdmVzLFxuICAgICAgICB2YWx1ZXMgPSBfcmVmMzcudmFsdWVzO1xuICAgIHJldHVybiBqb2luKFsnZXh0ZW5kIGVudW0nLCBuYW1lLCBqb2luKGRpcmVjdGl2ZXMsICcgJyksIGJsb2NrKHZhbHVlcyldLCAnICcpO1xuICB9LFxuICBJbnB1dE9iamVjdFR5cGVFeHRlbnNpb246IGZ1bmN0aW9uIElucHV0T2JqZWN0VHlwZUV4dGVuc2lvbihfcmVmMzgpIHtcbiAgICB2YXIgbmFtZSA9IF9yZWYzOC5uYW1lLFxuICAgICAgICBkaXJlY3RpdmVzID0gX3JlZjM4LmRpcmVjdGl2ZXMsXG4gICAgICAgIGZpZWxkcyA9IF9yZWYzOC5maWVsZHM7XG4gICAgcmV0dXJuIGpvaW4oWydleHRlbmQgaW5wdXQnLCBuYW1lLCBqb2luKGRpcmVjdGl2ZXMsICcgJyksIGJsb2NrKGZpZWxkcyldLCAnICcpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBhZGREZXNjcmlwdGlvbihjYikge1xuICByZXR1cm4gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICByZXR1cm4gam9pbihbbm9kZS5kZXNjcmlwdGlvbiwgY2Iobm9kZSldLCAnXFxuJyk7XG4gIH07XG59XG4vKipcbiAqIEdpdmVuIG1heWJlQXJyYXksIHByaW50IGFuIGVtcHR5IHN0cmluZyBpZiBpdCBpcyBudWxsIG9yIGVtcHR5LCBvdGhlcndpc2VcbiAqIHByaW50IGFsbCBpdGVtcyB0b2dldGhlciBzZXBhcmF0ZWQgYnkgc2VwYXJhdG9yIGlmIHByb3ZpZGVkXG4gKi9cblxuXG5mdW5jdGlvbiBqb2luKG1heWJlQXJyYXkpIHtcbiAgdmFyIF9tYXliZUFycmF5JGZpbHRlciRqbztcblxuICB2YXIgc2VwYXJhdG9yID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAnJztcbiAgcmV0dXJuIChfbWF5YmVBcnJheSRmaWx0ZXIkam8gPSBtYXliZUFycmF5ID09PSBudWxsIHx8IG1heWJlQXJyYXkgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG1heWJlQXJyYXkuZmlsdGVyKGZ1bmN0aW9uICh4KSB7XG4gICAgcmV0dXJuIHg7XG4gIH0pLmpvaW4oc2VwYXJhdG9yKSkgIT09IG51bGwgJiYgX21heWJlQXJyYXkkZmlsdGVyJGpvICE9PSB2b2lkIDAgPyBfbWF5YmVBcnJheSRmaWx0ZXIkam8gOiAnJztcbn1cbi8qKlxuICogR2l2ZW4gYXJyYXksIHByaW50IGVhY2ggaXRlbSBvbiBpdHMgb3duIGxpbmUsIHdyYXBwZWQgaW4gYW5cbiAqIGluZGVudGVkIFwieyB9XCIgYmxvY2suXG4gKi9cblxuXG5mdW5jdGlvbiBibG9jayhhcnJheSkge1xuICByZXR1cm4gd3JhcCgne1xcbicsIGluZGVudChqb2luKGFycmF5LCAnXFxuJykpLCAnXFxufScpO1xufVxuLyoqXG4gKiBJZiBtYXliZVN0cmluZyBpcyBub3QgbnVsbCBvciBlbXB0eSwgdGhlbiB3cmFwIHdpdGggc3RhcnQgYW5kIGVuZCwgb3RoZXJ3aXNlIHByaW50IGFuIGVtcHR5IHN0cmluZy5cbiAqL1xuXG5cbmZ1bmN0aW9uIHdyYXAoc3RhcnQsIG1heWJlU3RyaW5nKSB7XG4gIHZhciBlbmQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6ICcnO1xuICByZXR1cm4gbWF5YmVTdHJpbmcgIT0gbnVsbCAmJiBtYXliZVN0cmluZyAhPT0gJycgPyBzdGFydCArIG1heWJlU3RyaW5nICsgZW5kIDogJyc7XG59XG5cbmZ1bmN0aW9uIGluZGVudChzdHIpIHtcbiAgcmV0dXJuIHdyYXAoJyAgJywgc3RyLnJlcGxhY2UoL1xcbi9nLCAnXFxuICAnKSk7XG59XG5cbmZ1bmN0aW9uIGlzTXVsdGlsaW5lKHN0cikge1xuICByZXR1cm4gc3RyLmluZGV4T2YoJ1xcbicpICE9PSAtMTtcbn1cblxuZnVuY3Rpb24gaGFzTXVsdGlsaW5lSXRlbXMobWF5YmVBcnJheSkge1xuICByZXR1cm4gbWF5YmVBcnJheSAhPSBudWxsICYmIG1heWJlQXJyYXkuc29tZShpc011bHRpbGluZSk7XG59XG4iLCJmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmltcG9ydCB7IFNZTUJPTF9UT19TVFJJTkdfVEFHIH0gZnJvbSBcIi4uL3BvbHlmaWxscy9zeW1ib2xzLm1qc1wiO1xuaW1wb3J0IGluc3BlY3QgZnJvbSBcIi4uL2pzdXRpbHMvaW5zcGVjdC5tanNcIjtcbmltcG9ydCBkZXZBc3NlcnQgZnJvbSBcIi4uL2pzdXRpbHMvZGV2QXNzZXJ0Lm1qc1wiO1xuaW1wb3J0IGluc3RhbmNlT2YgZnJvbSBcIi4uL2pzdXRpbHMvaW5zdGFuY2VPZi5tanNcIjtcblxuLyoqXG4gKiBBIHJlcHJlc2VudGF0aW9uIG9mIHNvdXJjZSBpbnB1dCB0byBHcmFwaFFMLiBUaGUgYG5hbWVgIGFuZCBgbG9jYXRpb25PZmZzZXRgIHBhcmFtZXRlcnMgYXJlXG4gKiBvcHRpb25hbCwgYnV0IHRoZXkgYXJlIHVzZWZ1bCBmb3IgY2xpZW50cyB3aG8gc3RvcmUgR3JhcGhRTCBkb2N1bWVudHMgaW4gc291cmNlIGZpbGVzLlxuICogRm9yIGV4YW1wbGUsIGlmIHRoZSBHcmFwaFFMIGlucHV0IHN0YXJ0cyBhdCBsaW5lIDQwIGluIGEgZmlsZSBuYW1lZCBgRm9vLmdyYXBocWxgLCBpdCBtaWdodFxuICogYmUgdXNlZnVsIGZvciBgbmFtZWAgdG8gYmUgYFwiRm9vLmdyYXBocWxcImAgYW5kIGxvY2F0aW9uIHRvIGJlIGB7IGxpbmU6IDQwLCBjb2x1bW46IDEgfWAuXG4gKiBUaGUgYGxpbmVgIGFuZCBgY29sdW1uYCBwcm9wZXJ0aWVzIGluIGBsb2NhdGlvbk9mZnNldGAgYXJlIDEtaW5kZXhlZC5cbiAqL1xuZXhwb3J0IHZhciBTb3VyY2UgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTb3VyY2UoYm9keSkge1xuICAgIHZhciBuYW1lID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAnR3JhcGhRTCByZXF1ZXN0JztcbiAgICB2YXIgbG9jYXRpb25PZmZzZXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHtcbiAgICAgIGxpbmU6IDEsXG4gICAgICBjb2x1bW46IDFcbiAgICB9O1xuICAgIHR5cGVvZiBib2R5ID09PSAnc3RyaW5nJyB8fCBkZXZBc3NlcnQoMCwgXCJCb2R5IG11c3QgYmUgYSBzdHJpbmcuIFJlY2VpdmVkOiBcIi5jb25jYXQoaW5zcGVjdChib2R5KSwgXCIuXCIpKTtcbiAgICB0aGlzLmJvZHkgPSBib2R5O1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgdGhpcy5sb2NhdGlvbk9mZnNldCA9IGxvY2F0aW9uT2Zmc2V0O1xuICAgIHRoaXMubG9jYXRpb25PZmZzZXQubGluZSA+IDAgfHwgZGV2QXNzZXJ0KDAsICdsaW5lIGluIGxvY2F0aW9uT2Zmc2V0IGlzIDEtaW5kZXhlZCBhbmQgbXVzdCBiZSBwb3NpdGl2ZS4nKTtcbiAgICB0aGlzLmxvY2F0aW9uT2Zmc2V0LmNvbHVtbiA+IDAgfHwgZGV2QXNzZXJ0KDAsICdjb2x1bW4gaW4gbG9jYXRpb25PZmZzZXQgaXMgMS1pbmRleGVkIGFuZCBtdXN0IGJlIHBvc2l0aXZlLicpO1xuICB9IC8vICRGbG93Rml4TWVbdW5zdXBwb3J0ZWQtc3ludGF4XSBGbG93IGRvZXNuJ3Qgc3VwcG9ydCBjb21wdXRlZCBwcm9wZXJ0aWVzIHlldFxuXG5cbiAgX2NyZWF0ZUNsYXNzKFNvdXJjZSwgW3tcbiAgICBrZXk6IFNZTUJPTF9UT19TVFJJTkdfVEFHLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuICdTb3VyY2UnO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTb3VyY2U7XG59KCk7XG4vKipcbiAqIFRlc3QgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIGEgU291cmNlIG9iamVjdC5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVkZWNsYXJlXG5leHBvcnQgZnVuY3Rpb24gaXNTb3VyY2Uoc291cmNlKSB7XG4gIHJldHVybiBpbnN0YW5jZU9mKHNvdXJjZSwgU291cmNlKTtcbn1cbiIsIi8qKlxuICogQW4gZXhwb3J0ZWQgZW51bSBkZXNjcmliaW5nIHRoZSBkaWZmZXJlbnQga2luZHMgb2YgdG9rZW5zIHRoYXQgdGhlXG4gKiBsZXhlciBlbWl0cy5cbiAqL1xuZXhwb3J0IHZhciBUb2tlbktpbmQgPSBPYmplY3QuZnJlZXplKHtcbiAgU09GOiAnPFNPRj4nLFxuICBFT0Y6ICc8RU9GPicsXG4gIEJBTkc6ICchJyxcbiAgRE9MTEFSOiAnJCcsXG4gIEFNUDogJyYnLFxuICBQQVJFTl9MOiAnKCcsXG4gIFBBUkVOX1I6ICcpJyxcbiAgU1BSRUFEOiAnLi4uJyxcbiAgQ09MT046ICc6JyxcbiAgRVFVQUxTOiAnPScsXG4gIEFUOiAnQCcsXG4gIEJSQUNLRVRfTDogJ1snLFxuICBCUkFDS0VUX1I6ICddJyxcbiAgQlJBQ0VfTDogJ3snLFxuICBQSVBFOiAnfCcsXG4gIEJSQUNFX1I6ICd9JyxcbiAgTkFNRTogJ05hbWUnLFxuICBJTlQ6ICdJbnQnLFxuICBGTE9BVDogJ0Zsb2F0JyxcbiAgU1RSSU5HOiAnU3RyaW5nJyxcbiAgQkxPQ0tfU1RSSU5HOiAnQmxvY2tTdHJpbmcnLFxuICBDT01NRU5UOiAnQ29tbWVudCdcbn0pO1xuLyoqXG4gKiBUaGUgZW51bSB0eXBlIHJlcHJlc2VudGluZyB0aGUgdG9rZW4ga2luZHMgdmFsdWVzLlxuICovXG4iLCJpbXBvcnQgaW5zcGVjdCBmcm9tIFwiLi4vanN1dGlscy9pbnNwZWN0Lm1qc1wiO1xuaW1wb3J0IHsgaXNOb2RlIH0gZnJvbSBcIi4vYXN0Lm1qc1wiO1xuLyoqXG4gKiBBIHZpc2l0b3IgaXMgcHJvdmlkZWQgdG8gdmlzaXQsIGl0IGNvbnRhaW5zIHRoZSBjb2xsZWN0aW9uIG9mXG4gKiByZWxldmFudCBmdW5jdGlvbnMgdG8gYmUgY2FsbGVkIGR1cmluZyB0aGUgdmlzaXRvcidzIHRyYXZlcnNhbC5cbiAqL1xuXG5leHBvcnQgdmFyIFF1ZXJ5RG9jdW1lbnRLZXlzID0ge1xuICBOYW1lOiBbXSxcbiAgRG9jdW1lbnQ6IFsnZGVmaW5pdGlvbnMnXSxcbiAgT3BlcmF0aW9uRGVmaW5pdGlvbjogWyduYW1lJywgJ3ZhcmlhYmxlRGVmaW5pdGlvbnMnLCAnZGlyZWN0aXZlcycsICdzZWxlY3Rpb25TZXQnXSxcbiAgVmFyaWFibGVEZWZpbml0aW9uOiBbJ3ZhcmlhYmxlJywgJ3R5cGUnLCAnZGVmYXVsdFZhbHVlJywgJ2RpcmVjdGl2ZXMnXSxcbiAgVmFyaWFibGU6IFsnbmFtZSddLFxuICBTZWxlY3Rpb25TZXQ6IFsnc2VsZWN0aW9ucyddLFxuICBGaWVsZDogWydhbGlhcycsICduYW1lJywgJ2FyZ3VtZW50cycsICdkaXJlY3RpdmVzJywgJ3NlbGVjdGlvblNldCddLFxuICBBcmd1bWVudDogWyduYW1lJywgJ3ZhbHVlJ10sXG4gIEZyYWdtZW50U3ByZWFkOiBbJ25hbWUnLCAnZGlyZWN0aXZlcyddLFxuICBJbmxpbmVGcmFnbWVudDogWyd0eXBlQ29uZGl0aW9uJywgJ2RpcmVjdGl2ZXMnLCAnc2VsZWN0aW9uU2V0J10sXG4gIEZyYWdtZW50RGVmaW5pdGlvbjogWyduYW1lJywgLy8gTm90ZTogZnJhZ21lbnQgdmFyaWFibGUgZGVmaW5pdGlvbnMgYXJlIGV4cGVyaW1lbnRhbCBhbmQgbWF5IGJlIGNoYW5nZWRcbiAgLy8gb3IgcmVtb3ZlZCBpbiB0aGUgZnV0dXJlLlxuICAndmFyaWFibGVEZWZpbml0aW9ucycsICd0eXBlQ29uZGl0aW9uJywgJ2RpcmVjdGl2ZXMnLCAnc2VsZWN0aW9uU2V0J10sXG4gIEludFZhbHVlOiBbXSxcbiAgRmxvYXRWYWx1ZTogW10sXG4gIFN0cmluZ1ZhbHVlOiBbXSxcbiAgQm9vbGVhblZhbHVlOiBbXSxcbiAgTnVsbFZhbHVlOiBbXSxcbiAgRW51bVZhbHVlOiBbXSxcbiAgTGlzdFZhbHVlOiBbJ3ZhbHVlcyddLFxuICBPYmplY3RWYWx1ZTogWydmaWVsZHMnXSxcbiAgT2JqZWN0RmllbGQ6IFsnbmFtZScsICd2YWx1ZSddLFxuICBEaXJlY3RpdmU6IFsnbmFtZScsICdhcmd1bWVudHMnXSxcbiAgTmFtZWRUeXBlOiBbJ25hbWUnXSxcbiAgTGlzdFR5cGU6IFsndHlwZSddLFxuICBOb25OdWxsVHlwZTogWyd0eXBlJ10sXG4gIFNjaGVtYURlZmluaXRpb246IFsnZGVzY3JpcHRpb24nLCAnZGlyZWN0aXZlcycsICdvcGVyYXRpb25UeXBlcyddLFxuICBPcGVyYXRpb25UeXBlRGVmaW5pdGlvbjogWyd0eXBlJ10sXG4gIFNjYWxhclR5cGVEZWZpbml0aW9uOiBbJ2Rlc2NyaXB0aW9uJywgJ25hbWUnLCAnZGlyZWN0aXZlcyddLFxuICBPYmplY3RUeXBlRGVmaW5pdGlvbjogWydkZXNjcmlwdGlvbicsICduYW1lJywgJ2ludGVyZmFjZXMnLCAnZGlyZWN0aXZlcycsICdmaWVsZHMnXSxcbiAgRmllbGREZWZpbml0aW9uOiBbJ2Rlc2NyaXB0aW9uJywgJ25hbWUnLCAnYXJndW1lbnRzJywgJ3R5cGUnLCAnZGlyZWN0aXZlcyddLFxuICBJbnB1dFZhbHVlRGVmaW5pdGlvbjogWydkZXNjcmlwdGlvbicsICduYW1lJywgJ3R5cGUnLCAnZGVmYXVsdFZhbHVlJywgJ2RpcmVjdGl2ZXMnXSxcbiAgSW50ZXJmYWNlVHlwZURlZmluaXRpb246IFsnZGVzY3JpcHRpb24nLCAnbmFtZScsICdpbnRlcmZhY2VzJywgJ2RpcmVjdGl2ZXMnLCAnZmllbGRzJ10sXG4gIFVuaW9uVHlwZURlZmluaXRpb246IFsnZGVzY3JpcHRpb24nLCAnbmFtZScsICdkaXJlY3RpdmVzJywgJ3R5cGVzJ10sXG4gIEVudW1UeXBlRGVmaW5pdGlvbjogWydkZXNjcmlwdGlvbicsICduYW1lJywgJ2RpcmVjdGl2ZXMnLCAndmFsdWVzJ10sXG4gIEVudW1WYWx1ZURlZmluaXRpb246IFsnZGVzY3JpcHRpb24nLCAnbmFtZScsICdkaXJlY3RpdmVzJ10sXG4gIElucHV0T2JqZWN0VHlwZURlZmluaXRpb246IFsnZGVzY3JpcHRpb24nLCAnbmFtZScsICdkaXJlY3RpdmVzJywgJ2ZpZWxkcyddLFxuICBEaXJlY3RpdmVEZWZpbml0aW9uOiBbJ2Rlc2NyaXB0aW9uJywgJ25hbWUnLCAnYXJndW1lbnRzJywgJ2xvY2F0aW9ucyddLFxuICBTY2hlbWFFeHRlbnNpb246IFsnZGlyZWN0aXZlcycsICdvcGVyYXRpb25UeXBlcyddLFxuICBTY2FsYXJUeXBlRXh0ZW5zaW9uOiBbJ25hbWUnLCAnZGlyZWN0aXZlcyddLFxuICBPYmplY3RUeXBlRXh0ZW5zaW9uOiBbJ25hbWUnLCAnaW50ZXJmYWNlcycsICdkaXJlY3RpdmVzJywgJ2ZpZWxkcyddLFxuICBJbnRlcmZhY2VUeXBlRXh0ZW5zaW9uOiBbJ25hbWUnLCAnaW50ZXJmYWNlcycsICdkaXJlY3RpdmVzJywgJ2ZpZWxkcyddLFxuICBVbmlvblR5cGVFeHRlbnNpb246IFsnbmFtZScsICdkaXJlY3RpdmVzJywgJ3R5cGVzJ10sXG4gIEVudW1UeXBlRXh0ZW5zaW9uOiBbJ25hbWUnLCAnZGlyZWN0aXZlcycsICd2YWx1ZXMnXSxcbiAgSW5wdXRPYmplY3RUeXBlRXh0ZW5zaW9uOiBbJ25hbWUnLCAnZGlyZWN0aXZlcycsICdmaWVsZHMnXVxufTtcbmV4cG9ydCB2YXIgQlJFQUsgPSBPYmplY3QuZnJlZXplKHt9KTtcbi8qKlxuICogdmlzaXQoKSB3aWxsIHdhbGsgdGhyb3VnaCBhbiBBU1QgdXNpbmcgYSBkZXB0aC1maXJzdCB0cmF2ZXJzYWwsIGNhbGxpbmdcbiAqIHRoZSB2aXNpdG9yJ3MgZW50ZXIgZnVuY3Rpb24gYXQgZWFjaCBub2RlIGluIHRoZSB0cmF2ZXJzYWwsIGFuZCBjYWxsaW5nIHRoZVxuICogbGVhdmUgZnVuY3Rpb24gYWZ0ZXIgdmlzaXRpbmcgdGhhdCBub2RlIGFuZCBhbGwgb2YgaXRzIGNoaWxkIG5vZGVzLlxuICpcbiAqIEJ5IHJldHVybmluZyBkaWZmZXJlbnQgdmFsdWVzIGZyb20gdGhlIGVudGVyIGFuZCBsZWF2ZSBmdW5jdGlvbnMsIHRoZVxuICogYmVoYXZpb3Igb2YgdGhlIHZpc2l0b3IgY2FuIGJlIGFsdGVyZWQsIGluY2x1ZGluZyBza2lwcGluZyBvdmVyIGEgc3ViLXRyZWUgb2ZcbiAqIHRoZSBBU1QgKGJ5IHJldHVybmluZyBmYWxzZSksIGVkaXRpbmcgdGhlIEFTVCBieSByZXR1cm5pbmcgYSB2YWx1ZSBvciBudWxsXG4gKiB0byByZW1vdmUgdGhlIHZhbHVlLCBvciB0byBzdG9wIHRoZSB3aG9sZSB0cmF2ZXJzYWwgYnkgcmV0dXJuaW5nIEJSRUFLLlxuICpcbiAqIFdoZW4gdXNpbmcgdmlzaXQoKSB0byBlZGl0IGFuIEFTVCwgdGhlIG9yaWdpbmFsIEFTVCB3aWxsIG5vdCBiZSBtb2RpZmllZCwgYW5kXG4gKiBhIG5ldyB2ZXJzaW9uIG9mIHRoZSBBU1Qgd2l0aCB0aGUgY2hhbmdlcyBhcHBsaWVkIHdpbGwgYmUgcmV0dXJuZWQgZnJvbSB0aGVcbiAqIHZpc2l0IGZ1bmN0aW9uLlxuICpcbiAqICAgICBjb25zdCBlZGl0ZWRBU1QgPSB2aXNpdChhc3QsIHtcbiAqICAgICAgIGVudGVyKG5vZGUsIGtleSwgcGFyZW50LCBwYXRoLCBhbmNlc3RvcnMpIHtcbiAqICAgICAgICAgLy8gQHJldHVyblxuICogICAgICAgICAvLyAgIHVuZGVmaW5lZDogbm8gYWN0aW9uXG4gKiAgICAgICAgIC8vICAgZmFsc2U6IHNraXAgdmlzaXRpbmcgdGhpcyBub2RlXG4gKiAgICAgICAgIC8vICAgdmlzaXRvci5CUkVBSzogc3RvcCB2aXNpdGluZyBhbHRvZ2V0aGVyXG4gKiAgICAgICAgIC8vICAgbnVsbDogZGVsZXRlIHRoaXMgbm9kZVxuICogICAgICAgICAvLyAgIGFueSB2YWx1ZTogcmVwbGFjZSB0aGlzIG5vZGUgd2l0aCB0aGUgcmV0dXJuZWQgdmFsdWVcbiAqICAgICAgIH0sXG4gKiAgICAgICBsZWF2ZShub2RlLCBrZXksIHBhcmVudCwgcGF0aCwgYW5jZXN0b3JzKSB7XG4gKiAgICAgICAgIC8vIEByZXR1cm5cbiAqICAgICAgICAgLy8gICB1bmRlZmluZWQ6IG5vIGFjdGlvblxuICogICAgICAgICAvLyAgIGZhbHNlOiBubyBhY3Rpb25cbiAqICAgICAgICAgLy8gICB2aXNpdG9yLkJSRUFLOiBzdG9wIHZpc2l0aW5nIGFsdG9nZXRoZXJcbiAqICAgICAgICAgLy8gICBudWxsOiBkZWxldGUgdGhpcyBub2RlXG4gKiAgICAgICAgIC8vICAgYW55IHZhbHVlOiByZXBsYWNlIHRoaXMgbm9kZSB3aXRoIHRoZSByZXR1cm5lZCB2YWx1ZVxuICogICAgICAgfVxuICogICAgIH0pO1xuICpcbiAqIEFsdGVybmF0aXZlbHkgdG8gcHJvdmlkaW5nIGVudGVyKCkgYW5kIGxlYXZlKCkgZnVuY3Rpb25zLCBhIHZpc2l0b3IgY2FuXG4gKiBpbnN0ZWFkIHByb3ZpZGUgZnVuY3Rpb25zIG5hbWVkIHRoZSBzYW1lIGFzIHRoZSBraW5kcyBvZiBBU1Qgbm9kZXMsIG9yXG4gKiBlbnRlci9sZWF2ZSB2aXNpdG9ycyBhdCBhIG5hbWVkIGtleSwgbGVhZGluZyB0byBmb3VyIHBlcm11dGF0aW9ucyBvZiB0aGVcbiAqIHZpc2l0b3IgQVBJOlxuICpcbiAqIDEpIE5hbWVkIHZpc2l0b3JzIHRyaWdnZXJlZCB3aGVuIGVudGVyaW5nIGEgbm9kZSBvZiBhIHNwZWNpZmljIGtpbmQuXG4gKlxuICogICAgIHZpc2l0KGFzdCwge1xuICogICAgICAgS2luZChub2RlKSB7XG4gKiAgICAgICAgIC8vIGVudGVyIHRoZSBcIktpbmRcIiBub2RlXG4gKiAgICAgICB9XG4gKiAgICAgfSlcbiAqXG4gKiAyKSBOYW1lZCB2aXNpdG9ycyB0aGF0IHRyaWdnZXIgdXBvbiBlbnRlcmluZyBhbmQgbGVhdmluZyBhIG5vZGUgb2ZcbiAqICAgIGEgc3BlY2lmaWMga2luZC5cbiAqXG4gKiAgICAgdmlzaXQoYXN0LCB7XG4gKiAgICAgICBLaW5kOiB7XG4gKiAgICAgICAgIGVudGVyKG5vZGUpIHtcbiAqICAgICAgICAgICAvLyBlbnRlciB0aGUgXCJLaW5kXCIgbm9kZVxuICogICAgICAgICB9XG4gKiAgICAgICAgIGxlYXZlKG5vZGUpIHtcbiAqICAgICAgICAgICAvLyBsZWF2ZSB0aGUgXCJLaW5kXCIgbm9kZVxuICogICAgICAgICB9XG4gKiAgICAgICB9XG4gKiAgICAgfSlcbiAqXG4gKiAzKSBHZW5lcmljIHZpc2l0b3JzIHRoYXQgdHJpZ2dlciB1cG9uIGVudGVyaW5nIGFuZCBsZWF2aW5nIGFueSBub2RlLlxuICpcbiAqICAgICB2aXNpdChhc3QsIHtcbiAqICAgICAgIGVudGVyKG5vZGUpIHtcbiAqICAgICAgICAgLy8gZW50ZXIgYW55IG5vZGVcbiAqICAgICAgIH0sXG4gKiAgICAgICBsZWF2ZShub2RlKSB7XG4gKiAgICAgICAgIC8vIGxlYXZlIGFueSBub2RlXG4gKiAgICAgICB9XG4gKiAgICAgfSlcbiAqXG4gKiA0KSBQYXJhbGxlbCB2aXNpdG9ycyBmb3IgZW50ZXJpbmcgYW5kIGxlYXZpbmcgbm9kZXMgb2YgYSBzcGVjaWZpYyBraW5kLlxuICpcbiAqICAgICB2aXNpdChhc3QsIHtcbiAqICAgICAgIGVudGVyOiB7XG4gKiAgICAgICAgIEtpbmQobm9kZSkge1xuICogICAgICAgICAgIC8vIGVudGVyIHRoZSBcIktpbmRcIiBub2RlXG4gKiAgICAgICAgIH1cbiAqICAgICAgIH0sXG4gKiAgICAgICBsZWF2ZToge1xuICogICAgICAgICBLaW5kKG5vZGUpIHtcbiAqICAgICAgICAgICAvLyBsZWF2ZSB0aGUgXCJLaW5kXCIgbm9kZVxuICogICAgICAgICB9XG4gKiAgICAgICB9XG4gKiAgICAgfSlcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gdmlzaXQocm9vdCwgdmlzaXRvcikge1xuICB2YXIgdmlzaXRvcktleXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IFF1ZXJ5RG9jdW1lbnRLZXlzO1xuXG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVmLWluaXQgKi9cbiAgdmFyIHN0YWNrID0gdW5kZWZpbmVkO1xuICB2YXIgaW5BcnJheSA9IEFycmF5LmlzQXJyYXkocm9vdCk7XG4gIHZhciBrZXlzID0gW3Jvb3RdO1xuICB2YXIgaW5kZXggPSAtMTtcbiAgdmFyIGVkaXRzID0gW107XG4gIHZhciBub2RlID0gdW5kZWZpbmVkO1xuICB2YXIga2V5ID0gdW5kZWZpbmVkO1xuICB2YXIgcGFyZW50ID0gdW5kZWZpbmVkO1xuICB2YXIgcGF0aCA9IFtdO1xuICB2YXIgYW5jZXN0b3JzID0gW107XG4gIHZhciBuZXdSb290ID0gcm9vdDtcbiAgLyogZXNsaW50LWVuYWJsZSBuby11bmRlZi1pbml0ICovXG5cbiAgZG8ge1xuICAgIGluZGV4Kys7XG4gICAgdmFyIGlzTGVhdmluZyA9IGluZGV4ID09PSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgaXNFZGl0ZWQgPSBpc0xlYXZpbmcgJiYgZWRpdHMubGVuZ3RoICE9PSAwO1xuXG4gICAgaWYgKGlzTGVhdmluZykge1xuICAgICAga2V5ID0gYW5jZXN0b3JzLmxlbmd0aCA9PT0gMCA/IHVuZGVmaW5lZCA6IHBhdGhbcGF0aC5sZW5ndGggLSAxXTtcbiAgICAgIG5vZGUgPSBwYXJlbnQ7XG4gICAgICBwYXJlbnQgPSBhbmNlc3RvcnMucG9wKCk7XG5cbiAgICAgIGlmIChpc0VkaXRlZCkge1xuICAgICAgICBpZiAoaW5BcnJheSkge1xuICAgICAgICAgIG5vZGUgPSBub2RlLnNsaWNlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIGNsb25lID0ge307XG5cbiAgICAgICAgICBmb3IgKHZhciBfaTIgPSAwLCBfT2JqZWN0JGtleXMyID0gT2JqZWN0LmtleXMobm9kZSk7IF9pMiA8IF9PYmplY3Qka2V5czIubGVuZ3RoOyBfaTIrKykge1xuICAgICAgICAgICAgdmFyIGsgPSBfT2JqZWN0JGtleXMyW19pMl07XG4gICAgICAgICAgICBjbG9uZVtrXSA9IG5vZGVba107XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbm9kZSA9IGNsb25lO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGVkaXRPZmZzZXQgPSAwO1xuXG4gICAgICAgIGZvciAodmFyIGlpID0gMDsgaWkgPCBlZGl0cy5sZW5ndGg7IGlpKyspIHtcbiAgICAgICAgICB2YXIgZWRpdEtleSA9IGVkaXRzW2lpXVswXTtcbiAgICAgICAgICB2YXIgZWRpdFZhbHVlID0gZWRpdHNbaWldWzFdO1xuXG4gICAgICAgICAgaWYgKGluQXJyYXkpIHtcbiAgICAgICAgICAgIGVkaXRLZXkgLT0gZWRpdE9mZnNldDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoaW5BcnJheSAmJiBlZGl0VmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgIG5vZGUuc3BsaWNlKGVkaXRLZXksIDEpO1xuICAgICAgICAgICAgZWRpdE9mZnNldCsrO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBub2RlW2VkaXRLZXldID0gZWRpdFZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpbmRleCA9IHN0YWNrLmluZGV4O1xuICAgICAga2V5cyA9IHN0YWNrLmtleXM7XG4gICAgICBlZGl0cyA9IHN0YWNrLmVkaXRzO1xuICAgICAgaW5BcnJheSA9IHN0YWNrLmluQXJyYXk7XG4gICAgICBzdGFjayA9IHN0YWNrLnByZXY7XG4gICAgfSBlbHNlIHtcbiAgICAgIGtleSA9IHBhcmVudCA/IGluQXJyYXkgPyBpbmRleCA6IGtleXNbaW5kZXhdIDogdW5kZWZpbmVkO1xuICAgICAgbm9kZSA9IHBhcmVudCA/IHBhcmVudFtrZXldIDogbmV3Um9vdDtcblxuICAgICAgaWYgKG5vZGUgPT09IG51bGwgfHwgbm9kZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAocGFyZW50KSB7XG4gICAgICAgIHBhdGgucHVzaChrZXkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciByZXN1bHQgPSB2b2lkIDA7XG5cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkobm9kZSkpIHtcbiAgICAgIGlmICghaXNOb2RlKG5vZGUpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgQVNUIE5vZGU6IFwiLmNvbmNhdChpbnNwZWN0KG5vZGUpLCBcIi5cIikpO1xuICAgICAgfVxuXG4gICAgICB2YXIgdmlzaXRGbiA9IGdldFZpc2l0Rm4odmlzaXRvciwgbm9kZS5raW5kLCBpc0xlYXZpbmcpO1xuXG4gICAgICBpZiAodmlzaXRGbikge1xuICAgICAgICByZXN1bHQgPSB2aXNpdEZuLmNhbGwodmlzaXRvciwgbm9kZSwga2V5LCBwYXJlbnQsIHBhdGgsIGFuY2VzdG9ycyk7XG5cbiAgICAgICAgaWYgKHJlc3VsdCA9PT0gQlJFQUspIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyZXN1bHQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgaWYgKCFpc0xlYXZpbmcpIHtcbiAgICAgICAgICAgIHBhdGgucG9wKCk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAocmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBlZGl0cy5wdXNoKFtrZXksIHJlc3VsdF0pO1xuXG4gICAgICAgICAgaWYgKCFpc0xlYXZpbmcpIHtcbiAgICAgICAgICAgIGlmIChpc05vZGUocmVzdWx0KSkge1xuICAgICAgICAgICAgICBub2RlID0gcmVzdWx0O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGF0aC5wb3AoKTtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkICYmIGlzRWRpdGVkKSB7XG4gICAgICBlZGl0cy5wdXNoKFtrZXksIG5vZGVdKTtcbiAgICB9XG5cbiAgICBpZiAoaXNMZWF2aW5nKSB7XG4gICAgICBwYXRoLnBvcCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgX3Zpc2l0b3JLZXlzJG5vZGUka2luO1xuXG4gICAgICBzdGFjayA9IHtcbiAgICAgICAgaW5BcnJheTogaW5BcnJheSxcbiAgICAgICAgaW5kZXg6IGluZGV4LFxuICAgICAgICBrZXlzOiBrZXlzLFxuICAgICAgICBlZGl0czogZWRpdHMsXG4gICAgICAgIHByZXY6IHN0YWNrXG4gICAgICB9O1xuICAgICAgaW5BcnJheSA9IEFycmF5LmlzQXJyYXkobm9kZSk7XG4gICAgICBrZXlzID0gaW5BcnJheSA/IG5vZGUgOiAoX3Zpc2l0b3JLZXlzJG5vZGUka2luID0gdmlzaXRvcktleXNbbm9kZS5raW5kXSkgIT09IG51bGwgJiYgX3Zpc2l0b3JLZXlzJG5vZGUka2luICE9PSB2b2lkIDAgPyBfdmlzaXRvcktleXMkbm9kZSRraW4gOiBbXTtcbiAgICAgIGluZGV4ID0gLTE7XG4gICAgICBlZGl0cyA9IFtdO1xuXG4gICAgICBpZiAocGFyZW50KSB7XG4gICAgICAgIGFuY2VzdG9ycy5wdXNoKHBhcmVudCk7XG4gICAgICB9XG5cbiAgICAgIHBhcmVudCA9IG5vZGU7XG4gICAgfVxuICB9IHdoaWxlIChzdGFjayAhPT0gdW5kZWZpbmVkKTtcblxuICBpZiAoZWRpdHMubGVuZ3RoICE9PSAwKSB7XG4gICAgbmV3Um9vdCA9IGVkaXRzW2VkaXRzLmxlbmd0aCAtIDFdWzFdO1xuICB9XG5cbiAgcmV0dXJuIG5ld1Jvb3Q7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgdmlzaXRvciBpbnN0YW5jZSB3aGljaCBkZWxlZ2F0ZXMgdG8gbWFueSB2aXNpdG9ycyB0byBydW4gaW5cbiAqIHBhcmFsbGVsLiBFYWNoIHZpc2l0b3Igd2lsbCBiZSB2aXNpdGVkIGZvciBlYWNoIG5vZGUgYmVmb3JlIG1vdmluZyBvbi5cbiAqXG4gKiBJZiBhIHByaW9yIHZpc2l0b3IgZWRpdHMgYSBub2RlLCBubyBmb2xsb3dpbmcgdmlzaXRvcnMgd2lsbCBzZWUgdGhhdCBub2RlLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB2aXNpdEluUGFyYWxsZWwodmlzaXRvcnMpIHtcbiAgdmFyIHNraXBwaW5nID0gbmV3IEFycmF5KHZpc2l0b3JzLmxlbmd0aCk7XG4gIHJldHVybiB7XG4gICAgZW50ZXI6IGZ1bmN0aW9uIGVudGVyKG5vZGUpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmlzaXRvcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHNraXBwaW5nW2ldID09IG51bGwpIHtcbiAgICAgICAgICB2YXIgZm4gPSBnZXRWaXNpdEZuKHZpc2l0b3JzW2ldLCBub2RlLmtpbmQsXG4gICAgICAgICAgLyogaXNMZWF2aW5nICovXG4gICAgICAgICAgZmFsc2UpO1xuXG4gICAgICAgICAgaWYgKGZuKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gZm4uYXBwbHkodmlzaXRvcnNbaV0sIGFyZ3VtZW50cyk7XG5cbiAgICAgICAgICAgIGlmIChyZXN1bHQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgIHNraXBwaW5nW2ldID0gbm9kZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzdWx0ID09PSBCUkVBSykge1xuICAgICAgICAgICAgICBza2lwcGluZ1tpXSA9IEJSRUFLO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChyZXN1bHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgbGVhdmU6IGZ1bmN0aW9uIGxlYXZlKG5vZGUpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmlzaXRvcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHNraXBwaW5nW2ldID09IG51bGwpIHtcbiAgICAgICAgICB2YXIgZm4gPSBnZXRWaXNpdEZuKHZpc2l0b3JzW2ldLCBub2RlLmtpbmQsXG4gICAgICAgICAgLyogaXNMZWF2aW5nICovXG4gICAgICAgICAgdHJ1ZSk7XG5cbiAgICAgICAgICBpZiAoZm4pIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBmbi5hcHBseSh2aXNpdG9yc1tpXSwgYXJndW1lbnRzKTtcblxuICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gQlJFQUspIHtcbiAgICAgICAgICAgICAgc2tpcHBpbmdbaV0gPSBCUkVBSztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzdWx0ICE9PSB1bmRlZmluZWQgJiYgcmVzdWx0ICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChza2lwcGluZ1tpXSA9PT0gbm9kZSkge1xuICAgICAgICAgIHNraXBwaW5nW2ldID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cbi8qKlxuICogR2l2ZW4gYSB2aXNpdG9yIGluc3RhbmNlLCBpZiBpdCBpcyBsZWF2aW5nIG9yIG5vdCwgYW5kIGEgbm9kZSBraW5kLCByZXR1cm5cbiAqIHRoZSBmdW5jdGlvbiB0aGUgdmlzaXRvciBydW50aW1lIHNob3VsZCBjYWxsLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRWaXNpdEZuKHZpc2l0b3IsIGtpbmQsIGlzTGVhdmluZykge1xuICB2YXIga2luZFZpc2l0b3IgPSB2aXNpdG9yW2tpbmRdO1xuXG4gIGlmIChraW5kVmlzaXRvcikge1xuICAgIGlmICghaXNMZWF2aW5nICYmIHR5cGVvZiBraW5kVmlzaXRvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8geyBLaW5kKCkge30gfVxuICAgICAgcmV0dXJuIGtpbmRWaXNpdG9yO1xuICAgIH1cblxuICAgIHZhciBraW5kU3BlY2lmaWNWaXNpdG9yID0gaXNMZWF2aW5nID8ga2luZFZpc2l0b3IubGVhdmUgOiBraW5kVmlzaXRvci5lbnRlcjtcblxuICAgIGlmICh0eXBlb2Yga2luZFNwZWNpZmljVmlzaXRvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8geyBLaW5kOiB7IGVudGVyKCkge30sIGxlYXZlKCkge30gfSB9XG4gICAgICByZXR1cm4ga2luZFNwZWNpZmljVmlzaXRvcjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIHNwZWNpZmljVmlzaXRvciA9IGlzTGVhdmluZyA/IHZpc2l0b3IubGVhdmUgOiB2aXNpdG9yLmVudGVyO1xuXG4gICAgaWYgKHNwZWNpZmljVmlzaXRvcikge1xuICAgICAgaWYgKHR5cGVvZiBzcGVjaWZpY1Zpc2l0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgLy8geyBlbnRlcigpIHt9LCBsZWF2ZSgpIHt9IH1cbiAgICAgICAgcmV0dXJuIHNwZWNpZmljVmlzaXRvcjtcbiAgICAgIH1cblxuICAgICAgdmFyIHNwZWNpZmljS2luZFZpc2l0b3IgPSBzcGVjaWZpY1Zpc2l0b3Jba2luZF07XG5cbiAgICAgIGlmICh0eXBlb2Ygc3BlY2lmaWNLaW5kVmlzaXRvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAvLyB7IGVudGVyOiB7IEtpbmQoKSB7fSB9LCBsZWF2ZTogeyBLaW5kKCkge30gfSB9XG4gICAgICAgIHJldHVybiBzcGVjaWZpY0tpbmRWaXNpdG9yO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgU1lNQk9MX0lURVJBVE9SIH0gZnJvbSBcIi4vc3ltYm9scy5tanNcIjtcblxuLyogZXNsaW50LWRpc2FibGUgbm8tcmVkZWNsYXJlICovXG4vLyAkRmxvd0ZpeE1lW25hbWUtYWxyZWFkeS1ib3VuZF1cbnZhciBhcnJheUZyb20gPSBBcnJheS5mcm9tIHx8IGZ1bmN0aW9uIChvYmosIG1hcEZuLCB0aGlzQXJnKSB7XG4gIGlmIChvYmogPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FycmF5LmZyb20gcmVxdWlyZXMgYW4gYXJyYXktbGlrZSBvYmplY3QgLSBub3QgbnVsbCBvciB1bmRlZmluZWQnKTtcbiAgfSAvLyBJcyBJdGVyYWJsZT9cblxuXG4gIHZhciBpdGVyYXRvck1ldGhvZCA9IG9ialtTWU1CT0xfSVRFUkFUT1JdO1xuXG4gIGlmICh0eXBlb2YgaXRlcmF0b3JNZXRob2QgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgaXRlcmF0b3IgPSBpdGVyYXRvck1ldGhvZC5jYWxsKG9iaik7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHZhciBzdGVwO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgKytpKSB7XG4gICAgICByZXN1bHQucHVzaChtYXBGbi5jYWxsKHRoaXNBcmcsIHN0ZXAudmFsdWUsIGkpKTsgLy8gSW5maW5pdGUgSXRlcmF0b3JzIGNvdWxkIGNhdXNlIGZvckVhY2ggdG8gcnVuIGZvcmV2ZXIuXG4gICAgICAvLyBBZnRlciBhIHZlcnkgbGFyZ2UgbnVtYmVyIG9mIGl0ZXJhdGlvbnMsIHByb2R1Y2UgYW4gZXJyb3IuXG4gICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWYgKFRvbyBiaWcgdG8gYWN0dWFsbHkgdGVzdClcblxuICAgICAgaWYgKGkgPiA5OTk5OTk5KSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ05lYXItaW5maW5pdGUgaXRlcmF0aW9uLicpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH0gLy8gSXMgQXJyYXkgbGlrZT9cblxuXG4gIHZhciBsZW5ndGggPSBvYmoubGVuZ3RoO1xuXG4gIGlmICh0eXBlb2YgbGVuZ3RoID09PSAnbnVtYmVyJyAmJiBsZW5ndGggPj0gMCAmJiBsZW5ndGggJSAxID09PSAwKSB7XG4gICAgdmFyIF9yZXN1bHQgPSBbXTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsZW5ndGg7ICsrX2kpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBfaSkpIHtcbiAgICAgICAgX3Jlc3VsdC5wdXNoKG1hcEZuLmNhbGwodGhpc0FyZywgb2JqW19pXSwgX2kpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gX3Jlc3VsdDtcbiAgfVxuXG4gIHJldHVybiBbXTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGFycmF5RnJvbTtcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXJlZGVjbGFyZSAqL1xuLy8gJEZsb3dGaXhNZVtuYW1lLWFscmVhZHktYm91bmRdXG52YXIgZmluZCA9IEFycmF5LnByb3RvdHlwZS5maW5kID8gZnVuY3Rpb24gKGxpc3QsIHByZWRpY2F0ZSkge1xuICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmZpbmQuY2FsbChsaXN0LCBwcmVkaWNhdGUpO1xufSA6IGZ1bmN0aW9uIChsaXN0LCBwcmVkaWNhdGUpIHtcbiAgZm9yICh2YXIgX2kyID0gMDsgX2kyIDwgbGlzdC5sZW5ndGg7IF9pMisrKSB7XG4gICAgdmFyIHZhbHVlID0gbGlzdFtfaTJdO1xuXG4gICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCBmaW5kO1xuIiwiLyogZXNsaW50LWRpc2FibGUgbm8tcmVkZWNsYXJlICovXG4vLyAkRmxvd0ZpeE1lW25hbWUtYWxyZWFkeS1ib3VuZF0gd29ya2Fyb3VuZCBmb3I6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mbG93L2lzc3Vlcy80NDQxXG52YXIgaXNGaW5pdGVQb2x5ZmlsbCA9IE51bWJlci5pc0Zpbml0ZSB8fCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgaXNGaW5pdGUodmFsdWUpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgaXNGaW5pdGVQb2x5ZmlsbDtcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXJlZGVjbGFyZSAqL1xuLy8gJEZsb3dGaXhNZVtuYW1lLWFscmVhZHktYm91bmRdIHdvcmthcm91bmQgZm9yOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmxvdy9pc3N1ZXMvNDQ0MVxudmFyIGlzSW50ZWdlciA9IE51bWJlci5pc0ludGVnZXIgfHwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInICYmIGlzRmluaXRlKHZhbHVlKSAmJiBNYXRoLmZsb29yKHZhbHVlKSA9PT0gdmFsdWU7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBpc0ludGVnZXI7XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBuby1yZWRlY2xhcmUgKi9cbi8vICRGbG93Rml4TWVbbmFtZS1hbHJlYWR5LWJvdW5kXSB3b3JrYXJvdW5kIGZvcjogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2Zsb3cvaXNzdWVzLzQ0NDFcbnZhciBvYmplY3RFbnRyaWVzID0gT2JqZWN0LmVudHJpZXMgfHwgZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBba2V5LCBvYmpba2V5XV07XG4gIH0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgb2JqZWN0RW50cmllcztcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXJlZGVjbGFyZSAqL1xuLy8gJEZsb3dGaXhNZVtuYW1lLWFscmVhZHktYm91bmRdIHdvcmthcm91bmQgZm9yOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmxvdy9pc3N1ZXMvNDQ0MVxudmFyIG9iamVjdFZhbHVlcyA9IE9iamVjdC52YWx1ZXMgfHwgZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBvYmpba2V5XTtcbiAgfSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBvYmplY3RWYWx1ZXM7XG4iLCIvLyBJbiBFUzIwMTUgKG9yIGEgcG9seWZpbGxlZCkgZW52aXJvbm1lbnQsIHRoaXMgd2lsbCBiZSBTeW1ib2wuaXRlcmF0b3Jcbi8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0IChTZWU6ICdodHRwczovL2dpdGh1Yi5jb20vZ3JhcGhxbC9ncmFwaHFsLWpzL2lzc3Vlcy8yMzE3JylcbmV4cG9ydCB2YXIgU1lNQk9MX0lURVJBVE9SID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuaXRlcmF0b3IgIT0gbnVsbCA/IFN5bWJvbC5pdGVyYXRvciA6ICdAQGl0ZXJhdG9yJzsgLy8gSW4gRVMyMDE3IChvciBhIHBvbHlmaWxsZWQpIGVudmlyb25tZW50LCB0aGlzIHdpbGwgYmUgU3ltYm9sLmFzeW5jSXRlcmF0b3Jcbi8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0IChTZWU6ICdodHRwczovL2dpdGh1Yi5jb20vZ3JhcGhxbC9ncmFwaHFsLWpzL2lzc3Vlcy8yMzE3JylcblxuZXhwb3J0IHZhciBTWU1CT0xfQVNZTkNfSVRFUkFUT1IgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5hc3luY0l0ZXJhdG9yICE9IG51bGwgPyBTeW1ib2wuYXN5bmNJdGVyYXRvciA6ICdAQGFzeW5jSXRlcmF0b3InOyAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAoU2VlOiAnaHR0cHM6Ly9naXRodWIuY29tL2dyYXBocWwvZ3JhcGhxbC1qcy9pc3N1ZXMvMjMxNycpXG5cbmV4cG9ydCB2YXIgU1lNQk9MX1RPX1NUUklOR19UQUcgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC50b1N0cmluZ1RhZyAhPSBudWxsID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogJ0BAdG9TdHJpbmdUYWcnO1xuIiwiZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuaW1wb3J0IHsgU1lNQk9MX0FTWU5DX0lURVJBVE9SIH0gZnJvbSBcIi4uL3BvbHlmaWxscy9zeW1ib2xzLm1qc1wiO1xuXG4vKipcbiAqIEdpdmVuIGFuIEFzeW5jSXRlcmFibGUgYW5kIGEgY2FsbGJhY2sgZnVuY3Rpb24sIHJldHVybiBhbiBBc3luY0l0ZXJhdG9yXG4gKiB3aGljaCBwcm9kdWNlcyB2YWx1ZXMgbWFwcGVkIHZpYSBjYWxsaW5nIHRoZSBjYWxsYmFjayBmdW5jdGlvbi5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWFwQXN5bmNJdGVyYXRvcihpdGVyYWJsZSwgY2FsbGJhY2ssIHJlamVjdENhbGxiYWNrKSB7XG4gIC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtTWU1CT0xfQVNZTkNfSVRFUkFUT1JdO1xuICB2YXIgaXRlcmF0b3IgPSBpdGVyYXRvck1ldGhvZC5jYWxsKGl0ZXJhYmxlKTtcbiAgdmFyICRyZXR1cm47XG4gIHZhciBhYnJ1cHRDbG9zZTtcblxuICBpZiAodHlwZW9mIGl0ZXJhdG9yLnJldHVybiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICRyZXR1cm4gPSBpdGVyYXRvci5yZXR1cm47XG5cbiAgICBhYnJ1cHRDbG9zZSA9IGZ1bmN0aW9uIGFicnVwdENsb3NlKGVycm9yKSB7XG4gICAgICB2YXIgcmV0aHJvdyA9IGZ1bmN0aW9uIHJldGhyb3coKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gJHJldHVybi5jYWxsKGl0ZXJhdG9yKS50aGVuKHJldGhyb3csIHJldGhyb3cpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBtYXBSZXN1bHQocmVzdWx0KSB7XG4gICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0IDogYXN5bmNNYXBWYWx1ZShyZXN1bHQudmFsdWUsIGNhbGxiYWNrKS50aGVuKGl0ZXJhdG9yUmVzdWx0LCBhYnJ1cHRDbG9zZSk7XG4gIH1cblxuICB2YXIgbWFwUmVqZWN0O1xuXG4gIGlmIChyZWplY3RDYWxsYmFjaykge1xuICAgIC8vIENhcHR1cmUgcmVqZWN0Q2FsbGJhY2sgdG8gZW5zdXJlIGl0IGNhbm5vdCBiZSBudWxsLlxuICAgIHZhciByZWplY3QgPSByZWplY3RDYWxsYmFjaztcblxuICAgIG1hcFJlamVjdCA9IGZ1bmN0aW9uIG1hcFJlamVjdChlcnJvcikge1xuICAgICAgcmV0dXJuIGFzeW5jTWFwVmFsdWUoZXJyb3IsIHJlamVjdCkudGhlbihpdGVyYXRvclJlc3VsdCwgYWJydXB0Q2xvc2UpO1xuICAgIH07XG4gIH1cbiAgLyogVE9ETzogRmxvdyBkb2Vzbid0IHN1cHBvcnQgc3ltYm9scyBhcyBrZXlzOlxuICAgICBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmxvdy9pc3N1ZXMvMzI1OCAqL1xuXG5cbiAgcmV0dXJuIF9kZWZpbmVQcm9wZXJ0eSh7XG4gICAgbmV4dDogZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHJldHVybiBpdGVyYXRvci5uZXh0KCkudGhlbihtYXBSZXN1bHQsIG1hcFJlamVjdCk7XG4gICAgfSxcbiAgICByZXR1cm46IGZ1bmN0aW9uIF9yZXR1cm4oKSB7XG4gICAgICByZXR1cm4gJHJldHVybiA/ICRyZXR1cm4uY2FsbChpdGVyYXRvcikudGhlbihtYXBSZXN1bHQsIG1hcFJlamVjdCkgOiBQcm9taXNlLnJlc29sdmUoe1xuICAgICAgICB2YWx1ZTogdW5kZWZpbmVkLFxuICAgICAgICBkb25lOiB0cnVlXG4gICAgICB9KTtcbiAgICB9LFxuICAgIHRocm93OiBmdW5jdGlvbiBfdGhyb3coZXJyb3IpIHtcbiAgICAgIGlmICh0eXBlb2YgaXRlcmF0b3IudGhyb3cgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yLnRocm93KGVycm9yKS50aGVuKG1hcFJlc3VsdCwgbWFwUmVqZWN0KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKS5jYXRjaChhYnJ1cHRDbG9zZSk7XG4gICAgfVxuICB9LCBTWU1CT0xfQVNZTkNfSVRFUkFUT1IsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGFzeW5jTWFwVmFsdWUodmFsdWUsIGNhbGxiYWNrKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgIHJldHVybiByZXNvbHZlKGNhbGxiYWNrKHZhbHVlKSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBpdGVyYXRvclJlc3VsdCh2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIHZhbHVlOiB2YWx1ZSxcbiAgICBkb25lOiBmYWxzZVxuICB9O1xufVxuIiwiaW1wb3J0IGluc3BlY3QgZnJvbSBcIi4uL2pzdXRpbHMvaW5zcGVjdC5tanNcIjtcbmltcG9ydCBpc0FzeW5jSXRlcmFibGUgZnJvbSBcIi4uL2pzdXRpbHMvaXNBc3luY0l0ZXJhYmxlLm1qc1wiO1xuaW1wb3J0IHsgYWRkUGF0aCwgcGF0aFRvQXJyYXkgfSBmcm9tIFwiLi4vanN1dGlscy9QYXRoLm1qc1wiO1xuaW1wb3J0IHsgR3JhcGhRTEVycm9yIH0gZnJvbSBcIi4uL2Vycm9yL0dyYXBoUUxFcnJvci5tanNcIjtcbmltcG9ydCB7IGxvY2F0ZWRFcnJvciB9IGZyb20gXCIuLi9lcnJvci9sb2NhdGVkRXJyb3IubWpzXCI7XG5pbXBvcnQgeyBnZXRBcmd1bWVudFZhbHVlcyB9IGZyb20gXCIuLi9leGVjdXRpb24vdmFsdWVzLm1qc1wiO1xuaW1wb3J0IHsgYXNzZXJ0VmFsaWRFeGVjdXRpb25Bcmd1bWVudHMsIGJ1aWxkRXhlY3V0aW9uQ29udGV4dCwgYnVpbGRSZXNvbHZlSW5mbywgY29sbGVjdEZpZWxkcywgZXhlY3V0ZSwgZ2V0RmllbGREZWYgfSBmcm9tIFwiLi4vZXhlY3V0aW9uL2V4ZWN1dGUubWpzXCI7XG5pbXBvcnQgeyBnZXRPcGVyYXRpb25Sb290VHlwZSB9IGZyb20gXCIuLi91dGlsaXRpZXMvZ2V0T3BlcmF0aW9uUm9vdFR5cGUubWpzXCI7XG5pbXBvcnQgbWFwQXN5bmNJdGVyYXRvciBmcm9tIFwiLi9tYXBBc3luY0l0ZXJhdG9yLm1qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHN1YnNjcmliZShhcmdzT3JTY2hlbWEsIGRvY3VtZW50LCByb290VmFsdWUsIGNvbnRleHRWYWx1ZSwgdmFyaWFibGVWYWx1ZXMsIG9wZXJhdGlvbk5hbWUsIGZpZWxkUmVzb2x2ZXIsIHN1YnNjcmliZUZpZWxkUmVzb2x2ZXIpIHtcbiAgLyogZXNsaW50LWVuYWJsZSBuby1yZWRlY2xhcmUgKi9cbiAgLy8gRXh0cmFjdCBhcmd1bWVudHMgZnJvbSBvYmplY3QgYXJncyBpZiBwcm92aWRlZC5cbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBzdWJzY3JpYmVJbXBsKGFyZ3NPclNjaGVtYSkgOiBzdWJzY3JpYmVJbXBsKHtcbiAgICBzY2hlbWE6IGFyZ3NPclNjaGVtYSxcbiAgICBkb2N1bWVudDogZG9jdW1lbnQsXG4gICAgcm9vdFZhbHVlOiByb290VmFsdWUsXG4gICAgY29udGV4dFZhbHVlOiBjb250ZXh0VmFsdWUsXG4gICAgdmFyaWFibGVWYWx1ZXM6IHZhcmlhYmxlVmFsdWVzLFxuICAgIG9wZXJhdGlvbk5hbWU6IG9wZXJhdGlvbk5hbWUsXG4gICAgZmllbGRSZXNvbHZlcjogZmllbGRSZXNvbHZlcixcbiAgICBzdWJzY3JpYmVGaWVsZFJlc29sdmVyOiBzdWJzY3JpYmVGaWVsZFJlc29sdmVyXG4gIH0pO1xufVxuLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGNoZWNrcyBpZiB0aGUgZXJyb3IgaXMgYSBHcmFwaFFMRXJyb3IuIElmIGl0IGlzLCByZXBvcnQgaXQgYXNcbiAqIGFuIEV4ZWN1dGlvblJlc3VsdCwgY29udGFpbmluZyBvbmx5IGVycm9ycyBhbmQgbm8gZGF0YS4gT3RoZXJ3aXNlIHRyZWF0IHRoZVxuICogZXJyb3IgYXMgYSBzeXN0ZW0tY2xhc3MgZXJyb3IgYW5kIHJlLXRocm93IGl0LlxuICovXG5cbmZ1bmN0aW9uIHJlcG9ydEdyYXBoUUxFcnJvcihlcnJvcikge1xuICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBHcmFwaFFMRXJyb3IpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZXJyb3JzOiBbZXJyb3JdXG4gICAgfTtcbiAgfVxuXG4gIHRocm93IGVycm9yO1xufVxuXG5mdW5jdGlvbiBzdWJzY3JpYmVJbXBsKGFyZ3MpIHtcbiAgdmFyIHNjaGVtYSA9IGFyZ3Muc2NoZW1hLFxuICAgICAgZG9jdW1lbnQgPSBhcmdzLmRvY3VtZW50LFxuICAgICAgcm9vdFZhbHVlID0gYXJncy5yb290VmFsdWUsXG4gICAgICBjb250ZXh0VmFsdWUgPSBhcmdzLmNvbnRleHRWYWx1ZSxcbiAgICAgIHZhcmlhYmxlVmFsdWVzID0gYXJncy52YXJpYWJsZVZhbHVlcyxcbiAgICAgIG9wZXJhdGlvbk5hbWUgPSBhcmdzLm9wZXJhdGlvbk5hbWUsXG4gICAgICBmaWVsZFJlc29sdmVyID0gYXJncy5maWVsZFJlc29sdmVyLFxuICAgICAgc3Vic2NyaWJlRmllbGRSZXNvbHZlciA9IGFyZ3Muc3Vic2NyaWJlRmllbGRSZXNvbHZlcjtcbiAgdmFyIHNvdXJjZVByb21pc2UgPSBjcmVhdGVTb3VyY2VFdmVudFN0cmVhbShzY2hlbWEsIGRvY3VtZW50LCByb290VmFsdWUsIGNvbnRleHRWYWx1ZSwgdmFyaWFibGVWYWx1ZXMsIG9wZXJhdGlvbk5hbWUsIHN1YnNjcmliZUZpZWxkUmVzb2x2ZXIpOyAvLyBGb3IgZWFjaCBwYXlsb2FkIHlpZWxkZWQgZnJvbSBhIHN1YnNjcmlwdGlvbiwgbWFwIGl0IG92ZXIgdGhlIG5vcm1hbFxuICAvLyBHcmFwaFFMIGBleGVjdXRlYCBmdW5jdGlvbiwgd2l0aCBgcGF5bG9hZGAgYXMgdGhlIHJvb3RWYWx1ZS5cbiAgLy8gVGhpcyBpbXBsZW1lbnRzIHRoZSBcIk1hcFNvdXJjZVRvUmVzcG9uc2VFdmVudFwiIGFsZ29yaXRobSBkZXNjcmliZWQgaW5cbiAgLy8gdGhlIEdyYXBoUUwgc3BlY2lmaWNhdGlvbi4gVGhlIGBleGVjdXRlYCBmdW5jdGlvbiBwcm92aWRlcyB0aGVcbiAgLy8gXCJFeGVjdXRlU3Vic2NyaXB0aW9uRXZlbnRcIiBhbGdvcml0aG0sIGFzIGl0IGlzIG5lYXJseSBpZGVudGljYWwgdG8gdGhlXG4gIC8vIFwiRXhlY3V0ZVF1ZXJ5XCIgYWxnb3JpdGhtLCBmb3Igd2hpY2ggYGV4ZWN1dGVgIGlzIGFsc28gdXNlZC5cblxuICB2YXIgbWFwU291cmNlVG9SZXNwb25zZSA9IGZ1bmN0aW9uIG1hcFNvdXJjZVRvUmVzcG9uc2UocGF5bG9hZCkge1xuICAgIHJldHVybiBleGVjdXRlKHtcbiAgICAgIHNjaGVtYTogc2NoZW1hLFxuICAgICAgZG9jdW1lbnQ6IGRvY3VtZW50LFxuICAgICAgcm9vdFZhbHVlOiBwYXlsb2FkLFxuICAgICAgY29udGV4dFZhbHVlOiBjb250ZXh0VmFsdWUsXG4gICAgICB2YXJpYWJsZVZhbHVlczogdmFyaWFibGVWYWx1ZXMsXG4gICAgICBvcGVyYXRpb25OYW1lOiBvcGVyYXRpb25OYW1lLFxuICAgICAgZmllbGRSZXNvbHZlcjogZmllbGRSZXNvbHZlclxuICAgIH0pO1xuICB9OyAvLyBSZXNvbHZlIHRoZSBTb3VyY2UgU3RyZWFtLCB0aGVuIG1hcCBldmVyeSBzb3VyY2UgdmFsdWUgdG8gYVxuICAvLyBFeGVjdXRpb25SZXN1bHQgdmFsdWUgYXMgZGVzY3JpYmVkIGFib3ZlLlxuXG5cbiAgcmV0dXJuIHNvdXJjZVByb21pc2UudGhlbihmdW5jdGlvbiAocmVzdWx0T3JTdHJlYW0pIHtcbiAgICByZXR1cm4gKC8vIE5vdGU6IEZsb3cgY2FuJ3QgcmVmaW5lIGlzQXN5bmNJdGVyYWJsZSwgc28gZXhwbGljaXQgY2FzdHMgYXJlIHVzZWQuXG4gICAgICBpc0FzeW5jSXRlcmFibGUocmVzdWx0T3JTdHJlYW0pID8gbWFwQXN5bmNJdGVyYXRvcihyZXN1bHRPclN0cmVhbSwgbWFwU291cmNlVG9SZXNwb25zZSwgcmVwb3J0R3JhcGhRTEVycm9yKSA6IHJlc3VsdE9yU3RyZWFtXG4gICAgKTtcbiAgfSk7XG59XG4vKipcbiAqIEltcGxlbWVudHMgdGhlIFwiQ3JlYXRlU291cmNlRXZlbnRTdHJlYW1cIiBhbGdvcml0aG0gZGVzY3JpYmVkIGluIHRoZVxuICogR3JhcGhRTCBzcGVjaWZpY2F0aW9uLCByZXNvbHZpbmcgdGhlIHN1YnNjcmlwdGlvbiBzb3VyY2UgZXZlbnQgc3RyZWFtLlxuICpcbiAqIFJldHVybnMgYSBQcm9taXNlIHdoaWNoIHJlc29sdmVzIHRvIGVpdGhlciBhbiBBc3luY0l0ZXJhYmxlIChpZiBzdWNjZXNzZnVsKVxuICogb3IgYW4gRXhlY3V0aW9uUmVzdWx0IChlcnJvcikuIFRoZSBwcm9taXNlIHdpbGwgYmUgcmVqZWN0ZWQgaWYgdGhlIHNjaGVtYSBvclxuICogb3RoZXIgYXJndW1lbnRzIHRvIHRoaXMgZnVuY3Rpb24gYXJlIGludmFsaWQsIG9yIGlmIHRoZSByZXNvbHZlZCBldmVudCBzdHJlYW1cbiAqIGlzIG5vdCBhbiBhc3luYyBpdGVyYWJsZS5cbiAqXG4gKiBJZiB0aGUgY2xpZW50LXByb3ZpZGVkIGFyZ3VtZW50cyB0byB0aGlzIGZ1bmN0aW9uIGRvIG5vdCByZXN1bHQgaW4gYVxuICogY29tcGxpYW50IHN1YnNjcmlwdGlvbiwgYSBHcmFwaFFMIFJlc3BvbnNlIChFeGVjdXRpb25SZXN1bHQpIHdpdGhcbiAqIGRlc2NyaXB0aXZlIGVycm9ycyBhbmQgbm8gZGF0YSB3aWxsIGJlIHJldHVybmVkLlxuICpcbiAqIElmIHRoZSB0aGUgc291cmNlIHN0cmVhbSBjb3VsZCBub3QgYmUgY3JlYXRlZCBkdWUgdG8gZmF1bHR5IHN1YnNjcmlwdGlvblxuICogcmVzb2x2ZXIgbG9naWMgb3IgdW5kZXJseWluZyBzeXN0ZW1zLCB0aGUgcHJvbWlzZSB3aWxsIHJlc29sdmUgdG8gYSBzaW5nbGVcbiAqIEV4ZWN1dGlvblJlc3VsdCBjb250YWluaW5nIGBlcnJvcnNgIGFuZCBubyBgZGF0YWAuXG4gKlxuICogSWYgdGhlIG9wZXJhdGlvbiBzdWNjZWVkZWQsIHRoZSBwcm9taXNlIHJlc29sdmVzIHRvIHRoZSBBc3luY0l0ZXJhYmxlIGZvciB0aGVcbiAqIGV2ZW50IHN0cmVhbSByZXR1cm5lZCBieSB0aGUgcmVzb2x2ZXIuXG4gKlxuICogQSBTb3VyY2UgRXZlbnQgU3RyZWFtIHJlcHJlc2VudHMgYSBzZXF1ZW5jZSBvZiBldmVudHMsIGVhY2ggb2Ygd2hpY2ggdHJpZ2dlcnNcbiAqIGEgR3JhcGhRTCBleGVjdXRpb24gZm9yIHRoYXQgZXZlbnQuXG4gKlxuICogVGhpcyBtYXkgYmUgdXNlZnVsIHdoZW4gaG9zdGluZyB0aGUgc3RhdGVmdWwgc3Vic2NyaXB0aW9uIHNlcnZpY2UgaW4gYVxuICogZGlmZmVyZW50IHByb2Nlc3Mgb3IgbWFjaGluZSB0aGFuIHRoZSBzdGF0ZWxlc3MgR3JhcGhRTCBleGVjdXRpb24gZW5naW5lLFxuICogb3Igb3RoZXJ3aXNlIHNlcGFyYXRpbmcgdGhlc2UgdHdvIHN0ZXBzLiBGb3IgbW9yZSBvbiB0aGlzLCBzZWUgdGhlXG4gKiBcIlN1cHBvcnRpbmcgU3Vic2NyaXB0aW9ucyBhdCBTY2FsZVwiIGluZm9ybWF0aW9uIGluIHRoZSBHcmFwaFFMIHNwZWNpZmljYXRpb24uXG4gKi9cblxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU291cmNlRXZlbnRTdHJlYW0oc2NoZW1hLCBkb2N1bWVudCwgcm9vdFZhbHVlLCBjb250ZXh0VmFsdWUsIHZhcmlhYmxlVmFsdWVzLCBvcGVyYXRpb25OYW1lLCBmaWVsZFJlc29sdmVyKSB7XG4gIC8vIElmIGFyZ3VtZW50cyBhcmUgbWlzc2luZyBvciBpbmNvcnJlY3RseSB0eXBlZCwgdGhpcyBpcyBhbiBpbnRlcm5hbFxuICAvLyBkZXZlbG9wZXIgbWlzdGFrZSB3aGljaCBzaG91bGQgdGhyb3cgYW4gZWFybHkgZXJyb3IuXG4gIGFzc2VydFZhbGlkRXhlY3V0aW9uQXJndW1lbnRzKHNjaGVtYSwgZG9jdW1lbnQsIHZhcmlhYmxlVmFsdWVzKTtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgLy8gSWYgYSB2YWxpZCBjb250ZXh0IGNhbm5vdCBiZSBjcmVhdGVkIGR1ZSB0byBpbmNvcnJlY3QgYXJndW1lbnRzLFxuICAgIC8vIHRoaXMgd2lsbCB0aHJvdyBhbiBlcnJvci5cbiAgICB2YXIgZXhlQ29udGV4dCA9IGJ1aWxkRXhlY3V0aW9uQ29udGV4dChzY2hlbWEsIGRvY3VtZW50LCByb290VmFsdWUsIGNvbnRleHRWYWx1ZSwgdmFyaWFibGVWYWx1ZXMsIG9wZXJhdGlvbk5hbWUsIGZpZWxkUmVzb2x2ZXIpO1xuICAgIHJlc29sdmUoIC8vIFJldHVybiBlYXJseSBlcnJvcnMgaWYgZXhlY3V0aW9uIGNvbnRleHQgZmFpbGVkLlxuICAgIEFycmF5LmlzQXJyYXkoZXhlQ29udGV4dCkgPyB7XG4gICAgICBlcnJvcnM6IGV4ZUNvbnRleHRcbiAgICB9IDogZXhlY3V0ZVN1YnNjcmlwdGlvbihleGVDb250ZXh0KSk7XG4gIH0pLmNhdGNoKHJlcG9ydEdyYXBoUUxFcnJvcik7XG59XG5cbmZ1bmN0aW9uIGV4ZWN1dGVTdWJzY3JpcHRpb24oZXhlQ29udGV4dCkge1xuICB2YXIgc2NoZW1hID0gZXhlQ29udGV4dC5zY2hlbWEsXG4gICAgICBvcGVyYXRpb24gPSBleGVDb250ZXh0Lm9wZXJhdGlvbixcbiAgICAgIHZhcmlhYmxlVmFsdWVzID0gZXhlQ29udGV4dC52YXJpYWJsZVZhbHVlcyxcbiAgICAgIHJvb3RWYWx1ZSA9IGV4ZUNvbnRleHQucm9vdFZhbHVlO1xuICB2YXIgdHlwZSA9IGdldE9wZXJhdGlvblJvb3RUeXBlKHNjaGVtYSwgb3BlcmF0aW9uKTtcbiAgdmFyIGZpZWxkcyA9IGNvbGxlY3RGaWVsZHMoZXhlQ29udGV4dCwgdHlwZSwgb3BlcmF0aW9uLnNlbGVjdGlvblNldCwgT2JqZWN0LmNyZWF0ZShudWxsKSwgT2JqZWN0LmNyZWF0ZShudWxsKSk7XG4gIHZhciByZXNwb25zZU5hbWVzID0gT2JqZWN0LmtleXMoZmllbGRzKTtcbiAgdmFyIHJlc3BvbnNlTmFtZSA9IHJlc3BvbnNlTmFtZXNbMF07XG4gIHZhciBmaWVsZE5vZGVzID0gZmllbGRzW3Jlc3BvbnNlTmFtZV07XG4gIHZhciBmaWVsZE5vZGUgPSBmaWVsZE5vZGVzWzBdO1xuICB2YXIgZmllbGROYW1lID0gZmllbGROb2RlLm5hbWUudmFsdWU7XG4gIHZhciBmaWVsZERlZiA9IGdldEZpZWxkRGVmKHNjaGVtYSwgdHlwZSwgZmllbGROYW1lKTtcblxuICBpZiAoIWZpZWxkRGVmKSB7XG4gICAgdGhyb3cgbmV3IEdyYXBoUUxFcnJvcihcIlRoZSBzdWJzY3JpcHRpb24gZmllbGQgXFxcIlwiLmNvbmNhdChmaWVsZE5hbWUsIFwiXFxcIiBpcyBub3QgZGVmaW5lZC5cIiksIGZpZWxkTm9kZXMpO1xuICB9XG5cbiAgdmFyIHBhdGggPSBhZGRQYXRoKHVuZGVmaW5lZCwgcmVzcG9uc2VOYW1lLCB0eXBlLm5hbWUpO1xuICB2YXIgaW5mbyA9IGJ1aWxkUmVzb2x2ZUluZm8oZXhlQ29udGV4dCwgZmllbGREZWYsIGZpZWxkTm9kZXMsIHR5cGUsIHBhdGgpOyAvLyBDb2VyY2UgdG8gUHJvbWlzZSBmb3IgZWFzaWVyIGVycm9yIGhhbmRsaW5nIGFuZCBjb25zaXN0ZW50IHJldHVybiB0eXBlLlxuXG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZVJlc3VsdCkge1xuICAgIHZhciBfZmllbGREZWYkc3Vic2NyaWJlO1xuXG4gICAgLy8gSW1wbGVtZW50cyB0aGUgXCJSZXNvbHZlRmllbGRFdmVudFN0cmVhbVwiIGFsZ29yaXRobSBmcm9tIEdyYXBoUUwgc3BlY2lmaWNhdGlvbi5cbiAgICAvLyBJdCBkaWZmZXJzIGZyb20gXCJSZXNvbHZlRmllbGRWYWx1ZVwiIGR1ZSB0byBwcm92aWRpbmcgYSBkaWZmZXJlbnQgYHJlc29sdmVGbmAuXG4gICAgLy8gQnVpbGQgYSBKUyBvYmplY3Qgb2YgYXJndW1lbnRzIGZyb20gdGhlIGZpZWxkLmFyZ3VtZW50cyBBU1QsIHVzaW5nIHRoZVxuICAgIC8vIHZhcmlhYmxlcyBzY29wZSB0byBmdWxmaWxsIGFueSB2YXJpYWJsZSByZWZlcmVuY2VzLlxuICAgIHZhciBhcmdzID0gZ2V0QXJndW1lbnRWYWx1ZXMoZmllbGREZWYsIGZpZWxkTm9kZXNbMF0sIHZhcmlhYmxlVmFsdWVzKTsgLy8gVGhlIHJlc29sdmUgZnVuY3Rpb24ncyBvcHRpb25hbCB0aGlyZCBhcmd1bWVudCBpcyBhIGNvbnRleHQgdmFsdWUgdGhhdFxuICAgIC8vIGlzIHByb3ZpZGVkIHRvIGV2ZXJ5IHJlc29sdmUgZnVuY3Rpb24gd2l0aGluIGFuIGV4ZWN1dGlvbi4gSXQgaXMgY29tbW9ubHlcbiAgICAvLyB1c2VkIHRvIHJlcHJlc2VudCBhbiBhdXRoZW50aWNhdGVkIHVzZXIsIG9yIHJlcXVlc3Qtc3BlY2lmaWMgY2FjaGVzLlxuXG4gICAgdmFyIGNvbnRleHRWYWx1ZSA9IGV4ZUNvbnRleHQuY29udGV4dFZhbHVlOyAvLyBDYWxsIHRoZSBgc3Vic2NyaWJlKClgIHJlc29sdmVyIG9yIHRoZSBkZWZhdWx0IHJlc29sdmVyIHRvIHByb2R1Y2UgYW5cbiAgICAvLyBBc3luY0l0ZXJhYmxlIHlpZWxkaW5nIHJhdyBwYXlsb2Fkcy5cblxuICAgIHZhciByZXNvbHZlRm4gPSAoX2ZpZWxkRGVmJHN1YnNjcmliZSA9IGZpZWxkRGVmLnN1YnNjcmliZSkgIT09IG51bGwgJiYgX2ZpZWxkRGVmJHN1YnNjcmliZSAhPT0gdm9pZCAwID8gX2ZpZWxkRGVmJHN1YnNjcmliZSA6IGV4ZUNvbnRleHQuZmllbGRSZXNvbHZlcjtcbiAgICByZXNvbHZlUmVzdWx0KHJlc29sdmVGbihyb290VmFsdWUsIGFyZ3MsIGNvbnRleHRWYWx1ZSwgaW5mbykpO1xuICB9KS50aGVuKGZ1bmN0aW9uIChldmVudFN0cmVhbSkge1xuICAgIGlmIChldmVudFN0cmVhbSBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICB0aHJvdyBsb2NhdGVkRXJyb3IoZXZlbnRTdHJlYW0sIGZpZWxkTm9kZXMsIHBhdGhUb0FycmF5KHBhdGgpKTtcbiAgICB9IC8vIEFzc2VydCBmaWVsZCByZXR1cm5lZCBhbiBldmVudCBzdHJlYW0sIG90aGVyd2lzZSB5aWVsZCBhbiBlcnJvci5cblxuXG4gICAgaWYgKCFpc0FzeW5jSXRlcmFibGUoZXZlbnRTdHJlYW0pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1N1YnNjcmlwdGlvbiBmaWVsZCBtdXN0IHJldHVybiBBc3luYyBJdGVyYWJsZS4gJyArIFwiUmVjZWl2ZWQ6IFwiLmNvbmNhdChpbnNwZWN0KGV2ZW50U3RyZWFtKSwgXCIuXCIpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZXZlbnRTdHJlYW07XG4gIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgIHRocm93IGxvY2F0ZWRFcnJvcihlcnJvciwgZmllbGROb2RlcywgcGF0aFRvQXJyYXkocGF0aCkpO1xuICB9KTtcbn1cbiIsImZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuaW1wb3J0IG9iamVjdEVudHJpZXMgZnJvbSBcIi4uL3BvbHlmaWxscy9vYmplY3RFbnRyaWVzLm1qc1wiO1xuaW1wb3J0IHsgU1lNQk9MX1RPX1NUUklOR19UQUcgfSBmcm9tIFwiLi4vcG9seWZpbGxzL3N5bWJvbHMubWpzXCI7XG5pbXBvcnQgaW5zcGVjdCBmcm9tIFwiLi4vanN1dGlscy9pbnNwZWN0Lm1qc1wiO1xuaW1wb3J0IGtleU1hcCBmcm9tIFwiLi4vanN1dGlscy9rZXlNYXAubWpzXCI7XG5pbXBvcnQgbWFwVmFsdWUgZnJvbSBcIi4uL2pzdXRpbHMvbWFwVmFsdWUubWpzXCI7XG5pbXBvcnQgdG9PYmpNYXAgZnJvbSBcIi4uL2pzdXRpbHMvdG9PYmpNYXAubWpzXCI7XG5pbXBvcnQgZGV2QXNzZXJ0IGZyb20gXCIuLi9qc3V0aWxzL2RldkFzc2VydC5tanNcIjtcbmltcG9ydCBrZXlWYWxNYXAgZnJvbSBcIi4uL2pzdXRpbHMva2V5VmFsTWFwLm1qc1wiO1xuaW1wb3J0IGluc3RhbmNlT2YgZnJvbSBcIi4uL2pzdXRpbHMvaW5zdGFuY2VPZi5tanNcIjtcbmltcG9ydCBkaWRZb3VNZWFuIGZyb20gXCIuLi9qc3V0aWxzL2RpZFlvdU1lYW4ubWpzXCI7XG5pbXBvcnQgaXNPYmplY3RMaWtlIGZyb20gXCIuLi9qc3V0aWxzL2lzT2JqZWN0TGlrZS5tanNcIjtcbmltcG9ydCBpZGVudGl0eUZ1bmMgZnJvbSBcIi4uL2pzdXRpbHMvaWRlbnRpdHlGdW5jLm1qc1wiO1xuaW1wb3J0IGRlZmluZUluc3BlY3QgZnJvbSBcIi4uL2pzdXRpbHMvZGVmaW5lSW5zcGVjdC5tanNcIjtcbmltcG9ydCBzdWdnZXN0aW9uTGlzdCBmcm9tIFwiLi4vanN1dGlscy9zdWdnZXN0aW9uTGlzdC5tanNcIjtcbmltcG9ydCB7IEdyYXBoUUxFcnJvciB9IGZyb20gXCIuLi9lcnJvci9HcmFwaFFMRXJyb3IubWpzXCI7XG5pbXBvcnQgeyBLaW5kIH0gZnJvbSBcIi4uL2xhbmd1YWdlL2tpbmRzLm1qc1wiO1xuaW1wb3J0IHsgcHJpbnQgfSBmcm9tIFwiLi4vbGFuZ3VhZ2UvcHJpbnRlci5tanNcIjtcbmltcG9ydCB7IHZhbHVlRnJvbUFTVFVudHlwZWQgfSBmcm9tIFwiLi4vdXRpbGl0aWVzL3ZhbHVlRnJvbUFTVFVudHlwZWQubWpzXCI7XG5leHBvcnQgZnVuY3Rpb24gaXNUeXBlKHR5cGUpIHtcbiAgcmV0dXJuIGlzU2NhbGFyVHlwZSh0eXBlKSB8fCBpc09iamVjdFR5cGUodHlwZSkgfHwgaXNJbnRlcmZhY2VUeXBlKHR5cGUpIHx8IGlzVW5pb25UeXBlKHR5cGUpIHx8IGlzRW51bVR5cGUodHlwZSkgfHwgaXNJbnB1dE9iamVjdFR5cGUodHlwZSkgfHwgaXNMaXN0VHlwZSh0eXBlKSB8fCBpc05vbk51bGxUeXBlKHR5cGUpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydFR5cGUodHlwZSkge1xuICBpZiAoIWlzVHlwZSh0eXBlKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkV4cGVjdGVkIFwiLmNvbmNhdChpbnNwZWN0KHR5cGUpLCBcIiB0byBiZSBhIEdyYXBoUUwgdHlwZS5cIikpO1xuICB9XG5cbiAgcmV0dXJuIHR5cGU7XG59XG4vKipcbiAqIFRoZXJlIGFyZSBwcmVkaWNhdGVzIGZvciBlYWNoIGtpbmQgb2YgR3JhcGhRTCB0eXBlLlxuICovXG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZWRlY2xhcmVcbmV4cG9ydCBmdW5jdGlvbiBpc1NjYWxhclR5cGUodHlwZSkge1xuICByZXR1cm4gaW5zdGFuY2VPZih0eXBlLCBHcmFwaFFMU2NhbGFyVHlwZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0U2NhbGFyVHlwZSh0eXBlKSB7XG4gIGlmICghaXNTY2FsYXJUeXBlKHR5cGUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRXhwZWN0ZWQgXCIuY29uY2F0KGluc3BlY3QodHlwZSksIFwiIHRvIGJlIGEgR3JhcGhRTCBTY2FsYXIgdHlwZS5cIikpO1xuICB9XG5cbiAgcmV0dXJuIHR5cGU7XG59XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVkZWNsYXJlXG5leHBvcnQgZnVuY3Rpb24gaXNPYmplY3RUeXBlKHR5cGUpIHtcbiAgcmV0dXJuIGluc3RhbmNlT2YodHlwZSwgR3JhcGhRTE9iamVjdFR5cGUpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydE9iamVjdFR5cGUodHlwZSkge1xuICBpZiAoIWlzT2JqZWN0VHlwZSh0eXBlKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkV4cGVjdGVkIFwiLmNvbmNhdChpbnNwZWN0KHR5cGUpLCBcIiB0byBiZSBhIEdyYXBoUUwgT2JqZWN0IHR5cGUuXCIpKTtcbiAgfVxuXG4gIHJldHVybiB0eXBlO1xufVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlZGVjbGFyZVxuZXhwb3J0IGZ1bmN0aW9uIGlzSW50ZXJmYWNlVHlwZSh0eXBlKSB7XG4gIHJldHVybiBpbnN0YW5jZU9mKHR5cGUsIEdyYXBoUUxJbnRlcmZhY2VUeXBlKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRJbnRlcmZhY2VUeXBlKHR5cGUpIHtcbiAgaWYgKCFpc0ludGVyZmFjZVR5cGUodHlwZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RlZCBcIi5jb25jYXQoaW5zcGVjdCh0eXBlKSwgXCIgdG8gYmUgYSBHcmFwaFFMIEludGVyZmFjZSB0eXBlLlwiKSk7XG4gIH1cblxuICByZXR1cm4gdHlwZTtcbn1cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZWRlY2xhcmVcbmV4cG9ydCBmdW5jdGlvbiBpc1VuaW9uVHlwZSh0eXBlKSB7XG4gIHJldHVybiBpbnN0YW5jZU9mKHR5cGUsIEdyYXBoUUxVbmlvblR5cGUpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydFVuaW9uVHlwZSh0eXBlKSB7XG4gIGlmICghaXNVbmlvblR5cGUodHlwZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RlZCBcIi5jb25jYXQoaW5zcGVjdCh0eXBlKSwgXCIgdG8gYmUgYSBHcmFwaFFMIFVuaW9uIHR5cGUuXCIpKTtcbiAgfVxuXG4gIHJldHVybiB0eXBlO1xufVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlZGVjbGFyZVxuZXhwb3J0IGZ1bmN0aW9uIGlzRW51bVR5cGUodHlwZSkge1xuICByZXR1cm4gaW5zdGFuY2VPZih0eXBlLCBHcmFwaFFMRW51bVR5cGUpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydEVudW1UeXBlKHR5cGUpIHtcbiAgaWYgKCFpc0VudW1UeXBlKHR5cGUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRXhwZWN0ZWQgXCIuY29uY2F0KGluc3BlY3QodHlwZSksIFwiIHRvIGJlIGEgR3JhcGhRTCBFbnVtIHR5cGUuXCIpKTtcbiAgfVxuXG4gIHJldHVybiB0eXBlO1xufVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlZGVjbGFyZVxuZXhwb3J0IGZ1bmN0aW9uIGlzSW5wdXRPYmplY3RUeXBlKHR5cGUpIHtcbiAgcmV0dXJuIGluc3RhbmNlT2YodHlwZSwgR3JhcGhRTElucHV0T2JqZWN0VHlwZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0SW5wdXRPYmplY3RUeXBlKHR5cGUpIHtcbiAgaWYgKCFpc0lucHV0T2JqZWN0VHlwZSh0eXBlKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkV4cGVjdGVkIFwiLmNvbmNhdChpbnNwZWN0KHR5cGUpLCBcIiB0byBiZSBhIEdyYXBoUUwgSW5wdXQgT2JqZWN0IHR5cGUuXCIpKTtcbiAgfVxuXG4gIHJldHVybiB0eXBlO1xufVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlZGVjbGFyZVxuZXhwb3J0IGZ1bmN0aW9uIGlzTGlzdFR5cGUodHlwZSkge1xuICByZXR1cm4gaW5zdGFuY2VPZih0eXBlLCBHcmFwaFFMTGlzdCk7XG59XG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0TGlzdFR5cGUodHlwZSkge1xuICBpZiAoIWlzTGlzdFR5cGUodHlwZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RlZCBcIi5jb25jYXQoaW5zcGVjdCh0eXBlKSwgXCIgdG8gYmUgYSBHcmFwaFFMIExpc3QgdHlwZS5cIikpO1xuICB9XG5cbiAgcmV0dXJuIHR5cGU7XG59XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVkZWNsYXJlXG5leHBvcnQgZnVuY3Rpb24gaXNOb25OdWxsVHlwZSh0eXBlKSB7XG4gIHJldHVybiBpbnN0YW5jZU9mKHR5cGUsIEdyYXBoUUxOb25OdWxsKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnROb25OdWxsVHlwZSh0eXBlKSB7XG4gIGlmICghaXNOb25OdWxsVHlwZSh0eXBlKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkV4cGVjdGVkIFwiLmNvbmNhdChpbnNwZWN0KHR5cGUpLCBcIiB0byBiZSBhIEdyYXBoUUwgTm9uLU51bGwgdHlwZS5cIikpO1xuICB9XG5cbiAgcmV0dXJuIHR5cGU7XG59XG4vKipcbiAqIFRoZXNlIHR5cGVzIG1heSBiZSB1c2VkIGFzIGlucHV0IHR5cGVzIGZvciBhcmd1bWVudHMgYW5kIGRpcmVjdGl2ZXMuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGlzSW5wdXRUeXBlKHR5cGUpIHtcbiAgcmV0dXJuIGlzU2NhbGFyVHlwZSh0eXBlKSB8fCBpc0VudW1UeXBlKHR5cGUpIHx8IGlzSW5wdXRPYmplY3RUeXBlKHR5cGUpIHx8IGlzV3JhcHBpbmdUeXBlKHR5cGUpICYmIGlzSW5wdXRUeXBlKHR5cGUub2ZUeXBlKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRJbnB1dFR5cGUodHlwZSkge1xuICBpZiAoIWlzSW5wdXRUeXBlKHR5cGUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRXhwZWN0ZWQgXCIuY29uY2F0KGluc3BlY3QodHlwZSksIFwiIHRvIGJlIGEgR3JhcGhRTCBpbnB1dCB0eXBlLlwiKSk7XG4gIH1cblxuICByZXR1cm4gdHlwZTtcbn1cbi8qKlxuICogVGhlc2UgdHlwZXMgbWF5IGJlIHVzZWQgYXMgb3V0cHV0IHR5cGVzIGFzIHRoZSByZXN1bHQgb2YgZmllbGRzLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBpc091dHB1dFR5cGUodHlwZSkge1xuICByZXR1cm4gaXNTY2FsYXJUeXBlKHR5cGUpIHx8IGlzT2JqZWN0VHlwZSh0eXBlKSB8fCBpc0ludGVyZmFjZVR5cGUodHlwZSkgfHwgaXNVbmlvblR5cGUodHlwZSkgfHwgaXNFbnVtVHlwZSh0eXBlKSB8fCBpc1dyYXBwaW5nVHlwZSh0eXBlKSAmJiBpc091dHB1dFR5cGUodHlwZS5vZlR5cGUpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydE91dHB1dFR5cGUodHlwZSkge1xuICBpZiAoIWlzT3V0cHV0VHlwZSh0eXBlKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkV4cGVjdGVkIFwiLmNvbmNhdChpbnNwZWN0KHR5cGUpLCBcIiB0byBiZSBhIEdyYXBoUUwgb3V0cHV0IHR5cGUuXCIpKTtcbiAgfVxuXG4gIHJldHVybiB0eXBlO1xufVxuLyoqXG4gKiBUaGVzZSB0eXBlcyBtYXkgZGVzY3JpYmUgdHlwZXMgd2hpY2ggbWF5IGJlIGxlYWYgdmFsdWVzLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBpc0xlYWZUeXBlKHR5cGUpIHtcbiAgcmV0dXJuIGlzU2NhbGFyVHlwZSh0eXBlKSB8fCBpc0VudW1UeXBlKHR5cGUpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydExlYWZUeXBlKHR5cGUpIHtcbiAgaWYgKCFpc0xlYWZUeXBlKHR5cGUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRXhwZWN0ZWQgXCIuY29uY2F0KGluc3BlY3QodHlwZSksIFwiIHRvIGJlIGEgR3JhcGhRTCBsZWFmIHR5cGUuXCIpKTtcbiAgfVxuXG4gIHJldHVybiB0eXBlO1xufVxuLyoqXG4gKiBUaGVzZSB0eXBlcyBtYXkgZGVzY3JpYmUgdGhlIHBhcmVudCBjb250ZXh0IG9mIGEgc2VsZWN0aW9uIHNldC5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaXNDb21wb3NpdGVUeXBlKHR5cGUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0VHlwZSh0eXBlKSB8fCBpc0ludGVyZmFjZVR5cGUodHlwZSkgfHwgaXNVbmlvblR5cGUodHlwZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0Q29tcG9zaXRlVHlwZSh0eXBlKSB7XG4gIGlmICghaXNDb21wb3NpdGVUeXBlKHR5cGUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRXhwZWN0ZWQgXCIuY29uY2F0KGluc3BlY3QodHlwZSksIFwiIHRvIGJlIGEgR3JhcGhRTCBjb21wb3NpdGUgdHlwZS5cIikpO1xuICB9XG5cbiAgcmV0dXJuIHR5cGU7XG59XG4vKipcbiAqIFRoZXNlIHR5cGVzIG1heSBkZXNjcmliZSB0aGUgcGFyZW50IGNvbnRleHQgb2YgYSBzZWxlY3Rpb24gc2V0LlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBpc0Fic3RyYWN0VHlwZSh0eXBlKSB7XG4gIHJldHVybiBpc0ludGVyZmFjZVR5cGUodHlwZSkgfHwgaXNVbmlvblR5cGUodHlwZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0QWJzdHJhY3RUeXBlKHR5cGUpIHtcbiAgaWYgKCFpc0Fic3RyYWN0VHlwZSh0eXBlKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkV4cGVjdGVkIFwiLmNvbmNhdChpbnNwZWN0KHR5cGUpLCBcIiB0byBiZSBhIEdyYXBoUUwgYWJzdHJhY3QgdHlwZS5cIikpO1xuICB9XG5cbiAgcmV0dXJuIHR5cGU7XG59XG4vKipcbiAqIExpc3QgVHlwZSBXcmFwcGVyXG4gKlxuICogQSBsaXN0IGlzIGEgd3JhcHBpbmcgdHlwZSB3aGljaCBwb2ludHMgdG8gYW5vdGhlciB0eXBlLlxuICogTGlzdHMgYXJlIG9mdGVuIGNyZWF0ZWQgd2l0aGluIHRoZSBjb250ZXh0IG9mIGRlZmluaW5nIHRoZSBmaWVsZHMgb2ZcbiAqIGFuIG9iamVjdCB0eXBlLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogICAgIGNvbnN0IFBlcnNvblR5cGUgPSBuZXcgR3JhcGhRTE9iamVjdFR5cGUoe1xuICogICAgICAgbmFtZTogJ1BlcnNvbicsXG4gKiAgICAgICBmaWVsZHM6ICgpID0+ICh7XG4gKiAgICAgICAgIHBhcmVudHM6IHsgdHlwZTogbmV3IEdyYXBoUUxMaXN0KFBlcnNvblR5cGUpIH0sXG4gKiAgICAgICAgIGNoaWxkcmVuOiB7IHR5cGU6IG5ldyBHcmFwaFFMTGlzdChQZXJzb25UeXBlKSB9LFxuICogICAgICAgfSlcbiAqICAgICB9KVxuICpcbiAqL1xuLy8gRklYTUU6IHdvcmthcm91bmQgdG8gZml4IGlzc3VlIHdpdGggQmFiZWwgcGFyc2VyXG5cbi8qIDo6XG5kZWNsYXJlIGNsYXNzIEdyYXBoUUxMaXN0PCtUOiBHcmFwaFFMVHlwZT4ge1xuICArb2ZUeXBlOiBUO1xuICBzdGF0aWMgPFQ+KG9mVHlwZTogVCk6IEdyYXBoUUxMaXN0PFQ+O1xuICAvLyBOb3RlOiBjb25zdHJ1Y3RvcnMgY2Fubm90IGJlIHVzZWQgZm9yIGNvdmFyaWFudCB0eXBlcy4gRHJvcCB0aGUgXCJuZXdcIi5cbiAgY29uc3RydWN0b3Iob2ZUeXBlOiBHcmFwaFFMVHlwZSk6IHZvaWQ7XG59XG4qL1xuXG5leHBvcnQgZnVuY3Rpb24gR3JhcGhRTExpc3Qob2ZUeXBlKSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBlbHNlICh0byBiZSByZW1vdmVkIGluIHYxNi4wLjApXG4gIGlmICh0aGlzIGluc3RhbmNlb2YgR3JhcGhRTExpc3QpIHtcbiAgICB0aGlzLm9mVHlwZSA9IGFzc2VydFR5cGUob2ZUeXBlKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IEdyYXBoUUxMaXN0KG9mVHlwZSk7XG4gIH1cbn0gLy8gTmVlZCB0byBjYXN0IHRocm91Z2ggYW55IHRvIGFsdGVyIHRoZSBwcm90b3R5cGUuXG5cbkdyYXBoUUxMaXN0LnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gJ1snICsgU3RyaW5nKHRoaXMub2ZUeXBlKSArICddJztcbn07XG5cbkdyYXBoUUxMaXN0LnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gIHJldHVybiB0aGlzLnRvU3RyaW5nKCk7XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoR3JhcGhRTExpc3QucHJvdG90eXBlLCBTWU1CT0xfVE9fU1RSSU5HX1RBRywge1xuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gJ0dyYXBoUUxMaXN0JztcbiAgfVxufSk7IC8vIFByaW50IGEgc2ltcGxpZmllZCBmb3JtIHdoZW4gYXBwZWFyaW5nIGluIGBpbnNwZWN0YCBhbmQgYHV0aWwuaW5zcGVjdGAuXG5cbmRlZmluZUluc3BlY3QoR3JhcGhRTExpc3QpO1xuLyoqXG4gKiBOb24tTnVsbCBUeXBlIFdyYXBwZXJcbiAqXG4gKiBBIG5vbi1udWxsIGlzIGEgd3JhcHBpbmcgdHlwZSB3aGljaCBwb2ludHMgdG8gYW5vdGhlciB0eXBlLlxuICogTm9uLW51bGwgdHlwZXMgZW5mb3JjZSB0aGF0IHRoZWlyIHZhbHVlcyBhcmUgbmV2ZXIgbnVsbCBhbmQgY2FuIGVuc3VyZVxuICogYW4gZXJyb3IgaXMgcmFpc2VkIGlmIHRoaXMgZXZlciBvY2N1cnMgZHVyaW5nIGEgcmVxdWVzdC4gSXQgaXMgdXNlZnVsIGZvclxuICogZmllbGRzIHdoaWNoIHlvdSBjYW4gbWFrZSBhIHN0cm9uZyBndWFyYW50ZWUgb24gbm9uLW51bGxhYmlsaXR5LCBmb3IgZXhhbXBsZVxuICogdXN1YWxseSB0aGUgaWQgZmllbGQgb2YgYSBkYXRhYmFzZSByb3cgd2lsbCBuZXZlciBiZSBudWxsLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogICAgIGNvbnN0IFJvd1R5cGUgPSBuZXcgR3JhcGhRTE9iamVjdFR5cGUoe1xuICogICAgICAgbmFtZTogJ1JvdycsXG4gKiAgICAgICBmaWVsZHM6ICgpID0+ICh7XG4gKiAgICAgICAgIGlkOiB7IHR5cGU6IG5ldyBHcmFwaFFMTm9uTnVsbChHcmFwaFFMU3RyaW5nKSB9LFxuICogICAgICAgfSlcbiAqICAgICB9KVxuICpcbiAqIE5vdGU6IHRoZSBlbmZvcmNlbWVudCBvZiBub24tbnVsbGFiaWxpdHkgb2NjdXJzIHdpdGhpbiB0aGUgZXhlY3V0b3IuXG4gKi9cbi8vIEZJWE1FOiB3b3JrYXJvdW5kIHRvIGZpeCBpc3N1ZSB3aXRoIEJhYmVsIHBhcnNlclxuXG4vKiA6OlxuZGVjbGFyZSBjbGFzcyBHcmFwaFFMTm9uTnVsbDwrVDogR3JhcGhRTE51bGxhYmxlVHlwZT4ge1xuICArb2ZUeXBlOiBUO1xuICBzdGF0aWMgPFQ+KG9mVHlwZTogVCk6IEdyYXBoUUxOb25OdWxsPFQ+O1xuICAvLyBOb3RlOiBjb25zdHJ1Y3RvcnMgY2Fubm90IGJlIHVzZWQgZm9yIGNvdmFyaWFudCB0eXBlcy4gRHJvcCB0aGUgXCJuZXdcIi5cbiAgY29uc3RydWN0b3Iob2ZUeXBlOiBHcmFwaFFMVHlwZSk6IHZvaWQ7XG59XG4qL1xuXG5leHBvcnQgZnVuY3Rpb24gR3JhcGhRTE5vbk51bGwob2ZUeXBlKSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBlbHNlICh0byBiZSByZW1vdmVkIGluIHYxNi4wLjApXG4gIGlmICh0aGlzIGluc3RhbmNlb2YgR3JhcGhRTE5vbk51bGwpIHtcbiAgICB0aGlzLm9mVHlwZSA9IGFzc2VydE51bGxhYmxlVHlwZShvZlR5cGUpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuZXcgR3JhcGhRTE5vbk51bGwob2ZUeXBlKTtcbiAgfVxufSAvLyBOZWVkIHRvIGNhc3QgdGhyb3VnaCBhbnkgdG8gYWx0ZXIgdGhlIHByb3RvdHlwZS5cblxuR3JhcGhRTE5vbk51bGwucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiBTdHJpbmcodGhpcy5vZlR5cGUpICsgJyEnO1xufTtcblxuR3JhcGhRTE5vbk51bGwucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgcmV0dXJuIHRoaXMudG9TdHJpbmcoKTtcbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShHcmFwaFFMTm9uTnVsbC5wcm90b3R5cGUsIFNZTUJPTF9UT19TVFJJTkdfVEFHLCB7XG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiAnR3JhcGhRTE5vbk51bGwnO1xuICB9XG59KTsgLy8gUHJpbnQgYSBzaW1wbGlmaWVkIGZvcm0gd2hlbiBhcHBlYXJpbmcgaW4gYGluc3BlY3RgIGFuZCBgdXRpbC5pbnNwZWN0YC5cblxuZGVmaW5lSW5zcGVjdChHcmFwaFFMTm9uTnVsbCk7XG4vKipcbiAqIFRoZXNlIHR5cGVzIHdyYXAgYW5kIG1vZGlmeSBvdGhlciB0eXBlc1xuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBpc1dyYXBwaW5nVHlwZSh0eXBlKSB7XG4gIHJldHVybiBpc0xpc3RUeXBlKHR5cGUpIHx8IGlzTm9uTnVsbFR5cGUodHlwZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0V3JhcHBpbmdUeXBlKHR5cGUpIHtcbiAgaWYgKCFpc1dyYXBwaW5nVHlwZSh0eXBlKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkV4cGVjdGVkIFwiLmNvbmNhdChpbnNwZWN0KHR5cGUpLCBcIiB0byBiZSBhIEdyYXBoUUwgd3JhcHBpbmcgdHlwZS5cIikpO1xuICB9XG5cbiAgcmV0dXJuIHR5cGU7XG59XG4vKipcbiAqIFRoZXNlIHR5cGVzIGNhbiBhbGwgYWNjZXB0IG51bGwgYXMgYSB2YWx1ZS5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaXNOdWxsYWJsZVR5cGUodHlwZSkge1xuICByZXR1cm4gaXNUeXBlKHR5cGUpICYmICFpc05vbk51bGxUeXBlKHR5cGUpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydE51bGxhYmxlVHlwZSh0eXBlKSB7XG4gIGlmICghaXNOdWxsYWJsZVR5cGUodHlwZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RlZCBcIi5jb25jYXQoaW5zcGVjdCh0eXBlKSwgXCIgdG8gYmUgYSBHcmFwaFFMIG51bGxhYmxlIHR5cGUuXCIpKTtcbiAgfVxuXG4gIHJldHVybiB0eXBlO1xufVxuLyogZXNsaW50LWRpc2FibGUgbm8tcmVkZWNsYXJlICovXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXROdWxsYWJsZVR5cGUodHlwZSkge1xuICAvKiBlc2xpbnQtZW5hYmxlIG5vLXJlZGVjbGFyZSAqL1xuICBpZiAodHlwZSkge1xuICAgIHJldHVybiBpc05vbk51bGxUeXBlKHR5cGUpID8gdHlwZS5vZlR5cGUgOiB0eXBlO1xuICB9XG59XG4vKipcbiAqIFRoZXNlIG5hbWVkIHR5cGVzIGRvIG5vdCBpbmNsdWRlIG1vZGlmaWVycyBsaWtlIExpc3Qgb3IgTm9uTnVsbC5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaXNOYW1lZFR5cGUodHlwZSkge1xuICByZXR1cm4gaXNTY2FsYXJUeXBlKHR5cGUpIHx8IGlzT2JqZWN0VHlwZSh0eXBlKSB8fCBpc0ludGVyZmFjZVR5cGUodHlwZSkgfHwgaXNVbmlvblR5cGUodHlwZSkgfHwgaXNFbnVtVHlwZSh0eXBlKSB8fCBpc0lucHV0T2JqZWN0VHlwZSh0eXBlKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnROYW1lZFR5cGUodHlwZSkge1xuICBpZiAoIWlzTmFtZWRUeXBlKHR5cGUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRXhwZWN0ZWQgXCIuY29uY2F0KGluc3BlY3QodHlwZSksIFwiIHRvIGJlIGEgR3JhcGhRTCBuYW1lZCB0eXBlLlwiKSk7XG4gIH1cblxuICByZXR1cm4gdHlwZTtcbn1cbi8qIGVzbGludC1kaXNhYmxlIG5vLXJlZGVjbGFyZSAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TmFtZWRUeXBlKHR5cGUpIHtcbiAgLyogZXNsaW50LWVuYWJsZSBuby1yZWRlY2xhcmUgKi9cbiAgaWYgKHR5cGUpIHtcbiAgICB2YXIgdW53cmFwcGVkVHlwZSA9IHR5cGU7XG5cbiAgICB3aGlsZSAoaXNXcmFwcGluZ1R5cGUodW53cmFwcGVkVHlwZSkpIHtcbiAgICAgIHVud3JhcHBlZFR5cGUgPSB1bndyYXBwZWRUeXBlLm9mVHlwZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdW53cmFwcGVkVHlwZTtcbiAgfVxufVxuLyoqXG4gKiBVc2VkIHdoaWxlIGRlZmluaW5nIEdyYXBoUUwgdHlwZXMgdG8gYWxsb3cgZm9yIGNpcmN1bGFyIHJlZmVyZW5jZXMgaW5cbiAqIG90aGVyd2lzZSBpbW11dGFibGUgdHlwZSBkZWZpbml0aW9ucy5cbiAqL1xuXG5mdW5jdGlvbiByZXNvbHZlVGh1bmsodGh1bmspIHtcbiAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtdXNlXVxuICByZXR1cm4gdHlwZW9mIHRodW5rID09PSAnZnVuY3Rpb24nID8gdGh1bmsoKSA6IHRodW5rO1xufVxuXG5mdW5jdGlvbiB1bmRlZmluZUlmRW1wdHkoYXJyKSB7XG4gIHJldHVybiBhcnIgJiYgYXJyLmxlbmd0aCA+IDAgPyBhcnIgOiB1bmRlZmluZWQ7XG59XG4vKipcbiAqIFNjYWxhciBUeXBlIERlZmluaXRpb25cbiAqXG4gKiBUaGUgbGVhZiB2YWx1ZXMgb2YgYW55IHJlcXVlc3QgYW5kIGlucHV0IHZhbHVlcyB0byBhcmd1bWVudHMgYXJlXG4gKiBTY2FsYXJzIChvciBFbnVtcykgYW5kIGFyZSBkZWZpbmVkIHdpdGggYSBuYW1lIGFuZCBhIHNlcmllcyBvZiBmdW5jdGlvbnNcbiAqIHVzZWQgdG8gcGFyc2UgaW5wdXQgZnJvbSBhc3Qgb3IgdmFyaWFibGVzIGFuZCB0byBlbnN1cmUgdmFsaWRpdHkuXG4gKlxuICogSWYgYSB0eXBlJ3Mgc2VyaWFsaXplIGZ1bmN0aW9uIGRvZXMgbm90IHJldHVybiBhIHZhbHVlIChpLmUuIGl0IHJldHVybnNcbiAqIGB1bmRlZmluZWRgKSB0aGVuIGFuIGVycm9yIHdpbGwgYmUgcmFpc2VkIGFuZCBhIGBudWxsYCB2YWx1ZSB3aWxsIGJlIHJldHVybmVkXG4gKiBpbiB0aGUgcmVzcG9uc2UuIElmIHRoZSBzZXJpYWxpemUgZnVuY3Rpb24gcmV0dXJucyBgbnVsbGAsIHRoZW4gbm8gZXJyb3Igd2lsbFxuICogYmUgaW5jbHVkZWQgaW4gdGhlIHJlc3BvbnNlLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogICAgIGNvbnN0IE9kZFR5cGUgPSBuZXcgR3JhcGhRTFNjYWxhclR5cGUoe1xuICogICAgICAgbmFtZTogJ09kZCcsXG4gKiAgICAgICBzZXJpYWxpemUodmFsdWUpIHtcbiAqICAgICAgICAgaWYgKHZhbHVlICUgMiA9PT0gMSkge1xuICogICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAqICAgICAgICAgfVxuICogICAgICAgfVxuICogICAgIH0pO1xuICpcbiAqL1xuXG5cbmV4cG9ydCB2YXIgR3JhcGhRTFNjYWxhclR5cGUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBHcmFwaFFMU2NhbGFyVHlwZShjb25maWcpIHtcbiAgICB2YXIgX2NvbmZpZyRwYXJzZVZhbHVlLCBfY29uZmlnJHNlcmlhbGl6ZSwgX2NvbmZpZyRwYXJzZUxpdGVyYWw7XG5cbiAgICB2YXIgcGFyc2VWYWx1ZSA9IChfY29uZmlnJHBhcnNlVmFsdWUgPSBjb25maWcucGFyc2VWYWx1ZSkgIT09IG51bGwgJiYgX2NvbmZpZyRwYXJzZVZhbHVlICE9PSB2b2lkIDAgPyBfY29uZmlnJHBhcnNlVmFsdWUgOiBpZGVudGl0eUZ1bmM7XG4gICAgdGhpcy5uYW1lID0gY29uZmlnLm5hbWU7XG4gICAgdGhpcy5kZXNjcmlwdGlvbiA9IGNvbmZpZy5kZXNjcmlwdGlvbjtcbiAgICB0aGlzLnNwZWNpZmllZEJ5VXJsID0gY29uZmlnLnNwZWNpZmllZEJ5VXJsO1xuICAgIHRoaXMuc2VyaWFsaXplID0gKF9jb25maWckc2VyaWFsaXplID0gY29uZmlnLnNlcmlhbGl6ZSkgIT09IG51bGwgJiYgX2NvbmZpZyRzZXJpYWxpemUgIT09IHZvaWQgMCA/IF9jb25maWckc2VyaWFsaXplIDogaWRlbnRpdHlGdW5jO1xuICAgIHRoaXMucGFyc2VWYWx1ZSA9IHBhcnNlVmFsdWU7XG4gICAgdGhpcy5wYXJzZUxpdGVyYWwgPSAoX2NvbmZpZyRwYXJzZUxpdGVyYWwgPSBjb25maWcucGFyc2VMaXRlcmFsKSAhPT0gbnVsbCAmJiBfY29uZmlnJHBhcnNlTGl0ZXJhbCAhPT0gdm9pZCAwID8gX2NvbmZpZyRwYXJzZUxpdGVyYWwgOiBmdW5jdGlvbiAobm9kZSwgdmFyaWFibGVzKSB7XG4gICAgICByZXR1cm4gcGFyc2VWYWx1ZSh2YWx1ZUZyb21BU1RVbnR5cGVkKG5vZGUsIHZhcmlhYmxlcykpO1xuICAgIH07XG4gICAgdGhpcy5leHRlbnNpb25zID0gY29uZmlnLmV4dGVuc2lvbnMgJiYgdG9PYmpNYXAoY29uZmlnLmV4dGVuc2lvbnMpO1xuICAgIHRoaXMuYXN0Tm9kZSA9IGNvbmZpZy5hc3ROb2RlO1xuICAgIHRoaXMuZXh0ZW5zaW9uQVNUTm9kZXMgPSB1bmRlZmluZUlmRW1wdHkoY29uZmlnLmV4dGVuc2lvbkFTVE5vZGVzKTtcbiAgICB0eXBlb2YgY29uZmlnLm5hbWUgPT09ICdzdHJpbmcnIHx8IGRldkFzc2VydCgwLCAnTXVzdCBwcm92aWRlIG5hbWUuJyk7XG4gICAgY29uZmlnLnNwZWNpZmllZEJ5VXJsID09IG51bGwgfHwgdHlwZW9mIGNvbmZpZy5zcGVjaWZpZWRCeVVybCA9PT0gJ3N0cmluZycgfHwgZGV2QXNzZXJ0KDAsIFwiXCIuY29uY2F0KHRoaXMubmFtZSwgXCIgbXVzdCBwcm92aWRlIFxcXCJzcGVjaWZpZWRCeVVybFxcXCIgYXMgYSBzdHJpbmcsIFwiKSArIFwiYnV0IGdvdDogXCIuY29uY2F0KGluc3BlY3QoY29uZmlnLnNwZWNpZmllZEJ5VXJsKSwgXCIuXCIpKTtcbiAgICBjb25maWcuc2VyaWFsaXplID09IG51bGwgfHwgdHlwZW9mIGNvbmZpZy5zZXJpYWxpemUgPT09ICdmdW5jdGlvbicgfHwgZGV2QXNzZXJ0KDAsIFwiXCIuY29uY2F0KHRoaXMubmFtZSwgXCIgbXVzdCBwcm92aWRlIFxcXCJzZXJpYWxpemVcXFwiIGZ1bmN0aW9uLiBJZiB0aGlzIGN1c3RvbSBTY2FsYXIgaXMgYWxzbyB1c2VkIGFzIGFuIGlucHV0IHR5cGUsIGVuc3VyZSBcXFwicGFyc2VWYWx1ZVxcXCIgYW5kIFxcXCJwYXJzZUxpdGVyYWxcXFwiIGZ1bmN0aW9ucyBhcmUgYWxzbyBwcm92aWRlZC5cIikpO1xuXG4gICAgaWYgKGNvbmZpZy5wYXJzZUxpdGVyYWwpIHtcbiAgICAgIHR5cGVvZiBjb25maWcucGFyc2VWYWx1ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgY29uZmlnLnBhcnNlTGl0ZXJhbCA9PT0gJ2Z1bmN0aW9uJyB8fCBkZXZBc3NlcnQoMCwgXCJcIi5jb25jYXQodGhpcy5uYW1lLCBcIiBtdXN0IHByb3ZpZGUgYm90aCBcXFwicGFyc2VWYWx1ZVxcXCIgYW5kIFxcXCJwYXJzZUxpdGVyYWxcXFwiIGZ1bmN0aW9ucy5cIikpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBHcmFwaFFMU2NhbGFyVHlwZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnRvQ29uZmlnID0gZnVuY3Rpb24gdG9Db25maWcoKSB7XG4gICAgdmFyIF90aGlzJGV4dGVuc2lvbkFTVE5vZDtcblxuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICBkZXNjcmlwdGlvbjogdGhpcy5kZXNjcmlwdGlvbixcbiAgICAgIHNwZWNpZmllZEJ5VXJsOiB0aGlzLnNwZWNpZmllZEJ5VXJsLFxuICAgICAgc2VyaWFsaXplOiB0aGlzLnNlcmlhbGl6ZSxcbiAgICAgIHBhcnNlVmFsdWU6IHRoaXMucGFyc2VWYWx1ZSxcbiAgICAgIHBhcnNlTGl0ZXJhbDogdGhpcy5wYXJzZUxpdGVyYWwsXG4gICAgICBleHRlbnNpb25zOiB0aGlzLmV4dGVuc2lvbnMsXG4gICAgICBhc3ROb2RlOiB0aGlzLmFzdE5vZGUsXG4gICAgICBleHRlbnNpb25BU1ROb2RlczogKF90aGlzJGV4dGVuc2lvbkFTVE5vZCA9IHRoaXMuZXh0ZW5zaW9uQVNUTm9kZXMpICE9PSBudWxsICYmIF90aGlzJGV4dGVuc2lvbkFTVE5vZCAhPT0gdm9pZCAwID8gX3RoaXMkZXh0ZW5zaW9uQVNUTm9kIDogW11cbiAgICB9O1xuICB9O1xuXG4gIF9wcm90by50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm5hbWU7XG4gIH07XG5cbiAgX3Byb3RvLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICByZXR1cm4gdGhpcy50b1N0cmluZygpO1xuICB9IC8vICRGbG93Rml4TWVbdW5zdXBwb3J0ZWQtc3ludGF4XSBGbG93IGRvZXNuJ3Qgc3VwcG9ydCBjb21wdXRlZCBwcm9wZXJ0aWVzIHlldFxuICA7XG5cbiAgX2NyZWF0ZUNsYXNzKEdyYXBoUUxTY2FsYXJUeXBlLCBbe1xuICAgIGtleTogU1lNQk9MX1RPX1NUUklOR19UQUcsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gJ0dyYXBoUUxTY2FsYXJUeXBlJztcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gR3JhcGhRTFNjYWxhclR5cGU7XG59KCk7IC8vIFByaW50IGEgc2ltcGxpZmllZCBmb3JtIHdoZW4gYXBwZWFyaW5nIGluIGBpbnNwZWN0YCBhbmQgYHV0aWwuaW5zcGVjdGAuXG5cbmRlZmluZUluc3BlY3QoR3JhcGhRTFNjYWxhclR5cGUpO1xuXG4vKipcbiAqIE9iamVjdCBUeXBlIERlZmluaXRpb25cbiAqXG4gKiBBbG1vc3QgYWxsIG9mIHRoZSBHcmFwaFFMIHR5cGVzIHlvdSBkZWZpbmUgd2lsbCBiZSBvYmplY3QgdHlwZXMuIE9iamVjdCB0eXBlc1xuICogaGF2ZSBhIG5hbWUsIGJ1dCBtb3N0IGltcG9ydGFudGx5IGRlc2NyaWJlIHRoZWlyIGZpZWxkcy5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqICAgICBjb25zdCBBZGRyZXNzVHlwZSA9IG5ldyBHcmFwaFFMT2JqZWN0VHlwZSh7XG4gKiAgICAgICBuYW1lOiAnQWRkcmVzcycsXG4gKiAgICAgICBmaWVsZHM6IHtcbiAqICAgICAgICAgc3RyZWV0OiB7IHR5cGU6IEdyYXBoUUxTdHJpbmcgfSxcbiAqICAgICAgICAgbnVtYmVyOiB7IHR5cGU6IEdyYXBoUUxJbnQgfSxcbiAqICAgICAgICAgZm9ybWF0dGVkOiB7XG4gKiAgICAgICAgICAgdHlwZTogR3JhcGhRTFN0cmluZyxcbiAqICAgICAgICAgICByZXNvbHZlKG9iaikge1xuICogICAgICAgICAgICAgcmV0dXJuIG9iai5udW1iZXIgKyAnICcgKyBvYmouc3RyZWV0XG4gKiAgICAgICAgICAgfVxuICogICAgICAgICB9XG4gKiAgICAgICB9XG4gKiAgICAgfSk7XG4gKlxuICogV2hlbiB0d28gdHlwZXMgbmVlZCB0byByZWZlciB0byBlYWNoIG90aGVyLCBvciBhIHR5cGUgbmVlZHMgdG8gcmVmZXIgdG9cbiAqIGl0c2VsZiBpbiBhIGZpZWxkLCB5b3UgY2FuIHVzZSBhIGZ1bmN0aW9uIGV4cHJlc3Npb24gKGFrYSBhIGNsb3N1cmUgb3IgYVxuICogdGh1bmspIHRvIHN1cHBseSB0aGUgZmllbGRzIGxhemlseS5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqICAgICBjb25zdCBQZXJzb25UeXBlID0gbmV3IEdyYXBoUUxPYmplY3RUeXBlKHtcbiAqICAgICAgIG5hbWU6ICdQZXJzb24nLFxuICogICAgICAgZmllbGRzOiAoKSA9PiAoe1xuICogICAgICAgICBuYW1lOiB7IHR5cGU6IEdyYXBoUUxTdHJpbmcgfSxcbiAqICAgICAgICAgYmVzdEZyaWVuZDogeyB0eXBlOiBQZXJzb25UeXBlIH0sXG4gKiAgICAgICB9KVxuICogICAgIH0pO1xuICpcbiAqL1xuZXhwb3J0IHZhciBHcmFwaFFMT2JqZWN0VHlwZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEdyYXBoUUxPYmplY3RUeXBlKGNvbmZpZykge1xuICAgIHRoaXMubmFtZSA9IGNvbmZpZy5uYW1lO1xuICAgIHRoaXMuZGVzY3JpcHRpb24gPSBjb25maWcuZGVzY3JpcHRpb247XG4gICAgdGhpcy5pc1R5cGVPZiA9IGNvbmZpZy5pc1R5cGVPZjtcbiAgICB0aGlzLmV4dGVuc2lvbnMgPSBjb25maWcuZXh0ZW5zaW9ucyAmJiB0b09iak1hcChjb25maWcuZXh0ZW5zaW9ucyk7XG4gICAgdGhpcy5hc3ROb2RlID0gY29uZmlnLmFzdE5vZGU7XG4gICAgdGhpcy5leHRlbnNpb25BU1ROb2RlcyA9IHVuZGVmaW5lSWZFbXB0eShjb25maWcuZXh0ZW5zaW9uQVNUTm9kZXMpO1xuICAgIHRoaXMuX2ZpZWxkcyA9IGRlZmluZUZpZWxkTWFwLmJpbmQodW5kZWZpbmVkLCBjb25maWcpO1xuICAgIHRoaXMuX2ludGVyZmFjZXMgPSBkZWZpbmVJbnRlcmZhY2VzLmJpbmQodW5kZWZpbmVkLCBjb25maWcpO1xuICAgIHR5cGVvZiBjb25maWcubmFtZSA9PT0gJ3N0cmluZycgfHwgZGV2QXNzZXJ0KDAsICdNdXN0IHByb3ZpZGUgbmFtZS4nKTtcbiAgICBjb25maWcuaXNUeXBlT2YgPT0gbnVsbCB8fCB0eXBlb2YgY29uZmlnLmlzVHlwZU9mID09PSAnZnVuY3Rpb24nIHx8IGRldkFzc2VydCgwLCBcIlwiLmNvbmNhdCh0aGlzLm5hbWUsIFwiIG11c3QgcHJvdmlkZSBcXFwiaXNUeXBlT2ZcXFwiIGFzIGEgZnVuY3Rpb24sIFwiKSArIFwiYnV0IGdvdDogXCIuY29uY2F0KGluc3BlY3QoY29uZmlnLmlzVHlwZU9mKSwgXCIuXCIpKTtcbiAgfVxuXG4gIHZhciBfcHJvdG8yID0gR3JhcGhRTE9iamVjdFR5cGUucHJvdG90eXBlO1xuXG4gIF9wcm90bzIuZ2V0RmllbGRzID0gZnVuY3Rpb24gZ2V0RmllbGRzKCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5fZmllbGRzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzLl9maWVsZHMgPSB0aGlzLl9maWVsZHMoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fZmllbGRzO1xuICB9O1xuXG4gIF9wcm90bzIuZ2V0SW50ZXJmYWNlcyA9IGZ1bmN0aW9uIGdldEludGVyZmFjZXMoKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLl9pbnRlcmZhY2VzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzLl9pbnRlcmZhY2VzID0gdGhpcy5faW50ZXJmYWNlcygpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9pbnRlcmZhY2VzO1xuICB9O1xuXG4gIF9wcm90bzIudG9Db25maWcgPSBmdW5jdGlvbiB0b0NvbmZpZygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgZGVzY3JpcHRpb246IHRoaXMuZGVzY3JpcHRpb24sXG4gICAgICBpbnRlcmZhY2VzOiB0aGlzLmdldEludGVyZmFjZXMoKSxcbiAgICAgIGZpZWxkczogZmllbGRzVG9GaWVsZHNDb25maWcodGhpcy5nZXRGaWVsZHMoKSksXG4gICAgICBpc1R5cGVPZjogdGhpcy5pc1R5cGVPZixcbiAgICAgIGV4dGVuc2lvbnM6IHRoaXMuZXh0ZW5zaW9ucyxcbiAgICAgIGFzdE5vZGU6IHRoaXMuYXN0Tm9kZSxcbiAgICAgIGV4dGVuc2lvbkFTVE5vZGVzOiB0aGlzLmV4dGVuc2lvbkFTVE5vZGVzIHx8IFtdXG4gICAgfTtcbiAgfTtcblxuICBfcHJvdG8yLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubmFtZTtcbiAgfTtcblxuICBfcHJvdG8yLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICByZXR1cm4gdGhpcy50b1N0cmluZygpO1xuICB9IC8vICRGbG93Rml4TWVbdW5zdXBwb3J0ZWQtc3ludGF4XSBGbG93IGRvZXNuJ3Qgc3VwcG9ydCBjb21wdXRlZCBwcm9wZXJ0aWVzIHlldFxuICA7XG5cbiAgX2NyZWF0ZUNsYXNzKEdyYXBoUUxPYmplY3RUeXBlLCBbe1xuICAgIGtleTogU1lNQk9MX1RPX1NUUklOR19UQUcsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gJ0dyYXBoUUxPYmplY3RUeXBlJztcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gR3JhcGhRTE9iamVjdFR5cGU7XG59KCk7IC8vIFByaW50IGEgc2ltcGxpZmllZCBmb3JtIHdoZW4gYXBwZWFyaW5nIGluIGBpbnNwZWN0YCBhbmQgYHV0aWwuaW5zcGVjdGAuXG5cbmRlZmluZUluc3BlY3QoR3JhcGhRTE9iamVjdFR5cGUpO1xuXG5mdW5jdGlvbiBkZWZpbmVJbnRlcmZhY2VzKGNvbmZpZykge1xuICB2YXIgX3Jlc29sdmVUaHVuaztcblxuICB2YXIgaW50ZXJmYWNlcyA9IChfcmVzb2x2ZVRodW5rID0gcmVzb2x2ZVRodW5rKGNvbmZpZy5pbnRlcmZhY2VzKSkgIT09IG51bGwgJiYgX3Jlc29sdmVUaHVuayAhPT0gdm9pZCAwID8gX3Jlc29sdmVUaHVuayA6IFtdO1xuICBBcnJheS5pc0FycmF5KGludGVyZmFjZXMpIHx8IGRldkFzc2VydCgwLCBcIlwiLmNvbmNhdChjb25maWcubmFtZSwgXCIgaW50ZXJmYWNlcyBtdXN0IGJlIGFuIEFycmF5IG9yIGEgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhbiBBcnJheS5cIikpO1xuICByZXR1cm4gaW50ZXJmYWNlcztcbn1cblxuZnVuY3Rpb24gZGVmaW5lRmllbGRNYXAoY29uZmlnKSB7XG4gIHZhciBmaWVsZE1hcCA9IHJlc29sdmVUaHVuayhjb25maWcuZmllbGRzKTtcbiAgaXNQbGFpbk9iaihmaWVsZE1hcCkgfHwgZGV2QXNzZXJ0KDAsIFwiXCIuY29uY2F0KGNvbmZpZy5uYW1lLCBcIiBmaWVsZHMgbXVzdCBiZSBhbiBvYmplY3Qgd2l0aCBmaWVsZCBuYW1lcyBhcyBrZXlzIG9yIGEgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBzdWNoIGFuIG9iamVjdC5cIikpO1xuICByZXR1cm4gbWFwVmFsdWUoZmllbGRNYXAsIGZ1bmN0aW9uIChmaWVsZENvbmZpZywgZmllbGROYW1lKSB7XG4gICAgdmFyIF9maWVsZENvbmZpZyRhcmdzO1xuXG4gICAgaXNQbGFpbk9iaihmaWVsZENvbmZpZykgfHwgZGV2QXNzZXJ0KDAsIFwiXCIuY29uY2F0KGNvbmZpZy5uYW1lLCBcIi5cIikuY29uY2F0KGZpZWxkTmFtZSwgXCIgZmllbGQgY29uZmlnIG11c3QgYmUgYW4gb2JqZWN0LlwiKSk7XG4gICAgISgnaXNEZXByZWNhdGVkJyBpbiBmaWVsZENvbmZpZykgfHwgZGV2QXNzZXJ0KDAsIFwiXCIuY29uY2F0KGNvbmZpZy5uYW1lLCBcIi5cIikuY29uY2F0KGZpZWxkTmFtZSwgXCIgc2hvdWxkIHByb3ZpZGUgXFxcImRlcHJlY2F0aW9uUmVhc29uXFxcIiBpbnN0ZWFkIG9mIFxcXCJpc0RlcHJlY2F0ZWRcXFwiLlwiKSk7XG4gICAgZmllbGRDb25maWcucmVzb2x2ZSA9PSBudWxsIHx8IHR5cGVvZiBmaWVsZENvbmZpZy5yZXNvbHZlID09PSAnZnVuY3Rpb24nIHx8IGRldkFzc2VydCgwLCBcIlwiLmNvbmNhdChjb25maWcubmFtZSwgXCIuXCIpLmNvbmNhdChmaWVsZE5hbWUsIFwiIGZpZWxkIHJlc29sdmVyIG11c3QgYmUgYSBmdW5jdGlvbiBpZiBcIikgKyBcInByb3ZpZGVkLCBidXQgZ290OiBcIi5jb25jYXQoaW5zcGVjdChmaWVsZENvbmZpZy5yZXNvbHZlKSwgXCIuXCIpKTtcbiAgICB2YXIgYXJnc0NvbmZpZyA9IChfZmllbGRDb25maWckYXJncyA9IGZpZWxkQ29uZmlnLmFyZ3MpICE9PSBudWxsICYmIF9maWVsZENvbmZpZyRhcmdzICE9PSB2b2lkIDAgPyBfZmllbGRDb25maWckYXJncyA6IHt9O1xuICAgIGlzUGxhaW5PYmooYXJnc0NvbmZpZykgfHwgZGV2QXNzZXJ0KDAsIFwiXCIuY29uY2F0KGNvbmZpZy5uYW1lLCBcIi5cIikuY29uY2F0KGZpZWxkTmFtZSwgXCIgYXJncyBtdXN0IGJlIGFuIG9iamVjdCB3aXRoIGFyZ3VtZW50IG5hbWVzIGFzIGtleXMuXCIpKTtcbiAgICB2YXIgYXJncyA9IG9iamVjdEVudHJpZXMoYXJnc0NvbmZpZykubWFwKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICB2YXIgYXJnTmFtZSA9IF9yZWZbMF0sXG4gICAgICAgICAgYXJnQ29uZmlnID0gX3JlZlsxXTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5hbWU6IGFyZ05hbWUsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBhcmdDb25maWcuZGVzY3JpcHRpb24sXG4gICAgICAgIHR5cGU6IGFyZ0NvbmZpZy50eXBlLFxuICAgICAgICBkZWZhdWx0VmFsdWU6IGFyZ0NvbmZpZy5kZWZhdWx0VmFsdWUsXG4gICAgICAgIGRlcHJlY2F0aW9uUmVhc29uOiBhcmdDb25maWcuZGVwcmVjYXRpb25SZWFzb24sXG4gICAgICAgIGV4dGVuc2lvbnM6IGFyZ0NvbmZpZy5leHRlbnNpb25zICYmIHRvT2JqTWFwKGFyZ0NvbmZpZy5leHRlbnNpb25zKSxcbiAgICAgICAgYXN0Tm9kZTogYXJnQ29uZmlnLmFzdE5vZGVcbiAgICAgIH07XG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IGZpZWxkTmFtZSxcbiAgICAgIGRlc2NyaXB0aW9uOiBmaWVsZENvbmZpZy5kZXNjcmlwdGlvbixcbiAgICAgIHR5cGU6IGZpZWxkQ29uZmlnLnR5cGUsXG4gICAgICBhcmdzOiBhcmdzLFxuICAgICAgcmVzb2x2ZTogZmllbGRDb25maWcucmVzb2x2ZSxcbiAgICAgIHN1YnNjcmliZTogZmllbGRDb25maWcuc3Vic2NyaWJlLFxuICAgICAgaXNEZXByZWNhdGVkOiBmaWVsZENvbmZpZy5kZXByZWNhdGlvblJlYXNvbiAhPSBudWxsLFxuICAgICAgZGVwcmVjYXRpb25SZWFzb246IGZpZWxkQ29uZmlnLmRlcHJlY2F0aW9uUmVhc29uLFxuICAgICAgZXh0ZW5zaW9uczogZmllbGRDb25maWcuZXh0ZW5zaW9ucyAmJiB0b09iak1hcChmaWVsZENvbmZpZy5leHRlbnNpb25zKSxcbiAgICAgIGFzdE5vZGU6IGZpZWxkQ29uZmlnLmFzdE5vZGVcbiAgICB9O1xuICB9KTtcbn1cblxuZnVuY3Rpb24gaXNQbGFpbk9iaihvYmopIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZShvYmopICYmICFBcnJheS5pc0FycmF5KG9iaik7XG59XG5cbmZ1bmN0aW9uIGZpZWxkc1RvRmllbGRzQ29uZmlnKGZpZWxkcykge1xuICByZXR1cm4gbWFwVmFsdWUoZmllbGRzLCBmdW5jdGlvbiAoZmllbGQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZGVzY3JpcHRpb246IGZpZWxkLmRlc2NyaXB0aW9uLFxuICAgICAgdHlwZTogZmllbGQudHlwZSxcbiAgICAgIGFyZ3M6IGFyZ3NUb0FyZ3NDb25maWcoZmllbGQuYXJncyksXG4gICAgICByZXNvbHZlOiBmaWVsZC5yZXNvbHZlLFxuICAgICAgc3Vic2NyaWJlOiBmaWVsZC5zdWJzY3JpYmUsXG4gICAgICBkZXByZWNhdGlvblJlYXNvbjogZmllbGQuZGVwcmVjYXRpb25SZWFzb24sXG4gICAgICBleHRlbnNpb25zOiBmaWVsZC5leHRlbnNpb25zLFxuICAgICAgYXN0Tm9kZTogZmllbGQuYXN0Tm9kZVxuICAgIH07XG4gIH0pO1xufVxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBhcmdzVG9BcmdzQ29uZmlnKGFyZ3MpIHtcbiAgcmV0dXJuIGtleVZhbE1hcChhcmdzLCBmdW5jdGlvbiAoYXJnKSB7XG4gICAgcmV0dXJuIGFyZy5uYW1lO1xuICB9LCBmdW5jdGlvbiAoYXJnKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRlc2NyaXB0aW9uOiBhcmcuZGVzY3JpcHRpb24sXG4gICAgICB0eXBlOiBhcmcudHlwZSxcbiAgICAgIGRlZmF1bHRWYWx1ZTogYXJnLmRlZmF1bHRWYWx1ZSxcbiAgICAgIGRlcHJlY2F0aW9uUmVhc29uOiBhcmcuZGVwcmVjYXRpb25SZWFzb24sXG4gICAgICBleHRlbnNpb25zOiBhcmcuZXh0ZW5zaW9ucyxcbiAgICAgIGFzdE5vZGU6IGFyZy5hc3ROb2RlXG4gICAgfTtcbiAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNSZXF1aXJlZEFyZ3VtZW50KGFyZykge1xuICByZXR1cm4gaXNOb25OdWxsVHlwZShhcmcudHlwZSkgJiYgYXJnLmRlZmF1bHRWYWx1ZSA9PT0gdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIEludGVyZmFjZSBUeXBlIERlZmluaXRpb25cbiAqXG4gKiBXaGVuIGEgZmllbGQgY2FuIHJldHVybiBvbmUgb2YgYSBoZXRlcm9nZW5lb3VzIHNldCBvZiB0eXBlcywgYSBJbnRlcmZhY2UgdHlwZVxuICogaXMgdXNlZCB0byBkZXNjcmliZSB3aGF0IHR5cGVzIGFyZSBwb3NzaWJsZSwgd2hhdCBmaWVsZHMgYXJlIGluIGNvbW1vbiBhY3Jvc3NcbiAqIGFsbCB0eXBlcywgYXMgd2VsbCBhcyBhIGZ1bmN0aW9uIHRvIGRldGVybWluZSB3aGljaCB0eXBlIGlzIGFjdHVhbGx5IHVzZWRcbiAqIHdoZW4gdGhlIGZpZWxkIGlzIHJlc29sdmVkLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogICAgIGNvbnN0IEVudGl0eVR5cGUgPSBuZXcgR3JhcGhRTEludGVyZmFjZVR5cGUoe1xuICogICAgICAgbmFtZTogJ0VudGl0eScsXG4gKiAgICAgICBmaWVsZHM6IHtcbiAqICAgICAgICAgbmFtZTogeyB0eXBlOiBHcmFwaFFMU3RyaW5nIH1cbiAqICAgICAgIH1cbiAqICAgICB9KTtcbiAqXG4gKi9cbmV4cG9ydCB2YXIgR3JhcGhRTEludGVyZmFjZVR5cGUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBHcmFwaFFMSW50ZXJmYWNlVHlwZShjb25maWcpIHtcbiAgICB0aGlzLm5hbWUgPSBjb25maWcubmFtZTtcbiAgICB0aGlzLmRlc2NyaXB0aW9uID0gY29uZmlnLmRlc2NyaXB0aW9uO1xuICAgIHRoaXMucmVzb2x2ZVR5cGUgPSBjb25maWcucmVzb2x2ZVR5cGU7XG4gICAgdGhpcy5leHRlbnNpb25zID0gY29uZmlnLmV4dGVuc2lvbnMgJiYgdG9PYmpNYXAoY29uZmlnLmV4dGVuc2lvbnMpO1xuICAgIHRoaXMuYXN0Tm9kZSA9IGNvbmZpZy5hc3ROb2RlO1xuICAgIHRoaXMuZXh0ZW5zaW9uQVNUTm9kZXMgPSB1bmRlZmluZUlmRW1wdHkoY29uZmlnLmV4dGVuc2lvbkFTVE5vZGVzKTtcbiAgICB0aGlzLl9maWVsZHMgPSBkZWZpbmVGaWVsZE1hcC5iaW5kKHVuZGVmaW5lZCwgY29uZmlnKTtcbiAgICB0aGlzLl9pbnRlcmZhY2VzID0gZGVmaW5lSW50ZXJmYWNlcy5iaW5kKHVuZGVmaW5lZCwgY29uZmlnKTtcbiAgICB0eXBlb2YgY29uZmlnLm5hbWUgPT09ICdzdHJpbmcnIHx8IGRldkFzc2VydCgwLCAnTXVzdCBwcm92aWRlIG5hbWUuJyk7XG4gICAgY29uZmlnLnJlc29sdmVUeXBlID09IG51bGwgfHwgdHlwZW9mIGNvbmZpZy5yZXNvbHZlVHlwZSA9PT0gJ2Z1bmN0aW9uJyB8fCBkZXZBc3NlcnQoMCwgXCJcIi5jb25jYXQodGhpcy5uYW1lLCBcIiBtdXN0IHByb3ZpZGUgXFxcInJlc29sdmVUeXBlXFxcIiBhcyBhIGZ1bmN0aW9uLCBcIikgKyBcImJ1dCBnb3Q6IFwiLmNvbmNhdChpbnNwZWN0KGNvbmZpZy5yZXNvbHZlVHlwZSksIFwiLlwiKSk7XG4gIH1cblxuICB2YXIgX3Byb3RvMyA9IEdyYXBoUUxJbnRlcmZhY2VUeXBlLnByb3RvdHlwZTtcblxuICBfcHJvdG8zLmdldEZpZWxkcyA9IGZ1bmN0aW9uIGdldEZpZWxkcygpIHtcbiAgICBpZiAodHlwZW9mIHRoaXMuX2ZpZWxkcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhpcy5fZmllbGRzID0gdGhpcy5fZmllbGRzKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2ZpZWxkcztcbiAgfTtcblxuICBfcHJvdG8zLmdldEludGVyZmFjZXMgPSBmdW5jdGlvbiBnZXRJbnRlcmZhY2VzKCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5faW50ZXJmYWNlcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhpcy5faW50ZXJmYWNlcyA9IHRoaXMuX2ludGVyZmFjZXMoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5faW50ZXJmYWNlcztcbiAgfTtcblxuICBfcHJvdG8zLnRvQ29uZmlnID0gZnVuY3Rpb24gdG9Db25maWcoKSB7XG4gICAgdmFyIF90aGlzJGV4dGVuc2lvbkFTVE5vZDI7XG5cbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgZGVzY3JpcHRpb246IHRoaXMuZGVzY3JpcHRpb24sXG4gICAgICBpbnRlcmZhY2VzOiB0aGlzLmdldEludGVyZmFjZXMoKSxcbiAgICAgIGZpZWxkczogZmllbGRzVG9GaWVsZHNDb25maWcodGhpcy5nZXRGaWVsZHMoKSksXG4gICAgICByZXNvbHZlVHlwZTogdGhpcy5yZXNvbHZlVHlwZSxcbiAgICAgIGV4dGVuc2lvbnM6IHRoaXMuZXh0ZW5zaW9ucyxcbiAgICAgIGFzdE5vZGU6IHRoaXMuYXN0Tm9kZSxcbiAgICAgIGV4dGVuc2lvbkFTVE5vZGVzOiAoX3RoaXMkZXh0ZW5zaW9uQVNUTm9kMiA9IHRoaXMuZXh0ZW5zaW9uQVNUTm9kZXMpICE9PSBudWxsICYmIF90aGlzJGV4dGVuc2lvbkFTVE5vZDIgIT09IHZvaWQgMCA/IF90aGlzJGV4dGVuc2lvbkFTVE5vZDIgOiBbXVxuICAgIH07XG4gIH07XG5cbiAgX3Byb3RvMy50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm5hbWU7XG4gIH07XG5cbiAgX3Byb3RvMy50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHRoaXMudG9TdHJpbmcoKTtcbiAgfSAvLyAkRmxvd0ZpeE1lW3Vuc3VwcG9ydGVkLXN5bnRheF0gRmxvdyBkb2Vzbid0IHN1cHBvcnQgY29tcHV0ZWQgcHJvcGVydGllcyB5ZXRcbiAgO1xuXG4gIF9jcmVhdGVDbGFzcyhHcmFwaFFMSW50ZXJmYWNlVHlwZSwgW3tcbiAgICBrZXk6IFNZTUJPTF9UT19TVFJJTkdfVEFHLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuICdHcmFwaFFMSW50ZXJmYWNlVHlwZSc7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEdyYXBoUUxJbnRlcmZhY2VUeXBlO1xufSgpOyAvLyBQcmludCBhIHNpbXBsaWZpZWQgZm9ybSB3aGVuIGFwcGVhcmluZyBpbiBgaW5zcGVjdGAgYW5kIGB1dGlsLmluc3BlY3RgLlxuXG5kZWZpbmVJbnNwZWN0KEdyYXBoUUxJbnRlcmZhY2VUeXBlKTtcblxuLyoqXG4gKiBVbmlvbiBUeXBlIERlZmluaXRpb25cbiAqXG4gKiBXaGVuIGEgZmllbGQgY2FuIHJldHVybiBvbmUgb2YgYSBoZXRlcm9nZW5lb3VzIHNldCBvZiB0eXBlcywgYSBVbmlvbiB0eXBlXG4gKiBpcyB1c2VkIHRvIGRlc2NyaWJlIHdoYXQgdHlwZXMgYXJlIHBvc3NpYmxlIGFzIHdlbGwgYXMgcHJvdmlkaW5nIGEgZnVuY3Rpb25cbiAqIHRvIGRldGVybWluZSB3aGljaCB0eXBlIGlzIGFjdHVhbGx5IHVzZWQgd2hlbiB0aGUgZmllbGQgaXMgcmVzb2x2ZWQuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiAgICAgY29uc3QgUGV0VHlwZSA9IG5ldyBHcmFwaFFMVW5pb25UeXBlKHtcbiAqICAgICAgIG5hbWU6ICdQZXQnLFxuICogICAgICAgdHlwZXM6IFsgRG9nVHlwZSwgQ2F0VHlwZSBdLFxuICogICAgICAgcmVzb2x2ZVR5cGUodmFsdWUpIHtcbiAqICAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgRG9nKSB7XG4gKiAgICAgICAgICAgcmV0dXJuIERvZ1R5cGU7XG4gKiAgICAgICAgIH1cbiAqICAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgQ2F0KSB7XG4gKiAgICAgICAgICAgcmV0dXJuIENhdFR5cGU7XG4gKiAgICAgICAgIH1cbiAqICAgICAgIH1cbiAqICAgICB9KTtcbiAqXG4gKi9cbmV4cG9ydCB2YXIgR3JhcGhRTFVuaW9uVHlwZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEdyYXBoUUxVbmlvblR5cGUoY29uZmlnKSB7XG4gICAgdGhpcy5uYW1lID0gY29uZmlnLm5hbWU7XG4gICAgdGhpcy5kZXNjcmlwdGlvbiA9IGNvbmZpZy5kZXNjcmlwdGlvbjtcbiAgICB0aGlzLnJlc29sdmVUeXBlID0gY29uZmlnLnJlc29sdmVUeXBlO1xuICAgIHRoaXMuZXh0ZW5zaW9ucyA9IGNvbmZpZy5leHRlbnNpb25zICYmIHRvT2JqTWFwKGNvbmZpZy5leHRlbnNpb25zKTtcbiAgICB0aGlzLmFzdE5vZGUgPSBjb25maWcuYXN0Tm9kZTtcbiAgICB0aGlzLmV4dGVuc2lvbkFTVE5vZGVzID0gdW5kZWZpbmVJZkVtcHR5KGNvbmZpZy5leHRlbnNpb25BU1ROb2Rlcyk7XG4gICAgdGhpcy5fdHlwZXMgPSBkZWZpbmVUeXBlcy5iaW5kKHVuZGVmaW5lZCwgY29uZmlnKTtcbiAgICB0eXBlb2YgY29uZmlnLm5hbWUgPT09ICdzdHJpbmcnIHx8IGRldkFzc2VydCgwLCAnTXVzdCBwcm92aWRlIG5hbWUuJyk7XG4gICAgY29uZmlnLnJlc29sdmVUeXBlID09IG51bGwgfHwgdHlwZW9mIGNvbmZpZy5yZXNvbHZlVHlwZSA9PT0gJ2Z1bmN0aW9uJyB8fCBkZXZBc3NlcnQoMCwgXCJcIi5jb25jYXQodGhpcy5uYW1lLCBcIiBtdXN0IHByb3ZpZGUgXFxcInJlc29sdmVUeXBlXFxcIiBhcyBhIGZ1bmN0aW9uLCBcIikgKyBcImJ1dCBnb3Q6IFwiLmNvbmNhdChpbnNwZWN0KGNvbmZpZy5yZXNvbHZlVHlwZSksIFwiLlwiKSk7XG4gIH1cblxuICB2YXIgX3Byb3RvNCA9IEdyYXBoUUxVbmlvblR5cGUucHJvdG90eXBlO1xuXG4gIF9wcm90bzQuZ2V0VHlwZXMgPSBmdW5jdGlvbiBnZXRUeXBlcygpIHtcbiAgICBpZiAodHlwZW9mIHRoaXMuX3R5cGVzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzLl90eXBlcyA9IHRoaXMuX3R5cGVzKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX3R5cGVzO1xuICB9O1xuXG4gIF9wcm90bzQudG9Db25maWcgPSBmdW5jdGlvbiB0b0NvbmZpZygpIHtcbiAgICB2YXIgX3RoaXMkZXh0ZW5zaW9uQVNUTm9kMztcblxuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICBkZXNjcmlwdGlvbjogdGhpcy5kZXNjcmlwdGlvbixcbiAgICAgIHR5cGVzOiB0aGlzLmdldFR5cGVzKCksXG4gICAgICByZXNvbHZlVHlwZTogdGhpcy5yZXNvbHZlVHlwZSxcbiAgICAgIGV4dGVuc2lvbnM6IHRoaXMuZXh0ZW5zaW9ucyxcbiAgICAgIGFzdE5vZGU6IHRoaXMuYXN0Tm9kZSxcbiAgICAgIGV4dGVuc2lvbkFTVE5vZGVzOiAoX3RoaXMkZXh0ZW5zaW9uQVNUTm9kMyA9IHRoaXMuZXh0ZW5zaW9uQVNUTm9kZXMpICE9PSBudWxsICYmIF90aGlzJGV4dGVuc2lvbkFTVE5vZDMgIT09IHZvaWQgMCA/IF90aGlzJGV4dGVuc2lvbkFTVE5vZDMgOiBbXVxuICAgIH07XG4gIH07XG5cbiAgX3Byb3RvNC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm5hbWU7XG4gIH07XG5cbiAgX3Byb3RvNC50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHRoaXMudG9TdHJpbmcoKTtcbiAgfSAvLyAkRmxvd0ZpeE1lW3Vuc3VwcG9ydGVkLXN5bnRheF0gRmxvdyBkb2Vzbid0IHN1cHBvcnQgY29tcHV0ZWQgcHJvcGVydGllcyB5ZXRcbiAgO1xuXG4gIF9jcmVhdGVDbGFzcyhHcmFwaFFMVW5pb25UeXBlLCBbe1xuICAgIGtleTogU1lNQk9MX1RPX1NUUklOR19UQUcsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gJ0dyYXBoUUxVbmlvblR5cGUnO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBHcmFwaFFMVW5pb25UeXBlO1xufSgpOyAvLyBQcmludCBhIHNpbXBsaWZpZWQgZm9ybSB3aGVuIGFwcGVhcmluZyBpbiBgaW5zcGVjdGAgYW5kIGB1dGlsLmluc3BlY3RgLlxuXG5kZWZpbmVJbnNwZWN0KEdyYXBoUUxVbmlvblR5cGUpO1xuXG5mdW5jdGlvbiBkZWZpbmVUeXBlcyhjb25maWcpIHtcbiAgdmFyIHR5cGVzID0gcmVzb2x2ZVRodW5rKGNvbmZpZy50eXBlcyk7XG4gIEFycmF5LmlzQXJyYXkodHlwZXMpIHx8IGRldkFzc2VydCgwLCBcIk11c3QgcHJvdmlkZSBBcnJheSBvZiB0eXBlcyBvciBhIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgc3VjaCBhbiBhcnJheSBmb3IgVW5pb24gXCIuY29uY2F0KGNvbmZpZy5uYW1lLCBcIi5cIikpO1xuICByZXR1cm4gdHlwZXM7XG59XG5cbi8qKlxuICogRW51bSBUeXBlIERlZmluaXRpb25cbiAqXG4gKiBTb21lIGxlYWYgdmFsdWVzIG9mIHJlcXVlc3RzIGFuZCBpbnB1dCB2YWx1ZXMgYXJlIEVudW1zLiBHcmFwaFFMIHNlcmlhbGl6ZXNcbiAqIEVudW0gdmFsdWVzIGFzIHN0cmluZ3MsIGhvd2V2ZXIgaW50ZXJuYWxseSBFbnVtcyBjYW4gYmUgcmVwcmVzZW50ZWQgYnkgYW55XG4gKiBraW5kIG9mIHR5cGUsIG9mdGVuIGludGVnZXJzLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogICAgIGNvbnN0IFJHQlR5cGUgPSBuZXcgR3JhcGhRTEVudW1UeXBlKHtcbiAqICAgICAgIG5hbWU6ICdSR0InLFxuICogICAgICAgdmFsdWVzOiB7XG4gKiAgICAgICAgIFJFRDogeyB2YWx1ZTogMCB9LFxuICogICAgICAgICBHUkVFTjogeyB2YWx1ZTogMSB9LFxuICogICAgICAgICBCTFVFOiB7IHZhbHVlOiAyIH1cbiAqICAgICAgIH1cbiAqICAgICB9KTtcbiAqXG4gKiBOb3RlOiBJZiBhIHZhbHVlIGlzIG5vdCBwcm92aWRlZCBpbiBhIGRlZmluaXRpb24sIHRoZSBuYW1lIG9mIHRoZSBlbnVtIHZhbHVlXG4gKiB3aWxsIGJlIHVzZWQgYXMgaXRzIGludGVybmFsIHZhbHVlLlxuICovXG5leHBvcnQgdmFyIEdyYXBoUUxFbnVtVHlwZVxuLyogPFQ+ICovXG49IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEdyYXBoUUxFbnVtVHlwZShjb25maWcpIHtcbiAgICB0aGlzLm5hbWUgPSBjb25maWcubmFtZTtcbiAgICB0aGlzLmRlc2NyaXB0aW9uID0gY29uZmlnLmRlc2NyaXB0aW9uO1xuICAgIHRoaXMuZXh0ZW5zaW9ucyA9IGNvbmZpZy5leHRlbnNpb25zICYmIHRvT2JqTWFwKGNvbmZpZy5leHRlbnNpb25zKTtcbiAgICB0aGlzLmFzdE5vZGUgPSBjb25maWcuYXN0Tm9kZTtcbiAgICB0aGlzLmV4dGVuc2lvbkFTVE5vZGVzID0gdW5kZWZpbmVJZkVtcHR5KGNvbmZpZy5leHRlbnNpb25BU1ROb2Rlcyk7XG4gICAgdGhpcy5fdmFsdWVzID0gZGVmaW5lRW51bVZhbHVlcyh0aGlzLm5hbWUsIGNvbmZpZy52YWx1ZXMpO1xuICAgIHRoaXMuX3ZhbHVlTG9va3VwID0gbmV3IE1hcCh0aGlzLl92YWx1ZXMubWFwKGZ1bmN0aW9uIChlbnVtVmFsdWUpIHtcbiAgICAgIHJldHVybiBbZW51bVZhbHVlLnZhbHVlLCBlbnVtVmFsdWVdO1xuICAgIH0pKTtcbiAgICB0aGlzLl9uYW1lTG9va3VwID0ga2V5TWFwKHRoaXMuX3ZhbHVlcywgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUubmFtZTtcbiAgICB9KTtcbiAgICB0eXBlb2YgY29uZmlnLm5hbWUgPT09ICdzdHJpbmcnIHx8IGRldkFzc2VydCgwLCAnTXVzdCBwcm92aWRlIG5hbWUuJyk7XG4gIH1cblxuICB2YXIgX3Byb3RvNSA9IEdyYXBoUUxFbnVtVHlwZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvNS5nZXRWYWx1ZXMgPSBmdW5jdGlvbiBnZXRWYWx1ZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlcztcbiAgfTtcblxuICBfcHJvdG81LmdldFZhbHVlID0gZnVuY3Rpb24gZ2V0VmFsdWUobmFtZSkge1xuICAgIHJldHVybiB0aGlzLl9uYW1lTG9va3VwW25hbWVdO1xuICB9O1xuXG4gIF9wcm90bzUuc2VyaWFsaXplID0gZnVuY3Rpb24gc2VyaWFsaXplKG91dHB1dFZhbHVlKSB7XG4gICAgdmFyIGVudW1WYWx1ZSA9IHRoaXMuX3ZhbHVlTG9va3VwLmdldChvdXRwdXRWYWx1ZSk7XG5cbiAgICBpZiAoZW51bVZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBHcmFwaFFMRXJyb3IoXCJFbnVtIFxcXCJcIi5jb25jYXQodGhpcy5uYW1lLCBcIlxcXCIgY2Fubm90IHJlcHJlc2VudCB2YWx1ZTogXCIpLmNvbmNhdChpbnNwZWN0KG91dHB1dFZhbHVlKSkpO1xuICAgIH1cblxuICAgIHJldHVybiBlbnVtVmFsdWUubmFtZTtcbiAgfTtcblxuICBfcHJvdG81LnBhcnNlVmFsdWUgPSBmdW5jdGlvbiBwYXJzZVZhbHVlKGlucHV0VmFsdWUpXG4gIC8qIFQgKi9cbiAge1xuICAgIGlmICh0eXBlb2YgaW5wdXRWYWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHZhciB2YWx1ZVN0ciA9IGluc3BlY3QoaW5wdXRWYWx1ZSk7XG4gICAgICB0aHJvdyBuZXcgR3JhcGhRTEVycm9yKFwiRW51bSBcXFwiXCIuY29uY2F0KHRoaXMubmFtZSwgXCJcXFwiIGNhbm5vdCByZXByZXNlbnQgbm9uLXN0cmluZyB2YWx1ZTogXCIpLmNvbmNhdCh2YWx1ZVN0ciwgXCIuXCIpICsgZGlkWW91TWVhbkVudW1WYWx1ZSh0aGlzLCB2YWx1ZVN0cikpO1xuICAgIH1cblxuICAgIHZhciBlbnVtVmFsdWUgPSB0aGlzLmdldFZhbHVlKGlucHV0VmFsdWUpO1xuXG4gICAgaWYgKGVudW1WYWx1ZSA9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgR3JhcGhRTEVycm9yKFwiVmFsdWUgXFxcIlwiLmNvbmNhdChpbnB1dFZhbHVlLCBcIlxcXCIgZG9lcyBub3QgZXhpc3QgaW4gXFxcIlwiKS5jb25jYXQodGhpcy5uYW1lLCBcIlxcXCIgZW51bS5cIikgKyBkaWRZb3VNZWFuRW51bVZhbHVlKHRoaXMsIGlucHV0VmFsdWUpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZW51bVZhbHVlLnZhbHVlO1xuICB9O1xuXG4gIF9wcm90bzUucGFyc2VMaXRlcmFsID0gZnVuY3Rpb24gcGFyc2VMaXRlcmFsKHZhbHVlTm9kZSwgX3ZhcmlhYmxlcylcbiAgLyogVCAqL1xuICB7XG4gICAgLy8gTm90ZTogdmFyaWFibGVzIHdpbGwgYmUgcmVzb2x2ZWQgdG8gYSB2YWx1ZSBiZWZvcmUgY2FsbGluZyB0aGlzIGZ1bmN0aW9uLlxuICAgIGlmICh2YWx1ZU5vZGUua2luZCAhPT0gS2luZC5FTlVNKSB7XG4gICAgICB2YXIgdmFsdWVTdHIgPSBwcmludCh2YWx1ZU5vZGUpO1xuICAgICAgdGhyb3cgbmV3IEdyYXBoUUxFcnJvcihcIkVudW0gXFxcIlwiLmNvbmNhdCh0aGlzLm5hbWUsIFwiXFxcIiBjYW5ub3QgcmVwcmVzZW50IG5vbi1lbnVtIHZhbHVlOiBcIikuY29uY2F0KHZhbHVlU3RyLCBcIi5cIikgKyBkaWRZb3VNZWFuRW51bVZhbHVlKHRoaXMsIHZhbHVlU3RyKSwgdmFsdWVOb2RlKTtcbiAgICB9XG5cbiAgICB2YXIgZW51bVZhbHVlID0gdGhpcy5nZXRWYWx1ZSh2YWx1ZU5vZGUudmFsdWUpO1xuXG4gICAgaWYgKGVudW1WYWx1ZSA9PSBudWxsKSB7XG4gICAgICB2YXIgX3ZhbHVlU3RyID0gcHJpbnQodmFsdWVOb2RlKTtcblxuICAgICAgdGhyb3cgbmV3IEdyYXBoUUxFcnJvcihcIlZhbHVlIFxcXCJcIi5jb25jYXQoX3ZhbHVlU3RyLCBcIlxcXCIgZG9lcyBub3QgZXhpc3QgaW4gXFxcIlwiKS5jb25jYXQodGhpcy5uYW1lLCBcIlxcXCIgZW51bS5cIikgKyBkaWRZb3VNZWFuRW51bVZhbHVlKHRoaXMsIF92YWx1ZVN0ciksIHZhbHVlTm9kZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVudW1WYWx1ZS52YWx1ZTtcbiAgfTtcblxuICBfcHJvdG81LnRvQ29uZmlnID0gZnVuY3Rpb24gdG9Db25maWcoKSB7XG4gICAgdmFyIF90aGlzJGV4dGVuc2lvbkFTVE5vZDQ7XG5cbiAgICB2YXIgdmFsdWVzID0ga2V5VmFsTWFwKHRoaXMuZ2V0VmFsdWVzKCksIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlLm5hbWU7XG4gICAgfSwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBkZXNjcmlwdGlvbjogdmFsdWUuZGVzY3JpcHRpb24sXG4gICAgICAgIHZhbHVlOiB2YWx1ZS52YWx1ZSxcbiAgICAgICAgZGVwcmVjYXRpb25SZWFzb246IHZhbHVlLmRlcHJlY2F0aW9uUmVhc29uLFxuICAgICAgICBleHRlbnNpb25zOiB2YWx1ZS5leHRlbnNpb25zLFxuICAgICAgICBhc3ROb2RlOiB2YWx1ZS5hc3ROb2RlXG4gICAgICB9O1xuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICBkZXNjcmlwdGlvbjogdGhpcy5kZXNjcmlwdGlvbixcbiAgICAgIHZhbHVlczogdmFsdWVzLFxuICAgICAgZXh0ZW5zaW9uczogdGhpcy5leHRlbnNpb25zLFxuICAgICAgYXN0Tm9kZTogdGhpcy5hc3ROb2RlLFxuICAgICAgZXh0ZW5zaW9uQVNUTm9kZXM6IChfdGhpcyRleHRlbnNpb25BU1ROb2Q0ID0gdGhpcy5leHRlbnNpb25BU1ROb2RlcykgIT09IG51bGwgJiYgX3RoaXMkZXh0ZW5zaW9uQVNUTm9kNCAhPT0gdm9pZCAwID8gX3RoaXMkZXh0ZW5zaW9uQVNUTm9kNCA6IFtdXG4gICAgfTtcbiAgfTtcblxuICBfcHJvdG81LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubmFtZTtcbiAgfTtcblxuICBfcHJvdG81LnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICByZXR1cm4gdGhpcy50b1N0cmluZygpO1xuICB9IC8vICRGbG93Rml4TWVbdW5zdXBwb3J0ZWQtc3ludGF4XSBGbG93IGRvZXNuJ3Qgc3VwcG9ydCBjb21wdXRlZCBwcm9wZXJ0aWVzIHlldFxuICA7XG5cbiAgX2NyZWF0ZUNsYXNzKEdyYXBoUUxFbnVtVHlwZSwgW3tcbiAgICBrZXk6IFNZTUJPTF9UT19TVFJJTkdfVEFHLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuICdHcmFwaFFMRW51bVR5cGUnO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBHcmFwaFFMRW51bVR5cGU7XG59KCk7IC8vIFByaW50IGEgc2ltcGxpZmllZCBmb3JtIHdoZW4gYXBwZWFyaW5nIGluIGBpbnNwZWN0YCBhbmQgYHV0aWwuaW5zcGVjdGAuXG5cbmRlZmluZUluc3BlY3QoR3JhcGhRTEVudW1UeXBlKTtcblxuZnVuY3Rpb24gZGlkWW91TWVhbkVudW1WYWx1ZShlbnVtVHlwZSwgdW5rbm93blZhbHVlU3RyKSB7XG4gIHZhciBhbGxOYW1lcyA9IGVudW1UeXBlLmdldFZhbHVlcygpLm1hcChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUubmFtZTtcbiAgfSk7XG4gIHZhciBzdWdnZXN0ZWRWYWx1ZXMgPSBzdWdnZXN0aW9uTGlzdCh1bmtub3duVmFsdWVTdHIsIGFsbE5hbWVzKTtcbiAgcmV0dXJuIGRpZFlvdU1lYW4oJ3RoZSBlbnVtIHZhbHVlJywgc3VnZ2VzdGVkVmFsdWVzKTtcbn1cblxuZnVuY3Rpb24gZGVmaW5lRW51bVZhbHVlcyh0eXBlTmFtZSwgdmFsdWVNYXApIHtcbiAgaXNQbGFpbk9iaih2YWx1ZU1hcCkgfHwgZGV2QXNzZXJ0KDAsIFwiXCIuY29uY2F0KHR5cGVOYW1lLCBcIiB2YWx1ZXMgbXVzdCBiZSBhbiBvYmplY3Qgd2l0aCB2YWx1ZSBuYW1lcyBhcyBrZXlzLlwiKSk7XG4gIHJldHVybiBvYmplY3RFbnRyaWVzKHZhbHVlTWFwKS5tYXAoZnVuY3Rpb24gKF9yZWYyKSB7XG4gICAgdmFyIHZhbHVlTmFtZSA9IF9yZWYyWzBdLFxuICAgICAgICB2YWx1ZUNvbmZpZyA9IF9yZWYyWzFdO1xuICAgIGlzUGxhaW5PYmoodmFsdWVDb25maWcpIHx8IGRldkFzc2VydCgwLCBcIlwiLmNvbmNhdCh0eXBlTmFtZSwgXCIuXCIpLmNvbmNhdCh2YWx1ZU5hbWUsIFwiIG11c3QgcmVmZXIgdG8gYW4gb2JqZWN0IHdpdGggYSBcXFwidmFsdWVcXFwiIGtleSBcIikgKyBcInJlcHJlc2VudGluZyBhbiBpbnRlcm5hbCB2YWx1ZSBidXQgZ290OiBcIi5jb25jYXQoaW5zcGVjdCh2YWx1ZUNvbmZpZyksIFwiLlwiKSk7XG4gICAgISgnaXNEZXByZWNhdGVkJyBpbiB2YWx1ZUNvbmZpZykgfHwgZGV2QXNzZXJ0KDAsIFwiXCIuY29uY2F0KHR5cGVOYW1lLCBcIi5cIikuY29uY2F0KHZhbHVlTmFtZSwgXCIgc2hvdWxkIHByb3ZpZGUgXFxcImRlcHJlY2F0aW9uUmVhc29uXFxcIiBpbnN0ZWFkIG9mIFxcXCJpc0RlcHJlY2F0ZWRcXFwiLlwiKSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IHZhbHVlTmFtZSxcbiAgICAgIGRlc2NyaXB0aW9uOiB2YWx1ZUNvbmZpZy5kZXNjcmlwdGlvbixcbiAgICAgIHZhbHVlOiB2YWx1ZUNvbmZpZy52YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWVDb25maWcudmFsdWUgOiB2YWx1ZU5hbWUsXG4gICAgICBpc0RlcHJlY2F0ZWQ6IHZhbHVlQ29uZmlnLmRlcHJlY2F0aW9uUmVhc29uICE9IG51bGwsXG4gICAgICBkZXByZWNhdGlvblJlYXNvbjogdmFsdWVDb25maWcuZGVwcmVjYXRpb25SZWFzb24sXG4gICAgICBleHRlbnNpb25zOiB2YWx1ZUNvbmZpZy5leHRlbnNpb25zICYmIHRvT2JqTWFwKHZhbHVlQ29uZmlnLmV4dGVuc2lvbnMpLFxuICAgICAgYXN0Tm9kZTogdmFsdWVDb25maWcuYXN0Tm9kZVxuICAgIH07XG4gIH0pO1xufVxuXG4vKipcbiAqIElucHV0IE9iamVjdCBUeXBlIERlZmluaXRpb25cbiAqXG4gKiBBbiBpbnB1dCBvYmplY3QgZGVmaW5lcyBhIHN0cnVjdHVyZWQgY29sbGVjdGlvbiBvZiBmaWVsZHMgd2hpY2ggbWF5IGJlXG4gKiBzdXBwbGllZCB0byBhIGZpZWxkIGFyZ3VtZW50LlxuICpcbiAqIFVzaW5nIGBOb25OdWxsYCB3aWxsIGVuc3VyZSB0aGF0IGEgdmFsdWUgbXVzdCBiZSBwcm92aWRlZCBieSB0aGUgcXVlcnlcbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqICAgICBjb25zdCBHZW9Qb2ludCA9IG5ldyBHcmFwaFFMSW5wdXRPYmplY3RUeXBlKHtcbiAqICAgICAgIG5hbWU6ICdHZW9Qb2ludCcsXG4gKiAgICAgICBmaWVsZHM6IHtcbiAqICAgICAgICAgbGF0OiB7IHR5cGU6IG5ldyBHcmFwaFFMTm9uTnVsbChHcmFwaFFMRmxvYXQpIH0sXG4gKiAgICAgICAgIGxvbjogeyB0eXBlOiBuZXcgR3JhcGhRTE5vbk51bGwoR3JhcGhRTEZsb2F0KSB9LFxuICogICAgICAgICBhbHQ6IHsgdHlwZTogR3JhcGhRTEZsb2F0LCBkZWZhdWx0VmFsdWU6IDAgfSxcbiAqICAgICAgIH1cbiAqICAgICB9KTtcbiAqXG4gKi9cbmV4cG9ydCB2YXIgR3JhcGhRTElucHV0T2JqZWN0VHlwZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEdyYXBoUUxJbnB1dE9iamVjdFR5cGUoY29uZmlnKSB7XG4gICAgdGhpcy5uYW1lID0gY29uZmlnLm5hbWU7XG4gICAgdGhpcy5kZXNjcmlwdGlvbiA9IGNvbmZpZy5kZXNjcmlwdGlvbjtcbiAgICB0aGlzLmV4dGVuc2lvbnMgPSBjb25maWcuZXh0ZW5zaW9ucyAmJiB0b09iak1hcChjb25maWcuZXh0ZW5zaW9ucyk7XG4gICAgdGhpcy5hc3ROb2RlID0gY29uZmlnLmFzdE5vZGU7XG4gICAgdGhpcy5leHRlbnNpb25BU1ROb2RlcyA9IHVuZGVmaW5lSWZFbXB0eShjb25maWcuZXh0ZW5zaW9uQVNUTm9kZXMpO1xuICAgIHRoaXMuX2ZpZWxkcyA9IGRlZmluZUlucHV0RmllbGRNYXAuYmluZCh1bmRlZmluZWQsIGNvbmZpZyk7XG4gICAgdHlwZW9mIGNvbmZpZy5uYW1lID09PSAnc3RyaW5nJyB8fCBkZXZBc3NlcnQoMCwgJ011c3QgcHJvdmlkZSBuYW1lLicpO1xuICB9XG5cbiAgdmFyIF9wcm90bzYgPSBHcmFwaFFMSW5wdXRPYmplY3RUeXBlLnByb3RvdHlwZTtcblxuICBfcHJvdG82LmdldEZpZWxkcyA9IGZ1bmN0aW9uIGdldEZpZWxkcygpIHtcbiAgICBpZiAodHlwZW9mIHRoaXMuX2ZpZWxkcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhpcy5fZmllbGRzID0gdGhpcy5fZmllbGRzKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2ZpZWxkcztcbiAgfTtcblxuICBfcHJvdG82LnRvQ29uZmlnID0gZnVuY3Rpb24gdG9Db25maWcoKSB7XG4gICAgdmFyIF90aGlzJGV4dGVuc2lvbkFTVE5vZDU7XG5cbiAgICB2YXIgZmllbGRzID0gbWFwVmFsdWUodGhpcy5nZXRGaWVsZHMoKSwgZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBkZXNjcmlwdGlvbjogZmllbGQuZGVzY3JpcHRpb24sXG4gICAgICAgIHR5cGU6IGZpZWxkLnR5cGUsXG4gICAgICAgIGRlZmF1bHRWYWx1ZTogZmllbGQuZGVmYXVsdFZhbHVlLFxuICAgICAgICBkZXByZWNhdGlvblJlYXNvbjogZmllbGQuZGVwcmVjYXRpb25SZWFzb24sXG4gICAgICAgIGV4dGVuc2lvbnM6IGZpZWxkLmV4dGVuc2lvbnMsXG4gICAgICAgIGFzdE5vZGU6IGZpZWxkLmFzdE5vZGVcbiAgICAgIH07XG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLmRlc2NyaXB0aW9uLFxuICAgICAgZmllbGRzOiBmaWVsZHMsXG4gICAgICBleHRlbnNpb25zOiB0aGlzLmV4dGVuc2lvbnMsXG4gICAgICBhc3ROb2RlOiB0aGlzLmFzdE5vZGUsXG4gICAgICBleHRlbnNpb25BU1ROb2RlczogKF90aGlzJGV4dGVuc2lvbkFTVE5vZDUgPSB0aGlzLmV4dGVuc2lvbkFTVE5vZGVzKSAhPT0gbnVsbCAmJiBfdGhpcyRleHRlbnNpb25BU1ROb2Q1ICE9PSB2b2lkIDAgPyBfdGhpcyRleHRlbnNpb25BU1ROb2Q1IDogW11cbiAgICB9O1xuICB9O1xuXG4gIF9wcm90bzYudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5uYW1lO1xuICB9O1xuXG4gIF9wcm90bzYudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKCk7XG4gIH0gLy8gJEZsb3dGaXhNZVt1bnN1cHBvcnRlZC1zeW50YXhdIEZsb3cgZG9lc24ndCBzdXBwb3J0IGNvbXB1dGVkIHByb3BlcnRpZXMgeWV0XG4gIDtcblxuICBfY3JlYXRlQ2xhc3MoR3JhcGhRTElucHV0T2JqZWN0VHlwZSwgW3tcbiAgICBrZXk6IFNZTUJPTF9UT19TVFJJTkdfVEFHLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuICdHcmFwaFFMSW5wdXRPYmplY3RUeXBlJztcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gR3JhcGhRTElucHV0T2JqZWN0VHlwZTtcbn0oKTsgLy8gUHJpbnQgYSBzaW1wbGlmaWVkIGZvcm0gd2hlbiBhcHBlYXJpbmcgaW4gYGluc3BlY3RgIGFuZCBgdXRpbC5pbnNwZWN0YC5cblxuZGVmaW5lSW5zcGVjdChHcmFwaFFMSW5wdXRPYmplY3RUeXBlKTtcblxuZnVuY3Rpb24gZGVmaW5lSW5wdXRGaWVsZE1hcChjb25maWcpIHtcbiAgdmFyIGZpZWxkTWFwID0gcmVzb2x2ZVRodW5rKGNvbmZpZy5maWVsZHMpO1xuICBpc1BsYWluT2JqKGZpZWxkTWFwKSB8fCBkZXZBc3NlcnQoMCwgXCJcIi5jb25jYXQoY29uZmlnLm5hbWUsIFwiIGZpZWxkcyBtdXN0IGJlIGFuIG9iamVjdCB3aXRoIGZpZWxkIG5hbWVzIGFzIGtleXMgb3IgYSBmdW5jdGlvbiB3aGljaCByZXR1cm5zIHN1Y2ggYW4gb2JqZWN0LlwiKSk7XG4gIHJldHVybiBtYXBWYWx1ZShmaWVsZE1hcCwgZnVuY3Rpb24gKGZpZWxkQ29uZmlnLCBmaWVsZE5hbWUpIHtcbiAgICAhKCdyZXNvbHZlJyBpbiBmaWVsZENvbmZpZykgfHwgZGV2QXNzZXJ0KDAsIFwiXCIuY29uY2F0KGNvbmZpZy5uYW1lLCBcIi5cIikuY29uY2F0KGZpZWxkTmFtZSwgXCIgZmllbGQgaGFzIGEgcmVzb2x2ZSBwcm9wZXJ0eSwgYnV0IElucHV0IFR5cGVzIGNhbm5vdCBkZWZpbmUgcmVzb2x2ZXJzLlwiKSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IGZpZWxkTmFtZSxcbiAgICAgIGRlc2NyaXB0aW9uOiBmaWVsZENvbmZpZy5kZXNjcmlwdGlvbixcbiAgICAgIHR5cGU6IGZpZWxkQ29uZmlnLnR5cGUsXG4gICAgICBkZWZhdWx0VmFsdWU6IGZpZWxkQ29uZmlnLmRlZmF1bHRWYWx1ZSxcbiAgICAgIGRlcHJlY2F0aW9uUmVhc29uOiBmaWVsZENvbmZpZy5kZXByZWNhdGlvblJlYXNvbixcbiAgICAgIGV4dGVuc2lvbnM6IGZpZWxkQ29uZmlnLmV4dGVuc2lvbnMgJiYgdG9PYmpNYXAoZmllbGRDb25maWcuZXh0ZW5zaW9ucyksXG4gICAgICBhc3ROb2RlOiBmaWVsZENvbmZpZy5hc3ROb2RlXG4gICAgfTtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1JlcXVpcmVkSW5wdXRGaWVsZChmaWVsZCkge1xuICByZXR1cm4gaXNOb25OdWxsVHlwZShmaWVsZC50eXBlKSAmJiBmaWVsZC5kZWZhdWx0VmFsdWUgPT09IHVuZGVmaW5lZDtcbn1cbiIsImZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuaW1wb3J0IG9iamVjdEVudHJpZXMgZnJvbSBcIi4uL3BvbHlmaWxscy9vYmplY3RFbnRyaWVzLm1qc1wiO1xuaW1wb3J0IHsgU1lNQk9MX1RPX1NUUklOR19UQUcgfSBmcm9tIFwiLi4vcG9seWZpbGxzL3N5bWJvbHMubWpzXCI7XG5pbXBvcnQgaW5zcGVjdCBmcm9tIFwiLi4vanN1dGlscy9pbnNwZWN0Lm1qc1wiO1xuaW1wb3J0IHRvT2JqTWFwIGZyb20gXCIuLi9qc3V0aWxzL3RvT2JqTWFwLm1qc1wiO1xuaW1wb3J0IGRldkFzc2VydCBmcm9tIFwiLi4vanN1dGlscy9kZXZBc3NlcnQubWpzXCI7XG5pbXBvcnQgaW5zdGFuY2VPZiBmcm9tIFwiLi4vanN1dGlscy9pbnN0YW5jZU9mLm1qc1wiO1xuaW1wb3J0IGlzT2JqZWN0TGlrZSBmcm9tIFwiLi4vanN1dGlscy9pc09iamVjdExpa2UubWpzXCI7XG5pbXBvcnQgZGVmaW5lSW5zcGVjdCBmcm9tIFwiLi4vanN1dGlscy9kZWZpbmVJbnNwZWN0Lm1qc1wiO1xuaW1wb3J0IHsgRGlyZWN0aXZlTG9jYXRpb24gfSBmcm9tIFwiLi4vbGFuZ3VhZ2UvZGlyZWN0aXZlTG9jYXRpb24ubWpzXCI7XG5pbXBvcnQgeyBHcmFwaFFMU3RyaW5nLCBHcmFwaFFMQm9vbGVhbiB9IGZyb20gXCIuL3NjYWxhcnMubWpzXCI7XG5pbXBvcnQgeyBhcmdzVG9BcmdzQ29uZmlnLCBHcmFwaFFMTm9uTnVsbCB9IGZyb20gXCIuL2RlZmluaXRpb24ubWpzXCI7XG4vKipcbiAqIFRlc3QgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIGEgR3JhcGhRTCBkaXJlY3RpdmUuXG4gKi9cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlZGVjbGFyZVxuZXhwb3J0IGZ1bmN0aW9uIGlzRGlyZWN0aXZlKGRpcmVjdGl2ZSkge1xuICByZXR1cm4gaW5zdGFuY2VPZihkaXJlY3RpdmUsIEdyYXBoUUxEaXJlY3RpdmUpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydERpcmVjdGl2ZShkaXJlY3RpdmUpIHtcbiAgaWYgKCFpc0RpcmVjdGl2ZShkaXJlY3RpdmUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRXhwZWN0ZWQgXCIuY29uY2F0KGluc3BlY3QoZGlyZWN0aXZlKSwgXCIgdG8gYmUgYSBHcmFwaFFMIGRpcmVjdGl2ZS5cIikpO1xuICB9XG5cbiAgcmV0dXJuIGRpcmVjdGl2ZTtcbn1cbi8qKlxuICogRGlyZWN0aXZlcyBhcmUgdXNlZCBieSB0aGUgR3JhcGhRTCBydW50aW1lIGFzIGEgd2F5IG9mIG1vZGlmeWluZyBleGVjdXRpb25cbiAqIGJlaGF2aW9yLiBUeXBlIHN5c3RlbSBjcmVhdG9ycyB3aWxsIHVzdWFsbHkgbm90IGNyZWF0ZSB0aGVzZSBkaXJlY3RseS5cbiAqL1xuXG5leHBvcnQgdmFyIEdyYXBoUUxEaXJlY3RpdmUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBHcmFwaFFMRGlyZWN0aXZlKGNvbmZpZykge1xuICAgIHZhciBfY29uZmlnJGlzUmVwZWF0YWJsZSwgX2NvbmZpZyRhcmdzO1xuXG4gICAgdGhpcy5uYW1lID0gY29uZmlnLm5hbWU7XG4gICAgdGhpcy5kZXNjcmlwdGlvbiA9IGNvbmZpZy5kZXNjcmlwdGlvbjtcbiAgICB0aGlzLmxvY2F0aW9ucyA9IGNvbmZpZy5sb2NhdGlvbnM7XG4gICAgdGhpcy5pc1JlcGVhdGFibGUgPSAoX2NvbmZpZyRpc1JlcGVhdGFibGUgPSBjb25maWcuaXNSZXBlYXRhYmxlKSAhPT0gbnVsbCAmJiBfY29uZmlnJGlzUmVwZWF0YWJsZSAhPT0gdm9pZCAwID8gX2NvbmZpZyRpc1JlcGVhdGFibGUgOiBmYWxzZTtcbiAgICB0aGlzLmV4dGVuc2lvbnMgPSBjb25maWcuZXh0ZW5zaW9ucyAmJiB0b09iak1hcChjb25maWcuZXh0ZW5zaW9ucyk7XG4gICAgdGhpcy5hc3ROb2RlID0gY29uZmlnLmFzdE5vZGU7XG4gICAgY29uZmlnLm5hbWUgfHwgZGV2QXNzZXJ0KDAsICdEaXJlY3RpdmUgbXVzdCBiZSBuYW1lZC4nKTtcbiAgICBBcnJheS5pc0FycmF5KGNvbmZpZy5sb2NhdGlvbnMpIHx8IGRldkFzc2VydCgwLCBcIkBcIi5jb25jYXQoY29uZmlnLm5hbWUsIFwiIGxvY2F0aW9ucyBtdXN0IGJlIGFuIEFycmF5LlwiKSk7XG4gICAgdmFyIGFyZ3MgPSAoX2NvbmZpZyRhcmdzID0gY29uZmlnLmFyZ3MpICE9PSBudWxsICYmIF9jb25maWckYXJncyAhPT0gdm9pZCAwID8gX2NvbmZpZyRhcmdzIDoge307XG4gICAgaXNPYmplY3RMaWtlKGFyZ3MpICYmICFBcnJheS5pc0FycmF5KGFyZ3MpIHx8IGRldkFzc2VydCgwLCBcIkBcIi5jb25jYXQoY29uZmlnLm5hbWUsIFwiIGFyZ3MgbXVzdCBiZSBhbiBvYmplY3Qgd2l0aCBhcmd1bWVudCBuYW1lcyBhcyBrZXlzLlwiKSk7XG4gICAgdGhpcy5hcmdzID0gb2JqZWN0RW50cmllcyhhcmdzKS5tYXAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgIHZhciBhcmdOYW1lID0gX3JlZlswXSxcbiAgICAgICAgICBhcmdDb25maWcgPSBfcmVmWzFdO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbmFtZTogYXJnTmFtZSxcbiAgICAgICAgZGVzY3JpcHRpb246IGFyZ0NvbmZpZy5kZXNjcmlwdGlvbixcbiAgICAgICAgdHlwZTogYXJnQ29uZmlnLnR5cGUsXG4gICAgICAgIGRlZmF1bHRWYWx1ZTogYXJnQ29uZmlnLmRlZmF1bHRWYWx1ZSxcbiAgICAgICAgZGVwcmVjYXRpb25SZWFzb246IGFyZ0NvbmZpZy5kZXByZWNhdGlvblJlYXNvbixcbiAgICAgICAgZXh0ZW5zaW9uczogYXJnQ29uZmlnLmV4dGVuc2lvbnMgJiYgdG9PYmpNYXAoYXJnQ29uZmlnLmV4dGVuc2lvbnMpLFxuICAgICAgICBhc3ROb2RlOiBhcmdDb25maWcuYXN0Tm9kZVxuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBHcmFwaFFMRGlyZWN0aXZlLnByb3RvdHlwZTtcblxuICBfcHJvdG8udG9Db25maWcgPSBmdW5jdGlvbiB0b0NvbmZpZygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgZGVzY3JpcHRpb246IHRoaXMuZGVzY3JpcHRpb24sXG4gICAgICBsb2NhdGlvbnM6IHRoaXMubG9jYXRpb25zLFxuICAgICAgYXJnczogYXJnc1RvQXJnc0NvbmZpZyh0aGlzLmFyZ3MpLFxuICAgICAgaXNSZXBlYXRhYmxlOiB0aGlzLmlzUmVwZWF0YWJsZSxcbiAgICAgIGV4dGVuc2lvbnM6IHRoaXMuZXh0ZW5zaW9ucyxcbiAgICAgIGFzdE5vZGU6IHRoaXMuYXN0Tm9kZVxuICAgIH07XG4gIH07XG5cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuICdAJyArIHRoaXMubmFtZTtcbiAgfTtcblxuICBfcHJvdG8udG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgIHJldHVybiB0aGlzLnRvU3RyaW5nKCk7XG4gIH0gLy8gJEZsb3dGaXhNZVt1bnN1cHBvcnRlZC1zeW50YXhdIEZsb3cgZG9lc24ndCBzdXBwb3J0IGNvbXB1dGVkIHByb3BlcnRpZXMgeWV0XG4gIDtcblxuICBfY3JlYXRlQ2xhc3MoR3JhcGhRTERpcmVjdGl2ZSwgW3tcbiAgICBrZXk6IFNZTUJPTF9UT19TVFJJTkdfVEFHLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuICdHcmFwaFFMRGlyZWN0aXZlJztcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gR3JhcGhRTERpcmVjdGl2ZTtcbn0oKTsgLy8gUHJpbnQgYSBzaW1wbGlmaWVkIGZvcm0gd2hlbiBhcHBlYXJpbmcgaW4gYGluc3BlY3RgIGFuZCBgdXRpbC5pbnNwZWN0YC5cblxuZGVmaW5lSW5zcGVjdChHcmFwaFFMRGlyZWN0aXZlKTtcblxuLyoqXG4gKiBVc2VkIHRvIGNvbmRpdGlvbmFsbHkgaW5jbHVkZSBmaWVsZHMgb3IgZnJhZ21lbnRzLlxuICovXG5leHBvcnQgdmFyIEdyYXBoUUxJbmNsdWRlRGlyZWN0aXZlID0gbmV3IEdyYXBoUUxEaXJlY3RpdmUoe1xuICBuYW1lOiAnaW5jbHVkZScsXG4gIGRlc2NyaXB0aW9uOiAnRGlyZWN0cyB0aGUgZXhlY3V0b3IgdG8gaW5jbHVkZSB0aGlzIGZpZWxkIG9yIGZyYWdtZW50IG9ubHkgd2hlbiB0aGUgYGlmYCBhcmd1bWVudCBpcyB0cnVlLicsXG4gIGxvY2F0aW9uczogW0RpcmVjdGl2ZUxvY2F0aW9uLkZJRUxELCBEaXJlY3RpdmVMb2NhdGlvbi5GUkFHTUVOVF9TUFJFQUQsIERpcmVjdGl2ZUxvY2F0aW9uLklOTElORV9GUkFHTUVOVF0sXG4gIGFyZ3M6IHtcbiAgICBpZjoge1xuICAgICAgdHlwZTogbmV3IEdyYXBoUUxOb25OdWxsKEdyYXBoUUxCb29sZWFuKSxcbiAgICAgIGRlc2NyaXB0aW9uOiAnSW5jbHVkZWQgd2hlbiB0cnVlLidcbiAgICB9XG4gIH1cbn0pO1xuLyoqXG4gKiBVc2VkIHRvIGNvbmRpdGlvbmFsbHkgc2tpcCAoZXhjbHVkZSkgZmllbGRzIG9yIGZyYWdtZW50cy5cbiAqL1xuXG5leHBvcnQgdmFyIEdyYXBoUUxTa2lwRGlyZWN0aXZlID0gbmV3IEdyYXBoUUxEaXJlY3RpdmUoe1xuICBuYW1lOiAnc2tpcCcsXG4gIGRlc2NyaXB0aW9uOiAnRGlyZWN0cyB0aGUgZXhlY3V0b3IgdG8gc2tpcCB0aGlzIGZpZWxkIG9yIGZyYWdtZW50IHdoZW4gdGhlIGBpZmAgYXJndW1lbnQgaXMgdHJ1ZS4nLFxuICBsb2NhdGlvbnM6IFtEaXJlY3RpdmVMb2NhdGlvbi5GSUVMRCwgRGlyZWN0aXZlTG9jYXRpb24uRlJBR01FTlRfU1BSRUFELCBEaXJlY3RpdmVMb2NhdGlvbi5JTkxJTkVfRlJBR01FTlRdLFxuICBhcmdzOiB7XG4gICAgaWY6IHtcbiAgICAgIHR5cGU6IG5ldyBHcmFwaFFMTm9uTnVsbChHcmFwaFFMQm9vbGVhbiksXG4gICAgICBkZXNjcmlwdGlvbjogJ1NraXBwZWQgd2hlbiB0cnVlLidcbiAgICB9XG4gIH1cbn0pO1xuLyoqXG4gKiBDb25zdGFudCBzdHJpbmcgdXNlZCBmb3IgZGVmYXVsdCByZWFzb24gZm9yIGEgZGVwcmVjYXRpb24uXG4gKi9cblxuZXhwb3J0IHZhciBERUZBVUxUX0RFUFJFQ0FUSU9OX1JFQVNPTiA9ICdObyBsb25nZXIgc3VwcG9ydGVkJztcbi8qKlxuICogVXNlZCB0byBkZWNsYXJlIGVsZW1lbnQgb2YgYSBHcmFwaFFMIHNjaGVtYSBhcyBkZXByZWNhdGVkLlxuICovXG5cbmV4cG9ydCB2YXIgR3JhcGhRTERlcHJlY2F0ZWREaXJlY3RpdmUgPSBuZXcgR3JhcGhRTERpcmVjdGl2ZSh7XG4gIG5hbWU6ICdkZXByZWNhdGVkJyxcbiAgZGVzY3JpcHRpb246ICdNYXJrcyBhbiBlbGVtZW50IG9mIGEgR3JhcGhRTCBzY2hlbWEgYXMgbm8gbG9uZ2VyIHN1cHBvcnRlZC4nLFxuICBsb2NhdGlvbnM6IFtEaXJlY3RpdmVMb2NhdGlvbi5GSUVMRF9ERUZJTklUSU9OLCBEaXJlY3RpdmVMb2NhdGlvbi5BUkdVTUVOVF9ERUZJTklUSU9OLCBEaXJlY3RpdmVMb2NhdGlvbi5JTlBVVF9GSUVMRF9ERUZJTklUSU9OLCBEaXJlY3RpdmVMb2NhdGlvbi5FTlVNX1ZBTFVFXSxcbiAgYXJnczoge1xuICAgIHJlYXNvbjoge1xuICAgICAgdHlwZTogR3JhcGhRTFN0cmluZyxcbiAgICAgIGRlc2NyaXB0aW9uOiAnRXhwbGFpbnMgd2h5IHRoaXMgZWxlbWVudCB3YXMgZGVwcmVjYXRlZCwgdXN1YWxseSBhbHNvIGluY2x1ZGluZyBhIHN1Z2dlc3Rpb24gZm9yIGhvdyB0byBhY2Nlc3Mgc3VwcG9ydGVkIHNpbWlsYXIgZGF0YS4gRm9ybWF0dGVkIHVzaW5nIHRoZSBNYXJrZG93biBzeW50YXgsIGFzIHNwZWNpZmllZCBieSBbQ29tbW9uTWFya10oaHR0cHM6Ly9jb21tb25tYXJrLm9yZy8pLicsXG4gICAgICBkZWZhdWx0VmFsdWU6IERFRkFVTFRfREVQUkVDQVRJT05fUkVBU09OXG4gICAgfVxuICB9XG59KTtcbi8qKlxuICogVXNlZCB0byBwcm92aWRlIGEgVVJMIGZvciBzcGVjaWZ5aW5nIHRoZSBiZWhhdmlvdXIgb2YgY3VzdG9tIHNjYWxhciBkZWZpbml0aW9ucy5cbiAqL1xuXG5leHBvcnQgdmFyIEdyYXBoUUxTcGVjaWZpZWRCeURpcmVjdGl2ZSA9IG5ldyBHcmFwaFFMRGlyZWN0aXZlKHtcbiAgbmFtZTogJ3NwZWNpZmllZEJ5JyxcbiAgZGVzY3JpcHRpb246ICdFeHBvc2VzIGEgVVJMIHRoYXQgc3BlY2lmaWVzIHRoZSBiZWhhdmlvdXIgb2YgdGhpcyBzY2FsYXIuJyxcbiAgbG9jYXRpb25zOiBbRGlyZWN0aXZlTG9jYXRpb24uU0NBTEFSXSxcbiAgYXJnczoge1xuICAgIHVybDoge1xuICAgICAgdHlwZTogbmV3IEdyYXBoUUxOb25OdWxsKEdyYXBoUUxTdHJpbmcpLFxuICAgICAgZGVzY3JpcHRpb246ICdUaGUgVVJMIHRoYXQgc3BlY2lmaWVzIHRoZSBiZWhhdmlvdXIgb2YgdGhpcyBzY2FsYXIuJ1xuICAgIH1cbiAgfVxufSk7XG4vKipcbiAqIFRoZSBmdWxsIGxpc3Qgb2Ygc3BlY2lmaWVkIGRpcmVjdGl2ZXMuXG4gKi9cblxuZXhwb3J0IHZhciBzcGVjaWZpZWREaXJlY3RpdmVzID0gT2JqZWN0LmZyZWV6ZShbR3JhcGhRTEluY2x1ZGVEaXJlY3RpdmUsIEdyYXBoUUxTa2lwRGlyZWN0aXZlLCBHcmFwaFFMRGVwcmVjYXRlZERpcmVjdGl2ZSwgR3JhcGhRTFNwZWNpZmllZEJ5RGlyZWN0aXZlXSk7XG5leHBvcnQgZnVuY3Rpb24gaXNTcGVjaWZpZWREaXJlY3RpdmUoZGlyZWN0aXZlKSB7XG4gIHJldHVybiBzcGVjaWZpZWREaXJlY3RpdmVzLnNvbWUoZnVuY3Rpb24gKF9yZWYyKSB7XG4gICAgdmFyIG5hbWUgPSBfcmVmMi5uYW1lO1xuICAgIHJldHVybiBuYW1lID09PSBkaXJlY3RpdmUubmFtZTtcbiAgfSk7XG59XG4iLCJpbXBvcnQgb2JqZWN0VmFsdWVzIGZyb20gXCIuLi9wb2x5ZmlsbHMvb2JqZWN0VmFsdWVzLm1qc1wiO1xuaW1wb3J0IGluc3BlY3QgZnJvbSBcIi4uL2pzdXRpbHMvaW5zcGVjdC5tanNcIjtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcIi4uL2pzdXRpbHMvaW52YXJpYW50Lm1qc1wiO1xuaW1wb3J0IHsgcHJpbnQgfSBmcm9tIFwiLi4vbGFuZ3VhZ2UvcHJpbnRlci5tanNcIjtcbmltcG9ydCB7IERpcmVjdGl2ZUxvY2F0aW9uIH0gZnJvbSBcIi4uL2xhbmd1YWdlL2RpcmVjdGl2ZUxvY2F0aW9uLm1qc1wiO1xuaW1wb3J0IHsgYXN0RnJvbVZhbHVlIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9hc3RGcm9tVmFsdWUubWpzXCI7XG5pbXBvcnQgeyBHcmFwaFFMU3RyaW5nLCBHcmFwaFFMQm9vbGVhbiB9IGZyb20gXCIuL3NjYWxhcnMubWpzXCI7XG5pbXBvcnQgeyBHcmFwaFFMTGlzdCwgR3JhcGhRTE5vbk51bGwsIEdyYXBoUUxPYmplY3RUeXBlLCBHcmFwaFFMRW51bVR5cGUsIGlzU2NhbGFyVHlwZSwgaXNPYmplY3RUeXBlLCBpc0ludGVyZmFjZVR5cGUsIGlzVW5pb25UeXBlLCBpc0VudW1UeXBlLCBpc0lucHV0T2JqZWN0VHlwZSwgaXNMaXN0VHlwZSwgaXNOb25OdWxsVHlwZSwgaXNBYnN0cmFjdFR5cGUgfSBmcm9tIFwiLi9kZWZpbml0aW9uLm1qc1wiO1xuZXhwb3J0IHZhciBfX1NjaGVtYSA9IG5ldyBHcmFwaFFMT2JqZWN0VHlwZSh7XG4gIG5hbWU6ICdfX1NjaGVtYScsXG4gIGRlc2NyaXB0aW9uOiAnQSBHcmFwaFFMIFNjaGVtYSBkZWZpbmVzIHRoZSBjYXBhYmlsaXRpZXMgb2YgYSBHcmFwaFFMIHNlcnZlci4gSXQgZXhwb3NlcyBhbGwgYXZhaWxhYmxlIHR5cGVzIGFuZCBkaXJlY3RpdmVzIG9uIHRoZSBzZXJ2ZXIsIGFzIHdlbGwgYXMgdGhlIGVudHJ5IHBvaW50cyBmb3IgcXVlcnksIG11dGF0aW9uLCBhbmQgc3Vic2NyaXB0aW9uIG9wZXJhdGlvbnMuJyxcbiAgZmllbGRzOiBmdW5jdGlvbiBmaWVsZHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRlc2NyaXB0aW9uOiB7XG4gICAgICAgIHR5cGU6IEdyYXBoUUxTdHJpbmcsXG4gICAgICAgIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoc2NoZW1hKSB7XG4gICAgICAgICAgcmV0dXJuIHNjaGVtYS5kZXNjcmlwdGlvbjtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHR5cGVzOiB7XG4gICAgICAgIGRlc2NyaXB0aW9uOiAnQSBsaXN0IG9mIGFsbCB0eXBlcyBzdXBwb3J0ZWQgYnkgdGhpcyBzZXJ2ZXIuJyxcbiAgICAgICAgdHlwZTogbmV3IEdyYXBoUUxOb25OdWxsKG5ldyBHcmFwaFFMTGlzdChuZXcgR3JhcGhRTE5vbk51bGwoX19UeXBlKSkpLFxuICAgICAgICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKHNjaGVtYSkge1xuICAgICAgICAgIHJldHVybiBvYmplY3RWYWx1ZXMoc2NoZW1hLmdldFR5cGVNYXAoKSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBxdWVyeVR5cGU6IHtcbiAgICAgICAgZGVzY3JpcHRpb246ICdUaGUgdHlwZSB0aGF0IHF1ZXJ5IG9wZXJhdGlvbnMgd2lsbCBiZSByb290ZWQgYXQuJyxcbiAgICAgICAgdHlwZTogbmV3IEdyYXBoUUxOb25OdWxsKF9fVHlwZSksXG4gICAgICAgIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoc2NoZW1hKSB7XG4gICAgICAgICAgcmV0dXJuIHNjaGVtYS5nZXRRdWVyeVR5cGUoKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG11dGF0aW9uVHlwZToge1xuICAgICAgICBkZXNjcmlwdGlvbjogJ0lmIHRoaXMgc2VydmVyIHN1cHBvcnRzIG11dGF0aW9uLCB0aGUgdHlwZSB0aGF0IG11dGF0aW9uIG9wZXJhdGlvbnMgd2lsbCBiZSByb290ZWQgYXQuJyxcbiAgICAgICAgdHlwZTogX19UeXBlLFxuICAgICAgICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKHNjaGVtYSkge1xuICAgICAgICAgIHJldHVybiBzY2hlbWEuZ2V0TXV0YXRpb25UeXBlKCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBzdWJzY3JpcHRpb25UeXBlOiB7XG4gICAgICAgIGRlc2NyaXB0aW9uOiAnSWYgdGhpcyBzZXJ2ZXIgc3VwcG9ydCBzdWJzY3JpcHRpb24sIHRoZSB0eXBlIHRoYXQgc3Vic2NyaXB0aW9uIG9wZXJhdGlvbnMgd2lsbCBiZSByb290ZWQgYXQuJyxcbiAgICAgICAgdHlwZTogX19UeXBlLFxuICAgICAgICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKHNjaGVtYSkge1xuICAgICAgICAgIHJldHVybiBzY2hlbWEuZ2V0U3Vic2NyaXB0aW9uVHlwZSgpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZGlyZWN0aXZlczoge1xuICAgICAgICBkZXNjcmlwdGlvbjogJ0EgbGlzdCBvZiBhbGwgZGlyZWN0aXZlcyBzdXBwb3J0ZWQgYnkgdGhpcyBzZXJ2ZXIuJyxcbiAgICAgICAgdHlwZTogbmV3IEdyYXBoUUxOb25OdWxsKG5ldyBHcmFwaFFMTGlzdChuZXcgR3JhcGhRTE5vbk51bGwoX19EaXJlY3RpdmUpKSksXG4gICAgICAgIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoc2NoZW1hKSB7XG4gICAgICAgICAgcmV0dXJuIHNjaGVtYS5nZXREaXJlY3RpdmVzKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG59KTtcbmV4cG9ydCB2YXIgX19EaXJlY3RpdmUgPSBuZXcgR3JhcGhRTE9iamVjdFR5cGUoe1xuICBuYW1lOiAnX19EaXJlY3RpdmUnLFxuICBkZXNjcmlwdGlvbjogXCJBIERpcmVjdGl2ZSBwcm92aWRlcyBhIHdheSB0byBkZXNjcmliZSBhbHRlcm5hdGUgcnVudGltZSBleGVjdXRpb24gYW5kIHR5cGUgdmFsaWRhdGlvbiBiZWhhdmlvciBpbiBhIEdyYXBoUUwgZG9jdW1lbnQuXFxuXFxuSW4gc29tZSBjYXNlcywgeW91IG5lZWQgdG8gcHJvdmlkZSBvcHRpb25zIHRvIGFsdGVyIEdyYXBoUUwncyBleGVjdXRpb24gYmVoYXZpb3IgaW4gd2F5cyBmaWVsZCBhcmd1bWVudHMgd2lsbCBub3Qgc3VmZmljZSwgc3VjaCBhcyBjb25kaXRpb25hbGx5IGluY2x1ZGluZyBvciBza2lwcGluZyBhIGZpZWxkLiBEaXJlY3RpdmVzIHByb3ZpZGUgdGhpcyBieSBkZXNjcmliaW5nIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gdG8gdGhlIGV4ZWN1dG9yLlwiLFxuICBmaWVsZHM6IGZ1bmN0aW9uIGZpZWxkcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZToge1xuICAgICAgICB0eXBlOiBuZXcgR3JhcGhRTE5vbk51bGwoR3JhcGhRTFN0cmluZyksXG4gICAgICAgIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoZGlyZWN0aXZlKSB7XG4gICAgICAgICAgcmV0dXJuIGRpcmVjdGl2ZS5uYW1lO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZGVzY3JpcHRpb246IHtcbiAgICAgICAgdHlwZTogR3JhcGhRTFN0cmluZyxcbiAgICAgICAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZShkaXJlY3RpdmUpIHtcbiAgICAgICAgICByZXR1cm4gZGlyZWN0aXZlLmRlc2NyaXB0aW9uO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgaXNSZXBlYXRhYmxlOiB7XG4gICAgICAgIHR5cGU6IG5ldyBHcmFwaFFMTm9uTnVsbChHcmFwaFFMQm9vbGVhbiksXG4gICAgICAgIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoZGlyZWN0aXZlKSB7XG4gICAgICAgICAgcmV0dXJuIGRpcmVjdGl2ZS5pc1JlcGVhdGFibGU7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBsb2NhdGlvbnM6IHtcbiAgICAgICAgdHlwZTogbmV3IEdyYXBoUUxOb25OdWxsKG5ldyBHcmFwaFFMTGlzdChuZXcgR3JhcGhRTE5vbk51bGwoX19EaXJlY3RpdmVMb2NhdGlvbikpKSxcbiAgICAgICAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZShkaXJlY3RpdmUpIHtcbiAgICAgICAgICByZXR1cm4gZGlyZWN0aXZlLmxvY2F0aW9ucztcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGFyZ3M6IHtcbiAgICAgICAgdHlwZTogbmV3IEdyYXBoUUxOb25OdWxsKG5ldyBHcmFwaFFMTGlzdChuZXcgR3JhcGhRTE5vbk51bGwoX19JbnB1dFZhbHVlKSkpLFxuICAgICAgICBhcmdzOiB7XG4gICAgICAgICAgaW5jbHVkZURlcHJlY2F0ZWQ6IHtcbiAgICAgICAgICAgIHR5cGU6IEdyYXBoUUxCb29sZWFuLFxuICAgICAgICAgICAgZGVmYXVsdFZhbHVlOiBmYWxzZVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZShmaWVsZCwgX3JlZikge1xuICAgICAgICAgIHZhciBpbmNsdWRlRGVwcmVjYXRlZCA9IF9yZWYuaW5jbHVkZURlcHJlY2F0ZWQ7XG4gICAgICAgICAgcmV0dXJuIGluY2x1ZGVEZXByZWNhdGVkID8gZmllbGQuYXJncyA6IGZpZWxkLmFyZ3MuZmlsdGVyKGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgICAgICAgIHJldHVybiBhcmcuZGVwcmVjYXRpb25SZWFzb24gPT0gbnVsbDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cbn0pO1xuZXhwb3J0IHZhciBfX0RpcmVjdGl2ZUxvY2F0aW9uID0gbmV3IEdyYXBoUUxFbnVtVHlwZSh7XG4gIG5hbWU6ICdfX0RpcmVjdGl2ZUxvY2F0aW9uJyxcbiAgZGVzY3JpcHRpb246ICdBIERpcmVjdGl2ZSBjYW4gYmUgYWRqYWNlbnQgdG8gbWFueSBwYXJ0cyBvZiB0aGUgR3JhcGhRTCBsYW5ndWFnZSwgYSBfX0RpcmVjdGl2ZUxvY2F0aW9uIGRlc2NyaWJlcyBvbmUgc3VjaCBwb3NzaWJsZSBhZGphY2VuY2llcy4nLFxuICB2YWx1ZXM6IHtcbiAgICBRVUVSWToge1xuICAgICAgdmFsdWU6IERpcmVjdGl2ZUxvY2F0aW9uLlFVRVJZLFxuICAgICAgZGVzY3JpcHRpb246ICdMb2NhdGlvbiBhZGphY2VudCB0byBhIHF1ZXJ5IG9wZXJhdGlvbi4nXG4gICAgfSxcbiAgICBNVVRBVElPTjoge1xuICAgICAgdmFsdWU6IERpcmVjdGl2ZUxvY2F0aW9uLk1VVEFUSU9OLFxuICAgICAgZGVzY3JpcHRpb246ICdMb2NhdGlvbiBhZGphY2VudCB0byBhIG11dGF0aW9uIG9wZXJhdGlvbi4nXG4gICAgfSxcbiAgICBTVUJTQ1JJUFRJT046IHtcbiAgICAgIHZhbHVlOiBEaXJlY3RpdmVMb2NhdGlvbi5TVUJTQ1JJUFRJT04sXG4gICAgICBkZXNjcmlwdGlvbjogJ0xvY2F0aW9uIGFkamFjZW50IHRvIGEgc3Vic2NyaXB0aW9uIG9wZXJhdGlvbi4nXG4gICAgfSxcbiAgICBGSUVMRDoge1xuICAgICAgdmFsdWU6IERpcmVjdGl2ZUxvY2F0aW9uLkZJRUxELFxuICAgICAgZGVzY3JpcHRpb246ICdMb2NhdGlvbiBhZGphY2VudCB0byBhIGZpZWxkLidcbiAgICB9LFxuICAgIEZSQUdNRU5UX0RFRklOSVRJT046IHtcbiAgICAgIHZhbHVlOiBEaXJlY3RpdmVMb2NhdGlvbi5GUkFHTUVOVF9ERUZJTklUSU9OLFxuICAgICAgZGVzY3JpcHRpb246ICdMb2NhdGlvbiBhZGphY2VudCB0byBhIGZyYWdtZW50IGRlZmluaXRpb24uJ1xuICAgIH0sXG4gICAgRlJBR01FTlRfU1BSRUFEOiB7XG4gICAgICB2YWx1ZTogRGlyZWN0aXZlTG9jYXRpb24uRlJBR01FTlRfU1BSRUFELFxuICAgICAgZGVzY3JpcHRpb246ICdMb2NhdGlvbiBhZGphY2VudCB0byBhIGZyYWdtZW50IHNwcmVhZC4nXG4gICAgfSxcbiAgICBJTkxJTkVfRlJBR01FTlQ6IHtcbiAgICAgIHZhbHVlOiBEaXJlY3RpdmVMb2NhdGlvbi5JTkxJTkVfRlJBR01FTlQsXG4gICAgICBkZXNjcmlwdGlvbjogJ0xvY2F0aW9uIGFkamFjZW50IHRvIGFuIGlubGluZSBmcmFnbWVudC4nXG4gICAgfSxcbiAgICBWQVJJQUJMRV9ERUZJTklUSU9OOiB7XG4gICAgICB2YWx1ZTogRGlyZWN0aXZlTG9jYXRpb24uVkFSSUFCTEVfREVGSU5JVElPTixcbiAgICAgIGRlc2NyaXB0aW9uOiAnTG9jYXRpb24gYWRqYWNlbnQgdG8gYSB2YXJpYWJsZSBkZWZpbml0aW9uLidcbiAgICB9LFxuICAgIFNDSEVNQToge1xuICAgICAgdmFsdWU6IERpcmVjdGl2ZUxvY2F0aW9uLlNDSEVNQSxcbiAgICAgIGRlc2NyaXB0aW9uOiAnTG9jYXRpb24gYWRqYWNlbnQgdG8gYSBzY2hlbWEgZGVmaW5pdGlvbi4nXG4gICAgfSxcbiAgICBTQ0FMQVI6IHtcbiAgICAgIHZhbHVlOiBEaXJlY3RpdmVMb2NhdGlvbi5TQ0FMQVIsXG4gICAgICBkZXNjcmlwdGlvbjogJ0xvY2F0aW9uIGFkamFjZW50IHRvIGEgc2NhbGFyIGRlZmluaXRpb24uJ1xuICAgIH0sXG4gICAgT0JKRUNUOiB7XG4gICAgICB2YWx1ZTogRGlyZWN0aXZlTG9jYXRpb24uT0JKRUNULFxuICAgICAgZGVzY3JpcHRpb246ICdMb2NhdGlvbiBhZGphY2VudCB0byBhbiBvYmplY3QgdHlwZSBkZWZpbml0aW9uLidcbiAgICB9LFxuICAgIEZJRUxEX0RFRklOSVRJT046IHtcbiAgICAgIHZhbHVlOiBEaXJlY3RpdmVMb2NhdGlvbi5GSUVMRF9ERUZJTklUSU9OLFxuICAgICAgZGVzY3JpcHRpb246ICdMb2NhdGlvbiBhZGphY2VudCB0byBhIGZpZWxkIGRlZmluaXRpb24uJ1xuICAgIH0sXG4gICAgQVJHVU1FTlRfREVGSU5JVElPTjoge1xuICAgICAgdmFsdWU6IERpcmVjdGl2ZUxvY2F0aW9uLkFSR1VNRU5UX0RFRklOSVRJT04sXG4gICAgICBkZXNjcmlwdGlvbjogJ0xvY2F0aW9uIGFkamFjZW50IHRvIGFuIGFyZ3VtZW50IGRlZmluaXRpb24uJ1xuICAgIH0sXG4gICAgSU5URVJGQUNFOiB7XG4gICAgICB2YWx1ZTogRGlyZWN0aXZlTG9jYXRpb24uSU5URVJGQUNFLFxuICAgICAgZGVzY3JpcHRpb246ICdMb2NhdGlvbiBhZGphY2VudCB0byBhbiBpbnRlcmZhY2UgZGVmaW5pdGlvbi4nXG4gICAgfSxcbiAgICBVTklPTjoge1xuICAgICAgdmFsdWU6IERpcmVjdGl2ZUxvY2F0aW9uLlVOSU9OLFxuICAgICAgZGVzY3JpcHRpb246ICdMb2NhdGlvbiBhZGphY2VudCB0byBhIHVuaW9uIGRlZmluaXRpb24uJ1xuICAgIH0sXG4gICAgRU5VTToge1xuICAgICAgdmFsdWU6IERpcmVjdGl2ZUxvY2F0aW9uLkVOVU0sXG4gICAgICBkZXNjcmlwdGlvbjogJ0xvY2F0aW9uIGFkamFjZW50IHRvIGFuIGVudW0gZGVmaW5pdGlvbi4nXG4gICAgfSxcbiAgICBFTlVNX1ZBTFVFOiB7XG4gICAgICB2YWx1ZTogRGlyZWN0aXZlTG9jYXRpb24uRU5VTV9WQUxVRSxcbiAgICAgIGRlc2NyaXB0aW9uOiAnTG9jYXRpb24gYWRqYWNlbnQgdG8gYW4gZW51bSB2YWx1ZSBkZWZpbml0aW9uLidcbiAgICB9LFxuICAgIElOUFVUX09CSkVDVDoge1xuICAgICAgdmFsdWU6IERpcmVjdGl2ZUxvY2F0aW9uLklOUFVUX09CSkVDVCxcbiAgICAgIGRlc2NyaXB0aW9uOiAnTG9jYXRpb24gYWRqYWNlbnQgdG8gYW4gaW5wdXQgb2JqZWN0IHR5cGUgZGVmaW5pdGlvbi4nXG4gICAgfSxcbiAgICBJTlBVVF9GSUVMRF9ERUZJTklUSU9OOiB7XG4gICAgICB2YWx1ZTogRGlyZWN0aXZlTG9jYXRpb24uSU5QVVRfRklFTERfREVGSU5JVElPTixcbiAgICAgIGRlc2NyaXB0aW9uOiAnTG9jYXRpb24gYWRqYWNlbnQgdG8gYW4gaW5wdXQgb2JqZWN0IGZpZWxkIGRlZmluaXRpb24uJ1xuICAgIH1cbiAgfVxufSk7XG5leHBvcnQgdmFyIF9fVHlwZSA9IG5ldyBHcmFwaFFMT2JqZWN0VHlwZSh7XG4gIG5hbWU6ICdfX1R5cGUnLFxuICBkZXNjcmlwdGlvbjogJ1RoZSBmdW5kYW1lbnRhbCB1bml0IG9mIGFueSBHcmFwaFFMIFNjaGVtYSBpcyB0aGUgdHlwZS4gVGhlcmUgYXJlIG1hbnkga2luZHMgb2YgdHlwZXMgaW4gR3JhcGhRTCBhcyByZXByZXNlbnRlZCBieSB0aGUgYF9fVHlwZUtpbmRgIGVudW0uXFxuXFxuRGVwZW5kaW5nIG9uIHRoZSBraW5kIG9mIGEgdHlwZSwgY2VydGFpbiBmaWVsZHMgZGVzY3JpYmUgaW5mb3JtYXRpb24gYWJvdXQgdGhhdCB0eXBlLiBTY2FsYXIgdHlwZXMgcHJvdmlkZSBubyBpbmZvcm1hdGlvbiBiZXlvbmQgYSBuYW1lLCBkZXNjcmlwdGlvbiBhbmQgb3B0aW9uYWwgYHNwZWNpZmllZEJ5VXJsYCwgd2hpbGUgRW51bSB0eXBlcyBwcm92aWRlIHRoZWlyIHZhbHVlcy4gT2JqZWN0IGFuZCBJbnRlcmZhY2UgdHlwZXMgcHJvdmlkZSB0aGUgZmllbGRzIHRoZXkgZGVzY3JpYmUuIEFic3RyYWN0IHR5cGVzLCBVbmlvbiBhbmQgSW50ZXJmYWNlLCBwcm92aWRlIHRoZSBPYmplY3QgdHlwZXMgcG9zc2libGUgYXQgcnVudGltZS4gTGlzdCBhbmQgTm9uTnVsbCB0eXBlcyBjb21wb3NlIG90aGVyIHR5cGVzLicsXG4gIGZpZWxkczogZnVuY3Rpb24gZmllbGRzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBraW5kOiB7XG4gICAgICAgIHR5cGU6IG5ldyBHcmFwaFFMTm9uTnVsbChfX1R5cGVLaW5kKSxcbiAgICAgICAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZSh0eXBlKSB7XG4gICAgICAgICAgaWYgKGlzU2NhbGFyVHlwZSh0eXBlKSkge1xuICAgICAgICAgICAgcmV0dXJuIFR5cGVLaW5kLlNDQUxBUjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoaXNPYmplY3RUeXBlKHR5cGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gVHlwZUtpbmQuT0JKRUNUO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChpc0ludGVyZmFjZVR5cGUodHlwZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBUeXBlS2luZC5JTlRFUkZBQ0U7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGlzVW5pb25UeXBlKHR5cGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gVHlwZUtpbmQuVU5JT047XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGlzRW51bVR5cGUodHlwZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBUeXBlS2luZC5FTlVNO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChpc0lucHV0T2JqZWN0VHlwZSh0eXBlKSkge1xuICAgICAgICAgICAgcmV0dXJuIFR5cGVLaW5kLklOUFVUX09CSkVDVDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoaXNMaXN0VHlwZSh0eXBlKSkge1xuICAgICAgICAgICAgcmV0dXJuIFR5cGVLaW5kLkxJU1Q7XG4gICAgICAgICAgfSAvLyBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAoU2VlOiAnaHR0cHM6Ly9naXRodWIuY29tL2dyYXBocWwvZ3JhcGhxbC1qcy9pc3N1ZXMvMjYxOCcpXG5cblxuICAgICAgICAgIGlmIChpc05vbk51bGxUeXBlKHR5cGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gVHlwZUtpbmQuTk9OX05VTEw7XG4gICAgICAgICAgfSAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAoTm90IHJlYWNoYWJsZS4gQWxsIHBvc3NpYmxlIHR5cGVzIGhhdmUgYmVlbiBjb25zaWRlcmVkKVxuXG5cbiAgICAgICAgICBmYWxzZSB8fCBpbnZhcmlhbnQoMCwgXCJVbmV4cGVjdGVkIHR5cGU6IFxcXCJcIi5jb25jYXQoaW5zcGVjdCh0eXBlKSwgXCJcXFwiLlwiKSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBuYW1lOiB7XG4gICAgICAgIHR5cGU6IEdyYXBoUUxTdHJpbmcsXG4gICAgICAgIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUodHlwZSkge1xuICAgICAgICAgIHJldHVybiB0eXBlLm5hbWUgIT09IHVuZGVmaW5lZCA/IHR5cGUubmFtZSA6IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGRlc2NyaXB0aW9uOiB7XG4gICAgICAgIHR5cGU6IEdyYXBoUUxTdHJpbmcsXG4gICAgICAgIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUodHlwZSkge1xuICAgICAgICAgIHJldHVybiB0eXBlLmRlc2NyaXB0aW9uICE9PSB1bmRlZmluZWQgPyB0eXBlLmRlc2NyaXB0aW9uIDogdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgc3BlY2lmaWVkQnlVcmw6IHtcbiAgICAgICAgdHlwZTogR3JhcGhRTFN0cmluZyxcbiAgICAgICAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZShvYmopIHtcbiAgICAgICAgICByZXR1cm4gb2JqLnNwZWNpZmllZEJ5VXJsICE9PSB1bmRlZmluZWQgPyBvYmouc3BlY2lmaWVkQnlVcmwgOiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBmaWVsZHM6IHtcbiAgICAgICAgdHlwZTogbmV3IEdyYXBoUUxMaXN0KG5ldyBHcmFwaFFMTm9uTnVsbChfX0ZpZWxkKSksXG4gICAgICAgIGFyZ3M6IHtcbiAgICAgICAgICBpbmNsdWRlRGVwcmVjYXRlZDoge1xuICAgICAgICAgICAgdHlwZTogR3JhcGhRTEJvb2xlYW4sXG4gICAgICAgICAgICBkZWZhdWx0VmFsdWU6IGZhbHNlXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKHR5cGUsIF9yZWYyKSB7XG4gICAgICAgICAgdmFyIGluY2x1ZGVEZXByZWNhdGVkID0gX3JlZjIuaW5jbHVkZURlcHJlY2F0ZWQ7XG5cbiAgICAgICAgICBpZiAoaXNPYmplY3RUeXBlKHR5cGUpIHx8IGlzSW50ZXJmYWNlVHlwZSh0eXBlKSkge1xuICAgICAgICAgICAgdmFyIGZpZWxkcyA9IG9iamVjdFZhbHVlcyh0eXBlLmdldEZpZWxkcygpKTtcbiAgICAgICAgICAgIHJldHVybiBpbmNsdWRlRGVwcmVjYXRlZCA/IGZpZWxkcyA6IGZpZWxkcy5maWx0ZXIoZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgICAgICAgICAgIHJldHVybiBmaWVsZC5kZXByZWNhdGlvblJlYXNvbiA9PSBudWxsO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgaW50ZXJmYWNlczoge1xuICAgICAgICB0eXBlOiBuZXcgR3JhcGhRTExpc3QobmV3IEdyYXBoUUxOb25OdWxsKF9fVHlwZSkpLFxuICAgICAgICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKHR5cGUpIHtcbiAgICAgICAgICBpZiAoaXNPYmplY3RUeXBlKHR5cGUpIHx8IGlzSW50ZXJmYWNlVHlwZSh0eXBlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHR5cGUuZ2V0SW50ZXJmYWNlcygpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHBvc3NpYmxlVHlwZXM6IHtcbiAgICAgICAgdHlwZTogbmV3IEdyYXBoUUxMaXN0KG5ldyBHcmFwaFFMTm9uTnVsbChfX1R5cGUpKSxcbiAgICAgICAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZSh0eXBlLCBfYXJncywgX2NvbnRleHQsIF9yZWYzKSB7XG4gICAgICAgICAgdmFyIHNjaGVtYSA9IF9yZWYzLnNjaGVtYTtcblxuICAgICAgICAgIGlmIChpc0Fic3RyYWN0VHlwZSh0eXBlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHNjaGVtYS5nZXRQb3NzaWJsZVR5cGVzKHR5cGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGVudW1WYWx1ZXM6IHtcbiAgICAgICAgdHlwZTogbmV3IEdyYXBoUUxMaXN0KG5ldyBHcmFwaFFMTm9uTnVsbChfX0VudW1WYWx1ZSkpLFxuICAgICAgICBhcmdzOiB7XG4gICAgICAgICAgaW5jbHVkZURlcHJlY2F0ZWQ6IHtcbiAgICAgICAgICAgIHR5cGU6IEdyYXBoUUxCb29sZWFuLFxuICAgICAgICAgICAgZGVmYXVsdFZhbHVlOiBmYWxzZVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZSh0eXBlLCBfcmVmNCkge1xuICAgICAgICAgIHZhciBpbmNsdWRlRGVwcmVjYXRlZCA9IF9yZWY0LmluY2x1ZGVEZXByZWNhdGVkO1xuXG4gICAgICAgICAgaWYgKGlzRW51bVR5cGUodHlwZSkpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZXMgPSB0eXBlLmdldFZhbHVlcygpO1xuICAgICAgICAgICAgcmV0dXJuIGluY2x1ZGVEZXByZWNhdGVkID8gdmFsdWVzIDogdmFsdWVzLmZpbHRlcihmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZpZWxkLmRlcHJlY2F0aW9uUmVhc29uID09IG51bGw7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBpbnB1dEZpZWxkczoge1xuICAgICAgICB0eXBlOiBuZXcgR3JhcGhRTExpc3QobmV3IEdyYXBoUUxOb25OdWxsKF9fSW5wdXRWYWx1ZSkpLFxuICAgICAgICBhcmdzOiB7XG4gICAgICAgICAgaW5jbHVkZURlcHJlY2F0ZWQ6IHtcbiAgICAgICAgICAgIHR5cGU6IEdyYXBoUUxCb29sZWFuLFxuICAgICAgICAgICAgZGVmYXVsdFZhbHVlOiBmYWxzZVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZSh0eXBlLCBfcmVmNSkge1xuICAgICAgICAgIHZhciBpbmNsdWRlRGVwcmVjYXRlZCA9IF9yZWY1LmluY2x1ZGVEZXByZWNhdGVkO1xuXG4gICAgICAgICAgaWYgKGlzSW5wdXRPYmplY3RUeXBlKHR5cGUpKSB7XG4gICAgICAgICAgICB2YXIgdmFsdWVzID0gb2JqZWN0VmFsdWVzKHR5cGUuZ2V0RmllbGRzKCkpO1xuICAgICAgICAgICAgcmV0dXJuIGluY2x1ZGVEZXByZWNhdGVkID8gdmFsdWVzIDogdmFsdWVzLmZpbHRlcihmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZpZWxkLmRlcHJlY2F0aW9uUmVhc29uID09IG51bGw7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBvZlR5cGU6IHtcbiAgICAgICAgdHlwZTogX19UeXBlLFxuICAgICAgICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKHR5cGUpIHtcbiAgICAgICAgICByZXR1cm4gdHlwZS5vZlR5cGUgIT09IHVuZGVmaW5lZCA/IHR5cGUub2ZUeXBlIDogdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxufSk7XG5leHBvcnQgdmFyIF9fRmllbGQgPSBuZXcgR3JhcGhRTE9iamVjdFR5cGUoe1xuICBuYW1lOiAnX19GaWVsZCcsXG4gIGRlc2NyaXB0aW9uOiAnT2JqZWN0IGFuZCBJbnRlcmZhY2UgdHlwZXMgYXJlIGRlc2NyaWJlZCBieSBhIGxpc3Qgb2YgRmllbGRzLCBlYWNoIG9mIHdoaWNoIGhhcyBhIG5hbWUsIHBvdGVudGlhbGx5IGEgbGlzdCBvZiBhcmd1bWVudHMsIGFuZCBhIHJldHVybiB0eXBlLicsXG4gIGZpZWxkczogZnVuY3Rpb24gZmllbGRzKCkge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiB7XG4gICAgICAgIHR5cGU6IG5ldyBHcmFwaFFMTm9uTnVsbChHcmFwaFFMU3RyaW5nKSxcbiAgICAgICAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZShmaWVsZCkge1xuICAgICAgICAgIHJldHVybiBmaWVsZC5uYW1lO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZGVzY3JpcHRpb246IHtcbiAgICAgICAgdHlwZTogR3JhcGhRTFN0cmluZyxcbiAgICAgICAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZShmaWVsZCkge1xuICAgICAgICAgIHJldHVybiBmaWVsZC5kZXNjcmlwdGlvbjtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGFyZ3M6IHtcbiAgICAgICAgdHlwZTogbmV3IEdyYXBoUUxOb25OdWxsKG5ldyBHcmFwaFFMTGlzdChuZXcgR3JhcGhRTE5vbk51bGwoX19JbnB1dFZhbHVlKSkpLFxuICAgICAgICBhcmdzOiB7XG4gICAgICAgICAgaW5jbHVkZURlcHJlY2F0ZWQ6IHtcbiAgICAgICAgICAgIHR5cGU6IEdyYXBoUUxCb29sZWFuLFxuICAgICAgICAgICAgZGVmYXVsdFZhbHVlOiBmYWxzZVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZShmaWVsZCwgX3JlZjYpIHtcbiAgICAgICAgICB2YXIgaW5jbHVkZURlcHJlY2F0ZWQgPSBfcmVmNi5pbmNsdWRlRGVwcmVjYXRlZDtcbiAgICAgICAgICByZXR1cm4gaW5jbHVkZURlcHJlY2F0ZWQgPyBmaWVsZC5hcmdzIDogZmllbGQuYXJncy5maWx0ZXIoZnVuY3Rpb24gKGFyZykge1xuICAgICAgICAgICAgcmV0dXJuIGFyZy5kZXByZWNhdGlvblJlYXNvbiA9PSBudWxsO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdHlwZToge1xuICAgICAgICB0eXBlOiBuZXcgR3JhcGhRTE5vbk51bGwoX19UeXBlKSxcbiAgICAgICAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZShmaWVsZCkge1xuICAgICAgICAgIHJldHVybiBmaWVsZC50eXBlO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgaXNEZXByZWNhdGVkOiB7XG4gICAgICAgIHR5cGU6IG5ldyBHcmFwaFFMTm9uTnVsbChHcmFwaFFMQm9vbGVhbiksXG4gICAgICAgIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoZmllbGQpIHtcbiAgICAgICAgICByZXR1cm4gZmllbGQuZGVwcmVjYXRpb25SZWFzb24gIT0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGRlcHJlY2F0aW9uUmVhc29uOiB7XG4gICAgICAgIHR5cGU6IEdyYXBoUUxTdHJpbmcsXG4gICAgICAgIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoZmllbGQpIHtcbiAgICAgICAgICByZXR1cm4gZmllbGQuZGVwcmVjYXRpb25SZWFzb247XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG59KTtcbmV4cG9ydCB2YXIgX19JbnB1dFZhbHVlID0gbmV3IEdyYXBoUUxPYmplY3RUeXBlKHtcbiAgbmFtZTogJ19fSW5wdXRWYWx1ZScsXG4gIGRlc2NyaXB0aW9uOiAnQXJndW1lbnRzIHByb3ZpZGVkIHRvIEZpZWxkcyBvciBEaXJlY3RpdmVzIGFuZCB0aGUgaW5wdXQgZmllbGRzIG9mIGFuIElucHV0T2JqZWN0IGFyZSByZXByZXNlbnRlZCBhcyBJbnB1dCBWYWx1ZXMgd2hpY2ggZGVzY3JpYmUgdGhlaXIgdHlwZSBhbmQgb3B0aW9uYWxseSBhIGRlZmF1bHQgdmFsdWUuJyxcbiAgZmllbGRzOiBmdW5jdGlvbiBmaWVsZHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IHtcbiAgICAgICAgdHlwZTogbmV3IEdyYXBoUUxOb25OdWxsKEdyYXBoUUxTdHJpbmcpLFxuICAgICAgICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKGlucHV0VmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gaW5wdXRWYWx1ZS5uYW1lO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZGVzY3JpcHRpb246IHtcbiAgICAgICAgdHlwZTogR3JhcGhRTFN0cmluZyxcbiAgICAgICAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZShpbnB1dFZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIGlucHV0VmFsdWUuZGVzY3JpcHRpb247XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB0eXBlOiB7XG4gICAgICAgIHR5cGU6IG5ldyBHcmFwaFFMTm9uTnVsbChfX1R5cGUpLFxuICAgICAgICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKGlucHV0VmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gaW5wdXRWYWx1ZS50eXBlO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZGVmYXVsdFZhbHVlOiB7XG4gICAgICAgIHR5cGU6IEdyYXBoUUxTdHJpbmcsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnQSBHcmFwaFFMLWZvcm1hdHRlZCBzdHJpbmcgcmVwcmVzZW50aW5nIHRoZSBkZWZhdWx0IHZhbHVlIGZvciB0aGlzIGlucHV0IHZhbHVlLicsXG4gICAgICAgIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoaW5wdXRWYWx1ZSkge1xuICAgICAgICAgIHZhciB0eXBlID0gaW5wdXRWYWx1ZS50eXBlLFxuICAgICAgICAgICAgICBkZWZhdWx0VmFsdWUgPSBpbnB1dFZhbHVlLmRlZmF1bHRWYWx1ZTtcbiAgICAgICAgICB2YXIgdmFsdWVBU1QgPSBhc3RGcm9tVmFsdWUoZGVmYXVsdFZhbHVlLCB0eXBlKTtcbiAgICAgICAgICByZXR1cm4gdmFsdWVBU1QgPyBwcmludCh2YWx1ZUFTVCkgOiBudWxsO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgaXNEZXByZWNhdGVkOiB7XG4gICAgICAgIHR5cGU6IG5ldyBHcmFwaFFMTm9uTnVsbChHcmFwaFFMQm9vbGVhbiksXG4gICAgICAgIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoZmllbGQpIHtcbiAgICAgICAgICByZXR1cm4gZmllbGQuZGVwcmVjYXRpb25SZWFzb24gIT0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGRlcHJlY2F0aW9uUmVhc29uOiB7XG4gICAgICAgIHR5cGU6IEdyYXBoUUxTdHJpbmcsXG4gICAgICAgIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUob2JqKSB7XG4gICAgICAgICAgcmV0dXJuIG9iai5kZXByZWNhdGlvblJlYXNvbjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cbn0pO1xuZXhwb3J0IHZhciBfX0VudW1WYWx1ZSA9IG5ldyBHcmFwaFFMT2JqZWN0VHlwZSh7XG4gIG5hbWU6ICdfX0VudW1WYWx1ZScsXG4gIGRlc2NyaXB0aW9uOiAnT25lIHBvc3NpYmxlIHZhbHVlIGZvciBhIGdpdmVuIEVudW0uIEVudW0gdmFsdWVzIGFyZSB1bmlxdWUgdmFsdWVzLCBub3QgYSBwbGFjZWhvbGRlciBmb3IgYSBzdHJpbmcgb3IgbnVtZXJpYyB2YWx1ZS4gSG93ZXZlciBhbiBFbnVtIHZhbHVlIGlzIHJldHVybmVkIGluIGEgSlNPTiByZXNwb25zZSBhcyBhIHN0cmluZy4nLFxuICBmaWVsZHM6IGZ1bmN0aW9uIGZpZWxkcygpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZToge1xuICAgICAgICB0eXBlOiBuZXcgR3JhcGhRTE5vbk51bGwoR3JhcGhRTFN0cmluZyksXG4gICAgICAgIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoZW51bVZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIGVudW1WYWx1ZS5uYW1lO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZGVzY3JpcHRpb246IHtcbiAgICAgICAgdHlwZTogR3JhcGhRTFN0cmluZyxcbiAgICAgICAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZShlbnVtVmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gZW51bVZhbHVlLmRlc2NyaXB0aW9uO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgaXNEZXByZWNhdGVkOiB7XG4gICAgICAgIHR5cGU6IG5ldyBHcmFwaFFMTm9uTnVsbChHcmFwaFFMQm9vbGVhbiksXG4gICAgICAgIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoZW51bVZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIGVudW1WYWx1ZS5kZXByZWNhdGlvblJlYXNvbiAhPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZGVwcmVjYXRpb25SZWFzb246IHtcbiAgICAgICAgdHlwZTogR3JhcGhRTFN0cmluZyxcbiAgICAgICAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZShlbnVtVmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gZW51bVZhbHVlLmRlcHJlY2F0aW9uUmVhc29uO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxufSk7XG5leHBvcnQgdmFyIFR5cGVLaW5kID0gT2JqZWN0LmZyZWV6ZSh7XG4gIFNDQUxBUjogJ1NDQUxBUicsXG4gIE9CSkVDVDogJ09CSkVDVCcsXG4gIElOVEVSRkFDRTogJ0lOVEVSRkFDRScsXG4gIFVOSU9OOiAnVU5JT04nLFxuICBFTlVNOiAnRU5VTScsXG4gIElOUFVUX09CSkVDVDogJ0lOUFVUX09CSkVDVCcsXG4gIExJU1Q6ICdMSVNUJyxcbiAgTk9OX05VTEw6ICdOT05fTlVMTCdcbn0pO1xuZXhwb3J0IHZhciBfX1R5cGVLaW5kID0gbmV3IEdyYXBoUUxFbnVtVHlwZSh7XG4gIG5hbWU6ICdfX1R5cGVLaW5kJyxcbiAgZGVzY3JpcHRpb246ICdBbiBlbnVtIGRlc2NyaWJpbmcgd2hhdCBraW5kIG9mIHR5cGUgYSBnaXZlbiBgX19UeXBlYCBpcy4nLFxuICB2YWx1ZXM6IHtcbiAgICBTQ0FMQVI6IHtcbiAgICAgIHZhbHVlOiBUeXBlS2luZC5TQ0FMQVIsXG4gICAgICBkZXNjcmlwdGlvbjogJ0luZGljYXRlcyB0aGlzIHR5cGUgaXMgYSBzY2FsYXIuJ1xuICAgIH0sXG4gICAgT0JKRUNUOiB7XG4gICAgICB2YWx1ZTogVHlwZUtpbmQuT0JKRUNULFxuICAgICAgZGVzY3JpcHRpb246ICdJbmRpY2F0ZXMgdGhpcyB0eXBlIGlzIGFuIG9iamVjdC4gYGZpZWxkc2AgYW5kIGBpbnRlcmZhY2VzYCBhcmUgdmFsaWQgZmllbGRzLidcbiAgICB9LFxuICAgIElOVEVSRkFDRToge1xuICAgICAgdmFsdWU6IFR5cGVLaW5kLklOVEVSRkFDRSxcbiAgICAgIGRlc2NyaXB0aW9uOiAnSW5kaWNhdGVzIHRoaXMgdHlwZSBpcyBhbiBpbnRlcmZhY2UuIGBmaWVsZHNgLCBgaW50ZXJmYWNlc2AsIGFuZCBgcG9zc2libGVUeXBlc2AgYXJlIHZhbGlkIGZpZWxkcy4nXG4gICAgfSxcbiAgICBVTklPTjoge1xuICAgICAgdmFsdWU6IFR5cGVLaW5kLlVOSU9OLFxuICAgICAgZGVzY3JpcHRpb246ICdJbmRpY2F0ZXMgdGhpcyB0eXBlIGlzIGEgdW5pb24uIGBwb3NzaWJsZVR5cGVzYCBpcyBhIHZhbGlkIGZpZWxkLidcbiAgICB9LFxuICAgIEVOVU06IHtcbiAgICAgIHZhbHVlOiBUeXBlS2luZC5FTlVNLFxuICAgICAgZGVzY3JpcHRpb246ICdJbmRpY2F0ZXMgdGhpcyB0eXBlIGlzIGFuIGVudW0uIGBlbnVtVmFsdWVzYCBpcyBhIHZhbGlkIGZpZWxkLidcbiAgICB9LFxuICAgIElOUFVUX09CSkVDVDoge1xuICAgICAgdmFsdWU6IFR5cGVLaW5kLklOUFVUX09CSkVDVCxcbiAgICAgIGRlc2NyaXB0aW9uOiAnSW5kaWNhdGVzIHRoaXMgdHlwZSBpcyBhbiBpbnB1dCBvYmplY3QuIGBpbnB1dEZpZWxkc2AgaXMgYSB2YWxpZCBmaWVsZC4nXG4gICAgfSxcbiAgICBMSVNUOiB7XG4gICAgICB2YWx1ZTogVHlwZUtpbmQuTElTVCxcbiAgICAgIGRlc2NyaXB0aW9uOiAnSW5kaWNhdGVzIHRoaXMgdHlwZSBpcyBhIGxpc3QuIGBvZlR5cGVgIGlzIGEgdmFsaWQgZmllbGQuJ1xuICAgIH0sXG4gICAgTk9OX05VTEw6IHtcbiAgICAgIHZhbHVlOiBUeXBlS2luZC5OT05fTlVMTCxcbiAgICAgIGRlc2NyaXB0aW9uOiAnSW5kaWNhdGVzIHRoaXMgdHlwZSBpcyBhIG5vbi1udWxsLiBgb2ZUeXBlYCBpcyBhIHZhbGlkIGZpZWxkLidcbiAgICB9XG4gIH1cbn0pO1xuLyoqXG4gKiBOb3RlIHRoYXQgdGhlc2UgYXJlIEdyYXBoUUxGaWVsZCBhbmQgbm90IEdyYXBoUUxGaWVsZENvbmZpZyxcbiAqIHNvIHRoZSBmb3JtYXQgZm9yIGFyZ3MgaXMgZGlmZmVyZW50LlxuICovXG5cbmV4cG9ydCB2YXIgU2NoZW1hTWV0YUZpZWxkRGVmID0ge1xuICBuYW1lOiAnX19zY2hlbWEnLFxuICB0eXBlOiBuZXcgR3JhcGhRTE5vbk51bGwoX19TY2hlbWEpLFxuICBkZXNjcmlwdGlvbjogJ0FjY2VzcyB0aGUgY3VycmVudCB0eXBlIHNjaGVtYSBvZiB0aGlzIHNlcnZlci4nLFxuICBhcmdzOiBbXSxcbiAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZShfc291cmNlLCBfYXJncywgX2NvbnRleHQsIF9yZWY3KSB7XG4gICAgdmFyIHNjaGVtYSA9IF9yZWY3LnNjaGVtYTtcbiAgICByZXR1cm4gc2NoZW1hO1xuICB9LFxuICBpc0RlcHJlY2F0ZWQ6IGZhbHNlLFxuICBkZXByZWNhdGlvblJlYXNvbjogdW5kZWZpbmVkLFxuICBleHRlbnNpb25zOiB1bmRlZmluZWQsXG4gIGFzdE5vZGU6IHVuZGVmaW5lZFxufTtcbmV4cG9ydCB2YXIgVHlwZU1ldGFGaWVsZERlZiA9IHtcbiAgbmFtZTogJ19fdHlwZScsXG4gIHR5cGU6IF9fVHlwZSxcbiAgZGVzY3JpcHRpb246ICdSZXF1ZXN0IHRoZSB0eXBlIGluZm9ybWF0aW9uIG9mIGEgc2luZ2xlIHR5cGUuJyxcbiAgYXJnczogW3tcbiAgICBuYW1lOiAnbmFtZScsXG4gICAgZGVzY3JpcHRpb246IHVuZGVmaW5lZCxcbiAgICB0eXBlOiBuZXcgR3JhcGhRTE5vbk51bGwoR3JhcGhRTFN0cmluZyksXG4gICAgZGVmYXVsdFZhbHVlOiB1bmRlZmluZWQsXG4gICAgZGVwcmVjYXRpb25SZWFzb246IHVuZGVmaW5lZCxcbiAgICBleHRlbnNpb25zOiB1bmRlZmluZWQsXG4gICAgYXN0Tm9kZTogdW5kZWZpbmVkXG4gIH1dLFxuICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKF9zb3VyY2UsIF9yZWY4LCBfY29udGV4dCwgX3JlZjkpIHtcbiAgICB2YXIgbmFtZSA9IF9yZWY4Lm5hbWU7XG4gICAgdmFyIHNjaGVtYSA9IF9yZWY5LnNjaGVtYTtcbiAgICByZXR1cm4gc2NoZW1hLmdldFR5cGUobmFtZSk7XG4gIH0sXG4gIGlzRGVwcmVjYXRlZDogZmFsc2UsXG4gIGRlcHJlY2F0aW9uUmVhc29uOiB1bmRlZmluZWQsXG4gIGV4dGVuc2lvbnM6IHVuZGVmaW5lZCxcbiAgYXN0Tm9kZTogdW5kZWZpbmVkXG59O1xuZXhwb3J0IHZhciBUeXBlTmFtZU1ldGFGaWVsZERlZiA9IHtcbiAgbmFtZTogJ19fdHlwZW5hbWUnLFxuICB0eXBlOiBuZXcgR3JhcGhRTE5vbk51bGwoR3JhcGhRTFN0cmluZyksXG4gIGRlc2NyaXB0aW9uOiAnVGhlIG5hbWUgb2YgdGhlIGN1cnJlbnQgT2JqZWN0IHR5cGUgYXQgcnVudGltZS4nLFxuICBhcmdzOiBbXSxcbiAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZShfc291cmNlLCBfYXJncywgX2NvbnRleHQsIF9yZWYxMCkge1xuICAgIHZhciBwYXJlbnRUeXBlID0gX3JlZjEwLnBhcmVudFR5cGU7XG4gICAgcmV0dXJuIHBhcmVudFR5cGUubmFtZTtcbiAgfSxcbiAgaXNEZXByZWNhdGVkOiBmYWxzZSxcbiAgZGVwcmVjYXRpb25SZWFzb246IHVuZGVmaW5lZCxcbiAgZXh0ZW5zaW9uczogdW5kZWZpbmVkLFxuICBhc3ROb2RlOiB1bmRlZmluZWRcbn07XG5leHBvcnQgdmFyIGludHJvc3BlY3Rpb25UeXBlcyA9IE9iamVjdC5mcmVlemUoW19fU2NoZW1hLCBfX0RpcmVjdGl2ZSwgX19EaXJlY3RpdmVMb2NhdGlvbiwgX19UeXBlLCBfX0ZpZWxkLCBfX0lucHV0VmFsdWUsIF9fRW51bVZhbHVlLCBfX1R5cGVLaW5kXSk7XG5leHBvcnQgZnVuY3Rpb24gaXNJbnRyb3NwZWN0aW9uVHlwZSh0eXBlKSB7XG4gIHJldHVybiBpbnRyb3NwZWN0aW9uVHlwZXMuc29tZShmdW5jdGlvbiAoX3JlZjExKSB7XG4gICAgdmFyIG5hbWUgPSBfcmVmMTEubmFtZTtcbiAgICByZXR1cm4gdHlwZS5uYW1lID09PSBuYW1lO1xuICB9KTtcbn1cbiIsImltcG9ydCBpc0Zpbml0ZSBmcm9tIFwiLi4vcG9seWZpbGxzL2lzRmluaXRlLm1qc1wiO1xuaW1wb3J0IGlzSW50ZWdlciBmcm9tIFwiLi4vcG9seWZpbGxzL2lzSW50ZWdlci5tanNcIjtcbmltcG9ydCBpbnNwZWN0IGZyb20gXCIuLi9qc3V0aWxzL2luc3BlY3QubWpzXCI7XG5pbXBvcnQgaXNPYmplY3RMaWtlIGZyb20gXCIuLi9qc3V0aWxzL2lzT2JqZWN0TGlrZS5tanNcIjtcbmltcG9ydCB7IEtpbmQgfSBmcm9tIFwiLi4vbGFuZ3VhZ2Uva2luZHMubWpzXCI7XG5pbXBvcnQgeyBwcmludCB9IGZyb20gXCIuLi9sYW5ndWFnZS9wcmludGVyLm1qc1wiO1xuaW1wb3J0IHsgR3JhcGhRTEVycm9yIH0gZnJvbSBcIi4uL2Vycm9yL0dyYXBoUUxFcnJvci5tanNcIjtcbmltcG9ydCB7IEdyYXBoUUxTY2FsYXJUeXBlIH0gZnJvbSBcIi4vZGVmaW5pdGlvbi5tanNcIjsgLy8gQXMgcGVyIHRoZSBHcmFwaFFMIFNwZWMsIEludGVnZXJzIGFyZSBvbmx5IHRyZWF0ZWQgYXMgdmFsaWQgd2hlbiBhIHZhbGlkXG4vLyAzMi1iaXQgc2lnbmVkIGludGVnZXIsIHByb3ZpZGluZyB0aGUgYnJvYWRlc3Qgc3VwcG9ydCBhY3Jvc3MgcGxhdGZvcm1zLlxuLy9cbi8vIG4uYi4gSmF2YVNjcmlwdCdzIGludGVnZXJzIGFyZSBzYWZlIGJldHdlZW4gLSgyXjUzIC0gMSkgYW5kIDJeNTMgLSAxIGJlY2F1c2Vcbi8vIHRoZXkgYXJlIGludGVybmFsbHkgcmVwcmVzZW50ZWQgYXMgSUVFRSA3NTQgZG91Ymxlcy5cblxudmFyIE1BWF9JTlQgPSAyMTQ3NDgzNjQ3O1xudmFyIE1JTl9JTlQgPSAtMjE0NzQ4MzY0ODtcblxuZnVuY3Rpb24gc2VyaWFsaXplSW50KG91dHB1dFZhbHVlKSB7XG4gIHZhciBjb2VyY2VkVmFsdWUgPSBzZXJpYWxpemVPYmplY3Qob3V0cHV0VmFsdWUpO1xuXG4gIGlmICh0eXBlb2YgY29lcmNlZFZhbHVlID09PSAnYm9vbGVhbicpIHtcbiAgICByZXR1cm4gY29lcmNlZFZhbHVlID8gMSA6IDA7XG4gIH1cblxuICB2YXIgbnVtID0gY29lcmNlZFZhbHVlO1xuXG4gIGlmICh0eXBlb2YgY29lcmNlZFZhbHVlID09PSAnc3RyaW5nJyAmJiBjb2VyY2VkVmFsdWUgIT09ICcnKSB7XG4gICAgbnVtID0gTnVtYmVyKGNvZXJjZWRWYWx1ZSk7XG4gIH1cblxuICBpZiAoIWlzSW50ZWdlcihudW0pKSB7XG4gICAgdGhyb3cgbmV3IEdyYXBoUUxFcnJvcihcIkludCBjYW5ub3QgcmVwcmVzZW50IG5vbi1pbnRlZ2VyIHZhbHVlOiBcIi5jb25jYXQoaW5zcGVjdChjb2VyY2VkVmFsdWUpKSk7XG4gIH1cblxuICBpZiAobnVtID4gTUFYX0lOVCB8fCBudW0gPCBNSU5fSU5UKSB7XG4gICAgdGhyb3cgbmV3IEdyYXBoUUxFcnJvcignSW50IGNhbm5vdCByZXByZXNlbnQgbm9uIDMyLWJpdCBzaWduZWQgaW50ZWdlciB2YWx1ZTogJyArIGluc3BlY3QoY29lcmNlZFZhbHVlKSk7XG4gIH1cblxuICByZXR1cm4gbnVtO1xufVxuXG5mdW5jdGlvbiBjb2VyY2VJbnQoaW5wdXRWYWx1ZSkge1xuICBpZiAoIWlzSW50ZWdlcihpbnB1dFZhbHVlKSkge1xuICAgIHRocm93IG5ldyBHcmFwaFFMRXJyb3IoXCJJbnQgY2Fubm90IHJlcHJlc2VudCBub24taW50ZWdlciB2YWx1ZTogXCIuY29uY2F0KGluc3BlY3QoaW5wdXRWYWx1ZSkpKTtcbiAgfVxuXG4gIGlmIChpbnB1dFZhbHVlID4gTUFYX0lOVCB8fCBpbnB1dFZhbHVlIDwgTUlOX0lOVCkge1xuICAgIHRocm93IG5ldyBHcmFwaFFMRXJyb3IoXCJJbnQgY2Fubm90IHJlcHJlc2VudCBub24gMzItYml0IHNpZ25lZCBpbnRlZ2VyIHZhbHVlOiBcIi5jb25jYXQoaW5wdXRWYWx1ZSkpO1xuICB9XG5cbiAgcmV0dXJuIGlucHV0VmFsdWU7XG59XG5cbmV4cG9ydCB2YXIgR3JhcGhRTEludCA9IG5ldyBHcmFwaFFMU2NhbGFyVHlwZSh7XG4gIG5hbWU6ICdJbnQnLFxuICBkZXNjcmlwdGlvbjogJ1RoZSBgSW50YCBzY2FsYXIgdHlwZSByZXByZXNlbnRzIG5vbi1mcmFjdGlvbmFsIHNpZ25lZCB3aG9sZSBudW1lcmljIHZhbHVlcy4gSW50IGNhbiByZXByZXNlbnQgdmFsdWVzIGJldHdlZW4gLSgyXjMxKSBhbmQgMl4zMSAtIDEuJyxcbiAgc2VyaWFsaXplOiBzZXJpYWxpemVJbnQsXG4gIHBhcnNlVmFsdWU6IGNvZXJjZUludCxcbiAgcGFyc2VMaXRlcmFsOiBmdW5jdGlvbiBwYXJzZUxpdGVyYWwodmFsdWVOb2RlKSB7XG4gICAgaWYgKHZhbHVlTm9kZS5raW5kICE9PSBLaW5kLklOVCkge1xuICAgICAgdGhyb3cgbmV3IEdyYXBoUUxFcnJvcihcIkludCBjYW5ub3QgcmVwcmVzZW50IG5vbi1pbnRlZ2VyIHZhbHVlOiBcIi5jb25jYXQocHJpbnQodmFsdWVOb2RlKSksIHZhbHVlTm9kZSk7XG4gICAgfVxuXG4gICAgdmFyIG51bSA9IHBhcnNlSW50KHZhbHVlTm9kZS52YWx1ZSwgMTApO1xuXG4gICAgaWYgKG51bSA+IE1BWF9JTlQgfHwgbnVtIDwgTUlOX0lOVCkge1xuICAgICAgdGhyb3cgbmV3IEdyYXBoUUxFcnJvcihcIkludCBjYW5ub3QgcmVwcmVzZW50IG5vbiAzMi1iaXQgc2lnbmVkIGludGVnZXIgdmFsdWU6IFwiLmNvbmNhdCh2YWx1ZU5vZGUudmFsdWUpLCB2YWx1ZU5vZGUpO1xuICAgIH1cblxuICAgIHJldHVybiBudW07XG4gIH1cbn0pO1xuXG5mdW5jdGlvbiBzZXJpYWxpemVGbG9hdChvdXRwdXRWYWx1ZSkge1xuICB2YXIgY29lcmNlZFZhbHVlID0gc2VyaWFsaXplT2JqZWN0KG91dHB1dFZhbHVlKTtcblxuICBpZiAodHlwZW9mIGNvZXJjZWRWYWx1ZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgcmV0dXJuIGNvZXJjZWRWYWx1ZSA/IDEgOiAwO1xuICB9XG5cbiAgdmFyIG51bSA9IGNvZXJjZWRWYWx1ZTtcblxuICBpZiAodHlwZW9mIGNvZXJjZWRWYWx1ZSA9PT0gJ3N0cmluZycgJiYgY29lcmNlZFZhbHVlICE9PSAnJykge1xuICAgIG51bSA9IE51bWJlcihjb2VyY2VkVmFsdWUpO1xuICB9XG5cbiAgaWYgKCFpc0Zpbml0ZShudW0pKSB7XG4gICAgdGhyb3cgbmV3IEdyYXBoUUxFcnJvcihcIkZsb2F0IGNhbm5vdCByZXByZXNlbnQgbm9uIG51bWVyaWMgdmFsdWU6IFwiLmNvbmNhdChpbnNwZWN0KGNvZXJjZWRWYWx1ZSkpKTtcbiAgfVxuXG4gIHJldHVybiBudW07XG59XG5cbmZ1bmN0aW9uIGNvZXJjZUZsb2F0KGlucHV0VmFsdWUpIHtcbiAgaWYgKCFpc0Zpbml0ZShpbnB1dFZhbHVlKSkge1xuICAgIHRocm93IG5ldyBHcmFwaFFMRXJyb3IoXCJGbG9hdCBjYW5ub3QgcmVwcmVzZW50IG5vbiBudW1lcmljIHZhbHVlOiBcIi5jb25jYXQoaW5zcGVjdChpbnB1dFZhbHVlKSkpO1xuICB9XG5cbiAgcmV0dXJuIGlucHV0VmFsdWU7XG59XG5cbmV4cG9ydCB2YXIgR3JhcGhRTEZsb2F0ID0gbmV3IEdyYXBoUUxTY2FsYXJUeXBlKHtcbiAgbmFtZTogJ0Zsb2F0JyxcbiAgZGVzY3JpcHRpb246ICdUaGUgYEZsb2F0YCBzY2FsYXIgdHlwZSByZXByZXNlbnRzIHNpZ25lZCBkb3VibGUtcHJlY2lzaW9uIGZyYWN0aW9uYWwgdmFsdWVzIGFzIHNwZWNpZmllZCBieSBbSUVFRSA3NTRdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lFRUVfZmxvYXRpbmdfcG9pbnQpLicsXG4gIHNlcmlhbGl6ZTogc2VyaWFsaXplRmxvYXQsXG4gIHBhcnNlVmFsdWU6IGNvZXJjZUZsb2F0LFxuICBwYXJzZUxpdGVyYWw6IGZ1bmN0aW9uIHBhcnNlTGl0ZXJhbCh2YWx1ZU5vZGUpIHtcbiAgICBpZiAodmFsdWVOb2RlLmtpbmQgIT09IEtpbmQuRkxPQVQgJiYgdmFsdWVOb2RlLmtpbmQgIT09IEtpbmQuSU5UKSB7XG4gICAgICB0aHJvdyBuZXcgR3JhcGhRTEVycm9yKFwiRmxvYXQgY2Fubm90IHJlcHJlc2VudCBub24gbnVtZXJpYyB2YWx1ZTogXCIuY29uY2F0KHByaW50KHZhbHVlTm9kZSkpLCB2YWx1ZU5vZGUpO1xuICAgIH1cblxuICAgIHJldHVybiBwYXJzZUZsb2F0KHZhbHVlTm9kZS52YWx1ZSk7XG4gIH1cbn0pOyAvLyBTdXBwb3J0IHNlcmlhbGl6aW5nIG9iamVjdHMgd2l0aCBjdXN0b20gdmFsdWVPZigpIG9yIHRvSlNPTigpIGZ1bmN0aW9ucyAtXG4vLyBhIGNvbW1vbiB3YXkgdG8gcmVwcmVzZW50IGEgY29tcGxleCB2YWx1ZSB3aGljaCBjYW4gYmUgcmVwcmVzZW50ZWQgYXNcbi8vIGEgc3RyaW5nIChleDogTW9uZ29EQiBpZCBvYmplY3RzKS5cblxuZnVuY3Rpb24gc2VyaWFsaXplT2JqZWN0KG91dHB1dFZhbHVlKSB7XG4gIGlmIChpc09iamVjdExpa2Uob3V0cHV0VmFsdWUpKSB7XG4gICAgaWYgKHR5cGVvZiBvdXRwdXRWYWx1ZS52YWx1ZU9mID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB2YXIgdmFsdWVPZlJlc3VsdCA9IG91dHB1dFZhbHVlLnZhbHVlT2YoKTtcblxuICAgICAgaWYgKCFpc09iamVjdExpa2UodmFsdWVPZlJlc3VsdCkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlT2ZSZXN1bHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBvdXRwdXRWYWx1ZS50b0pTT04gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXVzZV1cbiAgICAgIHJldHVybiBvdXRwdXRWYWx1ZS50b0pTT04oKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb3V0cHV0VmFsdWU7XG59XG5cbmZ1bmN0aW9uIHNlcmlhbGl6ZVN0cmluZyhvdXRwdXRWYWx1ZSkge1xuICB2YXIgY29lcmNlZFZhbHVlID0gc2VyaWFsaXplT2JqZWN0KG91dHB1dFZhbHVlKTsgLy8gU2VyaWFsaXplIHN0cmluZywgYm9vbGVhbiBhbmQgbnVtYmVyIHZhbHVlcyB0byBhIHN0cmluZywgYnV0IGRvIG5vdFxuICAvLyBhdHRlbXB0IHRvIGNvZXJjZSBvYmplY3QsIGZ1bmN0aW9uLCBzeW1ib2wsIG9yIG90aGVyIHR5cGVzIGFzIHN0cmluZ3MuXG5cbiAgaWYgKHR5cGVvZiBjb2VyY2VkVmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGNvZXJjZWRWYWx1ZTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgY29lcmNlZFZhbHVlID09PSAnYm9vbGVhbicpIHtcbiAgICByZXR1cm4gY29lcmNlZFZhbHVlID8gJ3RydWUnIDogJ2ZhbHNlJztcbiAgfVxuXG4gIGlmIChpc0Zpbml0ZShjb2VyY2VkVmFsdWUpKSB7XG4gICAgcmV0dXJuIGNvZXJjZWRWYWx1ZS50b1N0cmluZygpO1xuICB9XG5cbiAgdGhyb3cgbmV3IEdyYXBoUUxFcnJvcihcIlN0cmluZyBjYW5ub3QgcmVwcmVzZW50IHZhbHVlOiBcIi5jb25jYXQoaW5zcGVjdChvdXRwdXRWYWx1ZSkpKTtcbn1cblxuZnVuY3Rpb24gY29lcmNlU3RyaW5nKGlucHV0VmFsdWUpIHtcbiAgaWYgKHR5cGVvZiBpbnB1dFZhbHVlICE9PSAnc3RyaW5nJykge1xuICAgIHRocm93IG5ldyBHcmFwaFFMRXJyb3IoXCJTdHJpbmcgY2Fubm90IHJlcHJlc2VudCBhIG5vbiBzdHJpbmcgdmFsdWU6IFwiLmNvbmNhdChpbnNwZWN0KGlucHV0VmFsdWUpKSk7XG4gIH1cblxuICByZXR1cm4gaW5wdXRWYWx1ZTtcbn1cblxuZXhwb3J0IHZhciBHcmFwaFFMU3RyaW5nID0gbmV3IEdyYXBoUUxTY2FsYXJUeXBlKHtcbiAgbmFtZTogJ1N0cmluZycsXG4gIGRlc2NyaXB0aW9uOiAnVGhlIGBTdHJpbmdgIHNjYWxhciB0eXBlIHJlcHJlc2VudHMgdGV4dHVhbCBkYXRhLCByZXByZXNlbnRlZCBhcyBVVEYtOCBjaGFyYWN0ZXIgc2VxdWVuY2VzLiBUaGUgU3RyaW5nIHR5cGUgaXMgbW9zdCBvZnRlbiB1c2VkIGJ5IEdyYXBoUUwgdG8gcmVwcmVzZW50IGZyZWUtZm9ybSBodW1hbi1yZWFkYWJsZSB0ZXh0LicsXG4gIHNlcmlhbGl6ZTogc2VyaWFsaXplU3RyaW5nLFxuICBwYXJzZVZhbHVlOiBjb2VyY2VTdHJpbmcsXG4gIHBhcnNlTGl0ZXJhbDogZnVuY3Rpb24gcGFyc2VMaXRlcmFsKHZhbHVlTm9kZSkge1xuICAgIGlmICh2YWx1ZU5vZGUua2luZCAhPT0gS2luZC5TVFJJTkcpIHtcbiAgICAgIHRocm93IG5ldyBHcmFwaFFMRXJyb3IoXCJTdHJpbmcgY2Fubm90IHJlcHJlc2VudCBhIG5vbiBzdHJpbmcgdmFsdWU6IFwiLmNvbmNhdChwcmludCh2YWx1ZU5vZGUpKSwgdmFsdWVOb2RlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWVOb2RlLnZhbHVlO1xuICB9XG59KTtcblxuZnVuY3Rpb24gc2VyaWFsaXplQm9vbGVhbihvdXRwdXRWYWx1ZSkge1xuICB2YXIgY29lcmNlZFZhbHVlID0gc2VyaWFsaXplT2JqZWN0KG91dHB1dFZhbHVlKTtcblxuICBpZiAodHlwZW9mIGNvZXJjZWRWYWx1ZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgcmV0dXJuIGNvZXJjZWRWYWx1ZTtcbiAgfVxuXG4gIGlmIChpc0Zpbml0ZShjb2VyY2VkVmFsdWUpKSB7XG4gICAgcmV0dXJuIGNvZXJjZWRWYWx1ZSAhPT0gMDtcbiAgfVxuXG4gIHRocm93IG5ldyBHcmFwaFFMRXJyb3IoXCJCb29sZWFuIGNhbm5vdCByZXByZXNlbnQgYSBub24gYm9vbGVhbiB2YWx1ZTogXCIuY29uY2F0KGluc3BlY3QoY29lcmNlZFZhbHVlKSkpO1xufVxuXG5mdW5jdGlvbiBjb2VyY2VCb29sZWFuKGlucHV0VmFsdWUpIHtcbiAgaWYgKHR5cGVvZiBpbnB1dFZhbHVlICE9PSAnYm9vbGVhbicpIHtcbiAgICB0aHJvdyBuZXcgR3JhcGhRTEVycm9yKFwiQm9vbGVhbiBjYW5ub3QgcmVwcmVzZW50IGEgbm9uIGJvb2xlYW4gdmFsdWU6IFwiLmNvbmNhdChpbnNwZWN0KGlucHV0VmFsdWUpKSk7XG4gIH1cblxuICByZXR1cm4gaW5wdXRWYWx1ZTtcbn1cblxuZXhwb3J0IHZhciBHcmFwaFFMQm9vbGVhbiA9IG5ldyBHcmFwaFFMU2NhbGFyVHlwZSh7XG4gIG5hbWU6ICdCb29sZWFuJyxcbiAgZGVzY3JpcHRpb246ICdUaGUgYEJvb2xlYW5gIHNjYWxhciB0eXBlIHJlcHJlc2VudHMgYHRydWVgIG9yIGBmYWxzZWAuJyxcbiAgc2VyaWFsaXplOiBzZXJpYWxpemVCb29sZWFuLFxuICBwYXJzZVZhbHVlOiBjb2VyY2VCb29sZWFuLFxuICBwYXJzZUxpdGVyYWw6IGZ1bmN0aW9uIHBhcnNlTGl0ZXJhbCh2YWx1ZU5vZGUpIHtcbiAgICBpZiAodmFsdWVOb2RlLmtpbmQgIT09IEtpbmQuQk9PTEVBTikge1xuICAgICAgdGhyb3cgbmV3IEdyYXBoUUxFcnJvcihcIkJvb2xlYW4gY2Fubm90IHJlcHJlc2VudCBhIG5vbiBib29sZWFuIHZhbHVlOiBcIi5jb25jYXQocHJpbnQodmFsdWVOb2RlKSksIHZhbHVlTm9kZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlTm9kZS52YWx1ZTtcbiAgfVxufSk7XG5cbmZ1bmN0aW9uIHNlcmlhbGl6ZUlEKG91dHB1dFZhbHVlKSB7XG4gIHZhciBjb2VyY2VkVmFsdWUgPSBzZXJpYWxpemVPYmplY3Qob3V0cHV0VmFsdWUpO1xuXG4gIGlmICh0eXBlb2YgY29lcmNlZFZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBjb2VyY2VkVmFsdWU7XG4gIH1cblxuICBpZiAoaXNJbnRlZ2VyKGNvZXJjZWRWYWx1ZSkpIHtcbiAgICByZXR1cm4gU3RyaW5nKGNvZXJjZWRWYWx1ZSk7XG4gIH1cblxuICB0aHJvdyBuZXcgR3JhcGhRTEVycm9yKFwiSUQgY2Fubm90IHJlcHJlc2VudCB2YWx1ZTogXCIuY29uY2F0KGluc3BlY3Qob3V0cHV0VmFsdWUpKSk7XG59XG5cbmZ1bmN0aW9uIGNvZXJjZUlEKGlucHV0VmFsdWUpIHtcbiAgaWYgKHR5cGVvZiBpbnB1dFZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBpbnB1dFZhbHVlO1xuICB9XG5cbiAgaWYgKGlzSW50ZWdlcihpbnB1dFZhbHVlKSkge1xuICAgIHJldHVybiBpbnB1dFZhbHVlLnRvU3RyaW5nKCk7XG4gIH1cblxuICB0aHJvdyBuZXcgR3JhcGhRTEVycm9yKFwiSUQgY2Fubm90IHJlcHJlc2VudCB2YWx1ZTogXCIuY29uY2F0KGluc3BlY3QoaW5wdXRWYWx1ZSkpKTtcbn1cblxuZXhwb3J0IHZhciBHcmFwaFFMSUQgPSBuZXcgR3JhcGhRTFNjYWxhclR5cGUoe1xuICBuYW1lOiAnSUQnLFxuICBkZXNjcmlwdGlvbjogJ1RoZSBgSURgIHNjYWxhciB0eXBlIHJlcHJlc2VudHMgYSB1bmlxdWUgaWRlbnRpZmllciwgb2Z0ZW4gdXNlZCB0byByZWZldGNoIGFuIG9iamVjdCBvciBhcyBrZXkgZm9yIGEgY2FjaGUuIFRoZSBJRCB0eXBlIGFwcGVhcnMgaW4gYSBKU09OIHJlc3BvbnNlIGFzIGEgU3RyaW5nOyBob3dldmVyLCBpdCBpcyBub3QgaW50ZW5kZWQgdG8gYmUgaHVtYW4tcmVhZGFibGUuIFdoZW4gZXhwZWN0ZWQgYXMgYW4gaW5wdXQgdHlwZSwgYW55IHN0cmluZyAoc3VjaCBhcyBgXCI0XCJgKSBvciBpbnRlZ2VyIChzdWNoIGFzIGA0YCkgaW5wdXQgdmFsdWUgd2lsbCBiZSBhY2NlcHRlZCBhcyBhbiBJRC4nLFxuICBzZXJpYWxpemU6IHNlcmlhbGl6ZUlELFxuICBwYXJzZVZhbHVlOiBjb2VyY2VJRCxcbiAgcGFyc2VMaXRlcmFsOiBmdW5jdGlvbiBwYXJzZUxpdGVyYWwodmFsdWVOb2RlKSB7XG4gICAgaWYgKHZhbHVlTm9kZS5raW5kICE9PSBLaW5kLlNUUklORyAmJiB2YWx1ZU5vZGUua2luZCAhPT0gS2luZC5JTlQpIHtcbiAgICAgIHRocm93IG5ldyBHcmFwaFFMRXJyb3IoJ0lEIGNhbm5vdCByZXByZXNlbnQgYSBub24tc3RyaW5nIGFuZCBub24taW50ZWdlciB2YWx1ZTogJyArIHByaW50KHZhbHVlTm9kZSksIHZhbHVlTm9kZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlTm9kZS52YWx1ZTtcbiAgfVxufSk7XG5leHBvcnQgdmFyIHNwZWNpZmllZFNjYWxhclR5cGVzID0gT2JqZWN0LmZyZWV6ZShbR3JhcGhRTFN0cmluZywgR3JhcGhRTEludCwgR3JhcGhRTEZsb2F0LCBHcmFwaFFMQm9vbGVhbiwgR3JhcGhRTElEXSk7XG5leHBvcnQgZnVuY3Rpb24gaXNTcGVjaWZpZWRTY2FsYXJUeXBlKHR5cGUpIHtcbiAgcmV0dXJuIHNwZWNpZmllZFNjYWxhclR5cGVzLnNvbWUoZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgbmFtZSA9IF9yZWYubmFtZTtcbiAgICByZXR1cm4gdHlwZS5uYW1lID09PSBuYW1lO1xuICB9KTtcbn1cbiIsImZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuaW1wb3J0IGZpbmQgZnJvbSBcIi4uL3BvbHlmaWxscy9maW5kLm1qc1wiO1xuaW1wb3J0IGFycmF5RnJvbSBmcm9tIFwiLi4vcG9seWZpbGxzL2FycmF5RnJvbS5tanNcIjtcbmltcG9ydCBvYmplY3RWYWx1ZXMgZnJvbSBcIi4uL3BvbHlmaWxscy9vYmplY3RWYWx1ZXMubWpzXCI7XG5pbXBvcnQgeyBTWU1CT0xfVE9fU1RSSU5HX1RBRyB9IGZyb20gXCIuLi9wb2x5ZmlsbHMvc3ltYm9scy5tanNcIjtcbmltcG9ydCBpbnNwZWN0IGZyb20gXCIuLi9qc3V0aWxzL2luc3BlY3QubWpzXCI7XG5pbXBvcnQgdG9PYmpNYXAgZnJvbSBcIi4uL2pzdXRpbHMvdG9PYmpNYXAubWpzXCI7XG5pbXBvcnQgZGV2QXNzZXJ0IGZyb20gXCIuLi9qc3V0aWxzL2RldkFzc2VydC5tanNcIjtcbmltcG9ydCBpbnN0YW5jZU9mIGZyb20gXCIuLi9qc3V0aWxzL2luc3RhbmNlT2YubWpzXCI7XG5pbXBvcnQgaXNPYmplY3RMaWtlIGZyb20gXCIuLi9qc3V0aWxzL2lzT2JqZWN0TGlrZS5tanNcIjtcbmltcG9ydCB7IF9fU2NoZW1hIH0gZnJvbSBcIi4vaW50cm9zcGVjdGlvbi5tanNcIjtcbmltcG9ydCB7IEdyYXBoUUxEaXJlY3RpdmUsIGlzRGlyZWN0aXZlLCBzcGVjaWZpZWREaXJlY3RpdmVzIH0gZnJvbSBcIi4vZGlyZWN0aXZlcy5tanNcIjtcbmltcG9ydCB7IGlzT2JqZWN0VHlwZSwgaXNJbnRlcmZhY2VUeXBlLCBpc1VuaW9uVHlwZSwgaXNJbnB1dE9iamVjdFR5cGUsIGdldE5hbWVkVHlwZSB9IGZyb20gXCIuL2RlZmluaXRpb24ubWpzXCI7XG4vKipcbiAqIFRlc3QgaWYgdGhlIGdpdmVuIHZhbHVlIGlzIGEgR3JhcGhRTCBzY2hlbWEuXG4gKi9cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlZGVjbGFyZVxuZXhwb3J0IGZ1bmN0aW9uIGlzU2NoZW1hKHNjaGVtYSkge1xuICByZXR1cm4gaW5zdGFuY2VPZihzY2hlbWEsIEdyYXBoUUxTY2hlbWEpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydFNjaGVtYShzY2hlbWEpIHtcbiAgaWYgKCFpc1NjaGVtYShzY2hlbWEpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRXhwZWN0ZWQgXCIuY29uY2F0KGluc3BlY3Qoc2NoZW1hKSwgXCIgdG8gYmUgYSBHcmFwaFFMIHNjaGVtYS5cIikpO1xuICB9XG5cbiAgcmV0dXJuIHNjaGVtYTtcbn1cbi8qKlxuICogU2NoZW1hIERlZmluaXRpb25cbiAqXG4gKiBBIFNjaGVtYSBpcyBjcmVhdGVkIGJ5IHN1cHBseWluZyB0aGUgcm9vdCB0eXBlcyBvZiBlYWNoIHR5cGUgb2Ygb3BlcmF0aW9uLFxuICogcXVlcnkgYW5kIG11dGF0aW9uIChvcHRpb25hbCkuIEEgc2NoZW1hIGRlZmluaXRpb24gaXMgdGhlbiBzdXBwbGllZCB0byB0aGVcbiAqIHZhbGlkYXRvciBhbmQgZXhlY3V0b3IuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiAgICAgY29uc3QgTXlBcHBTY2hlbWEgPSBuZXcgR3JhcGhRTFNjaGVtYSh7XG4gKiAgICAgICBxdWVyeTogTXlBcHBRdWVyeVJvb3RUeXBlLFxuICogICAgICAgbXV0YXRpb246IE15QXBwTXV0YXRpb25Sb290VHlwZSxcbiAqICAgICB9KVxuICpcbiAqIE5vdGU6IFdoZW4gdGhlIHNjaGVtYSBpcyBjb25zdHJ1Y3RlZCwgYnkgZGVmYXVsdCBvbmx5IHRoZSB0eXBlcyB0aGF0IGFyZVxuICogcmVhY2hhYmxlIGJ5IHRyYXZlcnNpbmcgdGhlIHJvb3QgdHlwZXMgYXJlIGluY2x1ZGVkLCBvdGhlciB0eXBlcyBtdXN0IGJlXG4gKiBleHBsaWNpdGx5IHJlZmVyZW5jZWQuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiAgICAgY29uc3QgY2hhcmFjdGVySW50ZXJmYWNlID0gbmV3IEdyYXBoUUxJbnRlcmZhY2VUeXBlKHtcbiAqICAgICAgIG5hbWU6ICdDaGFyYWN0ZXInLFxuICogICAgICAgLi4uXG4gKiAgICAgfSk7XG4gKlxuICogICAgIGNvbnN0IGh1bWFuVHlwZSA9IG5ldyBHcmFwaFFMT2JqZWN0VHlwZSh7XG4gKiAgICAgICBuYW1lOiAnSHVtYW4nLFxuICogICAgICAgaW50ZXJmYWNlczogW2NoYXJhY3RlckludGVyZmFjZV0sXG4gKiAgICAgICAuLi5cbiAqICAgICB9KTtcbiAqXG4gKiAgICAgY29uc3QgZHJvaWRUeXBlID0gbmV3IEdyYXBoUUxPYmplY3RUeXBlKHtcbiAqICAgICAgIG5hbWU6ICdEcm9pZCcsXG4gKiAgICAgICBpbnRlcmZhY2VzOiBbY2hhcmFjdGVySW50ZXJmYWNlXSxcbiAqICAgICAgIC4uLlxuICogICAgIH0pO1xuICpcbiAqICAgICBjb25zdCBzY2hlbWEgPSBuZXcgR3JhcGhRTFNjaGVtYSh7XG4gKiAgICAgICBxdWVyeTogbmV3IEdyYXBoUUxPYmplY3RUeXBlKHtcbiAqICAgICAgICAgbmFtZTogJ1F1ZXJ5JyxcbiAqICAgICAgICAgZmllbGRzOiB7XG4gKiAgICAgICAgICAgaGVybzogeyB0eXBlOiBjaGFyYWN0ZXJJbnRlcmZhY2UsIC4uLiB9LFxuICogICAgICAgICB9XG4gKiAgICAgICB9KSxcbiAqICAgICAgIC4uLlxuICogICAgICAgLy8gU2luY2UgdGhpcyBzY2hlbWEgcmVmZXJlbmNlcyBvbmx5IHRoZSBgQ2hhcmFjdGVyYCBpbnRlcmZhY2UgaXQnc1xuICogICAgICAgLy8gbmVjZXNzYXJ5IHRvIGV4cGxpY2l0bHkgbGlzdCB0aGUgdHlwZXMgdGhhdCBpbXBsZW1lbnQgaXQgaWZcbiAqICAgICAgIC8vIHlvdSB3YW50IHRoZW0gdG8gYmUgaW5jbHVkZWQgaW4gdGhlIGZpbmFsIHNjaGVtYS5cbiAqICAgICAgIHR5cGVzOiBbaHVtYW5UeXBlLCBkcm9pZFR5cGVdLFxuICogICAgIH0pXG4gKlxuICogTm90ZTogSWYgYW4gYXJyYXkgb2YgYGRpcmVjdGl2ZXNgIGFyZSBwcm92aWRlZCB0byBHcmFwaFFMU2NoZW1hLCB0aGF0IHdpbGwgYmVcbiAqIHRoZSBleGFjdCBsaXN0IG9mIGRpcmVjdGl2ZXMgcmVwcmVzZW50ZWQgYW5kIGFsbG93ZWQuIElmIGBkaXJlY3RpdmVzYCBpcyBub3RcbiAqIHByb3ZpZGVkIHRoZW4gYSBkZWZhdWx0IHNldCBvZiB0aGUgc3BlY2lmaWVkIGRpcmVjdGl2ZXMgKGUuZy4gQGluY2x1ZGUgYW5kXG4gKiBAc2tpcCkgd2lsbCBiZSB1c2VkLiBJZiB5b3Ugd2lzaCB0byBwcm92aWRlICphZGRpdGlvbmFsKiBkaXJlY3RpdmVzIHRvIHRoZXNlXG4gKiBzcGVjaWZpZWQgZGlyZWN0aXZlcywgeW91IG11c3QgZXhwbGljaXRseSBkZWNsYXJlIHRoZW0uIEV4YW1wbGU6XG4gKlxuICogICAgIGNvbnN0IE15QXBwU2NoZW1hID0gbmV3IEdyYXBoUUxTY2hlbWEoe1xuICogICAgICAgLi4uXG4gKiAgICAgICBkaXJlY3RpdmVzOiBzcGVjaWZpZWREaXJlY3RpdmVzLmNvbmNhdChbIG15Q3VzdG9tRGlyZWN0aXZlIF0pLFxuICogICAgIH0pXG4gKlxuICovXG5cbmV4cG9ydCB2YXIgR3JhcGhRTFNjaGVtYSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIC8vIFVzZWQgYXMgYSBjYWNoZSBmb3IgdmFsaWRhdGVTY2hlbWEoKS5cbiAgZnVuY3Rpb24gR3JhcGhRTFNjaGVtYShjb25maWcpIHtcbiAgICB2YXIgX2NvbmZpZyRkaXJlY3RpdmVzO1xuXG4gICAgLy8gSWYgdGhpcyBzY2hlbWEgd2FzIGJ1aWx0IGZyb20gYSBzb3VyY2Uga25vd24gdG8gYmUgdmFsaWQsIHRoZW4gaXQgbWF5IGJlXG4gICAgLy8gbWFya2VkIHdpdGggYXNzdW1lVmFsaWQgdG8gYXZvaWQgYW4gYWRkaXRpb25hbCB0eXBlIHN5c3RlbSB2YWxpZGF0aW9uLlxuICAgIHRoaXMuX192YWxpZGF0aW9uRXJyb3JzID0gY29uZmlnLmFzc3VtZVZhbGlkID09PSB0cnVlID8gW10gOiB1bmRlZmluZWQ7IC8vIENoZWNrIGZvciBjb21tb24gbWlzdGFrZXMgZHVyaW5nIGNvbnN0cnVjdGlvbiB0byBwcm9kdWNlIGVhcmx5IGVycm9ycy5cblxuICAgIGlzT2JqZWN0TGlrZShjb25maWcpIHx8IGRldkFzc2VydCgwLCAnTXVzdCBwcm92aWRlIGNvbmZpZ3VyYXRpb24gb2JqZWN0LicpO1xuICAgICFjb25maWcudHlwZXMgfHwgQXJyYXkuaXNBcnJheShjb25maWcudHlwZXMpIHx8IGRldkFzc2VydCgwLCBcIlxcXCJ0eXBlc1xcXCIgbXVzdCBiZSBBcnJheSBpZiBwcm92aWRlZCBidXQgZ290OiBcIi5jb25jYXQoaW5zcGVjdChjb25maWcudHlwZXMpLCBcIi5cIikpO1xuICAgICFjb25maWcuZGlyZWN0aXZlcyB8fCBBcnJheS5pc0FycmF5KGNvbmZpZy5kaXJlY3RpdmVzKSB8fCBkZXZBc3NlcnQoMCwgJ1wiZGlyZWN0aXZlc1wiIG11c3QgYmUgQXJyYXkgaWYgcHJvdmlkZWQgYnV0IGdvdDogJyArIFwiXCIuY29uY2F0KGluc3BlY3QoY29uZmlnLmRpcmVjdGl2ZXMpLCBcIi5cIikpO1xuICAgIHRoaXMuZGVzY3JpcHRpb24gPSBjb25maWcuZGVzY3JpcHRpb247XG4gICAgdGhpcy5leHRlbnNpb25zID0gY29uZmlnLmV4dGVuc2lvbnMgJiYgdG9PYmpNYXAoY29uZmlnLmV4dGVuc2lvbnMpO1xuICAgIHRoaXMuYXN0Tm9kZSA9IGNvbmZpZy5hc3ROb2RlO1xuICAgIHRoaXMuZXh0ZW5zaW9uQVNUTm9kZXMgPSBjb25maWcuZXh0ZW5zaW9uQVNUTm9kZXM7XG4gICAgdGhpcy5fcXVlcnlUeXBlID0gY29uZmlnLnF1ZXJ5O1xuICAgIHRoaXMuX211dGF0aW9uVHlwZSA9IGNvbmZpZy5tdXRhdGlvbjtcbiAgICB0aGlzLl9zdWJzY3JpcHRpb25UeXBlID0gY29uZmlnLnN1YnNjcmlwdGlvbjsgLy8gUHJvdmlkZSBzcGVjaWZpZWQgZGlyZWN0aXZlcyAoZS5nLiBAaW5jbHVkZSBhbmQgQHNraXApIGJ5IGRlZmF1bHQuXG5cbiAgICB0aGlzLl9kaXJlY3RpdmVzID0gKF9jb25maWckZGlyZWN0aXZlcyA9IGNvbmZpZy5kaXJlY3RpdmVzKSAhPT0gbnVsbCAmJiBfY29uZmlnJGRpcmVjdGl2ZXMgIT09IHZvaWQgMCA/IF9jb25maWckZGlyZWN0aXZlcyA6IHNwZWNpZmllZERpcmVjdGl2ZXM7IC8vIFRvIHByZXNlcnZlIG9yZGVyIG9mIHVzZXItcHJvdmlkZWQgdHlwZXMsIHdlIGFkZCBmaXJzdCB0byBhZGQgdGhlbSB0b1xuICAgIC8vIHRoZSBzZXQgb2YgXCJjb2xsZWN0ZWRcIiB0eXBlcywgc28gYGNvbGxlY3RSZWZlcmVuY2VkVHlwZXNgIGlnbm9yZSB0aGVtLlxuXG4gICAgdmFyIGFsbFJlZmVyZW5jZWRUeXBlcyA9IG5ldyBTZXQoY29uZmlnLnR5cGVzKTtcblxuICAgIGlmIChjb25maWcudHlwZXMgIT0gbnVsbCkge1xuICAgICAgZm9yICh2YXIgX2kyID0gMCwgX2NvbmZpZyR0eXBlczIgPSBjb25maWcudHlwZXM7IF9pMiA8IF9jb25maWckdHlwZXMyLmxlbmd0aDsgX2kyKyspIHtcbiAgICAgICAgdmFyIHR5cGUgPSBfY29uZmlnJHR5cGVzMltfaTJdO1xuICAgICAgICAvLyBXaGVuIHdlIHJlYWR5IHRvIHByb2Nlc3MgdGhpcyB0eXBlLCB3ZSByZW1vdmUgaXQgZnJvbSBcImNvbGxlY3RlZFwiIHR5cGVzXG4gICAgICAgIC8vIGFuZCB0aGVuIGFkZCBpdCB0b2dldGhlciB3aXRoIGFsbCBkZXBlbmRlbnQgdHlwZXMgaW4gdGhlIGNvcnJlY3QgcG9zaXRpb24uXG4gICAgICAgIGFsbFJlZmVyZW5jZWRUeXBlcy5kZWxldGUodHlwZSk7XG4gICAgICAgIGNvbGxlY3RSZWZlcmVuY2VkVHlwZXModHlwZSwgYWxsUmVmZXJlbmNlZFR5cGVzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5fcXVlcnlUeXBlICE9IG51bGwpIHtcbiAgICAgIGNvbGxlY3RSZWZlcmVuY2VkVHlwZXModGhpcy5fcXVlcnlUeXBlLCBhbGxSZWZlcmVuY2VkVHlwZXMpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9tdXRhdGlvblR5cGUgIT0gbnVsbCkge1xuICAgICAgY29sbGVjdFJlZmVyZW5jZWRUeXBlcyh0aGlzLl9tdXRhdGlvblR5cGUsIGFsbFJlZmVyZW5jZWRUeXBlcyk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3N1YnNjcmlwdGlvblR5cGUgIT0gbnVsbCkge1xuICAgICAgY29sbGVjdFJlZmVyZW5jZWRUeXBlcyh0aGlzLl9zdWJzY3JpcHRpb25UeXBlLCBhbGxSZWZlcmVuY2VkVHlwZXMpO1xuICAgIH1cblxuICAgIGZvciAodmFyIF9pNCA9IDAsIF90aGlzJF9kaXJlY3RpdmVzMiA9IHRoaXMuX2RpcmVjdGl2ZXM7IF9pNCA8IF90aGlzJF9kaXJlY3RpdmVzMi5sZW5ndGg7IF9pNCsrKSB7XG4gICAgICB2YXIgZGlyZWN0aXZlID0gX3RoaXMkX2RpcmVjdGl2ZXMyW19pNF07XG5cbiAgICAgIC8vIERpcmVjdGl2ZXMgYXJlIG5vdCB2YWxpZGF0ZWQgdW50aWwgdmFsaWRhdGVTY2hlbWEoKSBpcyBjYWxsZWQuXG4gICAgICBpZiAoaXNEaXJlY3RpdmUoZGlyZWN0aXZlKSkge1xuICAgICAgICBmb3IgKHZhciBfaTYgPSAwLCBfZGlyZWN0aXZlJGFyZ3MyID0gZGlyZWN0aXZlLmFyZ3M7IF9pNiA8IF9kaXJlY3RpdmUkYXJnczIubGVuZ3RoOyBfaTYrKykge1xuICAgICAgICAgIHZhciBhcmcgPSBfZGlyZWN0aXZlJGFyZ3MyW19pNl07XG4gICAgICAgICAgY29sbGVjdFJlZmVyZW5jZWRUeXBlcyhhcmcudHlwZSwgYWxsUmVmZXJlbmNlZFR5cGVzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbGxlY3RSZWZlcmVuY2VkVHlwZXMoX19TY2hlbWEsIGFsbFJlZmVyZW5jZWRUeXBlcyk7IC8vIFN0b3JpbmcgdGhlIHJlc3VsdGluZyBtYXAgZm9yIHJlZmVyZW5jZSBieSB0aGUgc2NoZW1hLlxuXG4gICAgdGhpcy5fdHlwZU1hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy5fc3ViVHlwZU1hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7IC8vIEtlZXAgdHJhY2sgb2YgYWxsIGltcGxlbWVudGF0aW9ucyBieSBpbnRlcmZhY2UgbmFtZS5cblxuICAgIHRoaXMuX2ltcGxlbWVudGF0aW9uc01hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgICBmb3IgKHZhciBfaTggPSAwLCBfYXJyYXlGcm9tMiA9IGFycmF5RnJvbShhbGxSZWZlcmVuY2VkVHlwZXMpOyBfaTggPCBfYXJyYXlGcm9tMi5sZW5ndGg7IF9pOCsrKSB7XG4gICAgICB2YXIgbmFtZWRUeXBlID0gX2FycmF5RnJvbTJbX2k4XTtcblxuICAgICAgaWYgKG5hbWVkVHlwZSA9PSBudWxsKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgdHlwZU5hbWUgPSBuYW1lZFR5cGUubmFtZTtcbiAgICAgIHR5cGVOYW1lIHx8IGRldkFzc2VydCgwLCAnT25lIG9mIHRoZSBwcm92aWRlZCB0eXBlcyBmb3IgYnVpbGRpbmcgdGhlIFNjaGVtYSBpcyBtaXNzaW5nIGEgbmFtZS4nKTtcblxuICAgICAgaWYgKHRoaXMuX3R5cGVNYXBbdHlwZU5hbWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiU2NoZW1hIG11c3QgY29udGFpbiB1bmlxdWVseSBuYW1lZCB0eXBlcyBidXQgY29udGFpbnMgbXVsdGlwbGUgdHlwZXMgbmFtZWQgXFxcIlwiLmNvbmNhdCh0eXBlTmFtZSwgXCJcXFwiLlwiKSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX3R5cGVNYXBbdHlwZU5hbWVdID0gbmFtZWRUeXBlO1xuXG4gICAgICBpZiAoaXNJbnRlcmZhY2VUeXBlKG5hbWVkVHlwZSkpIHtcbiAgICAgICAgLy8gU3RvcmUgaW1wbGVtZW50YXRpb25zIGJ5IGludGVyZmFjZS5cbiAgICAgICAgZm9yICh2YXIgX2kxMCA9IDAsIF9uYW1lZFR5cGUkZ2V0SW50ZXJmYTIgPSBuYW1lZFR5cGUuZ2V0SW50ZXJmYWNlcygpOyBfaTEwIDwgX25hbWVkVHlwZSRnZXRJbnRlcmZhMi5sZW5ndGg7IF9pMTArKykge1xuICAgICAgICAgIHZhciBpZmFjZSA9IF9uYW1lZFR5cGUkZ2V0SW50ZXJmYTJbX2kxMF07XG5cbiAgICAgICAgICBpZiAoaXNJbnRlcmZhY2VUeXBlKGlmYWNlKSkge1xuICAgICAgICAgICAgdmFyIGltcGxlbWVudGF0aW9ucyA9IHRoaXMuX2ltcGxlbWVudGF0aW9uc01hcFtpZmFjZS5uYW1lXTtcblxuICAgICAgICAgICAgaWYgKGltcGxlbWVudGF0aW9ucyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIGltcGxlbWVudGF0aW9ucyA9IHRoaXMuX2ltcGxlbWVudGF0aW9uc01hcFtpZmFjZS5uYW1lXSA9IHtcbiAgICAgICAgICAgICAgICBvYmplY3RzOiBbXSxcbiAgICAgICAgICAgICAgICBpbnRlcmZhY2VzOiBbXVxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpbXBsZW1lbnRhdGlvbnMuaW50ZXJmYWNlcy5wdXNoKG5hbWVkVHlwZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0VHlwZShuYW1lZFR5cGUpKSB7XG4gICAgICAgIC8vIFN0b3JlIGltcGxlbWVudGF0aW9ucyBieSBvYmplY3RzLlxuICAgICAgICBmb3IgKHZhciBfaTEyID0gMCwgX25hbWVkVHlwZSRnZXRJbnRlcmZhNCA9IG5hbWVkVHlwZS5nZXRJbnRlcmZhY2VzKCk7IF9pMTIgPCBfbmFtZWRUeXBlJGdldEludGVyZmE0Lmxlbmd0aDsgX2kxMisrKSB7XG4gICAgICAgICAgdmFyIF9pZmFjZSA9IF9uYW1lZFR5cGUkZ2V0SW50ZXJmYTRbX2kxMl07XG5cbiAgICAgICAgICBpZiAoaXNJbnRlcmZhY2VUeXBlKF9pZmFjZSkpIHtcbiAgICAgICAgICAgIHZhciBfaW1wbGVtZW50YXRpb25zID0gdGhpcy5faW1wbGVtZW50YXRpb25zTWFwW19pZmFjZS5uYW1lXTtcblxuICAgICAgICAgICAgaWYgKF9pbXBsZW1lbnRhdGlvbnMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICBfaW1wbGVtZW50YXRpb25zID0gdGhpcy5faW1wbGVtZW50YXRpb25zTWFwW19pZmFjZS5uYW1lXSA9IHtcbiAgICAgICAgICAgICAgICBvYmplY3RzOiBbXSxcbiAgICAgICAgICAgICAgICBpbnRlcmZhY2VzOiBbXVxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBfaW1wbGVtZW50YXRpb25zLm9iamVjdHMucHVzaChuYW1lZFR5cGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBHcmFwaFFMU2NoZW1hLnByb3RvdHlwZTtcblxuICBfcHJvdG8uZ2V0UXVlcnlUeXBlID0gZnVuY3Rpb24gZ2V0UXVlcnlUeXBlKCkge1xuICAgIHJldHVybiB0aGlzLl9xdWVyeVR5cGU7XG4gIH07XG5cbiAgX3Byb3RvLmdldE11dGF0aW9uVHlwZSA9IGZ1bmN0aW9uIGdldE11dGF0aW9uVHlwZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fbXV0YXRpb25UeXBlO1xuICB9O1xuXG4gIF9wcm90by5nZXRTdWJzY3JpcHRpb25UeXBlID0gZnVuY3Rpb24gZ2V0U3Vic2NyaXB0aW9uVHlwZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fc3Vic2NyaXB0aW9uVHlwZTtcbiAgfTtcblxuICBfcHJvdG8uZ2V0VHlwZU1hcCA9IGZ1bmN0aW9uIGdldFR5cGVNYXAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3R5cGVNYXA7XG4gIH07XG5cbiAgX3Byb3RvLmdldFR5cGUgPSBmdW5jdGlvbiBnZXRUeXBlKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRUeXBlTWFwKClbbmFtZV07XG4gIH07XG5cbiAgX3Byb3RvLmdldFBvc3NpYmxlVHlwZXMgPSBmdW5jdGlvbiBnZXRQb3NzaWJsZVR5cGVzKGFic3RyYWN0VHlwZSkge1xuICAgIHJldHVybiBpc1VuaW9uVHlwZShhYnN0cmFjdFR5cGUpID8gYWJzdHJhY3RUeXBlLmdldFR5cGVzKCkgOiB0aGlzLmdldEltcGxlbWVudGF0aW9ucyhhYnN0cmFjdFR5cGUpLm9iamVjdHM7XG4gIH07XG5cbiAgX3Byb3RvLmdldEltcGxlbWVudGF0aW9ucyA9IGZ1bmN0aW9uIGdldEltcGxlbWVudGF0aW9ucyhpbnRlcmZhY2VUeXBlKSB7XG4gICAgdmFyIGltcGxlbWVudGF0aW9ucyA9IHRoaXMuX2ltcGxlbWVudGF0aW9uc01hcFtpbnRlcmZhY2VUeXBlLm5hbWVdO1xuICAgIHJldHVybiBpbXBsZW1lbnRhdGlvbnMgIT09IG51bGwgJiYgaW1wbGVtZW50YXRpb25zICE9PSB2b2lkIDAgPyBpbXBsZW1lbnRhdGlvbnMgOiB7XG4gICAgICBvYmplY3RzOiBbXSxcbiAgICAgIGludGVyZmFjZXM6IFtdXG4gICAgfTtcbiAgfSAvLyBAZGVwcmVjYXRlZDogdXNlIGlzU3ViVHlwZSBpbnN0ZWFkIC0gd2lsbCBiZSByZW1vdmVkIGluIHYxNi5cbiAgO1xuXG4gIF9wcm90by5pc1Bvc3NpYmxlVHlwZSA9IGZ1bmN0aW9uIGlzUG9zc2libGVUeXBlKGFic3RyYWN0VHlwZSwgcG9zc2libGVUeXBlKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNTdWJUeXBlKGFic3RyYWN0VHlwZSwgcG9zc2libGVUeXBlKTtcbiAgfTtcblxuICBfcHJvdG8uaXNTdWJUeXBlID0gZnVuY3Rpb24gaXNTdWJUeXBlKGFic3RyYWN0VHlwZSwgbWF5YmVTdWJUeXBlKSB7XG4gICAgdmFyIG1hcCA9IHRoaXMuX3N1YlR5cGVNYXBbYWJzdHJhY3RUeXBlLm5hbWVdO1xuXG4gICAgaWYgKG1hcCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBtYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gICAgICBpZiAoaXNVbmlvblR5cGUoYWJzdHJhY3RUeXBlKSkge1xuICAgICAgICBmb3IgKHZhciBfaTE0ID0gMCwgX2Fic3RyYWN0VHlwZSRnZXRUeXBlMiA9IGFic3RyYWN0VHlwZS5nZXRUeXBlcygpOyBfaTE0IDwgX2Fic3RyYWN0VHlwZSRnZXRUeXBlMi5sZW5ndGg7IF9pMTQrKykge1xuICAgICAgICAgIHZhciB0eXBlID0gX2Fic3RyYWN0VHlwZSRnZXRUeXBlMltfaTE0XTtcbiAgICAgICAgICBtYXBbdHlwZS5uYW1lXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBpbXBsZW1lbnRhdGlvbnMgPSB0aGlzLmdldEltcGxlbWVudGF0aW9ucyhhYnN0cmFjdFR5cGUpO1xuXG4gICAgICAgIGZvciAodmFyIF9pMTYgPSAwLCBfaW1wbGVtZW50YXRpb25zJG9iamUyID0gaW1wbGVtZW50YXRpb25zLm9iamVjdHM7IF9pMTYgPCBfaW1wbGVtZW50YXRpb25zJG9iamUyLmxlbmd0aDsgX2kxNisrKSB7XG4gICAgICAgICAgdmFyIF90eXBlID0gX2ltcGxlbWVudGF0aW9ucyRvYmplMltfaTE2XTtcbiAgICAgICAgICBtYXBbX3R5cGUubmFtZV0gPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgX2kxOCA9IDAsIF9pbXBsZW1lbnRhdGlvbnMkaW50ZTIgPSBpbXBsZW1lbnRhdGlvbnMuaW50ZXJmYWNlczsgX2kxOCA8IF9pbXBsZW1lbnRhdGlvbnMkaW50ZTIubGVuZ3RoOyBfaTE4KyspIHtcbiAgICAgICAgICB2YXIgX3R5cGUyID0gX2ltcGxlbWVudGF0aW9ucyRpbnRlMltfaTE4XTtcbiAgICAgICAgICBtYXBbX3R5cGUyLm5hbWVdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLl9zdWJUeXBlTWFwW2Fic3RyYWN0VHlwZS5uYW1lXSA9IG1hcDtcbiAgICB9XG5cbiAgICByZXR1cm4gbWFwW21heWJlU3ViVHlwZS5uYW1lXSAhPT0gdW5kZWZpbmVkO1xuICB9O1xuXG4gIF9wcm90by5nZXREaXJlY3RpdmVzID0gZnVuY3Rpb24gZ2V0RGlyZWN0aXZlcygpIHtcbiAgICByZXR1cm4gdGhpcy5fZGlyZWN0aXZlcztcbiAgfTtcblxuICBfcHJvdG8uZ2V0RGlyZWN0aXZlID0gZnVuY3Rpb24gZ2V0RGlyZWN0aXZlKG5hbWUpIHtcbiAgICByZXR1cm4gZmluZCh0aGlzLmdldERpcmVjdGl2ZXMoKSwgZnVuY3Rpb24gKGRpcmVjdGl2ZSkge1xuICAgICAgcmV0dXJuIGRpcmVjdGl2ZS5uYW1lID09PSBuYW1lO1xuICAgIH0pO1xuICB9O1xuXG4gIF9wcm90by50b0NvbmZpZyA9IGZ1bmN0aW9uIHRvQ29uZmlnKCkge1xuICAgIHZhciBfdGhpcyRleHRlbnNpb25BU1ROb2Q7XG5cbiAgICByZXR1cm4ge1xuICAgICAgZGVzY3JpcHRpb246IHRoaXMuZGVzY3JpcHRpb24sXG4gICAgICBxdWVyeTogdGhpcy5nZXRRdWVyeVR5cGUoKSxcbiAgICAgIG11dGF0aW9uOiB0aGlzLmdldE11dGF0aW9uVHlwZSgpLFxuICAgICAgc3Vic2NyaXB0aW9uOiB0aGlzLmdldFN1YnNjcmlwdGlvblR5cGUoKSxcbiAgICAgIHR5cGVzOiBvYmplY3RWYWx1ZXModGhpcy5nZXRUeXBlTWFwKCkpLFxuICAgICAgZGlyZWN0aXZlczogdGhpcy5nZXREaXJlY3RpdmVzKCkuc2xpY2UoKSxcbiAgICAgIGV4dGVuc2lvbnM6IHRoaXMuZXh0ZW5zaW9ucyxcbiAgICAgIGFzdE5vZGU6IHRoaXMuYXN0Tm9kZSxcbiAgICAgIGV4dGVuc2lvbkFTVE5vZGVzOiAoX3RoaXMkZXh0ZW5zaW9uQVNUTm9kID0gdGhpcy5leHRlbnNpb25BU1ROb2RlcykgIT09IG51bGwgJiYgX3RoaXMkZXh0ZW5zaW9uQVNUTm9kICE9PSB2b2lkIDAgPyBfdGhpcyRleHRlbnNpb25BU1ROb2QgOiBbXSxcbiAgICAgIGFzc3VtZVZhbGlkOiB0aGlzLl9fdmFsaWRhdGlvbkVycm9ycyAhPT0gdW5kZWZpbmVkXG4gICAgfTtcbiAgfSAvLyAkRmxvd0ZpeE1lW3Vuc3VwcG9ydGVkLXN5bnRheF0gRmxvdyBkb2Vzbid0IHN1cHBvcnQgY29tcHV0ZWQgcHJvcGVydGllcyB5ZXRcbiAgO1xuXG4gIF9jcmVhdGVDbGFzcyhHcmFwaFFMU2NoZW1hLCBbe1xuICAgIGtleTogU1lNQk9MX1RPX1NUUklOR19UQUcsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gJ0dyYXBoUUxTY2hlbWEnO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBHcmFwaFFMU2NoZW1hO1xufSgpO1xuXG5mdW5jdGlvbiBjb2xsZWN0UmVmZXJlbmNlZFR5cGVzKHR5cGUsIHR5cGVTZXQpIHtcbiAgdmFyIG5hbWVkVHlwZSA9IGdldE5hbWVkVHlwZSh0eXBlKTtcblxuICBpZiAoIXR5cGVTZXQuaGFzKG5hbWVkVHlwZSkpIHtcbiAgICB0eXBlU2V0LmFkZChuYW1lZFR5cGUpO1xuXG4gICAgaWYgKGlzVW5pb25UeXBlKG5hbWVkVHlwZSkpIHtcbiAgICAgIGZvciAodmFyIF9pMjAgPSAwLCBfbmFtZWRUeXBlJGdldFR5cGVzMiA9IG5hbWVkVHlwZS5nZXRUeXBlcygpOyBfaTIwIDwgX25hbWVkVHlwZSRnZXRUeXBlczIubGVuZ3RoOyBfaTIwKyspIHtcbiAgICAgICAgdmFyIG1lbWJlclR5cGUgPSBfbmFtZWRUeXBlJGdldFR5cGVzMltfaTIwXTtcbiAgICAgICAgY29sbGVjdFJlZmVyZW5jZWRUeXBlcyhtZW1iZXJUeXBlLCB0eXBlU2V0KTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzT2JqZWN0VHlwZShuYW1lZFR5cGUpIHx8IGlzSW50ZXJmYWNlVHlwZShuYW1lZFR5cGUpKSB7XG4gICAgICBmb3IgKHZhciBfaTIyID0gMCwgX25hbWVkVHlwZSRnZXRJbnRlcmZhNiA9IG5hbWVkVHlwZS5nZXRJbnRlcmZhY2VzKCk7IF9pMjIgPCBfbmFtZWRUeXBlJGdldEludGVyZmE2Lmxlbmd0aDsgX2kyMisrKSB7XG4gICAgICAgIHZhciBpbnRlcmZhY2VUeXBlID0gX25hbWVkVHlwZSRnZXRJbnRlcmZhNltfaTIyXTtcbiAgICAgICAgY29sbGVjdFJlZmVyZW5jZWRUeXBlcyhpbnRlcmZhY2VUeXBlLCB0eXBlU2V0KTtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgX2kyNCA9IDAsIF9vYmplY3RWYWx1ZXMyID0gb2JqZWN0VmFsdWVzKG5hbWVkVHlwZS5nZXRGaWVsZHMoKSk7IF9pMjQgPCBfb2JqZWN0VmFsdWVzMi5sZW5ndGg7IF9pMjQrKykge1xuICAgICAgICB2YXIgZmllbGQgPSBfb2JqZWN0VmFsdWVzMltfaTI0XTtcbiAgICAgICAgY29sbGVjdFJlZmVyZW5jZWRUeXBlcyhmaWVsZC50eXBlLCB0eXBlU2V0KTtcblxuICAgICAgICBmb3IgKHZhciBfaTI2ID0gMCwgX2ZpZWxkJGFyZ3MyID0gZmllbGQuYXJnczsgX2kyNiA8IF9maWVsZCRhcmdzMi5sZW5ndGg7IF9pMjYrKykge1xuICAgICAgICAgIHZhciBhcmcgPSBfZmllbGQkYXJnczJbX2kyNl07XG4gICAgICAgICAgY29sbGVjdFJlZmVyZW5jZWRUeXBlcyhhcmcudHlwZSwgdHlwZVNldCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzSW5wdXRPYmplY3RUeXBlKG5hbWVkVHlwZSkpIHtcbiAgICAgIGZvciAodmFyIF9pMjggPSAwLCBfb2JqZWN0VmFsdWVzNCA9IG9iamVjdFZhbHVlcyhuYW1lZFR5cGUuZ2V0RmllbGRzKCkpOyBfaTI4IDwgX29iamVjdFZhbHVlczQubGVuZ3RoOyBfaTI4KyspIHtcbiAgICAgICAgdmFyIF9maWVsZCA9IF9vYmplY3RWYWx1ZXM0W19pMjhdO1xuICAgICAgICBjb2xsZWN0UmVmZXJlbmNlZFR5cGVzKF9maWVsZC50eXBlLCB0eXBlU2V0KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHlwZVNldDtcbn1cbiIsImltcG9ydCBmaW5kIGZyb20gXCIuLi9wb2x5ZmlsbHMvZmluZC5tanNcIjtcbmltcG9ydCBvYmplY3RWYWx1ZXMgZnJvbSBcIi4uL3BvbHlmaWxscy9vYmplY3RWYWx1ZXMubWpzXCI7XG5pbXBvcnQgaW5zcGVjdCBmcm9tIFwiLi4vanN1dGlscy9pbnNwZWN0Lm1qc1wiO1xuaW1wb3J0IHsgR3JhcGhRTEVycm9yIH0gZnJvbSBcIi4uL2Vycm9yL0dyYXBoUUxFcnJvci5tanNcIjtcbmltcG9ydCB7IGxvY2F0ZWRFcnJvciB9IGZyb20gXCIuLi9lcnJvci9sb2NhdGVkRXJyb3IubWpzXCI7XG5pbXBvcnQgeyBpc1ZhbGlkTmFtZUVycm9yIH0gZnJvbSBcIi4uL3V0aWxpdGllcy9hc3NlcnRWYWxpZE5hbWUubWpzXCI7XG5pbXBvcnQgeyBpc0VxdWFsVHlwZSwgaXNUeXBlU3ViVHlwZU9mIH0gZnJvbSBcIi4uL3V0aWxpdGllcy90eXBlQ29tcGFyYXRvcnMubWpzXCI7XG5pbXBvcnQgeyBhc3NlcnRTY2hlbWEgfSBmcm9tIFwiLi9zY2hlbWEubWpzXCI7XG5pbXBvcnQgeyBpc0ludHJvc3BlY3Rpb25UeXBlIH0gZnJvbSBcIi4vaW50cm9zcGVjdGlvbi5tanNcIjtcbmltcG9ydCB7IGlzRGlyZWN0aXZlLCBHcmFwaFFMRGVwcmVjYXRlZERpcmVjdGl2ZSB9IGZyb20gXCIuL2RpcmVjdGl2ZXMubWpzXCI7XG5pbXBvcnQgeyBpc09iamVjdFR5cGUsIGlzSW50ZXJmYWNlVHlwZSwgaXNVbmlvblR5cGUsIGlzRW51bVR5cGUsIGlzSW5wdXRPYmplY3RUeXBlLCBpc05hbWVkVHlwZSwgaXNOb25OdWxsVHlwZSwgaXNJbnB1dFR5cGUsIGlzT3V0cHV0VHlwZSwgaXNSZXF1aXJlZEFyZ3VtZW50LCBpc1JlcXVpcmVkSW5wdXRGaWVsZCB9IGZyb20gXCIuL2RlZmluaXRpb24ubWpzXCI7XG4vKipcbiAqIEltcGxlbWVudHMgdGhlIFwiVHlwZSBWYWxpZGF0aW9uXCIgc3ViLXNlY3Rpb25zIG9mIHRoZSBzcGVjaWZpY2F0aW9uJ3NcbiAqIFwiVHlwZSBTeXN0ZW1cIiBzZWN0aW9uLlxuICpcbiAqIFZhbGlkYXRpb24gcnVucyBzeW5jaHJvbm91c2x5LCByZXR1cm5pbmcgYW4gYXJyYXkgb2YgZW5jb3VudGVyZWQgZXJyb3JzLCBvclxuICogYW4gZW1wdHkgYXJyYXkgaWYgbm8gZXJyb3JzIHdlcmUgZW5jb3VudGVyZWQgYW5kIHRoZSBTY2hlbWEgaXMgdmFsaWQuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlU2NoZW1hKHNjaGVtYSkge1xuICAvLyBGaXJzdCBjaGVjayB0byBlbnN1cmUgdGhlIHByb3ZpZGVkIHZhbHVlIGlzIGluIGZhY3QgYSBHcmFwaFFMU2NoZW1hLlxuICBhc3NlcnRTY2hlbWEoc2NoZW1hKTsgLy8gSWYgdGhpcyBTY2hlbWEgaGFzIGFscmVhZHkgYmVlbiB2YWxpZGF0ZWQsIHJldHVybiB0aGUgcHJldmlvdXMgcmVzdWx0cy5cblxuICBpZiAoc2NoZW1hLl9fdmFsaWRhdGlvbkVycm9ycykge1xuICAgIHJldHVybiBzY2hlbWEuX192YWxpZGF0aW9uRXJyb3JzO1xuICB9IC8vIFZhbGlkYXRlIHRoZSBzY2hlbWEsIHByb2R1Y2luZyBhIGxpc3Qgb2YgZXJyb3JzLlxuXG5cbiAgdmFyIGNvbnRleHQgPSBuZXcgU2NoZW1hVmFsaWRhdGlvbkNvbnRleHQoc2NoZW1hKTtcbiAgdmFsaWRhdGVSb290VHlwZXMoY29udGV4dCk7XG4gIHZhbGlkYXRlRGlyZWN0aXZlcyhjb250ZXh0KTtcbiAgdmFsaWRhdGVUeXBlcyhjb250ZXh0KTsgLy8gUGVyc2lzdCB0aGUgcmVzdWx0cyBvZiB2YWxpZGF0aW9uIGJlZm9yZSByZXR1cm5pbmcgdG8gZW5zdXJlIHZhbGlkYXRpb25cbiAgLy8gZG9lcyBub3QgcnVuIG11bHRpcGxlIHRpbWVzIGZvciB0aGlzIHNjaGVtYS5cblxuICB2YXIgZXJyb3JzID0gY29udGV4dC5nZXRFcnJvcnMoKTtcbiAgc2NoZW1hLl9fdmFsaWRhdGlvbkVycm9ycyA9IGVycm9ycztcbiAgcmV0dXJuIGVycm9ycztcbn1cbi8qKlxuICogVXRpbGl0eSBmdW5jdGlvbiB3aGljaCBhc3NlcnRzIGEgc2NoZW1hIGlzIHZhbGlkIGJ5IHRocm93aW5nIGFuIGVycm9yIGlmXG4gKiBpdCBpcyBpbnZhbGlkLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRWYWxpZFNjaGVtYShzY2hlbWEpIHtcbiAgdmFyIGVycm9ycyA9IHZhbGlkYXRlU2NoZW1hKHNjaGVtYSk7XG5cbiAgaWYgKGVycm9ycy5sZW5ndGggIT09IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JzLm1hcChmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBlcnJvci5tZXNzYWdlO1xuICAgIH0pLmpvaW4oJ1xcblxcbicpKTtcbiAgfVxufVxuXG52YXIgU2NoZW1hVmFsaWRhdGlvbkNvbnRleHQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTY2hlbWFWYWxpZGF0aW9uQ29udGV4dChzY2hlbWEpIHtcbiAgICB0aGlzLl9lcnJvcnMgPSBbXTtcbiAgICB0aGlzLnNjaGVtYSA9IHNjaGVtYTtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTY2hlbWFWYWxpZGF0aW9uQ29udGV4dC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlcG9ydEVycm9yID0gZnVuY3Rpb24gcmVwb3J0RXJyb3IobWVzc2FnZSwgbm9kZXMpIHtcbiAgICB2YXIgX25vZGVzID0gQXJyYXkuaXNBcnJheShub2RlcykgPyBub2Rlcy5maWx0ZXIoQm9vbGVhbikgOiBub2RlcztcblxuICAgIHRoaXMuYWRkRXJyb3IobmV3IEdyYXBoUUxFcnJvcihtZXNzYWdlLCBfbm9kZXMpKTtcbiAgfTtcblxuICBfcHJvdG8uYWRkRXJyb3IgPSBmdW5jdGlvbiBhZGRFcnJvcihlcnJvcikge1xuICAgIHRoaXMuX2Vycm9ycy5wdXNoKGVycm9yKTtcbiAgfTtcblxuICBfcHJvdG8uZ2V0RXJyb3JzID0gZnVuY3Rpb24gZ2V0RXJyb3JzKCkge1xuICAgIHJldHVybiB0aGlzLl9lcnJvcnM7XG4gIH07XG5cbiAgcmV0dXJuIFNjaGVtYVZhbGlkYXRpb25Db250ZXh0O1xufSgpO1xuXG5mdW5jdGlvbiB2YWxpZGF0ZVJvb3RUeXBlcyhjb250ZXh0KSB7XG4gIHZhciBzY2hlbWEgPSBjb250ZXh0LnNjaGVtYTtcbiAgdmFyIHF1ZXJ5VHlwZSA9IHNjaGVtYS5nZXRRdWVyeVR5cGUoKTtcblxuICBpZiAoIXF1ZXJ5VHlwZSkge1xuICAgIGNvbnRleHQucmVwb3J0RXJyb3IoJ1F1ZXJ5IHJvb3QgdHlwZSBtdXN0IGJlIHByb3ZpZGVkLicsIHNjaGVtYS5hc3ROb2RlKTtcbiAgfSBlbHNlIGlmICghaXNPYmplY3RUeXBlKHF1ZXJ5VHlwZSkpIHtcbiAgICB2YXIgX2dldE9wZXJhdGlvblR5cGVOb2RlO1xuXG4gICAgY29udGV4dC5yZXBvcnRFcnJvcihcIlF1ZXJ5IHJvb3QgdHlwZSBtdXN0IGJlIE9iamVjdCB0eXBlLCBpdCBjYW5ub3QgYmUgXCIuY29uY2F0KGluc3BlY3QocXVlcnlUeXBlKSwgXCIuXCIpLCAoX2dldE9wZXJhdGlvblR5cGVOb2RlID0gZ2V0T3BlcmF0aW9uVHlwZU5vZGUoc2NoZW1hLCAncXVlcnknKSkgIT09IG51bGwgJiYgX2dldE9wZXJhdGlvblR5cGVOb2RlICE9PSB2b2lkIDAgPyBfZ2V0T3BlcmF0aW9uVHlwZU5vZGUgOiBxdWVyeVR5cGUuYXN0Tm9kZSk7XG4gIH1cblxuICB2YXIgbXV0YXRpb25UeXBlID0gc2NoZW1hLmdldE11dGF0aW9uVHlwZSgpO1xuXG4gIGlmIChtdXRhdGlvblR5cGUgJiYgIWlzT2JqZWN0VHlwZShtdXRhdGlvblR5cGUpKSB7XG4gICAgdmFyIF9nZXRPcGVyYXRpb25UeXBlTm9kZTI7XG5cbiAgICBjb250ZXh0LnJlcG9ydEVycm9yKCdNdXRhdGlvbiByb290IHR5cGUgbXVzdCBiZSBPYmplY3QgdHlwZSBpZiBwcm92aWRlZCwgaXQgY2Fubm90IGJlICcgKyBcIlwiLmNvbmNhdChpbnNwZWN0KG11dGF0aW9uVHlwZSksIFwiLlwiKSwgKF9nZXRPcGVyYXRpb25UeXBlTm9kZTIgPSBnZXRPcGVyYXRpb25UeXBlTm9kZShzY2hlbWEsICdtdXRhdGlvbicpKSAhPT0gbnVsbCAmJiBfZ2V0T3BlcmF0aW9uVHlwZU5vZGUyICE9PSB2b2lkIDAgPyBfZ2V0T3BlcmF0aW9uVHlwZU5vZGUyIDogbXV0YXRpb25UeXBlLmFzdE5vZGUpO1xuICB9XG5cbiAgdmFyIHN1YnNjcmlwdGlvblR5cGUgPSBzY2hlbWEuZ2V0U3Vic2NyaXB0aW9uVHlwZSgpO1xuXG4gIGlmIChzdWJzY3JpcHRpb25UeXBlICYmICFpc09iamVjdFR5cGUoc3Vic2NyaXB0aW9uVHlwZSkpIHtcbiAgICB2YXIgX2dldE9wZXJhdGlvblR5cGVOb2RlMztcblxuICAgIGNvbnRleHQucmVwb3J0RXJyb3IoJ1N1YnNjcmlwdGlvbiByb290IHR5cGUgbXVzdCBiZSBPYmplY3QgdHlwZSBpZiBwcm92aWRlZCwgaXQgY2Fubm90IGJlICcgKyBcIlwiLmNvbmNhdChpbnNwZWN0KHN1YnNjcmlwdGlvblR5cGUpLCBcIi5cIiksIChfZ2V0T3BlcmF0aW9uVHlwZU5vZGUzID0gZ2V0T3BlcmF0aW9uVHlwZU5vZGUoc2NoZW1hLCAnc3Vic2NyaXB0aW9uJykpICE9PSBudWxsICYmIF9nZXRPcGVyYXRpb25UeXBlTm9kZTMgIT09IHZvaWQgMCA/IF9nZXRPcGVyYXRpb25UeXBlTm9kZTMgOiBzdWJzY3JpcHRpb25UeXBlLmFzdE5vZGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldE9wZXJhdGlvblR5cGVOb2RlKHNjaGVtYSwgb3BlcmF0aW9uKSB7XG4gIHZhciBvcGVyYXRpb25Ob2RlcyA9IGdldEFsbFN1Yk5vZGVzKHNjaGVtYSwgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS5vcGVyYXRpb25UeXBlcztcbiAgfSk7XG5cbiAgZm9yICh2YXIgX2kyID0gMDsgX2kyIDwgb3BlcmF0aW9uTm9kZXMubGVuZ3RoOyBfaTIrKykge1xuICAgIHZhciBub2RlID0gb3BlcmF0aW9uTm9kZXNbX2kyXTtcblxuICAgIGlmIChub2RlLm9wZXJhdGlvbiA9PT0gb3BlcmF0aW9uKSB7XG4gICAgICByZXR1cm4gbm9kZS50eXBlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlRGlyZWN0aXZlcyhjb250ZXh0KSB7XG4gIGZvciAodmFyIF9pNCA9IDAsIF9jb250ZXh0JHNjaGVtYSRnZXREaTIgPSBjb250ZXh0LnNjaGVtYS5nZXREaXJlY3RpdmVzKCk7IF9pNCA8IF9jb250ZXh0JHNjaGVtYSRnZXREaTIubGVuZ3RoOyBfaTQrKykge1xuICAgIHZhciBkaXJlY3RpdmUgPSBfY29udGV4dCRzY2hlbWEkZ2V0RGkyW19pNF07XG5cbiAgICAvLyBFbnN1cmUgYWxsIGRpcmVjdGl2ZXMgYXJlIGluIGZhY3QgR3JhcGhRTCBkaXJlY3RpdmVzLlxuICAgIGlmICghaXNEaXJlY3RpdmUoZGlyZWN0aXZlKSkge1xuICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcIkV4cGVjdGVkIGRpcmVjdGl2ZSBidXQgZ290OiBcIi5jb25jYXQoaW5zcGVjdChkaXJlY3RpdmUpLCBcIi5cIiksIGRpcmVjdGl2ZSA9PT0gbnVsbCB8fCBkaXJlY3RpdmUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRpcmVjdGl2ZS5hc3ROb2RlKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH0gLy8gRW5zdXJlIHRoZXkgYXJlIG5hbWVkIGNvcnJlY3RseS5cblxuXG4gICAgdmFsaWRhdGVOYW1lKGNvbnRleHQsIGRpcmVjdGl2ZSk7IC8vIFRPRE86IEVuc3VyZSBwcm9wZXIgbG9jYXRpb25zLlxuICAgIC8vIEVuc3VyZSB0aGUgYXJndW1lbnRzIGFyZSB2YWxpZC5cblxuICAgIGZvciAodmFyIF9pNiA9IDAsIF9kaXJlY3RpdmUkYXJnczIgPSBkaXJlY3RpdmUuYXJnczsgX2k2IDwgX2RpcmVjdGl2ZSRhcmdzMi5sZW5ndGg7IF9pNisrKSB7XG4gICAgICB2YXIgYXJnID0gX2RpcmVjdGl2ZSRhcmdzMltfaTZdO1xuICAgICAgLy8gRW5zdXJlIHRoZXkgYXJlIG5hbWVkIGNvcnJlY3RseS5cbiAgICAgIHZhbGlkYXRlTmFtZShjb250ZXh0LCBhcmcpOyAvLyBFbnN1cmUgdGhlIHR5cGUgaXMgYW4gaW5wdXQgdHlwZS5cblxuICAgICAgaWYgKCFpc0lucHV0VHlwZShhcmcudHlwZSkpIHtcbiAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcIlRoZSB0eXBlIG9mIEBcIi5jb25jYXQoZGlyZWN0aXZlLm5hbWUsIFwiKFwiKS5jb25jYXQoYXJnLm5hbWUsIFwiOikgbXVzdCBiZSBJbnB1dCBUeXBlIFwiKSArIFwiYnV0IGdvdDogXCIuY29uY2F0KGluc3BlY3QoYXJnLnR5cGUpLCBcIi5cIiksIGFyZy5hc3ROb2RlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzUmVxdWlyZWRBcmd1bWVudChhcmcpICYmIGFyZy5kZXByZWNhdGlvblJlYXNvbiAhPSBudWxsKSB7XG4gICAgICAgIHZhciBfYXJnJGFzdE5vZGU7XG5cbiAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcIlJlcXVpcmVkIGFyZ3VtZW50IEBcIi5jb25jYXQoZGlyZWN0aXZlLm5hbWUsIFwiKFwiKS5jb25jYXQoYXJnLm5hbWUsIFwiOikgY2Fubm90IGJlIGRlcHJlY2F0ZWQuXCIpLCBbZ2V0RGVwcmVjYXRlZERpcmVjdGl2ZU5vZGUoYXJnLmFzdE5vZGUpLCAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAoVE9ETyBuZWVkIHRvIHdyaXRlIGNvdmVyYWdlIHRlc3RzKVxuICAgICAgICAoX2FyZyRhc3ROb2RlID0gYXJnLmFzdE5vZGUpID09PSBudWxsIHx8IF9hcmckYXN0Tm9kZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2FyZyRhc3ROb2RlLnR5cGVdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVOYW1lKGNvbnRleHQsIG5vZGUpIHtcbiAgLy8gRW5zdXJlIG5hbWVzIGFyZSB2YWxpZCwgaG93ZXZlciBpbnRyb3NwZWN0aW9uIHR5cGVzIG9wdCBvdXQuXG4gIHZhciBlcnJvciA9IGlzVmFsaWROYW1lRXJyb3Iobm9kZS5uYW1lKTtcblxuICBpZiAoZXJyb3IpIHtcbiAgICBjb250ZXh0LmFkZEVycm9yKGxvY2F0ZWRFcnJvcihlcnJvciwgbm9kZS5hc3ROb2RlKSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVUeXBlcyhjb250ZXh0KSB7XG4gIHZhciB2YWxpZGF0ZUlucHV0T2JqZWN0Q2lyY3VsYXJSZWZzID0gY3JlYXRlSW5wdXRPYmplY3RDaXJjdWxhclJlZnNWYWxpZGF0b3IoY29udGV4dCk7XG4gIHZhciB0eXBlTWFwID0gY29udGV4dC5zY2hlbWEuZ2V0VHlwZU1hcCgpO1xuXG4gIGZvciAodmFyIF9pOCA9IDAsIF9vYmplY3RWYWx1ZXMyID0gb2JqZWN0VmFsdWVzKHR5cGVNYXApOyBfaTggPCBfb2JqZWN0VmFsdWVzMi5sZW5ndGg7IF9pOCsrKSB7XG4gICAgdmFyIHR5cGUgPSBfb2JqZWN0VmFsdWVzMltfaThdO1xuXG4gICAgLy8gRW5zdXJlIGFsbCBwcm92aWRlZCB0eXBlcyBhcmUgaW4gZmFjdCBHcmFwaFFMIHR5cGUuXG4gICAgaWYgKCFpc05hbWVkVHlwZSh0eXBlKSkge1xuICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcIkV4cGVjdGVkIEdyYXBoUUwgbmFtZWQgdHlwZSBidXQgZ290OiBcIi5jb25jYXQoaW5zcGVjdCh0eXBlKSwgXCIuXCIpLCB0eXBlLmFzdE5vZGUpO1xuICAgICAgY29udGludWU7XG4gICAgfSAvLyBFbnN1cmUgaXQgaXMgbmFtZWQgY29ycmVjdGx5IChleGNsdWRpbmcgaW50cm9zcGVjdGlvbiB0eXBlcykuXG5cblxuICAgIGlmICghaXNJbnRyb3NwZWN0aW9uVHlwZSh0eXBlKSkge1xuICAgICAgdmFsaWRhdGVOYW1lKGNvbnRleHQsIHR5cGUpO1xuICAgIH1cblxuICAgIGlmIChpc09iamVjdFR5cGUodHlwZSkpIHtcbiAgICAgIC8vIEVuc3VyZSBmaWVsZHMgYXJlIHZhbGlkXG4gICAgICB2YWxpZGF0ZUZpZWxkcyhjb250ZXh0LCB0eXBlKTsgLy8gRW5zdXJlIG9iamVjdHMgaW1wbGVtZW50IHRoZSBpbnRlcmZhY2VzIHRoZXkgY2xhaW0gdG8uXG5cbiAgICAgIHZhbGlkYXRlSW50ZXJmYWNlcyhjb250ZXh0LCB0eXBlKTtcbiAgICB9IGVsc2UgaWYgKGlzSW50ZXJmYWNlVHlwZSh0eXBlKSkge1xuICAgICAgLy8gRW5zdXJlIGZpZWxkcyBhcmUgdmFsaWQuXG4gICAgICB2YWxpZGF0ZUZpZWxkcyhjb250ZXh0LCB0eXBlKTsgLy8gRW5zdXJlIGludGVyZmFjZXMgaW1wbGVtZW50IHRoZSBpbnRlcmZhY2VzIHRoZXkgY2xhaW0gdG8uXG5cbiAgICAgIHZhbGlkYXRlSW50ZXJmYWNlcyhjb250ZXh0LCB0eXBlKTtcbiAgICB9IGVsc2UgaWYgKGlzVW5pb25UeXBlKHR5cGUpKSB7XG4gICAgICAvLyBFbnN1cmUgVW5pb25zIGluY2x1ZGUgdmFsaWQgbWVtYmVyIHR5cGVzLlxuICAgICAgdmFsaWRhdGVVbmlvbk1lbWJlcnMoY29udGV4dCwgdHlwZSk7XG4gICAgfSBlbHNlIGlmIChpc0VudW1UeXBlKHR5cGUpKSB7XG4gICAgICAvLyBFbnN1cmUgRW51bXMgaGF2ZSB2YWxpZCB2YWx1ZXMuXG4gICAgICB2YWxpZGF0ZUVudW1WYWx1ZXMoY29udGV4dCwgdHlwZSk7XG4gICAgfSBlbHNlIGlmIChpc0lucHV0T2JqZWN0VHlwZSh0eXBlKSkge1xuICAgICAgLy8gRW5zdXJlIElucHV0IE9iamVjdCBmaWVsZHMgYXJlIHZhbGlkLlxuICAgICAgdmFsaWRhdGVJbnB1dEZpZWxkcyhjb250ZXh0LCB0eXBlKTsgLy8gRW5zdXJlIElucHV0IE9iamVjdHMgZG8gbm90IGNvbnRhaW4gbm9uLW51bGxhYmxlIGNpcmN1bGFyIHJlZmVyZW5jZXNcblxuICAgICAgdmFsaWRhdGVJbnB1dE9iamVjdENpcmN1bGFyUmVmcyh0eXBlKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVGaWVsZHMoY29udGV4dCwgdHlwZSkge1xuICB2YXIgZmllbGRzID0gb2JqZWN0VmFsdWVzKHR5cGUuZ2V0RmllbGRzKCkpOyAvLyBPYmplY3RzIGFuZCBJbnRlcmZhY2VzIGJvdGggbXVzdCBkZWZpbmUgb25lIG9yIG1vcmUgZmllbGRzLlxuXG4gIGlmIChmaWVsZHMubGVuZ3RoID09PSAwKSB7XG4gICAgY29udGV4dC5yZXBvcnRFcnJvcihcIlR5cGUgXCIuY29uY2F0KHR5cGUubmFtZSwgXCIgbXVzdCBkZWZpbmUgb25lIG9yIG1vcmUgZmllbGRzLlwiKSwgZ2V0QWxsTm9kZXModHlwZSkpO1xuICB9XG5cbiAgZm9yICh2YXIgX2kxMCA9IDA7IF9pMTAgPCBmaWVsZHMubGVuZ3RoOyBfaTEwKyspIHtcbiAgICB2YXIgZmllbGQgPSBmaWVsZHNbX2kxMF07XG4gICAgLy8gRW5zdXJlIHRoZXkgYXJlIG5hbWVkIGNvcnJlY3RseS5cbiAgICB2YWxpZGF0ZU5hbWUoY29udGV4dCwgZmllbGQpOyAvLyBFbnN1cmUgdGhlIHR5cGUgaXMgYW4gb3V0cHV0IHR5cGVcblxuICAgIGlmICghaXNPdXRwdXRUeXBlKGZpZWxkLnR5cGUpKSB7XG4gICAgICB2YXIgX2ZpZWxkJGFzdE5vZGU7XG5cbiAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXCJUaGUgdHlwZSBvZiBcIi5jb25jYXQodHlwZS5uYW1lLCBcIi5cIikuY29uY2F0KGZpZWxkLm5hbWUsIFwiIG11c3QgYmUgT3V0cHV0IFR5cGUgXCIpICsgXCJidXQgZ290OiBcIi5jb25jYXQoaW5zcGVjdChmaWVsZC50eXBlKSwgXCIuXCIpLCAoX2ZpZWxkJGFzdE5vZGUgPSBmaWVsZC5hc3ROb2RlKSA9PT0gbnVsbCB8fCBfZmllbGQkYXN0Tm9kZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2ZpZWxkJGFzdE5vZGUudHlwZSk7XG4gICAgfSAvLyBFbnN1cmUgdGhlIGFyZ3VtZW50cyBhcmUgdmFsaWRcblxuXG4gICAgZm9yICh2YXIgX2kxMiA9IDAsIF9maWVsZCRhcmdzMiA9IGZpZWxkLmFyZ3M7IF9pMTIgPCBfZmllbGQkYXJnczIubGVuZ3RoOyBfaTEyKyspIHtcbiAgICAgIHZhciBhcmcgPSBfZmllbGQkYXJnczJbX2kxMl07XG4gICAgICB2YXIgYXJnTmFtZSA9IGFyZy5uYW1lOyAvLyBFbnN1cmUgdGhleSBhcmUgbmFtZWQgY29ycmVjdGx5LlxuXG4gICAgICB2YWxpZGF0ZU5hbWUoY29udGV4dCwgYXJnKTsgLy8gRW5zdXJlIHRoZSB0eXBlIGlzIGFuIGlucHV0IHR5cGVcblxuICAgICAgaWYgKCFpc0lucHV0VHlwZShhcmcudHlwZSkpIHtcbiAgICAgICAgdmFyIF9hcmckYXN0Tm9kZTI7XG5cbiAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcIlRoZSB0eXBlIG9mIFwiLmNvbmNhdCh0eXBlLm5hbWUsIFwiLlwiKS5jb25jYXQoZmllbGQubmFtZSwgXCIoXCIpLmNvbmNhdChhcmdOYW1lLCBcIjopIG11c3QgYmUgSW5wdXQgXCIpICsgXCJUeXBlIGJ1dCBnb3Q6IFwiLmNvbmNhdChpbnNwZWN0KGFyZy50eXBlKSwgXCIuXCIpLCAoX2FyZyRhc3ROb2RlMiA9IGFyZy5hc3ROb2RlKSA9PT0gbnVsbCB8fCBfYXJnJGFzdE5vZGUyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYXJnJGFzdE5vZGUyLnR5cGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNSZXF1aXJlZEFyZ3VtZW50KGFyZykgJiYgYXJnLmRlcHJlY2F0aW9uUmVhc29uICE9IG51bGwpIHtcbiAgICAgICAgdmFyIF9hcmckYXN0Tm9kZTM7XG5cbiAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcIlJlcXVpcmVkIGFyZ3VtZW50IFwiLmNvbmNhdCh0eXBlLm5hbWUsIFwiLlwiKS5jb25jYXQoZmllbGQubmFtZSwgXCIoXCIpLmNvbmNhdChhcmdOYW1lLCBcIjopIGNhbm5vdCBiZSBkZXByZWNhdGVkLlwiKSwgW2dldERlcHJlY2F0ZWREaXJlY3RpdmVOb2RlKGFyZy5hc3ROb2RlKSwgLy8gaXN0YW5idWwgaWdub3JlIG5leHQgKFRPRE8gbmVlZCB0byB3cml0ZSBjb3ZlcmFnZSB0ZXN0cylcbiAgICAgICAgKF9hcmckYXN0Tm9kZTMgPSBhcmcuYXN0Tm9kZSkgPT09IG51bGwgfHwgX2FyZyRhc3ROb2RlMyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2FyZyRhc3ROb2RlMy50eXBlXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlSW50ZXJmYWNlcyhjb250ZXh0LCB0eXBlKSB7XG4gIHZhciBpZmFjZVR5cGVOYW1lcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgZm9yICh2YXIgX2kxNCA9IDAsIF90eXBlJGdldEludGVyZmFjZXMyID0gdHlwZS5nZXRJbnRlcmZhY2VzKCk7IF9pMTQgPCBfdHlwZSRnZXRJbnRlcmZhY2VzMi5sZW5ndGg7IF9pMTQrKykge1xuICAgIHZhciBpZmFjZSA9IF90eXBlJGdldEludGVyZmFjZXMyW19pMTRdO1xuXG4gICAgaWYgKCFpc0ludGVyZmFjZVR5cGUoaWZhY2UpKSB7XG4gICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFwiVHlwZSBcIi5jb25jYXQoaW5zcGVjdCh0eXBlKSwgXCIgbXVzdCBvbmx5IGltcGxlbWVudCBJbnRlcmZhY2UgdHlwZXMsIFwiKSArIFwiaXQgY2Fubm90IGltcGxlbWVudCBcIi5jb25jYXQoaW5zcGVjdChpZmFjZSksIFwiLlwiKSwgZ2V0QWxsSW1wbGVtZW50c0ludGVyZmFjZU5vZGVzKHR5cGUsIGlmYWNlKSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAodHlwZSA9PT0gaWZhY2UpIHtcbiAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXCJUeXBlIFwiLmNvbmNhdCh0eXBlLm5hbWUsIFwiIGNhbm5vdCBpbXBsZW1lbnQgaXRzZWxmIGJlY2F1c2UgaXQgd291bGQgY3JlYXRlIGEgY2lyY3VsYXIgcmVmZXJlbmNlLlwiKSwgZ2V0QWxsSW1wbGVtZW50c0ludGVyZmFjZU5vZGVzKHR5cGUsIGlmYWNlKSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAoaWZhY2VUeXBlTmFtZXNbaWZhY2UubmFtZV0pIHtcbiAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXCJUeXBlIFwiLmNvbmNhdCh0eXBlLm5hbWUsIFwiIGNhbiBvbmx5IGltcGxlbWVudCBcIikuY29uY2F0KGlmYWNlLm5hbWUsIFwiIG9uY2UuXCIpLCBnZXRBbGxJbXBsZW1lbnRzSW50ZXJmYWNlTm9kZXModHlwZSwgaWZhY2UpKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmYWNlVHlwZU5hbWVzW2lmYWNlLm5hbWVdID0gdHJ1ZTtcbiAgICB2YWxpZGF0ZVR5cGVJbXBsZW1lbnRzQW5jZXN0b3JzKGNvbnRleHQsIHR5cGUsIGlmYWNlKTtcbiAgICB2YWxpZGF0ZVR5cGVJbXBsZW1lbnRzSW50ZXJmYWNlKGNvbnRleHQsIHR5cGUsIGlmYWNlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZVR5cGVJbXBsZW1lbnRzSW50ZXJmYWNlKGNvbnRleHQsIHR5cGUsIGlmYWNlKSB7XG4gIHZhciB0eXBlRmllbGRNYXAgPSB0eXBlLmdldEZpZWxkcygpOyAvLyBBc3NlcnQgZWFjaCBpbnRlcmZhY2UgZmllbGQgaXMgaW1wbGVtZW50ZWQuXG5cbiAgZm9yICh2YXIgX2kxNiA9IDAsIF9vYmplY3RWYWx1ZXM0ID0gb2JqZWN0VmFsdWVzKGlmYWNlLmdldEZpZWxkcygpKTsgX2kxNiA8IF9vYmplY3RWYWx1ZXM0Lmxlbmd0aDsgX2kxNisrKSB7XG4gICAgdmFyIGlmYWNlRmllbGQgPSBfb2JqZWN0VmFsdWVzNFtfaTE2XTtcbiAgICB2YXIgZmllbGROYW1lID0gaWZhY2VGaWVsZC5uYW1lO1xuICAgIHZhciB0eXBlRmllbGQgPSB0eXBlRmllbGRNYXBbZmllbGROYW1lXTsgLy8gQXNzZXJ0IGludGVyZmFjZSBmaWVsZCBleGlzdHMgb24gdHlwZS5cblxuICAgIGlmICghdHlwZUZpZWxkKSB7XG4gICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFwiSW50ZXJmYWNlIGZpZWxkIFwiLmNvbmNhdChpZmFjZS5uYW1lLCBcIi5cIikuY29uY2F0KGZpZWxkTmFtZSwgXCIgZXhwZWN0ZWQgYnV0IFwiKS5jb25jYXQodHlwZS5uYW1lLCBcIiBkb2VzIG5vdCBwcm92aWRlIGl0LlwiKSwgW2lmYWNlRmllbGQuYXN0Tm9kZV0uY29uY2F0KGdldEFsbE5vZGVzKHR5cGUpKSk7XG4gICAgICBjb250aW51ZTtcbiAgICB9IC8vIEFzc2VydCBpbnRlcmZhY2UgZmllbGQgdHlwZSBpcyBzYXRpc2ZpZWQgYnkgdHlwZSBmaWVsZCB0eXBlLCBieSBiZWluZ1xuICAgIC8vIGEgdmFsaWQgc3VidHlwZS4gKGNvdmFyaWFudClcblxuXG4gICAgaWYgKCFpc1R5cGVTdWJUeXBlT2YoY29udGV4dC5zY2hlbWEsIHR5cGVGaWVsZC50eXBlLCBpZmFjZUZpZWxkLnR5cGUpKSB7XG4gICAgICB2YXIgX2lmYWNlRmllbGQkYXN0Tm9kZSwgX3R5cGVGaWVsZCRhc3ROb2RlO1xuXG4gICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFwiSW50ZXJmYWNlIGZpZWxkIFwiLmNvbmNhdChpZmFjZS5uYW1lLCBcIi5cIikuY29uY2F0KGZpZWxkTmFtZSwgXCIgZXhwZWN0cyB0eXBlIFwiKSArIFwiXCIuY29uY2F0KGluc3BlY3QoaWZhY2VGaWVsZC50eXBlKSwgXCIgYnV0IFwiKS5jb25jYXQodHlwZS5uYW1lLCBcIi5cIikuY29uY2F0KGZpZWxkTmFtZSwgXCIgXCIpICsgXCJpcyB0eXBlIFwiLmNvbmNhdChpbnNwZWN0KHR5cGVGaWVsZC50eXBlKSwgXCIuXCIpLCBbLy8gaXN0YW5idWwgaWdub3JlIG5leHQgKFRPRE8gbmVlZCB0byB3cml0ZSBjb3ZlcmFnZSB0ZXN0cylcbiAgICAgIChfaWZhY2VGaWVsZCRhc3ROb2RlID0gaWZhY2VGaWVsZC5hc3ROb2RlKSA9PT0gbnVsbCB8fCBfaWZhY2VGaWVsZCRhc3ROb2RlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfaWZhY2VGaWVsZCRhc3ROb2RlLnR5cGUsIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0IChUT0RPIG5lZWQgdG8gd3JpdGUgY292ZXJhZ2UgdGVzdHMpXG4gICAgICAoX3R5cGVGaWVsZCRhc3ROb2RlID0gdHlwZUZpZWxkLmFzdE5vZGUpID09PSBudWxsIHx8IF90eXBlRmllbGQkYXN0Tm9kZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3R5cGVGaWVsZCRhc3ROb2RlLnR5cGVdKTtcbiAgICB9IC8vIEFzc2VydCBlYWNoIGludGVyZmFjZSBmaWVsZCBhcmcgaXMgaW1wbGVtZW50ZWQuXG5cblxuICAgIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKF9pMTgsIF9pZmFjZUZpZWxkJGFyZ3MyKSB7XG4gICAgICB2YXIgaWZhY2VBcmcgPSBfaWZhY2VGaWVsZCRhcmdzMltfaTE4XTtcbiAgICAgIHZhciBhcmdOYW1lID0gaWZhY2VBcmcubmFtZTtcbiAgICAgIHZhciB0eXBlQXJnID0gZmluZCh0eXBlRmllbGQuYXJncywgZnVuY3Rpb24gKGFyZykge1xuICAgICAgICByZXR1cm4gYXJnLm5hbWUgPT09IGFyZ05hbWU7XG4gICAgICB9KTsgLy8gQXNzZXJ0IGludGVyZmFjZSBmaWVsZCBhcmcgZXhpc3RzIG9uIG9iamVjdCBmaWVsZC5cblxuICAgICAgaWYgKCF0eXBlQXJnKSB7XG4gICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXCJJbnRlcmZhY2UgZmllbGQgYXJndW1lbnQgXCIuY29uY2F0KGlmYWNlLm5hbWUsIFwiLlwiKS5jb25jYXQoZmllbGROYW1lLCBcIihcIikuY29uY2F0KGFyZ05hbWUsIFwiOikgZXhwZWN0ZWQgYnV0IFwiKS5jb25jYXQodHlwZS5uYW1lLCBcIi5cIikuY29uY2F0KGZpZWxkTmFtZSwgXCIgZG9lcyBub3QgcHJvdmlkZSBpdC5cIiksIFtpZmFjZUFyZy5hc3ROb2RlLCB0eXBlRmllbGQuYXN0Tm9kZV0pO1xuICAgICAgICByZXR1cm4gXCJjb250aW51ZVwiO1xuICAgICAgfSAvLyBBc3NlcnQgaW50ZXJmYWNlIGZpZWxkIGFyZyB0eXBlIG1hdGNoZXMgb2JqZWN0IGZpZWxkIGFyZyB0eXBlLlxuICAgICAgLy8gKGludmFyaWFudClcbiAgICAgIC8vIFRPRE86IGNoYW5nZSB0byBjb250cmF2YXJpYW50P1xuXG5cbiAgICAgIGlmICghaXNFcXVhbFR5cGUoaWZhY2VBcmcudHlwZSwgdHlwZUFyZy50eXBlKSkge1xuICAgICAgICB2YXIgX2lmYWNlQXJnJGFzdE5vZGUsIF90eXBlQXJnJGFzdE5vZGU7XG5cbiAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcIkludGVyZmFjZSBmaWVsZCBhcmd1bWVudCBcIi5jb25jYXQoaWZhY2UubmFtZSwgXCIuXCIpLmNvbmNhdChmaWVsZE5hbWUsIFwiKFwiKS5jb25jYXQoYXJnTmFtZSwgXCI6KSBcIikgKyBcImV4cGVjdHMgdHlwZSBcIi5jb25jYXQoaW5zcGVjdChpZmFjZUFyZy50eXBlKSwgXCIgYnV0IFwiKSArIFwiXCIuY29uY2F0KHR5cGUubmFtZSwgXCIuXCIpLmNvbmNhdChmaWVsZE5hbWUsIFwiKFwiKS5jb25jYXQoYXJnTmFtZSwgXCI6KSBpcyB0eXBlIFwiKSArIFwiXCIuY29uY2F0KGluc3BlY3QodHlwZUFyZy50eXBlKSwgXCIuXCIpLCBbLy8gaXN0YW5idWwgaWdub3JlIG5leHQgKFRPRE8gbmVlZCB0byB3cml0ZSBjb3ZlcmFnZSB0ZXN0cylcbiAgICAgICAgKF9pZmFjZUFyZyRhc3ROb2RlID0gaWZhY2VBcmcuYXN0Tm9kZSkgPT09IG51bGwgfHwgX2lmYWNlQXJnJGFzdE5vZGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9pZmFjZUFyZyRhc3ROb2RlLnR5cGUsIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0IChUT0RPIG5lZWQgdG8gd3JpdGUgY292ZXJhZ2UgdGVzdHMpXG4gICAgICAgIChfdHlwZUFyZyRhc3ROb2RlID0gdHlwZUFyZy5hc3ROb2RlKSA9PT0gbnVsbCB8fCBfdHlwZUFyZyRhc3ROb2RlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdHlwZUFyZyRhc3ROb2RlLnR5cGVdKTtcbiAgICAgIH0gLy8gVE9ETzogdmFsaWRhdGUgZGVmYXVsdCB2YWx1ZXM/XG5cbiAgICB9O1xuXG4gICAgZm9yICh2YXIgX2kxOCA9IDAsIF9pZmFjZUZpZWxkJGFyZ3MyID0gaWZhY2VGaWVsZC5hcmdzOyBfaTE4IDwgX2lmYWNlRmllbGQkYXJnczIubGVuZ3RoOyBfaTE4KyspIHtcbiAgICAgIHZhciBfcmV0ID0gX2xvb3AoX2kxOCwgX2lmYWNlRmllbGQkYXJnczIpO1xuXG4gICAgICBpZiAoX3JldCA9PT0gXCJjb250aW51ZVwiKSBjb250aW51ZTtcbiAgICB9IC8vIEFzc2VydCBhZGRpdGlvbmFsIGFyZ3VtZW50cyBtdXN0IG5vdCBiZSByZXF1aXJlZC5cblxuXG4gICAgdmFyIF9sb29wMiA9IGZ1bmN0aW9uIF9sb29wMihfaTIwLCBfdHlwZUZpZWxkJGFyZ3MyKSB7XG4gICAgICB2YXIgdHlwZUFyZyA9IF90eXBlRmllbGQkYXJnczJbX2kyMF07XG4gICAgICB2YXIgYXJnTmFtZSA9IHR5cGVBcmcubmFtZTtcbiAgICAgIHZhciBpZmFjZUFyZyA9IGZpbmQoaWZhY2VGaWVsZC5hcmdzLCBmdW5jdGlvbiAoYXJnKSB7XG4gICAgICAgIHJldHVybiBhcmcubmFtZSA9PT0gYXJnTmFtZTtcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoIWlmYWNlQXJnICYmIGlzUmVxdWlyZWRBcmd1bWVudCh0eXBlQXJnKSkge1xuICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFwiT2JqZWN0IGZpZWxkIFwiLmNvbmNhdCh0eXBlLm5hbWUsIFwiLlwiKS5jb25jYXQoZmllbGROYW1lLCBcIiBpbmNsdWRlcyByZXF1aXJlZCBhcmd1bWVudCBcIikuY29uY2F0KGFyZ05hbWUsIFwiIHRoYXQgaXMgbWlzc2luZyBmcm9tIHRoZSBJbnRlcmZhY2UgZmllbGQgXCIpLmNvbmNhdChpZmFjZS5uYW1lLCBcIi5cIikuY29uY2F0KGZpZWxkTmFtZSwgXCIuXCIpLCBbdHlwZUFyZy5hc3ROb2RlLCBpZmFjZUZpZWxkLmFzdE5vZGVdKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZm9yICh2YXIgX2kyMCA9IDAsIF90eXBlRmllbGQkYXJnczIgPSB0eXBlRmllbGQuYXJnczsgX2kyMCA8IF90eXBlRmllbGQkYXJnczIubGVuZ3RoOyBfaTIwKyspIHtcbiAgICAgIF9sb29wMihfaTIwLCBfdHlwZUZpZWxkJGFyZ3MyKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVUeXBlSW1wbGVtZW50c0FuY2VzdG9ycyhjb250ZXh0LCB0eXBlLCBpZmFjZSkge1xuICB2YXIgaWZhY2VJbnRlcmZhY2VzID0gdHlwZS5nZXRJbnRlcmZhY2VzKCk7XG5cbiAgZm9yICh2YXIgX2kyMiA9IDAsIF9pZmFjZSRnZXRJbnRlcmZhY2VzMiA9IGlmYWNlLmdldEludGVyZmFjZXMoKTsgX2kyMiA8IF9pZmFjZSRnZXRJbnRlcmZhY2VzMi5sZW5ndGg7IF9pMjIrKykge1xuICAgIHZhciB0cmFuc2l0aXZlID0gX2lmYWNlJGdldEludGVyZmFjZXMyW19pMjJdO1xuXG4gICAgaWYgKGlmYWNlSW50ZXJmYWNlcy5pbmRleE9mKHRyYW5zaXRpdmUpID09PSAtMSkge1xuICAgICAgY29udGV4dC5yZXBvcnRFcnJvcih0cmFuc2l0aXZlID09PSB0eXBlID8gXCJUeXBlIFwiLmNvbmNhdCh0eXBlLm5hbWUsIFwiIGNhbm5vdCBpbXBsZW1lbnQgXCIpLmNvbmNhdChpZmFjZS5uYW1lLCBcIiBiZWNhdXNlIGl0IHdvdWxkIGNyZWF0ZSBhIGNpcmN1bGFyIHJlZmVyZW5jZS5cIikgOiBcIlR5cGUgXCIuY29uY2F0KHR5cGUubmFtZSwgXCIgbXVzdCBpbXBsZW1lbnQgXCIpLmNvbmNhdCh0cmFuc2l0aXZlLm5hbWUsIFwiIGJlY2F1c2UgaXQgaXMgaW1wbGVtZW50ZWQgYnkgXCIpLmNvbmNhdChpZmFjZS5uYW1lLCBcIi5cIiksIFtdLmNvbmNhdChnZXRBbGxJbXBsZW1lbnRzSW50ZXJmYWNlTm9kZXMoaWZhY2UsIHRyYW5zaXRpdmUpLCBnZXRBbGxJbXBsZW1lbnRzSW50ZXJmYWNlTm9kZXModHlwZSwgaWZhY2UpKSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlVW5pb25NZW1iZXJzKGNvbnRleHQsIHVuaW9uKSB7XG4gIHZhciBtZW1iZXJUeXBlcyA9IHVuaW9uLmdldFR5cGVzKCk7XG5cbiAgaWYgKG1lbWJlclR5cGVzLmxlbmd0aCA9PT0gMCkge1xuICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXCJVbmlvbiB0eXBlIFwiLmNvbmNhdCh1bmlvbi5uYW1lLCBcIiBtdXN0IGRlZmluZSBvbmUgb3IgbW9yZSBtZW1iZXIgdHlwZXMuXCIpLCBnZXRBbGxOb2Rlcyh1bmlvbikpO1xuICB9XG5cbiAgdmFyIGluY2x1ZGVkVHlwZU5hbWVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICBmb3IgKHZhciBfaTI0ID0gMDsgX2kyNCA8IG1lbWJlclR5cGVzLmxlbmd0aDsgX2kyNCsrKSB7XG4gICAgdmFyIG1lbWJlclR5cGUgPSBtZW1iZXJUeXBlc1tfaTI0XTtcblxuICAgIGlmIChpbmNsdWRlZFR5cGVOYW1lc1ttZW1iZXJUeXBlLm5hbWVdKSB7XG4gICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFwiVW5pb24gdHlwZSBcIi5jb25jYXQodW5pb24ubmFtZSwgXCIgY2FuIG9ubHkgaW5jbHVkZSB0eXBlIFwiKS5jb25jYXQobWVtYmVyVHlwZS5uYW1lLCBcIiBvbmNlLlwiKSwgZ2V0VW5pb25NZW1iZXJUeXBlTm9kZXModW5pb24sIG1lbWJlclR5cGUubmFtZSkpO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaW5jbHVkZWRUeXBlTmFtZXNbbWVtYmVyVHlwZS5uYW1lXSA9IHRydWU7XG5cbiAgICBpZiAoIWlzT2JqZWN0VHlwZShtZW1iZXJUeXBlKSkge1xuICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcIlVuaW9uIHR5cGUgXCIuY29uY2F0KHVuaW9uLm5hbWUsIFwiIGNhbiBvbmx5IGluY2x1ZGUgT2JqZWN0IHR5cGVzLCBcIikgKyBcIml0IGNhbm5vdCBpbmNsdWRlIFwiLmNvbmNhdChpbnNwZWN0KG1lbWJlclR5cGUpLCBcIi5cIiksIGdldFVuaW9uTWVtYmVyVHlwZU5vZGVzKHVuaW9uLCBTdHJpbmcobWVtYmVyVHlwZSkpKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVFbnVtVmFsdWVzKGNvbnRleHQsIGVudW1UeXBlKSB7XG4gIHZhciBlbnVtVmFsdWVzID0gZW51bVR5cGUuZ2V0VmFsdWVzKCk7XG5cbiAgaWYgKGVudW1WYWx1ZXMubGVuZ3RoID09PSAwKSB7XG4gICAgY29udGV4dC5yZXBvcnRFcnJvcihcIkVudW0gdHlwZSBcIi5jb25jYXQoZW51bVR5cGUubmFtZSwgXCIgbXVzdCBkZWZpbmUgb25lIG9yIG1vcmUgdmFsdWVzLlwiKSwgZ2V0QWxsTm9kZXMoZW51bVR5cGUpKTtcbiAgfVxuXG4gIGZvciAodmFyIF9pMjYgPSAwOyBfaTI2IDwgZW51bVZhbHVlcy5sZW5ndGg7IF9pMjYrKykge1xuICAgIHZhciBlbnVtVmFsdWUgPSBlbnVtVmFsdWVzW19pMjZdO1xuICAgIHZhciB2YWx1ZU5hbWUgPSBlbnVtVmFsdWUubmFtZTsgLy8gRW5zdXJlIHZhbGlkIG5hbWUuXG5cbiAgICB2YWxpZGF0ZU5hbWUoY29udGV4dCwgZW51bVZhbHVlKTtcblxuICAgIGlmICh2YWx1ZU5hbWUgPT09ICd0cnVlJyB8fCB2YWx1ZU5hbWUgPT09ICdmYWxzZScgfHwgdmFsdWVOYW1lID09PSAnbnVsbCcpIHtcbiAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IoXCJFbnVtIHR5cGUgXCIuY29uY2F0KGVudW1UeXBlLm5hbWUsIFwiIGNhbm5vdCBpbmNsdWRlIHZhbHVlOiBcIikuY29uY2F0KHZhbHVlTmFtZSwgXCIuXCIpLCBlbnVtVmFsdWUuYXN0Tm9kZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlSW5wdXRGaWVsZHMoY29udGV4dCwgaW5wdXRPYmopIHtcbiAgdmFyIGZpZWxkcyA9IG9iamVjdFZhbHVlcyhpbnB1dE9iai5nZXRGaWVsZHMoKSk7XG5cbiAgaWYgKGZpZWxkcy5sZW5ndGggPT09IDApIHtcbiAgICBjb250ZXh0LnJlcG9ydEVycm9yKFwiSW5wdXQgT2JqZWN0IHR5cGUgXCIuY29uY2F0KGlucHV0T2JqLm5hbWUsIFwiIG11c3QgZGVmaW5lIG9uZSBvciBtb3JlIGZpZWxkcy5cIiksIGdldEFsbE5vZGVzKGlucHV0T2JqKSk7XG4gIH0gLy8gRW5zdXJlIHRoZSBhcmd1bWVudHMgYXJlIHZhbGlkXG5cblxuICBmb3IgKHZhciBfaTI4ID0gMDsgX2kyOCA8IGZpZWxkcy5sZW5ndGg7IF9pMjgrKykge1xuICAgIHZhciBmaWVsZCA9IGZpZWxkc1tfaTI4XTtcbiAgICAvLyBFbnN1cmUgdGhleSBhcmUgbmFtZWQgY29ycmVjdGx5LlxuICAgIHZhbGlkYXRlTmFtZShjb250ZXh0LCBmaWVsZCk7IC8vIEVuc3VyZSB0aGUgdHlwZSBpcyBhbiBpbnB1dCB0eXBlXG5cbiAgICBpZiAoIWlzSW5wdXRUeXBlKGZpZWxkLnR5cGUpKSB7XG4gICAgICB2YXIgX2ZpZWxkJGFzdE5vZGUyO1xuXG4gICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFwiVGhlIHR5cGUgb2YgXCIuY29uY2F0KGlucHV0T2JqLm5hbWUsIFwiLlwiKS5jb25jYXQoZmllbGQubmFtZSwgXCIgbXVzdCBiZSBJbnB1dCBUeXBlIFwiKSArIFwiYnV0IGdvdDogXCIuY29uY2F0KGluc3BlY3QoZmllbGQudHlwZSksIFwiLlwiKSwgKF9maWVsZCRhc3ROb2RlMiA9IGZpZWxkLmFzdE5vZGUpID09PSBudWxsIHx8IF9maWVsZCRhc3ROb2RlMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2ZpZWxkJGFzdE5vZGUyLnR5cGUpO1xuICAgIH1cblxuICAgIGlmIChpc1JlcXVpcmVkSW5wdXRGaWVsZChmaWVsZCkgJiYgZmllbGQuZGVwcmVjYXRpb25SZWFzb24gIT0gbnVsbCkge1xuICAgICAgdmFyIF9maWVsZCRhc3ROb2RlMztcblxuICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihcIlJlcXVpcmVkIGlucHV0IGZpZWxkIFwiLmNvbmNhdChpbnB1dE9iai5uYW1lLCBcIi5cIikuY29uY2F0KGZpZWxkLm5hbWUsIFwiIGNhbm5vdCBiZSBkZXByZWNhdGVkLlwiKSwgW2dldERlcHJlY2F0ZWREaXJlY3RpdmVOb2RlKGZpZWxkLmFzdE5vZGUpLCAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAoVE9ETyBuZWVkIHRvIHdyaXRlIGNvdmVyYWdlIHRlc3RzKVxuICAgICAgKF9maWVsZCRhc3ROb2RlMyA9IGZpZWxkLmFzdE5vZGUpID09PSBudWxsIHx8IF9maWVsZCRhc3ROb2RlMyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2ZpZWxkJGFzdE5vZGUzLnR5cGVdKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlSW5wdXRPYmplY3RDaXJjdWxhclJlZnNWYWxpZGF0b3IoY29udGV4dCkge1xuICAvLyBNb2RpZmllZCBjb3B5IG9mIGFsZ29yaXRobSBmcm9tICdzcmMvdmFsaWRhdGlvbi9ydWxlcy9Ob0ZyYWdtZW50Q3ljbGVzLmpzJy5cbiAgLy8gVHJhY2tzIGFscmVhZHkgdmlzaXRlZCB0eXBlcyB0byBtYWludGFpbiBPKE4pIGFuZCB0byBlbnN1cmUgdGhhdCBjeWNsZXNcbiAgLy8gYXJlIG5vdCByZWR1bmRhbnRseSByZXBvcnRlZC5cbiAgdmFyIHZpc2l0ZWRUeXBlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7IC8vIEFycmF5IG9mIHR5cGVzIG5vZGVzIHVzZWQgdG8gcHJvZHVjZSBtZWFuaW5nZnVsIGVycm9yc1xuXG4gIHZhciBmaWVsZFBhdGggPSBbXTsgLy8gUG9zaXRpb24gaW4gdGhlIHR5cGUgcGF0aFxuXG4gIHZhciBmaWVsZFBhdGhJbmRleEJ5VHlwZU5hbWUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICByZXR1cm4gZGV0ZWN0Q3ljbGVSZWN1cnNpdmU7IC8vIFRoaXMgZG9lcyBhIHN0cmFpZ2h0LWZvcndhcmQgREZTIHRvIGZpbmQgY3ljbGVzLlxuICAvLyBJdCBkb2VzIG5vdCB0ZXJtaW5hdGUgd2hlbiBhIGN5Y2xlIHdhcyBmb3VuZCBidXQgY29udGludWVzIHRvIGV4cGxvcmVcbiAgLy8gdGhlIGdyYXBoIHRvIGZpbmQgYWxsIHBvc3NpYmxlIGN5Y2xlcy5cblxuICBmdW5jdGlvbiBkZXRlY3RDeWNsZVJlY3Vyc2l2ZShpbnB1dE9iaikge1xuICAgIGlmICh2aXNpdGVkVHlwZXNbaW5wdXRPYmoubmFtZV0pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2aXNpdGVkVHlwZXNbaW5wdXRPYmoubmFtZV0gPSB0cnVlO1xuICAgIGZpZWxkUGF0aEluZGV4QnlUeXBlTmFtZVtpbnB1dE9iai5uYW1lXSA9IGZpZWxkUGF0aC5sZW5ndGg7XG4gICAgdmFyIGZpZWxkcyA9IG9iamVjdFZhbHVlcyhpbnB1dE9iai5nZXRGaWVsZHMoKSk7XG5cbiAgICBmb3IgKHZhciBfaTMwID0gMDsgX2kzMCA8IGZpZWxkcy5sZW5ndGg7IF9pMzArKykge1xuICAgICAgdmFyIGZpZWxkID0gZmllbGRzW19pMzBdO1xuXG4gICAgICBpZiAoaXNOb25OdWxsVHlwZShmaWVsZC50eXBlKSAmJiBpc0lucHV0T2JqZWN0VHlwZShmaWVsZC50eXBlLm9mVHlwZSkpIHtcbiAgICAgICAgdmFyIGZpZWxkVHlwZSA9IGZpZWxkLnR5cGUub2ZUeXBlO1xuICAgICAgICB2YXIgY3ljbGVJbmRleCA9IGZpZWxkUGF0aEluZGV4QnlUeXBlTmFtZVtmaWVsZFR5cGUubmFtZV07XG4gICAgICAgIGZpZWxkUGF0aC5wdXNoKGZpZWxkKTtcblxuICAgICAgICBpZiAoY3ljbGVJbmRleCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgZGV0ZWN0Q3ljbGVSZWN1cnNpdmUoZmllbGRUeXBlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgY3ljbGVQYXRoID0gZmllbGRQYXRoLnNsaWNlKGN5Y2xlSW5kZXgpO1xuICAgICAgICAgIHZhciBwYXRoU3RyID0gY3ljbGVQYXRoLm1hcChmdW5jdGlvbiAoZmllbGRPYmopIHtcbiAgICAgICAgICAgIHJldHVybiBmaWVsZE9iai5uYW1lO1xuICAgICAgICAgIH0pLmpvaW4oJy4nKTtcbiAgICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKFwiQ2Fubm90IHJlZmVyZW5jZSBJbnB1dCBPYmplY3QgXFxcIlwiLmNvbmNhdChmaWVsZFR5cGUubmFtZSwgXCJcXFwiIHdpdGhpbiBpdHNlbGYgdGhyb3VnaCBhIHNlcmllcyBvZiBub24tbnVsbCBmaWVsZHM6IFxcXCJcIikuY29uY2F0KHBhdGhTdHIsIFwiXFxcIi5cIiksIGN5Y2xlUGF0aC5tYXAoZnVuY3Rpb24gKGZpZWxkT2JqKSB7XG4gICAgICAgICAgICByZXR1cm4gZmllbGRPYmouYXN0Tm9kZTtcbiAgICAgICAgICB9KSk7XG4gICAgICAgIH1cblxuICAgICAgICBmaWVsZFBhdGgucG9wKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZmllbGRQYXRoSW5kZXhCeVR5cGVOYW1lW2lucHV0T2JqLm5hbWVdID0gdW5kZWZpbmVkO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldEFsbE5vZGVzKG9iamVjdCkge1xuICB2YXIgYXN0Tm9kZSA9IG9iamVjdC5hc3ROb2RlLFxuICAgICAgZXh0ZW5zaW9uQVNUTm9kZXMgPSBvYmplY3QuZXh0ZW5zaW9uQVNUTm9kZXM7XG4gIHJldHVybiBhc3ROb2RlID8gZXh0ZW5zaW9uQVNUTm9kZXMgPyBbYXN0Tm9kZV0uY29uY2F0KGV4dGVuc2lvbkFTVE5vZGVzKSA6IFthc3ROb2RlXSA6IGV4dGVuc2lvbkFTVE5vZGVzICE9PSBudWxsICYmIGV4dGVuc2lvbkFTVE5vZGVzICE9PSB2b2lkIDAgPyBleHRlbnNpb25BU1ROb2RlcyA6IFtdO1xufVxuXG5mdW5jdGlvbiBnZXRBbGxTdWJOb2RlcyhvYmplY3QsIGdldHRlcikge1xuICB2YXIgc3ViTm9kZXMgPSBbXTtcblxuICBmb3IgKHZhciBfaTMyID0gMCwgX2dldEFsbE5vZGVzMiA9IGdldEFsbE5vZGVzKG9iamVjdCk7IF9pMzIgPCBfZ2V0QWxsTm9kZXMyLmxlbmd0aDsgX2kzMisrKSB7XG4gICAgdmFyIF9nZXR0ZXI7XG5cbiAgICB2YXIgbm9kZSA9IF9nZXRBbGxOb2RlczJbX2kzMl07XG4gICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHQgKFNlZTogJ2h0dHBzOi8vZ2l0aHViLmNvbS9ncmFwaHFsL2dyYXBocWwtanMvaXNzdWVzLzIyMDMnKVxuICAgIHN1Yk5vZGVzID0gc3ViTm9kZXMuY29uY2F0KChfZ2V0dGVyID0gZ2V0dGVyKG5vZGUpKSAhPT0gbnVsbCAmJiBfZ2V0dGVyICE9PSB2b2lkIDAgPyBfZ2V0dGVyIDogW10pO1xuICB9XG5cbiAgcmV0dXJuIHN1Yk5vZGVzO1xufVxuXG5mdW5jdGlvbiBnZXRBbGxJbXBsZW1lbnRzSW50ZXJmYWNlTm9kZXModHlwZSwgaWZhY2UpIHtcbiAgcmV0dXJuIGdldEFsbFN1Yk5vZGVzKHR5cGUsIGZ1bmN0aW9uICh0eXBlTm9kZSkge1xuICAgIHJldHVybiB0eXBlTm9kZS5pbnRlcmZhY2VzO1xuICB9KS5maWx0ZXIoZnVuY3Rpb24gKGlmYWNlTm9kZSkge1xuICAgIHJldHVybiBpZmFjZU5vZGUubmFtZS52YWx1ZSA9PT0gaWZhY2UubmFtZTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldFVuaW9uTWVtYmVyVHlwZU5vZGVzKHVuaW9uLCB0eXBlTmFtZSkge1xuICByZXR1cm4gZ2V0QWxsU3ViTm9kZXModW5pb24sIGZ1bmN0aW9uICh1bmlvbk5vZGUpIHtcbiAgICByZXR1cm4gdW5pb25Ob2RlLnR5cGVzO1xuICB9KS5maWx0ZXIoZnVuY3Rpb24gKHR5cGVOb2RlKSB7XG4gICAgcmV0dXJuIHR5cGVOb2RlLm5hbWUudmFsdWUgPT09IHR5cGVOYW1lO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0RGVwcmVjYXRlZERpcmVjdGl2ZU5vZGUoZGVmaW5pdGlvbk5vZGUpIHtcbiAgdmFyIF9kZWZpbml0aW9uTm9kZSRkaXJlYztcblxuICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAoU2VlOiAnaHR0cHM6Ly9naXRodWIuY29tL2dyYXBocWwvZ3JhcGhxbC1qcy9pc3N1ZXMvMjIwMycpXG4gIHJldHVybiBkZWZpbml0aW9uTm9kZSA9PT0gbnVsbCB8fCBkZWZpbml0aW9uTm9kZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogKF9kZWZpbml0aW9uTm9kZSRkaXJlYyA9IGRlZmluaXRpb25Ob2RlLmRpcmVjdGl2ZXMpID09PSBudWxsIHx8IF9kZWZpbml0aW9uTm9kZSRkaXJlYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2RlZmluaXRpb25Ob2RlJGRpcmVjLmZpbmQoZnVuY3Rpb24gKG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS5uYW1lLnZhbHVlID09PSBHcmFwaFFMRGVwcmVjYXRlZERpcmVjdGl2ZS5uYW1lO1xuICB9KTtcbn1cbiIsImltcG9ydCBmaW5kIGZyb20gXCIuLi9wb2x5ZmlsbHMvZmluZC5tanNcIjtcbmltcG9ydCB7IEtpbmQgfSBmcm9tIFwiLi4vbGFuZ3VhZ2Uva2luZHMubWpzXCI7XG5pbXBvcnQgeyBpc05vZGUgfSBmcm9tIFwiLi4vbGFuZ3VhZ2UvYXN0Lm1qc1wiO1xuaW1wb3J0IHsgZ2V0VmlzaXRGbiB9IGZyb20gXCIuLi9sYW5ndWFnZS92aXNpdG9yLm1qc1wiO1xuaW1wb3J0IHsgaXNPYmplY3RUeXBlLCBpc0ludGVyZmFjZVR5cGUsIGlzRW51bVR5cGUsIGlzSW5wdXRPYmplY3RUeXBlLCBpc0xpc3RUeXBlLCBpc0NvbXBvc2l0ZVR5cGUsIGlzSW5wdXRUeXBlLCBpc091dHB1dFR5cGUsIGdldE51bGxhYmxlVHlwZSwgZ2V0TmFtZWRUeXBlIH0gZnJvbSBcIi4uL3R5cGUvZGVmaW5pdGlvbi5tanNcIjtcbmltcG9ydCB7IFNjaGVtYU1ldGFGaWVsZERlZiwgVHlwZU1ldGFGaWVsZERlZiwgVHlwZU5hbWVNZXRhRmllbGREZWYgfSBmcm9tIFwiLi4vdHlwZS9pbnRyb3NwZWN0aW9uLm1qc1wiO1xuaW1wb3J0IHsgdHlwZUZyb21BU1QgfSBmcm9tIFwiLi90eXBlRnJvbUFTVC5tanNcIjtcbi8qKlxuICogVHlwZUluZm8gaXMgYSB1dGlsaXR5IGNsYXNzIHdoaWNoLCBnaXZlbiBhIEdyYXBoUUwgc2NoZW1hLCBjYW4ga2VlcCB0cmFja1xuICogb2YgdGhlIGN1cnJlbnQgZmllbGQgYW5kIHR5cGUgZGVmaW5pdGlvbnMgYXQgYW55IHBvaW50IGluIGEgR3JhcGhRTCBkb2N1bWVudFxuICogQVNUIGR1cmluZyBhIHJlY3Vyc2l2ZSBkZXNjZW50IGJ5IGNhbGxpbmcgYGVudGVyKG5vZGUpYCBhbmQgYGxlYXZlKG5vZGUpYC5cbiAqL1xuXG5leHBvcnQgdmFyIFR5cGVJbmZvID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gVHlwZUluZm8oc2NoZW1hLCAvLyBOT1RFOiB0aGlzIGV4cGVyaW1lbnRhbCBvcHRpb25hbCBzZWNvbmQgcGFyYW1ldGVyIGlzIG9ubHkgbmVlZGVkIGluIG9yZGVyXG4gIC8vIHRvIHN1cHBvcnQgbm9uLXNwZWMtY29tcGxpYW50IGNvZGUgYmFzZXMuIFlvdSBzaG91bGQgbmV2ZXIgbmVlZCB0byB1c2UgaXQuXG4gIC8vIEl0IG1heSBkaXNhcHBlYXIgaW4gdGhlIGZ1dHVyZS5cbiAgZ2V0RmllbGREZWZGbiwgLy8gSW5pdGlhbCB0eXBlIG1heSBiZSBwcm92aWRlZCBpbiByYXJlIGNhc2VzIHRvIGZhY2lsaXRhdGUgdHJhdmVyc2Fsc1xuICAvLyBiZWdpbm5pbmcgc29tZXdoZXJlIG90aGVyIHRoYW4gZG9jdW1lbnRzLlxuICBpbml0aWFsVHlwZSkge1xuICAgIHRoaXMuX3NjaGVtYSA9IHNjaGVtYTtcbiAgICB0aGlzLl90eXBlU3RhY2sgPSBbXTtcbiAgICB0aGlzLl9wYXJlbnRUeXBlU3RhY2sgPSBbXTtcbiAgICB0aGlzLl9pbnB1dFR5cGVTdGFjayA9IFtdO1xuICAgIHRoaXMuX2ZpZWxkRGVmU3RhY2sgPSBbXTtcbiAgICB0aGlzLl9kZWZhdWx0VmFsdWVTdGFjayA9IFtdO1xuICAgIHRoaXMuX2RpcmVjdGl2ZSA9IG51bGw7XG4gICAgdGhpcy5fYXJndW1lbnQgPSBudWxsO1xuICAgIHRoaXMuX2VudW1WYWx1ZSA9IG51bGw7XG4gICAgdGhpcy5fZ2V0RmllbGREZWYgPSBnZXRGaWVsZERlZkZuICE9PSBudWxsICYmIGdldEZpZWxkRGVmRm4gIT09IHZvaWQgMCA/IGdldEZpZWxkRGVmRm4gOiBnZXRGaWVsZERlZjtcblxuICAgIGlmIChpbml0aWFsVHlwZSkge1xuICAgICAgaWYgKGlzSW5wdXRUeXBlKGluaXRpYWxUeXBlKSkge1xuICAgICAgICB0aGlzLl9pbnB1dFR5cGVTdGFjay5wdXNoKGluaXRpYWxUeXBlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzQ29tcG9zaXRlVHlwZShpbml0aWFsVHlwZSkpIHtcbiAgICAgICAgdGhpcy5fcGFyZW50VHlwZVN0YWNrLnB1c2goaW5pdGlhbFR5cGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNPdXRwdXRUeXBlKGluaXRpYWxUeXBlKSkge1xuICAgICAgICB0aGlzLl90eXBlU3RhY2sucHVzaChpbml0aWFsVHlwZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIF9wcm90byA9IFR5cGVJbmZvLnByb3RvdHlwZTtcblxuICBfcHJvdG8uZ2V0VHlwZSA9IGZ1bmN0aW9uIGdldFR5cGUoKSB7XG4gICAgaWYgKHRoaXMuX3R5cGVTdGFjay5sZW5ndGggPiAwKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdHlwZVN0YWNrW3RoaXMuX3R5cGVTdGFjay5sZW5ndGggLSAxXTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmdldFBhcmVudFR5cGUgPSBmdW5jdGlvbiBnZXRQYXJlbnRUeXBlKCkge1xuICAgIGlmICh0aGlzLl9wYXJlbnRUeXBlU3RhY2subGVuZ3RoID4gMCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3BhcmVudFR5cGVTdGFja1t0aGlzLl9wYXJlbnRUeXBlU3RhY2subGVuZ3RoIC0gMV07XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5nZXRJbnB1dFR5cGUgPSBmdW5jdGlvbiBnZXRJbnB1dFR5cGUoKSB7XG4gICAgaWYgKHRoaXMuX2lucHV0VHlwZVN0YWNrLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiB0aGlzLl9pbnB1dFR5cGVTdGFja1t0aGlzLl9pbnB1dFR5cGVTdGFjay5sZW5ndGggLSAxXTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmdldFBhcmVudElucHV0VHlwZSA9IGZ1bmN0aW9uIGdldFBhcmVudElucHV0VHlwZSgpIHtcbiAgICBpZiAodGhpcy5faW5wdXRUeXBlU3RhY2subGVuZ3RoID4gMSkge1xuICAgICAgcmV0dXJuIHRoaXMuX2lucHV0VHlwZVN0YWNrW3RoaXMuX2lucHV0VHlwZVN0YWNrLmxlbmd0aCAtIDJdO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uZ2V0RmllbGREZWYgPSBmdW5jdGlvbiBnZXRGaWVsZERlZigpIHtcbiAgICBpZiAodGhpcy5fZmllbGREZWZTdGFjay5sZW5ndGggPiAwKSB7XG4gICAgICByZXR1cm4gdGhpcy5fZmllbGREZWZTdGFja1t0aGlzLl9maWVsZERlZlN0YWNrLmxlbmd0aCAtIDFdO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uZ2V0RGVmYXVsdFZhbHVlID0gZnVuY3Rpb24gZ2V0RGVmYXVsdFZhbHVlKCkge1xuICAgIGlmICh0aGlzLl9kZWZhdWx0VmFsdWVTdGFjay5sZW5ndGggPiAwKSB7XG4gICAgICByZXR1cm4gdGhpcy5fZGVmYXVsdFZhbHVlU3RhY2tbdGhpcy5fZGVmYXVsdFZhbHVlU3RhY2subGVuZ3RoIC0gMV07XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5nZXREaXJlY3RpdmUgPSBmdW5jdGlvbiBnZXREaXJlY3RpdmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2RpcmVjdGl2ZTtcbiAgfTtcblxuICBfcHJvdG8uZ2V0QXJndW1lbnQgPSBmdW5jdGlvbiBnZXRBcmd1bWVudCgpIHtcbiAgICByZXR1cm4gdGhpcy5fYXJndW1lbnQ7XG4gIH07XG5cbiAgX3Byb3RvLmdldEVudW1WYWx1ZSA9IGZ1bmN0aW9uIGdldEVudW1WYWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fZW51bVZhbHVlO1xuICB9O1xuXG4gIF9wcm90by5lbnRlciA9IGZ1bmN0aW9uIGVudGVyKG5vZGUpIHtcbiAgICB2YXIgc2NoZW1hID0gdGhpcy5fc2NoZW1hOyAvLyBOb3RlOiBtYW55IG9mIHRoZSB0eXBlcyBiZWxvdyBhcmUgZXhwbGljaXRseSB0eXBlZCBhcyBcIm1peGVkXCIgdG8gZHJvcFxuICAgIC8vIGFueSBhc3N1bXB0aW9ucyBvZiBhIHZhbGlkIHNjaGVtYSB0byBlbnN1cmUgcnVudGltZSB0eXBlcyBhcmUgcHJvcGVybHlcbiAgICAvLyBjaGVja2VkIGJlZm9yZSBjb250aW51aW5nIHNpbmNlIFR5cGVJbmZvIGlzIHVzZWQgYXMgcGFydCBvZiB2YWxpZGF0aW9uXG4gICAgLy8gd2hpY2ggb2NjdXJzIGJlZm9yZSBndWFyYW50ZWVzIG9mIHNjaGVtYSBhbmQgZG9jdW1lbnQgdmFsaWRpdHkuXG5cbiAgICBzd2l0Y2ggKG5vZGUua2luZCkge1xuICAgICAgY2FzZSBLaW5kLlNFTEVDVElPTl9TRVQ6XG4gICAgICAgIHtcbiAgICAgICAgICB2YXIgbmFtZWRUeXBlID0gZ2V0TmFtZWRUeXBlKHRoaXMuZ2V0VHlwZSgpKTtcblxuICAgICAgICAgIHRoaXMuX3BhcmVudFR5cGVTdGFjay5wdXNoKGlzQ29tcG9zaXRlVHlwZShuYW1lZFR5cGUpID8gbmFtZWRUeXBlIDogdW5kZWZpbmVkKTtcblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgIGNhc2UgS2luZC5GSUVMRDpcbiAgICAgICAge1xuICAgICAgICAgIHZhciBwYXJlbnRUeXBlID0gdGhpcy5nZXRQYXJlbnRUeXBlKCk7XG4gICAgICAgICAgdmFyIGZpZWxkRGVmO1xuICAgICAgICAgIHZhciBmaWVsZFR5cGU7XG5cbiAgICAgICAgICBpZiAocGFyZW50VHlwZSkge1xuICAgICAgICAgICAgZmllbGREZWYgPSB0aGlzLl9nZXRGaWVsZERlZihzY2hlbWEsIHBhcmVudFR5cGUsIG5vZGUpO1xuXG4gICAgICAgICAgICBpZiAoZmllbGREZWYpIHtcbiAgICAgICAgICAgICAgZmllbGRUeXBlID0gZmllbGREZWYudHlwZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLl9maWVsZERlZlN0YWNrLnB1c2goZmllbGREZWYpO1xuXG4gICAgICAgICAgdGhpcy5fdHlwZVN0YWNrLnB1c2goaXNPdXRwdXRUeXBlKGZpZWxkVHlwZSkgPyBmaWVsZFR5cGUgOiB1bmRlZmluZWQpO1xuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgY2FzZSBLaW5kLkRJUkVDVElWRTpcbiAgICAgICAgdGhpcy5fZGlyZWN0aXZlID0gc2NoZW1hLmdldERpcmVjdGl2ZShub2RlLm5hbWUudmFsdWUpO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBLaW5kLk9QRVJBVElPTl9ERUZJTklUSU9OOlxuICAgICAgICB7XG4gICAgICAgICAgdmFyIHR5cGU7XG5cbiAgICAgICAgICBzd2l0Y2ggKG5vZGUub3BlcmF0aW9uKSB7XG4gICAgICAgICAgICBjYXNlICdxdWVyeSc6XG4gICAgICAgICAgICAgIHR5cGUgPSBzY2hlbWEuZ2V0UXVlcnlUeXBlKCk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICdtdXRhdGlvbic6XG4gICAgICAgICAgICAgIHR5cGUgPSBzY2hlbWEuZ2V0TXV0YXRpb25UeXBlKCk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICdzdWJzY3JpcHRpb24nOlxuICAgICAgICAgICAgICB0eXBlID0gc2NoZW1hLmdldFN1YnNjcmlwdGlvblR5cGUoKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5fdHlwZVN0YWNrLnB1c2goaXNPYmplY3RUeXBlKHR5cGUpID8gdHlwZSA6IHVuZGVmaW5lZCk7XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICBjYXNlIEtpbmQuSU5MSU5FX0ZSQUdNRU5UOlxuICAgICAgY2FzZSBLaW5kLkZSQUdNRU5UX0RFRklOSVRJT046XG4gICAgICAgIHtcbiAgICAgICAgICB2YXIgdHlwZUNvbmRpdGlvbkFTVCA9IG5vZGUudHlwZUNvbmRpdGlvbjtcbiAgICAgICAgICB2YXIgb3V0cHV0VHlwZSA9IHR5cGVDb25kaXRpb25BU1QgPyB0eXBlRnJvbUFTVChzY2hlbWEsIHR5cGVDb25kaXRpb25BU1QpIDogZ2V0TmFtZWRUeXBlKHRoaXMuZ2V0VHlwZSgpKTtcblxuICAgICAgICAgIHRoaXMuX3R5cGVTdGFjay5wdXNoKGlzT3V0cHV0VHlwZShvdXRwdXRUeXBlKSA/IG91dHB1dFR5cGUgOiB1bmRlZmluZWQpO1xuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgY2FzZSBLaW5kLlZBUklBQkxFX0RFRklOSVRJT046XG4gICAgICAgIHtcbiAgICAgICAgICB2YXIgaW5wdXRUeXBlID0gdHlwZUZyb21BU1Qoc2NoZW1hLCBub2RlLnR5cGUpO1xuXG4gICAgICAgICAgdGhpcy5faW5wdXRUeXBlU3RhY2sucHVzaChpc0lucHV0VHlwZShpbnB1dFR5cGUpID8gaW5wdXRUeXBlIDogdW5kZWZpbmVkKTtcblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgIGNhc2UgS2luZC5BUkdVTUVOVDpcbiAgICAgICAge1xuICAgICAgICAgIHZhciBfdGhpcyRnZXREaXJlY3RpdmU7XG5cbiAgICAgICAgICB2YXIgYXJnRGVmO1xuICAgICAgICAgIHZhciBhcmdUeXBlO1xuICAgICAgICAgIHZhciBmaWVsZE9yRGlyZWN0aXZlID0gKF90aGlzJGdldERpcmVjdGl2ZSA9IHRoaXMuZ2V0RGlyZWN0aXZlKCkpICE9PSBudWxsICYmIF90aGlzJGdldERpcmVjdGl2ZSAhPT0gdm9pZCAwID8gX3RoaXMkZ2V0RGlyZWN0aXZlIDogdGhpcy5nZXRGaWVsZERlZigpO1xuXG4gICAgICAgICAgaWYgKGZpZWxkT3JEaXJlY3RpdmUpIHtcbiAgICAgICAgICAgIGFyZ0RlZiA9IGZpbmQoZmllbGRPckRpcmVjdGl2ZS5hcmdzLCBmdW5jdGlvbiAoYXJnKSB7XG4gICAgICAgICAgICAgIHJldHVybiBhcmcubmFtZSA9PT0gbm9kZS5uYW1lLnZhbHVlO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmIChhcmdEZWYpIHtcbiAgICAgICAgICAgICAgYXJnVHlwZSA9IGFyZ0RlZi50eXBlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMuX2FyZ3VtZW50ID0gYXJnRGVmO1xuXG4gICAgICAgICAgdGhpcy5fZGVmYXVsdFZhbHVlU3RhY2sucHVzaChhcmdEZWYgPyBhcmdEZWYuZGVmYXVsdFZhbHVlIDogdW5kZWZpbmVkKTtcblxuICAgICAgICAgIHRoaXMuX2lucHV0VHlwZVN0YWNrLnB1c2goaXNJbnB1dFR5cGUoYXJnVHlwZSkgPyBhcmdUeXBlIDogdW5kZWZpbmVkKTtcblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgIGNhc2UgS2luZC5MSVNUOlxuICAgICAgICB7XG4gICAgICAgICAgdmFyIGxpc3RUeXBlID0gZ2V0TnVsbGFibGVUeXBlKHRoaXMuZ2V0SW5wdXRUeXBlKCkpO1xuICAgICAgICAgIHZhciBpdGVtVHlwZSA9IGlzTGlzdFR5cGUobGlzdFR5cGUpID8gbGlzdFR5cGUub2ZUeXBlIDogbGlzdFR5cGU7IC8vIExpc3QgcG9zaXRpb25zIG5ldmVyIGhhdmUgYSBkZWZhdWx0IHZhbHVlLlxuXG4gICAgICAgICAgdGhpcy5fZGVmYXVsdFZhbHVlU3RhY2sucHVzaCh1bmRlZmluZWQpO1xuXG4gICAgICAgICAgdGhpcy5faW5wdXRUeXBlU3RhY2sucHVzaChpc0lucHV0VHlwZShpdGVtVHlwZSkgPyBpdGVtVHlwZSA6IHVuZGVmaW5lZCk7XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICBjYXNlIEtpbmQuT0JKRUNUX0ZJRUxEOlxuICAgICAgICB7XG4gICAgICAgICAgdmFyIG9iamVjdFR5cGUgPSBnZXROYW1lZFR5cGUodGhpcy5nZXRJbnB1dFR5cGUoKSk7XG4gICAgICAgICAgdmFyIGlucHV0RmllbGRUeXBlO1xuICAgICAgICAgIHZhciBpbnB1dEZpZWxkO1xuXG4gICAgICAgICAgaWYgKGlzSW5wdXRPYmplY3RUeXBlKG9iamVjdFR5cGUpKSB7XG4gICAgICAgICAgICBpbnB1dEZpZWxkID0gb2JqZWN0VHlwZS5nZXRGaWVsZHMoKVtub2RlLm5hbWUudmFsdWVdO1xuXG4gICAgICAgICAgICBpZiAoaW5wdXRGaWVsZCkge1xuICAgICAgICAgICAgICBpbnB1dEZpZWxkVHlwZSA9IGlucHV0RmllbGQudHlwZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLl9kZWZhdWx0VmFsdWVTdGFjay5wdXNoKGlucHV0RmllbGQgPyBpbnB1dEZpZWxkLmRlZmF1bHRWYWx1ZSA6IHVuZGVmaW5lZCk7XG5cbiAgICAgICAgICB0aGlzLl9pbnB1dFR5cGVTdGFjay5wdXNoKGlzSW5wdXRUeXBlKGlucHV0RmllbGRUeXBlKSA/IGlucHV0RmllbGRUeXBlIDogdW5kZWZpbmVkKTtcblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgIGNhc2UgS2luZC5FTlVNOlxuICAgICAgICB7XG4gICAgICAgICAgdmFyIGVudW1UeXBlID0gZ2V0TmFtZWRUeXBlKHRoaXMuZ2V0SW5wdXRUeXBlKCkpO1xuICAgICAgICAgIHZhciBlbnVtVmFsdWU7XG5cbiAgICAgICAgICBpZiAoaXNFbnVtVHlwZShlbnVtVHlwZSkpIHtcbiAgICAgICAgICAgIGVudW1WYWx1ZSA9IGVudW1UeXBlLmdldFZhbHVlKG5vZGUudmFsdWUpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMuX2VudW1WYWx1ZSA9IGVudW1WYWx1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBfcHJvdG8ubGVhdmUgPSBmdW5jdGlvbiBsZWF2ZShub2RlKSB7XG4gICAgc3dpdGNoIChub2RlLmtpbmQpIHtcbiAgICAgIGNhc2UgS2luZC5TRUxFQ1RJT05fU0VUOlxuICAgICAgICB0aGlzLl9wYXJlbnRUeXBlU3RhY2sucG9wKCk7XG5cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgS2luZC5GSUVMRDpcbiAgICAgICAgdGhpcy5fZmllbGREZWZTdGFjay5wb3AoKTtcblxuICAgICAgICB0aGlzLl90eXBlU3RhY2sucG9wKCk7XG5cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgS2luZC5ESVJFQ1RJVkU6XG4gICAgICAgIHRoaXMuX2RpcmVjdGl2ZSA9IG51bGw7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIEtpbmQuT1BFUkFUSU9OX0RFRklOSVRJT046XG4gICAgICBjYXNlIEtpbmQuSU5MSU5FX0ZSQUdNRU5UOlxuICAgICAgY2FzZSBLaW5kLkZSQUdNRU5UX0RFRklOSVRJT046XG4gICAgICAgIHRoaXMuX3R5cGVTdGFjay5wb3AoKTtcblxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBLaW5kLlZBUklBQkxFX0RFRklOSVRJT046XG4gICAgICAgIHRoaXMuX2lucHV0VHlwZVN0YWNrLnBvcCgpO1xuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIEtpbmQuQVJHVU1FTlQ6XG4gICAgICAgIHRoaXMuX2FyZ3VtZW50ID0gbnVsbDtcblxuICAgICAgICB0aGlzLl9kZWZhdWx0VmFsdWVTdGFjay5wb3AoKTtcblxuICAgICAgICB0aGlzLl9pbnB1dFR5cGVTdGFjay5wb3AoKTtcblxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBLaW5kLkxJU1Q6XG4gICAgICBjYXNlIEtpbmQuT0JKRUNUX0ZJRUxEOlxuICAgICAgICB0aGlzLl9kZWZhdWx0VmFsdWVTdGFjay5wb3AoKTtcblxuICAgICAgICB0aGlzLl9pbnB1dFR5cGVTdGFjay5wb3AoKTtcblxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBLaW5kLkVOVU06XG4gICAgICAgIHRoaXMuX2VudW1WYWx1ZSA9IG51bGw7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gVHlwZUluZm87XG59KCk7XG4vKipcbiAqIE5vdCBleGFjdGx5IHRoZSBzYW1lIGFzIHRoZSBleGVjdXRvcidzIGRlZmluaXRpb24gb2YgZ2V0RmllbGREZWYsIGluIHRoaXNcbiAqIHN0YXRpY2FsbHkgZXZhbHVhdGVkIGVudmlyb25tZW50IHdlIGRvIG5vdCBhbHdheXMgaGF2ZSBhbiBPYmplY3QgdHlwZSxcbiAqIGFuZCBuZWVkIHRvIGhhbmRsZSBJbnRlcmZhY2UgYW5kIFVuaW9uIHR5cGVzLlxuICovXG5cbmZ1bmN0aW9uIGdldEZpZWxkRGVmKHNjaGVtYSwgcGFyZW50VHlwZSwgZmllbGROb2RlKSB7XG4gIHZhciBuYW1lID0gZmllbGROb2RlLm5hbWUudmFsdWU7XG5cbiAgaWYgKG5hbWUgPT09IFNjaGVtYU1ldGFGaWVsZERlZi5uYW1lICYmIHNjaGVtYS5nZXRRdWVyeVR5cGUoKSA9PT0gcGFyZW50VHlwZSkge1xuICAgIHJldHVybiBTY2hlbWFNZXRhRmllbGREZWY7XG4gIH1cblxuICBpZiAobmFtZSA9PT0gVHlwZU1ldGFGaWVsZERlZi5uYW1lICYmIHNjaGVtYS5nZXRRdWVyeVR5cGUoKSA9PT0gcGFyZW50VHlwZSkge1xuICAgIHJldHVybiBUeXBlTWV0YUZpZWxkRGVmO1xuICB9XG5cbiAgaWYgKG5hbWUgPT09IFR5cGVOYW1lTWV0YUZpZWxkRGVmLm5hbWUgJiYgaXNDb21wb3NpdGVUeXBlKHBhcmVudFR5cGUpKSB7XG4gICAgcmV0dXJuIFR5cGVOYW1lTWV0YUZpZWxkRGVmO1xuICB9XG5cbiAgaWYgKGlzT2JqZWN0VHlwZShwYXJlbnRUeXBlKSB8fCBpc0ludGVyZmFjZVR5cGUocGFyZW50VHlwZSkpIHtcbiAgICByZXR1cm4gcGFyZW50VHlwZS5nZXRGaWVsZHMoKVtuYW1lXTtcbiAgfVxufVxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IHZpc2l0b3IgaW5zdGFuY2Ugd2hpY2ggbWFpbnRhaW5zIGEgcHJvdmlkZWQgVHlwZUluZm8gaW5zdGFuY2VcbiAqIGFsb25nIHdpdGggdmlzaXRpbmcgdmlzaXRvci5cbiAqL1xuXG5cbmV4cG9ydCBmdW5jdGlvbiB2aXNpdFdpdGhUeXBlSW5mbyh0eXBlSW5mbywgdmlzaXRvcikge1xuICByZXR1cm4ge1xuICAgIGVudGVyOiBmdW5jdGlvbiBlbnRlcihub2RlKSB7XG4gICAgICB0eXBlSW5mby5lbnRlcihub2RlKTtcbiAgICAgIHZhciBmbiA9IGdldFZpc2l0Rm4odmlzaXRvciwgbm9kZS5raW5kLFxuICAgICAgLyogaXNMZWF2aW5nICovXG4gICAgICBmYWxzZSk7XG5cbiAgICAgIGlmIChmbikge1xuICAgICAgICB2YXIgcmVzdWx0ID0gZm4uYXBwbHkodmlzaXRvciwgYXJndW1lbnRzKTtcblxuICAgICAgICBpZiAocmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0eXBlSW5mby5sZWF2ZShub2RlKTtcblxuICAgICAgICAgIGlmIChpc05vZGUocmVzdWx0KSkge1xuICAgICAgICAgICAgdHlwZUluZm8uZW50ZXIocmVzdWx0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgIH0sXG4gICAgbGVhdmU6IGZ1bmN0aW9uIGxlYXZlKG5vZGUpIHtcbiAgICAgIHZhciBmbiA9IGdldFZpc2l0Rm4odmlzaXRvciwgbm9kZS5raW5kLFxuICAgICAgLyogaXNMZWF2aW5nICovXG4gICAgICB0cnVlKTtcbiAgICAgIHZhciByZXN1bHQ7XG5cbiAgICAgIGlmIChmbikge1xuICAgICAgICByZXN1bHQgPSBmbi5hcHBseSh2aXNpdG9yLCBhcmd1bWVudHMpO1xuICAgICAgfVxuXG4gICAgICB0eXBlSW5mby5sZWF2ZShub2RlKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICB9O1xufVxuIiwiaW1wb3J0IGRldkFzc2VydCBmcm9tIFwiLi4vanN1dGlscy9kZXZBc3NlcnQubWpzXCI7XG5pbXBvcnQgeyBHcmFwaFFMRXJyb3IgfSBmcm9tIFwiLi4vZXJyb3IvR3JhcGhRTEVycm9yLm1qc1wiO1xudmFyIE5BTUVfUlggPSAvXltfYS16QS1aXVtfYS16QS1aMC05XSokLztcbi8qKlxuICogVXBob2xkcyB0aGUgc3BlYyBydWxlcyBhYm91dCBuYW1pbmcuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydFZhbGlkTmFtZShuYW1lKSB7XG4gIHZhciBlcnJvciA9IGlzVmFsaWROYW1lRXJyb3IobmFtZSk7XG5cbiAgaWYgKGVycm9yKSB7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cblxuICByZXR1cm4gbmFtZTtcbn1cbi8qKlxuICogUmV0dXJucyBhbiBFcnJvciBpZiBhIG5hbWUgaXMgaW52YWxpZC5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaXNWYWxpZE5hbWVFcnJvcihuYW1lKSB7XG4gIHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJyB8fCBkZXZBc3NlcnQoMCwgJ0V4cGVjdGVkIG5hbWUgdG8gYmUgYSBzdHJpbmcuJyk7XG5cbiAgaWYgKG5hbWUubGVuZ3RoID4gMSAmJiBuYW1lWzBdID09PSAnXycgJiYgbmFtZVsxXSA9PT0gJ18nKSB7XG4gICAgcmV0dXJuIG5ldyBHcmFwaFFMRXJyb3IoXCJOYW1lIFxcXCJcIi5jb25jYXQobmFtZSwgXCJcXFwiIG11c3Qgbm90IGJlZ2luIHdpdGggXFxcIl9fXFxcIiwgd2hpY2ggaXMgcmVzZXJ2ZWQgYnkgR3JhcGhRTCBpbnRyb3NwZWN0aW9uLlwiKSk7XG4gIH1cblxuICBpZiAoIU5BTUVfUlgudGVzdChuYW1lKSkge1xuICAgIHJldHVybiBuZXcgR3JhcGhRTEVycm9yKFwiTmFtZXMgbXVzdCBtYXRjaCAvXltfYS16QS1aXVtfYS16QS1aMC05XSokLyBidXQgXFxcIlwiLmNvbmNhdChuYW1lLCBcIlxcXCIgZG9lcyBub3QuXCIpKTtcbiAgfVxufVxuIiwiaW1wb3J0IGlzRmluaXRlIGZyb20gXCIuLi9wb2x5ZmlsbHMvaXNGaW5pdGUubWpzXCI7XG5pbXBvcnQgb2JqZWN0VmFsdWVzIGZyb20gXCIuLi9wb2x5ZmlsbHMvb2JqZWN0VmFsdWVzLm1qc1wiO1xuaW1wb3J0IGluc3BlY3QgZnJvbSBcIi4uL2pzdXRpbHMvaW5zcGVjdC5tanNcIjtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcIi4uL2pzdXRpbHMvaW52YXJpYW50Lm1qc1wiO1xuaW1wb3J0IGlzT2JqZWN0TGlrZSBmcm9tIFwiLi4vanN1dGlscy9pc09iamVjdExpa2UubWpzXCI7XG5pbXBvcnQgc2FmZUFycmF5RnJvbSBmcm9tIFwiLi4vanN1dGlscy9zYWZlQXJyYXlGcm9tLm1qc1wiO1xuaW1wb3J0IHsgS2luZCB9IGZyb20gXCIuLi9sYW5ndWFnZS9raW5kcy5tanNcIjtcbmltcG9ydCB7IEdyYXBoUUxJRCB9IGZyb20gXCIuLi90eXBlL3NjYWxhcnMubWpzXCI7XG5pbXBvcnQgeyBpc0xlYWZUeXBlLCBpc0VudW1UeXBlLCBpc0lucHV0T2JqZWN0VHlwZSwgaXNMaXN0VHlwZSwgaXNOb25OdWxsVHlwZSB9IGZyb20gXCIuLi90eXBlL2RlZmluaXRpb24ubWpzXCI7XG4vKipcbiAqIFByb2R1Y2VzIGEgR3JhcGhRTCBWYWx1ZSBBU1QgZ2l2ZW4gYSBKYXZhU2NyaXB0IG9iamVjdC5cbiAqIEZ1bmN0aW9uIHdpbGwgbWF0Y2ggSmF2YVNjcmlwdC9KU09OIHZhbHVlcyB0byBHcmFwaFFMIEFTVCBzY2hlbWEgZm9ybWF0XG4gKiBieSB1c2luZyBzdWdnZXN0ZWQgR3JhcGhRTElucHV0VHlwZS4gRm9yIGV4YW1wbGU6XG4gKlxuICogICAgIGFzdEZyb21WYWx1ZShcInZhbHVlXCIsIEdyYXBoUUxTdHJpbmcpXG4gKlxuICogQSBHcmFwaFFMIHR5cGUgbXVzdCBiZSBwcm92aWRlZCwgd2hpY2ggd2lsbCBiZSB1c2VkIHRvIGludGVycHJldCBkaWZmZXJlbnRcbiAqIEphdmFTY3JpcHQgdmFsdWVzLlxuICpcbiAqIHwgSlNPTiBWYWx1ZSAgICB8IEdyYXBoUUwgVmFsdWUgICAgICAgIHxcbiAqIHwgLS0tLS0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tIHxcbiAqIHwgT2JqZWN0ICAgICAgICB8IElucHV0IE9iamVjdCAgICAgICAgIHxcbiAqIHwgQXJyYXkgICAgICAgICB8IExpc3QgICAgICAgICAgICAgICAgIHxcbiAqIHwgQm9vbGVhbiAgICAgICB8IEJvb2xlYW4gICAgICAgICAgICAgIHxcbiAqIHwgU3RyaW5nICAgICAgICB8IFN0cmluZyAvIEVudW0gVmFsdWUgIHxcbiAqIHwgTnVtYmVyICAgICAgICB8IEludCAvIEZsb2F0ICAgICAgICAgIHxcbiAqIHwgTWl4ZWQgICAgICAgICB8IEVudW0gVmFsdWUgICAgICAgICAgIHxcbiAqIHwgbnVsbCAgICAgICAgICB8IE51bGxWYWx1ZSAgICAgICAgICAgIHxcbiAqXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGFzdEZyb21WYWx1ZSh2YWx1ZSwgdHlwZSkge1xuICBpZiAoaXNOb25OdWxsVHlwZSh0eXBlKSkge1xuICAgIHZhciBhc3RWYWx1ZSA9IGFzdEZyb21WYWx1ZSh2YWx1ZSwgdHlwZS5vZlR5cGUpO1xuXG4gICAgaWYgKChhc3RWYWx1ZSA9PT0gbnVsbCB8fCBhc3RWYWx1ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogYXN0VmFsdWUua2luZCkgPT09IEtpbmQuTlVMTCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFzdFZhbHVlO1xuICB9IC8vIG9ubHkgZXhwbGljaXQgbnVsbCwgbm90IHVuZGVmaW5lZCwgTmFOXG5cblxuICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICByZXR1cm4ge1xuICAgICAga2luZDogS2luZC5OVUxMXG4gICAgfTtcbiAgfSAvLyB1bmRlZmluZWRcblxuXG4gIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH0gLy8gQ29udmVydCBKYXZhU2NyaXB0IGFycmF5IHRvIEdyYXBoUUwgbGlzdC4gSWYgdGhlIEdyYXBoUUxUeXBlIGlzIGEgbGlzdCwgYnV0XG4gIC8vIHRoZSB2YWx1ZSBpcyBub3QgYW4gYXJyYXksIGNvbnZlcnQgdGhlIHZhbHVlIHVzaW5nIHRoZSBsaXN0J3MgaXRlbSB0eXBlLlxuXG5cbiAgaWYgKGlzTGlzdFR5cGUodHlwZSkpIHtcbiAgICB2YXIgaXRlbVR5cGUgPSB0eXBlLm9mVHlwZTtcbiAgICB2YXIgaXRlbXMgPSBzYWZlQXJyYXlGcm9tKHZhbHVlKTtcblxuICAgIGlmIChpdGVtcyAhPSBudWxsKSB7XG4gICAgICB2YXIgdmFsdWVzTm9kZXMgPSBbXTtcblxuICAgICAgZm9yICh2YXIgX2kyID0gMDsgX2kyIDwgaXRlbXMubGVuZ3RoOyBfaTIrKykge1xuICAgICAgICB2YXIgaXRlbSA9IGl0ZW1zW19pMl07XG4gICAgICAgIHZhciBpdGVtTm9kZSA9IGFzdEZyb21WYWx1ZShpdGVtLCBpdGVtVHlwZSk7XG5cbiAgICAgICAgaWYgKGl0ZW1Ob2RlICE9IG51bGwpIHtcbiAgICAgICAgICB2YWx1ZXNOb2Rlcy5wdXNoKGl0ZW1Ob2RlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBraW5kOiBLaW5kLkxJU1QsXG4gICAgICAgIHZhbHVlczogdmFsdWVzTm9kZXNcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIGFzdEZyb21WYWx1ZSh2YWx1ZSwgaXRlbVR5cGUpO1xuICB9IC8vIFBvcHVsYXRlIHRoZSBmaWVsZHMgb2YgdGhlIGlucHV0IG9iamVjdCBieSBjcmVhdGluZyBBU1RzIGZyb20gZWFjaCB2YWx1ZVxuICAvLyBpbiB0aGUgSmF2YVNjcmlwdCBvYmplY3QgYWNjb3JkaW5nIHRvIHRoZSBmaWVsZHMgaW4gdGhlIGlucHV0IHR5cGUuXG5cblxuICBpZiAoaXNJbnB1dE9iamVjdFR5cGUodHlwZSkpIHtcbiAgICBpZiAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBmaWVsZE5vZGVzID0gW107XG5cbiAgICBmb3IgKHZhciBfaTQgPSAwLCBfb2JqZWN0VmFsdWVzMiA9IG9iamVjdFZhbHVlcyh0eXBlLmdldEZpZWxkcygpKTsgX2k0IDwgX29iamVjdFZhbHVlczIubGVuZ3RoOyBfaTQrKykge1xuICAgICAgdmFyIGZpZWxkID0gX29iamVjdFZhbHVlczJbX2k0XTtcbiAgICAgIHZhciBmaWVsZFZhbHVlID0gYXN0RnJvbVZhbHVlKHZhbHVlW2ZpZWxkLm5hbWVdLCBmaWVsZC50eXBlKTtcblxuICAgICAgaWYgKGZpZWxkVmFsdWUpIHtcbiAgICAgICAgZmllbGROb2Rlcy5wdXNoKHtcbiAgICAgICAgICBraW5kOiBLaW5kLk9CSkVDVF9GSUVMRCxcbiAgICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICBraW5kOiBLaW5kLk5BTUUsXG4gICAgICAgICAgICB2YWx1ZTogZmllbGQubmFtZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgdmFsdWU6IGZpZWxkVmFsdWVcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGtpbmQ6IEtpbmQuT0JKRUNULFxuICAgICAgZmllbGRzOiBmaWVsZE5vZGVzXG4gICAgfTtcbiAgfSAvLyBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAoU2VlOiAnaHR0cHM6Ly9naXRodWIuY29tL2dyYXBocWwvZ3JhcGhxbC1qcy9pc3N1ZXMvMjYxOCcpXG5cblxuICBpZiAoaXNMZWFmVHlwZSh0eXBlKSkge1xuICAgIC8vIFNpbmNlIHZhbHVlIGlzIGFuIGludGVybmFsbHkgcmVwcmVzZW50ZWQgdmFsdWUsIGl0IG11c3QgYmUgc2VyaWFsaXplZFxuICAgIC8vIHRvIGFuIGV4dGVybmFsbHkgcmVwcmVzZW50ZWQgdmFsdWUgYmVmb3JlIGNvbnZlcnRpbmcgaW50byBhbiBBU1QuXG4gICAgdmFyIHNlcmlhbGl6ZWQgPSB0eXBlLnNlcmlhbGl6ZSh2YWx1ZSk7XG5cbiAgICBpZiAoc2VyaWFsaXplZCA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9IC8vIE90aGVycyBzZXJpYWxpemUgYmFzZWQgb24gdGhlaXIgY29ycmVzcG9uZGluZyBKYXZhU2NyaXB0IHNjYWxhciB0eXBlcy5cblxuXG4gICAgaWYgKHR5cGVvZiBzZXJpYWxpemVkID09PSAnYm9vbGVhbicpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGtpbmQ6IEtpbmQuQk9PTEVBTixcbiAgICAgICAgdmFsdWU6IHNlcmlhbGl6ZWRcbiAgICAgIH07XG4gICAgfSAvLyBKYXZhU2NyaXB0IG51bWJlcnMgY2FuIGJlIEludCBvciBGbG9hdCB2YWx1ZXMuXG5cblxuICAgIGlmICh0eXBlb2Ygc2VyaWFsaXplZCA9PT0gJ251bWJlcicgJiYgaXNGaW5pdGUoc2VyaWFsaXplZCkpIHtcbiAgICAgIHZhciBzdHJpbmdOdW0gPSBTdHJpbmcoc2VyaWFsaXplZCk7XG4gICAgICByZXR1cm4gaW50ZWdlclN0cmluZ1JlZ0V4cC50ZXN0KHN0cmluZ051bSkgPyB7XG4gICAgICAgIGtpbmQ6IEtpbmQuSU5ULFxuICAgICAgICB2YWx1ZTogc3RyaW5nTnVtXG4gICAgICB9IDoge1xuICAgICAgICBraW5kOiBLaW5kLkZMT0FULFxuICAgICAgICB2YWx1ZTogc3RyaW5nTnVtXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygc2VyaWFsaXplZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIC8vIEVudW0gdHlwZXMgdXNlIEVudW0gbGl0ZXJhbHMuXG4gICAgICBpZiAoaXNFbnVtVHlwZSh0eXBlKSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGtpbmQ6IEtpbmQuRU5VTSxcbiAgICAgICAgICB2YWx1ZTogc2VyaWFsaXplZFxuICAgICAgICB9O1xuICAgICAgfSAvLyBJRCB0eXBlcyBjYW4gdXNlIEludCBsaXRlcmFscy5cblxuXG4gICAgICBpZiAodHlwZSA9PT0gR3JhcGhRTElEICYmIGludGVnZXJTdHJpbmdSZWdFeHAudGVzdChzZXJpYWxpemVkKSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGtpbmQ6IEtpbmQuSU5ULFxuICAgICAgICAgIHZhbHVlOiBzZXJpYWxpemVkXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGtpbmQ6IEtpbmQuU1RSSU5HLFxuICAgICAgICB2YWx1ZTogc2VyaWFsaXplZFxuICAgICAgfTtcbiAgICB9XG5cbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNvbnZlcnQgdmFsdWUgdG8gQVNUOiBcIi5jb25jYXQoaW5zcGVjdChzZXJpYWxpemVkKSwgXCIuXCIpKTtcbiAgfSAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAoTm90IHJlYWNoYWJsZS4gQWxsIHBvc3NpYmxlIGlucHV0IHR5cGVzIGhhdmUgYmVlbiBjb25zaWRlcmVkKVxuXG5cbiAgZmFsc2UgfHwgaW52YXJpYW50KDAsICdVbmV4cGVjdGVkIGlucHV0IHR5cGU6ICcgKyBpbnNwZWN0KHR5cGUpKTtcbn1cbi8qKlxuICogSW50VmFsdWU6XG4gKiAgIC0gTmVnYXRpdmVTaWduPyAwXG4gKiAgIC0gTmVnYXRpdmVTaWduPyBOb25aZXJvRGlnaXQgKCBEaWdpdCsgKT9cbiAqL1xuXG52YXIgaW50ZWdlclN0cmluZ1JlZ0V4cCA9IC9eLT8oPzowfFsxLTldWzAtOV0qKSQvO1xuIiwiaW1wb3J0IGRldkFzc2VydCBmcm9tIFwiLi4vanN1dGlscy9kZXZBc3NlcnQubWpzXCI7XG5pbXBvcnQgeyBLaW5kIH0gZnJvbSBcIi4uL2xhbmd1YWdlL2tpbmRzLm1qc1wiO1xuaW1wb3J0IHsgcGFyc2UgfSBmcm9tIFwiLi4vbGFuZ3VhZ2UvcGFyc2VyLm1qc1wiO1xuaW1wb3J0IHsgYXNzZXJ0VmFsaWRTREwgfSBmcm9tIFwiLi4vdmFsaWRhdGlvbi92YWxpZGF0ZS5tanNcIjtcbmltcG9ydCB7IEdyYXBoUUxTY2hlbWEgfSBmcm9tIFwiLi4vdHlwZS9zY2hlbWEubWpzXCI7XG5pbXBvcnQgeyBzcGVjaWZpZWREaXJlY3RpdmVzIH0gZnJvbSBcIi4uL3R5cGUvZGlyZWN0aXZlcy5tanNcIjtcbmltcG9ydCB7IGV4dGVuZFNjaGVtYUltcGwgfSBmcm9tIFwiLi9leHRlbmRTY2hlbWEubWpzXCI7XG5cbi8qKlxuICogVGhpcyB0YWtlcyB0aGUgYXN0IG9mIGEgc2NoZW1hIGRvY3VtZW50IHByb2R1Y2VkIGJ5IHRoZSBwYXJzZSBmdW5jdGlvbiBpblxuICogc3JjL2xhbmd1YWdlL3BhcnNlci5qcy5cbiAqXG4gKiBJZiBubyBzY2hlbWEgZGVmaW5pdGlvbiBpcyBwcm92aWRlZCwgdGhlbiBpdCB3aWxsIGxvb2sgZm9yIHR5cGVzIG5hbWVkIFF1ZXJ5XG4gKiBhbmQgTXV0YXRpb24uXG4gKlxuICogR2l2ZW4gdGhhdCBBU1QgaXQgY29uc3RydWN0cyBhIEdyYXBoUUxTY2hlbWEuIFRoZSByZXN1bHRpbmcgc2NoZW1hXG4gKiBoYXMgbm8gcmVzb2x2ZSBtZXRob2RzLCBzbyBleGVjdXRpb24gd2lsbCB1c2UgZGVmYXVsdCByZXNvbHZlcnMuXG4gKlxuICogQWNjZXB0cyBvcHRpb25zIGFzIGEgc2Vjb25kIGFyZ3VtZW50OlxuICpcbiAqICAgIC0gY29tbWVudERlc2NyaXB0aW9uczpcbiAqICAgICAgICBQcm92aWRlIHRydWUgdG8gdXNlIHByZWNlZGluZyBjb21tZW50cyBhcyB0aGUgZGVzY3JpcHRpb24uXG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gYnVpbGRBU1RTY2hlbWEoZG9jdW1lbnRBU1QsIG9wdGlvbnMpIHtcbiAgZG9jdW1lbnRBU1QgIT0gbnVsbCAmJiBkb2N1bWVudEFTVC5raW5kID09PSBLaW5kLkRPQ1VNRU5UIHx8IGRldkFzc2VydCgwLCAnTXVzdCBwcm92aWRlIHZhbGlkIERvY3VtZW50IEFTVC4nKTtcblxuICBpZiAoKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5hc3N1bWVWYWxpZCkgIT09IHRydWUgJiYgKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5hc3N1bWVWYWxpZFNETCkgIT09IHRydWUpIHtcbiAgICBhc3NlcnRWYWxpZFNETChkb2N1bWVudEFTVCk7XG4gIH1cblxuICB2YXIgZW1wdHlTY2hlbWFDb25maWcgPSB7XG4gICAgZGVzY3JpcHRpb246IHVuZGVmaW5lZCxcbiAgICB0eXBlczogW10sXG4gICAgZGlyZWN0aXZlczogW10sXG4gICAgZXh0ZW5zaW9uczogdW5kZWZpbmVkLFxuICAgIGV4dGVuc2lvbkFTVE5vZGVzOiBbXSxcbiAgICBhc3N1bWVWYWxpZDogZmFsc2VcbiAgfTtcbiAgdmFyIGNvbmZpZyA9IGV4dGVuZFNjaGVtYUltcGwoZW1wdHlTY2hlbWFDb25maWcsIGRvY3VtZW50QVNULCBvcHRpb25zKTtcblxuICBpZiAoY29uZmlnLmFzdE5vZGUgPT0gbnVsbCkge1xuICAgIGZvciAodmFyIF9pMiA9IDAsIF9jb25maWckdHlwZXMyID0gY29uZmlnLnR5cGVzOyBfaTIgPCBfY29uZmlnJHR5cGVzMi5sZW5ndGg7IF9pMisrKSB7XG4gICAgICB2YXIgdHlwZSA9IF9jb25maWckdHlwZXMyW19pMl07XG5cbiAgICAgIHN3aXRjaCAodHlwZS5uYW1lKSB7XG4gICAgICAgIC8vIE5vdGU6IFdoaWxlIHRoaXMgY291bGQgbWFrZSBlYXJseSBhc3NlcnRpb25zIHRvIGdldCB0aGUgY29ycmVjdGx5XG4gICAgICAgIC8vIHR5cGVkIHZhbHVlcyBiZWxvdywgdGhhdCB3b3VsZCB0aHJvdyBpbW1lZGlhdGVseSB3aGlsZSB0eXBlIHN5c3RlbVxuICAgICAgICAvLyB2YWxpZGF0aW9uIHdpdGggdmFsaWRhdGVTY2hlbWEoKSB3aWxsIHByb2R1Y2UgbW9yZSBhY3Rpb25hYmxlIHJlc3VsdHMuXG4gICAgICAgIGNhc2UgJ1F1ZXJ5JzpcbiAgICAgICAgICBjb25maWcucXVlcnkgPSB0eXBlO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ011dGF0aW9uJzpcbiAgICAgICAgICBjb25maWcubXV0YXRpb24gPSB0eXBlO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ1N1YnNjcmlwdGlvbic6XG4gICAgICAgICAgY29uZmlnLnN1YnNjcmlwdGlvbiA9IHR5cGU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIGRpcmVjdGl2ZXMgPSBjb25maWcuZGlyZWN0aXZlczsgLy8gSWYgc3BlY2lmaWVkIGRpcmVjdGl2ZXMgd2VyZSBub3QgZXhwbGljaXRseSBkZWNsYXJlZCwgYWRkIHRoZW0uXG5cbiAgdmFyIF9sb29wID0gZnVuY3Rpb24gX2xvb3AoX2k0KSB7XG4gICAgdmFyIHN0ZERpcmVjdGl2ZSA9IHNwZWNpZmllZERpcmVjdGl2ZXNbX2k0XTtcblxuICAgIGlmIChkaXJlY3RpdmVzLmV2ZXJ5KGZ1bmN0aW9uIChkaXJlY3RpdmUpIHtcbiAgICAgIHJldHVybiBkaXJlY3RpdmUubmFtZSAhPT0gc3RkRGlyZWN0aXZlLm5hbWU7XG4gICAgfSkpIHtcbiAgICAgIGRpcmVjdGl2ZXMucHVzaChzdGREaXJlY3RpdmUpO1xuICAgIH1cbiAgfTtcblxuICBmb3IgKHZhciBfaTQgPSAwOyBfaTQgPCBzcGVjaWZpZWREaXJlY3RpdmVzLmxlbmd0aDsgX2k0KyspIHtcbiAgICBfbG9vcChfaTQpO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBHcmFwaFFMU2NoZW1hKGNvbmZpZyk7XG59XG4vKipcbiAqIEEgaGVscGVyIGZ1bmN0aW9uIHRvIGJ1aWxkIGEgR3JhcGhRTFNjaGVtYSBkaXJlY3RseSBmcm9tIGEgc291cmNlXG4gKiBkb2N1bWVudC5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gYnVpbGRTY2hlbWEoc291cmNlLCBvcHRpb25zKSB7XG4gIHZhciBkb2N1bWVudCA9IHBhcnNlKHNvdXJjZSwge1xuICAgIG5vTG9jYXRpb246IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5ub0xvY2F0aW9uLFxuICAgIGFsbG93TGVnYWN5U0RMRW1wdHlGaWVsZHM6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5hbGxvd0xlZ2FjeVNETEVtcHR5RmllbGRzLFxuICAgIGFsbG93TGVnYWN5U0RMSW1wbGVtZW50c0ludGVyZmFjZXM6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5hbGxvd0xlZ2FjeVNETEltcGxlbWVudHNJbnRlcmZhY2VzLFxuICAgIGV4cGVyaW1lbnRhbEZyYWdtZW50VmFyaWFibGVzOiBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZXhwZXJpbWVudGFsRnJhZ21lbnRWYXJpYWJsZXNcbiAgfSk7XG4gIHJldHVybiBidWlsZEFTVFNjaGVtYShkb2N1bWVudCwge1xuICAgIGNvbW1lbnREZXNjcmlwdGlvbnM6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5jb21tZW50RGVzY3JpcHRpb25zLFxuICAgIGFzc3VtZVZhbGlkU0RMOiBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuYXNzdW1lVmFsaWRTREwsXG4gICAgYXNzdW1lVmFsaWQ6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5hc3N1bWVWYWxpZFxuICB9KTtcbn1cbiIsImltcG9ydCBvYmplY3RWYWx1ZXMgZnJvbSBcIi4uL3BvbHlmaWxscy9vYmplY3RWYWx1ZXMubWpzXCI7XG5pbXBvcnQgaW5zcGVjdCBmcm9tIFwiLi4vanN1dGlscy9pbnNwZWN0Lm1qc1wiO1xuaW1wb3J0IGRldkFzc2VydCBmcm9tIFwiLi4vanN1dGlscy9kZXZBc3NlcnQubWpzXCI7XG5pbXBvcnQga2V5VmFsTWFwIGZyb20gXCIuLi9qc3V0aWxzL2tleVZhbE1hcC5tanNcIjtcbmltcG9ydCBpc09iamVjdExpa2UgZnJvbSBcIi4uL2pzdXRpbHMvaXNPYmplY3RMaWtlLm1qc1wiO1xuaW1wb3J0IHsgcGFyc2VWYWx1ZSB9IGZyb20gXCIuLi9sYW5ndWFnZS9wYXJzZXIubWpzXCI7XG5pbXBvcnQgeyBHcmFwaFFMU2NoZW1hIH0gZnJvbSBcIi4uL3R5cGUvc2NoZW1hLm1qc1wiO1xuaW1wb3J0IHsgR3JhcGhRTERpcmVjdGl2ZSB9IGZyb20gXCIuLi90eXBlL2RpcmVjdGl2ZXMubWpzXCI7XG5pbXBvcnQgeyBzcGVjaWZpZWRTY2FsYXJUeXBlcyB9IGZyb20gXCIuLi90eXBlL3NjYWxhcnMubWpzXCI7XG5pbXBvcnQgeyBpbnRyb3NwZWN0aW9uVHlwZXMsIFR5cGVLaW5kIH0gZnJvbSBcIi4uL3R5cGUvaW50cm9zcGVjdGlvbi5tanNcIjtcbmltcG9ydCB7IGlzSW5wdXRUeXBlLCBpc091dHB1dFR5cGUsIEdyYXBoUUxMaXN0LCBHcmFwaFFMTm9uTnVsbCwgR3JhcGhRTFNjYWxhclR5cGUsIEdyYXBoUUxPYmplY3RUeXBlLCBHcmFwaFFMSW50ZXJmYWNlVHlwZSwgR3JhcGhRTFVuaW9uVHlwZSwgR3JhcGhRTEVudW1UeXBlLCBHcmFwaFFMSW5wdXRPYmplY3RUeXBlLCBhc3NlcnROdWxsYWJsZVR5cGUsIGFzc2VydE9iamVjdFR5cGUsIGFzc2VydEludGVyZmFjZVR5cGUgfSBmcm9tIFwiLi4vdHlwZS9kZWZpbml0aW9uLm1qc1wiO1xuaW1wb3J0IHsgdmFsdWVGcm9tQVNUIH0gZnJvbSBcIi4vdmFsdWVGcm9tQVNULm1qc1wiO1xuLyoqXG4gKiBCdWlsZCBhIEdyYXBoUUxTY2hlbWEgZm9yIHVzZSBieSBjbGllbnQgdG9vbHMuXG4gKlxuICogR2l2ZW4gdGhlIHJlc3VsdCBvZiBhIGNsaWVudCBydW5uaW5nIHRoZSBpbnRyb3NwZWN0aW9uIHF1ZXJ5LCBjcmVhdGVzIGFuZFxuICogcmV0dXJucyBhIEdyYXBoUUxTY2hlbWEgaW5zdGFuY2Ugd2hpY2ggY2FuIGJlIHRoZW4gdXNlZCB3aXRoIGFsbCBncmFwaHFsLWpzXG4gKiB0b29scywgYnV0IGNhbm5vdCBiZSB1c2VkIHRvIGV4ZWN1dGUgYSBxdWVyeSwgYXMgaW50cm9zcGVjdGlvbiBkb2VzIG5vdFxuICogcmVwcmVzZW50IHRoZSBcInJlc29sdmVyXCIsIFwicGFyc2VcIiBvciBcInNlcmlhbGl6ZVwiIGZ1bmN0aW9ucyBvciBhbnkgb3RoZXJcbiAqIHNlcnZlci1pbnRlcm5hbCBtZWNoYW5pc21zLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gZXhwZWN0cyBhIGNvbXBsZXRlIGludHJvc3BlY3Rpb24gcmVzdWx0LiBEb24ndCBmb3JnZXQgdG8gY2hlY2tcbiAqIHRoZSBcImVycm9yc1wiIGZpZWxkIG9mIGEgc2VydmVyIHJlc3BvbnNlIGJlZm9yZSBjYWxsaW5nIHRoaXMgZnVuY3Rpb24uXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkQ2xpZW50U2NoZW1hKGludHJvc3BlY3Rpb24sIG9wdGlvbnMpIHtcbiAgaXNPYmplY3RMaWtlKGludHJvc3BlY3Rpb24pICYmIGlzT2JqZWN0TGlrZShpbnRyb3NwZWN0aW9uLl9fc2NoZW1hKSB8fCBkZXZBc3NlcnQoMCwgXCJJbnZhbGlkIG9yIGluY29tcGxldGUgaW50cm9zcGVjdGlvbiByZXN1bHQuIEVuc3VyZSB0aGF0IHlvdSBhcmUgcGFzc2luZyBcXFwiZGF0YVxcXCIgcHJvcGVydHkgb2YgaW50cm9zcGVjdGlvbiByZXNwb25zZSBhbmQgbm8gXFxcImVycm9yc1xcXCIgd2FzIHJldHVybmVkIGFsb25nc2lkZTogXCIuY29uY2F0KGluc3BlY3QoaW50cm9zcGVjdGlvbiksIFwiLlwiKSk7IC8vIEdldCB0aGUgc2NoZW1hIGZyb20gdGhlIGludHJvc3BlY3Rpb24gcmVzdWx0LlxuXG4gIHZhciBzY2hlbWFJbnRyb3NwZWN0aW9uID0gaW50cm9zcGVjdGlvbi5fX3NjaGVtYTsgLy8gSXRlcmF0ZSB0aHJvdWdoIGFsbCB0eXBlcywgZ2V0dGluZyB0aGUgdHlwZSBkZWZpbml0aW9uIGZvciBlYWNoLlxuXG4gIHZhciB0eXBlTWFwID0ga2V5VmFsTWFwKHNjaGVtYUludHJvc3BlY3Rpb24udHlwZXMsIGZ1bmN0aW9uICh0eXBlSW50cm9zcGVjdGlvbikge1xuICAgIHJldHVybiB0eXBlSW50cm9zcGVjdGlvbi5uYW1lO1xuICB9LCBmdW5jdGlvbiAodHlwZUludHJvc3BlY3Rpb24pIHtcbiAgICByZXR1cm4gYnVpbGRUeXBlKHR5cGVJbnRyb3NwZWN0aW9uKTtcbiAgfSk7IC8vIEluY2x1ZGUgc3RhbmRhcmQgdHlwZXMgb25seSBpZiB0aGV5IGFyZSB1c2VkLlxuXG4gIGZvciAodmFyIF9pMiA9IDAsIF9yZWYyID0gW10uY29uY2F0KHNwZWNpZmllZFNjYWxhclR5cGVzLCBpbnRyb3NwZWN0aW9uVHlwZXMpOyBfaTIgPCBfcmVmMi5sZW5ndGg7IF9pMisrKSB7XG4gICAgdmFyIHN0ZFR5cGUgPSBfcmVmMltfaTJdO1xuXG4gICAgaWYgKHR5cGVNYXBbc3RkVHlwZS5uYW1lXSkge1xuICAgICAgdHlwZU1hcFtzdGRUeXBlLm5hbWVdID0gc3RkVHlwZTtcbiAgICB9XG4gIH0gLy8gR2V0IHRoZSByb290IFF1ZXJ5LCBNdXRhdGlvbiwgYW5kIFN1YnNjcmlwdGlvbiB0eXBlcy5cblxuXG4gIHZhciBxdWVyeVR5cGUgPSBzY2hlbWFJbnRyb3NwZWN0aW9uLnF1ZXJ5VHlwZSA/IGdldE9iamVjdFR5cGUoc2NoZW1hSW50cm9zcGVjdGlvbi5xdWVyeVR5cGUpIDogbnVsbDtcbiAgdmFyIG11dGF0aW9uVHlwZSA9IHNjaGVtYUludHJvc3BlY3Rpb24ubXV0YXRpb25UeXBlID8gZ2V0T2JqZWN0VHlwZShzY2hlbWFJbnRyb3NwZWN0aW9uLm11dGF0aW9uVHlwZSkgOiBudWxsO1xuICB2YXIgc3Vic2NyaXB0aW9uVHlwZSA9IHNjaGVtYUludHJvc3BlY3Rpb24uc3Vic2NyaXB0aW9uVHlwZSA/IGdldE9iamVjdFR5cGUoc2NoZW1hSW50cm9zcGVjdGlvbi5zdWJzY3JpcHRpb25UeXBlKSA6IG51bGw7IC8vIEdldCB0aGUgZGlyZWN0aXZlcyBzdXBwb3J0ZWQgYnkgSW50cm9zcGVjdGlvbiwgYXNzdW1pbmcgZW1wdHktc2V0IGlmXG4gIC8vIGRpcmVjdGl2ZXMgd2VyZSBub3QgcXVlcmllZCBmb3IuXG5cbiAgdmFyIGRpcmVjdGl2ZXMgPSBzY2hlbWFJbnRyb3NwZWN0aW9uLmRpcmVjdGl2ZXMgPyBzY2hlbWFJbnRyb3NwZWN0aW9uLmRpcmVjdGl2ZXMubWFwKGJ1aWxkRGlyZWN0aXZlKSA6IFtdOyAvLyBUaGVuIHByb2R1Y2UgYW5kIHJldHVybiBhIFNjaGVtYSB3aXRoIHRoZXNlIHR5cGVzLlxuXG4gIHJldHVybiBuZXcgR3JhcGhRTFNjaGVtYSh7XG4gICAgZGVzY3JpcHRpb246IHNjaGVtYUludHJvc3BlY3Rpb24uZGVzY3JpcHRpb24sXG4gICAgcXVlcnk6IHF1ZXJ5VHlwZSxcbiAgICBtdXRhdGlvbjogbXV0YXRpb25UeXBlLFxuICAgIHN1YnNjcmlwdGlvbjogc3Vic2NyaXB0aW9uVHlwZSxcbiAgICB0eXBlczogb2JqZWN0VmFsdWVzKHR5cGVNYXApLFxuICAgIGRpcmVjdGl2ZXM6IGRpcmVjdGl2ZXMsXG4gICAgYXNzdW1lVmFsaWQ6IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5hc3N1bWVWYWxpZFxuICB9KTsgLy8gR2l2ZW4gYSB0eXBlIHJlZmVyZW5jZSBpbiBpbnRyb3NwZWN0aW9uLCByZXR1cm4gdGhlIEdyYXBoUUxUeXBlIGluc3RhbmNlLlxuICAvLyBwcmVmZXJyaW5nIGNhY2hlZCBpbnN0YW5jZXMgYmVmb3JlIGJ1aWxkaW5nIG5ldyBpbnN0YW5jZXMuXG5cbiAgZnVuY3Rpb24gZ2V0VHlwZSh0eXBlUmVmKSB7XG4gICAgaWYgKHR5cGVSZWYua2luZCA9PT0gVHlwZUtpbmQuTElTVCkge1xuICAgICAgdmFyIGl0ZW1SZWYgPSB0eXBlUmVmLm9mVHlwZTtcblxuICAgICAgaWYgKCFpdGVtUmVmKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRGVjb3JhdGVkIHR5cGUgZGVlcGVyIHRoYW4gaW50cm9zcGVjdGlvbiBxdWVyeS4nKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ldyBHcmFwaFFMTGlzdChnZXRUeXBlKGl0ZW1SZWYpKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZVJlZi5raW5kID09PSBUeXBlS2luZC5OT05fTlVMTCkge1xuICAgICAgdmFyIG51bGxhYmxlUmVmID0gdHlwZVJlZi5vZlR5cGU7XG5cbiAgICAgIGlmICghbnVsbGFibGVSZWYpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdEZWNvcmF0ZWQgdHlwZSBkZWVwZXIgdGhhbiBpbnRyb3NwZWN0aW9uIHF1ZXJ5LicpO1xuICAgICAgfVxuXG4gICAgICB2YXIgbnVsbGFibGVUeXBlID0gZ2V0VHlwZShudWxsYWJsZVJlZik7XG4gICAgICByZXR1cm4gbmV3IEdyYXBoUUxOb25OdWxsKGFzc2VydE51bGxhYmxlVHlwZShudWxsYWJsZVR5cGUpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZ2V0TmFtZWRUeXBlKHR5cGVSZWYpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0TmFtZWRUeXBlKHR5cGVSZWYpIHtcbiAgICB2YXIgdHlwZU5hbWUgPSB0eXBlUmVmLm5hbWU7XG5cbiAgICBpZiAoIXR5cGVOYW1lKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIHR5cGUgcmVmZXJlbmNlOiBcIi5jb25jYXQoaW5zcGVjdCh0eXBlUmVmKSwgXCIuXCIpKTtcbiAgICB9XG5cbiAgICB2YXIgdHlwZSA9IHR5cGVNYXBbdHlwZU5hbWVdO1xuXG4gICAgaWYgKCF0eXBlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIG9yIGluY29tcGxldGUgc2NoZW1hLCB1bmtub3duIHR5cGU6IFwiLmNvbmNhdCh0eXBlTmFtZSwgXCIuIEVuc3VyZSB0aGF0IGEgZnVsbCBpbnRyb3NwZWN0aW9uIHF1ZXJ5IGlzIHVzZWQgaW4gb3JkZXIgdG8gYnVpbGQgYSBjbGllbnQgc2NoZW1hLlwiKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHR5cGU7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRPYmplY3RUeXBlKHR5cGVSZWYpIHtcbiAgICByZXR1cm4gYXNzZXJ0T2JqZWN0VHlwZShnZXROYW1lZFR5cGUodHlwZVJlZikpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0SW50ZXJmYWNlVHlwZSh0eXBlUmVmKSB7XG4gICAgcmV0dXJuIGFzc2VydEludGVyZmFjZVR5cGUoZ2V0TmFtZWRUeXBlKHR5cGVSZWYpKTtcbiAgfSAvLyBHaXZlbiBhIHR5cGUncyBpbnRyb3NwZWN0aW9uIHJlc3VsdCwgY29uc3RydWN0IHRoZSBjb3JyZWN0XG4gIC8vIEdyYXBoUUxUeXBlIGluc3RhbmNlLlxuXG5cbiAgZnVuY3Rpb24gYnVpbGRUeXBlKHR5cGUpIHtcbiAgICBpZiAodHlwZSAhPSBudWxsICYmIHR5cGUubmFtZSAhPSBudWxsICYmIHR5cGUua2luZCAhPSBudWxsKSB7XG4gICAgICBzd2l0Y2ggKHR5cGUua2luZCkge1xuICAgICAgICBjYXNlIFR5cGVLaW5kLlNDQUxBUjpcbiAgICAgICAgICByZXR1cm4gYnVpbGRTY2FsYXJEZWYodHlwZSk7XG5cbiAgICAgICAgY2FzZSBUeXBlS2luZC5PQkpFQ1Q6XG4gICAgICAgICAgcmV0dXJuIGJ1aWxkT2JqZWN0RGVmKHR5cGUpO1xuXG4gICAgICAgIGNhc2UgVHlwZUtpbmQuSU5URVJGQUNFOlxuICAgICAgICAgIHJldHVybiBidWlsZEludGVyZmFjZURlZih0eXBlKTtcblxuICAgICAgICBjYXNlIFR5cGVLaW5kLlVOSU9OOlxuICAgICAgICAgIHJldHVybiBidWlsZFVuaW9uRGVmKHR5cGUpO1xuXG4gICAgICAgIGNhc2UgVHlwZUtpbmQuRU5VTTpcbiAgICAgICAgICByZXR1cm4gYnVpbGRFbnVtRGVmKHR5cGUpO1xuXG4gICAgICAgIGNhc2UgVHlwZUtpbmQuSU5QVVRfT0JKRUNUOlxuICAgICAgICAgIHJldHVybiBidWlsZElucHV0T2JqZWN0RGVmKHR5cGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciB0eXBlU3RyID0gaW5zcGVjdCh0eXBlKTtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIG9yIGluY29tcGxldGUgaW50cm9zcGVjdGlvbiByZXN1bHQuIEVuc3VyZSB0aGF0IGEgZnVsbCBpbnRyb3NwZWN0aW9uIHF1ZXJ5IGlzIHVzZWQgaW4gb3JkZXIgdG8gYnVpbGQgYSBjbGllbnQgc2NoZW1hOiBcIi5jb25jYXQodHlwZVN0ciwgXCIuXCIpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJ1aWxkU2NhbGFyRGVmKHNjYWxhckludHJvc3BlY3Rpb24pIHtcbiAgICByZXR1cm4gbmV3IEdyYXBoUUxTY2FsYXJUeXBlKHtcbiAgICAgIG5hbWU6IHNjYWxhckludHJvc3BlY3Rpb24ubmFtZSxcbiAgICAgIGRlc2NyaXB0aW9uOiBzY2FsYXJJbnRyb3NwZWN0aW9uLmRlc2NyaXB0aW9uLFxuICAgICAgc3BlY2lmaWVkQnlVcmw6IHNjYWxhckludHJvc3BlY3Rpb24uc3BlY2lmaWVkQnlVcmxcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJ1aWxkSW1wbGVtZW50YXRpb25zTGlzdChpbXBsZW1lbnRpbmdJbnRyb3NwZWN0aW9uKSB7XG4gICAgLy8gVE9ETzogVGVtcG9yYXJ5IHdvcmthcm91bmQgdW50aWwgR3JhcGhRTCBlY29zeXN0ZW0gd2lsbCBmdWxseSBzdXBwb3J0XG4gICAgLy8gJ2ludGVyZmFjZXMnIG9uIGludGVyZmFjZSB0eXBlcy5cbiAgICBpZiAoaW1wbGVtZW50aW5nSW50cm9zcGVjdGlvbi5pbnRlcmZhY2VzID09PSBudWxsICYmIGltcGxlbWVudGluZ0ludHJvc3BlY3Rpb24ua2luZCA9PT0gVHlwZUtpbmQuSU5URVJGQUNFKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgaWYgKCFpbXBsZW1lbnRpbmdJbnRyb3NwZWN0aW9uLmludGVyZmFjZXMpIHtcbiAgICAgIHZhciBpbXBsZW1lbnRpbmdJbnRyb3NwZWN0aW9uU3RyID0gaW5zcGVjdChpbXBsZW1lbnRpbmdJbnRyb3NwZWN0aW9uKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkludHJvc3BlY3Rpb24gcmVzdWx0IG1pc3NpbmcgaW50ZXJmYWNlczogXCIuY29uY2F0KGltcGxlbWVudGluZ0ludHJvc3BlY3Rpb25TdHIsIFwiLlwiKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGltcGxlbWVudGluZ0ludHJvc3BlY3Rpb24uaW50ZXJmYWNlcy5tYXAoZ2V0SW50ZXJmYWNlVHlwZSk7XG4gIH1cblxuICBmdW5jdGlvbiBidWlsZE9iamVjdERlZihvYmplY3RJbnRyb3NwZWN0aW9uKSB7XG4gICAgcmV0dXJuIG5ldyBHcmFwaFFMT2JqZWN0VHlwZSh7XG4gICAgICBuYW1lOiBvYmplY3RJbnRyb3NwZWN0aW9uLm5hbWUsXG4gICAgICBkZXNjcmlwdGlvbjogb2JqZWN0SW50cm9zcGVjdGlvbi5kZXNjcmlwdGlvbixcbiAgICAgIGludGVyZmFjZXM6IGZ1bmN0aW9uIGludGVyZmFjZXMoKSB7XG4gICAgICAgIHJldHVybiBidWlsZEltcGxlbWVudGF0aW9uc0xpc3Qob2JqZWN0SW50cm9zcGVjdGlvbik7XG4gICAgICB9LFxuICAgICAgZmllbGRzOiBmdW5jdGlvbiBmaWVsZHMoKSB7XG4gICAgICAgIHJldHVybiBidWlsZEZpZWxkRGVmTWFwKG9iamVjdEludHJvc3BlY3Rpb24pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gYnVpbGRJbnRlcmZhY2VEZWYoaW50ZXJmYWNlSW50cm9zcGVjdGlvbikge1xuICAgIHJldHVybiBuZXcgR3JhcGhRTEludGVyZmFjZVR5cGUoe1xuICAgICAgbmFtZTogaW50ZXJmYWNlSW50cm9zcGVjdGlvbi5uYW1lLFxuICAgICAgZGVzY3JpcHRpb246IGludGVyZmFjZUludHJvc3BlY3Rpb24uZGVzY3JpcHRpb24sXG4gICAgICBpbnRlcmZhY2VzOiBmdW5jdGlvbiBpbnRlcmZhY2VzKCkge1xuICAgICAgICByZXR1cm4gYnVpbGRJbXBsZW1lbnRhdGlvbnNMaXN0KGludGVyZmFjZUludHJvc3BlY3Rpb24pO1xuICAgICAgfSxcbiAgICAgIGZpZWxkczogZnVuY3Rpb24gZmllbGRzKCkge1xuICAgICAgICByZXR1cm4gYnVpbGRGaWVsZERlZk1hcChpbnRlcmZhY2VJbnRyb3NwZWN0aW9uKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJ1aWxkVW5pb25EZWYodW5pb25JbnRyb3NwZWN0aW9uKSB7XG4gICAgaWYgKCF1bmlvbkludHJvc3BlY3Rpb24ucG9zc2libGVUeXBlcykge1xuICAgICAgdmFyIHVuaW9uSW50cm9zcGVjdGlvblN0ciA9IGluc3BlY3QodW5pb25JbnRyb3NwZWN0aW9uKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkludHJvc3BlY3Rpb24gcmVzdWx0IG1pc3NpbmcgcG9zc2libGVUeXBlczogXCIuY29uY2F0KHVuaW9uSW50cm9zcGVjdGlvblN0ciwgXCIuXCIpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IEdyYXBoUUxVbmlvblR5cGUoe1xuICAgICAgbmFtZTogdW5pb25JbnRyb3NwZWN0aW9uLm5hbWUsXG4gICAgICBkZXNjcmlwdGlvbjogdW5pb25JbnRyb3NwZWN0aW9uLmRlc2NyaXB0aW9uLFxuICAgICAgdHlwZXM6IGZ1bmN0aW9uIHR5cGVzKCkge1xuICAgICAgICByZXR1cm4gdW5pb25JbnRyb3NwZWN0aW9uLnBvc3NpYmxlVHlwZXMubWFwKGdldE9iamVjdFR5cGUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gYnVpbGRFbnVtRGVmKGVudW1JbnRyb3NwZWN0aW9uKSB7XG4gICAgaWYgKCFlbnVtSW50cm9zcGVjdGlvbi5lbnVtVmFsdWVzKSB7XG4gICAgICB2YXIgZW51bUludHJvc3BlY3Rpb25TdHIgPSBpbnNwZWN0KGVudW1JbnRyb3NwZWN0aW9uKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkludHJvc3BlY3Rpb24gcmVzdWx0IG1pc3NpbmcgZW51bVZhbHVlczogXCIuY29uY2F0KGVudW1JbnRyb3NwZWN0aW9uU3RyLCBcIi5cIikpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgR3JhcGhRTEVudW1UeXBlKHtcbiAgICAgIG5hbWU6IGVudW1JbnRyb3NwZWN0aW9uLm5hbWUsXG4gICAgICBkZXNjcmlwdGlvbjogZW51bUludHJvc3BlY3Rpb24uZGVzY3JpcHRpb24sXG4gICAgICB2YWx1ZXM6IGtleVZhbE1hcChlbnVtSW50cm9zcGVjdGlvbi5lbnVtVmFsdWVzLCBmdW5jdGlvbiAodmFsdWVJbnRyb3NwZWN0aW9uKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZUludHJvc3BlY3Rpb24ubmFtZTtcbiAgICAgIH0sIGZ1bmN0aW9uICh2YWx1ZUludHJvc3BlY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkZXNjcmlwdGlvbjogdmFsdWVJbnRyb3NwZWN0aW9uLmRlc2NyaXB0aW9uLFxuICAgICAgICAgIGRlcHJlY2F0aW9uUmVhc29uOiB2YWx1ZUludHJvc3BlY3Rpb24uZGVwcmVjYXRpb25SZWFzb25cbiAgICAgICAgfTtcbiAgICAgIH0pXG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBidWlsZElucHV0T2JqZWN0RGVmKGlucHV0T2JqZWN0SW50cm9zcGVjdGlvbikge1xuICAgIGlmICghaW5wdXRPYmplY3RJbnRyb3NwZWN0aW9uLmlucHV0RmllbGRzKSB7XG4gICAgICB2YXIgaW5wdXRPYmplY3RJbnRyb3NwZWN0aW9uU3RyID0gaW5zcGVjdChpbnB1dE9iamVjdEludHJvc3BlY3Rpb24pO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW50cm9zcGVjdGlvbiByZXN1bHQgbWlzc2luZyBpbnB1dEZpZWxkczogXCIuY29uY2F0KGlucHV0T2JqZWN0SW50cm9zcGVjdGlvblN0ciwgXCIuXCIpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IEdyYXBoUUxJbnB1dE9iamVjdFR5cGUoe1xuICAgICAgbmFtZTogaW5wdXRPYmplY3RJbnRyb3NwZWN0aW9uLm5hbWUsXG4gICAgICBkZXNjcmlwdGlvbjogaW5wdXRPYmplY3RJbnRyb3NwZWN0aW9uLmRlc2NyaXB0aW9uLFxuICAgICAgZmllbGRzOiBmdW5jdGlvbiBmaWVsZHMoKSB7XG4gICAgICAgIHJldHVybiBidWlsZElucHV0VmFsdWVEZWZNYXAoaW5wdXRPYmplY3RJbnRyb3NwZWN0aW9uLmlucHV0RmllbGRzKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJ1aWxkRmllbGREZWZNYXAodHlwZUludHJvc3BlY3Rpb24pIHtcbiAgICBpZiAoIXR5cGVJbnRyb3NwZWN0aW9uLmZpZWxkcykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW50cm9zcGVjdGlvbiByZXN1bHQgbWlzc2luZyBmaWVsZHM6IFwiLmNvbmNhdChpbnNwZWN0KHR5cGVJbnRyb3NwZWN0aW9uKSwgXCIuXCIpKTtcbiAgICB9XG5cbiAgICByZXR1cm4ga2V5VmFsTWFwKHR5cGVJbnRyb3NwZWN0aW9uLmZpZWxkcywgZnVuY3Rpb24gKGZpZWxkSW50cm9zcGVjdGlvbikge1xuICAgICAgcmV0dXJuIGZpZWxkSW50cm9zcGVjdGlvbi5uYW1lO1xuICAgIH0sIGJ1aWxkRmllbGQpO1xuICB9XG5cbiAgZnVuY3Rpb24gYnVpbGRGaWVsZChmaWVsZEludHJvc3BlY3Rpb24pIHtcbiAgICB2YXIgdHlwZSA9IGdldFR5cGUoZmllbGRJbnRyb3NwZWN0aW9uLnR5cGUpO1xuXG4gICAgaWYgKCFpc091dHB1dFR5cGUodHlwZSkpIHtcbiAgICAgIHZhciB0eXBlU3RyID0gaW5zcGVjdCh0eXBlKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkludHJvc3BlY3Rpb24gbXVzdCBwcm92aWRlIG91dHB1dCB0eXBlIGZvciBmaWVsZHMsIGJ1dCByZWNlaXZlZDogXCIuY29uY2F0KHR5cGVTdHIsIFwiLlwiKSk7XG4gICAgfVxuXG4gICAgaWYgKCFmaWVsZEludHJvc3BlY3Rpb24uYXJncykge1xuICAgICAgdmFyIGZpZWxkSW50cm9zcGVjdGlvblN0ciA9IGluc3BlY3QoZmllbGRJbnRyb3NwZWN0aW9uKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkludHJvc3BlY3Rpb24gcmVzdWx0IG1pc3NpbmcgZmllbGQgYXJnczogXCIuY29uY2F0KGZpZWxkSW50cm9zcGVjdGlvblN0ciwgXCIuXCIpKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgZGVzY3JpcHRpb246IGZpZWxkSW50cm9zcGVjdGlvbi5kZXNjcmlwdGlvbixcbiAgICAgIGRlcHJlY2F0aW9uUmVhc29uOiBmaWVsZEludHJvc3BlY3Rpb24uZGVwcmVjYXRpb25SZWFzb24sXG4gICAgICB0eXBlOiB0eXBlLFxuICAgICAgYXJnczogYnVpbGRJbnB1dFZhbHVlRGVmTWFwKGZpZWxkSW50cm9zcGVjdGlvbi5hcmdzKVxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBidWlsZElucHV0VmFsdWVEZWZNYXAoaW5wdXRWYWx1ZUludHJvc3BlY3Rpb25zKSB7XG4gICAgcmV0dXJuIGtleVZhbE1hcChpbnB1dFZhbHVlSW50cm9zcGVjdGlvbnMsIGZ1bmN0aW9uIChpbnB1dFZhbHVlKSB7XG4gICAgICByZXR1cm4gaW5wdXRWYWx1ZS5uYW1lO1xuICAgIH0sIGJ1aWxkSW5wdXRWYWx1ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBidWlsZElucHV0VmFsdWUoaW5wdXRWYWx1ZUludHJvc3BlY3Rpb24pIHtcbiAgICB2YXIgdHlwZSA9IGdldFR5cGUoaW5wdXRWYWx1ZUludHJvc3BlY3Rpb24udHlwZSk7XG5cbiAgICBpZiAoIWlzSW5wdXRUeXBlKHR5cGUpKSB7XG4gICAgICB2YXIgdHlwZVN0ciA9IGluc3BlY3QodHlwZSk7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnRyb3NwZWN0aW9uIG11c3QgcHJvdmlkZSBpbnB1dCB0eXBlIGZvciBhcmd1bWVudHMsIGJ1dCByZWNlaXZlZDogXCIuY29uY2F0KHR5cGVTdHIsIFwiLlwiKSk7XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRWYWx1ZSA9IGlucHV0VmFsdWVJbnRyb3NwZWN0aW9uLmRlZmF1bHRWYWx1ZSAhPSBudWxsID8gdmFsdWVGcm9tQVNUKHBhcnNlVmFsdWUoaW5wdXRWYWx1ZUludHJvc3BlY3Rpb24uZGVmYXVsdFZhbHVlKSwgdHlwZSkgOiB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRlc2NyaXB0aW9uOiBpbnB1dFZhbHVlSW50cm9zcGVjdGlvbi5kZXNjcmlwdGlvbixcbiAgICAgIHR5cGU6IHR5cGUsXG4gICAgICBkZWZhdWx0VmFsdWU6IGRlZmF1bHRWYWx1ZSxcbiAgICAgIGRlcHJlY2F0aW9uUmVhc29uOiBpbnB1dFZhbHVlSW50cm9zcGVjdGlvbi5kZXByZWNhdGlvblJlYXNvblxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBidWlsZERpcmVjdGl2ZShkaXJlY3RpdmVJbnRyb3NwZWN0aW9uKSB7XG4gICAgaWYgKCFkaXJlY3RpdmVJbnRyb3NwZWN0aW9uLmFyZ3MpIHtcbiAgICAgIHZhciBkaXJlY3RpdmVJbnRyb3NwZWN0aW9uU3RyID0gaW5zcGVjdChkaXJlY3RpdmVJbnRyb3NwZWN0aW9uKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkludHJvc3BlY3Rpb24gcmVzdWx0IG1pc3NpbmcgZGlyZWN0aXZlIGFyZ3M6IFwiLmNvbmNhdChkaXJlY3RpdmVJbnRyb3NwZWN0aW9uU3RyLCBcIi5cIikpO1xuICAgIH1cblxuICAgIGlmICghZGlyZWN0aXZlSW50cm9zcGVjdGlvbi5sb2NhdGlvbnMpIHtcbiAgICAgIHZhciBfZGlyZWN0aXZlSW50cm9zcGVjdGlvblN0ciA9IGluc3BlY3QoZGlyZWN0aXZlSW50cm9zcGVjdGlvbik7XG5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkludHJvc3BlY3Rpb24gcmVzdWx0IG1pc3NpbmcgZGlyZWN0aXZlIGxvY2F0aW9uczogXCIuY29uY2F0KF9kaXJlY3RpdmVJbnRyb3NwZWN0aW9uU3RyLCBcIi5cIikpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgR3JhcGhRTERpcmVjdGl2ZSh7XG4gICAgICBuYW1lOiBkaXJlY3RpdmVJbnRyb3NwZWN0aW9uLm5hbWUsXG4gICAgICBkZXNjcmlwdGlvbjogZGlyZWN0aXZlSW50cm9zcGVjdGlvbi5kZXNjcmlwdGlvbixcbiAgICAgIGlzUmVwZWF0YWJsZTogZGlyZWN0aXZlSW50cm9zcGVjdGlvbi5pc1JlcGVhdGFibGUsXG4gICAgICBsb2NhdGlvbnM6IGRpcmVjdGl2ZUludHJvc3BlY3Rpb24ubG9jYXRpb25zLnNsaWNlKCksXG4gICAgICBhcmdzOiBidWlsZElucHV0VmFsdWVEZWZNYXAoZGlyZWN0aXZlSW50cm9zcGVjdGlvbi5hcmdzKVxuICAgIH0pO1xuICB9XG59XG4iLCJpbXBvcnQgb2JqZWN0VmFsdWVzIGZyb20gXCIuLi9wb2x5ZmlsbHMvb2JqZWN0VmFsdWVzLm1qc1wiO1xuaW1wb3J0IGluc3BlY3QgZnJvbSBcIi4uL2pzdXRpbHMvaW5zcGVjdC5tanNcIjtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcIi4uL2pzdXRpbHMvaW52YXJpYW50Lm1qc1wiO1xuaW1wb3J0IGRpZFlvdU1lYW4gZnJvbSBcIi4uL2pzdXRpbHMvZGlkWW91TWVhbi5tanNcIjtcbmltcG9ydCBpc09iamVjdExpa2UgZnJvbSBcIi4uL2pzdXRpbHMvaXNPYmplY3RMaWtlLm1qc1wiO1xuaW1wb3J0IHNhZmVBcnJheUZyb20gZnJvbSBcIi4uL2pzdXRpbHMvc2FmZUFycmF5RnJvbS5tanNcIjtcbmltcG9ydCBzdWdnZXN0aW9uTGlzdCBmcm9tIFwiLi4vanN1dGlscy9zdWdnZXN0aW9uTGlzdC5tanNcIjtcbmltcG9ydCBwcmludFBhdGhBcnJheSBmcm9tIFwiLi4vanN1dGlscy9wcmludFBhdGhBcnJheS5tanNcIjtcbmltcG9ydCB7IGFkZFBhdGgsIHBhdGhUb0FycmF5IH0gZnJvbSBcIi4uL2pzdXRpbHMvUGF0aC5tanNcIjtcbmltcG9ydCB7IEdyYXBoUUxFcnJvciB9IGZyb20gXCIuLi9lcnJvci9HcmFwaFFMRXJyb3IubWpzXCI7XG5pbXBvcnQgeyBpc0xlYWZUeXBlLCBpc0lucHV0T2JqZWN0VHlwZSwgaXNMaXN0VHlwZSwgaXNOb25OdWxsVHlwZSB9IGZyb20gXCIuLi90eXBlL2RlZmluaXRpb24ubWpzXCI7XG5cbi8qKlxuICogQ29lcmNlcyBhIEphdmFTY3JpcHQgdmFsdWUgZ2l2ZW4gYSBHcmFwaFFMIElucHV0IFR5cGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb2VyY2VJbnB1dFZhbHVlKGlucHV0VmFsdWUsIHR5cGUpIHtcbiAgdmFyIG9uRXJyb3IgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGRlZmF1bHRPbkVycm9yO1xuICByZXR1cm4gY29lcmNlSW5wdXRWYWx1ZUltcGwoaW5wdXRWYWx1ZSwgdHlwZSwgb25FcnJvcik7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRPbkVycm9yKHBhdGgsIGludmFsaWRWYWx1ZSwgZXJyb3IpIHtcbiAgdmFyIGVycm9yUHJlZml4ID0gJ0ludmFsaWQgdmFsdWUgJyArIGluc3BlY3QoaW52YWxpZFZhbHVlKTtcblxuICBpZiAocGF0aC5sZW5ndGggPiAwKSB7XG4gICAgZXJyb3JQcmVmaXggKz0gXCIgYXQgXFxcInZhbHVlXCIuY29uY2F0KHByaW50UGF0aEFycmF5KHBhdGgpLCBcIlxcXCJcIik7XG4gIH1cblxuICBlcnJvci5tZXNzYWdlID0gZXJyb3JQcmVmaXggKyAnOiAnICsgZXJyb3IubWVzc2FnZTtcbiAgdGhyb3cgZXJyb3I7XG59XG5cbmZ1bmN0aW9uIGNvZXJjZUlucHV0VmFsdWVJbXBsKGlucHV0VmFsdWUsIHR5cGUsIG9uRXJyb3IsIHBhdGgpIHtcbiAgaWYgKGlzTm9uTnVsbFR5cGUodHlwZSkpIHtcbiAgICBpZiAoaW5wdXRWYWx1ZSAhPSBudWxsKSB7XG4gICAgICByZXR1cm4gY29lcmNlSW5wdXRWYWx1ZUltcGwoaW5wdXRWYWx1ZSwgdHlwZS5vZlR5cGUsIG9uRXJyb3IsIHBhdGgpO1xuICAgIH1cblxuICAgIG9uRXJyb3IocGF0aFRvQXJyYXkocGF0aCksIGlucHV0VmFsdWUsIG5ldyBHcmFwaFFMRXJyb3IoXCJFeHBlY3RlZCBub24tbnVsbGFibGUgdHlwZSBcXFwiXCIuY29uY2F0KGluc3BlY3QodHlwZSksIFwiXFxcIiBub3QgdG8gYmUgbnVsbC5cIikpKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoaW5wdXRWYWx1ZSA9PSBudWxsKSB7XG4gICAgLy8gRXhwbGljaXRseSByZXR1cm4gdGhlIHZhbHVlIG51bGwuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBpZiAoaXNMaXN0VHlwZSh0eXBlKSkge1xuICAgIHZhciBpdGVtVHlwZSA9IHR5cGUub2ZUeXBlO1xuICAgIHZhciBjb2VyY2VkTGlzdCA9IHNhZmVBcnJheUZyb20oaW5wdXRWYWx1ZSwgZnVuY3Rpb24gKGl0ZW1WYWx1ZSwgaW5kZXgpIHtcbiAgICAgIHZhciBpdGVtUGF0aCA9IGFkZFBhdGgocGF0aCwgaW5kZXgsIHVuZGVmaW5lZCk7XG4gICAgICByZXR1cm4gY29lcmNlSW5wdXRWYWx1ZUltcGwoaXRlbVZhbHVlLCBpdGVtVHlwZSwgb25FcnJvciwgaXRlbVBhdGgpO1xuICAgIH0pO1xuXG4gICAgaWYgKGNvZXJjZWRMaXN0ICE9IG51bGwpIHtcbiAgICAgIHJldHVybiBjb2VyY2VkTGlzdDtcbiAgICB9IC8vIExpc3RzIGFjY2VwdCBhIG5vbi1saXN0IHZhbHVlIGFzIGEgbGlzdCBvZiBvbmUuXG5cblxuICAgIHJldHVybiBbY29lcmNlSW5wdXRWYWx1ZUltcGwoaW5wdXRWYWx1ZSwgaXRlbVR5cGUsIG9uRXJyb3IsIHBhdGgpXTtcbiAgfVxuXG4gIGlmIChpc0lucHV0T2JqZWN0VHlwZSh0eXBlKSkge1xuICAgIGlmICghaXNPYmplY3RMaWtlKGlucHV0VmFsdWUpKSB7XG4gICAgICBvbkVycm9yKHBhdGhUb0FycmF5KHBhdGgpLCBpbnB1dFZhbHVlLCBuZXcgR3JhcGhRTEVycm9yKFwiRXhwZWN0ZWQgdHlwZSBcXFwiXCIuY29uY2F0KHR5cGUubmFtZSwgXCJcXFwiIHRvIGJlIGFuIG9iamVjdC5cIikpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgY29lcmNlZFZhbHVlID0ge307XG4gICAgdmFyIGZpZWxkRGVmcyA9IHR5cGUuZ2V0RmllbGRzKCk7XG5cbiAgICBmb3IgKHZhciBfaTIgPSAwLCBfb2JqZWN0VmFsdWVzMiA9IG9iamVjdFZhbHVlcyhmaWVsZERlZnMpOyBfaTIgPCBfb2JqZWN0VmFsdWVzMi5sZW5ndGg7IF9pMisrKSB7XG4gICAgICB2YXIgZmllbGQgPSBfb2JqZWN0VmFsdWVzMltfaTJdO1xuICAgICAgdmFyIGZpZWxkVmFsdWUgPSBpbnB1dFZhbHVlW2ZpZWxkLm5hbWVdO1xuXG4gICAgICBpZiAoZmllbGRWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChmaWVsZC5kZWZhdWx0VmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGNvZXJjZWRWYWx1ZVtmaWVsZC5uYW1lXSA9IGZpZWxkLmRlZmF1bHRWYWx1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChpc05vbk51bGxUeXBlKGZpZWxkLnR5cGUpKSB7XG4gICAgICAgICAgdmFyIHR5cGVTdHIgPSBpbnNwZWN0KGZpZWxkLnR5cGUpO1xuICAgICAgICAgIG9uRXJyb3IocGF0aFRvQXJyYXkocGF0aCksIGlucHV0VmFsdWUsIG5ldyBHcmFwaFFMRXJyb3IoXCJGaWVsZCBcXFwiXCIuY29uY2F0KGZpZWxkLm5hbWUsIFwiXFxcIiBvZiByZXF1aXJlZCB0eXBlIFxcXCJcIikuY29uY2F0KHR5cGVTdHIsIFwiXFxcIiB3YXMgbm90IHByb3ZpZGVkLlwiKSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGNvZXJjZWRWYWx1ZVtmaWVsZC5uYW1lXSA9IGNvZXJjZUlucHV0VmFsdWVJbXBsKGZpZWxkVmFsdWUsIGZpZWxkLnR5cGUsIG9uRXJyb3IsIGFkZFBhdGgocGF0aCwgZmllbGQubmFtZSwgdHlwZS5uYW1lKSk7XG4gICAgfSAvLyBFbnN1cmUgZXZlcnkgcHJvdmlkZWQgZmllbGQgaXMgZGVmaW5lZC5cblxuXG4gICAgZm9yICh2YXIgX2k0ID0gMCwgX09iamVjdCRrZXlzMiA9IE9iamVjdC5rZXlzKGlucHV0VmFsdWUpOyBfaTQgPCBfT2JqZWN0JGtleXMyLmxlbmd0aDsgX2k0KyspIHtcbiAgICAgIHZhciBmaWVsZE5hbWUgPSBfT2JqZWN0JGtleXMyW19pNF07XG5cbiAgICAgIGlmICghZmllbGREZWZzW2ZpZWxkTmFtZV0pIHtcbiAgICAgICAgdmFyIHN1Z2dlc3Rpb25zID0gc3VnZ2VzdGlvbkxpc3QoZmllbGROYW1lLCBPYmplY3Qua2V5cyh0eXBlLmdldEZpZWxkcygpKSk7XG4gICAgICAgIG9uRXJyb3IocGF0aFRvQXJyYXkocGF0aCksIGlucHV0VmFsdWUsIG5ldyBHcmFwaFFMRXJyb3IoXCJGaWVsZCBcXFwiXCIuY29uY2F0KGZpZWxkTmFtZSwgXCJcXFwiIGlzIG5vdCBkZWZpbmVkIGJ5IHR5cGUgXFxcIlwiKS5jb25jYXQodHlwZS5uYW1lLCBcIlxcXCIuXCIpICsgZGlkWW91TWVhbihzdWdnZXN0aW9ucykpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY29lcmNlZFZhbHVlO1xuICB9IC8vIGlzdGFuYnVsIGlnbm9yZSBlbHNlIChTZWU6ICdodHRwczovL2dpdGh1Yi5jb20vZ3JhcGhxbC9ncmFwaHFsLWpzL2lzc3Vlcy8yNjE4JylcblxuXG4gIGlmIChpc0xlYWZUeXBlKHR5cGUpKSB7XG4gICAgdmFyIHBhcnNlUmVzdWx0OyAvLyBTY2FsYXJzIGFuZCBFbnVtcyBkZXRlcm1pbmUgaWYgYSBpbnB1dCB2YWx1ZSBpcyB2YWxpZCB2aWEgcGFyc2VWYWx1ZSgpLFxuICAgIC8vIHdoaWNoIGNhbiB0aHJvdyB0byBpbmRpY2F0ZSBmYWlsdXJlLiBJZiBpdCB0aHJvd3MsIG1haW50YWluIGEgcmVmZXJlbmNlXG4gICAgLy8gdG8gdGhlIG9yaWdpbmFsIGVycm9yLlxuXG4gICAgdHJ5IHtcbiAgICAgIHBhcnNlUmVzdWx0ID0gdHlwZS5wYXJzZVZhbHVlKGlucHV0VmFsdWUpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBHcmFwaFFMRXJyb3IpIHtcbiAgICAgICAgb25FcnJvcihwYXRoVG9BcnJheShwYXRoKSwgaW5wdXRWYWx1ZSwgZXJyb3IpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb25FcnJvcihwYXRoVG9BcnJheShwYXRoKSwgaW5wdXRWYWx1ZSwgbmV3IEdyYXBoUUxFcnJvcihcIkV4cGVjdGVkIHR5cGUgXFxcIlwiLmNvbmNhdCh0eXBlLm5hbWUsIFwiXFxcIi4gXCIpICsgZXJyb3IubWVzc2FnZSwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBlcnJvcikpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHBhcnNlUmVzdWx0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIG9uRXJyb3IocGF0aFRvQXJyYXkocGF0aCksIGlucHV0VmFsdWUsIG5ldyBHcmFwaFFMRXJyb3IoXCJFeHBlY3RlZCB0eXBlIFxcXCJcIi5jb25jYXQodHlwZS5uYW1lLCBcIlxcXCIuXCIpKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhcnNlUmVzdWx0O1xuICB9IC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0IChOb3QgcmVhY2hhYmxlLiBBbGwgcG9zc2libGUgaW5wdXQgdHlwZXMgaGF2ZSBiZWVuIGNvbnNpZGVyZWQpXG5cblxuICBmYWxzZSB8fCBpbnZhcmlhbnQoMCwgJ1VuZXhwZWN0ZWQgaW5wdXQgdHlwZTogJyArIGluc3BlY3QodHlwZSkpO1xufVxuIiwiLyoqXG4gKiBQcm92aWRlZCBhIGNvbGxlY3Rpb24gb2YgQVNUcywgcHJlc3VtYWJseSBlYWNoIGZyb20gZGlmZmVyZW50IGZpbGVzLFxuICogY29uY2F0ZW5hdGUgdGhlIEFTVHMgdG9nZXRoZXIgaW50byBiYXRjaGVkIEFTVCwgdXNlZnVsIGZvciB2YWxpZGF0aW5nIG1hbnlcbiAqIEdyYXBoUUwgc291cmNlIGZpbGVzIHdoaWNoIHRvZ2V0aGVyIHJlcHJlc2VudCBvbmUgY29uY2VwdHVhbCBhcHBsaWNhdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbmNhdEFTVChkb2N1bWVudHMpIHtcbiAgdmFyIGRlZmluaXRpb25zID0gW107XG5cbiAgZm9yICh2YXIgX2kyID0gMDsgX2kyIDwgZG9jdW1lbnRzLmxlbmd0aDsgX2kyKyspIHtcbiAgICB2YXIgZG9jID0gZG9jdW1lbnRzW19pMl07XG4gICAgZGVmaW5pdGlvbnMgPSBkZWZpbml0aW9ucy5jb25jYXQoZG9jLmRlZmluaXRpb25zKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAga2luZDogJ0RvY3VtZW50JyxcbiAgICBkZWZpbml0aW9uczogZGVmaW5pdGlvbnNcbiAgfTtcbn1cbiIsImZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5pbXBvcnQgb2JqZWN0VmFsdWVzIGZyb20gXCIuLi9wb2x5ZmlsbHMvb2JqZWN0VmFsdWVzLm1qc1wiO1xuaW1wb3J0IGtleU1hcCBmcm9tIFwiLi4vanN1dGlscy9rZXlNYXAubWpzXCI7XG5pbXBvcnQgaW5zcGVjdCBmcm9tIFwiLi4vanN1dGlscy9pbnNwZWN0Lm1qc1wiO1xuaW1wb3J0IG1hcFZhbHVlIGZyb20gXCIuLi9qc3V0aWxzL21hcFZhbHVlLm1qc1wiO1xuaW1wb3J0IGludmFyaWFudCBmcm9tIFwiLi4vanN1dGlscy9pbnZhcmlhbnQubWpzXCI7XG5pbXBvcnQgZGV2QXNzZXJ0IGZyb20gXCIuLi9qc3V0aWxzL2RldkFzc2VydC5tanNcIjtcbmltcG9ydCB7IEtpbmQgfSBmcm9tIFwiLi4vbGFuZ3VhZ2Uva2luZHMubWpzXCI7XG5pbXBvcnQgeyBUb2tlbktpbmQgfSBmcm9tIFwiLi4vbGFuZ3VhZ2UvdG9rZW5LaW5kLm1qc1wiO1xuaW1wb3J0IHsgZGVkZW50QmxvY2tTdHJpbmdWYWx1ZSB9IGZyb20gXCIuLi9sYW5ndWFnZS9ibG9ja1N0cmluZy5tanNcIjtcbmltcG9ydCB7IGlzVHlwZURlZmluaXRpb25Ob2RlLCBpc1R5cGVFeHRlbnNpb25Ob2RlIH0gZnJvbSBcIi4uL2xhbmd1YWdlL3ByZWRpY2F0ZXMubWpzXCI7XG5pbXBvcnQgeyBhc3NlcnRWYWxpZFNETEV4dGVuc2lvbiB9IGZyb20gXCIuLi92YWxpZGF0aW9uL3ZhbGlkYXRlLm1qc1wiO1xuaW1wb3J0IHsgZ2V0RGlyZWN0aXZlVmFsdWVzIH0gZnJvbSBcIi4uL2V4ZWN1dGlvbi92YWx1ZXMubWpzXCI7XG5pbXBvcnQgeyBhc3NlcnRTY2hlbWEsIEdyYXBoUUxTY2hlbWEgfSBmcm9tIFwiLi4vdHlwZS9zY2hlbWEubWpzXCI7XG5pbXBvcnQgeyBzcGVjaWZpZWRTY2FsYXJUeXBlcywgaXNTcGVjaWZpZWRTY2FsYXJUeXBlIH0gZnJvbSBcIi4uL3R5cGUvc2NhbGFycy5tanNcIjtcbmltcG9ydCB7IGludHJvc3BlY3Rpb25UeXBlcywgaXNJbnRyb3NwZWN0aW9uVHlwZSB9IGZyb20gXCIuLi90eXBlL2ludHJvc3BlY3Rpb24ubWpzXCI7XG5pbXBvcnQgeyBHcmFwaFFMRGlyZWN0aXZlLCBHcmFwaFFMRGVwcmVjYXRlZERpcmVjdGl2ZSwgR3JhcGhRTFNwZWNpZmllZEJ5RGlyZWN0aXZlIH0gZnJvbSBcIi4uL3R5cGUvZGlyZWN0aXZlcy5tanNcIjtcbmltcG9ydCB7IGlzU2NhbGFyVHlwZSwgaXNPYmplY3RUeXBlLCBpc0ludGVyZmFjZVR5cGUsIGlzVW5pb25UeXBlLCBpc0xpc3RUeXBlLCBpc05vbk51bGxUeXBlLCBpc0VudW1UeXBlLCBpc0lucHV0T2JqZWN0VHlwZSwgR3JhcGhRTExpc3QsIEdyYXBoUUxOb25OdWxsLCBHcmFwaFFMU2NhbGFyVHlwZSwgR3JhcGhRTE9iamVjdFR5cGUsIEdyYXBoUUxJbnRlcmZhY2VUeXBlLCBHcmFwaFFMVW5pb25UeXBlLCBHcmFwaFFMRW51bVR5cGUsIEdyYXBoUUxJbnB1dE9iamVjdFR5cGUgfSBmcm9tIFwiLi4vdHlwZS9kZWZpbml0aW9uLm1qc1wiO1xuaW1wb3J0IHsgdmFsdWVGcm9tQVNUIH0gZnJvbSBcIi4vdmFsdWVGcm9tQVNULm1qc1wiO1xuXG4vKipcbiAqIFByb2R1Y2VzIGEgbmV3IHNjaGVtYSBnaXZlbiBhbiBleGlzdGluZyBzY2hlbWEgYW5kIGEgZG9jdW1lbnQgd2hpY2ggbWF5XG4gKiBjb250YWluIEdyYXBoUUwgdHlwZSBleHRlbnNpb25zIGFuZCBkZWZpbml0aW9ucy4gVGhlIG9yaWdpbmFsIHNjaGVtYSB3aWxsXG4gKiByZW1haW4gdW5hbHRlcmVkLlxuICpcbiAqIEJlY2F1c2UgYSBzY2hlbWEgcmVwcmVzZW50cyBhIGdyYXBoIG9mIHJlZmVyZW5jZXMsIGEgc2NoZW1hIGNhbm5vdCBiZVxuICogZXh0ZW5kZWQgd2l0aG91dCBlZmZlY3RpdmVseSBtYWtpbmcgYW4gZW50aXJlIGNvcHkuIFdlIGRvIG5vdCBrbm93IHVudGlsIGl0J3NcbiAqIHRvbyBsYXRlIGlmIHN1YmdyYXBocyByZW1haW4gdW5jaGFuZ2VkLlxuICpcbiAqIFRoaXMgYWxnb3JpdGhtIGNvcGllcyB0aGUgcHJvdmlkZWQgc2NoZW1hLCBhcHBseWluZyBleHRlbnNpb25zIHdoaWxlXG4gKiBwcm9kdWNpbmcgdGhlIGNvcHkuIFRoZSBvcmlnaW5hbCBzY2hlbWEgcmVtYWlucyB1bmFsdGVyZWQuXG4gKlxuICogQWNjZXB0cyBvcHRpb25zIGFzIGEgdGhpcmQgYXJndW1lbnQ6XG4gKlxuICogICAgLSBjb21tZW50RGVzY3JpcHRpb25zOlxuICogICAgICAgIFByb3ZpZGUgdHJ1ZSB0byB1c2UgcHJlY2VkaW5nIGNvbW1lbnRzIGFzIHRoZSBkZXNjcmlwdGlvbi5cbiAqXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBleHRlbmRTY2hlbWEoc2NoZW1hLCBkb2N1bWVudEFTVCwgb3B0aW9ucykge1xuICBhc3NlcnRTY2hlbWEoc2NoZW1hKTtcbiAgZG9jdW1lbnRBU1QgIT0gbnVsbCAmJiBkb2N1bWVudEFTVC5raW5kID09PSBLaW5kLkRPQ1VNRU5UIHx8IGRldkFzc2VydCgwLCAnTXVzdCBwcm92aWRlIHZhbGlkIERvY3VtZW50IEFTVC4nKTtcblxuICBpZiAoKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5hc3N1bWVWYWxpZCkgIT09IHRydWUgJiYgKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5hc3N1bWVWYWxpZFNETCkgIT09IHRydWUpIHtcbiAgICBhc3NlcnRWYWxpZFNETEV4dGVuc2lvbihkb2N1bWVudEFTVCwgc2NoZW1hKTtcbiAgfVxuXG4gIHZhciBzY2hlbWFDb25maWcgPSBzY2hlbWEudG9Db25maWcoKTtcbiAgdmFyIGV4dGVuZGVkQ29uZmlnID0gZXh0ZW5kU2NoZW1hSW1wbChzY2hlbWFDb25maWcsIGRvY3VtZW50QVNULCBvcHRpb25zKTtcbiAgcmV0dXJuIHNjaGVtYUNvbmZpZyA9PT0gZXh0ZW5kZWRDb25maWcgPyBzY2hlbWEgOiBuZXcgR3JhcGhRTFNjaGVtYShleHRlbmRlZENvbmZpZyk7XG59XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBleHRlbmRTY2hlbWFJbXBsKHNjaGVtYUNvbmZpZywgZG9jdW1lbnRBU1QsIG9wdGlvbnMpIHtcbiAgdmFyIF9zY2hlbWFEZWYsIF9zY2hlbWFEZWYkZGVzY3JpcHRpbywgX3NjaGVtYURlZjIsIF9vcHRpb25zJGFzc3VtZVZhbGlkO1xuXG4gIC8vIENvbGxlY3QgdGhlIHR5cGUgZGVmaW5pdGlvbnMgYW5kIGV4dGVuc2lvbnMgZm91bmQgaW4gdGhlIGRvY3VtZW50LlxuICB2YXIgdHlwZURlZnMgPSBbXTtcbiAgdmFyIHR5cGVFeHRlbnNpb25zTWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTsgLy8gTmV3IGRpcmVjdGl2ZXMgYW5kIHR5cGVzIGFyZSBzZXBhcmF0ZSBiZWNhdXNlIGEgZGlyZWN0aXZlcyBhbmQgdHlwZXMgY2FuXG4gIC8vIGhhdmUgdGhlIHNhbWUgbmFtZS4gRm9yIGV4YW1wbGUsIGEgdHlwZSBuYW1lZCBcInNraXBcIi5cblxuICB2YXIgZGlyZWN0aXZlRGVmcyA9IFtdO1xuICB2YXIgc2NoZW1hRGVmOyAvLyBTY2hlbWEgZXh0ZW5zaW9ucyBhcmUgY29sbGVjdGVkIHdoaWNoIG1heSBhZGQgYWRkaXRpb25hbCBvcGVyYXRpb24gdHlwZXMuXG5cbiAgdmFyIHNjaGVtYUV4dGVuc2lvbnMgPSBbXTtcblxuICBmb3IgKHZhciBfaTIgPSAwLCBfZG9jdW1lbnRBU1QkZGVmaW5pdGkyID0gZG9jdW1lbnRBU1QuZGVmaW5pdGlvbnM7IF9pMiA8IF9kb2N1bWVudEFTVCRkZWZpbml0aTIubGVuZ3RoOyBfaTIrKykge1xuICAgIHZhciBkZWYgPSBfZG9jdW1lbnRBU1QkZGVmaW5pdGkyW19pMl07XG5cbiAgICBpZiAoZGVmLmtpbmQgPT09IEtpbmQuU0NIRU1BX0RFRklOSVRJT04pIHtcbiAgICAgIHNjaGVtYURlZiA9IGRlZjtcbiAgICB9IGVsc2UgaWYgKGRlZi5raW5kID09PSBLaW5kLlNDSEVNQV9FWFRFTlNJT04pIHtcbiAgICAgIHNjaGVtYUV4dGVuc2lvbnMucHVzaChkZWYpO1xuICAgIH0gZWxzZSBpZiAoaXNUeXBlRGVmaW5pdGlvbk5vZGUoZGVmKSkge1xuICAgICAgdHlwZURlZnMucHVzaChkZWYpO1xuICAgIH0gZWxzZSBpZiAoaXNUeXBlRXh0ZW5zaW9uTm9kZShkZWYpKSB7XG4gICAgICB2YXIgZXh0ZW5kZWRUeXBlTmFtZSA9IGRlZi5uYW1lLnZhbHVlO1xuICAgICAgdmFyIGV4aXN0aW5nVHlwZUV4dGVuc2lvbnMgPSB0eXBlRXh0ZW5zaW9uc01hcFtleHRlbmRlZFR5cGVOYW1lXTtcbiAgICAgIHR5cGVFeHRlbnNpb25zTWFwW2V4dGVuZGVkVHlwZU5hbWVdID0gZXhpc3RpbmdUeXBlRXh0ZW5zaW9ucyA/IGV4aXN0aW5nVHlwZUV4dGVuc2lvbnMuY29uY2F0KFtkZWZdKSA6IFtkZWZdO1xuICAgIH0gZWxzZSBpZiAoZGVmLmtpbmQgPT09IEtpbmQuRElSRUNUSVZFX0RFRklOSVRJT04pIHtcbiAgICAgIGRpcmVjdGl2ZURlZnMucHVzaChkZWYpO1xuICAgIH1cbiAgfSAvLyBJZiB0aGlzIGRvY3VtZW50IGNvbnRhaW5zIG5vIG5ldyB0eXBlcywgZXh0ZW5zaW9ucywgb3IgZGlyZWN0aXZlcyB0aGVuXG4gIC8vIHJldHVybiB0aGUgc2FtZSB1bm1vZGlmaWVkIEdyYXBoUUxTY2hlbWEgaW5zdGFuY2UuXG5cblxuICBpZiAoT2JqZWN0LmtleXModHlwZUV4dGVuc2lvbnNNYXApLmxlbmd0aCA9PT0gMCAmJiB0eXBlRGVmcy5sZW5ndGggPT09IDAgJiYgZGlyZWN0aXZlRGVmcy5sZW5ndGggPT09IDAgJiYgc2NoZW1hRXh0ZW5zaW9ucy5sZW5ndGggPT09IDAgJiYgc2NoZW1hRGVmID09IG51bGwpIHtcbiAgICByZXR1cm4gc2NoZW1hQ29uZmlnO1xuICB9XG5cbiAgdmFyIHR5cGVNYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gIGZvciAodmFyIF9pNCA9IDAsIF9zY2hlbWFDb25maWckdHlwZXMyID0gc2NoZW1hQ29uZmlnLnR5cGVzOyBfaTQgPCBfc2NoZW1hQ29uZmlnJHR5cGVzMi5sZW5ndGg7IF9pNCsrKSB7XG4gICAgdmFyIGV4aXN0aW5nVHlwZSA9IF9zY2hlbWFDb25maWckdHlwZXMyW19pNF07XG4gICAgdHlwZU1hcFtleGlzdGluZ1R5cGUubmFtZV0gPSBleHRlbmROYW1lZFR5cGUoZXhpc3RpbmdUeXBlKTtcbiAgfVxuXG4gIGZvciAodmFyIF9pNiA9IDA7IF9pNiA8IHR5cGVEZWZzLmxlbmd0aDsgX2k2KyspIHtcbiAgICB2YXIgX3N0ZFR5cGVNYXAkbmFtZTtcblxuICAgIHZhciB0eXBlTm9kZSA9IHR5cGVEZWZzW19pNl07XG4gICAgdmFyIG5hbWUgPSB0eXBlTm9kZS5uYW1lLnZhbHVlO1xuICAgIHR5cGVNYXBbbmFtZV0gPSAoX3N0ZFR5cGVNYXAkbmFtZSA9IHN0ZFR5cGVNYXBbbmFtZV0pICE9PSBudWxsICYmIF9zdGRUeXBlTWFwJG5hbWUgIT09IHZvaWQgMCA/IF9zdGRUeXBlTWFwJG5hbWUgOiBidWlsZFR5cGUodHlwZU5vZGUpO1xuICB9XG5cbiAgdmFyIG9wZXJhdGlvblR5cGVzID0gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHtcbiAgICAvLyBHZXQgdGhlIGV4dGVuZGVkIHJvb3Qgb3BlcmF0aW9uIHR5cGVzLlxuICAgIHF1ZXJ5OiBzY2hlbWFDb25maWcucXVlcnkgJiYgcmVwbGFjZU5hbWVkVHlwZShzY2hlbWFDb25maWcucXVlcnkpLFxuICAgIG11dGF0aW9uOiBzY2hlbWFDb25maWcubXV0YXRpb24gJiYgcmVwbGFjZU5hbWVkVHlwZShzY2hlbWFDb25maWcubXV0YXRpb24pLFxuICAgIHN1YnNjcmlwdGlvbjogc2NoZW1hQ29uZmlnLnN1YnNjcmlwdGlvbiAmJiByZXBsYWNlTmFtZWRUeXBlKHNjaGVtYUNvbmZpZy5zdWJzY3JpcHRpb24pXG4gIH0sIHNjaGVtYURlZiAmJiBnZXRPcGVyYXRpb25UeXBlcyhbc2NoZW1hRGVmXSkpLCBnZXRPcGVyYXRpb25UeXBlcyhzY2hlbWFFeHRlbnNpb25zKSk7IC8vIFRoZW4gcHJvZHVjZSBhbmQgcmV0dXJuIGEgU2NoZW1hIGNvbmZpZyB3aXRoIHRoZXNlIHR5cGVzLlxuXG5cbiAgcmV0dXJuIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7XG4gICAgZGVzY3JpcHRpb246IChfc2NoZW1hRGVmID0gc2NoZW1hRGVmKSA9PT0gbnVsbCB8fCBfc2NoZW1hRGVmID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX3NjaGVtYURlZiRkZXNjcmlwdGlvID0gX3NjaGVtYURlZi5kZXNjcmlwdGlvbikgPT09IG51bGwgfHwgX3NjaGVtYURlZiRkZXNjcmlwdGlvID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfc2NoZW1hRGVmJGRlc2NyaXB0aW8udmFsdWVcbiAgfSwgb3BlcmF0aW9uVHlwZXMpLCB7fSwge1xuICAgIHR5cGVzOiBvYmplY3RWYWx1ZXModHlwZU1hcCksXG4gICAgZGlyZWN0aXZlczogW10uY29uY2F0KHNjaGVtYUNvbmZpZy5kaXJlY3RpdmVzLm1hcChyZXBsYWNlRGlyZWN0aXZlKSwgZGlyZWN0aXZlRGVmcy5tYXAoYnVpbGREaXJlY3RpdmUpKSxcbiAgICBleHRlbnNpb25zOiB1bmRlZmluZWQsXG4gICAgYXN0Tm9kZTogKF9zY2hlbWFEZWYyID0gc2NoZW1hRGVmKSAhPT0gbnVsbCAmJiBfc2NoZW1hRGVmMiAhPT0gdm9pZCAwID8gX3NjaGVtYURlZjIgOiBzY2hlbWFDb25maWcuYXN0Tm9kZSxcbiAgICBleHRlbnNpb25BU1ROb2Rlczogc2NoZW1hQ29uZmlnLmV4dGVuc2lvbkFTVE5vZGVzLmNvbmNhdChzY2hlbWFFeHRlbnNpb25zKSxcbiAgICBhc3N1bWVWYWxpZDogKF9vcHRpb25zJGFzc3VtZVZhbGlkID0gb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLmFzc3VtZVZhbGlkKSAhPT0gbnVsbCAmJiBfb3B0aW9ucyRhc3N1bWVWYWxpZCAhPT0gdm9pZCAwID8gX29wdGlvbnMkYXNzdW1lVmFsaWQgOiBmYWxzZVxuICB9KTsgLy8gQmVsb3cgYXJlIGZ1bmN0aW9ucyB1c2VkIGZvciBwcm9kdWNpbmcgdGhpcyBzY2hlbWEgdGhhdCBoYXZlIGNsb3NlZCBvdmVyXG4gIC8vIHRoaXMgc2NvcGUgYW5kIGhhdmUgYWNjZXNzIHRvIHRoZSBzY2hlbWEsIGNhY2hlLCBhbmQgbmV3bHkgZGVmaW5lZCB0eXBlcy5cblxuICBmdW5jdGlvbiByZXBsYWNlVHlwZSh0eXBlKSB7XG4gICAgaWYgKGlzTGlzdFR5cGUodHlwZSkpIHtcbiAgICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXJldHVybl1cbiAgICAgIHJldHVybiBuZXcgR3JhcGhRTExpc3QocmVwbGFjZVR5cGUodHlwZS5vZlR5cGUpKTtcbiAgICB9XG5cbiAgICBpZiAoaXNOb25OdWxsVHlwZSh0eXBlKSkge1xuICAgICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtcmV0dXJuXVxuICAgICAgcmV0dXJuIG5ldyBHcmFwaFFMTm9uTnVsbChyZXBsYWNlVHlwZSh0eXBlLm9mVHlwZSkpO1xuICAgIH1cblxuICAgIHJldHVybiByZXBsYWNlTmFtZWRUeXBlKHR5cGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZU5hbWVkVHlwZSh0eXBlKSB7XG4gICAgLy8gTm90ZTogV2hpbGUgdGhpcyBjb3VsZCBtYWtlIGVhcmx5IGFzc2VydGlvbnMgdG8gZ2V0IHRoZSBjb3JyZWN0bHlcbiAgICAvLyB0eXBlZCB2YWx1ZXMsIHRoYXQgd291bGQgdGhyb3cgaW1tZWRpYXRlbHkgd2hpbGUgdHlwZSBzeXN0ZW1cbiAgICAvLyB2YWxpZGF0aW9uIHdpdGggdmFsaWRhdGVTY2hlbWEoKSB3aWxsIHByb2R1Y2UgbW9yZSBhY3Rpb25hYmxlIHJlc3VsdHMuXG4gICAgcmV0dXJuIHR5cGVNYXBbdHlwZS5uYW1lXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2VEaXJlY3RpdmUoZGlyZWN0aXZlKSB7XG4gICAgdmFyIGNvbmZpZyA9IGRpcmVjdGl2ZS50b0NvbmZpZygpO1xuICAgIHJldHVybiBuZXcgR3JhcGhRTERpcmVjdGl2ZShfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGNvbmZpZyksIHt9LCB7XG4gICAgICBhcmdzOiBtYXBWYWx1ZShjb25maWcuYXJncywgZXh0ZW5kQXJnKVxuICAgIH0pKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGV4dGVuZE5hbWVkVHlwZSh0eXBlKSB7XG4gICAgaWYgKGlzSW50cm9zcGVjdGlvblR5cGUodHlwZSkgfHwgaXNTcGVjaWZpZWRTY2FsYXJUeXBlKHR5cGUpKSB7XG4gICAgICAvLyBCdWlsdGluIHR5cGVzIGFyZSBub3QgZXh0ZW5kZWQuXG4gICAgICByZXR1cm4gdHlwZTtcbiAgICB9XG5cbiAgICBpZiAoaXNTY2FsYXJUeXBlKHR5cGUpKSB7XG4gICAgICByZXR1cm4gZXh0ZW5kU2NhbGFyVHlwZSh0eXBlKTtcbiAgICB9XG5cbiAgICBpZiAoaXNPYmplY3RUeXBlKHR5cGUpKSB7XG4gICAgICByZXR1cm4gZXh0ZW5kT2JqZWN0VHlwZSh0eXBlKTtcbiAgICB9XG5cbiAgICBpZiAoaXNJbnRlcmZhY2VUeXBlKHR5cGUpKSB7XG4gICAgICByZXR1cm4gZXh0ZW5kSW50ZXJmYWNlVHlwZSh0eXBlKTtcbiAgICB9XG5cbiAgICBpZiAoaXNVbmlvblR5cGUodHlwZSkpIHtcbiAgICAgIHJldHVybiBleHRlbmRVbmlvblR5cGUodHlwZSk7XG4gICAgfVxuXG4gICAgaWYgKGlzRW51bVR5cGUodHlwZSkpIHtcbiAgICAgIHJldHVybiBleHRlbmRFbnVtVHlwZSh0eXBlKTtcbiAgICB9IC8vIGlzdGFuYnVsIGlnbm9yZSBlbHNlIChTZWU6ICdodHRwczovL2dpdGh1Yi5jb20vZ3JhcGhxbC9ncmFwaHFsLWpzL2lzc3Vlcy8yNjE4JylcblxuXG4gICAgaWYgKGlzSW5wdXRPYmplY3RUeXBlKHR5cGUpKSB7XG4gICAgICByZXR1cm4gZXh0ZW5kSW5wdXRPYmplY3RUeXBlKHR5cGUpO1xuICAgIH0gLy8gaXN0YW5idWwgaWdub3JlIG5leHQgKE5vdCByZWFjaGFibGUuIEFsbCBwb3NzaWJsZSB0eXBlcyBoYXZlIGJlZW4gY29uc2lkZXJlZClcblxuXG4gICAgZmFsc2UgfHwgaW52YXJpYW50KDAsICdVbmV4cGVjdGVkIHR5cGU6ICcgKyBpbnNwZWN0KHR5cGUpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGV4dGVuZElucHV0T2JqZWN0VHlwZSh0eXBlKSB7XG4gICAgdmFyIF90eXBlRXh0ZW5zaW9uc01hcCRjbztcblxuICAgIHZhciBjb25maWcgPSB0eXBlLnRvQ29uZmlnKCk7XG4gICAgdmFyIGV4dGVuc2lvbnMgPSAoX3R5cGVFeHRlbnNpb25zTWFwJGNvID0gdHlwZUV4dGVuc2lvbnNNYXBbY29uZmlnLm5hbWVdKSAhPT0gbnVsbCAmJiBfdHlwZUV4dGVuc2lvbnNNYXAkY28gIT09IHZvaWQgMCA/IF90eXBlRXh0ZW5zaW9uc01hcCRjbyA6IFtdO1xuICAgIHJldHVybiBuZXcgR3JhcGhRTElucHV0T2JqZWN0VHlwZShfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGNvbmZpZyksIHt9LCB7XG4gICAgICBmaWVsZHM6IGZ1bmN0aW9uIGZpZWxkcygpIHtcbiAgICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgbWFwVmFsdWUoY29uZmlnLmZpZWxkcywgZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgZmllbGQpLCB7fSwge1xuICAgICAgICAgICAgdHlwZTogcmVwbGFjZVR5cGUoZmllbGQudHlwZSlcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSkpLCBidWlsZElucHV0RmllbGRNYXAoZXh0ZW5zaW9ucykpO1xuICAgICAgfSxcbiAgICAgIGV4dGVuc2lvbkFTVE5vZGVzOiBjb25maWcuZXh0ZW5zaW9uQVNUTm9kZXMuY29uY2F0KGV4dGVuc2lvbnMpXG4gICAgfSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gZXh0ZW5kRW51bVR5cGUodHlwZSkge1xuICAgIHZhciBfdHlwZUV4dGVuc2lvbnNNYXAkdHk7XG5cbiAgICB2YXIgY29uZmlnID0gdHlwZS50b0NvbmZpZygpO1xuICAgIHZhciBleHRlbnNpb25zID0gKF90eXBlRXh0ZW5zaW9uc01hcCR0eSA9IHR5cGVFeHRlbnNpb25zTWFwW3R5cGUubmFtZV0pICE9PSBudWxsICYmIF90eXBlRXh0ZW5zaW9uc01hcCR0eSAhPT0gdm9pZCAwID8gX3R5cGVFeHRlbnNpb25zTWFwJHR5IDogW107XG4gICAgcmV0dXJuIG5ldyBHcmFwaFFMRW51bVR5cGUoX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBjb25maWcpLCB7fSwge1xuICAgICAgdmFsdWVzOiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGNvbmZpZy52YWx1ZXMpLCBidWlsZEVudW1WYWx1ZU1hcChleHRlbnNpb25zKSksXG4gICAgICBleHRlbnNpb25BU1ROb2RlczogY29uZmlnLmV4dGVuc2lvbkFTVE5vZGVzLmNvbmNhdChleHRlbnNpb25zKVxuICAgIH0pKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGV4dGVuZFNjYWxhclR5cGUodHlwZSkge1xuICAgIHZhciBfdHlwZUV4dGVuc2lvbnNNYXAkY28yO1xuXG4gICAgdmFyIGNvbmZpZyA9IHR5cGUudG9Db25maWcoKTtcbiAgICB2YXIgZXh0ZW5zaW9ucyA9IChfdHlwZUV4dGVuc2lvbnNNYXAkY28yID0gdHlwZUV4dGVuc2lvbnNNYXBbY29uZmlnLm5hbWVdKSAhPT0gbnVsbCAmJiBfdHlwZUV4dGVuc2lvbnNNYXAkY28yICE9PSB2b2lkIDAgPyBfdHlwZUV4dGVuc2lvbnNNYXAkY28yIDogW107XG4gICAgdmFyIHNwZWNpZmllZEJ5VXJsID0gY29uZmlnLnNwZWNpZmllZEJ5VXJsO1xuXG4gICAgZm9yICh2YXIgX2k4ID0gMDsgX2k4IDwgZXh0ZW5zaW9ucy5sZW5ndGg7IF9pOCsrKSB7XG4gICAgICB2YXIgX2dldFNwZWNpZmllZEJ5VXJsO1xuXG4gICAgICB2YXIgZXh0ZW5zaW9uTm9kZSA9IGV4dGVuc2lvbnNbX2k4XTtcbiAgICAgIHNwZWNpZmllZEJ5VXJsID0gKF9nZXRTcGVjaWZpZWRCeVVybCA9IGdldFNwZWNpZmllZEJ5VXJsKGV4dGVuc2lvbk5vZGUpKSAhPT0gbnVsbCAmJiBfZ2V0U3BlY2lmaWVkQnlVcmwgIT09IHZvaWQgMCA/IF9nZXRTcGVjaWZpZWRCeVVybCA6IHNwZWNpZmllZEJ5VXJsO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgR3JhcGhRTFNjYWxhclR5cGUoX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBjb25maWcpLCB7fSwge1xuICAgICAgc3BlY2lmaWVkQnlVcmw6IHNwZWNpZmllZEJ5VXJsLFxuICAgICAgZXh0ZW5zaW9uQVNUTm9kZXM6IGNvbmZpZy5leHRlbnNpb25BU1ROb2Rlcy5jb25jYXQoZXh0ZW5zaW9ucylcbiAgICB9KSk7XG4gIH1cblxuICBmdW5jdGlvbiBleHRlbmRPYmplY3RUeXBlKHR5cGUpIHtcbiAgICB2YXIgX3R5cGVFeHRlbnNpb25zTWFwJGNvMztcblxuICAgIHZhciBjb25maWcgPSB0eXBlLnRvQ29uZmlnKCk7XG4gICAgdmFyIGV4dGVuc2lvbnMgPSAoX3R5cGVFeHRlbnNpb25zTWFwJGNvMyA9IHR5cGVFeHRlbnNpb25zTWFwW2NvbmZpZy5uYW1lXSkgIT09IG51bGwgJiYgX3R5cGVFeHRlbnNpb25zTWFwJGNvMyAhPT0gdm9pZCAwID8gX3R5cGVFeHRlbnNpb25zTWFwJGNvMyA6IFtdO1xuICAgIHJldHVybiBuZXcgR3JhcGhRTE9iamVjdFR5cGUoX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBjb25maWcpLCB7fSwge1xuICAgICAgaW50ZXJmYWNlczogZnVuY3Rpb24gaW50ZXJmYWNlcygpIHtcbiAgICAgICAgcmV0dXJuIFtdLmNvbmNhdCh0eXBlLmdldEludGVyZmFjZXMoKS5tYXAocmVwbGFjZU5hbWVkVHlwZSksIGJ1aWxkSW50ZXJmYWNlcyhleHRlbnNpb25zKSk7XG4gICAgICB9LFxuICAgICAgZmllbGRzOiBmdW5jdGlvbiBmaWVsZHMoKSB7XG4gICAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIG1hcFZhbHVlKGNvbmZpZy5maWVsZHMsIGV4dGVuZEZpZWxkKSksIGJ1aWxkRmllbGRNYXAoZXh0ZW5zaW9ucykpO1xuICAgICAgfSxcbiAgICAgIGV4dGVuc2lvbkFTVE5vZGVzOiBjb25maWcuZXh0ZW5zaW9uQVNUTm9kZXMuY29uY2F0KGV4dGVuc2lvbnMpXG4gICAgfSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gZXh0ZW5kSW50ZXJmYWNlVHlwZSh0eXBlKSB7XG4gICAgdmFyIF90eXBlRXh0ZW5zaW9uc01hcCRjbzQ7XG5cbiAgICB2YXIgY29uZmlnID0gdHlwZS50b0NvbmZpZygpO1xuICAgIHZhciBleHRlbnNpb25zID0gKF90eXBlRXh0ZW5zaW9uc01hcCRjbzQgPSB0eXBlRXh0ZW5zaW9uc01hcFtjb25maWcubmFtZV0pICE9PSBudWxsICYmIF90eXBlRXh0ZW5zaW9uc01hcCRjbzQgIT09IHZvaWQgMCA/IF90eXBlRXh0ZW5zaW9uc01hcCRjbzQgOiBbXTtcbiAgICByZXR1cm4gbmV3IEdyYXBoUUxJbnRlcmZhY2VUeXBlKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgY29uZmlnKSwge30sIHtcbiAgICAgIGludGVyZmFjZXM6IGZ1bmN0aW9uIGludGVyZmFjZXMoKSB7XG4gICAgICAgIHJldHVybiBbXS5jb25jYXQodHlwZS5nZXRJbnRlcmZhY2VzKCkubWFwKHJlcGxhY2VOYW1lZFR5cGUpLCBidWlsZEludGVyZmFjZXMoZXh0ZW5zaW9ucykpO1xuICAgICAgfSxcbiAgICAgIGZpZWxkczogZnVuY3Rpb24gZmllbGRzKCkge1xuICAgICAgICByZXR1cm4gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBtYXBWYWx1ZShjb25maWcuZmllbGRzLCBleHRlbmRGaWVsZCkpLCBidWlsZEZpZWxkTWFwKGV4dGVuc2lvbnMpKTtcbiAgICAgIH0sXG4gICAgICBleHRlbnNpb25BU1ROb2RlczogY29uZmlnLmV4dGVuc2lvbkFTVE5vZGVzLmNvbmNhdChleHRlbnNpb25zKVxuICAgIH0pKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGV4dGVuZFVuaW9uVHlwZSh0eXBlKSB7XG4gICAgdmFyIF90eXBlRXh0ZW5zaW9uc01hcCRjbzU7XG5cbiAgICB2YXIgY29uZmlnID0gdHlwZS50b0NvbmZpZygpO1xuICAgIHZhciBleHRlbnNpb25zID0gKF90eXBlRXh0ZW5zaW9uc01hcCRjbzUgPSB0eXBlRXh0ZW5zaW9uc01hcFtjb25maWcubmFtZV0pICE9PSBudWxsICYmIF90eXBlRXh0ZW5zaW9uc01hcCRjbzUgIT09IHZvaWQgMCA/IF90eXBlRXh0ZW5zaW9uc01hcCRjbzUgOiBbXTtcbiAgICByZXR1cm4gbmV3IEdyYXBoUUxVbmlvblR5cGUoX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBjb25maWcpLCB7fSwge1xuICAgICAgdHlwZXM6IGZ1bmN0aW9uIHR5cGVzKCkge1xuICAgICAgICByZXR1cm4gW10uY29uY2F0KHR5cGUuZ2V0VHlwZXMoKS5tYXAocmVwbGFjZU5hbWVkVHlwZSksIGJ1aWxkVW5pb25UeXBlcyhleHRlbnNpb25zKSk7XG4gICAgICB9LFxuICAgICAgZXh0ZW5zaW9uQVNUTm9kZXM6IGNvbmZpZy5leHRlbnNpb25BU1ROb2Rlcy5jb25jYXQoZXh0ZW5zaW9ucylcbiAgICB9KSk7XG4gIH1cblxuICBmdW5jdGlvbiBleHRlbmRGaWVsZChmaWVsZCkge1xuICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGZpZWxkKSwge30sIHtcbiAgICAgIHR5cGU6IHJlcGxhY2VUeXBlKGZpZWxkLnR5cGUpLFxuICAgICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtY2FsbF1cbiAgICAgIGFyZ3M6IG1hcFZhbHVlKGZpZWxkLmFyZ3MsIGV4dGVuZEFyZylcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGV4dGVuZEFyZyhhcmcpIHtcbiAgICByZXR1cm4gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBhcmcpLCB7fSwge1xuICAgICAgdHlwZTogcmVwbGFjZVR5cGUoYXJnLnR5cGUpXG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRPcGVyYXRpb25UeXBlcyhub2Rlcykge1xuICAgIHZhciBvcFR5cGVzID0ge307XG5cbiAgICBmb3IgKHZhciBfaTEwID0gMDsgX2kxMCA8IG5vZGVzLmxlbmd0aDsgX2kxMCsrKSB7XG4gICAgICB2YXIgX25vZGUkb3BlcmF0aW9uVHlwZXM7XG5cbiAgICAgIHZhciBub2RlID0gbm9kZXNbX2kxMF07XG4gICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAoU2VlOiAnaHR0cHM6Ly9naXRodWIuY29tL2dyYXBocWwvZ3JhcGhxbC1qcy9pc3N1ZXMvMjIwMycpXG4gICAgICB2YXIgb3BlcmF0aW9uVHlwZXNOb2RlcyA9IChfbm9kZSRvcGVyYXRpb25UeXBlcyA9IG5vZGUub3BlcmF0aW9uVHlwZXMpICE9PSBudWxsICYmIF9ub2RlJG9wZXJhdGlvblR5cGVzICE9PSB2b2lkIDAgPyBfbm9kZSRvcGVyYXRpb25UeXBlcyA6IFtdO1xuXG4gICAgICBmb3IgKHZhciBfaTEyID0gMDsgX2kxMiA8IG9wZXJhdGlvblR5cGVzTm9kZXMubGVuZ3RoOyBfaTEyKyspIHtcbiAgICAgICAgdmFyIG9wZXJhdGlvblR5cGUgPSBvcGVyYXRpb25UeXBlc05vZGVzW19pMTJdO1xuICAgICAgICBvcFR5cGVzW29wZXJhdGlvblR5cGUub3BlcmF0aW9uXSA9IGdldE5hbWVkVHlwZShvcGVyYXRpb25UeXBlLnR5cGUpO1xuICAgICAgfVxuICAgIH0gLy8gTm90ZTogV2hpbGUgdGhpcyBjb3VsZCBtYWtlIGVhcmx5IGFzc2VydGlvbnMgdG8gZ2V0IHRoZSBjb3JyZWN0bHlcbiAgICAvLyB0eXBlZCB2YWx1ZXMgYmVsb3csIHRoYXQgd291bGQgdGhyb3cgaW1tZWRpYXRlbHkgd2hpbGUgdHlwZSBzeXN0ZW1cbiAgICAvLyB2YWxpZGF0aW9uIHdpdGggdmFsaWRhdGVTY2hlbWEoKSB3aWxsIHByb2R1Y2UgbW9yZSBhY3Rpb25hYmxlIHJlc3VsdHMuXG5cblxuICAgIHJldHVybiBvcFR5cGVzO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0TmFtZWRUeXBlKG5vZGUpIHtcbiAgICB2YXIgX3N0ZFR5cGVNYXAkbmFtZTI7XG5cbiAgICB2YXIgbmFtZSA9IG5vZGUubmFtZS52YWx1ZTtcbiAgICB2YXIgdHlwZSA9IChfc3RkVHlwZU1hcCRuYW1lMiA9IHN0ZFR5cGVNYXBbbmFtZV0pICE9PSBudWxsICYmIF9zdGRUeXBlTWFwJG5hbWUyICE9PSB2b2lkIDAgPyBfc3RkVHlwZU1hcCRuYW1lMiA6IHR5cGVNYXBbbmFtZV07XG5cbiAgICBpZiAodHlwZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIHR5cGU6IFxcXCJcIi5jb25jYXQobmFtZSwgXCJcXFwiLlwiKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHR5cGU7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRXcmFwcGVkVHlwZShub2RlKSB7XG4gICAgaWYgKG5vZGUua2luZCA9PT0gS2luZC5MSVNUX1RZUEUpIHtcbiAgICAgIHJldHVybiBuZXcgR3JhcGhRTExpc3QoZ2V0V3JhcHBlZFR5cGUobm9kZS50eXBlKSk7XG4gICAgfVxuXG4gICAgaWYgKG5vZGUua2luZCA9PT0gS2luZC5OT05fTlVMTF9UWVBFKSB7XG4gICAgICByZXR1cm4gbmV3IEdyYXBoUUxOb25OdWxsKGdldFdyYXBwZWRUeXBlKG5vZGUudHlwZSkpO1xuICAgIH1cblxuICAgIHJldHVybiBnZXROYW1lZFR5cGUobm9kZSk7XG4gIH1cblxuICBmdW5jdGlvbiBidWlsZERpcmVjdGl2ZShub2RlKSB7XG4gICAgdmFyIGxvY2F0aW9ucyA9IG5vZGUubG9jYXRpb25zLm1hcChmdW5jdGlvbiAoX3JlZikge1xuICAgICAgdmFyIHZhbHVlID0gX3JlZi52YWx1ZTtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9KTtcbiAgICByZXR1cm4gbmV3IEdyYXBoUUxEaXJlY3RpdmUoe1xuICAgICAgbmFtZTogbm9kZS5uYW1lLnZhbHVlLFxuICAgICAgZGVzY3JpcHRpb246IGdldERlc2NyaXB0aW9uKG5vZGUsIG9wdGlvbnMpLFxuICAgICAgbG9jYXRpb25zOiBsb2NhdGlvbnMsXG4gICAgICBpc1JlcGVhdGFibGU6IG5vZGUucmVwZWF0YWJsZSxcbiAgICAgIGFyZ3M6IGJ1aWxkQXJndW1lbnRNYXAobm9kZS5hcmd1bWVudHMpLFxuICAgICAgYXN0Tm9kZTogbm9kZVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gYnVpbGRGaWVsZE1hcChub2Rlcykge1xuICAgIHZhciBmaWVsZENvbmZpZ01hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgICBmb3IgKHZhciBfaTE0ID0gMDsgX2kxNCA8IG5vZGVzLmxlbmd0aDsgX2kxNCsrKSB7XG4gICAgICB2YXIgX25vZGUkZmllbGRzO1xuXG4gICAgICB2YXIgbm9kZSA9IG5vZGVzW19pMTRdO1xuICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHQgKFNlZTogJ2h0dHBzOi8vZ2l0aHViLmNvbS9ncmFwaHFsL2dyYXBocWwtanMvaXNzdWVzLzIyMDMnKVxuICAgICAgdmFyIG5vZGVGaWVsZHMgPSAoX25vZGUkZmllbGRzID0gbm9kZS5maWVsZHMpICE9PSBudWxsICYmIF9ub2RlJGZpZWxkcyAhPT0gdm9pZCAwID8gX25vZGUkZmllbGRzIDogW107XG5cbiAgICAgIGZvciAodmFyIF9pMTYgPSAwOyBfaTE2IDwgbm9kZUZpZWxkcy5sZW5ndGg7IF9pMTYrKykge1xuICAgICAgICB2YXIgZmllbGQgPSBub2RlRmllbGRzW19pMTZdO1xuICAgICAgICBmaWVsZENvbmZpZ01hcFtmaWVsZC5uYW1lLnZhbHVlXSA9IHtcbiAgICAgICAgICAvLyBOb3RlOiBXaGlsZSB0aGlzIGNvdWxkIG1ha2UgYXNzZXJ0aW9ucyB0byBnZXQgdGhlIGNvcnJlY3RseSB0eXBlZFxuICAgICAgICAgIC8vIHZhbHVlLCB0aGF0IHdvdWxkIHRocm93IGltbWVkaWF0ZWx5IHdoaWxlIHR5cGUgc3lzdGVtIHZhbGlkYXRpb25cbiAgICAgICAgICAvLyB3aXRoIHZhbGlkYXRlU2NoZW1hKCkgd2lsbCBwcm9kdWNlIG1vcmUgYWN0aW9uYWJsZSByZXN1bHRzLlxuICAgICAgICAgIHR5cGU6IGdldFdyYXBwZWRUeXBlKGZpZWxkLnR5cGUpLFxuICAgICAgICAgIGRlc2NyaXB0aW9uOiBnZXREZXNjcmlwdGlvbihmaWVsZCwgb3B0aW9ucyksXG4gICAgICAgICAgYXJnczogYnVpbGRBcmd1bWVudE1hcChmaWVsZC5hcmd1bWVudHMpLFxuICAgICAgICAgIGRlcHJlY2F0aW9uUmVhc29uOiBnZXREZXByZWNhdGlvblJlYXNvbihmaWVsZCksXG4gICAgICAgICAgYXN0Tm9kZTogZmllbGRcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmllbGRDb25maWdNYXA7XG4gIH1cblxuICBmdW5jdGlvbiBidWlsZEFyZ3VtZW50TWFwKGFyZ3MpIHtcbiAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAoU2VlOiAnaHR0cHM6Ly9naXRodWIuY29tL2dyYXBocWwvZ3JhcGhxbC1qcy9pc3N1ZXMvMjIwMycpXG4gICAgdmFyIGFyZ3NOb2RlcyA9IGFyZ3MgIT09IG51bGwgJiYgYXJncyAhPT0gdm9pZCAwID8gYXJncyA6IFtdO1xuICAgIHZhciBhcmdDb25maWdNYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gICAgZm9yICh2YXIgX2kxOCA9IDA7IF9pMTggPCBhcmdzTm9kZXMubGVuZ3RoOyBfaTE4KyspIHtcbiAgICAgIHZhciBhcmcgPSBhcmdzTm9kZXNbX2kxOF07XG4gICAgICAvLyBOb3RlOiBXaGlsZSB0aGlzIGNvdWxkIG1ha2UgYXNzZXJ0aW9ucyB0byBnZXQgdGhlIGNvcnJlY3RseSB0eXBlZFxuICAgICAgLy8gdmFsdWUsIHRoYXQgd291bGQgdGhyb3cgaW1tZWRpYXRlbHkgd2hpbGUgdHlwZSBzeXN0ZW0gdmFsaWRhdGlvblxuICAgICAgLy8gd2l0aCB2YWxpZGF0ZVNjaGVtYSgpIHdpbGwgcHJvZHVjZSBtb3JlIGFjdGlvbmFibGUgcmVzdWx0cy5cbiAgICAgIHZhciB0eXBlID0gZ2V0V3JhcHBlZFR5cGUoYXJnLnR5cGUpO1xuICAgICAgYXJnQ29uZmlnTWFwW2FyZy5uYW1lLnZhbHVlXSA9IHtcbiAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAgZGVzY3JpcHRpb246IGdldERlc2NyaXB0aW9uKGFyZywgb3B0aW9ucyksXG4gICAgICAgIGRlZmF1bHRWYWx1ZTogdmFsdWVGcm9tQVNUKGFyZy5kZWZhdWx0VmFsdWUsIHR5cGUpLFxuICAgICAgICBkZXByZWNhdGlvblJlYXNvbjogZ2V0RGVwcmVjYXRpb25SZWFzb24oYXJnKSxcbiAgICAgICAgYXN0Tm9kZTogYXJnXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBhcmdDb25maWdNYXA7XG4gIH1cblxuICBmdW5jdGlvbiBidWlsZElucHV0RmllbGRNYXAobm9kZXMpIHtcbiAgICB2YXIgaW5wdXRGaWVsZE1hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgICBmb3IgKHZhciBfaTIwID0gMDsgX2kyMCA8IG5vZGVzLmxlbmd0aDsgX2kyMCsrKSB7XG4gICAgICB2YXIgX25vZGUkZmllbGRzMjtcblxuICAgICAgdmFyIG5vZGUgPSBub2Rlc1tfaTIwXTtcbiAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0IChTZWU6ICdodHRwczovL2dpdGh1Yi5jb20vZ3JhcGhxbC9ncmFwaHFsLWpzL2lzc3Vlcy8yMjAzJylcbiAgICAgIHZhciBmaWVsZHNOb2RlcyA9IChfbm9kZSRmaWVsZHMyID0gbm9kZS5maWVsZHMpICE9PSBudWxsICYmIF9ub2RlJGZpZWxkczIgIT09IHZvaWQgMCA/IF9ub2RlJGZpZWxkczIgOiBbXTtcblxuICAgICAgZm9yICh2YXIgX2kyMiA9IDA7IF9pMjIgPCBmaWVsZHNOb2Rlcy5sZW5ndGg7IF9pMjIrKykge1xuICAgICAgICB2YXIgZmllbGQgPSBmaWVsZHNOb2Rlc1tfaTIyXTtcbiAgICAgICAgLy8gTm90ZTogV2hpbGUgdGhpcyBjb3VsZCBtYWtlIGFzc2VydGlvbnMgdG8gZ2V0IHRoZSBjb3JyZWN0bHkgdHlwZWRcbiAgICAgICAgLy8gdmFsdWUsIHRoYXQgd291bGQgdGhyb3cgaW1tZWRpYXRlbHkgd2hpbGUgdHlwZSBzeXN0ZW0gdmFsaWRhdGlvblxuICAgICAgICAvLyB3aXRoIHZhbGlkYXRlU2NoZW1hKCkgd2lsbCBwcm9kdWNlIG1vcmUgYWN0aW9uYWJsZSByZXN1bHRzLlxuICAgICAgICB2YXIgdHlwZSA9IGdldFdyYXBwZWRUeXBlKGZpZWxkLnR5cGUpO1xuICAgICAgICBpbnB1dEZpZWxkTWFwW2ZpZWxkLm5hbWUudmFsdWVdID0ge1xuICAgICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgICAgZGVzY3JpcHRpb246IGdldERlc2NyaXB0aW9uKGZpZWxkLCBvcHRpb25zKSxcbiAgICAgICAgICBkZWZhdWx0VmFsdWU6IHZhbHVlRnJvbUFTVChmaWVsZC5kZWZhdWx0VmFsdWUsIHR5cGUpLFxuICAgICAgICAgIGRlcHJlY2F0aW9uUmVhc29uOiBnZXREZXByZWNhdGlvblJlYXNvbihmaWVsZCksXG4gICAgICAgICAgYXN0Tm9kZTogZmllbGRcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gaW5wdXRGaWVsZE1hcDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJ1aWxkRW51bVZhbHVlTWFwKG5vZGVzKSB7XG4gICAgdmFyIGVudW1WYWx1ZU1hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgICBmb3IgKHZhciBfaTI0ID0gMDsgX2kyNCA8IG5vZGVzLmxlbmd0aDsgX2kyNCsrKSB7XG4gICAgICB2YXIgX25vZGUkdmFsdWVzO1xuXG4gICAgICB2YXIgbm9kZSA9IG5vZGVzW19pMjRdO1xuICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHQgKFNlZTogJ2h0dHBzOi8vZ2l0aHViLmNvbS9ncmFwaHFsL2dyYXBocWwtanMvaXNzdWVzLzIyMDMnKVxuICAgICAgdmFyIHZhbHVlc05vZGVzID0gKF9ub2RlJHZhbHVlcyA9IG5vZGUudmFsdWVzKSAhPT0gbnVsbCAmJiBfbm9kZSR2YWx1ZXMgIT09IHZvaWQgMCA/IF9ub2RlJHZhbHVlcyA6IFtdO1xuXG4gICAgICBmb3IgKHZhciBfaTI2ID0gMDsgX2kyNiA8IHZhbHVlc05vZGVzLmxlbmd0aDsgX2kyNisrKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHZhbHVlc05vZGVzW19pMjZdO1xuICAgICAgICBlbnVtVmFsdWVNYXBbdmFsdWUubmFtZS52YWx1ZV0gPSB7XG4gICAgICAgICAgZGVzY3JpcHRpb246IGdldERlc2NyaXB0aW9uKHZhbHVlLCBvcHRpb25zKSxcbiAgICAgICAgICBkZXByZWNhdGlvblJlYXNvbjogZ2V0RGVwcmVjYXRpb25SZWFzb24odmFsdWUpLFxuICAgICAgICAgIGFzdE5vZGU6IHZhbHVlXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGVudW1WYWx1ZU1hcDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJ1aWxkSW50ZXJmYWNlcyhub2Rlcykge1xuICAgIHZhciBpbnRlcmZhY2VzID0gW107XG5cbiAgICBmb3IgKHZhciBfaTI4ID0gMDsgX2kyOCA8IG5vZGVzLmxlbmd0aDsgX2kyOCsrKSB7XG4gICAgICB2YXIgX25vZGUkaW50ZXJmYWNlcztcblxuICAgICAgdmFyIG5vZGUgPSBub2Rlc1tfaTI4XTtcbiAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0IChTZWU6ICdodHRwczovL2dpdGh1Yi5jb20vZ3JhcGhxbC9ncmFwaHFsLWpzL2lzc3Vlcy8yMjAzJylcbiAgICAgIHZhciBpbnRlcmZhY2VzTm9kZXMgPSAoX25vZGUkaW50ZXJmYWNlcyA9IG5vZGUuaW50ZXJmYWNlcykgIT09IG51bGwgJiYgX25vZGUkaW50ZXJmYWNlcyAhPT0gdm9pZCAwID8gX25vZGUkaW50ZXJmYWNlcyA6IFtdO1xuXG4gICAgICBmb3IgKHZhciBfaTMwID0gMDsgX2kzMCA8IGludGVyZmFjZXNOb2Rlcy5sZW5ndGg7IF9pMzArKykge1xuICAgICAgICB2YXIgdHlwZSA9IGludGVyZmFjZXNOb2Rlc1tfaTMwXTtcbiAgICAgICAgLy8gTm90ZTogV2hpbGUgdGhpcyBjb3VsZCBtYWtlIGFzc2VydGlvbnMgdG8gZ2V0IHRoZSBjb3JyZWN0bHkgdHlwZWRcbiAgICAgICAgLy8gdmFsdWVzIGJlbG93LCB0aGF0IHdvdWxkIHRocm93IGltbWVkaWF0ZWx5IHdoaWxlIHR5cGUgc3lzdGVtXG4gICAgICAgIC8vIHZhbGlkYXRpb24gd2l0aCB2YWxpZGF0ZVNjaGVtYSgpIHdpbGwgcHJvZHVjZSBtb3JlIGFjdGlvbmFibGVcbiAgICAgICAgLy8gcmVzdWx0cy5cbiAgICAgICAgaW50ZXJmYWNlcy5wdXNoKGdldE5hbWVkVHlwZSh0eXBlKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGludGVyZmFjZXM7XG4gIH1cblxuICBmdW5jdGlvbiBidWlsZFVuaW9uVHlwZXMobm9kZXMpIHtcbiAgICB2YXIgdHlwZXMgPSBbXTtcblxuICAgIGZvciAodmFyIF9pMzIgPSAwOyBfaTMyIDwgbm9kZXMubGVuZ3RoOyBfaTMyKyspIHtcbiAgICAgIHZhciBfbm9kZSR0eXBlcztcblxuICAgICAgdmFyIG5vZGUgPSBub2Rlc1tfaTMyXTtcbiAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0IChTZWU6ICdodHRwczovL2dpdGh1Yi5jb20vZ3JhcGhxbC9ncmFwaHFsLWpzL2lzc3Vlcy8yMjAzJylcbiAgICAgIHZhciB0eXBlTm9kZXMgPSAoX25vZGUkdHlwZXMgPSBub2RlLnR5cGVzKSAhPT0gbnVsbCAmJiBfbm9kZSR0eXBlcyAhPT0gdm9pZCAwID8gX25vZGUkdHlwZXMgOiBbXTtcblxuICAgICAgZm9yICh2YXIgX2kzNCA9IDA7IF9pMzQgPCB0eXBlTm9kZXMubGVuZ3RoOyBfaTM0KyspIHtcbiAgICAgICAgdmFyIHR5cGUgPSB0eXBlTm9kZXNbX2kzNF07XG4gICAgICAgIC8vIE5vdGU6IFdoaWxlIHRoaXMgY291bGQgbWFrZSBhc3NlcnRpb25zIHRvIGdldCB0aGUgY29ycmVjdGx5IHR5cGVkXG4gICAgICAgIC8vIHZhbHVlcyBiZWxvdywgdGhhdCB3b3VsZCB0aHJvdyBpbW1lZGlhdGVseSB3aGlsZSB0eXBlIHN5c3RlbVxuICAgICAgICAvLyB2YWxpZGF0aW9uIHdpdGggdmFsaWRhdGVTY2hlbWEoKSB3aWxsIHByb2R1Y2UgbW9yZSBhY3Rpb25hYmxlXG4gICAgICAgIC8vIHJlc3VsdHMuXG4gICAgICAgIHR5cGVzLnB1c2goZ2V0TmFtZWRUeXBlKHR5cGUpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdHlwZXM7XG4gIH1cblxuICBmdW5jdGlvbiBidWlsZFR5cGUoYXN0Tm9kZSkge1xuICAgIHZhciBfdHlwZUV4dGVuc2lvbnNNYXAkbmE7XG5cbiAgICB2YXIgbmFtZSA9IGFzdE5vZGUubmFtZS52YWx1ZTtcbiAgICB2YXIgZGVzY3JpcHRpb24gPSBnZXREZXNjcmlwdGlvbihhc3ROb2RlLCBvcHRpb25zKTtcbiAgICB2YXIgZXh0ZW5zaW9uTm9kZXMgPSAoX3R5cGVFeHRlbnNpb25zTWFwJG5hID0gdHlwZUV4dGVuc2lvbnNNYXBbbmFtZV0pICE9PSBudWxsICYmIF90eXBlRXh0ZW5zaW9uc01hcCRuYSAhPT0gdm9pZCAwID8gX3R5cGVFeHRlbnNpb25zTWFwJG5hIDogW107XG5cbiAgICBzd2l0Y2ggKGFzdE5vZGUua2luZCkge1xuICAgICAgY2FzZSBLaW5kLk9CSkVDVF9UWVBFX0RFRklOSVRJT046XG4gICAgICAgIHtcbiAgICAgICAgICB2YXIgZXh0ZW5zaW9uQVNUTm9kZXMgPSBleHRlbnNpb25Ob2RlcztcbiAgICAgICAgICB2YXIgYWxsTm9kZXMgPSBbYXN0Tm9kZV0uY29uY2F0KGV4dGVuc2lvbkFTVE5vZGVzKTtcbiAgICAgICAgICByZXR1cm4gbmV3IEdyYXBoUUxPYmplY3RUeXBlKHtcbiAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogZGVzY3JpcHRpb24sXG4gICAgICAgICAgICBpbnRlcmZhY2VzOiBmdW5jdGlvbiBpbnRlcmZhY2VzKCkge1xuICAgICAgICAgICAgICByZXR1cm4gYnVpbGRJbnRlcmZhY2VzKGFsbE5vZGVzKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmaWVsZHM6IGZ1bmN0aW9uIGZpZWxkcygpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGJ1aWxkRmllbGRNYXAoYWxsTm9kZXMpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFzdE5vZGU6IGFzdE5vZGUsXG4gICAgICAgICAgICBleHRlbnNpb25BU1ROb2RlczogZXh0ZW5zaW9uQVNUTm9kZXNcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICBjYXNlIEtpbmQuSU5URVJGQUNFX1RZUEVfREVGSU5JVElPTjpcbiAgICAgICAge1xuICAgICAgICAgIHZhciBfZXh0ZW5zaW9uQVNUTm9kZXMgPSBleHRlbnNpb25Ob2RlcztcblxuICAgICAgICAgIHZhciBfYWxsTm9kZXMgPSBbYXN0Tm9kZV0uY29uY2F0KF9leHRlbnNpb25BU1ROb2Rlcyk7XG5cbiAgICAgICAgICByZXR1cm4gbmV3IEdyYXBoUUxJbnRlcmZhY2VUeXBlKHtcbiAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogZGVzY3JpcHRpb24sXG4gICAgICAgICAgICBpbnRlcmZhY2VzOiBmdW5jdGlvbiBpbnRlcmZhY2VzKCkge1xuICAgICAgICAgICAgICByZXR1cm4gYnVpbGRJbnRlcmZhY2VzKF9hbGxOb2Rlcyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZmllbGRzOiBmdW5jdGlvbiBmaWVsZHMoKSB7XG4gICAgICAgICAgICAgIHJldHVybiBidWlsZEZpZWxkTWFwKF9hbGxOb2Rlcyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYXN0Tm9kZTogYXN0Tm9kZSxcbiAgICAgICAgICAgIGV4dGVuc2lvbkFTVE5vZGVzOiBfZXh0ZW5zaW9uQVNUTm9kZXNcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICBjYXNlIEtpbmQuRU5VTV9UWVBFX0RFRklOSVRJT046XG4gICAgICAgIHtcbiAgICAgICAgICB2YXIgX2V4dGVuc2lvbkFTVE5vZGVzMiA9IGV4dGVuc2lvbk5vZGVzO1xuXG4gICAgICAgICAgdmFyIF9hbGxOb2RlczIgPSBbYXN0Tm9kZV0uY29uY2F0KF9leHRlbnNpb25BU1ROb2RlczIpO1xuXG4gICAgICAgICAgcmV0dXJuIG5ldyBHcmFwaFFMRW51bVR5cGUoe1xuICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbixcbiAgICAgICAgICAgIHZhbHVlczogYnVpbGRFbnVtVmFsdWVNYXAoX2FsbE5vZGVzMiksXG4gICAgICAgICAgICBhc3ROb2RlOiBhc3ROb2RlLFxuICAgICAgICAgICAgZXh0ZW5zaW9uQVNUTm9kZXM6IF9leHRlbnNpb25BU1ROb2RlczJcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICBjYXNlIEtpbmQuVU5JT05fVFlQRV9ERUZJTklUSU9OOlxuICAgICAgICB7XG4gICAgICAgICAgdmFyIF9leHRlbnNpb25BU1ROb2RlczMgPSBleHRlbnNpb25Ob2RlcztcblxuICAgICAgICAgIHZhciBfYWxsTm9kZXMzID0gW2FzdE5vZGVdLmNvbmNhdChfZXh0ZW5zaW9uQVNUTm9kZXMzKTtcblxuICAgICAgICAgIHJldHVybiBuZXcgR3JhcGhRTFVuaW9uVHlwZSh7XG4gICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgdHlwZXM6IGZ1bmN0aW9uIHR5cGVzKCkge1xuICAgICAgICAgICAgICByZXR1cm4gYnVpbGRVbmlvblR5cGVzKF9hbGxOb2RlczMpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFzdE5vZGU6IGFzdE5vZGUsXG4gICAgICAgICAgICBleHRlbnNpb25BU1ROb2RlczogX2V4dGVuc2lvbkFTVE5vZGVzM1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgIGNhc2UgS2luZC5TQ0FMQVJfVFlQRV9ERUZJTklUSU9OOlxuICAgICAgICB7XG4gICAgICAgICAgdmFyIF9leHRlbnNpb25BU1ROb2RlczQgPSBleHRlbnNpb25Ob2RlcztcbiAgICAgICAgICByZXR1cm4gbmV3IEdyYXBoUUxTY2FsYXJUeXBlKHtcbiAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogZGVzY3JpcHRpb24sXG4gICAgICAgICAgICBzcGVjaWZpZWRCeVVybDogZ2V0U3BlY2lmaWVkQnlVcmwoYXN0Tm9kZSksXG4gICAgICAgICAgICBhc3ROb2RlOiBhc3ROb2RlLFxuICAgICAgICAgICAgZXh0ZW5zaW9uQVNUTm9kZXM6IF9leHRlbnNpb25BU1ROb2RlczRcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICBjYXNlIEtpbmQuSU5QVVRfT0JKRUNUX1RZUEVfREVGSU5JVElPTjpcbiAgICAgICAge1xuICAgICAgICAgIHZhciBfZXh0ZW5zaW9uQVNUTm9kZXM1ID0gZXh0ZW5zaW9uTm9kZXM7XG5cbiAgICAgICAgICB2YXIgX2FsbE5vZGVzNCA9IFthc3ROb2RlXS5jb25jYXQoX2V4dGVuc2lvbkFTVE5vZGVzNSk7XG5cbiAgICAgICAgICByZXR1cm4gbmV3IEdyYXBoUUxJbnB1dE9iamVjdFR5cGUoe1xuICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbixcbiAgICAgICAgICAgIGZpZWxkczogZnVuY3Rpb24gZmllbGRzKCkge1xuICAgICAgICAgICAgICByZXR1cm4gYnVpbGRJbnB1dEZpZWxkTWFwKF9hbGxOb2RlczQpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFzdE5vZGU6IGFzdE5vZGUsXG4gICAgICAgICAgICBleHRlbnNpb25BU1ROb2RlczogX2V4dGVuc2lvbkFTVE5vZGVzNVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAoTm90IHJlYWNoYWJsZS4gQWxsIHBvc3NpYmxlIHR5cGUgZGVmaW5pdGlvbiBub2RlcyBoYXZlIGJlZW4gY29uc2lkZXJlZClcblxuXG4gICAgZmFsc2UgfHwgaW52YXJpYW50KDAsICdVbmV4cGVjdGVkIHR5cGUgZGVmaW5pdGlvbiBub2RlOiAnICsgaW5zcGVjdChhc3ROb2RlKSk7XG4gIH1cbn1cbnZhciBzdGRUeXBlTWFwID0ga2V5TWFwKHNwZWNpZmllZFNjYWxhclR5cGVzLmNvbmNhdChpbnRyb3NwZWN0aW9uVHlwZXMpLCBmdW5jdGlvbiAodHlwZSkge1xuICByZXR1cm4gdHlwZS5uYW1lO1xufSk7XG4vKipcbiAqIEdpdmVuIGEgZmllbGQgb3IgZW51bSB2YWx1ZSBub2RlLCByZXR1cm5zIHRoZSBzdHJpbmcgdmFsdWUgZm9yIHRoZVxuICogZGVwcmVjYXRpb24gcmVhc29uLlxuICovXG5cbmZ1bmN0aW9uIGdldERlcHJlY2F0aW9uUmVhc29uKG5vZGUpIHtcbiAgdmFyIGRlcHJlY2F0ZWQgPSBnZXREaXJlY3RpdmVWYWx1ZXMoR3JhcGhRTERlcHJlY2F0ZWREaXJlY3RpdmUsIG5vZGUpO1xuICByZXR1cm4gZGVwcmVjYXRlZCA9PT0gbnVsbCB8fCBkZXByZWNhdGVkID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZXByZWNhdGVkLnJlYXNvbjtcbn1cbi8qKlxuICogR2l2ZW4gYSBzY2FsYXIgbm9kZSwgcmV0dXJucyB0aGUgc3RyaW5nIHZhbHVlIGZvciB0aGUgc3BlY2lmaWVkQnlVcmwuXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRTcGVjaWZpZWRCeVVybChub2RlKSB7XG4gIHZhciBzcGVjaWZpZWRCeSA9IGdldERpcmVjdGl2ZVZhbHVlcyhHcmFwaFFMU3BlY2lmaWVkQnlEaXJlY3RpdmUsIG5vZGUpO1xuICByZXR1cm4gc3BlY2lmaWVkQnkgPT09IG51bGwgfHwgc3BlY2lmaWVkQnkgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNwZWNpZmllZEJ5LnVybDtcbn1cbi8qKlxuICogR2l2ZW4gYW4gYXN0IG5vZGUsIHJldHVybnMgaXRzIHN0cmluZyBkZXNjcmlwdGlvbi5cbiAqIEBkZXByZWNhdGVkOiBwcm92aWRlZCB0byBlYXNlIGFkb3B0aW9uIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdjE2LlxuICpcbiAqIEFjY2VwdHMgb3B0aW9ucyBhcyBhIHNlY29uZCBhcmd1bWVudDpcbiAqXG4gKiAgICAtIGNvbW1lbnREZXNjcmlwdGlvbnM6XG4gKiAgICAgICAgUHJvdmlkZSB0cnVlIHRvIHVzZSBwcmVjZWRpbmcgY29tbWVudHMgYXMgdGhlIGRlc2NyaXB0aW9uLlxuICpcbiAqL1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXREZXNjcmlwdGlvbihub2RlLCBvcHRpb25zKSB7XG4gIGlmIChub2RlLmRlc2NyaXB0aW9uKSB7XG4gICAgcmV0dXJuIG5vZGUuZGVzY3JpcHRpb24udmFsdWU7XG4gIH1cblxuICBpZiAoKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5jb21tZW50RGVzY3JpcHRpb25zKSA9PT0gdHJ1ZSkge1xuICAgIHZhciByYXdWYWx1ZSA9IGdldExlYWRpbmdDb21tZW50QmxvY2sobm9kZSk7XG5cbiAgICBpZiAocmF3VmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGRlZGVudEJsb2NrU3RyaW5nVmFsdWUoJ1xcbicgKyByYXdWYWx1ZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGdldExlYWRpbmdDb21tZW50QmxvY2sobm9kZSkge1xuICB2YXIgbG9jID0gbm9kZS5sb2M7XG5cbiAgaWYgKCFsb2MpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgY29tbWVudHMgPSBbXTtcbiAgdmFyIHRva2VuID0gbG9jLnN0YXJ0VG9rZW4ucHJldjtcblxuICB3aGlsZSAodG9rZW4gIT0gbnVsbCAmJiB0b2tlbi5raW5kID09PSBUb2tlbktpbmQuQ09NTUVOVCAmJiB0b2tlbi5uZXh0ICYmIHRva2VuLnByZXYgJiYgdG9rZW4ubGluZSArIDEgPT09IHRva2VuLm5leHQubGluZSAmJiB0b2tlbi5saW5lICE9PSB0b2tlbi5wcmV2LmxpbmUpIHtcbiAgICB2YXIgdmFsdWUgPSBTdHJpbmcodG9rZW4udmFsdWUpO1xuICAgIGNvbW1lbnRzLnB1c2godmFsdWUpO1xuICAgIHRva2VuID0gdG9rZW4ucHJldjtcbiAgfVxuXG4gIHJldHVybiBjb21tZW50cy5sZW5ndGggPiAwID8gY29tbWVudHMucmV2ZXJzZSgpLmpvaW4oJ1xcbicpIDogdW5kZWZpbmVkO1xufVxuIiwiZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGlmIChlbnVtZXJhYmxlT25seSkgc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pOyBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmltcG9ydCBvYmplY3RWYWx1ZXMgZnJvbSBcIi4uL3BvbHlmaWxscy9vYmplY3RWYWx1ZXMubWpzXCI7XG5pbXBvcnQga2V5TWFwIGZyb20gXCIuLi9qc3V0aWxzL2tleU1hcC5tanNcIjtcbmltcG9ydCBpbnNwZWN0IGZyb20gXCIuLi9qc3V0aWxzL2luc3BlY3QubWpzXCI7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gXCIuLi9qc3V0aWxzL2ludmFyaWFudC5tanNcIjtcbmltcG9ydCBuYXR1cmFsQ29tcGFyZSBmcm9tIFwiLi4vanN1dGlscy9uYXR1cmFsQ29tcGFyZS5tanNcIjtcbmltcG9ydCB7IHByaW50IH0gZnJvbSBcIi4uL2xhbmd1YWdlL3ByaW50ZXIubWpzXCI7XG5pbXBvcnQgeyB2aXNpdCB9IGZyb20gXCIuLi9sYW5ndWFnZS92aXNpdG9yLm1qc1wiO1xuaW1wb3J0IHsgaXNTcGVjaWZpZWRTY2FsYXJUeXBlIH0gZnJvbSBcIi4uL3R5cGUvc2NhbGFycy5tanNcIjtcbmltcG9ydCB7IGlzU2NhbGFyVHlwZSwgaXNPYmplY3RUeXBlLCBpc0ludGVyZmFjZVR5cGUsIGlzVW5pb25UeXBlLCBpc0VudW1UeXBlLCBpc0lucHV0T2JqZWN0VHlwZSwgaXNOb25OdWxsVHlwZSwgaXNMaXN0VHlwZSwgaXNOYW1lZFR5cGUsIGlzUmVxdWlyZWRBcmd1bWVudCwgaXNSZXF1aXJlZElucHV0RmllbGQgfSBmcm9tIFwiLi4vdHlwZS9kZWZpbml0aW9uLm1qc1wiO1xuaW1wb3J0IHsgYXN0RnJvbVZhbHVlIH0gZnJvbSBcIi4vYXN0RnJvbVZhbHVlLm1qc1wiO1xuZXhwb3J0IHZhciBCcmVha2luZ0NoYW5nZVR5cGUgPSBPYmplY3QuZnJlZXplKHtcbiAgVFlQRV9SRU1PVkVEOiAnVFlQRV9SRU1PVkVEJyxcbiAgVFlQRV9DSEFOR0VEX0tJTkQ6ICdUWVBFX0NIQU5HRURfS0lORCcsXG4gIFRZUEVfUkVNT1ZFRF9GUk9NX1VOSU9OOiAnVFlQRV9SRU1PVkVEX0ZST01fVU5JT04nLFxuICBWQUxVRV9SRU1PVkVEX0ZST01fRU5VTTogJ1ZBTFVFX1JFTU9WRURfRlJPTV9FTlVNJyxcbiAgUkVRVUlSRURfSU5QVVRfRklFTERfQURERUQ6ICdSRVFVSVJFRF9JTlBVVF9GSUVMRF9BRERFRCcsXG4gIElNUExFTUVOVEVEX0lOVEVSRkFDRV9SRU1PVkVEOiAnSU1QTEVNRU5URURfSU5URVJGQUNFX1JFTU9WRUQnLFxuICBGSUVMRF9SRU1PVkVEOiAnRklFTERfUkVNT1ZFRCcsXG4gIEZJRUxEX0NIQU5HRURfS0lORDogJ0ZJRUxEX0NIQU5HRURfS0lORCcsXG4gIFJFUVVJUkVEX0FSR19BRERFRDogJ1JFUVVJUkVEX0FSR19BRERFRCcsXG4gIEFSR19SRU1PVkVEOiAnQVJHX1JFTU9WRUQnLFxuICBBUkdfQ0hBTkdFRF9LSU5EOiAnQVJHX0NIQU5HRURfS0lORCcsXG4gIERJUkVDVElWRV9SRU1PVkVEOiAnRElSRUNUSVZFX1JFTU9WRUQnLFxuICBESVJFQ1RJVkVfQVJHX1JFTU9WRUQ6ICdESVJFQ1RJVkVfQVJHX1JFTU9WRUQnLFxuICBSRVFVSVJFRF9ESVJFQ1RJVkVfQVJHX0FEREVEOiAnUkVRVUlSRURfRElSRUNUSVZFX0FSR19BRERFRCcsXG4gIERJUkVDVElWRV9SRVBFQVRBQkxFX1JFTU9WRUQ6ICdESVJFQ1RJVkVfUkVQRUFUQUJMRV9SRU1PVkVEJyxcbiAgRElSRUNUSVZFX0xPQ0FUSU9OX1JFTU9WRUQ6ICdESVJFQ1RJVkVfTE9DQVRJT05fUkVNT1ZFRCdcbn0pO1xuZXhwb3J0IHZhciBEYW5nZXJvdXNDaGFuZ2VUeXBlID0gT2JqZWN0LmZyZWV6ZSh7XG4gIFZBTFVFX0FEREVEX1RPX0VOVU06ICdWQUxVRV9BRERFRF9UT19FTlVNJyxcbiAgVFlQRV9BRERFRF9UT19VTklPTjogJ1RZUEVfQURERURfVE9fVU5JT04nLFxuICBPUFRJT05BTF9JTlBVVF9GSUVMRF9BRERFRDogJ09QVElPTkFMX0lOUFVUX0ZJRUxEX0FEREVEJyxcbiAgT1BUSU9OQUxfQVJHX0FEREVEOiAnT1BUSU9OQUxfQVJHX0FEREVEJyxcbiAgSU1QTEVNRU5URURfSU5URVJGQUNFX0FEREVEOiAnSU1QTEVNRU5URURfSU5URVJGQUNFX0FEREVEJyxcbiAgQVJHX0RFRkFVTFRfVkFMVUVfQ0hBTkdFOiAnQVJHX0RFRkFVTFRfVkFMVUVfQ0hBTkdFJ1xufSk7XG5cbi8qKlxuICogR2l2ZW4gdHdvIHNjaGVtYXMsIHJldHVybnMgYW4gQXJyYXkgY29udGFpbmluZyBkZXNjcmlwdGlvbnMgb2YgYWxsIHRoZSB0eXBlc1xuICogb2YgYnJlYWtpbmcgY2hhbmdlcyBjb3ZlcmVkIGJ5IHRoZSBvdGhlciBmdW5jdGlvbnMgZG93biBiZWxvdy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZpbmRCcmVha2luZ0NoYW5nZXMob2xkU2NoZW1hLCBuZXdTY2hlbWEpIHtcbiAgdmFyIGJyZWFraW5nQ2hhbmdlcyA9IGZpbmRTY2hlbWFDaGFuZ2VzKG9sZFNjaGVtYSwgbmV3U2NoZW1hKS5maWx0ZXIoZnVuY3Rpb24gKGNoYW5nZSkge1xuICAgIHJldHVybiBjaGFuZ2UudHlwZSBpbiBCcmVha2luZ0NoYW5nZVR5cGU7XG4gIH0pO1xuICByZXR1cm4gYnJlYWtpbmdDaGFuZ2VzO1xufVxuLyoqXG4gKiBHaXZlbiB0d28gc2NoZW1hcywgcmV0dXJucyBhbiBBcnJheSBjb250YWluaW5nIGRlc2NyaXB0aW9ucyBvZiBhbGwgdGhlIHR5cGVzXG4gKiBvZiBwb3RlbnRpYWxseSBkYW5nZXJvdXMgY2hhbmdlcyBjb3ZlcmVkIGJ5IHRoZSBvdGhlciBmdW5jdGlvbnMgZG93biBiZWxvdy5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZmluZERhbmdlcm91c0NoYW5nZXMob2xkU2NoZW1hLCBuZXdTY2hlbWEpIHtcbiAgdmFyIGRhbmdlcm91c0NoYW5nZXMgPSBmaW5kU2NoZW1hQ2hhbmdlcyhvbGRTY2hlbWEsIG5ld1NjaGVtYSkuZmlsdGVyKGZ1bmN0aW9uIChjaGFuZ2UpIHtcbiAgICByZXR1cm4gY2hhbmdlLnR5cGUgaW4gRGFuZ2Vyb3VzQ2hhbmdlVHlwZTtcbiAgfSk7XG4gIHJldHVybiBkYW5nZXJvdXNDaGFuZ2VzO1xufVxuXG5mdW5jdGlvbiBmaW5kU2NoZW1hQ2hhbmdlcyhvbGRTY2hlbWEsIG5ld1NjaGVtYSkge1xuICByZXR1cm4gW10uY29uY2F0KGZpbmRUeXBlQ2hhbmdlcyhvbGRTY2hlbWEsIG5ld1NjaGVtYSksIGZpbmREaXJlY3RpdmVDaGFuZ2VzKG9sZFNjaGVtYSwgbmV3U2NoZW1hKSk7XG59XG5cbmZ1bmN0aW9uIGZpbmREaXJlY3RpdmVDaGFuZ2VzKG9sZFNjaGVtYSwgbmV3U2NoZW1hKSB7XG4gIHZhciBzY2hlbWFDaGFuZ2VzID0gW107XG4gIHZhciBkaXJlY3RpdmVzRGlmZiA9IGRpZmYob2xkU2NoZW1hLmdldERpcmVjdGl2ZXMoKSwgbmV3U2NoZW1hLmdldERpcmVjdGl2ZXMoKSk7XG5cbiAgZm9yICh2YXIgX2kyID0gMCwgX2RpcmVjdGl2ZXNEaWZmJHJlbW92MiA9IGRpcmVjdGl2ZXNEaWZmLnJlbW92ZWQ7IF9pMiA8IF9kaXJlY3RpdmVzRGlmZiRyZW1vdjIubGVuZ3RoOyBfaTIrKykge1xuICAgIHZhciBvbGREaXJlY3RpdmUgPSBfZGlyZWN0aXZlc0RpZmYkcmVtb3YyW19pMl07XG4gICAgc2NoZW1hQ2hhbmdlcy5wdXNoKHtcbiAgICAgIHR5cGU6IEJyZWFraW5nQ2hhbmdlVHlwZS5ESVJFQ1RJVkVfUkVNT1ZFRCxcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlwiLmNvbmNhdChvbGREaXJlY3RpdmUubmFtZSwgXCIgd2FzIHJlbW92ZWQuXCIpXG4gICAgfSk7XG4gIH1cblxuICBmb3IgKHZhciBfaTQgPSAwLCBfZGlyZWN0aXZlc0RpZmYkcGVyc2kyID0gZGlyZWN0aXZlc0RpZmYucGVyc2lzdGVkOyBfaTQgPCBfZGlyZWN0aXZlc0RpZmYkcGVyc2kyLmxlbmd0aDsgX2k0KyspIHtcbiAgICB2YXIgX3JlZjIgPSBfZGlyZWN0aXZlc0RpZmYkcGVyc2kyW19pNF07XG4gICAgdmFyIF9vbGREaXJlY3RpdmUgPSBfcmVmMlswXTtcbiAgICB2YXIgbmV3RGlyZWN0aXZlID0gX3JlZjJbMV07XG4gICAgdmFyIGFyZ3NEaWZmID0gZGlmZihfb2xkRGlyZWN0aXZlLmFyZ3MsIG5ld0RpcmVjdGl2ZS5hcmdzKTtcblxuICAgIGZvciAodmFyIF9pNiA9IDAsIF9hcmdzRGlmZiRhZGRlZDIgPSBhcmdzRGlmZi5hZGRlZDsgX2k2IDwgX2FyZ3NEaWZmJGFkZGVkMi5sZW5ndGg7IF9pNisrKSB7XG4gICAgICB2YXIgbmV3QXJnID0gX2FyZ3NEaWZmJGFkZGVkMltfaTZdO1xuXG4gICAgICBpZiAoaXNSZXF1aXJlZEFyZ3VtZW50KG5ld0FyZykpIHtcbiAgICAgICAgc2NoZW1hQ2hhbmdlcy5wdXNoKHtcbiAgICAgICAgICB0eXBlOiBCcmVha2luZ0NoYW5nZVR5cGUuUkVRVUlSRURfRElSRUNUSVZFX0FSR19BRERFRCxcbiAgICAgICAgICBkZXNjcmlwdGlvbjogXCJBIHJlcXVpcmVkIGFyZyBcIi5jb25jYXQobmV3QXJnLm5hbWUsIFwiIG9uIGRpcmVjdGl2ZSBcIikuY29uY2F0KF9vbGREaXJlY3RpdmUubmFtZSwgXCIgd2FzIGFkZGVkLlwiKVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaTggPSAwLCBfYXJnc0RpZmYkcmVtb3ZlZDIgPSBhcmdzRGlmZi5yZW1vdmVkOyBfaTggPCBfYXJnc0RpZmYkcmVtb3ZlZDIubGVuZ3RoOyBfaTgrKykge1xuICAgICAgdmFyIG9sZEFyZyA9IF9hcmdzRGlmZiRyZW1vdmVkMltfaThdO1xuICAgICAgc2NoZW1hQ2hhbmdlcy5wdXNoKHtcbiAgICAgICAgdHlwZTogQnJlYWtpbmdDaGFuZ2VUeXBlLkRJUkVDVElWRV9BUkdfUkVNT1ZFRCxcbiAgICAgICAgZGVzY3JpcHRpb246IFwiXCIuY29uY2F0KG9sZEFyZy5uYW1lLCBcIiB3YXMgcmVtb3ZlZCBmcm9tIFwiKS5jb25jYXQoX29sZERpcmVjdGl2ZS5uYW1lLCBcIi5cIilcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChfb2xkRGlyZWN0aXZlLmlzUmVwZWF0YWJsZSAmJiAhbmV3RGlyZWN0aXZlLmlzUmVwZWF0YWJsZSkge1xuICAgICAgc2NoZW1hQ2hhbmdlcy5wdXNoKHtcbiAgICAgICAgdHlwZTogQnJlYWtpbmdDaGFuZ2VUeXBlLkRJUkVDVElWRV9SRVBFQVRBQkxFX1JFTU9WRUQsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIlJlcGVhdGFibGUgZmxhZyB3YXMgcmVtb3ZlZCBmcm9tIFwiLmNvbmNhdChfb2xkRGlyZWN0aXZlLm5hbWUsIFwiLlwiKVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2kxMCA9IDAsIF9vbGREaXJlY3RpdmUkbG9jYXRpbzIgPSBfb2xkRGlyZWN0aXZlLmxvY2F0aW9uczsgX2kxMCA8IF9vbGREaXJlY3RpdmUkbG9jYXRpbzIubGVuZ3RoOyBfaTEwKyspIHtcbiAgICAgIHZhciBsb2NhdGlvbiA9IF9vbGREaXJlY3RpdmUkbG9jYXRpbzJbX2kxMF07XG5cbiAgICAgIGlmIChuZXdEaXJlY3RpdmUubG9jYXRpb25zLmluZGV4T2YobG9jYXRpb24pID09PSAtMSkge1xuICAgICAgICBzY2hlbWFDaGFuZ2VzLnB1c2goe1xuICAgICAgICAgIHR5cGU6IEJyZWFraW5nQ2hhbmdlVHlwZS5ESVJFQ1RJVkVfTE9DQVRJT05fUkVNT1ZFRCxcbiAgICAgICAgICBkZXNjcmlwdGlvbjogXCJcIi5jb25jYXQobG9jYXRpb24sIFwiIHdhcyByZW1vdmVkIGZyb20gXCIpLmNvbmNhdChfb2xkRGlyZWN0aXZlLm5hbWUsIFwiLlwiKVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gc2NoZW1hQ2hhbmdlcztcbn1cblxuZnVuY3Rpb24gZmluZFR5cGVDaGFuZ2VzKG9sZFNjaGVtYSwgbmV3U2NoZW1hKSB7XG4gIHZhciBzY2hlbWFDaGFuZ2VzID0gW107XG4gIHZhciB0eXBlc0RpZmYgPSBkaWZmKG9iamVjdFZhbHVlcyhvbGRTY2hlbWEuZ2V0VHlwZU1hcCgpKSwgb2JqZWN0VmFsdWVzKG5ld1NjaGVtYS5nZXRUeXBlTWFwKCkpKTtcblxuICBmb3IgKHZhciBfaTEyID0gMCwgX3R5cGVzRGlmZiRyZW1vdmVkMiA9IHR5cGVzRGlmZi5yZW1vdmVkOyBfaTEyIDwgX3R5cGVzRGlmZiRyZW1vdmVkMi5sZW5ndGg7IF9pMTIrKykge1xuICAgIHZhciBvbGRUeXBlID0gX3R5cGVzRGlmZiRyZW1vdmVkMltfaTEyXTtcbiAgICBzY2hlbWFDaGFuZ2VzLnB1c2goe1xuICAgICAgdHlwZTogQnJlYWtpbmdDaGFuZ2VUeXBlLlRZUEVfUkVNT1ZFRCxcbiAgICAgIGRlc2NyaXB0aW9uOiBpc1NwZWNpZmllZFNjYWxhclR5cGUob2xkVHlwZSkgPyBcIlN0YW5kYXJkIHNjYWxhciBcIi5jb25jYXQob2xkVHlwZS5uYW1lLCBcIiB3YXMgcmVtb3ZlZCBiZWNhdXNlIGl0IGlzIG5vdCByZWZlcmVuY2VkIGFueW1vcmUuXCIpIDogXCJcIi5jb25jYXQob2xkVHlwZS5uYW1lLCBcIiB3YXMgcmVtb3ZlZC5cIilcbiAgICB9KTtcbiAgfVxuXG4gIGZvciAodmFyIF9pMTQgPSAwLCBfdHlwZXNEaWZmJHBlcnNpc3RlZDIgPSB0eXBlc0RpZmYucGVyc2lzdGVkOyBfaTE0IDwgX3R5cGVzRGlmZiRwZXJzaXN0ZWQyLmxlbmd0aDsgX2kxNCsrKSB7XG4gICAgdmFyIF9yZWY0ID0gX3R5cGVzRGlmZiRwZXJzaXN0ZWQyW19pMTRdO1xuICAgIHZhciBfb2xkVHlwZSA9IF9yZWY0WzBdO1xuICAgIHZhciBuZXdUeXBlID0gX3JlZjRbMV07XG5cbiAgICBpZiAoaXNFbnVtVHlwZShfb2xkVHlwZSkgJiYgaXNFbnVtVHlwZShuZXdUeXBlKSkge1xuICAgICAgc2NoZW1hQ2hhbmdlcy5wdXNoLmFwcGx5KHNjaGVtYUNoYW5nZXMsIGZpbmRFbnVtVHlwZUNoYW5nZXMoX29sZFR5cGUsIG5ld1R5cGUpKTtcbiAgICB9IGVsc2UgaWYgKGlzVW5pb25UeXBlKF9vbGRUeXBlKSAmJiBpc1VuaW9uVHlwZShuZXdUeXBlKSkge1xuICAgICAgc2NoZW1hQ2hhbmdlcy5wdXNoLmFwcGx5KHNjaGVtYUNoYW5nZXMsIGZpbmRVbmlvblR5cGVDaGFuZ2VzKF9vbGRUeXBlLCBuZXdUeXBlKSk7XG4gICAgfSBlbHNlIGlmIChpc0lucHV0T2JqZWN0VHlwZShfb2xkVHlwZSkgJiYgaXNJbnB1dE9iamVjdFR5cGUobmV3VHlwZSkpIHtcbiAgICAgIHNjaGVtYUNoYW5nZXMucHVzaC5hcHBseShzY2hlbWFDaGFuZ2VzLCBmaW5kSW5wdXRPYmplY3RUeXBlQ2hhbmdlcyhfb2xkVHlwZSwgbmV3VHlwZSkpO1xuICAgIH0gZWxzZSBpZiAoaXNPYmplY3RUeXBlKF9vbGRUeXBlKSAmJiBpc09iamVjdFR5cGUobmV3VHlwZSkpIHtcbiAgICAgIHNjaGVtYUNoYW5nZXMucHVzaC5hcHBseShzY2hlbWFDaGFuZ2VzLCBmaW5kRmllbGRDaGFuZ2VzKF9vbGRUeXBlLCBuZXdUeXBlKS5jb25jYXQoZmluZEltcGxlbWVudGVkSW50ZXJmYWNlc0NoYW5nZXMoX29sZFR5cGUsIG5ld1R5cGUpKSk7XG4gICAgfSBlbHNlIGlmIChpc0ludGVyZmFjZVR5cGUoX29sZFR5cGUpICYmIGlzSW50ZXJmYWNlVHlwZShuZXdUeXBlKSkge1xuICAgICAgc2NoZW1hQ2hhbmdlcy5wdXNoLmFwcGx5KHNjaGVtYUNoYW5nZXMsIGZpbmRGaWVsZENoYW5nZXMoX29sZFR5cGUsIG5ld1R5cGUpLmNvbmNhdChmaW5kSW1wbGVtZW50ZWRJbnRlcmZhY2VzQ2hhbmdlcyhfb2xkVHlwZSwgbmV3VHlwZSkpKTtcbiAgICB9IGVsc2UgaWYgKF9vbGRUeXBlLmNvbnN0cnVjdG9yICE9PSBuZXdUeXBlLmNvbnN0cnVjdG9yKSB7XG4gICAgICBzY2hlbWFDaGFuZ2VzLnB1c2goe1xuICAgICAgICB0eXBlOiBCcmVha2luZ0NoYW5nZVR5cGUuVFlQRV9DSEFOR0VEX0tJTkQsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIlwiLmNvbmNhdChfb2xkVHlwZS5uYW1lLCBcIiBjaGFuZ2VkIGZyb20gXCIpICsgXCJcIi5jb25jYXQodHlwZUtpbmROYW1lKF9vbGRUeXBlKSwgXCIgdG8gXCIpLmNvbmNhdCh0eXBlS2luZE5hbWUobmV3VHlwZSksIFwiLlwiKVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHNjaGVtYUNoYW5nZXM7XG59XG5cbmZ1bmN0aW9uIGZpbmRJbnB1dE9iamVjdFR5cGVDaGFuZ2VzKG9sZFR5cGUsIG5ld1R5cGUpIHtcbiAgdmFyIHNjaGVtYUNoYW5nZXMgPSBbXTtcbiAgdmFyIGZpZWxkc0RpZmYgPSBkaWZmKG9iamVjdFZhbHVlcyhvbGRUeXBlLmdldEZpZWxkcygpKSwgb2JqZWN0VmFsdWVzKG5ld1R5cGUuZ2V0RmllbGRzKCkpKTtcblxuICBmb3IgKHZhciBfaTE2ID0gMCwgX2ZpZWxkc0RpZmYkYWRkZWQyID0gZmllbGRzRGlmZi5hZGRlZDsgX2kxNiA8IF9maWVsZHNEaWZmJGFkZGVkMi5sZW5ndGg7IF9pMTYrKykge1xuICAgIHZhciBuZXdGaWVsZCA9IF9maWVsZHNEaWZmJGFkZGVkMltfaTE2XTtcblxuICAgIGlmIChpc1JlcXVpcmVkSW5wdXRGaWVsZChuZXdGaWVsZCkpIHtcbiAgICAgIHNjaGVtYUNoYW5nZXMucHVzaCh7XG4gICAgICAgIHR5cGU6IEJyZWFraW5nQ2hhbmdlVHlwZS5SRVFVSVJFRF9JTlBVVF9GSUVMRF9BRERFRCxcbiAgICAgICAgZGVzY3JpcHRpb246IFwiQSByZXF1aXJlZCBmaWVsZCBcIi5jb25jYXQobmV3RmllbGQubmFtZSwgXCIgb24gaW5wdXQgdHlwZSBcIikuY29uY2F0KG9sZFR5cGUubmFtZSwgXCIgd2FzIGFkZGVkLlwiKVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNjaGVtYUNoYW5nZXMucHVzaCh7XG4gICAgICAgIHR5cGU6IERhbmdlcm91c0NoYW5nZVR5cGUuT1BUSU9OQUxfSU5QVVRfRklFTERfQURERUQsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIkFuIG9wdGlvbmFsIGZpZWxkIFwiLmNvbmNhdChuZXdGaWVsZC5uYW1lLCBcIiBvbiBpbnB1dCB0eXBlIFwiKS5jb25jYXQob2xkVHlwZS5uYW1lLCBcIiB3YXMgYWRkZWQuXCIpXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBfaTE4ID0gMCwgX2ZpZWxkc0RpZmYkcmVtb3ZlZDIgPSBmaWVsZHNEaWZmLnJlbW92ZWQ7IF9pMTggPCBfZmllbGRzRGlmZiRyZW1vdmVkMi5sZW5ndGg7IF9pMTgrKykge1xuICAgIHZhciBvbGRGaWVsZCA9IF9maWVsZHNEaWZmJHJlbW92ZWQyW19pMThdO1xuICAgIHNjaGVtYUNoYW5nZXMucHVzaCh7XG4gICAgICB0eXBlOiBCcmVha2luZ0NoYW5nZVR5cGUuRklFTERfUkVNT1ZFRCxcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlwiLmNvbmNhdChvbGRUeXBlLm5hbWUsIFwiLlwiKS5jb25jYXQob2xkRmllbGQubmFtZSwgXCIgd2FzIHJlbW92ZWQuXCIpXG4gICAgfSk7XG4gIH1cblxuICBmb3IgKHZhciBfaTIwID0gMCwgX2ZpZWxkc0RpZmYkcGVyc2lzdGVkMiA9IGZpZWxkc0RpZmYucGVyc2lzdGVkOyBfaTIwIDwgX2ZpZWxkc0RpZmYkcGVyc2lzdGVkMi5sZW5ndGg7IF9pMjArKykge1xuICAgIHZhciBfcmVmNiA9IF9maWVsZHNEaWZmJHBlcnNpc3RlZDJbX2kyMF07XG4gICAgdmFyIF9vbGRGaWVsZCA9IF9yZWY2WzBdO1xuICAgIHZhciBfbmV3RmllbGQgPSBfcmVmNlsxXTtcbiAgICB2YXIgaXNTYWZlID0gaXNDaGFuZ2VTYWZlRm9ySW5wdXRPYmplY3RGaWVsZE9yRmllbGRBcmcoX29sZEZpZWxkLnR5cGUsIF9uZXdGaWVsZC50eXBlKTtcblxuICAgIGlmICghaXNTYWZlKSB7XG4gICAgICBzY2hlbWFDaGFuZ2VzLnB1c2goe1xuICAgICAgICB0eXBlOiBCcmVha2luZ0NoYW5nZVR5cGUuRklFTERfQ0hBTkdFRF9LSU5ELFxuICAgICAgICBkZXNjcmlwdGlvbjogXCJcIi5jb25jYXQob2xkVHlwZS5uYW1lLCBcIi5cIikuY29uY2F0KF9vbGRGaWVsZC5uYW1lLCBcIiBjaGFuZ2VkIHR5cGUgZnJvbSBcIikgKyBcIlwiLmNvbmNhdChTdHJpbmcoX29sZEZpZWxkLnR5cGUpLCBcIiB0byBcIikuY29uY2F0KFN0cmluZyhfbmV3RmllbGQudHlwZSksIFwiLlwiKVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHNjaGVtYUNoYW5nZXM7XG59XG5cbmZ1bmN0aW9uIGZpbmRVbmlvblR5cGVDaGFuZ2VzKG9sZFR5cGUsIG5ld1R5cGUpIHtcbiAgdmFyIHNjaGVtYUNoYW5nZXMgPSBbXTtcbiAgdmFyIHBvc3NpYmxlVHlwZXNEaWZmID0gZGlmZihvbGRUeXBlLmdldFR5cGVzKCksIG5ld1R5cGUuZ2V0VHlwZXMoKSk7XG5cbiAgZm9yICh2YXIgX2kyMiA9IDAsIF9wb3NzaWJsZVR5cGVzRGlmZiRhZDIgPSBwb3NzaWJsZVR5cGVzRGlmZi5hZGRlZDsgX2kyMiA8IF9wb3NzaWJsZVR5cGVzRGlmZiRhZDIubGVuZ3RoOyBfaTIyKyspIHtcbiAgICB2YXIgbmV3UG9zc2libGVUeXBlID0gX3Bvc3NpYmxlVHlwZXNEaWZmJGFkMltfaTIyXTtcbiAgICBzY2hlbWFDaGFuZ2VzLnB1c2goe1xuICAgICAgdHlwZTogRGFuZ2Vyb3VzQ2hhbmdlVHlwZS5UWVBFX0FEREVEX1RPX1VOSU9OLFxuICAgICAgZGVzY3JpcHRpb246IFwiXCIuY29uY2F0KG5ld1Bvc3NpYmxlVHlwZS5uYW1lLCBcIiB3YXMgYWRkZWQgdG8gdW5pb24gdHlwZSBcIikuY29uY2F0KG9sZFR5cGUubmFtZSwgXCIuXCIpXG4gICAgfSk7XG4gIH1cblxuICBmb3IgKHZhciBfaTI0ID0gMCwgX3Bvc3NpYmxlVHlwZXNEaWZmJHJlMiA9IHBvc3NpYmxlVHlwZXNEaWZmLnJlbW92ZWQ7IF9pMjQgPCBfcG9zc2libGVUeXBlc0RpZmYkcmUyLmxlbmd0aDsgX2kyNCsrKSB7XG4gICAgdmFyIG9sZFBvc3NpYmxlVHlwZSA9IF9wb3NzaWJsZVR5cGVzRGlmZiRyZTJbX2kyNF07XG4gICAgc2NoZW1hQ2hhbmdlcy5wdXNoKHtcbiAgICAgIHR5cGU6IEJyZWFraW5nQ2hhbmdlVHlwZS5UWVBFX1JFTU9WRURfRlJPTV9VTklPTixcbiAgICAgIGRlc2NyaXB0aW9uOiBcIlwiLmNvbmNhdChvbGRQb3NzaWJsZVR5cGUubmFtZSwgXCIgd2FzIHJlbW92ZWQgZnJvbSB1bmlvbiB0eXBlIFwiKS5jb25jYXQob2xkVHlwZS5uYW1lLCBcIi5cIilcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBzY2hlbWFDaGFuZ2VzO1xufVxuXG5mdW5jdGlvbiBmaW5kRW51bVR5cGVDaGFuZ2VzKG9sZFR5cGUsIG5ld1R5cGUpIHtcbiAgdmFyIHNjaGVtYUNoYW5nZXMgPSBbXTtcbiAgdmFyIHZhbHVlc0RpZmYgPSBkaWZmKG9sZFR5cGUuZ2V0VmFsdWVzKCksIG5ld1R5cGUuZ2V0VmFsdWVzKCkpO1xuXG4gIGZvciAodmFyIF9pMjYgPSAwLCBfdmFsdWVzRGlmZiRhZGRlZDIgPSB2YWx1ZXNEaWZmLmFkZGVkOyBfaTI2IDwgX3ZhbHVlc0RpZmYkYWRkZWQyLmxlbmd0aDsgX2kyNisrKSB7XG4gICAgdmFyIG5ld1ZhbHVlID0gX3ZhbHVlc0RpZmYkYWRkZWQyW19pMjZdO1xuICAgIHNjaGVtYUNoYW5nZXMucHVzaCh7XG4gICAgICB0eXBlOiBEYW5nZXJvdXNDaGFuZ2VUeXBlLlZBTFVFX0FEREVEX1RPX0VOVU0sXG4gICAgICBkZXNjcmlwdGlvbjogXCJcIi5jb25jYXQobmV3VmFsdWUubmFtZSwgXCIgd2FzIGFkZGVkIHRvIGVudW0gdHlwZSBcIikuY29uY2F0KG9sZFR5cGUubmFtZSwgXCIuXCIpXG4gICAgfSk7XG4gIH1cblxuICBmb3IgKHZhciBfaTI4ID0gMCwgX3ZhbHVlc0RpZmYkcmVtb3ZlZDIgPSB2YWx1ZXNEaWZmLnJlbW92ZWQ7IF9pMjggPCBfdmFsdWVzRGlmZiRyZW1vdmVkMi5sZW5ndGg7IF9pMjgrKykge1xuICAgIHZhciBvbGRWYWx1ZSA9IF92YWx1ZXNEaWZmJHJlbW92ZWQyW19pMjhdO1xuICAgIHNjaGVtYUNoYW5nZXMucHVzaCh7XG4gICAgICB0eXBlOiBCcmVha2luZ0NoYW5nZVR5cGUuVkFMVUVfUkVNT1ZFRF9GUk9NX0VOVU0sXG4gICAgICBkZXNjcmlwdGlvbjogXCJcIi5jb25jYXQob2xkVmFsdWUubmFtZSwgXCIgd2FzIHJlbW92ZWQgZnJvbSBlbnVtIHR5cGUgXCIpLmNvbmNhdChvbGRUeXBlLm5hbWUsIFwiLlwiKVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHNjaGVtYUNoYW5nZXM7XG59XG5cbmZ1bmN0aW9uIGZpbmRJbXBsZW1lbnRlZEludGVyZmFjZXNDaGFuZ2VzKG9sZFR5cGUsIG5ld1R5cGUpIHtcbiAgdmFyIHNjaGVtYUNoYW5nZXMgPSBbXTtcbiAgdmFyIGludGVyZmFjZXNEaWZmID0gZGlmZihvbGRUeXBlLmdldEludGVyZmFjZXMoKSwgbmV3VHlwZS5nZXRJbnRlcmZhY2VzKCkpO1xuXG4gIGZvciAodmFyIF9pMzAgPSAwLCBfaW50ZXJmYWNlc0RpZmYkYWRkZWQyID0gaW50ZXJmYWNlc0RpZmYuYWRkZWQ7IF9pMzAgPCBfaW50ZXJmYWNlc0RpZmYkYWRkZWQyLmxlbmd0aDsgX2kzMCsrKSB7XG4gICAgdmFyIG5ld0ludGVyZmFjZSA9IF9pbnRlcmZhY2VzRGlmZiRhZGRlZDJbX2kzMF07XG4gICAgc2NoZW1hQ2hhbmdlcy5wdXNoKHtcbiAgICAgIHR5cGU6IERhbmdlcm91c0NoYW5nZVR5cGUuSU1QTEVNRU5URURfSU5URVJGQUNFX0FEREVELFxuICAgICAgZGVzY3JpcHRpb246IFwiXCIuY29uY2F0KG5ld0ludGVyZmFjZS5uYW1lLCBcIiBhZGRlZCB0byBpbnRlcmZhY2VzIGltcGxlbWVudGVkIGJ5IFwiKS5jb25jYXQob2xkVHlwZS5uYW1lLCBcIi5cIilcbiAgICB9KTtcbiAgfVxuXG4gIGZvciAodmFyIF9pMzIgPSAwLCBfaW50ZXJmYWNlc0RpZmYkcmVtb3YyID0gaW50ZXJmYWNlc0RpZmYucmVtb3ZlZDsgX2kzMiA8IF9pbnRlcmZhY2VzRGlmZiRyZW1vdjIubGVuZ3RoOyBfaTMyKyspIHtcbiAgICB2YXIgb2xkSW50ZXJmYWNlID0gX2ludGVyZmFjZXNEaWZmJHJlbW92MltfaTMyXTtcbiAgICBzY2hlbWFDaGFuZ2VzLnB1c2goe1xuICAgICAgdHlwZTogQnJlYWtpbmdDaGFuZ2VUeXBlLklNUExFTUVOVEVEX0lOVEVSRkFDRV9SRU1PVkVELFxuICAgICAgZGVzY3JpcHRpb246IFwiXCIuY29uY2F0KG9sZFR5cGUubmFtZSwgXCIgbm8gbG9uZ2VyIGltcGxlbWVudHMgaW50ZXJmYWNlIFwiKS5jb25jYXQob2xkSW50ZXJmYWNlLm5hbWUsIFwiLlwiKVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHNjaGVtYUNoYW5nZXM7XG59XG5cbmZ1bmN0aW9uIGZpbmRGaWVsZENoYW5nZXMob2xkVHlwZSwgbmV3VHlwZSkge1xuICB2YXIgc2NoZW1hQ2hhbmdlcyA9IFtdO1xuICB2YXIgZmllbGRzRGlmZiA9IGRpZmYob2JqZWN0VmFsdWVzKG9sZFR5cGUuZ2V0RmllbGRzKCkpLCBvYmplY3RWYWx1ZXMobmV3VHlwZS5nZXRGaWVsZHMoKSkpO1xuXG4gIGZvciAodmFyIF9pMzQgPSAwLCBfZmllbGRzRGlmZiRyZW1vdmVkNCA9IGZpZWxkc0RpZmYucmVtb3ZlZDsgX2kzNCA8IF9maWVsZHNEaWZmJHJlbW92ZWQ0Lmxlbmd0aDsgX2kzNCsrKSB7XG4gICAgdmFyIG9sZEZpZWxkID0gX2ZpZWxkc0RpZmYkcmVtb3ZlZDRbX2kzNF07XG4gICAgc2NoZW1hQ2hhbmdlcy5wdXNoKHtcbiAgICAgIHR5cGU6IEJyZWFraW5nQ2hhbmdlVHlwZS5GSUVMRF9SRU1PVkVELFxuICAgICAgZGVzY3JpcHRpb246IFwiXCIuY29uY2F0KG9sZFR5cGUubmFtZSwgXCIuXCIpLmNvbmNhdChvbGRGaWVsZC5uYW1lLCBcIiB3YXMgcmVtb3ZlZC5cIilcbiAgICB9KTtcbiAgfVxuXG4gIGZvciAodmFyIF9pMzYgPSAwLCBfZmllbGRzRGlmZiRwZXJzaXN0ZWQ0ID0gZmllbGRzRGlmZi5wZXJzaXN0ZWQ7IF9pMzYgPCBfZmllbGRzRGlmZiRwZXJzaXN0ZWQ0Lmxlbmd0aDsgX2kzNisrKSB7XG4gICAgdmFyIF9yZWY4ID0gX2ZpZWxkc0RpZmYkcGVyc2lzdGVkNFtfaTM2XTtcbiAgICB2YXIgX29sZEZpZWxkMiA9IF9yZWY4WzBdO1xuICAgIHZhciBuZXdGaWVsZCA9IF9yZWY4WzFdO1xuICAgIHNjaGVtYUNoYW5nZXMucHVzaC5hcHBseShzY2hlbWFDaGFuZ2VzLCBmaW5kQXJnQ2hhbmdlcyhvbGRUeXBlLCBfb2xkRmllbGQyLCBuZXdGaWVsZCkpO1xuICAgIHZhciBpc1NhZmUgPSBpc0NoYW5nZVNhZmVGb3JPYmplY3RPckludGVyZmFjZUZpZWxkKF9vbGRGaWVsZDIudHlwZSwgbmV3RmllbGQudHlwZSk7XG5cbiAgICBpZiAoIWlzU2FmZSkge1xuICAgICAgc2NoZW1hQ2hhbmdlcy5wdXNoKHtcbiAgICAgICAgdHlwZTogQnJlYWtpbmdDaGFuZ2VUeXBlLkZJRUxEX0NIQU5HRURfS0lORCxcbiAgICAgICAgZGVzY3JpcHRpb246IFwiXCIuY29uY2F0KG9sZFR5cGUubmFtZSwgXCIuXCIpLmNvbmNhdChfb2xkRmllbGQyLm5hbWUsIFwiIGNoYW5nZWQgdHlwZSBmcm9tIFwiKSArIFwiXCIuY29uY2F0KFN0cmluZyhfb2xkRmllbGQyLnR5cGUpLCBcIiB0byBcIikuY29uY2F0KFN0cmluZyhuZXdGaWVsZC50eXBlKSwgXCIuXCIpXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc2NoZW1hQ2hhbmdlcztcbn1cblxuZnVuY3Rpb24gZmluZEFyZ0NoYW5nZXMob2xkVHlwZSwgb2xkRmllbGQsIG5ld0ZpZWxkKSB7XG4gIHZhciBzY2hlbWFDaGFuZ2VzID0gW107XG4gIHZhciBhcmdzRGlmZiA9IGRpZmYob2xkRmllbGQuYXJncywgbmV3RmllbGQuYXJncyk7XG5cbiAgZm9yICh2YXIgX2kzOCA9IDAsIF9hcmdzRGlmZiRyZW1vdmVkNCA9IGFyZ3NEaWZmLnJlbW92ZWQ7IF9pMzggPCBfYXJnc0RpZmYkcmVtb3ZlZDQubGVuZ3RoOyBfaTM4KyspIHtcbiAgICB2YXIgb2xkQXJnID0gX2FyZ3NEaWZmJHJlbW92ZWQ0W19pMzhdO1xuICAgIHNjaGVtYUNoYW5nZXMucHVzaCh7XG4gICAgICB0eXBlOiBCcmVha2luZ0NoYW5nZVR5cGUuQVJHX1JFTU9WRUQsXG4gICAgICBkZXNjcmlwdGlvbjogXCJcIi5jb25jYXQob2xkVHlwZS5uYW1lLCBcIi5cIikuY29uY2F0KG9sZEZpZWxkLm5hbWUsIFwiIGFyZyBcIikuY29uY2F0KG9sZEFyZy5uYW1lLCBcIiB3YXMgcmVtb3ZlZC5cIilcbiAgICB9KTtcbiAgfVxuXG4gIGZvciAodmFyIF9pNDAgPSAwLCBfYXJnc0RpZmYkcGVyc2lzdGVkMiA9IGFyZ3NEaWZmLnBlcnNpc3RlZDsgX2k0MCA8IF9hcmdzRGlmZiRwZXJzaXN0ZWQyLmxlbmd0aDsgX2k0MCsrKSB7XG4gICAgdmFyIF9yZWYxMCA9IF9hcmdzRGlmZiRwZXJzaXN0ZWQyW19pNDBdO1xuICAgIHZhciBfb2xkQXJnID0gX3JlZjEwWzBdO1xuICAgIHZhciBuZXdBcmcgPSBfcmVmMTBbMV07XG4gICAgdmFyIGlzU2FmZSA9IGlzQ2hhbmdlU2FmZUZvcklucHV0T2JqZWN0RmllbGRPckZpZWxkQXJnKF9vbGRBcmcudHlwZSwgbmV3QXJnLnR5cGUpO1xuXG4gICAgaWYgKCFpc1NhZmUpIHtcbiAgICAgIHNjaGVtYUNoYW5nZXMucHVzaCh7XG4gICAgICAgIHR5cGU6IEJyZWFraW5nQ2hhbmdlVHlwZS5BUkdfQ0hBTkdFRF9LSU5ELFxuICAgICAgICBkZXNjcmlwdGlvbjogXCJcIi5jb25jYXQob2xkVHlwZS5uYW1lLCBcIi5cIikuY29uY2F0KG9sZEZpZWxkLm5hbWUsIFwiIGFyZyBcIikuY29uY2F0KF9vbGRBcmcubmFtZSwgXCIgaGFzIGNoYW5nZWQgdHlwZSBmcm9tIFwiKSArIFwiXCIuY29uY2F0KFN0cmluZyhfb2xkQXJnLnR5cGUpLCBcIiB0byBcIikuY29uY2F0KFN0cmluZyhuZXdBcmcudHlwZSksIFwiLlwiKVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChfb2xkQXJnLmRlZmF1bHRWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAobmV3QXJnLmRlZmF1bHRWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHNjaGVtYUNoYW5nZXMucHVzaCh7XG4gICAgICAgICAgdHlwZTogRGFuZ2Vyb3VzQ2hhbmdlVHlwZS5BUkdfREVGQVVMVF9WQUxVRV9DSEFOR0UsXG4gICAgICAgICAgZGVzY3JpcHRpb246IFwiXCIuY29uY2F0KG9sZFR5cGUubmFtZSwgXCIuXCIpLmNvbmNhdChvbGRGaWVsZC5uYW1lLCBcIiBhcmcgXCIpLmNvbmNhdChfb2xkQXJnLm5hbWUsIFwiIGRlZmF1bHRWYWx1ZSB3YXMgcmVtb3ZlZC5cIilcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBTaW5jZSB3ZSBsb29raW5nIG9ubHkgZm9yIGNsaWVudCdzIG9ic2VydmFibGUgY2hhbmdlcyB3ZSBzaG91bGRcbiAgICAgICAgLy8gY29tcGFyZSBkZWZhdWx0IHZhbHVlcyBpbiB0aGUgc2FtZSByZXByZXNlbnRhdGlvbiBhcyB0aGV5IGFyZVxuICAgICAgICAvLyByZXByZXNlbnRlZCBpbnNpZGUgaW50cm9zcGVjdGlvbi5cbiAgICAgICAgdmFyIG9sZFZhbHVlU3RyID0gc3RyaW5naWZ5VmFsdWUoX29sZEFyZy5kZWZhdWx0VmFsdWUsIF9vbGRBcmcudHlwZSk7XG4gICAgICAgIHZhciBuZXdWYWx1ZVN0ciA9IHN0cmluZ2lmeVZhbHVlKG5ld0FyZy5kZWZhdWx0VmFsdWUsIG5ld0FyZy50eXBlKTtcblxuICAgICAgICBpZiAob2xkVmFsdWVTdHIgIT09IG5ld1ZhbHVlU3RyKSB7XG4gICAgICAgICAgc2NoZW1hQ2hhbmdlcy5wdXNoKHtcbiAgICAgICAgICAgIHR5cGU6IERhbmdlcm91c0NoYW5nZVR5cGUuQVJHX0RFRkFVTFRfVkFMVUVfQ0hBTkdFLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiXCIuY29uY2F0KG9sZFR5cGUubmFtZSwgXCIuXCIpLmNvbmNhdChvbGRGaWVsZC5uYW1lLCBcIiBhcmcgXCIpLmNvbmNhdChfb2xkQXJnLm5hbWUsIFwiIGhhcyBjaGFuZ2VkIGRlZmF1bHRWYWx1ZSBmcm9tIFwiKS5jb25jYXQob2xkVmFsdWVTdHIsIFwiIHRvIFwiKS5jb25jYXQobmV3VmFsdWVTdHIsIFwiLlwiKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgX2k0MiA9IDAsIF9hcmdzRGlmZiRhZGRlZDQgPSBhcmdzRGlmZi5hZGRlZDsgX2k0MiA8IF9hcmdzRGlmZiRhZGRlZDQubGVuZ3RoOyBfaTQyKyspIHtcbiAgICB2YXIgX25ld0FyZyA9IF9hcmdzRGlmZiRhZGRlZDRbX2k0Ml07XG5cbiAgICBpZiAoaXNSZXF1aXJlZEFyZ3VtZW50KF9uZXdBcmcpKSB7XG4gICAgICBzY2hlbWFDaGFuZ2VzLnB1c2goe1xuICAgICAgICB0eXBlOiBCcmVha2luZ0NoYW5nZVR5cGUuUkVRVUlSRURfQVJHX0FEREVELFxuICAgICAgICBkZXNjcmlwdGlvbjogXCJBIHJlcXVpcmVkIGFyZyBcIi5jb25jYXQoX25ld0FyZy5uYW1lLCBcIiBvbiBcIikuY29uY2F0KG9sZFR5cGUubmFtZSwgXCIuXCIpLmNvbmNhdChvbGRGaWVsZC5uYW1lLCBcIiB3YXMgYWRkZWQuXCIpXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2NoZW1hQ2hhbmdlcy5wdXNoKHtcbiAgICAgICAgdHlwZTogRGFuZ2Vyb3VzQ2hhbmdlVHlwZS5PUFRJT05BTF9BUkdfQURERUQsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIkFuIG9wdGlvbmFsIGFyZyBcIi5jb25jYXQoX25ld0FyZy5uYW1lLCBcIiBvbiBcIikuY29uY2F0KG9sZFR5cGUubmFtZSwgXCIuXCIpLmNvbmNhdChvbGRGaWVsZC5uYW1lLCBcIiB3YXMgYWRkZWQuXCIpXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc2NoZW1hQ2hhbmdlcztcbn1cblxuZnVuY3Rpb24gaXNDaGFuZ2VTYWZlRm9yT2JqZWN0T3JJbnRlcmZhY2VGaWVsZChvbGRUeXBlLCBuZXdUeXBlKSB7XG4gIGlmIChpc0xpc3RUeXBlKG9sZFR5cGUpKSB7XG4gICAgcmV0dXJuICgvLyBpZiB0aGV5J3JlIGJvdGggbGlzdHMsIG1ha2Ugc3VyZSB0aGUgdW5kZXJseWluZyB0eXBlcyBhcmUgY29tcGF0aWJsZVxuICAgICAgaXNMaXN0VHlwZShuZXdUeXBlKSAmJiBpc0NoYW5nZVNhZmVGb3JPYmplY3RPckludGVyZmFjZUZpZWxkKG9sZFR5cGUub2ZUeXBlLCBuZXdUeXBlLm9mVHlwZSkgfHwgLy8gbW92aW5nIGZyb20gbnVsbGFibGUgdG8gbm9uLW51bGwgb2YgdGhlIHNhbWUgdW5kZXJseWluZyB0eXBlIGlzIHNhZmVcbiAgICAgIGlzTm9uTnVsbFR5cGUobmV3VHlwZSkgJiYgaXNDaGFuZ2VTYWZlRm9yT2JqZWN0T3JJbnRlcmZhY2VGaWVsZChvbGRUeXBlLCBuZXdUeXBlLm9mVHlwZSlcbiAgICApO1xuICB9XG5cbiAgaWYgKGlzTm9uTnVsbFR5cGUob2xkVHlwZSkpIHtcbiAgICAvLyBpZiB0aGV5J3JlIGJvdGggbm9uLW51bGwsIG1ha2Ugc3VyZSB0aGUgdW5kZXJseWluZyB0eXBlcyBhcmUgY29tcGF0aWJsZVxuICAgIHJldHVybiBpc05vbk51bGxUeXBlKG5ld1R5cGUpICYmIGlzQ2hhbmdlU2FmZUZvck9iamVjdE9ySW50ZXJmYWNlRmllbGQob2xkVHlwZS5vZlR5cGUsIG5ld1R5cGUub2ZUeXBlKTtcbiAgfVxuXG4gIHJldHVybiAoLy8gaWYgdGhleSdyZSBib3RoIG5hbWVkIHR5cGVzLCBzZWUgaWYgdGhlaXIgbmFtZXMgYXJlIGVxdWl2YWxlbnRcbiAgICBpc05hbWVkVHlwZShuZXdUeXBlKSAmJiBvbGRUeXBlLm5hbWUgPT09IG5ld1R5cGUubmFtZSB8fCAvLyBtb3ZpbmcgZnJvbSBudWxsYWJsZSB0byBub24tbnVsbCBvZiB0aGUgc2FtZSB1bmRlcmx5aW5nIHR5cGUgaXMgc2FmZVxuICAgIGlzTm9uTnVsbFR5cGUobmV3VHlwZSkgJiYgaXNDaGFuZ2VTYWZlRm9yT2JqZWN0T3JJbnRlcmZhY2VGaWVsZChvbGRUeXBlLCBuZXdUeXBlLm9mVHlwZSlcbiAgKTtcbn1cblxuZnVuY3Rpb24gaXNDaGFuZ2VTYWZlRm9ySW5wdXRPYmplY3RGaWVsZE9yRmllbGRBcmcob2xkVHlwZSwgbmV3VHlwZSkge1xuICBpZiAoaXNMaXN0VHlwZShvbGRUeXBlKSkge1xuICAgIC8vIGlmIHRoZXkncmUgYm90aCBsaXN0cywgbWFrZSBzdXJlIHRoZSB1bmRlcmx5aW5nIHR5cGVzIGFyZSBjb21wYXRpYmxlXG4gICAgcmV0dXJuIGlzTGlzdFR5cGUobmV3VHlwZSkgJiYgaXNDaGFuZ2VTYWZlRm9ySW5wdXRPYmplY3RGaWVsZE9yRmllbGRBcmcob2xkVHlwZS5vZlR5cGUsIG5ld1R5cGUub2ZUeXBlKTtcbiAgfVxuXG4gIGlmIChpc05vbk51bGxUeXBlKG9sZFR5cGUpKSB7XG4gICAgcmV0dXJuICgvLyBpZiB0aGV5J3JlIGJvdGggbm9uLW51bGwsIG1ha2Ugc3VyZSB0aGUgdW5kZXJseWluZyB0eXBlcyBhcmVcbiAgICAgIC8vIGNvbXBhdGlibGVcbiAgICAgIGlzTm9uTnVsbFR5cGUobmV3VHlwZSkgJiYgaXNDaGFuZ2VTYWZlRm9ySW5wdXRPYmplY3RGaWVsZE9yRmllbGRBcmcob2xkVHlwZS5vZlR5cGUsIG5ld1R5cGUub2ZUeXBlKSB8fCAvLyBtb3ZpbmcgZnJvbSBub24tbnVsbCB0byBudWxsYWJsZSBvZiB0aGUgc2FtZSB1bmRlcmx5aW5nIHR5cGUgaXMgc2FmZVxuICAgICAgIWlzTm9uTnVsbFR5cGUobmV3VHlwZSkgJiYgaXNDaGFuZ2VTYWZlRm9ySW5wdXRPYmplY3RGaWVsZE9yRmllbGRBcmcob2xkVHlwZS5vZlR5cGUsIG5ld1R5cGUpXG4gICAgKTtcbiAgfSAvLyBpZiB0aGV5J3JlIGJvdGggbmFtZWQgdHlwZXMsIHNlZSBpZiB0aGVpciBuYW1lcyBhcmUgZXF1aXZhbGVudFxuXG5cbiAgcmV0dXJuIGlzTmFtZWRUeXBlKG5ld1R5cGUpICYmIG9sZFR5cGUubmFtZSA9PT0gbmV3VHlwZS5uYW1lO1xufVxuXG5mdW5jdGlvbiB0eXBlS2luZE5hbWUodHlwZSkge1xuICBpZiAoaXNTY2FsYXJUeXBlKHR5cGUpKSB7XG4gICAgcmV0dXJuICdhIFNjYWxhciB0eXBlJztcbiAgfVxuXG4gIGlmIChpc09iamVjdFR5cGUodHlwZSkpIHtcbiAgICByZXR1cm4gJ2FuIE9iamVjdCB0eXBlJztcbiAgfVxuXG4gIGlmIChpc0ludGVyZmFjZVR5cGUodHlwZSkpIHtcbiAgICByZXR1cm4gJ2FuIEludGVyZmFjZSB0eXBlJztcbiAgfVxuXG4gIGlmIChpc1VuaW9uVHlwZSh0eXBlKSkge1xuICAgIHJldHVybiAnYSBVbmlvbiB0eXBlJztcbiAgfVxuXG4gIGlmIChpc0VudW1UeXBlKHR5cGUpKSB7XG4gICAgcmV0dXJuICdhbiBFbnVtIHR5cGUnO1xuICB9IC8vIGlzdGFuYnVsIGlnbm9yZSBlbHNlIChTZWU6ICdodHRwczovL2dpdGh1Yi5jb20vZ3JhcGhxbC9ncmFwaHFsLWpzL2lzc3Vlcy8yNjE4JylcblxuXG4gIGlmIChpc0lucHV0T2JqZWN0VHlwZSh0eXBlKSkge1xuICAgIHJldHVybiAnYW4gSW5wdXQgdHlwZSc7XG4gIH0gLy8gaXN0YW5idWwgaWdub3JlIG5leHQgKE5vdCByZWFjaGFibGUuIEFsbCBwb3NzaWJsZSBuYW1lZCB0eXBlcyBoYXZlIGJlZW4gY29uc2lkZXJlZClcblxuXG4gIGZhbHNlIHx8IGludmFyaWFudCgwLCAnVW5leHBlY3RlZCB0eXBlOiAnICsgaW5zcGVjdCh0eXBlKSk7XG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeVZhbHVlKHZhbHVlLCB0eXBlKSB7XG4gIHZhciBhc3QgPSBhc3RGcm9tVmFsdWUodmFsdWUsIHR5cGUpO1xuICBhc3QgIT0gbnVsbCB8fCBpbnZhcmlhbnQoMCk7XG4gIHZhciBzb3J0ZWRBU1QgPSB2aXNpdChhc3QsIHtcbiAgICBPYmplY3RWYWx1ZTogZnVuY3Rpb24gT2JqZWN0VmFsdWUob2JqZWN0Tm9kZSkge1xuICAgICAgLy8gTWFrZSBhIGNvcHkgc2luY2Ugc29ydCBtdXRhdGVzIGFycmF5XG4gICAgICB2YXIgZmllbGRzID0gW10uY29uY2F0KG9iamVjdE5vZGUuZmllbGRzKTtcbiAgICAgIGZpZWxkcy5zb3J0KGZ1bmN0aW9uIChmaWVsZEEsIGZpZWxkQikge1xuICAgICAgICByZXR1cm4gbmF0dXJhbENvbXBhcmUoZmllbGRBLm5hbWUudmFsdWUsIGZpZWxkQi5uYW1lLnZhbHVlKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgb2JqZWN0Tm9kZSksIHt9LCB7XG4gICAgICAgIGZpZWxkczogZmllbGRzXG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcHJpbnQoc29ydGVkQVNUKTtcbn1cblxuZnVuY3Rpb24gZGlmZihvbGRBcnJheSwgbmV3QXJyYXkpIHtcbiAgdmFyIGFkZGVkID0gW107XG4gIHZhciByZW1vdmVkID0gW107XG4gIHZhciBwZXJzaXN0ZWQgPSBbXTtcbiAgdmFyIG9sZE1hcCA9IGtleU1hcChvbGRBcnJheSwgZnVuY3Rpb24gKF9yZWYxMSkge1xuICAgIHZhciBuYW1lID0gX3JlZjExLm5hbWU7XG4gICAgcmV0dXJuIG5hbWU7XG4gIH0pO1xuICB2YXIgbmV3TWFwID0ga2V5TWFwKG5ld0FycmF5LCBmdW5jdGlvbiAoX3JlZjEyKSB7XG4gICAgdmFyIG5hbWUgPSBfcmVmMTIubmFtZTtcbiAgICByZXR1cm4gbmFtZTtcbiAgfSk7XG5cbiAgZm9yICh2YXIgX2k0NCA9IDA7IF9pNDQgPCBvbGRBcnJheS5sZW5ndGg7IF9pNDQrKykge1xuICAgIHZhciBvbGRJdGVtID0gb2xkQXJyYXlbX2k0NF07XG4gICAgdmFyIG5ld0l0ZW0gPSBuZXdNYXBbb2xkSXRlbS5uYW1lXTtcblxuICAgIGlmIChuZXdJdGVtID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJlbW92ZWQucHVzaChvbGRJdGVtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGVyc2lzdGVkLnB1c2goW29sZEl0ZW0sIG5ld0l0ZW1dKTtcbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBfaTQ2ID0gMDsgX2k0NiA8IG5ld0FycmF5Lmxlbmd0aDsgX2k0NisrKSB7XG4gICAgdmFyIF9uZXdJdGVtID0gbmV3QXJyYXlbX2k0Nl07XG5cbiAgICBpZiAob2xkTWFwW19uZXdJdGVtLm5hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGFkZGVkLnB1c2goX25ld0l0ZW0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgYWRkZWQ6IGFkZGVkLFxuICAgIHBlcnNpc3RlZDogcGVyc2lzdGVkLFxuICAgIHJlbW92ZWQ6IHJlbW92ZWRcbiAgfTtcbn1cbiIsImltcG9ydCB7IHZhbGlkYXRlIH0gZnJvbSBcIi4uL3ZhbGlkYXRpb24vdmFsaWRhdGUubWpzXCI7XG5pbXBvcnQgeyBOb0RlcHJlY2F0ZWRDdXN0b21SdWxlIH0gZnJvbSBcIi4uL3ZhbGlkYXRpb24vcnVsZXMvY3VzdG9tL05vRGVwcmVjYXRlZEN1c3RvbVJ1bGUubWpzXCI7XG4vKipcbiAqIEEgdmFsaWRhdGlvbiBydWxlIHdoaWNoIHJlcG9ydHMgZGVwcmVjYXRlZCB1c2FnZXMuXG4gKlxuICogUmV0dXJucyBhIGxpc3Qgb2YgR3JhcGhRTEVycm9yIGluc3RhbmNlcyBkZXNjcmliaW5nIGVhY2ggZGVwcmVjYXRlZCB1c2UuXG4gKlxuICogQGRlcHJlY2F0ZWQgUGxlYXNlIHVzZSBgdmFsaWRhdGVgIHdpdGggYE5vRGVwcmVjYXRlZEN1c3RvbVJ1bGVgIGluc3RlYWQ6XG4gKlxuICogYGBgXG4gKiBpbXBvcnQgeyB2YWxpZGF0ZSwgTm9EZXByZWNhdGVkQ3VzdG9tUnVsZSB9IGZyb20gJ2dyYXBocWwnXG4gKlxuICogY29uc3QgZXJyb3JzID0gdmFsaWRhdGUoc2NoZW1hLCBkb2N1bWVudCwgW05vRGVwcmVjYXRlZEN1c3RvbVJ1bGVdKVxuICogYGBgXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZpbmREZXByZWNhdGVkVXNhZ2VzKHNjaGVtYSwgYXN0KSB7XG4gIHJldHVybiB2YWxpZGF0ZShzY2hlbWEsIGFzdCwgW05vRGVwcmVjYXRlZEN1c3RvbVJ1bGVdKTtcbn1cbiIsImZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0SW50cm9zcGVjdGlvblF1ZXJ5KG9wdGlvbnMpIHtcbiAgdmFyIG9wdGlvbnNXaXRoRGVmYXVsdCA9IF9vYmplY3RTcHJlYWQoe1xuICAgIGRlc2NyaXB0aW9uczogdHJ1ZSxcbiAgICBzcGVjaWZpZWRCeVVybDogZmFsc2UsXG4gICAgZGlyZWN0aXZlSXNSZXBlYXRhYmxlOiBmYWxzZSxcbiAgICBzY2hlbWFEZXNjcmlwdGlvbjogZmFsc2UsXG4gICAgaW5wdXRWYWx1ZURlcHJlY2F0aW9uOiBmYWxzZVxuICB9LCBvcHRpb25zKTtcblxuICB2YXIgZGVzY3JpcHRpb25zID0gb3B0aW9uc1dpdGhEZWZhdWx0LmRlc2NyaXB0aW9ucyA/ICdkZXNjcmlwdGlvbicgOiAnJztcbiAgdmFyIHNwZWNpZmllZEJ5VXJsID0gb3B0aW9uc1dpdGhEZWZhdWx0LnNwZWNpZmllZEJ5VXJsID8gJ3NwZWNpZmllZEJ5VXJsJyA6ICcnO1xuICB2YXIgZGlyZWN0aXZlSXNSZXBlYXRhYmxlID0gb3B0aW9uc1dpdGhEZWZhdWx0LmRpcmVjdGl2ZUlzUmVwZWF0YWJsZSA/ICdpc1JlcGVhdGFibGUnIDogJyc7XG4gIHZhciBzY2hlbWFEZXNjcmlwdGlvbiA9IG9wdGlvbnNXaXRoRGVmYXVsdC5zY2hlbWFEZXNjcmlwdGlvbiA/IGRlc2NyaXB0aW9ucyA6ICcnO1xuXG4gIGZ1bmN0aW9uIGlucHV0RGVwcmVjYXRpb24oc3RyKSB7XG4gICAgcmV0dXJuIG9wdGlvbnNXaXRoRGVmYXVsdC5pbnB1dFZhbHVlRGVwcmVjYXRpb24gPyBzdHIgOiAnJztcbiAgfVxuXG4gIHJldHVybiBcIlxcbiAgICBxdWVyeSBJbnRyb3NwZWN0aW9uUXVlcnkge1xcbiAgICAgIF9fc2NoZW1hIHtcXG4gICAgICAgIFwiLmNvbmNhdChzY2hlbWFEZXNjcmlwdGlvbiwgXCJcXG4gICAgICAgIHF1ZXJ5VHlwZSB7IG5hbWUgfVxcbiAgICAgICAgbXV0YXRpb25UeXBlIHsgbmFtZSB9XFxuICAgICAgICBzdWJzY3JpcHRpb25UeXBlIHsgbmFtZSB9XFxuICAgICAgICB0eXBlcyB7XFxuICAgICAgICAgIC4uLkZ1bGxUeXBlXFxuICAgICAgICB9XFxuICAgICAgICBkaXJlY3RpdmVzIHtcXG4gICAgICAgICAgbmFtZVxcbiAgICAgICAgICBcIikuY29uY2F0KGRlc2NyaXB0aW9ucywgXCJcXG4gICAgICAgICAgXCIpLmNvbmNhdChkaXJlY3RpdmVJc1JlcGVhdGFibGUsIFwiXFxuICAgICAgICAgIGxvY2F0aW9uc1xcbiAgICAgICAgICBhcmdzXCIpLmNvbmNhdChpbnB1dERlcHJlY2F0aW9uKCcoaW5jbHVkZURlcHJlY2F0ZWQ6IHRydWUpJyksIFwiIHtcXG4gICAgICAgICAgICAuLi5JbnB1dFZhbHVlXFxuICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICB9XFxuICAgIH1cXG5cXG4gICAgZnJhZ21lbnQgRnVsbFR5cGUgb24gX19UeXBlIHtcXG4gICAgICBraW5kXFxuICAgICAgbmFtZVxcbiAgICAgIFwiKS5jb25jYXQoZGVzY3JpcHRpb25zLCBcIlxcbiAgICAgIFwiKS5jb25jYXQoc3BlY2lmaWVkQnlVcmwsIFwiXFxuICAgICAgZmllbGRzKGluY2x1ZGVEZXByZWNhdGVkOiB0cnVlKSB7XFxuICAgICAgICBuYW1lXFxuICAgICAgICBcIikuY29uY2F0KGRlc2NyaXB0aW9ucywgXCJcXG4gICAgICAgIGFyZ3NcIikuY29uY2F0KGlucHV0RGVwcmVjYXRpb24oJyhpbmNsdWRlRGVwcmVjYXRlZDogdHJ1ZSknKSwgXCIge1xcbiAgICAgICAgICAuLi5JbnB1dFZhbHVlXFxuICAgICAgICB9XFxuICAgICAgICB0eXBlIHtcXG4gICAgICAgICAgLi4uVHlwZVJlZlxcbiAgICAgICAgfVxcbiAgICAgICAgaXNEZXByZWNhdGVkXFxuICAgICAgICBkZXByZWNhdGlvblJlYXNvblxcbiAgICAgIH1cXG4gICAgICBpbnB1dEZpZWxkc1wiKS5jb25jYXQoaW5wdXREZXByZWNhdGlvbignKGluY2x1ZGVEZXByZWNhdGVkOiB0cnVlKScpLCBcIiB7XFxuICAgICAgICAuLi5JbnB1dFZhbHVlXFxuICAgICAgfVxcbiAgICAgIGludGVyZmFjZXMge1xcbiAgICAgICAgLi4uVHlwZVJlZlxcbiAgICAgIH1cXG4gICAgICBlbnVtVmFsdWVzKGluY2x1ZGVEZXByZWNhdGVkOiB0cnVlKSB7XFxuICAgICAgICBuYW1lXFxuICAgICAgICBcIikuY29uY2F0KGRlc2NyaXB0aW9ucywgXCJcXG4gICAgICAgIGlzRGVwcmVjYXRlZFxcbiAgICAgICAgZGVwcmVjYXRpb25SZWFzb25cXG4gICAgICB9XFxuICAgICAgcG9zc2libGVUeXBlcyB7XFxuICAgICAgICAuLi5UeXBlUmVmXFxuICAgICAgfVxcbiAgICB9XFxuXFxuICAgIGZyYWdtZW50IElucHV0VmFsdWUgb24gX19JbnB1dFZhbHVlIHtcXG4gICAgICBuYW1lXFxuICAgICAgXCIpLmNvbmNhdChkZXNjcmlwdGlvbnMsIFwiXFxuICAgICAgdHlwZSB7IC4uLlR5cGVSZWYgfVxcbiAgICAgIGRlZmF1bHRWYWx1ZVxcbiAgICAgIFwiKS5jb25jYXQoaW5wdXREZXByZWNhdGlvbignaXNEZXByZWNhdGVkJyksIFwiXFxuICAgICAgXCIpLmNvbmNhdChpbnB1dERlcHJlY2F0aW9uKCdkZXByZWNhdGlvblJlYXNvbicpLCBcIlxcbiAgICB9XFxuXFxuICAgIGZyYWdtZW50IFR5cGVSZWYgb24gX19UeXBlIHtcXG4gICAgICBraW5kXFxuICAgICAgbmFtZVxcbiAgICAgIG9mVHlwZSB7XFxuICAgICAgICBraW5kXFxuICAgICAgICBuYW1lXFxuICAgICAgICBvZlR5cGUge1xcbiAgICAgICAgICBraW5kXFxuICAgICAgICAgIG5hbWVcXG4gICAgICAgICAgb2ZUeXBlIHtcXG4gICAgICAgICAgICBraW5kXFxuICAgICAgICAgICAgbmFtZVxcbiAgICAgICAgICAgIG9mVHlwZSB7XFxuICAgICAgICAgICAgICBraW5kXFxuICAgICAgICAgICAgICBuYW1lXFxuICAgICAgICAgICAgICBvZlR5cGUge1xcbiAgICAgICAgICAgICAgICBraW5kXFxuICAgICAgICAgICAgICAgIG5hbWVcXG4gICAgICAgICAgICAgICAgb2ZUeXBlIHtcXG4gICAgICAgICAgICAgICAgICBraW5kXFxuICAgICAgICAgICAgICAgICAgbmFtZVxcbiAgICAgICAgICAgICAgICAgIG9mVHlwZSB7XFxuICAgICAgICAgICAgICAgICAgICBraW5kXFxuICAgICAgICAgICAgICAgICAgICBuYW1lXFxuICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgfVxcbiAgICB9XFxuICBcIik7XG59XG4iLCJpbXBvcnQgeyBLaW5kIH0gZnJvbSBcIi4uL2xhbmd1YWdlL2tpbmRzLm1qc1wiO1xuLyoqXG4gKiBSZXR1cm5zIGFuIG9wZXJhdGlvbiBBU1QgZ2l2ZW4gYSBkb2N1bWVudCBBU1QgYW5kIG9wdGlvbmFsbHkgYW4gb3BlcmF0aW9uXG4gKiBuYW1lLiBJZiBhIG5hbWUgaXMgbm90IHByb3ZpZGVkLCBhbiBvcGVyYXRpb24gaXMgb25seSByZXR1cm5lZCBpZiBvbmx5IG9uZSBpc1xuICogcHJvdmlkZWQgaW4gdGhlIGRvY3VtZW50LlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRPcGVyYXRpb25BU1QoZG9jdW1lbnRBU1QsIG9wZXJhdGlvbk5hbWUpIHtcbiAgdmFyIG9wZXJhdGlvbiA9IG51bGw7XG5cbiAgZm9yICh2YXIgX2kyID0gMCwgX2RvY3VtZW50QVNUJGRlZmluaXRpMiA9IGRvY3VtZW50QVNULmRlZmluaXRpb25zOyBfaTIgPCBfZG9jdW1lbnRBU1QkZGVmaW5pdGkyLmxlbmd0aDsgX2kyKyspIHtcbiAgICB2YXIgZGVmaW5pdGlvbiA9IF9kb2N1bWVudEFTVCRkZWZpbml0aTJbX2kyXTtcblxuICAgIGlmIChkZWZpbml0aW9uLmtpbmQgPT09IEtpbmQuT1BFUkFUSU9OX0RFRklOSVRJT04pIHtcbiAgICAgIHZhciBfZGVmaW5pdGlvbiRuYW1lO1xuXG4gICAgICBpZiAob3BlcmF0aW9uTmFtZSA9PSBudWxsKSB7XG4gICAgICAgIC8vIElmIG5vIG9wZXJhdGlvbiBuYW1lIHdhcyBwcm92aWRlZCwgb25seSByZXR1cm4gYW4gT3BlcmF0aW9uIGlmIHRoZXJlXG4gICAgICAgIC8vIGlzIG9uZSBkZWZpbmVkIGluIHRoZSBkb2N1bWVudC4gVXBvbiBlbmNvdW50ZXJpbmcgdGhlIHNlY29uZCwgcmV0dXJuXG4gICAgICAgIC8vIG51bGwuXG4gICAgICAgIGlmIChvcGVyYXRpb24pIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIG9wZXJhdGlvbiA9IGRlZmluaXRpb247XG4gICAgICB9IGVsc2UgaWYgKCgoX2RlZmluaXRpb24kbmFtZSA9IGRlZmluaXRpb24ubmFtZSkgPT09IG51bGwgfHwgX2RlZmluaXRpb24kbmFtZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2RlZmluaXRpb24kbmFtZS52YWx1ZSkgPT09IG9wZXJhdGlvbk5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGRlZmluaXRpb247XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG9wZXJhdGlvbjtcbn1cbiIsImltcG9ydCB7IEdyYXBoUUxFcnJvciB9IGZyb20gXCIuLi9lcnJvci9HcmFwaFFMRXJyb3IubWpzXCI7XG5cbi8qKlxuICogRXh0cmFjdHMgdGhlIHJvb3QgdHlwZSBvZiB0aGUgb3BlcmF0aW9uIGZyb20gdGhlIHNjaGVtYS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldE9wZXJhdGlvblJvb3RUeXBlKHNjaGVtYSwgb3BlcmF0aW9uKSB7XG4gIGlmIChvcGVyYXRpb24ub3BlcmF0aW9uID09PSAncXVlcnknKSB7XG4gICAgdmFyIHF1ZXJ5VHlwZSA9IHNjaGVtYS5nZXRRdWVyeVR5cGUoKTtcblxuICAgIGlmICghcXVlcnlUeXBlKSB7XG4gICAgICB0aHJvdyBuZXcgR3JhcGhRTEVycm9yKCdTY2hlbWEgZG9lcyBub3QgZGVmaW5lIHRoZSByZXF1aXJlZCBxdWVyeSByb290IHR5cGUuJywgb3BlcmF0aW9uKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcXVlcnlUeXBlO1xuICB9XG5cbiAgaWYgKG9wZXJhdGlvbi5vcGVyYXRpb24gPT09ICdtdXRhdGlvbicpIHtcbiAgICB2YXIgbXV0YXRpb25UeXBlID0gc2NoZW1hLmdldE11dGF0aW9uVHlwZSgpO1xuXG4gICAgaWYgKCFtdXRhdGlvblR5cGUpIHtcbiAgICAgIHRocm93IG5ldyBHcmFwaFFMRXJyb3IoJ1NjaGVtYSBpcyBub3QgY29uZmlndXJlZCBmb3IgbXV0YXRpb25zLicsIG9wZXJhdGlvbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG11dGF0aW9uVHlwZTtcbiAgfVxuXG4gIGlmIChvcGVyYXRpb24ub3BlcmF0aW9uID09PSAnc3Vic2NyaXB0aW9uJykge1xuICAgIHZhciBzdWJzY3JpcHRpb25UeXBlID0gc2NoZW1hLmdldFN1YnNjcmlwdGlvblR5cGUoKTtcblxuICAgIGlmICghc3Vic2NyaXB0aW9uVHlwZSkge1xuICAgICAgdGhyb3cgbmV3IEdyYXBoUUxFcnJvcignU2NoZW1hIGlzIG5vdCBjb25maWd1cmVkIGZvciBzdWJzY3JpcHRpb25zLicsIG9wZXJhdGlvbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN1YnNjcmlwdGlvblR5cGU7XG4gIH1cblxuICB0aHJvdyBuZXcgR3JhcGhRTEVycm9yKCdDYW4gb25seSBoYXZlIHF1ZXJ5LCBtdXRhdGlvbiBhbmQgc3Vic2NyaXB0aW9uIG9wZXJhdGlvbnMuJywgb3BlcmF0aW9uKTtcbn1cbiIsImZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5pbXBvcnQgaW52YXJpYW50IGZyb20gXCIuLi9qc3V0aWxzL2ludmFyaWFudC5tanNcIjtcbmltcG9ydCB7IHBhcnNlIH0gZnJvbSBcIi4uL2xhbmd1YWdlL3BhcnNlci5tanNcIjtcbmltcG9ydCB7IGV4ZWN1dGVTeW5jIH0gZnJvbSBcIi4uL2V4ZWN1dGlvbi9leGVjdXRlLm1qc1wiO1xuaW1wb3J0IHsgZ2V0SW50cm9zcGVjdGlvblF1ZXJ5IH0gZnJvbSBcIi4vZ2V0SW50cm9zcGVjdGlvblF1ZXJ5Lm1qc1wiO1xuLyoqXG4gKiBCdWlsZCBhbiBJbnRyb3NwZWN0aW9uUXVlcnkgZnJvbSBhIEdyYXBoUUxTY2hlbWFcbiAqXG4gKiBJbnRyb3NwZWN0aW9uUXVlcnkgaXMgdXNlZnVsIGZvciB1dGlsaXRpZXMgdGhhdCBjYXJlIGFib3V0IHR5cGUgYW5kIGZpZWxkXG4gKiByZWxhdGlvbnNoaXBzLCBidXQgZG8gbm90IG5lZWQgdG8gdHJhdmVyc2UgdGhyb3VnaCB0aG9zZSByZWxhdGlvbnNoaXBzLlxuICpcbiAqIFRoaXMgaXMgdGhlIGludmVyc2Ugb2YgYnVpbGRDbGllbnRTY2hlbWEuIFRoZSBwcmltYXJ5IHVzZSBjYXNlIGlzIG91dHNpZGVcbiAqIG9mIHRoZSBzZXJ2ZXIgY29udGV4dCwgZm9yIGluc3RhbmNlIHdoZW4gZG9pbmcgc2NoZW1hIGNvbXBhcmlzb25zLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBpbnRyb3NwZWN0aW9uRnJvbVNjaGVtYShzY2hlbWEsIG9wdGlvbnMpIHtcbiAgdmFyIG9wdGlvbnNXaXRoRGVmYXVsdHMgPSBfb2JqZWN0U3ByZWFkKHtcbiAgICBzcGVjaWZpZWRCeVVybDogdHJ1ZSxcbiAgICBkaXJlY3RpdmVJc1JlcGVhdGFibGU6IHRydWUsXG4gICAgc2NoZW1hRGVzY3JpcHRpb246IHRydWUsXG4gICAgaW5wdXRWYWx1ZURlcHJlY2F0aW9uOiB0cnVlXG4gIH0sIG9wdGlvbnMpO1xuXG4gIHZhciBkb2N1bWVudCA9IHBhcnNlKGdldEludHJvc3BlY3Rpb25RdWVyeShvcHRpb25zV2l0aERlZmF1bHRzKSk7XG4gIHZhciByZXN1bHQgPSBleGVjdXRlU3luYyh7XG4gICAgc2NoZW1hOiBzY2hlbWEsXG4gICAgZG9jdW1lbnQ6IGRvY3VtZW50XG4gIH0pO1xuICAhcmVzdWx0LmVycm9ycyAmJiByZXN1bHQuZGF0YSB8fCBpbnZhcmlhbnQoMCk7XG4gIHJldHVybiByZXN1bHQuZGF0YTtcbn1cbiIsImZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5pbXBvcnQgb2JqZWN0VmFsdWVzIGZyb20gXCIuLi9wb2x5ZmlsbHMvb2JqZWN0VmFsdWVzLm1qc1wiO1xuaW1wb3J0IGluc3BlY3QgZnJvbSBcIi4uL2pzdXRpbHMvaW5zcGVjdC5tanNcIjtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcIi4uL2pzdXRpbHMvaW52YXJpYW50Lm1qc1wiO1xuaW1wb3J0IGtleVZhbE1hcCBmcm9tIFwiLi4vanN1dGlscy9rZXlWYWxNYXAubWpzXCI7XG5pbXBvcnQgbmF0dXJhbENvbXBhcmUgZnJvbSBcIi4uL2pzdXRpbHMvbmF0dXJhbENvbXBhcmUubWpzXCI7XG5pbXBvcnQgeyBHcmFwaFFMU2NoZW1hIH0gZnJvbSBcIi4uL3R5cGUvc2NoZW1hLm1qc1wiO1xuaW1wb3J0IHsgR3JhcGhRTERpcmVjdGl2ZSB9IGZyb20gXCIuLi90eXBlL2RpcmVjdGl2ZXMubWpzXCI7XG5pbXBvcnQgeyBpc0ludHJvc3BlY3Rpb25UeXBlIH0gZnJvbSBcIi4uL3R5cGUvaW50cm9zcGVjdGlvbi5tanNcIjtcbmltcG9ydCB7IEdyYXBoUUxMaXN0LCBHcmFwaFFMTm9uTnVsbCwgR3JhcGhRTE9iamVjdFR5cGUsIEdyYXBoUUxJbnRlcmZhY2VUeXBlLCBHcmFwaFFMVW5pb25UeXBlLCBHcmFwaFFMRW51bVR5cGUsIEdyYXBoUUxJbnB1dE9iamVjdFR5cGUsIGlzTGlzdFR5cGUsIGlzTm9uTnVsbFR5cGUsIGlzU2NhbGFyVHlwZSwgaXNPYmplY3RUeXBlLCBpc0ludGVyZmFjZVR5cGUsIGlzVW5pb25UeXBlLCBpc0VudW1UeXBlLCBpc0lucHV0T2JqZWN0VHlwZSB9IGZyb20gXCIuLi90eXBlL2RlZmluaXRpb24ubWpzXCI7XG4vKipcbiAqIFNvcnQgR3JhcGhRTFNjaGVtYS5cbiAqXG4gKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgYSBzb3J0ZWQgY29weSBvZiB0aGUgZ2l2ZW4gR3JhcGhRTFNjaGVtYS5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gbGV4aWNvZ3JhcGhpY1NvcnRTY2hlbWEoc2NoZW1hKSB7XG4gIHZhciBzY2hlbWFDb25maWcgPSBzY2hlbWEudG9Db25maWcoKTtcbiAgdmFyIHR5cGVNYXAgPSBrZXlWYWxNYXAoc29ydEJ5TmFtZShzY2hlbWFDb25maWcudHlwZXMpLCBmdW5jdGlvbiAodHlwZSkge1xuICAgIHJldHVybiB0eXBlLm5hbWU7XG4gIH0sIHNvcnROYW1lZFR5cGUpO1xuICByZXR1cm4gbmV3IEdyYXBoUUxTY2hlbWEoX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBzY2hlbWFDb25maWcpLCB7fSwge1xuICAgIHR5cGVzOiBvYmplY3RWYWx1ZXModHlwZU1hcCksXG4gICAgZGlyZWN0aXZlczogc29ydEJ5TmFtZShzY2hlbWFDb25maWcuZGlyZWN0aXZlcykubWFwKHNvcnREaXJlY3RpdmUpLFxuICAgIHF1ZXJ5OiByZXBsYWNlTWF5YmVUeXBlKHNjaGVtYUNvbmZpZy5xdWVyeSksXG4gICAgbXV0YXRpb246IHJlcGxhY2VNYXliZVR5cGUoc2NoZW1hQ29uZmlnLm11dGF0aW9uKSxcbiAgICBzdWJzY3JpcHRpb246IHJlcGxhY2VNYXliZVR5cGUoc2NoZW1hQ29uZmlnLnN1YnNjcmlwdGlvbilcbiAgfSkpO1xuXG4gIGZ1bmN0aW9uIHJlcGxhY2VUeXBlKHR5cGUpIHtcbiAgICBpZiAoaXNMaXN0VHlwZSh0eXBlKSkge1xuICAgICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtcmV0dXJuXVxuICAgICAgcmV0dXJuIG5ldyBHcmFwaFFMTGlzdChyZXBsYWNlVHlwZSh0eXBlLm9mVHlwZSkpO1xuICAgIH0gZWxzZSBpZiAoaXNOb25OdWxsVHlwZSh0eXBlKSkge1xuICAgICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtcmV0dXJuXVxuICAgICAgcmV0dXJuIG5ldyBHcmFwaFFMTm9uTnVsbChyZXBsYWNlVHlwZSh0eXBlLm9mVHlwZSkpO1xuICAgIH1cblxuICAgIHJldHVybiByZXBsYWNlTmFtZWRUeXBlKHR5cGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZU5hbWVkVHlwZSh0eXBlKSB7XG4gICAgcmV0dXJuIHR5cGVNYXBbdHlwZS5uYW1lXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2VNYXliZVR5cGUobWF5YmVUeXBlKSB7XG4gICAgcmV0dXJuIG1heWJlVHlwZSAmJiByZXBsYWNlTmFtZWRUeXBlKG1heWJlVHlwZSk7XG4gIH1cblxuICBmdW5jdGlvbiBzb3J0RGlyZWN0aXZlKGRpcmVjdGl2ZSkge1xuICAgIHZhciBjb25maWcgPSBkaXJlY3RpdmUudG9Db25maWcoKTtcbiAgICByZXR1cm4gbmV3IEdyYXBoUUxEaXJlY3RpdmUoX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBjb25maWcpLCB7fSwge1xuICAgICAgbG9jYXRpb25zOiBzb3J0QnkoY29uZmlnLmxvY2F0aW9ucywgZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgcmV0dXJuIHg7XG4gICAgICB9KSxcbiAgICAgIGFyZ3M6IHNvcnRBcmdzKGNvbmZpZy5hcmdzKVxuICAgIH0pKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNvcnRBcmdzKGFyZ3MpIHtcbiAgICByZXR1cm4gc29ydE9iak1hcChhcmdzLCBmdW5jdGlvbiAoYXJnKSB7XG4gICAgICByZXR1cm4gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBhcmcpLCB7fSwge1xuICAgICAgICB0eXBlOiByZXBsYWNlVHlwZShhcmcudHlwZSlcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gc29ydEZpZWxkcyhmaWVsZHNNYXApIHtcbiAgICByZXR1cm4gc29ydE9iak1hcChmaWVsZHNNYXAsIGZ1bmN0aW9uIChmaWVsZCkge1xuICAgICAgcmV0dXJuIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgZmllbGQpLCB7fSwge1xuICAgICAgICB0eXBlOiByZXBsYWNlVHlwZShmaWVsZC50eXBlKSxcbiAgICAgICAgYXJnczogc29ydEFyZ3MoZmllbGQuYXJncylcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gc29ydElucHV0RmllbGRzKGZpZWxkc01hcCkge1xuICAgIHJldHVybiBzb3J0T2JqTWFwKGZpZWxkc01hcCwgZnVuY3Rpb24gKGZpZWxkKSB7XG4gICAgICByZXR1cm4gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBmaWVsZCksIHt9LCB7XG4gICAgICAgIHR5cGU6IHJlcGxhY2VUeXBlKGZpZWxkLnR5cGUpXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNvcnRUeXBlcyhhcnIpIHtcbiAgICByZXR1cm4gc29ydEJ5TmFtZShhcnIpLm1hcChyZXBsYWNlTmFtZWRUeXBlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNvcnROYW1lZFR5cGUodHlwZSkge1xuICAgIGlmIChpc1NjYWxhclR5cGUodHlwZSkgfHwgaXNJbnRyb3NwZWN0aW9uVHlwZSh0eXBlKSkge1xuICAgICAgcmV0dXJuIHR5cGU7XG4gICAgfVxuXG4gICAgaWYgKGlzT2JqZWN0VHlwZSh0eXBlKSkge1xuICAgICAgdmFyIGNvbmZpZyA9IHR5cGUudG9Db25maWcoKTtcbiAgICAgIHJldHVybiBuZXcgR3JhcGhRTE9iamVjdFR5cGUoX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBjb25maWcpLCB7fSwge1xuICAgICAgICBpbnRlcmZhY2VzOiBmdW5jdGlvbiBpbnRlcmZhY2VzKCkge1xuICAgICAgICAgIHJldHVybiBzb3J0VHlwZXMoY29uZmlnLmludGVyZmFjZXMpO1xuICAgICAgICB9LFxuICAgICAgICBmaWVsZHM6IGZ1bmN0aW9uIGZpZWxkcygpIHtcbiAgICAgICAgICByZXR1cm4gc29ydEZpZWxkcyhjb25maWcuZmllbGRzKTtcbiAgICAgICAgfVxuICAgICAgfSkpO1xuICAgIH1cblxuICAgIGlmIChpc0ludGVyZmFjZVR5cGUodHlwZSkpIHtcbiAgICAgIHZhciBfY29uZmlnID0gdHlwZS50b0NvbmZpZygpO1xuXG4gICAgICByZXR1cm4gbmV3IEdyYXBoUUxJbnRlcmZhY2VUeXBlKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgX2NvbmZpZyksIHt9LCB7XG4gICAgICAgIGludGVyZmFjZXM6IGZ1bmN0aW9uIGludGVyZmFjZXMoKSB7XG4gICAgICAgICAgcmV0dXJuIHNvcnRUeXBlcyhfY29uZmlnLmludGVyZmFjZXMpO1xuICAgICAgICB9LFxuICAgICAgICBmaWVsZHM6IGZ1bmN0aW9uIGZpZWxkcygpIHtcbiAgICAgICAgICByZXR1cm4gc29ydEZpZWxkcyhfY29uZmlnLmZpZWxkcyk7XG4gICAgICAgIH1cbiAgICAgIH0pKTtcbiAgICB9XG5cbiAgICBpZiAoaXNVbmlvblR5cGUodHlwZSkpIHtcbiAgICAgIHZhciBfY29uZmlnMiA9IHR5cGUudG9Db25maWcoKTtcblxuICAgICAgcmV0dXJuIG5ldyBHcmFwaFFMVW5pb25UeXBlKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgX2NvbmZpZzIpLCB7fSwge1xuICAgICAgICB0eXBlczogZnVuY3Rpb24gdHlwZXMoKSB7XG4gICAgICAgICAgcmV0dXJuIHNvcnRUeXBlcyhfY29uZmlnMi50eXBlcyk7XG4gICAgICAgIH1cbiAgICAgIH0pKTtcbiAgICB9XG5cbiAgICBpZiAoaXNFbnVtVHlwZSh0eXBlKSkge1xuICAgICAgdmFyIF9jb25maWczID0gdHlwZS50b0NvbmZpZygpO1xuXG4gICAgICByZXR1cm4gbmV3IEdyYXBoUUxFbnVtVHlwZShfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIF9jb25maWczKSwge30sIHtcbiAgICAgICAgdmFsdWVzOiBzb3J0T2JqTWFwKF9jb25maWczLnZhbHVlcylcbiAgICAgIH0pKTtcbiAgICB9IC8vIGlzdGFuYnVsIGlnbm9yZSBlbHNlIChTZWU6ICdodHRwczovL2dpdGh1Yi5jb20vZ3JhcGhxbC9ncmFwaHFsLWpzL2lzc3Vlcy8yNjE4JylcblxuXG4gICAgaWYgKGlzSW5wdXRPYmplY3RUeXBlKHR5cGUpKSB7XG4gICAgICB2YXIgX2NvbmZpZzQgPSB0eXBlLnRvQ29uZmlnKCk7XG5cbiAgICAgIHJldHVybiBuZXcgR3JhcGhRTElucHV0T2JqZWN0VHlwZShfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIF9jb25maWc0KSwge30sIHtcbiAgICAgICAgZmllbGRzOiBmdW5jdGlvbiBmaWVsZHMoKSB7XG4gICAgICAgICAgcmV0dXJuIHNvcnRJbnB1dEZpZWxkcyhfY29uZmlnNC5maWVsZHMpO1xuICAgICAgICB9XG4gICAgICB9KSk7XG4gICAgfSAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAoTm90IHJlYWNoYWJsZS4gQWxsIHBvc3NpYmxlIHR5cGVzIGhhdmUgYmVlbiBjb25zaWRlcmVkKVxuXG5cbiAgICBmYWxzZSB8fCBpbnZhcmlhbnQoMCwgJ1VuZXhwZWN0ZWQgdHlwZTogJyArIGluc3BlY3QodHlwZSkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHNvcnRPYmpNYXAobWFwLCBzb3J0VmFsdWVGbikge1xuICB2YXIgc29ydGVkTWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdmFyIHNvcnRlZEtleXMgPSBzb3J0QnkoT2JqZWN0LmtleXMobWFwKSwgZnVuY3Rpb24gKHgpIHtcbiAgICByZXR1cm4geDtcbiAgfSk7XG5cbiAgZm9yICh2YXIgX2kyID0gMDsgX2kyIDwgc29ydGVkS2V5cy5sZW5ndGg7IF9pMisrKSB7XG4gICAgdmFyIGtleSA9IHNvcnRlZEtleXNbX2kyXTtcbiAgICB2YXIgdmFsdWUgPSBtYXBba2V5XTtcbiAgICBzb3J0ZWRNYXBba2V5XSA9IHNvcnRWYWx1ZUZuID8gc29ydFZhbHVlRm4odmFsdWUpIDogdmFsdWU7XG4gIH1cblxuICByZXR1cm4gc29ydGVkTWFwO1xufVxuXG5mdW5jdGlvbiBzb3J0QnlOYW1lKGFycmF5KSB7XG4gIHJldHVybiBzb3J0QnkoYXJyYXksIGZ1bmN0aW9uIChvYmopIHtcbiAgICByZXR1cm4gb2JqLm5hbWU7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBzb3J0QnkoYXJyYXksIG1hcFRvS2V5KSB7XG4gIHJldHVybiBhcnJheS5zbGljZSgpLnNvcnQoZnVuY3Rpb24gKG9iajEsIG9iajIpIHtcbiAgICB2YXIga2V5MSA9IG1hcFRvS2V5KG9iajEpO1xuICAgIHZhciBrZXkyID0gbWFwVG9LZXkob2JqMik7XG4gICAgcmV0dXJuIG5hdHVyYWxDb21wYXJlKGtleTEsIGtleTIpO1xuICB9KTtcbn1cbiIsImltcG9ydCBvYmplY3RWYWx1ZXMgZnJvbSBcIi4uL3BvbHlmaWxscy9vYmplY3RWYWx1ZXMubWpzXCI7XG5pbXBvcnQgaW5zcGVjdCBmcm9tIFwiLi4vanN1dGlscy9pbnNwZWN0Lm1qc1wiO1xuaW1wb3J0IGludmFyaWFudCBmcm9tIFwiLi4vanN1dGlscy9pbnZhcmlhbnQubWpzXCI7XG5pbXBvcnQgeyBwcmludCB9IGZyb20gXCIuLi9sYW5ndWFnZS9wcmludGVyLm1qc1wiO1xuaW1wb3J0IHsgcHJpbnRCbG9ja1N0cmluZyB9IGZyb20gXCIuLi9sYW5ndWFnZS9ibG9ja1N0cmluZy5tanNcIjtcbmltcG9ydCB7IGlzSW50cm9zcGVjdGlvblR5cGUgfSBmcm9tIFwiLi4vdHlwZS9pbnRyb3NwZWN0aW9uLm1qc1wiO1xuaW1wb3J0IHsgR3JhcGhRTFN0cmluZywgaXNTcGVjaWZpZWRTY2FsYXJUeXBlIH0gZnJvbSBcIi4uL3R5cGUvc2NhbGFycy5tanNcIjtcbmltcG9ydCB7IERFRkFVTFRfREVQUkVDQVRJT05fUkVBU09OLCBpc1NwZWNpZmllZERpcmVjdGl2ZSB9IGZyb20gXCIuLi90eXBlL2RpcmVjdGl2ZXMubWpzXCI7XG5pbXBvcnQgeyBpc1NjYWxhclR5cGUsIGlzT2JqZWN0VHlwZSwgaXNJbnRlcmZhY2VUeXBlLCBpc1VuaW9uVHlwZSwgaXNFbnVtVHlwZSwgaXNJbnB1dE9iamVjdFR5cGUgfSBmcm9tIFwiLi4vdHlwZS9kZWZpbml0aW9uLm1qc1wiO1xuaW1wb3J0IHsgYXN0RnJvbVZhbHVlIH0gZnJvbSBcIi4vYXN0RnJvbVZhbHVlLm1qc1wiO1xuXG4vKipcbiAqIEFjY2VwdHMgb3B0aW9ucyBhcyBhIHNlY29uZCBhcmd1bWVudDpcbiAqXG4gKiAgICAtIGNvbW1lbnREZXNjcmlwdGlvbnM6XG4gKiAgICAgICAgUHJvdmlkZSB0cnVlIHRvIHVzZSBwcmVjZWRpbmcgY29tbWVudHMgYXMgdGhlIGRlc2NyaXB0aW9uLlxuICpcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByaW50U2NoZW1hKHNjaGVtYSwgb3B0aW9ucykge1xuICByZXR1cm4gcHJpbnRGaWx0ZXJlZFNjaGVtYShzY2hlbWEsIGZ1bmN0aW9uIChuKSB7XG4gICAgcmV0dXJuICFpc1NwZWNpZmllZERpcmVjdGl2ZShuKTtcbiAgfSwgaXNEZWZpbmVkVHlwZSwgb3B0aW9ucyk7XG59XG5leHBvcnQgZnVuY3Rpb24gcHJpbnRJbnRyb3NwZWN0aW9uU2NoZW1hKHNjaGVtYSwgb3B0aW9ucykge1xuICByZXR1cm4gcHJpbnRGaWx0ZXJlZFNjaGVtYShzY2hlbWEsIGlzU3BlY2lmaWVkRGlyZWN0aXZlLCBpc0ludHJvc3BlY3Rpb25UeXBlLCBvcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gaXNEZWZpbmVkVHlwZSh0eXBlKSB7XG4gIHJldHVybiAhaXNTcGVjaWZpZWRTY2FsYXJUeXBlKHR5cGUpICYmICFpc0ludHJvc3BlY3Rpb25UeXBlKHR5cGUpO1xufVxuXG5mdW5jdGlvbiBwcmludEZpbHRlcmVkU2NoZW1hKHNjaGVtYSwgZGlyZWN0aXZlRmlsdGVyLCB0eXBlRmlsdGVyLCBvcHRpb25zKSB7XG4gIHZhciBkaXJlY3RpdmVzID0gc2NoZW1hLmdldERpcmVjdGl2ZXMoKS5maWx0ZXIoZGlyZWN0aXZlRmlsdGVyKTtcbiAgdmFyIHR5cGVzID0gb2JqZWN0VmFsdWVzKHNjaGVtYS5nZXRUeXBlTWFwKCkpLmZpbHRlcih0eXBlRmlsdGVyKTtcbiAgcmV0dXJuIFtwcmludFNjaGVtYURlZmluaXRpb24oc2NoZW1hKV0uY29uY2F0KGRpcmVjdGl2ZXMubWFwKGZ1bmN0aW9uIChkaXJlY3RpdmUpIHtcbiAgICByZXR1cm4gcHJpbnREaXJlY3RpdmUoZGlyZWN0aXZlLCBvcHRpb25zKTtcbiAgfSksIHR5cGVzLm1hcChmdW5jdGlvbiAodHlwZSkge1xuICAgIHJldHVybiBwcmludFR5cGUodHlwZSwgb3B0aW9ucyk7XG4gIH0pKS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuXFxuJykgKyAnXFxuJztcbn1cblxuZnVuY3Rpb24gcHJpbnRTY2hlbWFEZWZpbml0aW9uKHNjaGVtYSkge1xuICBpZiAoc2NoZW1hLmRlc2NyaXB0aW9uID09IG51bGwgJiYgaXNTY2hlbWFPZkNvbW1vbk5hbWVzKHNjaGVtYSkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgb3BlcmF0aW9uVHlwZXMgPSBbXTtcbiAgdmFyIHF1ZXJ5VHlwZSA9IHNjaGVtYS5nZXRRdWVyeVR5cGUoKTtcblxuICBpZiAocXVlcnlUeXBlKSB7XG4gICAgb3BlcmF0aW9uVHlwZXMucHVzaChcIiAgcXVlcnk6IFwiLmNvbmNhdChxdWVyeVR5cGUubmFtZSkpO1xuICB9XG5cbiAgdmFyIG11dGF0aW9uVHlwZSA9IHNjaGVtYS5nZXRNdXRhdGlvblR5cGUoKTtcblxuICBpZiAobXV0YXRpb25UeXBlKSB7XG4gICAgb3BlcmF0aW9uVHlwZXMucHVzaChcIiAgbXV0YXRpb246IFwiLmNvbmNhdChtdXRhdGlvblR5cGUubmFtZSkpO1xuICB9XG5cbiAgdmFyIHN1YnNjcmlwdGlvblR5cGUgPSBzY2hlbWEuZ2V0U3Vic2NyaXB0aW9uVHlwZSgpO1xuXG4gIGlmIChzdWJzY3JpcHRpb25UeXBlKSB7XG4gICAgb3BlcmF0aW9uVHlwZXMucHVzaChcIiAgc3Vic2NyaXB0aW9uOiBcIi5jb25jYXQoc3Vic2NyaXB0aW9uVHlwZS5uYW1lKSk7XG4gIH1cblxuICByZXR1cm4gcHJpbnREZXNjcmlwdGlvbih7fSwgc2NoZW1hKSArIFwic2NoZW1hIHtcXG5cIi5jb25jYXQob3BlcmF0aW9uVHlwZXMuam9pbignXFxuJyksIFwiXFxufVwiKTtcbn1cbi8qKlxuICogR3JhcGhRTCBzY2hlbWEgZGVmaW5lIHJvb3QgdHlwZXMgZm9yIGVhY2ggdHlwZSBvZiBvcGVyYXRpb24uIFRoZXNlIHR5cGVzIGFyZVxuICogdGhlIHNhbWUgYXMgYW55IG90aGVyIHR5cGUgYW5kIGNhbiBiZSBuYW1lZCBpbiBhbnkgbWFubmVyLCBob3dldmVyIHRoZXJlIGlzXG4gKiBhIGNvbW1vbiBuYW1pbmcgY29udmVudGlvbjpcbiAqXG4gKiAgIHNjaGVtYSB7XG4gKiAgICAgcXVlcnk6IFF1ZXJ5XG4gKiAgICAgbXV0YXRpb246IE11dGF0aW9uXG4gKiAgIH1cbiAqXG4gKiBXaGVuIHVzaW5nIHRoaXMgbmFtaW5nIGNvbnZlbnRpb24sIHRoZSBzY2hlbWEgZGVzY3JpcHRpb24gY2FuIGJlIG9taXR0ZWQuXG4gKi9cblxuXG5mdW5jdGlvbiBpc1NjaGVtYU9mQ29tbW9uTmFtZXMoc2NoZW1hKSB7XG4gIHZhciBxdWVyeVR5cGUgPSBzY2hlbWEuZ2V0UXVlcnlUeXBlKCk7XG5cbiAgaWYgKHF1ZXJ5VHlwZSAmJiBxdWVyeVR5cGUubmFtZSAhPT0gJ1F1ZXJ5Jykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBtdXRhdGlvblR5cGUgPSBzY2hlbWEuZ2V0TXV0YXRpb25UeXBlKCk7XG5cbiAgaWYgKG11dGF0aW9uVHlwZSAmJiBtdXRhdGlvblR5cGUubmFtZSAhPT0gJ011dGF0aW9uJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBzdWJzY3JpcHRpb25UeXBlID0gc2NoZW1hLmdldFN1YnNjcmlwdGlvblR5cGUoKTtcblxuICBpZiAoc3Vic2NyaXB0aW9uVHlwZSAmJiBzdWJzY3JpcHRpb25UeXBlLm5hbWUgIT09ICdTdWJzY3JpcHRpb24nKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcmludFR5cGUodHlwZSwgb3B0aW9ucykge1xuICBpZiAoaXNTY2FsYXJUeXBlKHR5cGUpKSB7XG4gICAgcmV0dXJuIHByaW50U2NhbGFyKHR5cGUsIG9wdGlvbnMpO1xuICB9XG5cbiAgaWYgKGlzT2JqZWN0VHlwZSh0eXBlKSkge1xuICAgIHJldHVybiBwcmludE9iamVjdCh0eXBlLCBvcHRpb25zKTtcbiAgfVxuXG4gIGlmIChpc0ludGVyZmFjZVR5cGUodHlwZSkpIHtcbiAgICByZXR1cm4gcHJpbnRJbnRlcmZhY2UodHlwZSwgb3B0aW9ucyk7XG4gIH1cblxuICBpZiAoaXNVbmlvblR5cGUodHlwZSkpIHtcbiAgICByZXR1cm4gcHJpbnRVbmlvbih0eXBlLCBvcHRpb25zKTtcbiAgfVxuXG4gIGlmIChpc0VudW1UeXBlKHR5cGUpKSB7XG4gICAgcmV0dXJuIHByaW50RW51bSh0eXBlLCBvcHRpb25zKTtcbiAgfSAvLyBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAoU2VlOiAnaHR0cHM6Ly9naXRodWIuY29tL2dyYXBocWwvZ3JhcGhxbC1qcy9pc3N1ZXMvMjYxOCcpXG5cblxuICBpZiAoaXNJbnB1dE9iamVjdFR5cGUodHlwZSkpIHtcbiAgICByZXR1cm4gcHJpbnRJbnB1dE9iamVjdCh0eXBlLCBvcHRpb25zKTtcbiAgfSAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAoTm90IHJlYWNoYWJsZS4gQWxsIHBvc3NpYmxlIHR5cGVzIGhhdmUgYmVlbiBjb25zaWRlcmVkKVxuXG5cbiAgZmFsc2UgfHwgaW52YXJpYW50KDAsICdVbmV4cGVjdGVkIHR5cGU6ICcgKyBpbnNwZWN0KHR5cGUpKTtcbn1cblxuZnVuY3Rpb24gcHJpbnRTY2FsYXIodHlwZSwgb3B0aW9ucykge1xuICByZXR1cm4gcHJpbnREZXNjcmlwdGlvbihvcHRpb25zLCB0eXBlKSArIFwic2NhbGFyIFwiLmNvbmNhdCh0eXBlLm5hbWUpICsgcHJpbnRTcGVjaWZpZWRCeVVybCh0eXBlKTtcbn1cblxuZnVuY3Rpb24gcHJpbnRJbXBsZW1lbnRlZEludGVyZmFjZXModHlwZSkge1xuICB2YXIgaW50ZXJmYWNlcyA9IHR5cGUuZ2V0SW50ZXJmYWNlcygpO1xuICByZXR1cm4gaW50ZXJmYWNlcy5sZW5ndGggPyAnIGltcGxlbWVudHMgJyArIGludGVyZmFjZXMubWFwKGZ1bmN0aW9uIChpKSB7XG4gICAgcmV0dXJuIGkubmFtZTtcbiAgfSkuam9pbignICYgJykgOiAnJztcbn1cblxuZnVuY3Rpb24gcHJpbnRPYmplY3QodHlwZSwgb3B0aW9ucykge1xuICByZXR1cm4gcHJpbnREZXNjcmlwdGlvbihvcHRpb25zLCB0eXBlKSArIFwidHlwZSBcIi5jb25jYXQodHlwZS5uYW1lKSArIHByaW50SW1wbGVtZW50ZWRJbnRlcmZhY2VzKHR5cGUpICsgcHJpbnRGaWVsZHMob3B0aW9ucywgdHlwZSk7XG59XG5cbmZ1bmN0aW9uIHByaW50SW50ZXJmYWNlKHR5cGUsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHByaW50RGVzY3JpcHRpb24ob3B0aW9ucywgdHlwZSkgKyBcImludGVyZmFjZSBcIi5jb25jYXQodHlwZS5uYW1lKSArIHByaW50SW1wbGVtZW50ZWRJbnRlcmZhY2VzKHR5cGUpICsgcHJpbnRGaWVsZHMob3B0aW9ucywgdHlwZSk7XG59XG5cbmZ1bmN0aW9uIHByaW50VW5pb24odHlwZSwgb3B0aW9ucykge1xuICB2YXIgdHlwZXMgPSB0eXBlLmdldFR5cGVzKCk7XG4gIHZhciBwb3NzaWJsZVR5cGVzID0gdHlwZXMubGVuZ3RoID8gJyA9ICcgKyB0eXBlcy5qb2luKCcgfCAnKSA6ICcnO1xuICByZXR1cm4gcHJpbnREZXNjcmlwdGlvbihvcHRpb25zLCB0eXBlKSArICd1bmlvbiAnICsgdHlwZS5uYW1lICsgcG9zc2libGVUeXBlcztcbn1cblxuZnVuY3Rpb24gcHJpbnRFbnVtKHR5cGUsIG9wdGlvbnMpIHtcbiAgdmFyIHZhbHVlcyA9IHR5cGUuZ2V0VmFsdWVzKCkubWFwKGZ1bmN0aW9uICh2YWx1ZSwgaSkge1xuICAgIHJldHVybiBwcmludERlc2NyaXB0aW9uKG9wdGlvbnMsIHZhbHVlLCAnICAnLCAhaSkgKyAnICAnICsgdmFsdWUubmFtZSArIHByaW50RGVwcmVjYXRlZCh2YWx1ZS5kZXByZWNhdGlvblJlYXNvbik7XG4gIH0pO1xuICByZXR1cm4gcHJpbnREZXNjcmlwdGlvbihvcHRpb25zLCB0eXBlKSArIFwiZW51bSBcIi5jb25jYXQodHlwZS5uYW1lKSArIHByaW50QmxvY2sodmFsdWVzKTtcbn1cblxuZnVuY3Rpb24gcHJpbnRJbnB1dE9iamVjdCh0eXBlLCBvcHRpb25zKSB7XG4gIHZhciBmaWVsZHMgPSBvYmplY3RWYWx1ZXModHlwZS5nZXRGaWVsZHMoKSkubWFwKGZ1bmN0aW9uIChmLCBpKSB7XG4gICAgcmV0dXJuIHByaW50RGVzY3JpcHRpb24ob3B0aW9ucywgZiwgJyAgJywgIWkpICsgJyAgJyArIHByaW50SW5wdXRWYWx1ZShmKTtcbiAgfSk7XG4gIHJldHVybiBwcmludERlc2NyaXB0aW9uKG9wdGlvbnMsIHR5cGUpICsgXCJpbnB1dCBcIi5jb25jYXQodHlwZS5uYW1lKSArIHByaW50QmxvY2soZmllbGRzKTtcbn1cblxuZnVuY3Rpb24gcHJpbnRGaWVsZHMob3B0aW9ucywgdHlwZSkge1xuICB2YXIgZmllbGRzID0gb2JqZWN0VmFsdWVzKHR5cGUuZ2V0RmllbGRzKCkpLm1hcChmdW5jdGlvbiAoZiwgaSkge1xuICAgIHJldHVybiBwcmludERlc2NyaXB0aW9uKG9wdGlvbnMsIGYsICcgICcsICFpKSArICcgICcgKyBmLm5hbWUgKyBwcmludEFyZ3Mob3B0aW9ucywgZi5hcmdzLCAnICAnKSArICc6ICcgKyBTdHJpbmcoZi50eXBlKSArIHByaW50RGVwcmVjYXRlZChmLmRlcHJlY2F0aW9uUmVhc29uKTtcbiAgfSk7XG4gIHJldHVybiBwcmludEJsb2NrKGZpZWxkcyk7XG59XG5cbmZ1bmN0aW9uIHByaW50QmxvY2soaXRlbXMpIHtcbiAgcmV0dXJuIGl0ZW1zLmxlbmd0aCAhPT0gMCA/ICcge1xcbicgKyBpdGVtcy5qb2luKCdcXG4nKSArICdcXG59JyA6ICcnO1xufVxuXG5mdW5jdGlvbiBwcmludEFyZ3Mob3B0aW9ucywgYXJncykge1xuICB2YXIgaW5kZW50YXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6ICcnO1xuXG4gIGlmIChhcmdzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiAnJztcbiAgfSAvLyBJZiBldmVyeSBhcmcgZG9lcyBub3QgaGF2ZSBhIGRlc2NyaXB0aW9uLCBwcmludCB0aGVtIG9uIG9uZSBsaW5lLlxuXG5cbiAgaWYgKGFyZ3MuZXZlcnkoZnVuY3Rpb24gKGFyZykge1xuICAgIHJldHVybiAhYXJnLmRlc2NyaXB0aW9uO1xuICB9KSkge1xuICAgIHJldHVybiAnKCcgKyBhcmdzLm1hcChwcmludElucHV0VmFsdWUpLmpvaW4oJywgJykgKyAnKSc7XG4gIH1cblxuICByZXR1cm4gJyhcXG4nICsgYXJncy5tYXAoZnVuY3Rpb24gKGFyZywgaSkge1xuICAgIHJldHVybiBwcmludERlc2NyaXB0aW9uKG9wdGlvbnMsIGFyZywgJyAgJyArIGluZGVudGF0aW9uLCAhaSkgKyAnICAnICsgaW5kZW50YXRpb24gKyBwcmludElucHV0VmFsdWUoYXJnKTtcbiAgfSkuam9pbignXFxuJykgKyAnXFxuJyArIGluZGVudGF0aW9uICsgJyknO1xufVxuXG5mdW5jdGlvbiBwcmludElucHV0VmFsdWUoYXJnKSB7XG4gIHZhciBkZWZhdWx0QVNUID0gYXN0RnJvbVZhbHVlKGFyZy5kZWZhdWx0VmFsdWUsIGFyZy50eXBlKTtcbiAgdmFyIGFyZ0RlY2wgPSBhcmcubmFtZSArICc6ICcgKyBTdHJpbmcoYXJnLnR5cGUpO1xuXG4gIGlmIChkZWZhdWx0QVNUKSB7XG4gICAgYXJnRGVjbCArPSBcIiA9IFwiLmNvbmNhdChwcmludChkZWZhdWx0QVNUKSk7XG4gIH1cblxuICByZXR1cm4gYXJnRGVjbCArIHByaW50RGVwcmVjYXRlZChhcmcuZGVwcmVjYXRpb25SZWFzb24pO1xufVxuXG5mdW5jdGlvbiBwcmludERpcmVjdGl2ZShkaXJlY3RpdmUsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHByaW50RGVzY3JpcHRpb24ob3B0aW9ucywgZGlyZWN0aXZlKSArICdkaXJlY3RpdmUgQCcgKyBkaXJlY3RpdmUubmFtZSArIHByaW50QXJncyhvcHRpb25zLCBkaXJlY3RpdmUuYXJncykgKyAoZGlyZWN0aXZlLmlzUmVwZWF0YWJsZSA/ICcgcmVwZWF0YWJsZScgOiAnJykgKyAnIG9uICcgKyBkaXJlY3RpdmUubG9jYXRpb25zLmpvaW4oJyB8ICcpO1xufVxuXG5mdW5jdGlvbiBwcmludERlcHJlY2F0ZWQocmVhc29uKSB7XG4gIGlmIChyZWFzb24gPT0gbnVsbCkge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIHZhciByZWFzb25BU1QgPSBhc3RGcm9tVmFsdWUocmVhc29uLCBHcmFwaFFMU3RyaW5nKTtcblxuICBpZiAocmVhc29uQVNUICYmIHJlYXNvbiAhPT0gREVGQVVMVF9ERVBSRUNBVElPTl9SRUFTT04pIHtcbiAgICByZXR1cm4gJyBAZGVwcmVjYXRlZChyZWFzb246ICcgKyBwcmludChyZWFzb25BU1QpICsgJyknO1xuICB9XG5cbiAgcmV0dXJuICcgQGRlcHJlY2F0ZWQnO1xufVxuXG5mdW5jdGlvbiBwcmludFNwZWNpZmllZEJ5VXJsKHNjYWxhcikge1xuICBpZiAoc2NhbGFyLnNwZWNpZmllZEJ5VXJsID09IG51bGwpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICB2YXIgdXJsID0gc2NhbGFyLnNwZWNpZmllZEJ5VXJsO1xuICB2YXIgdXJsQVNUID0gYXN0RnJvbVZhbHVlKHVybCwgR3JhcGhRTFN0cmluZyk7XG4gIHVybEFTVCB8fCBpbnZhcmlhbnQoMCwgJ1VuZXhwZWN0ZWQgbnVsbCB2YWx1ZSByZXR1cm5lZCBmcm9tIGBhc3RGcm9tVmFsdWVgIGZvciBzcGVjaWZpZWRCeVVybCcpO1xuICByZXR1cm4gJyBAc3BlY2lmaWVkQnkodXJsOiAnICsgcHJpbnQodXJsQVNUKSArICcpJztcbn1cblxuZnVuY3Rpb24gcHJpbnREZXNjcmlwdGlvbihvcHRpb25zLCBkZWYpIHtcbiAgdmFyIGluZGVudGF0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAnJztcbiAgdmFyIGZpcnN0SW5CbG9jayA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogdHJ1ZTtcbiAgdmFyIGRlc2NyaXB0aW9uID0gZGVmLmRlc2NyaXB0aW9uO1xuXG4gIGlmIChkZXNjcmlwdGlvbiA9PSBudWxsKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgaWYgKChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuY29tbWVudERlc2NyaXB0aW9ucykgPT09IHRydWUpIHtcbiAgICByZXR1cm4gcHJpbnREZXNjcmlwdGlvbldpdGhDb21tZW50cyhkZXNjcmlwdGlvbiwgaW5kZW50YXRpb24sIGZpcnN0SW5CbG9jayk7XG4gIH1cblxuICB2YXIgcHJlZmVyTXVsdGlwbGVMaW5lcyA9IGRlc2NyaXB0aW9uLmxlbmd0aCA+IDcwO1xuICB2YXIgYmxvY2tTdHJpbmcgPSBwcmludEJsb2NrU3RyaW5nKGRlc2NyaXB0aW9uLCAnJywgcHJlZmVyTXVsdGlwbGVMaW5lcyk7XG4gIHZhciBwcmVmaXggPSBpbmRlbnRhdGlvbiAmJiAhZmlyc3RJbkJsb2NrID8gJ1xcbicgKyBpbmRlbnRhdGlvbiA6IGluZGVudGF0aW9uO1xuICByZXR1cm4gcHJlZml4ICsgYmxvY2tTdHJpbmcucmVwbGFjZSgvXFxuL2csICdcXG4nICsgaW5kZW50YXRpb24pICsgJ1xcbic7XG59XG5cbmZ1bmN0aW9uIHByaW50RGVzY3JpcHRpb25XaXRoQ29tbWVudHMoZGVzY3JpcHRpb24sIGluZGVudGF0aW9uLCBmaXJzdEluQmxvY2spIHtcbiAgdmFyIHByZWZpeCA9IGluZGVudGF0aW9uICYmICFmaXJzdEluQmxvY2sgPyAnXFxuJyA6ICcnO1xuICB2YXIgY29tbWVudCA9IGRlc2NyaXB0aW9uLnNwbGl0KCdcXG4nKS5tYXAoZnVuY3Rpb24gKGxpbmUpIHtcbiAgICByZXR1cm4gaW5kZW50YXRpb24gKyAobGluZSAhPT0gJycgPyAnIyAnICsgbGluZSA6ICcjJyk7XG4gIH0pLmpvaW4oJ1xcbicpO1xuICByZXR1cm4gcHJlZml4ICsgY29tbWVudCArICdcXG4nO1xufVxuIiwiaW1wb3J0IHsgS2luZCB9IGZyb20gXCIuLi9sYW5ndWFnZS9raW5kcy5tanNcIjtcbmltcG9ydCB7IHZpc2l0IH0gZnJvbSBcIi4uL2xhbmd1YWdlL3Zpc2l0b3IubWpzXCI7XG4vKipcbiAqIHNlcGFyYXRlT3BlcmF0aW9ucyBhY2NlcHRzIGEgc2luZ2xlIEFTVCBkb2N1bWVudCB3aGljaCBtYXkgY29udGFpbiBtYW55XG4gKiBvcGVyYXRpb25zIGFuZCBmcmFnbWVudHMgYW5kIHJldHVybnMgYSBjb2xsZWN0aW9uIG9mIEFTVCBkb2N1bWVudHMgZWFjaCBvZlxuICogd2hpY2ggY29udGFpbnMgYSBzaW5nbGUgb3BlcmF0aW9uIGFzIHdlbGwgdGhlIGZyYWdtZW50IGRlZmluaXRpb25zIGl0XG4gKiByZWZlcnMgdG8uXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHNlcGFyYXRlT3BlcmF0aW9ucyhkb2N1bWVudEFTVCkge1xuICB2YXIgb3BlcmF0aW9ucyA9IFtdO1xuICB2YXIgZGVwR3JhcGggPSBPYmplY3QuY3JlYXRlKG51bGwpOyAvLyBQb3B1bGF0ZSBtZXRhZGF0YSBhbmQgYnVpbGQgYSBkZXBlbmRlbmN5IGdyYXBoLlxuXG4gIGZvciAodmFyIF9pMiA9IDAsIF9kb2N1bWVudEFTVCRkZWZpbml0aTIgPSBkb2N1bWVudEFTVC5kZWZpbml0aW9uczsgX2kyIDwgX2RvY3VtZW50QVNUJGRlZmluaXRpMi5sZW5ndGg7IF9pMisrKSB7XG4gICAgdmFyIGRlZmluaXRpb25Ob2RlID0gX2RvY3VtZW50QVNUJGRlZmluaXRpMltfaTJdO1xuXG4gICAgc3dpdGNoIChkZWZpbml0aW9uTm9kZS5raW5kKSB7XG4gICAgICBjYXNlIEtpbmQuT1BFUkFUSU9OX0RFRklOSVRJT046XG4gICAgICAgIG9wZXJhdGlvbnMucHVzaChkZWZpbml0aW9uTm9kZSk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIEtpbmQuRlJBR01FTlRfREVGSU5JVElPTjpcbiAgICAgICAgZGVwR3JhcGhbZGVmaW5pdGlvbk5vZGUubmFtZS52YWx1ZV0gPSBjb2xsZWN0RGVwZW5kZW5jaWVzKGRlZmluaXRpb25Ob2RlLnNlbGVjdGlvblNldCk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfSAvLyBGb3IgZWFjaCBvcGVyYXRpb24sIHByb2R1Y2UgYSBuZXcgc3ludGhlc2l6ZWQgQVNUIHdoaWNoIGluY2x1ZGVzIG9ubHkgd2hhdFxuICAvLyBpcyBuZWNlc3NhcnkgZm9yIGNvbXBsZXRpbmcgdGhhdCBvcGVyYXRpb24uXG5cblxuICB2YXIgc2VwYXJhdGVkRG9jdW1lbnRBU1RzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICB2YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcChfaTQpIHtcbiAgICB2YXIgb3BlcmF0aW9uID0gb3BlcmF0aW9uc1tfaTRdO1xuICAgIHZhciBkZXBlbmRlbmNpZXMgPSBuZXcgU2V0KCk7XG5cbiAgICBmb3IgKHZhciBfaTYgPSAwLCBfY29sbGVjdERlcGVuZGVuY2llczIgPSBjb2xsZWN0RGVwZW5kZW5jaWVzKG9wZXJhdGlvbi5zZWxlY3Rpb25TZXQpOyBfaTYgPCBfY29sbGVjdERlcGVuZGVuY2llczIubGVuZ3RoOyBfaTYrKykge1xuICAgICAgdmFyIGZyYWdtZW50TmFtZSA9IF9jb2xsZWN0RGVwZW5kZW5jaWVzMltfaTZdO1xuICAgICAgY29sbGVjdFRyYW5zaXRpdmVEZXBlbmRlbmNpZXMoZGVwZW5kZW5jaWVzLCBkZXBHcmFwaCwgZnJhZ21lbnROYW1lKTtcbiAgICB9IC8vIFByb3ZpZGVzIHRoZSBlbXB0eSBzdHJpbmcgZm9yIGFub255bW91cyBvcGVyYXRpb25zLlxuXG5cbiAgICB2YXIgb3BlcmF0aW9uTmFtZSA9IG9wZXJhdGlvbi5uYW1lID8gb3BlcmF0aW9uLm5hbWUudmFsdWUgOiAnJzsgLy8gVGhlIGxpc3Qgb2YgZGVmaW5pdGlvbiBub2RlcyB0byBiZSBpbmNsdWRlZCBmb3IgdGhpcyBvcGVyYXRpb24sIHNvcnRlZFxuICAgIC8vIHRvIHJldGFpbiB0aGUgc2FtZSBvcmRlciBhcyB0aGUgb3JpZ2luYWwgZG9jdW1lbnQuXG5cbiAgICBzZXBhcmF0ZWREb2N1bWVudEFTVHNbb3BlcmF0aW9uTmFtZV0gPSB7XG4gICAgICBraW5kOiBLaW5kLkRPQ1VNRU5ULFxuICAgICAgZGVmaW5pdGlvbnM6IGRvY3VtZW50QVNULmRlZmluaXRpb25zLmZpbHRlcihmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICByZXR1cm4gbm9kZSA9PT0gb3BlcmF0aW9uIHx8IG5vZGUua2luZCA9PT0gS2luZC5GUkFHTUVOVF9ERUZJTklUSU9OICYmIGRlcGVuZGVuY2llcy5oYXMobm9kZS5uYW1lLnZhbHVlKTtcbiAgICAgIH0pXG4gICAgfTtcbiAgfTtcblxuICBmb3IgKHZhciBfaTQgPSAwOyBfaTQgPCBvcGVyYXRpb25zLmxlbmd0aDsgX2k0KyspIHtcbiAgICBfbG9vcChfaTQpO1xuICB9XG5cbiAgcmV0dXJuIHNlcGFyYXRlZERvY3VtZW50QVNUcztcbn1cblxuLy8gRnJvbSBhIGRlcGVuZGVuY3kgZ3JhcGgsIGNvbGxlY3RzIGEgbGlzdCBvZiB0cmFuc2l0aXZlIGRlcGVuZGVuY2llcyBieVxuLy8gcmVjdXJzaW5nIHRocm91Z2ggYSBkZXBlbmRlbmN5IGdyYXBoLlxuZnVuY3Rpb24gY29sbGVjdFRyYW5zaXRpdmVEZXBlbmRlbmNpZXMoY29sbGVjdGVkLCBkZXBHcmFwaCwgZnJvbU5hbWUpIHtcbiAgaWYgKCFjb2xsZWN0ZWQuaGFzKGZyb21OYW1lKSkge1xuICAgIGNvbGxlY3RlZC5hZGQoZnJvbU5hbWUpO1xuICAgIHZhciBpbW1lZGlhdGVEZXBzID0gZGVwR3JhcGhbZnJvbU5hbWVdO1xuXG4gICAgaWYgKGltbWVkaWF0ZURlcHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgZm9yICh2YXIgX2k4ID0gMDsgX2k4IDwgaW1tZWRpYXRlRGVwcy5sZW5ndGg7IF9pOCsrKSB7XG4gICAgICAgIHZhciB0b05hbWUgPSBpbW1lZGlhdGVEZXBzW19pOF07XG4gICAgICAgIGNvbGxlY3RUcmFuc2l0aXZlRGVwZW5kZW5jaWVzKGNvbGxlY3RlZCwgZGVwR3JhcGgsIHRvTmFtZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNvbGxlY3REZXBlbmRlbmNpZXMoc2VsZWN0aW9uU2V0KSB7XG4gIHZhciBkZXBlbmRlbmNpZXMgPSBbXTtcbiAgdmlzaXQoc2VsZWN0aW9uU2V0LCB7XG4gICAgRnJhZ21lbnRTcHJlYWQ6IGZ1bmN0aW9uIEZyYWdtZW50U3ByZWFkKG5vZGUpIHtcbiAgICAgIGRlcGVuZGVuY2llcy5wdXNoKG5vZGUubmFtZS52YWx1ZSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGRlcGVuZGVuY2llcztcbn1cbiIsImltcG9ydCB7IFNvdXJjZSwgaXNTb3VyY2UgfSBmcm9tIFwiLi4vbGFuZ3VhZ2Uvc291cmNlLm1qc1wiO1xuaW1wb3J0IHsgVG9rZW5LaW5kIH0gZnJvbSBcIi4uL2xhbmd1YWdlL3Rva2VuS2luZC5tanNcIjtcbmltcG9ydCB7IExleGVyLCBpc1B1bmN0dWF0b3JUb2tlbktpbmQgfSBmcm9tIFwiLi4vbGFuZ3VhZ2UvbGV4ZXIubWpzXCI7XG5pbXBvcnQgeyBkZWRlbnRCbG9ja1N0cmluZ1ZhbHVlLCBnZXRCbG9ja1N0cmluZ0luZGVudGF0aW9uIH0gZnJvbSBcIi4uL2xhbmd1YWdlL2Jsb2NrU3RyaW5nLm1qc1wiO1xuLyoqXG4gKiBTdHJpcHMgY2hhcmFjdGVycyB0aGF0IGFyZSBub3Qgc2lnbmlmaWNhbnQgdG8gdGhlIHZhbGlkaXR5IG9yIGV4ZWN1dGlvblxuICogb2YgYSBHcmFwaFFMIGRvY3VtZW50OlxuICogICAtIFVuaWNvZGVCT01cbiAqICAgLSBXaGl0ZVNwYWNlXG4gKiAgIC0gTGluZVRlcm1pbmF0b3JcbiAqICAgLSBDb21tZW50XG4gKiAgIC0gQ29tbWFcbiAqICAgLSBCbG9ja1N0cmluZyBpbmRlbnRhdGlvblxuICpcbiAqIE5vdGU6IEl0IGlzIHJlcXVpcmVkIHRvIGhhdmUgYSBkZWxpbWl0ZXIgY2hhcmFjdGVyIGJldHdlZW4gbmVpZ2hib3JpbmdcbiAqIG5vbi1wdW5jdHVhdG9yIHRva2VucyBhbmQgdGhpcyBmdW5jdGlvbiBhbHdheXMgdXNlcyBzaW5nbGUgc3BhY2UgYXMgZGVsaW1pdGVyLlxuICpcbiAqIEl0IGlzIGd1YXJhbnRlZWQgdGhhdCBib3RoIGlucHV0IGFuZCBvdXRwdXQgZG9jdW1lbnRzIGlmIHBhcnNlZCB3b3VsZCByZXN1bHRcbiAqIGluIHRoZSBleGFjdCBzYW1lIEFTVCBleGNlcHQgZm9yIG5vZGVzIGxvY2F0aW9uLlxuICpcbiAqIFdhcm5pbmc6IEl0IGlzIGd1YXJhbnRlZWQgdGhhdCB0aGlzIGZ1bmN0aW9uIHdpbGwgYWx3YXlzIHByb2R1Y2Ugc3RhYmxlIHJlc3VsdHMuXG4gKiBIb3dldmVyLCBpdCdzIG5vdCBndWFyYW50ZWVkIHRoYXQgaXQgd2lsbCBzdGF5IHRoZSBzYW1lIGJldHdlZW4gZGlmZmVyZW50XG4gKiByZWxlYXNlcyBkdWUgdG8gYnVnZml4ZXMgb3IgY2hhbmdlcyBpbiB0aGUgR3JhcGhRTCBzcGVjaWZpY2F0aW9uLlxuICpcbiAqIFF1ZXJ5IGV4YW1wbGU6XG4gKlxuICogcXVlcnkgU29tZVF1ZXJ5KCRmb286IFN0cmluZyEsICRiYXI6IFN0cmluZykge1xuICogICBzb21lRmllbGQoZm9vOiAkZm9vLCBiYXI6ICRiYXIpIHtcbiAqICAgICBhXG4gKiAgICAgYiB7XG4gKiAgICAgICBjXG4gKiAgICAgICBkXG4gKiAgICAgfVxuICogICB9XG4gKiB9XG4gKlxuICogQmVjb21lczpcbiAqXG4gKiBxdWVyeSBTb21lUXVlcnkoJGZvbzpTdHJpbmchJGJhcjpTdHJpbmcpe3NvbWVGaWVsZChmb286JGZvbyBiYXI6JGJhcil7YSBie2MgZH19fVxuICpcbiAqIFNETCBleGFtcGxlOlxuICpcbiAqIFwiXCJcIlxuICogVHlwZSBkZXNjcmlwdGlvblxuICogXCJcIlwiXG4gKiB0eXBlIEZvbyB7XG4gKiAgIFwiXCJcIlxuICogICBGaWVsZCBkZXNjcmlwdGlvblxuICogICBcIlwiXCJcbiAqICAgYmFyOiBTdHJpbmdcbiAqIH1cbiAqXG4gKiBCZWNvbWVzOlxuICpcbiAqIFwiXCJcIlR5cGUgZGVzY3JpcHRpb25cIlwiXCIgdHlwZSBGb297XCJcIlwiRmllbGQgZGVzY3JpcHRpb25cIlwiXCIgYmFyOlN0cmluZ31cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc3RyaXBJZ25vcmVkQ2hhcmFjdGVycyhzb3VyY2UpIHtcbiAgdmFyIHNvdXJjZU9iaiA9IGlzU291cmNlKHNvdXJjZSkgPyBzb3VyY2UgOiBuZXcgU291cmNlKHNvdXJjZSk7XG4gIHZhciBib2R5ID0gc291cmNlT2JqLmJvZHk7XG4gIHZhciBsZXhlciA9IG5ldyBMZXhlcihzb3VyY2VPYmopO1xuICB2YXIgc3RyaXBwZWRCb2R5ID0gJyc7XG4gIHZhciB3YXNMYXN0QWRkZWRUb2tlbk5vblB1bmN0dWF0b3IgPSBmYWxzZTtcblxuICB3aGlsZSAobGV4ZXIuYWR2YW5jZSgpLmtpbmQgIT09IFRva2VuS2luZC5FT0YpIHtcbiAgICB2YXIgY3VycmVudFRva2VuID0gbGV4ZXIudG9rZW47XG4gICAgdmFyIHRva2VuS2luZCA9IGN1cnJlbnRUb2tlbi5raW5kO1xuICAgIC8qKlxuICAgICAqIEV2ZXJ5IHR3byBub24tcHVuY3R1YXRvciB0b2tlbnMgc2hvdWxkIGhhdmUgc3BhY2UgYmV0d2VlbiB0aGVtLlxuICAgICAqIEFsc28gcHJldmVudCBjYXNlIG9mIG5vbi1wdW5jdHVhdG9yIHRva2VuIGZvbGxvd2luZyBieSBzcHJlYWQgcmVzdWx0aW5nXG4gICAgICogaW4gaW52YWxpZCB0b2tlbiAoZS5nLiBgMS4uLmAgaXMgaW52YWxpZCBGbG9hdCB0b2tlbikuXG4gICAgICovXG5cbiAgICB2YXIgaXNOb25QdW5jdHVhdG9yID0gIWlzUHVuY3R1YXRvclRva2VuS2luZChjdXJyZW50VG9rZW4ua2luZCk7XG5cbiAgICBpZiAod2FzTGFzdEFkZGVkVG9rZW5Ob25QdW5jdHVhdG9yKSB7XG4gICAgICBpZiAoaXNOb25QdW5jdHVhdG9yIHx8IGN1cnJlbnRUb2tlbi5raW5kID09PSBUb2tlbktpbmQuU1BSRUFEKSB7XG4gICAgICAgIHN0cmlwcGVkQm9keSArPSAnICc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHRva2VuQm9keSA9IGJvZHkuc2xpY2UoY3VycmVudFRva2VuLnN0YXJ0LCBjdXJyZW50VG9rZW4uZW5kKTtcblxuICAgIGlmICh0b2tlbktpbmQgPT09IFRva2VuS2luZC5CTE9DS19TVFJJTkcpIHtcbiAgICAgIHN0cmlwcGVkQm9keSArPSBkZWRlbnRCbG9ja1N0cmluZyh0b2tlbkJvZHkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdHJpcHBlZEJvZHkgKz0gdG9rZW5Cb2R5O1xuICAgIH1cblxuICAgIHdhc0xhc3RBZGRlZFRva2VuTm9uUHVuY3R1YXRvciA9IGlzTm9uUHVuY3R1YXRvcjtcbiAgfVxuXG4gIHJldHVybiBzdHJpcHBlZEJvZHk7XG59XG5cbmZ1bmN0aW9uIGRlZGVudEJsb2NrU3RyaW5nKGJsb2NrU3RyKSB7XG4gIC8vIHNraXAgbGVhZGluZyBhbmQgdHJhaWxpbmcgdHJpcGxlIHF1b3RhdGlvbnNcbiAgdmFyIHJhd1N0ciA9IGJsb2NrU3RyLnNsaWNlKDMsIC0zKTtcbiAgdmFyIGJvZHkgPSBkZWRlbnRCbG9ja1N0cmluZ1ZhbHVlKHJhd1N0cik7XG5cbiAgaWYgKGdldEJsb2NrU3RyaW5nSW5kZW50YXRpb24oYm9keSkgPiAwKSB7XG4gICAgYm9keSA9ICdcXG4nICsgYm9keTtcbiAgfVxuXG4gIHZhciBsYXN0Q2hhciA9IGJvZHlbYm9keS5sZW5ndGggLSAxXTtcbiAgdmFyIGhhc1RyYWlsaW5nUXVvdGUgPSBsYXN0Q2hhciA9PT0gJ1wiJyAmJiBib2R5LnNsaWNlKC00KSAhPT0gJ1xcXFxcIlwiXCInO1xuXG4gIGlmIChoYXNUcmFpbGluZ1F1b3RlIHx8IGxhc3RDaGFyID09PSAnXFxcXCcpIHtcbiAgICBib2R5ICs9ICdcXG4nO1xuICB9XG5cbiAgcmV0dXJuICdcIlwiXCInICsgYm9keSArICdcIlwiXCInO1xufVxuIiwiaW1wb3J0IHsgaXNJbnRlcmZhY2VUeXBlLCBpc09iamVjdFR5cGUsIGlzTGlzdFR5cGUsIGlzTm9uTnVsbFR5cGUsIGlzQWJzdHJhY3RUeXBlIH0gZnJvbSBcIi4uL3R5cGUvZGVmaW5pdGlvbi5tanNcIjtcbi8qKlxuICogUHJvdmlkZWQgdHdvIHR5cGVzLCByZXR1cm4gdHJ1ZSBpZiB0aGUgdHlwZXMgYXJlIGVxdWFsIChpbnZhcmlhbnQpLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBpc0VxdWFsVHlwZSh0eXBlQSwgdHlwZUIpIHtcbiAgLy8gRXF1aXZhbGVudCB0eXBlcyBhcmUgZXF1YWwuXG4gIGlmICh0eXBlQSA9PT0gdHlwZUIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSAvLyBJZiBlaXRoZXIgdHlwZSBpcyBub24tbnVsbCwgdGhlIG90aGVyIG11c3QgYWxzbyBiZSBub24tbnVsbC5cblxuXG4gIGlmIChpc05vbk51bGxUeXBlKHR5cGVBKSAmJiBpc05vbk51bGxUeXBlKHR5cGVCKSkge1xuICAgIHJldHVybiBpc0VxdWFsVHlwZSh0eXBlQS5vZlR5cGUsIHR5cGVCLm9mVHlwZSk7XG4gIH0gLy8gSWYgZWl0aGVyIHR5cGUgaXMgYSBsaXN0LCB0aGUgb3RoZXIgbXVzdCBhbHNvIGJlIGEgbGlzdC5cblxuXG4gIGlmIChpc0xpc3RUeXBlKHR5cGVBKSAmJiBpc0xpc3RUeXBlKHR5cGVCKSkge1xuICAgIHJldHVybiBpc0VxdWFsVHlwZSh0eXBlQS5vZlR5cGUsIHR5cGVCLm9mVHlwZSk7XG4gIH0gLy8gT3RoZXJ3aXNlIHRoZSB0eXBlcyBhcmUgbm90IGVxdWFsLlxuXG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuLyoqXG4gKiBQcm92aWRlZCBhIHR5cGUgYW5kIGEgc3VwZXIgdHlwZSwgcmV0dXJuIHRydWUgaWYgdGhlIGZpcnN0IHR5cGUgaXMgZWl0aGVyXG4gKiBlcXVhbCBvciBhIHN1YnNldCBvZiB0aGUgc2Vjb25kIHN1cGVyIHR5cGUgKGNvdmFyaWFudCkuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGlzVHlwZVN1YlR5cGVPZihzY2hlbWEsIG1heWJlU3ViVHlwZSwgc3VwZXJUeXBlKSB7XG4gIC8vIEVxdWl2YWxlbnQgdHlwZSBpcyBhIHZhbGlkIHN1YnR5cGVcbiAgaWYgKG1heWJlU3ViVHlwZSA9PT0gc3VwZXJUeXBlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gLy8gSWYgc3VwZXJUeXBlIGlzIG5vbi1udWxsLCBtYXliZVN1YlR5cGUgbXVzdCBhbHNvIGJlIG5vbi1udWxsLlxuXG5cbiAgaWYgKGlzTm9uTnVsbFR5cGUoc3VwZXJUeXBlKSkge1xuICAgIGlmIChpc05vbk51bGxUeXBlKG1heWJlU3ViVHlwZSkpIHtcbiAgICAgIHJldHVybiBpc1R5cGVTdWJUeXBlT2Yoc2NoZW1hLCBtYXliZVN1YlR5cGUub2ZUeXBlLCBzdXBlclR5cGUub2ZUeXBlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoaXNOb25OdWxsVHlwZShtYXliZVN1YlR5cGUpKSB7XG4gICAgLy8gSWYgc3VwZXJUeXBlIGlzIG51bGxhYmxlLCBtYXliZVN1YlR5cGUgbWF5IGJlIG5vbi1udWxsIG9yIG51bGxhYmxlLlxuICAgIHJldHVybiBpc1R5cGVTdWJUeXBlT2Yoc2NoZW1hLCBtYXliZVN1YlR5cGUub2ZUeXBlLCBzdXBlclR5cGUpO1xuICB9IC8vIElmIHN1cGVyVHlwZSB0eXBlIGlzIGEgbGlzdCwgbWF5YmVTdWJUeXBlIHR5cGUgbXVzdCBhbHNvIGJlIGEgbGlzdC5cblxuXG4gIGlmIChpc0xpc3RUeXBlKHN1cGVyVHlwZSkpIHtcbiAgICBpZiAoaXNMaXN0VHlwZShtYXliZVN1YlR5cGUpKSB7XG4gICAgICByZXR1cm4gaXNUeXBlU3ViVHlwZU9mKHNjaGVtYSwgbWF5YmVTdWJUeXBlLm9mVHlwZSwgc3VwZXJUeXBlLm9mVHlwZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKGlzTGlzdFR5cGUobWF5YmVTdWJUeXBlKSkge1xuICAgIC8vIElmIHN1cGVyVHlwZSBpcyBub3QgYSBsaXN0LCBtYXliZVN1YlR5cGUgbXVzdCBhbHNvIGJlIG5vdCBhIGxpc3QuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IC8vIElmIHN1cGVyVHlwZSB0eXBlIGlzIGFuIGFic3RyYWN0IHR5cGUsIGNoZWNrIGlmIGl0IGlzIHN1cGVyIHR5cGUgb2YgbWF5YmVTdWJUeXBlLlxuICAvLyBPdGhlcndpc2UsIHRoZSBjaGlsZCB0eXBlIGlzIG5vdCBhIHZhbGlkIHN1YnR5cGUgb2YgdGhlIHBhcmVudCB0eXBlLlxuXG5cbiAgcmV0dXJuIGlzQWJzdHJhY3RUeXBlKHN1cGVyVHlwZSkgJiYgKGlzSW50ZXJmYWNlVHlwZShtYXliZVN1YlR5cGUpIHx8IGlzT2JqZWN0VHlwZShtYXliZVN1YlR5cGUpKSAmJiBzY2hlbWEuaXNTdWJUeXBlKHN1cGVyVHlwZSwgbWF5YmVTdWJUeXBlKTtcbn1cbi8qKlxuICogUHJvdmlkZWQgdHdvIGNvbXBvc2l0ZSB0eXBlcywgZGV0ZXJtaW5lIGlmIHRoZXkgXCJvdmVybGFwXCIuIFR3byBjb21wb3NpdGVcbiAqIHR5cGVzIG92ZXJsYXAgd2hlbiB0aGUgU2V0cyBvZiBwb3NzaWJsZSBjb25jcmV0ZSB0eXBlcyBmb3IgZWFjaCBpbnRlcnNlY3QuXG4gKlxuICogVGhpcyBpcyBvZnRlbiB1c2VkIHRvIGRldGVybWluZSBpZiBhIGZyYWdtZW50IG9mIGEgZ2l2ZW4gdHlwZSBjb3VsZCBwb3NzaWJseVxuICogYmUgdmlzaXRlZCBpbiBhIGNvbnRleHQgb2YgYW5vdGhlciB0eXBlLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gaXMgY29tbXV0YXRpdmUuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGRvVHlwZXNPdmVybGFwKHNjaGVtYSwgdHlwZUEsIHR5cGVCKSB7XG4gIC8vIEVxdWl2YWxlbnQgdHlwZXMgb3ZlcmxhcFxuICBpZiAodHlwZUEgPT09IHR5cGVCKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoaXNBYnN0cmFjdFR5cGUodHlwZUEpKSB7XG4gICAgaWYgKGlzQWJzdHJhY3RUeXBlKHR5cGVCKSkge1xuICAgICAgLy8gSWYgYm90aCB0eXBlcyBhcmUgYWJzdHJhY3QsIHRoZW4gZGV0ZXJtaW5lIGlmIHRoZXJlIGlzIGFueSBpbnRlcnNlY3Rpb25cbiAgICAgIC8vIGJldHdlZW4gcG9zc2libGUgY29uY3JldGUgdHlwZXMgb2YgZWFjaC5cbiAgICAgIHJldHVybiBzY2hlbWEuZ2V0UG9zc2libGVUeXBlcyh0eXBlQSkuc29tZShmdW5jdGlvbiAodHlwZSkge1xuICAgICAgICByZXR1cm4gc2NoZW1hLmlzU3ViVHlwZSh0eXBlQiwgdHlwZSk7XG4gICAgICB9KTtcbiAgICB9IC8vIERldGVybWluZSBpZiB0aGUgbGF0dGVyIHR5cGUgaXMgYSBwb3NzaWJsZSBjb25jcmV0ZSB0eXBlIG9mIHRoZSBmb3JtZXIuXG5cblxuICAgIHJldHVybiBzY2hlbWEuaXNTdWJUeXBlKHR5cGVBLCB0eXBlQik7XG4gIH1cblxuICBpZiAoaXNBYnN0cmFjdFR5cGUodHlwZUIpKSB7XG4gICAgLy8gRGV0ZXJtaW5lIGlmIHRoZSBmb3JtZXIgdHlwZSBpcyBhIHBvc3NpYmxlIGNvbmNyZXRlIHR5cGUgb2YgdGhlIGxhdHRlci5cbiAgICByZXR1cm4gc2NoZW1hLmlzU3ViVHlwZSh0eXBlQiwgdHlwZUEpO1xuICB9IC8vIE90aGVyd2lzZSB0aGUgdHlwZXMgZG8gbm90IG92ZXJsYXAuXG5cblxuICByZXR1cm4gZmFsc2U7XG59XG4iLCJpbXBvcnQgaW5zcGVjdCBmcm9tIFwiLi4vanN1dGlscy9pbnNwZWN0Lm1qc1wiO1xuaW1wb3J0IGludmFyaWFudCBmcm9tIFwiLi4vanN1dGlscy9pbnZhcmlhbnQubWpzXCI7XG5pbXBvcnQgeyBLaW5kIH0gZnJvbSBcIi4uL2xhbmd1YWdlL2tpbmRzLm1qc1wiO1xuaW1wb3J0IHsgR3JhcGhRTExpc3QsIEdyYXBoUUxOb25OdWxsIH0gZnJvbSBcIi4uL3R5cGUvZGVmaW5pdGlvbi5tanNcIjtcbi8qKlxuICogR2l2ZW4gYSBTY2hlbWEgYW5kIGFuIEFTVCBub2RlIGRlc2NyaWJpbmcgYSB0eXBlLCByZXR1cm4gYSBHcmFwaFFMVHlwZVxuICogZGVmaW5pdGlvbiB3aGljaCBhcHBsaWVzIHRvIHRoYXQgdHlwZS4gRm9yIGV4YW1wbGUsIGlmIHByb3ZpZGVkIHRoZSBwYXJzZWRcbiAqIEFTVCBub2RlIGZvciBgW1VzZXJdYCwgYSBHcmFwaFFMTGlzdCBpbnN0YW5jZSB3aWxsIGJlIHJldHVybmVkLCBjb250YWluaW5nXG4gKiB0aGUgdHlwZSBjYWxsZWQgXCJVc2VyXCIgZm91bmQgaW4gdGhlIHNjaGVtYS4gSWYgYSB0eXBlIGNhbGxlZCBcIlVzZXJcIiBpcyBub3RcbiAqIGZvdW5kIGluIHRoZSBzY2hlbWEsIHRoZW4gdW5kZWZpbmVkIHdpbGwgYmUgcmV0dXJuZWQuXG4gKi9cblxuLyogZXNsaW50LWRpc2FibGUgbm8tcmVkZWNsYXJlICovXG5cbmV4cG9ydCBmdW5jdGlvbiB0eXBlRnJvbUFTVChzY2hlbWEsIHR5cGVOb2RlKSB7XG4gIC8qIGVzbGludC1lbmFibGUgbm8tcmVkZWNsYXJlICovXG4gIHZhciBpbm5lclR5cGU7XG5cbiAgaWYgKHR5cGVOb2RlLmtpbmQgPT09IEtpbmQuTElTVF9UWVBFKSB7XG4gICAgaW5uZXJUeXBlID0gdHlwZUZyb21BU1Qoc2NoZW1hLCB0eXBlTm9kZS50eXBlKTtcbiAgICByZXR1cm4gaW5uZXJUeXBlICYmIG5ldyBHcmFwaFFMTGlzdChpbm5lclR5cGUpO1xuICB9XG5cbiAgaWYgKHR5cGVOb2RlLmtpbmQgPT09IEtpbmQuTk9OX05VTExfVFlQRSkge1xuICAgIGlubmVyVHlwZSA9IHR5cGVGcm9tQVNUKHNjaGVtYSwgdHlwZU5vZGUudHlwZSk7XG4gICAgcmV0dXJuIGlubmVyVHlwZSAmJiBuZXcgR3JhcGhRTE5vbk51bGwoaW5uZXJUeXBlKTtcbiAgfSAvLyBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAoU2VlOiAnaHR0cHM6Ly9naXRodWIuY29tL2dyYXBocWwvZ3JhcGhxbC1qcy9pc3N1ZXMvMjYxOCcpXG5cblxuICBpZiAodHlwZU5vZGUua2luZCA9PT0gS2luZC5OQU1FRF9UWVBFKSB7XG4gICAgcmV0dXJuIHNjaGVtYS5nZXRUeXBlKHR5cGVOb2RlLm5hbWUudmFsdWUpO1xuICB9IC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0IChOb3QgcmVhY2hhYmxlLiBBbGwgcG9zc2libGUgdHlwZSBub2RlcyBoYXZlIGJlZW4gY29uc2lkZXJlZClcblxuXG4gIGZhbHNlIHx8IGludmFyaWFudCgwLCAnVW5leHBlY3RlZCB0eXBlIG5vZGU6ICcgKyBpbnNwZWN0KHR5cGVOb2RlKSk7XG59XG4iLCJpbXBvcnQgb2JqZWN0VmFsdWVzIGZyb20gXCIuLi9wb2x5ZmlsbHMvb2JqZWN0VmFsdWVzLm1qc1wiO1xuaW1wb3J0IGtleU1hcCBmcm9tIFwiLi4vanN1dGlscy9rZXlNYXAubWpzXCI7XG5pbXBvcnQgaW5zcGVjdCBmcm9tIFwiLi4vanN1dGlscy9pbnNwZWN0Lm1qc1wiO1xuaW1wb3J0IGludmFyaWFudCBmcm9tIFwiLi4vanN1dGlscy9pbnZhcmlhbnQubWpzXCI7XG5pbXBvcnQgeyBLaW5kIH0gZnJvbSBcIi4uL2xhbmd1YWdlL2tpbmRzLm1qc1wiO1xuaW1wb3J0IHsgaXNMZWFmVHlwZSwgaXNJbnB1dE9iamVjdFR5cGUsIGlzTGlzdFR5cGUsIGlzTm9uTnVsbFR5cGUgfSBmcm9tIFwiLi4vdHlwZS9kZWZpbml0aW9uLm1qc1wiO1xuLyoqXG4gKiBQcm9kdWNlcyBhIEphdmFTY3JpcHQgdmFsdWUgZ2l2ZW4gYSBHcmFwaFFMIFZhbHVlIEFTVC5cbiAqXG4gKiBBIEdyYXBoUUwgdHlwZSBtdXN0IGJlIHByb3ZpZGVkLCB3aGljaCB3aWxsIGJlIHVzZWQgdG8gaW50ZXJwcmV0IGRpZmZlcmVudFxuICogR3JhcGhRTCBWYWx1ZSBsaXRlcmFscy5cbiAqXG4gKiBSZXR1cm5zIGB1bmRlZmluZWRgIHdoZW4gdGhlIHZhbHVlIGNvdWxkIG5vdCBiZSB2YWxpZGx5IGNvZXJjZWQgYWNjb3JkaW5nIHRvXG4gKiB0aGUgcHJvdmlkZWQgdHlwZS5cbiAqXG4gKiB8IEdyYXBoUUwgVmFsdWUgICAgICAgIHwgSlNPTiBWYWx1ZSAgICB8XG4gKiB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tIHwgLS0tLS0tLS0tLS0tLSB8XG4gKiB8IElucHV0IE9iamVjdCAgICAgICAgIHwgT2JqZWN0ICAgICAgICB8XG4gKiB8IExpc3QgICAgICAgICAgICAgICAgIHwgQXJyYXkgICAgICAgICB8XG4gKiB8IEJvb2xlYW4gICAgICAgICAgICAgIHwgQm9vbGVhbiAgICAgICB8XG4gKiB8IFN0cmluZyAgICAgICAgICAgICAgIHwgU3RyaW5nICAgICAgICB8XG4gKiB8IEludCAvIEZsb2F0ICAgICAgICAgIHwgTnVtYmVyICAgICAgICB8XG4gKiB8IEVudW0gVmFsdWUgICAgICAgICAgIHwgTWl4ZWQgICAgICAgICB8XG4gKiB8IE51bGxWYWx1ZSAgICAgICAgICAgIHwgbnVsbCAgICAgICAgICB8XG4gKlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiB2YWx1ZUZyb21BU1QodmFsdWVOb2RlLCB0eXBlLCB2YXJpYWJsZXMpIHtcbiAgaWYgKCF2YWx1ZU5vZGUpIHtcbiAgICAvLyBXaGVuIHRoZXJlIGlzIG5vIG5vZGUsIHRoZW4gdGhlcmUgaXMgYWxzbyBubyB2YWx1ZS5cbiAgICAvLyBJbXBvcnRhbnRseSwgdGhpcyBpcyBkaWZmZXJlbnQgZnJvbSByZXR1cm5pbmcgdGhlIHZhbHVlIG51bGwuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHZhbHVlTm9kZS5raW5kID09PSBLaW5kLlZBUklBQkxFKSB7XG4gICAgdmFyIHZhcmlhYmxlTmFtZSA9IHZhbHVlTm9kZS5uYW1lLnZhbHVlO1xuXG4gICAgaWYgKHZhcmlhYmxlcyA9PSBudWxsIHx8IHZhcmlhYmxlc1t2YXJpYWJsZU5hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIE5vIHZhbGlkIHJldHVybiB2YWx1ZS5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgdmFyaWFibGVWYWx1ZSA9IHZhcmlhYmxlc1t2YXJpYWJsZU5hbWVdO1xuXG4gICAgaWYgKHZhcmlhYmxlVmFsdWUgPT09IG51bGwgJiYgaXNOb25OdWxsVHlwZSh0eXBlKSkge1xuICAgICAgcmV0dXJuOyAvLyBJbnZhbGlkOiBpbnRlbnRpb25hbGx5IHJldHVybiBubyB2YWx1ZS5cbiAgICB9IC8vIE5vdGU6IFRoaXMgZG9lcyBubyBmdXJ0aGVyIGNoZWNraW5nIHRoYXQgdGhpcyB2YXJpYWJsZSBpcyBjb3JyZWN0LlxuICAgIC8vIFRoaXMgYXNzdW1lcyB0aGF0IHRoaXMgcXVlcnkgaGFzIGJlZW4gdmFsaWRhdGVkIGFuZCB0aGUgdmFyaWFibGVcbiAgICAvLyB1c2FnZSBoZXJlIGlzIG9mIHRoZSBjb3JyZWN0IHR5cGUuXG5cblxuICAgIHJldHVybiB2YXJpYWJsZVZhbHVlO1xuICB9XG5cbiAgaWYgKGlzTm9uTnVsbFR5cGUodHlwZSkpIHtcbiAgICBpZiAodmFsdWVOb2RlLmtpbmQgPT09IEtpbmQuTlVMTCkge1xuICAgICAgcmV0dXJuOyAvLyBJbnZhbGlkOiBpbnRlbnRpb25hbGx5IHJldHVybiBubyB2YWx1ZS5cbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWVGcm9tQVNUKHZhbHVlTm9kZSwgdHlwZS5vZlR5cGUsIHZhcmlhYmxlcyk7XG4gIH1cblxuICBpZiAodmFsdWVOb2RlLmtpbmQgPT09IEtpbmQuTlVMTCkge1xuICAgIC8vIFRoaXMgaXMgZXhwbGljaXRseSByZXR1cm5pbmcgdGhlIHZhbHVlIG51bGwuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBpZiAoaXNMaXN0VHlwZSh0eXBlKSkge1xuICAgIHZhciBpdGVtVHlwZSA9IHR5cGUub2ZUeXBlO1xuXG4gICAgaWYgKHZhbHVlTm9kZS5raW5kID09PSBLaW5kLkxJU1QpIHtcbiAgICAgIHZhciBjb2VyY2VkVmFsdWVzID0gW107XG5cbiAgICAgIGZvciAodmFyIF9pMiA9IDAsIF92YWx1ZU5vZGUkdmFsdWVzMiA9IHZhbHVlTm9kZS52YWx1ZXM7IF9pMiA8IF92YWx1ZU5vZGUkdmFsdWVzMi5sZW5ndGg7IF9pMisrKSB7XG4gICAgICAgIHZhciBpdGVtTm9kZSA9IF92YWx1ZU5vZGUkdmFsdWVzMltfaTJdO1xuXG4gICAgICAgIGlmIChpc01pc3NpbmdWYXJpYWJsZShpdGVtTm9kZSwgdmFyaWFibGVzKSkge1xuICAgICAgICAgIC8vIElmIGFuIGFycmF5IGNvbnRhaW5zIGEgbWlzc2luZyB2YXJpYWJsZSwgaXQgaXMgZWl0aGVyIGNvZXJjZWQgdG9cbiAgICAgICAgICAvLyBudWxsIG9yIGlmIHRoZSBpdGVtIHR5cGUgaXMgbm9uLW51bGwsIGl0IGNvbnNpZGVyZWQgaW52YWxpZC5cbiAgICAgICAgICBpZiAoaXNOb25OdWxsVHlwZShpdGVtVHlwZSkpIHtcbiAgICAgICAgICAgIHJldHVybjsgLy8gSW52YWxpZDogaW50ZW50aW9uYWxseSByZXR1cm4gbm8gdmFsdWUuXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29lcmNlZFZhbHVlcy5wdXNoKG51bGwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBpdGVtVmFsdWUgPSB2YWx1ZUZyb21BU1QoaXRlbU5vZGUsIGl0ZW1UeXBlLCB2YXJpYWJsZXMpO1xuXG4gICAgICAgICAgaWYgKGl0ZW1WYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm47IC8vIEludmFsaWQ6IGludGVudGlvbmFsbHkgcmV0dXJuIG5vIHZhbHVlLlxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvZXJjZWRWYWx1ZXMucHVzaChpdGVtVmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb2VyY2VkVmFsdWVzO1xuICAgIH1cblxuICAgIHZhciBjb2VyY2VkVmFsdWUgPSB2YWx1ZUZyb21BU1QodmFsdWVOb2RlLCBpdGVtVHlwZSwgdmFyaWFibGVzKTtcblxuICAgIGlmIChjb2VyY2VkVmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuOyAvLyBJbnZhbGlkOiBpbnRlbnRpb25hbGx5IHJldHVybiBubyB2YWx1ZS5cbiAgICB9XG5cbiAgICByZXR1cm4gW2NvZXJjZWRWYWx1ZV07XG4gIH1cblxuICBpZiAoaXNJbnB1dE9iamVjdFR5cGUodHlwZSkpIHtcbiAgICBpZiAodmFsdWVOb2RlLmtpbmQgIT09IEtpbmQuT0JKRUNUKSB7XG4gICAgICByZXR1cm47IC8vIEludmFsaWQ6IGludGVudGlvbmFsbHkgcmV0dXJuIG5vIHZhbHVlLlxuICAgIH1cblxuICAgIHZhciBjb2VyY2VkT2JqID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB2YXIgZmllbGROb2RlcyA9IGtleU1hcCh2YWx1ZU5vZGUuZmllbGRzLCBmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgIHJldHVybiBmaWVsZC5uYW1lLnZhbHVlO1xuICAgIH0pO1xuXG4gICAgZm9yICh2YXIgX2k0ID0gMCwgX29iamVjdFZhbHVlczIgPSBvYmplY3RWYWx1ZXModHlwZS5nZXRGaWVsZHMoKSk7IF9pNCA8IF9vYmplY3RWYWx1ZXMyLmxlbmd0aDsgX2k0KyspIHtcbiAgICAgIHZhciBmaWVsZCA9IF9vYmplY3RWYWx1ZXMyW19pNF07XG4gICAgICB2YXIgZmllbGROb2RlID0gZmllbGROb2Rlc1tmaWVsZC5uYW1lXTtcblxuICAgICAgaWYgKCFmaWVsZE5vZGUgfHwgaXNNaXNzaW5nVmFyaWFibGUoZmllbGROb2RlLnZhbHVlLCB2YXJpYWJsZXMpKSB7XG4gICAgICAgIGlmIChmaWVsZC5kZWZhdWx0VmFsdWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGNvZXJjZWRPYmpbZmllbGQubmFtZV0gPSBmaWVsZC5kZWZhdWx0VmFsdWU7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNOb25OdWxsVHlwZShmaWVsZC50eXBlKSkge1xuICAgICAgICAgIHJldHVybjsgLy8gSW52YWxpZDogaW50ZW50aW9uYWxseSByZXR1cm4gbm8gdmFsdWUuXG4gICAgICAgIH1cblxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGZpZWxkVmFsdWUgPSB2YWx1ZUZyb21BU1QoZmllbGROb2RlLnZhbHVlLCBmaWVsZC50eXBlLCB2YXJpYWJsZXMpO1xuXG4gICAgICBpZiAoZmllbGRWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybjsgLy8gSW52YWxpZDogaW50ZW50aW9uYWxseSByZXR1cm4gbm8gdmFsdWUuXG4gICAgICB9XG5cbiAgICAgIGNvZXJjZWRPYmpbZmllbGQubmFtZV0gPSBmaWVsZFZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiBjb2VyY2VkT2JqO1xuICB9IC8vIGlzdGFuYnVsIGlnbm9yZSBlbHNlIChTZWU6ICdodHRwczovL2dpdGh1Yi5jb20vZ3JhcGhxbC9ncmFwaHFsLWpzL2lzc3Vlcy8yNjE4JylcblxuXG4gIGlmIChpc0xlYWZUeXBlKHR5cGUpKSB7XG4gICAgLy8gU2NhbGFycyBhbmQgRW51bXMgZnVsZmlsbCBwYXJzaW5nIGEgbGl0ZXJhbCB2YWx1ZSB2aWEgcGFyc2VMaXRlcmFsKCkuXG4gICAgLy8gSW52YWxpZCB2YWx1ZXMgcmVwcmVzZW50IGEgZmFpbHVyZSB0byBwYXJzZSBjb3JyZWN0bHksIGluIHdoaWNoIGNhc2VcbiAgICAvLyBubyB2YWx1ZSBpcyByZXR1cm5lZC5cbiAgICB2YXIgcmVzdWx0O1xuXG4gICAgdHJ5IHtcbiAgICAgIHJlc3VsdCA9IHR5cGUucGFyc2VMaXRlcmFsKHZhbHVlTm9kZSwgdmFyaWFibGVzKTtcbiAgICB9IGNhdGNoIChfZXJyb3IpIHtcbiAgICAgIHJldHVybjsgLy8gSW52YWxpZDogaW50ZW50aW9uYWxseSByZXR1cm4gbm8gdmFsdWUuXG4gICAgfVxuXG4gICAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm47IC8vIEludmFsaWQ6IGludGVudGlvbmFsbHkgcmV0dXJuIG5vIHZhbHVlLlxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH0gLy8gaXN0YW5idWwgaWdub3JlIG5leHQgKE5vdCByZWFjaGFibGUuIEFsbCBwb3NzaWJsZSBpbnB1dCB0eXBlcyBoYXZlIGJlZW4gY29uc2lkZXJlZClcblxuXG4gIGZhbHNlIHx8IGludmFyaWFudCgwLCAnVW5leHBlY3RlZCBpbnB1dCB0eXBlOiAnICsgaW5zcGVjdCh0eXBlKSk7XG59IC8vIFJldHVybnMgdHJ1ZSBpZiB0aGUgcHJvdmlkZWQgdmFsdWVOb2RlIGlzIGEgdmFyaWFibGUgd2hpY2ggaXMgbm90IGRlZmluZWRcbi8vIGluIHRoZSBzZXQgb2YgdmFyaWFibGVzLlxuXG5mdW5jdGlvbiBpc01pc3NpbmdWYXJpYWJsZSh2YWx1ZU5vZGUsIHZhcmlhYmxlcykge1xuICByZXR1cm4gdmFsdWVOb2RlLmtpbmQgPT09IEtpbmQuVkFSSUFCTEUgJiYgKHZhcmlhYmxlcyA9PSBudWxsIHx8IHZhcmlhYmxlc1t2YWx1ZU5vZGUubmFtZS52YWx1ZV0gPT09IHVuZGVmaW5lZCk7XG59XG4iLCJpbXBvcnQgaW5zcGVjdCBmcm9tIFwiLi4vanN1dGlscy9pbnNwZWN0Lm1qc1wiO1xuaW1wb3J0IGludmFyaWFudCBmcm9tIFwiLi4vanN1dGlscy9pbnZhcmlhbnQubWpzXCI7XG5pbXBvcnQga2V5VmFsTWFwIGZyb20gXCIuLi9qc3V0aWxzL2tleVZhbE1hcC5tanNcIjtcbmltcG9ydCB7IEtpbmQgfSBmcm9tIFwiLi4vbGFuZ3VhZ2Uva2luZHMubWpzXCI7XG5cbi8qKlxuICogUHJvZHVjZXMgYSBKYXZhU2NyaXB0IHZhbHVlIGdpdmVuIGEgR3JhcGhRTCBWYWx1ZSBBU1QuXG4gKlxuICogVW5saWtlIGB2YWx1ZUZyb21BU1QoKWAsIG5vIHR5cGUgaXMgcHJvdmlkZWQuIFRoZSByZXN1bHRpbmcgSmF2YVNjcmlwdCB2YWx1ZVxuICogd2lsbCByZWZsZWN0IHRoZSBwcm92aWRlZCBHcmFwaFFMIHZhbHVlIEFTVC5cbiAqXG4gKiB8IEdyYXBoUUwgVmFsdWUgICAgICAgIHwgSmF2YVNjcmlwdCBWYWx1ZSB8XG4gKiB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tIHwgLS0tLS0tLS0tLS0tLS0tLSB8XG4gKiB8IElucHV0IE9iamVjdCAgICAgICAgIHwgT2JqZWN0ICAgICAgICAgICB8XG4gKiB8IExpc3QgICAgICAgICAgICAgICAgIHwgQXJyYXkgICAgICAgICAgICB8XG4gKiB8IEJvb2xlYW4gICAgICAgICAgICAgIHwgQm9vbGVhbiAgICAgICAgICB8XG4gKiB8IFN0cmluZyAvIEVudW0gICAgICAgIHwgU3RyaW5nICAgICAgICAgICB8XG4gKiB8IEludCAvIEZsb2F0ICAgICAgICAgIHwgTnVtYmVyICAgICAgICAgICB8XG4gKiB8IE51bGwgICAgICAgICAgICAgICAgIHwgbnVsbCAgICAgICAgICAgICB8XG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gdmFsdWVGcm9tQVNUVW50eXBlZCh2YWx1ZU5vZGUsIHZhcmlhYmxlcykge1xuICBzd2l0Y2ggKHZhbHVlTm9kZS5raW5kKSB7XG4gICAgY2FzZSBLaW5kLk5VTEw6XG4gICAgICByZXR1cm4gbnVsbDtcblxuICAgIGNhc2UgS2luZC5JTlQ6XG4gICAgICByZXR1cm4gcGFyc2VJbnQodmFsdWVOb2RlLnZhbHVlLCAxMCk7XG5cbiAgICBjYXNlIEtpbmQuRkxPQVQ6XG4gICAgICByZXR1cm4gcGFyc2VGbG9hdCh2YWx1ZU5vZGUudmFsdWUpO1xuXG4gICAgY2FzZSBLaW5kLlNUUklORzpcbiAgICBjYXNlIEtpbmQuRU5VTTpcbiAgICBjYXNlIEtpbmQuQk9PTEVBTjpcbiAgICAgIHJldHVybiB2YWx1ZU5vZGUudmFsdWU7XG5cbiAgICBjYXNlIEtpbmQuTElTVDpcbiAgICAgIHJldHVybiB2YWx1ZU5vZGUudmFsdWVzLm1hcChmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICByZXR1cm4gdmFsdWVGcm9tQVNUVW50eXBlZChub2RlLCB2YXJpYWJsZXMpO1xuICAgICAgfSk7XG5cbiAgICBjYXNlIEtpbmQuT0JKRUNUOlxuICAgICAgcmV0dXJuIGtleVZhbE1hcCh2YWx1ZU5vZGUuZmllbGRzLCBmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgICAgcmV0dXJuIGZpZWxkLm5hbWUudmFsdWU7XG4gICAgICB9LCBmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlRnJvbUFTVFVudHlwZWQoZmllbGQudmFsdWUsIHZhcmlhYmxlcyk7XG4gICAgICB9KTtcblxuICAgIGNhc2UgS2luZC5WQVJJQUJMRTpcbiAgICAgIHJldHVybiB2YXJpYWJsZXMgPT09IG51bGwgfHwgdmFyaWFibGVzID09PSB2b2lkIDAgPyB2b2lkIDAgOiB2YXJpYWJsZXNbdmFsdWVOb2RlLm5hbWUudmFsdWVdO1xuICB9IC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0IChOb3QgcmVhY2hhYmxlLiBBbGwgcG9zc2libGUgdmFsdWUgbm9kZXMgaGF2ZSBiZWVuIGNvbnNpZGVyZWQpXG5cblxuICBmYWxzZSB8fCBpbnZhcmlhbnQoMCwgJ1VuZXhwZWN0ZWQgdmFsdWUgbm9kZTogJyArIGluc3BlY3QodmFsdWVOb2RlKSk7XG59XG4iLCJmdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTsgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IHsgS2luZCB9IGZyb20gXCIuLi9sYW5ndWFnZS9raW5kcy5tanNcIjtcbmltcG9ydCB7IHZpc2l0IH0gZnJvbSBcIi4uL2xhbmd1YWdlL3Zpc2l0b3IubWpzXCI7XG5pbXBvcnQgeyBUeXBlSW5mbywgdmlzaXRXaXRoVHlwZUluZm8gfSBmcm9tIFwiLi4vdXRpbGl0aWVzL1R5cGVJbmZvLm1qc1wiO1xuXG4vKipcbiAqIEFuIGluc3RhbmNlIG9mIHRoaXMgY2xhc3MgaXMgcGFzc2VkIGFzIHRoZSBcInRoaXNcIiBjb250ZXh0IHRvIGFsbCB2YWxpZGF0b3JzLFxuICogYWxsb3dpbmcgYWNjZXNzIHRvIGNvbW1vbmx5IHVzZWZ1bCBjb250ZXh0dWFsIGluZm9ybWF0aW9uIGZyb20gd2l0aGluIGFcbiAqIHZhbGlkYXRpb24gcnVsZS5cbiAqL1xuZXhwb3J0IHZhciBBU1RWYWxpZGF0aW9uQ29udGV4dCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEFTVFZhbGlkYXRpb25Db250ZXh0KGFzdCwgb25FcnJvcikge1xuICAgIHRoaXMuX2FzdCA9IGFzdDtcbiAgICB0aGlzLl9mcmFnbWVudHMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fZnJhZ21lbnRTcHJlYWRzID0gbmV3IE1hcCgpO1xuICAgIHRoaXMuX3JlY3Vyc2l2ZWx5UmVmZXJlbmNlZEZyYWdtZW50cyA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLl9vbkVycm9yID0gb25FcnJvcjtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBBU1RWYWxpZGF0aW9uQ29udGV4dC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlcG9ydEVycm9yID0gZnVuY3Rpb24gcmVwb3J0RXJyb3IoZXJyb3IpIHtcbiAgICB0aGlzLl9vbkVycm9yKGVycm9yKTtcbiAgfTtcblxuICBfcHJvdG8uZ2V0RG9jdW1lbnQgPSBmdW5jdGlvbiBnZXREb2N1bWVudCgpIHtcbiAgICByZXR1cm4gdGhpcy5fYXN0O1xuICB9O1xuXG4gIF9wcm90by5nZXRGcmFnbWVudCA9IGZ1bmN0aW9uIGdldEZyYWdtZW50KG5hbWUpIHtcbiAgICB2YXIgZnJhZ21lbnRzID0gdGhpcy5fZnJhZ21lbnRzO1xuXG4gICAgaWYgKCFmcmFnbWVudHMpIHtcbiAgICAgIHRoaXMuX2ZyYWdtZW50cyA9IGZyYWdtZW50cyA9IHRoaXMuZ2V0RG9jdW1lbnQoKS5kZWZpbml0aW9ucy5yZWR1Y2UoZnVuY3Rpb24gKGZyYWdzLCBzdGF0ZW1lbnQpIHtcbiAgICAgICAgaWYgKHN0YXRlbWVudC5raW5kID09PSBLaW5kLkZSQUdNRU5UX0RFRklOSVRJT04pIHtcbiAgICAgICAgICBmcmFnc1tzdGF0ZW1lbnQubmFtZS52YWx1ZV0gPSBzdGF0ZW1lbnQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZnJhZ3M7XG4gICAgICB9LCBPYmplY3QuY3JlYXRlKG51bGwpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnJhZ21lbnRzW25hbWVdO1xuICB9O1xuXG4gIF9wcm90by5nZXRGcmFnbWVudFNwcmVhZHMgPSBmdW5jdGlvbiBnZXRGcmFnbWVudFNwcmVhZHMobm9kZSkge1xuICAgIHZhciBzcHJlYWRzID0gdGhpcy5fZnJhZ21lbnRTcHJlYWRzLmdldChub2RlKTtcblxuICAgIGlmICghc3ByZWFkcykge1xuICAgICAgc3ByZWFkcyA9IFtdO1xuICAgICAgdmFyIHNldHNUb1Zpc2l0ID0gW25vZGVdO1xuXG4gICAgICB3aGlsZSAoc2V0c1RvVmlzaXQubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgIHZhciBzZXQgPSBzZXRzVG9WaXNpdC5wb3AoKTtcblxuICAgICAgICBmb3IgKHZhciBfaTIgPSAwLCBfc2V0JHNlbGVjdGlvbnMyID0gc2V0LnNlbGVjdGlvbnM7IF9pMiA8IF9zZXQkc2VsZWN0aW9uczIubGVuZ3RoOyBfaTIrKykge1xuICAgICAgICAgIHZhciBzZWxlY3Rpb24gPSBfc2V0JHNlbGVjdGlvbnMyW19pMl07XG5cbiAgICAgICAgICBpZiAoc2VsZWN0aW9uLmtpbmQgPT09IEtpbmQuRlJBR01FTlRfU1BSRUFEKSB7XG4gICAgICAgICAgICBzcHJlYWRzLnB1c2goc2VsZWN0aW9uKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHNlbGVjdGlvbi5zZWxlY3Rpb25TZXQpIHtcbiAgICAgICAgICAgIHNldHNUb1Zpc2l0LnB1c2goc2VsZWN0aW9uLnNlbGVjdGlvblNldCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2ZyYWdtZW50U3ByZWFkcy5zZXQobm9kZSwgc3ByZWFkcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNwcmVhZHM7XG4gIH07XG5cbiAgX3Byb3RvLmdldFJlY3Vyc2l2ZWx5UmVmZXJlbmNlZEZyYWdtZW50cyA9IGZ1bmN0aW9uIGdldFJlY3Vyc2l2ZWx5UmVmZXJlbmNlZEZyYWdtZW50cyhvcGVyYXRpb24pIHtcbiAgICB2YXIgZnJhZ21lbnRzID0gdGhpcy5fcmVjdXJzaXZlbHlSZWZlcmVuY2VkRnJhZ21lbnRzLmdldChvcGVyYXRpb24pO1xuXG4gICAgaWYgKCFmcmFnbWVudHMpIHtcbiAgICAgIGZyYWdtZW50cyA9IFtdO1xuICAgICAgdmFyIGNvbGxlY3RlZE5hbWVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgIHZhciBub2Rlc1RvVmlzaXQgPSBbb3BlcmF0aW9uLnNlbGVjdGlvblNldF07XG5cbiAgICAgIHdoaWxlIChub2Rlc1RvVmlzaXQubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgIHZhciBub2RlID0gbm9kZXNUb1Zpc2l0LnBvcCgpO1xuXG4gICAgICAgIGZvciAodmFyIF9pNCA9IDAsIF90aGlzJGdldEZyYWdtZW50U3ByZTIgPSB0aGlzLmdldEZyYWdtZW50U3ByZWFkcyhub2RlKTsgX2k0IDwgX3RoaXMkZ2V0RnJhZ21lbnRTcHJlMi5sZW5ndGg7IF9pNCsrKSB7XG4gICAgICAgICAgdmFyIHNwcmVhZCA9IF90aGlzJGdldEZyYWdtZW50U3ByZTJbX2k0XTtcbiAgICAgICAgICB2YXIgZnJhZ05hbWUgPSBzcHJlYWQubmFtZS52YWx1ZTtcblxuICAgICAgICAgIGlmIChjb2xsZWN0ZWROYW1lc1tmcmFnTmFtZV0gIT09IHRydWUpIHtcbiAgICAgICAgICAgIGNvbGxlY3RlZE5hbWVzW2ZyYWdOYW1lXSA9IHRydWU7XG4gICAgICAgICAgICB2YXIgZnJhZ21lbnQgPSB0aGlzLmdldEZyYWdtZW50KGZyYWdOYW1lKTtcblxuICAgICAgICAgICAgaWYgKGZyYWdtZW50KSB7XG4gICAgICAgICAgICAgIGZyYWdtZW50cy5wdXNoKGZyYWdtZW50KTtcbiAgICAgICAgICAgICAgbm9kZXNUb1Zpc2l0LnB1c2goZnJhZ21lbnQuc2VsZWN0aW9uU2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5fcmVjdXJzaXZlbHlSZWZlcmVuY2VkRnJhZ21lbnRzLnNldChvcGVyYXRpb24sIGZyYWdtZW50cyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZyYWdtZW50cztcbiAgfTtcblxuICByZXR1cm4gQVNUVmFsaWRhdGlvbkNvbnRleHQ7XG59KCk7XG5leHBvcnQgdmFyIFNETFZhbGlkYXRpb25Db250ZXh0ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQVNUVmFsaWRhdGlvbkNvbnRleHQpIHtcbiAgX2luaGVyaXRzTG9vc2UoU0RMVmFsaWRhdGlvbkNvbnRleHQsIF9BU1RWYWxpZGF0aW9uQ29udGV4dCk7XG5cbiAgZnVuY3Rpb24gU0RMVmFsaWRhdGlvbkNvbnRleHQoYXN0LCBzY2hlbWEsIG9uRXJyb3IpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9BU1RWYWxpZGF0aW9uQ29udGV4dC5jYWxsKHRoaXMsIGFzdCwgb25FcnJvcikgfHwgdGhpcztcbiAgICBfdGhpcy5fc2NoZW1hID0gc2NoZW1hO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8yID0gU0RMVmFsaWRhdGlvbkNvbnRleHQucHJvdG90eXBlO1xuXG4gIF9wcm90bzIuZ2V0U2NoZW1hID0gZnVuY3Rpb24gZ2V0U2NoZW1hKCkge1xuICAgIHJldHVybiB0aGlzLl9zY2hlbWE7XG4gIH07XG5cbiAgcmV0dXJuIFNETFZhbGlkYXRpb25Db250ZXh0O1xufShBU1RWYWxpZGF0aW9uQ29udGV4dCk7XG5leHBvcnQgdmFyIFZhbGlkYXRpb25Db250ZXh0ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQVNUVmFsaWRhdGlvbkNvbnRleHQyKSB7XG4gIF9pbmhlcml0c0xvb3NlKFZhbGlkYXRpb25Db250ZXh0LCBfQVNUVmFsaWRhdGlvbkNvbnRleHQyKTtcblxuICBmdW5jdGlvbiBWYWxpZGF0aW9uQ29udGV4dChzY2hlbWEsIGFzdCwgdHlwZUluZm8sIG9uRXJyb3IpIHtcbiAgICB2YXIgX3RoaXMyO1xuXG4gICAgX3RoaXMyID0gX0FTVFZhbGlkYXRpb25Db250ZXh0Mi5jYWxsKHRoaXMsIGFzdCwgb25FcnJvcikgfHwgdGhpcztcbiAgICBfdGhpczIuX3NjaGVtYSA9IHNjaGVtYTtcbiAgICBfdGhpczIuX3R5cGVJbmZvID0gdHlwZUluZm87XG4gICAgX3RoaXMyLl92YXJpYWJsZVVzYWdlcyA9IG5ldyBNYXAoKTtcbiAgICBfdGhpczIuX3JlY3Vyc2l2ZVZhcmlhYmxlVXNhZ2VzID0gbmV3IE1hcCgpO1xuICAgIHJldHVybiBfdGhpczI7XG4gIH1cblxuICB2YXIgX3Byb3RvMyA9IFZhbGlkYXRpb25Db250ZXh0LnByb3RvdHlwZTtcblxuICBfcHJvdG8zLmdldFNjaGVtYSA9IGZ1bmN0aW9uIGdldFNjaGVtYSgpIHtcbiAgICByZXR1cm4gdGhpcy5fc2NoZW1hO1xuICB9O1xuXG4gIF9wcm90bzMuZ2V0VmFyaWFibGVVc2FnZXMgPSBmdW5jdGlvbiBnZXRWYXJpYWJsZVVzYWdlcyhub2RlKSB7XG4gICAgdmFyIHVzYWdlcyA9IHRoaXMuX3ZhcmlhYmxlVXNhZ2VzLmdldChub2RlKTtcblxuICAgIGlmICghdXNhZ2VzKSB7XG4gICAgICB2YXIgbmV3VXNhZ2VzID0gW107XG4gICAgICB2YXIgdHlwZUluZm8gPSBuZXcgVHlwZUluZm8odGhpcy5fc2NoZW1hKTtcbiAgICAgIHZpc2l0KG5vZGUsIHZpc2l0V2l0aFR5cGVJbmZvKHR5cGVJbmZvLCB7XG4gICAgICAgIFZhcmlhYmxlRGVmaW5pdGlvbjogZnVuY3Rpb24gVmFyaWFibGVEZWZpbml0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSxcbiAgICAgICAgVmFyaWFibGU6IGZ1bmN0aW9uIFZhcmlhYmxlKHZhcmlhYmxlKSB7XG4gICAgICAgICAgbmV3VXNhZ2VzLnB1c2goe1xuICAgICAgICAgICAgbm9kZTogdmFyaWFibGUsXG4gICAgICAgICAgICB0eXBlOiB0eXBlSW5mby5nZXRJbnB1dFR5cGUoKSxcbiAgICAgICAgICAgIGRlZmF1bHRWYWx1ZTogdHlwZUluZm8uZ2V0RGVmYXVsdFZhbHVlKClcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSkpO1xuICAgICAgdXNhZ2VzID0gbmV3VXNhZ2VzO1xuXG4gICAgICB0aGlzLl92YXJpYWJsZVVzYWdlcy5zZXQobm9kZSwgdXNhZ2VzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdXNhZ2VzO1xuICB9O1xuXG4gIF9wcm90bzMuZ2V0UmVjdXJzaXZlVmFyaWFibGVVc2FnZXMgPSBmdW5jdGlvbiBnZXRSZWN1cnNpdmVWYXJpYWJsZVVzYWdlcyhvcGVyYXRpb24pIHtcbiAgICB2YXIgdXNhZ2VzID0gdGhpcy5fcmVjdXJzaXZlVmFyaWFibGVVc2FnZXMuZ2V0KG9wZXJhdGlvbik7XG5cbiAgICBpZiAoIXVzYWdlcykge1xuICAgICAgdXNhZ2VzID0gdGhpcy5nZXRWYXJpYWJsZVVzYWdlcyhvcGVyYXRpb24pO1xuXG4gICAgICBmb3IgKHZhciBfaTYgPSAwLCBfdGhpcyRnZXRSZWN1cnNpdmVseVIyID0gdGhpcy5nZXRSZWN1cnNpdmVseVJlZmVyZW5jZWRGcmFnbWVudHMob3BlcmF0aW9uKTsgX2k2IDwgX3RoaXMkZ2V0UmVjdXJzaXZlbHlSMi5sZW5ndGg7IF9pNisrKSB7XG4gICAgICAgIHZhciBmcmFnID0gX3RoaXMkZ2V0UmVjdXJzaXZlbHlSMltfaTZdO1xuICAgICAgICB1c2FnZXMgPSB1c2FnZXMuY29uY2F0KHRoaXMuZ2V0VmFyaWFibGVVc2FnZXMoZnJhZykpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9yZWN1cnNpdmVWYXJpYWJsZVVzYWdlcy5zZXQob3BlcmF0aW9uLCB1c2FnZXMpO1xuICAgIH1cblxuICAgIHJldHVybiB1c2FnZXM7XG4gIH07XG5cbiAgX3Byb3RvMy5nZXRUeXBlID0gZnVuY3Rpb24gZ2V0VHlwZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdHlwZUluZm8uZ2V0VHlwZSgpO1xuICB9O1xuXG4gIF9wcm90bzMuZ2V0UGFyZW50VHlwZSA9IGZ1bmN0aW9uIGdldFBhcmVudFR5cGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3R5cGVJbmZvLmdldFBhcmVudFR5cGUoKTtcbiAgfTtcblxuICBfcHJvdG8zLmdldElucHV0VHlwZSA9IGZ1bmN0aW9uIGdldElucHV0VHlwZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdHlwZUluZm8uZ2V0SW5wdXRUeXBlKCk7XG4gIH07XG5cbiAgX3Byb3RvMy5nZXRQYXJlbnRJbnB1dFR5cGUgPSBmdW5jdGlvbiBnZXRQYXJlbnRJbnB1dFR5cGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3R5cGVJbmZvLmdldFBhcmVudElucHV0VHlwZSgpO1xuICB9O1xuXG4gIF9wcm90bzMuZ2V0RmllbGREZWYgPSBmdW5jdGlvbiBnZXRGaWVsZERlZigpIHtcbiAgICByZXR1cm4gdGhpcy5fdHlwZUluZm8uZ2V0RmllbGREZWYoKTtcbiAgfTtcblxuICBfcHJvdG8zLmdldERpcmVjdGl2ZSA9IGZ1bmN0aW9uIGdldERpcmVjdGl2ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdHlwZUluZm8uZ2V0RGlyZWN0aXZlKCk7XG4gIH07XG5cbiAgX3Byb3RvMy5nZXRBcmd1bWVudCA9IGZ1bmN0aW9uIGdldEFyZ3VtZW50KCkge1xuICAgIHJldHVybiB0aGlzLl90eXBlSW5mby5nZXRBcmd1bWVudCgpO1xuICB9O1xuXG4gIF9wcm90bzMuZ2V0RW51bVZhbHVlID0gZnVuY3Rpb24gZ2V0RW51bVZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLl90eXBlSW5mby5nZXRFbnVtVmFsdWUoKTtcbiAgfTtcblxuICByZXR1cm4gVmFsaWRhdGlvbkNvbnRleHQ7XG59KEFTVFZhbGlkYXRpb25Db250ZXh0KTtcbiIsImltcG9ydCB7IEdyYXBoUUxFcnJvciB9IGZyb20gXCIuLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IubWpzXCI7XG5pbXBvcnQgeyBLaW5kIH0gZnJvbSBcIi4uLy4uL2xhbmd1YWdlL2tpbmRzLm1qc1wiO1xuaW1wb3J0IHsgaXNFeGVjdXRhYmxlRGVmaW5pdGlvbk5vZGUgfSBmcm9tIFwiLi4vLi4vbGFuZ3VhZ2UvcHJlZGljYXRlcy5tanNcIjtcblxuLyoqXG4gKiBFeGVjdXRhYmxlIGRlZmluaXRpb25zXG4gKlxuICogQSBHcmFwaFFMIGRvY3VtZW50IGlzIG9ubHkgdmFsaWQgZm9yIGV4ZWN1dGlvbiBpZiBhbGwgZGVmaW5pdGlvbnMgYXJlIGVpdGhlclxuICogb3BlcmF0aW9uIG9yIGZyYWdtZW50IGRlZmluaXRpb25zLlxuICovXG5leHBvcnQgZnVuY3Rpb24gRXhlY3V0YWJsZURlZmluaXRpb25zUnVsZShjb250ZXh0KSB7XG4gIHJldHVybiB7XG4gICAgRG9jdW1lbnQ6IGZ1bmN0aW9uIERvY3VtZW50KG5vZGUpIHtcbiAgICAgIGZvciAodmFyIF9pMiA9IDAsIF9ub2RlJGRlZmluaXRpb25zMiA9IG5vZGUuZGVmaW5pdGlvbnM7IF9pMiA8IF9ub2RlJGRlZmluaXRpb25zMi5sZW5ndGg7IF9pMisrKSB7XG4gICAgICAgIHZhciBkZWZpbml0aW9uID0gX25vZGUkZGVmaW5pdGlvbnMyW19pMl07XG5cbiAgICAgICAgaWYgKCFpc0V4ZWN1dGFibGVEZWZpbml0aW9uTm9kZShkZWZpbml0aW9uKSkge1xuICAgICAgICAgIHZhciBkZWZOYW1lID0gZGVmaW5pdGlvbi5raW5kID09PSBLaW5kLlNDSEVNQV9ERUZJTklUSU9OIHx8IGRlZmluaXRpb24ua2luZCA9PT0gS2luZC5TQ0hFTUFfRVhURU5TSU9OID8gJ3NjaGVtYScgOiAnXCInICsgZGVmaW5pdGlvbi5uYW1lLnZhbHVlICsgJ1wiJztcbiAgICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKG5ldyBHcmFwaFFMRXJyb3IoXCJUaGUgXCIuY29uY2F0KGRlZk5hbWUsIFwiIGRlZmluaXRpb24gaXMgbm90IGV4ZWN1dGFibGUuXCIpLCBkZWZpbml0aW9uKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfTtcbn1cbiIsImltcG9ydCBhcnJheUZyb20gZnJvbSBcIi4uLy4uL3BvbHlmaWxscy9hcnJheUZyb20ubWpzXCI7XG5pbXBvcnQgZGlkWW91TWVhbiBmcm9tIFwiLi4vLi4vanN1dGlscy9kaWRZb3VNZWFuLm1qc1wiO1xuaW1wb3J0IHN1Z2dlc3Rpb25MaXN0IGZyb20gXCIuLi8uLi9qc3V0aWxzL3N1Z2dlc3Rpb25MaXN0Lm1qc1wiO1xuaW1wb3J0IG5hdHVyYWxDb21wYXJlIGZyb20gXCIuLi8uLi9qc3V0aWxzL25hdHVyYWxDb21wYXJlLm1qc1wiO1xuaW1wb3J0IHsgR3JhcGhRTEVycm9yIH0gZnJvbSBcIi4uLy4uL2Vycm9yL0dyYXBoUUxFcnJvci5tanNcIjtcbmltcG9ydCB7IGlzT2JqZWN0VHlwZSwgaXNJbnRlcmZhY2VUeXBlLCBpc0Fic3RyYWN0VHlwZSB9IGZyb20gXCIuLi8uLi90eXBlL2RlZmluaXRpb24ubWpzXCI7XG5cbi8qKlxuICogRmllbGRzIG9uIGNvcnJlY3QgdHlwZVxuICpcbiAqIEEgR3JhcGhRTCBkb2N1bWVudCBpcyBvbmx5IHZhbGlkIGlmIGFsbCBmaWVsZHMgc2VsZWN0ZWQgYXJlIGRlZmluZWQgYnkgdGhlXG4gKiBwYXJlbnQgdHlwZSwgb3IgYXJlIGFuIGFsbG93ZWQgbWV0YSBmaWVsZCBzdWNoIGFzIF9fdHlwZW5hbWUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBGaWVsZHNPbkNvcnJlY3RUeXBlUnVsZShjb250ZXh0KSB7XG4gIHJldHVybiB7XG4gICAgRmllbGQ6IGZ1bmN0aW9uIEZpZWxkKG5vZGUpIHtcbiAgICAgIHZhciB0eXBlID0gY29udGV4dC5nZXRQYXJlbnRUeXBlKCk7XG5cbiAgICAgIGlmICh0eXBlKSB7XG4gICAgICAgIHZhciBmaWVsZERlZiA9IGNvbnRleHQuZ2V0RmllbGREZWYoKTtcblxuICAgICAgICBpZiAoIWZpZWxkRGVmKSB7XG4gICAgICAgICAgLy8gVGhpcyBmaWVsZCBkb2Vzbid0IGV4aXN0LCBsZXRzIGxvb2sgZm9yIHN1Z2dlc3Rpb25zLlxuICAgICAgICAgIHZhciBzY2hlbWEgPSBjb250ZXh0LmdldFNjaGVtYSgpO1xuICAgICAgICAgIHZhciBmaWVsZE5hbWUgPSBub2RlLm5hbWUudmFsdWU7IC8vIEZpcnN0IGRldGVybWluZSBpZiB0aGVyZSBhcmUgYW55IHN1Z2dlc3RlZCB0eXBlcyB0byBjb25kaXRpb24gb24uXG5cbiAgICAgICAgICB2YXIgc3VnZ2VzdGlvbiA9IGRpZFlvdU1lYW4oJ3RvIHVzZSBhbiBpbmxpbmUgZnJhZ21lbnQgb24nLCBnZXRTdWdnZXN0ZWRUeXBlTmFtZXMoc2NoZW1hLCB0eXBlLCBmaWVsZE5hbWUpKTsgLy8gSWYgdGhlcmUgYXJlIG5vIHN1Z2dlc3RlZCB0eXBlcywgdGhlbiBwZXJoYXBzIHRoaXMgd2FzIGEgdHlwbz9cblxuICAgICAgICAgIGlmIChzdWdnZXN0aW9uID09PSAnJykge1xuICAgICAgICAgICAgc3VnZ2VzdGlvbiA9IGRpZFlvdU1lYW4oZ2V0U3VnZ2VzdGVkRmllbGROYW1lcyh0eXBlLCBmaWVsZE5hbWUpKTtcbiAgICAgICAgICB9IC8vIFJlcG9ydCBhbiBlcnJvciwgaW5jbHVkaW5nIGhlbHBmdWwgc3VnZ2VzdGlvbnMuXG5cblxuICAgICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IobmV3IEdyYXBoUUxFcnJvcihcIkNhbm5vdCBxdWVyeSBmaWVsZCBcXFwiXCIuY29uY2F0KGZpZWxkTmFtZSwgXCJcXFwiIG9uIHR5cGUgXFxcIlwiKS5jb25jYXQodHlwZS5uYW1lLCBcIlxcXCIuXCIpICsgc3VnZ2VzdGlvbiwgbm9kZSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuLyoqXG4gKiBHbyB0aHJvdWdoIGFsbCBvZiB0aGUgaW1wbGVtZW50YXRpb25zIG9mIHR5cGUsIGFzIHdlbGwgYXMgdGhlIGludGVyZmFjZXMgdGhhdFxuICogdGhleSBpbXBsZW1lbnQuIElmIGFueSBvZiB0aG9zZSB0eXBlcyBpbmNsdWRlIHRoZSBwcm92aWRlZCBmaWVsZCwgc3VnZ2VzdCB0aGVtLFxuICogc29ydGVkIGJ5IGhvdyBvZnRlbiB0aGUgdHlwZSBpcyByZWZlcmVuY2VkLlxuICovXG5cbmZ1bmN0aW9uIGdldFN1Z2dlc3RlZFR5cGVOYW1lcyhzY2hlbWEsIHR5cGUsIGZpZWxkTmFtZSkge1xuICBpZiAoIWlzQWJzdHJhY3RUeXBlKHR5cGUpKSB7XG4gICAgLy8gTXVzdCBiZSBhbiBPYmplY3QgdHlwZSwgd2hpY2ggZG9lcyBub3QgaGF2ZSBwb3NzaWJsZSBmaWVsZHMuXG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgdmFyIHN1Z2dlc3RlZFR5cGVzID0gbmV3IFNldCgpO1xuICB2YXIgdXNhZ2VDb3VudCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgZm9yICh2YXIgX2kyID0gMCwgX3NjaGVtYSRnZXRQb3NzaWJsZVR5MiA9IHNjaGVtYS5nZXRQb3NzaWJsZVR5cGVzKHR5cGUpOyBfaTIgPCBfc2NoZW1hJGdldFBvc3NpYmxlVHkyLmxlbmd0aDsgX2kyKyspIHtcbiAgICB2YXIgcG9zc2libGVUeXBlID0gX3NjaGVtYSRnZXRQb3NzaWJsZVR5MltfaTJdO1xuXG4gICAgaWYgKCFwb3NzaWJsZVR5cGUuZ2V0RmllbGRzKClbZmllbGROYW1lXSkge1xuICAgICAgY29udGludWU7XG4gICAgfSAvLyBUaGlzIG9iamVjdCB0eXBlIGRlZmluZXMgdGhpcyBmaWVsZC5cblxuXG4gICAgc3VnZ2VzdGVkVHlwZXMuYWRkKHBvc3NpYmxlVHlwZSk7XG4gICAgdXNhZ2VDb3VudFtwb3NzaWJsZVR5cGUubmFtZV0gPSAxO1xuXG4gICAgZm9yICh2YXIgX2k0ID0gMCwgX3Bvc3NpYmxlVHlwZSRnZXRJbnRlMiA9IHBvc3NpYmxlVHlwZS5nZXRJbnRlcmZhY2VzKCk7IF9pNCA8IF9wb3NzaWJsZVR5cGUkZ2V0SW50ZTIubGVuZ3RoOyBfaTQrKykge1xuICAgICAgdmFyIF91c2FnZUNvdW50JHBvc3NpYmxlSTtcblxuICAgICAgdmFyIHBvc3NpYmxlSW50ZXJmYWNlID0gX3Bvc3NpYmxlVHlwZSRnZXRJbnRlMltfaTRdO1xuXG4gICAgICBpZiAoIXBvc3NpYmxlSW50ZXJmYWNlLmdldEZpZWxkcygpW2ZpZWxkTmFtZV0pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9IC8vIFRoaXMgaW50ZXJmYWNlIHR5cGUgZGVmaW5lcyB0aGlzIGZpZWxkLlxuXG5cbiAgICAgIHN1Z2dlc3RlZFR5cGVzLmFkZChwb3NzaWJsZUludGVyZmFjZSk7XG4gICAgICB1c2FnZUNvdW50W3Bvc3NpYmxlSW50ZXJmYWNlLm5hbWVdID0gKChfdXNhZ2VDb3VudCRwb3NzaWJsZUkgPSB1c2FnZUNvdW50W3Bvc3NpYmxlSW50ZXJmYWNlLm5hbWVdKSAhPT0gbnVsbCAmJiBfdXNhZ2VDb3VudCRwb3NzaWJsZUkgIT09IHZvaWQgMCA/IF91c2FnZUNvdW50JHBvc3NpYmxlSSA6IDApICsgMTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYXJyYXlGcm9tKHN1Z2dlc3RlZFR5cGVzKS5zb3J0KGZ1bmN0aW9uICh0eXBlQSwgdHlwZUIpIHtcbiAgICAvLyBTdWdnZXN0IGJvdGggaW50ZXJmYWNlIGFuZCBvYmplY3QgdHlwZXMgYmFzZWQgb24gaG93IGNvbW1vbiB0aGV5IGFyZS5cbiAgICB2YXIgdXNhZ2VDb3VudERpZmYgPSB1c2FnZUNvdW50W3R5cGVCLm5hbWVdIC0gdXNhZ2VDb3VudFt0eXBlQS5uYW1lXTtcblxuICAgIGlmICh1c2FnZUNvdW50RGlmZiAhPT0gMCkge1xuICAgICAgcmV0dXJuIHVzYWdlQ291bnREaWZmO1xuICAgIH0gLy8gU3VnZ2VzdCBzdXBlciB0eXBlcyBmaXJzdCBmb2xsb3dlZCBieSBzdWJ0eXBlc1xuXG5cbiAgICBpZiAoaXNJbnRlcmZhY2VUeXBlKHR5cGVBKSAmJiBzY2hlbWEuaXNTdWJUeXBlKHR5cGVBLCB0eXBlQikpIHtcbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICBpZiAoaXNJbnRlcmZhY2VUeXBlKHR5cGVCKSAmJiBzY2hlbWEuaXNTdWJUeXBlKHR5cGVCLCB0eXBlQSkpIHtcbiAgICAgIHJldHVybiAxO1xuICAgIH1cblxuICAgIHJldHVybiBuYXR1cmFsQ29tcGFyZSh0eXBlQS5uYW1lLCB0eXBlQi5uYW1lKTtcbiAgfSkubWFwKGZ1bmN0aW9uICh4KSB7XG4gICAgcmV0dXJuIHgubmFtZTtcbiAgfSk7XG59XG4vKipcbiAqIEZvciB0aGUgZmllbGQgbmFtZSBwcm92aWRlZCwgZGV0ZXJtaW5lIGlmIHRoZXJlIGFyZSBhbnkgc2ltaWxhciBmaWVsZCBuYW1lc1xuICogdGhhdCBtYXkgYmUgdGhlIHJlc3VsdCBvZiBhIHR5cG8uXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRTdWdnZXN0ZWRGaWVsZE5hbWVzKHR5cGUsIGZpZWxkTmFtZSkge1xuICBpZiAoaXNPYmplY3RUeXBlKHR5cGUpIHx8IGlzSW50ZXJmYWNlVHlwZSh0eXBlKSkge1xuICAgIHZhciBwb3NzaWJsZUZpZWxkTmFtZXMgPSBPYmplY3Qua2V5cyh0eXBlLmdldEZpZWxkcygpKTtcbiAgICByZXR1cm4gc3VnZ2VzdGlvbkxpc3QoZmllbGROYW1lLCBwb3NzaWJsZUZpZWxkTmFtZXMpO1xuICB9IC8vIE90aGVyd2lzZSwgbXVzdCBiZSBhIFVuaW9uIHR5cGUsIHdoaWNoIGRvZXMgbm90IGRlZmluZSBmaWVsZHMuXG5cblxuICByZXR1cm4gW107XG59XG4iLCJpbXBvcnQgeyBHcmFwaFFMRXJyb3IgfSBmcm9tIFwiLi4vLi4vZXJyb3IvR3JhcGhRTEVycm9yLm1qc1wiO1xuaW1wb3J0IHsgcHJpbnQgfSBmcm9tIFwiLi4vLi4vbGFuZ3VhZ2UvcHJpbnRlci5tanNcIjtcbmltcG9ydCB7IGlzQ29tcG9zaXRlVHlwZSB9IGZyb20gXCIuLi8uLi90eXBlL2RlZmluaXRpb24ubWpzXCI7XG5pbXBvcnQgeyB0eXBlRnJvbUFTVCB9IGZyb20gXCIuLi8uLi91dGlsaXRpZXMvdHlwZUZyb21BU1QubWpzXCI7XG5cbi8qKlxuICogRnJhZ21lbnRzIG9uIGNvbXBvc2l0ZSB0eXBlXG4gKlxuICogRnJhZ21lbnRzIHVzZSBhIHR5cGUgY29uZGl0aW9uIHRvIGRldGVybWluZSBpZiB0aGV5IGFwcGx5LCBzaW5jZSBmcmFnbWVudHNcbiAqIGNhbiBvbmx5IGJlIHNwcmVhZCBpbnRvIGEgY29tcG9zaXRlIHR5cGUgKG9iamVjdCwgaW50ZXJmYWNlLCBvciB1bmlvbiksIHRoZVxuICogdHlwZSBjb25kaXRpb24gbXVzdCBhbHNvIGJlIGEgY29tcG9zaXRlIHR5cGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBGcmFnbWVudHNPbkNvbXBvc2l0ZVR5cGVzUnVsZShjb250ZXh0KSB7XG4gIHJldHVybiB7XG4gICAgSW5saW5lRnJhZ21lbnQ6IGZ1bmN0aW9uIElubGluZUZyYWdtZW50KG5vZGUpIHtcbiAgICAgIHZhciB0eXBlQ29uZGl0aW9uID0gbm9kZS50eXBlQ29uZGl0aW9uO1xuXG4gICAgICBpZiAodHlwZUNvbmRpdGlvbikge1xuICAgICAgICB2YXIgdHlwZSA9IHR5cGVGcm9tQVNUKGNvbnRleHQuZ2V0U2NoZW1hKCksIHR5cGVDb25kaXRpb24pO1xuXG4gICAgICAgIGlmICh0eXBlICYmICFpc0NvbXBvc2l0ZVR5cGUodHlwZSkpIHtcbiAgICAgICAgICB2YXIgdHlwZVN0ciA9IHByaW50KHR5cGVDb25kaXRpb24pO1xuICAgICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IobmV3IEdyYXBoUUxFcnJvcihcIkZyYWdtZW50IGNhbm5vdCBjb25kaXRpb24gb24gbm9uIGNvbXBvc2l0ZSB0eXBlIFxcXCJcIi5jb25jYXQodHlwZVN0ciwgXCJcXFwiLlwiKSwgdHlwZUNvbmRpdGlvbikpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBGcmFnbWVudERlZmluaXRpb246IGZ1bmN0aW9uIEZyYWdtZW50RGVmaW5pdGlvbihub2RlKSB7XG4gICAgICB2YXIgdHlwZSA9IHR5cGVGcm9tQVNUKGNvbnRleHQuZ2V0U2NoZW1hKCksIG5vZGUudHlwZUNvbmRpdGlvbik7XG5cbiAgICAgIGlmICh0eXBlICYmICFpc0NvbXBvc2l0ZVR5cGUodHlwZSkpIHtcbiAgICAgICAgdmFyIHR5cGVTdHIgPSBwcmludChub2RlLnR5cGVDb25kaXRpb24pO1xuICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKG5ldyBHcmFwaFFMRXJyb3IoXCJGcmFnbWVudCBcXFwiXCIuY29uY2F0KG5vZGUubmFtZS52YWx1ZSwgXCJcXFwiIGNhbm5vdCBjb25kaXRpb24gb24gbm9uIGNvbXBvc2l0ZSB0eXBlIFxcXCJcIikuY29uY2F0KHR5cGVTdHIsIFwiXFxcIi5cIiksIG5vZGUudHlwZUNvbmRpdGlvbikpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cbiIsImZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5pbXBvcnQgZGlkWW91TWVhbiBmcm9tIFwiLi4vLi4vanN1dGlscy9kaWRZb3VNZWFuLm1qc1wiO1xuaW1wb3J0IHN1Z2dlc3Rpb25MaXN0IGZyb20gXCIuLi8uLi9qc3V0aWxzL3N1Z2dlc3Rpb25MaXN0Lm1qc1wiO1xuaW1wb3J0IHsgR3JhcGhRTEVycm9yIH0gZnJvbSBcIi4uLy4uL2Vycm9yL0dyYXBoUUxFcnJvci5tanNcIjtcbmltcG9ydCB7IEtpbmQgfSBmcm9tIFwiLi4vLi4vbGFuZ3VhZ2Uva2luZHMubWpzXCI7XG5pbXBvcnQgeyBzcGVjaWZpZWREaXJlY3RpdmVzIH0gZnJvbSBcIi4uLy4uL3R5cGUvZGlyZWN0aXZlcy5tanNcIjtcblxuLyoqXG4gKiBLbm93biBhcmd1bWVudCBuYW1lc1xuICpcbiAqIEEgR3JhcGhRTCBmaWVsZCBpcyBvbmx5IHZhbGlkIGlmIGFsbCBzdXBwbGllZCBhcmd1bWVudHMgYXJlIGRlZmluZWQgYnlcbiAqIHRoYXQgZmllbGQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBLbm93bkFyZ3VtZW50TmFtZXNSdWxlKGNvbnRleHQpIHtcbiAgcmV0dXJuIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgS25vd25Bcmd1bWVudE5hbWVzT25EaXJlY3RpdmVzUnVsZShjb250ZXh0KSksIHt9LCB7XG4gICAgQXJndW1lbnQ6IGZ1bmN0aW9uIEFyZ3VtZW50KGFyZ05vZGUpIHtcbiAgICAgIHZhciBhcmdEZWYgPSBjb250ZXh0LmdldEFyZ3VtZW50KCk7XG4gICAgICB2YXIgZmllbGREZWYgPSBjb250ZXh0LmdldEZpZWxkRGVmKCk7XG4gICAgICB2YXIgcGFyZW50VHlwZSA9IGNvbnRleHQuZ2V0UGFyZW50VHlwZSgpO1xuXG4gICAgICBpZiAoIWFyZ0RlZiAmJiBmaWVsZERlZiAmJiBwYXJlbnRUeXBlKSB7XG4gICAgICAgIHZhciBhcmdOYW1lID0gYXJnTm9kZS5uYW1lLnZhbHVlO1xuICAgICAgICB2YXIga25vd25BcmdzTmFtZXMgPSBmaWVsZERlZi5hcmdzLm1hcChmdW5jdGlvbiAoYXJnKSB7XG4gICAgICAgICAgcmV0dXJuIGFyZy5uYW1lO1xuICAgICAgICB9KTtcbiAgICAgICAgdmFyIHN1Z2dlc3Rpb25zID0gc3VnZ2VzdGlvbkxpc3QoYXJnTmFtZSwga25vd25BcmdzTmFtZXMpO1xuICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKG5ldyBHcmFwaFFMRXJyb3IoXCJVbmtub3duIGFyZ3VtZW50IFxcXCJcIi5jb25jYXQoYXJnTmFtZSwgXCJcXFwiIG9uIGZpZWxkIFxcXCJcIikuY29uY2F0KHBhcmVudFR5cGUubmFtZSwgXCIuXCIpLmNvbmNhdChmaWVsZERlZi5uYW1lLCBcIlxcXCIuXCIpICsgZGlkWW91TWVhbihzdWdnZXN0aW9ucyksIGFyZ05vZGUpKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufVxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gS25vd25Bcmd1bWVudE5hbWVzT25EaXJlY3RpdmVzUnVsZShjb250ZXh0KSB7XG4gIHZhciBkaXJlY3RpdmVBcmdzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdmFyIHNjaGVtYSA9IGNvbnRleHQuZ2V0U2NoZW1hKCk7XG4gIHZhciBkZWZpbmVkRGlyZWN0aXZlcyA9IHNjaGVtYSA/IHNjaGVtYS5nZXREaXJlY3RpdmVzKCkgOiBzcGVjaWZpZWREaXJlY3RpdmVzO1xuXG4gIGZvciAodmFyIF9pMiA9IDA7IF9pMiA8IGRlZmluZWREaXJlY3RpdmVzLmxlbmd0aDsgX2kyKyspIHtcbiAgICB2YXIgZGlyZWN0aXZlID0gZGVmaW5lZERpcmVjdGl2ZXNbX2kyXTtcbiAgICBkaXJlY3RpdmVBcmdzW2RpcmVjdGl2ZS5uYW1lXSA9IGRpcmVjdGl2ZS5hcmdzLm1hcChmdW5jdGlvbiAoYXJnKSB7XG4gICAgICByZXR1cm4gYXJnLm5hbWU7XG4gICAgfSk7XG4gIH1cblxuICB2YXIgYXN0RGVmaW5pdGlvbnMgPSBjb250ZXh0LmdldERvY3VtZW50KCkuZGVmaW5pdGlvbnM7XG5cbiAgZm9yICh2YXIgX2k0ID0gMDsgX2k0IDwgYXN0RGVmaW5pdGlvbnMubGVuZ3RoOyBfaTQrKykge1xuICAgIHZhciBkZWYgPSBhc3REZWZpbml0aW9uc1tfaTRdO1xuXG4gICAgaWYgKGRlZi5raW5kID09PSBLaW5kLkRJUkVDVElWRV9ERUZJTklUSU9OKSB7XG4gICAgICB2YXIgX2RlZiRhcmd1bWVudHM7XG5cbiAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0IChTZWU6ICdodHRwczovL2dpdGh1Yi5jb20vZ3JhcGhxbC9ncmFwaHFsLWpzL2lzc3Vlcy8yMjAzJylcbiAgICAgIHZhciBhcmdzTm9kZXMgPSAoX2RlZiRhcmd1bWVudHMgPSBkZWYuYXJndW1lbnRzKSAhPT0gbnVsbCAmJiBfZGVmJGFyZ3VtZW50cyAhPT0gdm9pZCAwID8gX2RlZiRhcmd1bWVudHMgOiBbXTtcbiAgICAgIGRpcmVjdGl2ZUFyZ3NbZGVmLm5hbWUudmFsdWVdID0gYXJnc05vZGVzLm1hcChmdW5jdGlvbiAoYXJnKSB7XG4gICAgICAgIHJldHVybiBhcmcubmFtZS52YWx1ZTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgRGlyZWN0aXZlOiBmdW5jdGlvbiBEaXJlY3RpdmUoZGlyZWN0aXZlTm9kZSkge1xuICAgICAgdmFyIGRpcmVjdGl2ZU5hbWUgPSBkaXJlY3RpdmVOb2RlLm5hbWUudmFsdWU7XG4gICAgICB2YXIga25vd25BcmdzID0gZGlyZWN0aXZlQXJnc1tkaXJlY3RpdmVOYW1lXTtcblxuICAgICAgaWYgKGRpcmVjdGl2ZU5vZGUuYXJndW1lbnRzICYmIGtub3duQXJncykge1xuICAgICAgICBmb3IgKHZhciBfaTYgPSAwLCBfZGlyZWN0aXZlTm9kZSRhcmd1bWUyID0gZGlyZWN0aXZlTm9kZS5hcmd1bWVudHM7IF9pNiA8IF9kaXJlY3RpdmVOb2RlJGFyZ3VtZTIubGVuZ3RoOyBfaTYrKykge1xuICAgICAgICAgIHZhciBhcmdOb2RlID0gX2RpcmVjdGl2ZU5vZGUkYXJndW1lMltfaTZdO1xuICAgICAgICAgIHZhciBhcmdOYW1lID0gYXJnTm9kZS5uYW1lLnZhbHVlO1xuXG4gICAgICAgICAgaWYgKGtub3duQXJncy5pbmRleE9mKGFyZ05hbWUpID09PSAtMSkge1xuICAgICAgICAgICAgdmFyIHN1Z2dlc3Rpb25zID0gc3VnZ2VzdGlvbkxpc3QoYXJnTmFtZSwga25vd25BcmdzKTtcbiAgICAgICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IobmV3IEdyYXBoUUxFcnJvcihcIlVua25vd24gYXJndW1lbnQgXFxcIlwiLmNvbmNhdChhcmdOYW1lLCBcIlxcXCIgb24gZGlyZWN0aXZlIFxcXCJAXCIpLmNvbmNhdChkaXJlY3RpdmVOYW1lLCBcIlxcXCIuXCIpICsgZGlkWW91TWVhbihzdWdnZXN0aW9ucyksIGFyZ05vZGUpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfTtcbn1cbiIsImltcG9ydCBpbnNwZWN0IGZyb20gXCIuLi8uLi9qc3V0aWxzL2luc3BlY3QubWpzXCI7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gXCIuLi8uLi9qc3V0aWxzL2ludmFyaWFudC5tanNcIjtcbmltcG9ydCB7IEdyYXBoUUxFcnJvciB9IGZyb20gXCIuLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IubWpzXCI7XG5pbXBvcnQgeyBLaW5kIH0gZnJvbSBcIi4uLy4uL2xhbmd1YWdlL2tpbmRzLm1qc1wiO1xuaW1wb3J0IHsgRGlyZWN0aXZlTG9jYXRpb24gfSBmcm9tIFwiLi4vLi4vbGFuZ3VhZ2UvZGlyZWN0aXZlTG9jYXRpb24ubWpzXCI7XG5pbXBvcnQgeyBzcGVjaWZpZWREaXJlY3RpdmVzIH0gZnJvbSBcIi4uLy4uL3R5cGUvZGlyZWN0aXZlcy5tanNcIjtcblxuLyoqXG4gKiBLbm93biBkaXJlY3RpdmVzXG4gKlxuICogQSBHcmFwaFFMIGRvY3VtZW50IGlzIG9ubHkgdmFsaWQgaWYgYWxsIGBAZGlyZWN0aXZlc2AgYXJlIGtub3duIGJ5IHRoZVxuICogc2NoZW1hIGFuZCBsZWdhbGx5IHBvc2l0aW9uZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBLbm93bkRpcmVjdGl2ZXNSdWxlKGNvbnRleHQpIHtcbiAgdmFyIGxvY2F0aW9uc01hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHZhciBzY2hlbWEgPSBjb250ZXh0LmdldFNjaGVtYSgpO1xuICB2YXIgZGVmaW5lZERpcmVjdGl2ZXMgPSBzY2hlbWEgPyBzY2hlbWEuZ2V0RGlyZWN0aXZlcygpIDogc3BlY2lmaWVkRGlyZWN0aXZlcztcblxuICBmb3IgKHZhciBfaTIgPSAwOyBfaTIgPCBkZWZpbmVkRGlyZWN0aXZlcy5sZW5ndGg7IF9pMisrKSB7XG4gICAgdmFyIGRpcmVjdGl2ZSA9IGRlZmluZWREaXJlY3RpdmVzW19pMl07XG4gICAgbG9jYXRpb25zTWFwW2RpcmVjdGl2ZS5uYW1lXSA9IGRpcmVjdGl2ZS5sb2NhdGlvbnM7XG4gIH1cblxuICB2YXIgYXN0RGVmaW5pdGlvbnMgPSBjb250ZXh0LmdldERvY3VtZW50KCkuZGVmaW5pdGlvbnM7XG5cbiAgZm9yICh2YXIgX2k0ID0gMDsgX2k0IDwgYXN0RGVmaW5pdGlvbnMubGVuZ3RoOyBfaTQrKykge1xuICAgIHZhciBkZWYgPSBhc3REZWZpbml0aW9uc1tfaTRdO1xuXG4gICAgaWYgKGRlZi5raW5kID09PSBLaW5kLkRJUkVDVElWRV9ERUZJTklUSU9OKSB7XG4gICAgICBsb2NhdGlvbnNNYXBbZGVmLm5hbWUudmFsdWVdID0gZGVmLmxvY2F0aW9ucy5tYXAoZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIG5hbWUudmFsdWU7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIERpcmVjdGl2ZTogZnVuY3Rpb24gRGlyZWN0aXZlKG5vZGUsIF9rZXksIF9wYXJlbnQsIF9wYXRoLCBhbmNlc3RvcnMpIHtcbiAgICAgIHZhciBuYW1lID0gbm9kZS5uYW1lLnZhbHVlO1xuICAgICAgdmFyIGxvY2F0aW9ucyA9IGxvY2F0aW9uc01hcFtuYW1lXTtcblxuICAgICAgaWYgKCFsb2NhdGlvbnMpIHtcbiAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihuZXcgR3JhcGhRTEVycm9yKFwiVW5rbm93biBkaXJlY3RpdmUgXFxcIkBcIi5jb25jYXQobmFtZSwgXCJcXFwiLlwiKSwgbm9kZSkpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBjYW5kaWRhdGVMb2NhdGlvbiA9IGdldERpcmVjdGl2ZUxvY2F0aW9uRm9yQVNUUGF0aChhbmNlc3RvcnMpO1xuXG4gICAgICBpZiAoY2FuZGlkYXRlTG9jYXRpb24gJiYgbG9jYXRpb25zLmluZGV4T2YoY2FuZGlkYXRlTG9jYXRpb24pID09PSAtMSkge1xuICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKG5ldyBHcmFwaFFMRXJyb3IoXCJEaXJlY3RpdmUgXFxcIkBcIi5jb25jYXQobmFtZSwgXCJcXFwiIG1heSBub3QgYmUgdXNlZCBvbiBcIikuY29uY2F0KGNhbmRpZGF0ZUxvY2F0aW9uLCBcIi5cIiksIG5vZGUpKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldERpcmVjdGl2ZUxvY2F0aW9uRm9yQVNUUGF0aChhbmNlc3RvcnMpIHtcbiAgdmFyIGFwcGxpZWRUbyA9IGFuY2VzdG9yc1thbmNlc3RvcnMubGVuZ3RoIC0gMV07XG4gICFBcnJheS5pc0FycmF5KGFwcGxpZWRUbykgfHwgaW52YXJpYW50KDApO1xuXG4gIHN3aXRjaCAoYXBwbGllZFRvLmtpbmQpIHtcbiAgICBjYXNlIEtpbmQuT1BFUkFUSU9OX0RFRklOSVRJT046XG4gICAgICByZXR1cm4gZ2V0RGlyZWN0aXZlTG9jYXRpb25Gb3JPcGVyYXRpb24oYXBwbGllZFRvLm9wZXJhdGlvbik7XG5cbiAgICBjYXNlIEtpbmQuRklFTEQ6XG4gICAgICByZXR1cm4gRGlyZWN0aXZlTG9jYXRpb24uRklFTEQ7XG5cbiAgICBjYXNlIEtpbmQuRlJBR01FTlRfU1BSRUFEOlxuICAgICAgcmV0dXJuIERpcmVjdGl2ZUxvY2F0aW9uLkZSQUdNRU5UX1NQUkVBRDtcblxuICAgIGNhc2UgS2luZC5JTkxJTkVfRlJBR01FTlQ6XG4gICAgICByZXR1cm4gRGlyZWN0aXZlTG9jYXRpb24uSU5MSU5FX0ZSQUdNRU5UO1xuXG4gICAgY2FzZSBLaW5kLkZSQUdNRU5UX0RFRklOSVRJT046XG4gICAgICByZXR1cm4gRGlyZWN0aXZlTG9jYXRpb24uRlJBR01FTlRfREVGSU5JVElPTjtcblxuICAgIGNhc2UgS2luZC5WQVJJQUJMRV9ERUZJTklUSU9OOlxuICAgICAgcmV0dXJuIERpcmVjdGl2ZUxvY2F0aW9uLlZBUklBQkxFX0RFRklOSVRJT047XG5cbiAgICBjYXNlIEtpbmQuU0NIRU1BX0RFRklOSVRJT046XG4gICAgY2FzZSBLaW5kLlNDSEVNQV9FWFRFTlNJT046XG4gICAgICByZXR1cm4gRGlyZWN0aXZlTG9jYXRpb24uU0NIRU1BO1xuXG4gICAgY2FzZSBLaW5kLlNDQUxBUl9UWVBFX0RFRklOSVRJT046XG4gICAgY2FzZSBLaW5kLlNDQUxBUl9UWVBFX0VYVEVOU0lPTjpcbiAgICAgIHJldHVybiBEaXJlY3RpdmVMb2NhdGlvbi5TQ0FMQVI7XG5cbiAgICBjYXNlIEtpbmQuT0JKRUNUX1RZUEVfREVGSU5JVElPTjpcbiAgICBjYXNlIEtpbmQuT0JKRUNUX1RZUEVfRVhURU5TSU9OOlxuICAgICAgcmV0dXJuIERpcmVjdGl2ZUxvY2F0aW9uLk9CSkVDVDtcblxuICAgIGNhc2UgS2luZC5GSUVMRF9ERUZJTklUSU9OOlxuICAgICAgcmV0dXJuIERpcmVjdGl2ZUxvY2F0aW9uLkZJRUxEX0RFRklOSVRJT047XG5cbiAgICBjYXNlIEtpbmQuSU5URVJGQUNFX1RZUEVfREVGSU5JVElPTjpcbiAgICBjYXNlIEtpbmQuSU5URVJGQUNFX1RZUEVfRVhURU5TSU9OOlxuICAgICAgcmV0dXJuIERpcmVjdGl2ZUxvY2F0aW9uLklOVEVSRkFDRTtcblxuICAgIGNhc2UgS2luZC5VTklPTl9UWVBFX0RFRklOSVRJT046XG4gICAgY2FzZSBLaW5kLlVOSU9OX1RZUEVfRVhURU5TSU9OOlxuICAgICAgcmV0dXJuIERpcmVjdGl2ZUxvY2F0aW9uLlVOSU9OO1xuXG4gICAgY2FzZSBLaW5kLkVOVU1fVFlQRV9ERUZJTklUSU9OOlxuICAgIGNhc2UgS2luZC5FTlVNX1RZUEVfRVhURU5TSU9OOlxuICAgICAgcmV0dXJuIERpcmVjdGl2ZUxvY2F0aW9uLkVOVU07XG5cbiAgICBjYXNlIEtpbmQuRU5VTV9WQUxVRV9ERUZJTklUSU9OOlxuICAgICAgcmV0dXJuIERpcmVjdGl2ZUxvY2F0aW9uLkVOVU1fVkFMVUU7XG5cbiAgICBjYXNlIEtpbmQuSU5QVVRfT0JKRUNUX1RZUEVfREVGSU5JVElPTjpcbiAgICBjYXNlIEtpbmQuSU5QVVRfT0JKRUNUX1RZUEVfRVhURU5TSU9OOlxuICAgICAgcmV0dXJuIERpcmVjdGl2ZUxvY2F0aW9uLklOUFVUX09CSkVDVDtcblxuICAgIGNhc2UgS2luZC5JTlBVVF9WQUxVRV9ERUZJTklUSU9OOlxuICAgICAge1xuICAgICAgICB2YXIgcGFyZW50Tm9kZSA9IGFuY2VzdG9yc1thbmNlc3RvcnMubGVuZ3RoIC0gM107XG4gICAgICAgIHJldHVybiBwYXJlbnROb2RlLmtpbmQgPT09IEtpbmQuSU5QVVRfT0JKRUNUX1RZUEVfREVGSU5JVElPTiA/IERpcmVjdGl2ZUxvY2F0aW9uLklOUFVUX0ZJRUxEX0RFRklOSVRJT04gOiBEaXJlY3RpdmVMb2NhdGlvbi5BUkdVTUVOVF9ERUZJTklUSU9OO1xuICAgICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGdldERpcmVjdGl2ZUxvY2F0aW9uRm9yT3BlcmF0aW9uKG9wZXJhdGlvbikge1xuICBzd2l0Y2ggKG9wZXJhdGlvbikge1xuICAgIGNhc2UgJ3F1ZXJ5JzpcbiAgICAgIHJldHVybiBEaXJlY3RpdmVMb2NhdGlvbi5RVUVSWTtcblxuICAgIGNhc2UgJ211dGF0aW9uJzpcbiAgICAgIHJldHVybiBEaXJlY3RpdmVMb2NhdGlvbi5NVVRBVElPTjtcblxuICAgIGNhc2UgJ3N1YnNjcmlwdGlvbic6XG4gICAgICByZXR1cm4gRGlyZWN0aXZlTG9jYXRpb24uU1VCU0NSSVBUSU9OO1xuICB9IC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0IChOb3QgcmVhY2hhYmxlLiBBbGwgcG9zc2libGUgdHlwZXMgaGF2ZSBiZWVuIGNvbnNpZGVyZWQpXG5cblxuICBmYWxzZSB8fCBpbnZhcmlhbnQoMCwgJ1VuZXhwZWN0ZWQgb3BlcmF0aW9uOiAnICsgaW5zcGVjdChvcGVyYXRpb24pKTtcbn1cbiIsImltcG9ydCB7IEdyYXBoUUxFcnJvciB9IGZyb20gXCIuLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IubWpzXCI7XG5cbi8qKlxuICogS25vd24gZnJhZ21lbnQgbmFtZXNcbiAqXG4gKiBBIEdyYXBoUUwgZG9jdW1lbnQgaXMgb25seSB2YWxpZCBpZiBhbGwgYC4uLkZyYWdtZW50YCBmcmFnbWVudCBzcHJlYWRzIHJlZmVyXG4gKiB0byBmcmFnbWVudHMgZGVmaW5lZCBpbiB0aGUgc2FtZSBkb2N1bWVudC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIEtub3duRnJhZ21lbnROYW1lc1J1bGUoY29udGV4dCkge1xuICByZXR1cm4ge1xuICAgIEZyYWdtZW50U3ByZWFkOiBmdW5jdGlvbiBGcmFnbWVudFNwcmVhZChub2RlKSB7XG4gICAgICB2YXIgZnJhZ21lbnROYW1lID0gbm9kZS5uYW1lLnZhbHVlO1xuICAgICAgdmFyIGZyYWdtZW50ID0gY29udGV4dC5nZXRGcmFnbWVudChmcmFnbWVudE5hbWUpO1xuXG4gICAgICBpZiAoIWZyYWdtZW50KSB7XG4gICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IobmV3IEdyYXBoUUxFcnJvcihcIlVua25vd24gZnJhZ21lbnQgXFxcIlwiLmNvbmNhdChmcmFnbWVudE5hbWUsIFwiXFxcIi5cIiksIG5vZGUubmFtZSkpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cbiIsImltcG9ydCBkaWRZb3VNZWFuIGZyb20gXCIuLi8uLi9qc3V0aWxzL2RpZFlvdU1lYW4ubWpzXCI7XG5pbXBvcnQgc3VnZ2VzdGlvbkxpc3QgZnJvbSBcIi4uLy4uL2pzdXRpbHMvc3VnZ2VzdGlvbkxpc3QubWpzXCI7XG5pbXBvcnQgeyBHcmFwaFFMRXJyb3IgfSBmcm9tIFwiLi4vLi4vZXJyb3IvR3JhcGhRTEVycm9yLm1qc1wiO1xuaW1wb3J0IHsgaXNUeXBlRGVmaW5pdGlvbk5vZGUsIGlzVHlwZVN5c3RlbURlZmluaXRpb25Ob2RlLCBpc1R5cGVTeXN0ZW1FeHRlbnNpb25Ob2RlIH0gZnJvbSBcIi4uLy4uL2xhbmd1YWdlL3ByZWRpY2F0ZXMubWpzXCI7XG5pbXBvcnQgeyBzcGVjaWZpZWRTY2FsYXJUeXBlcyB9IGZyb20gXCIuLi8uLi90eXBlL3NjYWxhcnMubWpzXCI7XG5pbXBvcnQgeyBpbnRyb3NwZWN0aW9uVHlwZXMgfSBmcm9tIFwiLi4vLi4vdHlwZS9pbnRyb3NwZWN0aW9uLm1qc1wiO1xuXG4vKipcbiAqIEtub3duIHR5cGUgbmFtZXNcbiAqXG4gKiBBIEdyYXBoUUwgZG9jdW1lbnQgaXMgb25seSB2YWxpZCBpZiByZWZlcmVuY2VkIHR5cGVzIChzcGVjaWZpY2FsbHlcbiAqIHZhcmlhYmxlIGRlZmluaXRpb25zIGFuZCBmcmFnbWVudCBjb25kaXRpb25zKSBhcmUgZGVmaW5lZCBieSB0aGUgdHlwZSBzY2hlbWEuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBLbm93blR5cGVOYW1lc1J1bGUoY29udGV4dCkge1xuICB2YXIgc2NoZW1hID0gY29udGV4dC5nZXRTY2hlbWEoKTtcbiAgdmFyIGV4aXN0aW5nVHlwZXNNYXAgPSBzY2hlbWEgPyBzY2hlbWEuZ2V0VHlwZU1hcCgpIDogT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdmFyIGRlZmluZWRUeXBlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgZm9yICh2YXIgX2kyID0gMCwgX2NvbnRleHQkZ2V0RG9jdW1lbnQkMiA9IGNvbnRleHQuZ2V0RG9jdW1lbnQoKS5kZWZpbml0aW9uczsgX2kyIDwgX2NvbnRleHQkZ2V0RG9jdW1lbnQkMi5sZW5ndGg7IF9pMisrKSB7XG4gICAgdmFyIGRlZiA9IF9jb250ZXh0JGdldERvY3VtZW50JDJbX2kyXTtcblxuICAgIGlmIChpc1R5cGVEZWZpbml0aW9uTm9kZShkZWYpKSB7XG4gICAgICBkZWZpbmVkVHlwZXNbZGVmLm5hbWUudmFsdWVdID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICB2YXIgdHlwZU5hbWVzID0gT2JqZWN0LmtleXMoZXhpc3RpbmdUeXBlc01hcCkuY29uY2F0KE9iamVjdC5rZXlzKGRlZmluZWRUeXBlcykpO1xuICByZXR1cm4ge1xuICAgIE5hbWVkVHlwZTogZnVuY3Rpb24gTmFtZWRUeXBlKG5vZGUsIF8xLCBwYXJlbnQsIF8yLCBhbmNlc3RvcnMpIHtcbiAgICAgIHZhciB0eXBlTmFtZSA9IG5vZGUubmFtZS52YWx1ZTtcblxuICAgICAgaWYgKCFleGlzdGluZ1R5cGVzTWFwW3R5cGVOYW1lXSAmJiAhZGVmaW5lZFR5cGVzW3R5cGVOYW1lXSkge1xuICAgICAgICB2YXIgX2FuY2VzdG9ycyQ7XG5cbiAgICAgICAgdmFyIGRlZmluaXRpb25Ob2RlID0gKF9hbmNlc3RvcnMkID0gYW5jZXN0b3JzWzJdKSAhPT0gbnVsbCAmJiBfYW5jZXN0b3JzJCAhPT0gdm9pZCAwID8gX2FuY2VzdG9ycyQgOiBwYXJlbnQ7XG4gICAgICAgIHZhciBpc1NETCA9IGRlZmluaXRpb25Ob2RlICE9IG51bGwgJiYgaXNTRExOb2RlKGRlZmluaXRpb25Ob2RlKTtcblxuICAgICAgICBpZiAoaXNTREwgJiYgaXNTdGFuZGFyZFR5cGVOYW1lKHR5cGVOYW1lKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzdWdnZXN0ZWRUeXBlcyA9IHN1Z2dlc3Rpb25MaXN0KHR5cGVOYW1lLCBpc1NETCA/IHN0YW5kYXJkVHlwZU5hbWVzLmNvbmNhdCh0eXBlTmFtZXMpIDogdHlwZU5hbWVzKTtcbiAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihuZXcgR3JhcGhRTEVycm9yKFwiVW5rbm93biB0eXBlIFxcXCJcIi5jb25jYXQodHlwZU5hbWUsIFwiXFxcIi5cIikgKyBkaWRZb3VNZWFuKHN1Z2dlc3RlZFR5cGVzKSwgbm9kZSkpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cbnZhciBzdGFuZGFyZFR5cGVOYW1lcyA9IFtdLmNvbmNhdChzcGVjaWZpZWRTY2FsYXJUeXBlcywgaW50cm9zcGVjdGlvblR5cGVzKS5tYXAoZnVuY3Rpb24gKHR5cGUpIHtcbiAgcmV0dXJuIHR5cGUubmFtZTtcbn0pO1xuXG5mdW5jdGlvbiBpc1N0YW5kYXJkVHlwZU5hbWUodHlwZU5hbWUpIHtcbiAgcmV0dXJuIHN0YW5kYXJkVHlwZU5hbWVzLmluZGV4T2YodHlwZU5hbWUpICE9PSAtMTtcbn1cblxuZnVuY3Rpb24gaXNTRExOb2RlKHZhbHVlKSB7XG4gIHJldHVybiAhQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgKGlzVHlwZVN5c3RlbURlZmluaXRpb25Ob2RlKHZhbHVlKSB8fCBpc1R5cGVTeXN0ZW1FeHRlbnNpb25Ob2RlKHZhbHVlKSk7XG59XG4iLCJpbXBvcnQgeyBHcmFwaFFMRXJyb3IgfSBmcm9tIFwiLi4vLi4vZXJyb3IvR3JhcGhRTEVycm9yLm1qc1wiO1xuaW1wb3J0IHsgS2luZCB9IGZyb20gXCIuLi8uLi9sYW5ndWFnZS9raW5kcy5tanNcIjtcblxuLyoqXG4gKiBMb25lIGFub255bW91cyBvcGVyYXRpb25cbiAqXG4gKiBBIEdyYXBoUUwgZG9jdW1lbnQgaXMgb25seSB2YWxpZCBpZiB3aGVuIGl0IGNvbnRhaW5zIGFuIGFub255bW91cyBvcGVyYXRpb25cbiAqICh0aGUgcXVlcnkgc2hvcnQtaGFuZCkgdGhhdCBpdCBjb250YWlucyBvbmx5IHRoYXQgb25lIG9wZXJhdGlvbiBkZWZpbml0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gTG9uZUFub255bW91c09wZXJhdGlvblJ1bGUoY29udGV4dCkge1xuICB2YXIgb3BlcmF0aW9uQ291bnQgPSAwO1xuICByZXR1cm4ge1xuICAgIERvY3VtZW50OiBmdW5jdGlvbiBEb2N1bWVudChub2RlKSB7XG4gICAgICBvcGVyYXRpb25Db3VudCA9IG5vZGUuZGVmaW5pdGlvbnMuZmlsdGVyKGZ1bmN0aW9uIChkZWZpbml0aW9uKSB7XG4gICAgICAgIHJldHVybiBkZWZpbml0aW9uLmtpbmQgPT09IEtpbmQuT1BFUkFUSU9OX0RFRklOSVRJT047XG4gICAgICB9KS5sZW5ndGg7XG4gICAgfSxcbiAgICBPcGVyYXRpb25EZWZpbml0aW9uOiBmdW5jdGlvbiBPcGVyYXRpb25EZWZpbml0aW9uKG5vZGUpIHtcbiAgICAgIGlmICghbm9kZS5uYW1lICYmIG9wZXJhdGlvbkNvdW50ID4gMSkge1xuICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKG5ldyBHcmFwaFFMRXJyb3IoJ1RoaXMgYW5vbnltb3VzIG9wZXJhdGlvbiBtdXN0IGJlIHRoZSBvbmx5IGRlZmluZWQgb3BlcmF0aW9uLicsIG5vZGUpKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG4iLCJpbXBvcnQgeyBHcmFwaFFMRXJyb3IgfSBmcm9tIFwiLi4vLi4vZXJyb3IvR3JhcGhRTEVycm9yLm1qc1wiO1xuXG4vKipcbiAqIExvbmUgU2NoZW1hIGRlZmluaXRpb25cbiAqXG4gKiBBIEdyYXBoUUwgZG9jdW1lbnQgaXMgb25seSB2YWxpZCBpZiBpdCBjb250YWlucyBvbmx5IG9uZSBzY2hlbWEgZGVmaW5pdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIExvbmVTY2hlbWFEZWZpbml0aW9uUnVsZShjb250ZXh0KSB7XG4gIHZhciBfcmVmLCBfcmVmMiwgX29sZFNjaGVtYSRhc3ROb2RlO1xuXG4gIHZhciBvbGRTY2hlbWEgPSBjb250ZXh0LmdldFNjaGVtYSgpO1xuICB2YXIgYWxyZWFkeURlZmluZWQgPSAoX3JlZiA9IChfcmVmMiA9IChfb2xkU2NoZW1hJGFzdE5vZGUgPSBvbGRTY2hlbWEgPT09IG51bGwgfHwgb2xkU2NoZW1hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvbGRTY2hlbWEuYXN0Tm9kZSkgIT09IG51bGwgJiYgX29sZFNjaGVtYSRhc3ROb2RlICE9PSB2b2lkIDAgPyBfb2xkU2NoZW1hJGFzdE5vZGUgOiBvbGRTY2hlbWEgPT09IG51bGwgfHwgb2xkU2NoZW1hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvbGRTY2hlbWEuZ2V0UXVlcnlUeXBlKCkpICE9PSBudWxsICYmIF9yZWYyICE9PSB2b2lkIDAgPyBfcmVmMiA6IG9sZFNjaGVtYSA9PT0gbnVsbCB8fCBvbGRTY2hlbWEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9sZFNjaGVtYS5nZXRNdXRhdGlvblR5cGUoKSkgIT09IG51bGwgJiYgX3JlZiAhPT0gdm9pZCAwID8gX3JlZiA6IG9sZFNjaGVtYSA9PT0gbnVsbCB8fCBvbGRTY2hlbWEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9sZFNjaGVtYS5nZXRTdWJzY3JpcHRpb25UeXBlKCk7XG4gIHZhciBzY2hlbWFEZWZpbml0aW9uc0NvdW50ID0gMDtcbiAgcmV0dXJuIHtcbiAgICBTY2hlbWFEZWZpbml0aW9uOiBmdW5jdGlvbiBTY2hlbWFEZWZpbml0aW9uKG5vZGUpIHtcbiAgICAgIGlmIChhbHJlYWR5RGVmaW5lZCkge1xuICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKG5ldyBHcmFwaFFMRXJyb3IoJ0Nhbm5vdCBkZWZpbmUgYSBuZXcgc2NoZW1hIHdpdGhpbiBhIHNjaGVtYSBleHRlbnNpb24uJywgbm9kZSkpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChzY2hlbWFEZWZpbml0aW9uc0NvdW50ID4gMCkge1xuICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKG5ldyBHcmFwaFFMRXJyb3IoJ011c3QgcHJvdmlkZSBvbmx5IG9uZSBzY2hlbWEgZGVmaW5pdGlvbi4nLCBub2RlKSk7XG4gICAgICB9XG5cbiAgICAgICsrc2NoZW1hRGVmaW5pdGlvbnNDb3VudDtcbiAgICB9XG4gIH07XG59XG4iLCJpbXBvcnQgeyBHcmFwaFFMRXJyb3IgfSBmcm9tIFwiLi4vLi4vZXJyb3IvR3JhcGhRTEVycm9yLm1qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIE5vRnJhZ21lbnRDeWNsZXNSdWxlKGNvbnRleHQpIHtcbiAgLy8gVHJhY2tzIGFscmVhZHkgdmlzaXRlZCBmcmFnbWVudHMgdG8gbWFpbnRhaW4gTyhOKSBhbmQgdG8gZW5zdXJlIHRoYXQgY3ljbGVzXG4gIC8vIGFyZSBub3QgcmVkdW5kYW50bHkgcmVwb3J0ZWQuXG4gIHZhciB2aXNpdGVkRnJhZ3MgPSBPYmplY3QuY3JlYXRlKG51bGwpOyAvLyBBcnJheSBvZiBBU1Qgbm9kZXMgdXNlZCB0byBwcm9kdWNlIG1lYW5pbmdmdWwgZXJyb3JzXG5cbiAgdmFyIHNwcmVhZFBhdGggPSBbXTsgLy8gUG9zaXRpb24gaW4gdGhlIHNwcmVhZCBwYXRoXG5cbiAgdmFyIHNwcmVhZFBhdGhJbmRleEJ5TmFtZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHJldHVybiB7XG4gICAgT3BlcmF0aW9uRGVmaW5pdGlvbjogZnVuY3Rpb24gT3BlcmF0aW9uRGVmaW5pdGlvbigpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuICAgIEZyYWdtZW50RGVmaW5pdGlvbjogZnVuY3Rpb24gRnJhZ21lbnREZWZpbml0aW9uKG5vZGUpIHtcbiAgICAgIGRldGVjdEN5Y2xlUmVjdXJzaXZlKG5vZGUpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfTsgLy8gVGhpcyBkb2VzIGEgc3RyYWlnaHQtZm9yd2FyZCBERlMgdG8gZmluZCBjeWNsZXMuXG4gIC8vIEl0IGRvZXMgbm90IHRlcm1pbmF0ZSB3aGVuIGEgY3ljbGUgd2FzIGZvdW5kIGJ1dCBjb250aW51ZXMgdG8gZXhwbG9yZVxuICAvLyB0aGUgZ3JhcGggdG8gZmluZCBhbGwgcG9zc2libGUgY3ljbGVzLlxuXG4gIGZ1bmN0aW9uIGRldGVjdEN5Y2xlUmVjdXJzaXZlKGZyYWdtZW50KSB7XG4gICAgaWYgKHZpc2l0ZWRGcmFnc1tmcmFnbWVudC5uYW1lLnZhbHVlXSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBmcmFnbWVudE5hbWUgPSBmcmFnbWVudC5uYW1lLnZhbHVlO1xuICAgIHZpc2l0ZWRGcmFnc1tmcmFnbWVudE5hbWVdID0gdHJ1ZTtcbiAgICB2YXIgc3ByZWFkTm9kZXMgPSBjb250ZXh0LmdldEZyYWdtZW50U3ByZWFkcyhmcmFnbWVudC5zZWxlY3Rpb25TZXQpO1xuXG4gICAgaWYgKHNwcmVhZE5vZGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHNwcmVhZFBhdGhJbmRleEJ5TmFtZVtmcmFnbWVudE5hbWVdID0gc3ByZWFkUGF0aC5sZW5ndGg7XG5cbiAgICBmb3IgKHZhciBfaTIgPSAwOyBfaTIgPCBzcHJlYWROb2Rlcy5sZW5ndGg7IF9pMisrKSB7XG4gICAgICB2YXIgc3ByZWFkTm9kZSA9IHNwcmVhZE5vZGVzW19pMl07XG4gICAgICB2YXIgc3ByZWFkTmFtZSA9IHNwcmVhZE5vZGUubmFtZS52YWx1ZTtcbiAgICAgIHZhciBjeWNsZUluZGV4ID0gc3ByZWFkUGF0aEluZGV4QnlOYW1lW3NwcmVhZE5hbWVdO1xuICAgICAgc3ByZWFkUGF0aC5wdXNoKHNwcmVhZE5vZGUpO1xuXG4gICAgICBpZiAoY3ljbGVJbmRleCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHZhciBzcHJlYWRGcmFnbWVudCA9IGNvbnRleHQuZ2V0RnJhZ21lbnQoc3ByZWFkTmFtZSk7XG5cbiAgICAgICAgaWYgKHNwcmVhZEZyYWdtZW50KSB7XG4gICAgICAgICAgZGV0ZWN0Q3ljbGVSZWN1cnNpdmUoc3ByZWFkRnJhZ21lbnQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgY3ljbGVQYXRoID0gc3ByZWFkUGF0aC5zbGljZShjeWNsZUluZGV4KTtcbiAgICAgICAgdmFyIHZpYVBhdGggPSBjeWNsZVBhdGguc2xpY2UoMCwgLTEpLm1hcChmdW5jdGlvbiAocykge1xuICAgICAgICAgIHJldHVybiAnXCInICsgcy5uYW1lLnZhbHVlICsgJ1wiJztcbiAgICAgICAgfSkuam9pbignLCAnKTtcbiAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihuZXcgR3JhcGhRTEVycm9yKFwiQ2Fubm90IHNwcmVhZCBmcmFnbWVudCBcXFwiXCIuY29uY2F0KHNwcmVhZE5hbWUsIFwiXFxcIiB3aXRoaW4gaXRzZWxmXCIpICsgKHZpYVBhdGggIT09ICcnID8gXCIgdmlhIFwiLmNvbmNhdCh2aWFQYXRoLCBcIi5cIikgOiAnLicpLCBjeWNsZVBhdGgpKTtcbiAgICAgIH1cblxuICAgICAgc3ByZWFkUGF0aC5wb3AoKTtcbiAgICB9XG5cbiAgICBzcHJlYWRQYXRoSW5kZXhCeU5hbWVbZnJhZ21lbnROYW1lXSA9IHVuZGVmaW5lZDtcbiAgfVxufVxuIiwiaW1wb3J0IHsgR3JhcGhRTEVycm9yIH0gZnJvbSBcIi4uLy4uL2Vycm9yL0dyYXBoUUxFcnJvci5tanNcIjtcblxuLyoqXG4gKiBObyB1bmRlZmluZWQgdmFyaWFibGVzXG4gKlxuICogQSBHcmFwaFFMIG9wZXJhdGlvbiBpcyBvbmx5IHZhbGlkIGlmIGFsbCB2YXJpYWJsZXMgZW5jb3VudGVyZWQsIGJvdGggZGlyZWN0bHlcbiAqIGFuZCB2aWEgZnJhZ21lbnQgc3ByZWFkcywgYXJlIGRlZmluZWQgYnkgdGhhdCBvcGVyYXRpb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBOb1VuZGVmaW5lZFZhcmlhYmxlc1J1bGUoY29udGV4dCkge1xuICB2YXIgdmFyaWFibGVOYW1lRGVmaW5lZCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHJldHVybiB7XG4gICAgT3BlcmF0aW9uRGVmaW5pdGlvbjoge1xuICAgICAgZW50ZXI6IGZ1bmN0aW9uIGVudGVyKCkge1xuICAgICAgICB2YXJpYWJsZU5hbWVEZWZpbmVkID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgIH0sXG4gICAgICBsZWF2ZTogZnVuY3Rpb24gbGVhdmUob3BlcmF0aW9uKSB7XG4gICAgICAgIHZhciB1c2FnZXMgPSBjb250ZXh0LmdldFJlY3Vyc2l2ZVZhcmlhYmxlVXNhZ2VzKG9wZXJhdGlvbik7XG5cbiAgICAgICAgZm9yICh2YXIgX2kyID0gMDsgX2kyIDwgdXNhZ2VzLmxlbmd0aDsgX2kyKyspIHtcbiAgICAgICAgICB2YXIgX3JlZjIgPSB1c2FnZXNbX2kyXTtcbiAgICAgICAgICB2YXIgbm9kZSA9IF9yZWYyLm5vZGU7XG4gICAgICAgICAgdmFyIHZhck5hbWUgPSBub2RlLm5hbWUudmFsdWU7XG5cbiAgICAgICAgICBpZiAodmFyaWFibGVOYW1lRGVmaW5lZFt2YXJOYW1lXSAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihuZXcgR3JhcGhRTEVycm9yKG9wZXJhdGlvbi5uYW1lID8gXCJWYXJpYWJsZSBcXFwiJFwiLmNvbmNhdCh2YXJOYW1lLCBcIlxcXCIgaXMgbm90IGRlZmluZWQgYnkgb3BlcmF0aW9uIFxcXCJcIikuY29uY2F0KG9wZXJhdGlvbi5uYW1lLnZhbHVlLCBcIlxcXCIuXCIpIDogXCJWYXJpYWJsZSBcXFwiJFwiLmNvbmNhdCh2YXJOYW1lLCBcIlxcXCIgaXMgbm90IGRlZmluZWQuXCIpLCBbbm9kZSwgb3BlcmF0aW9uXSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgVmFyaWFibGVEZWZpbml0aW9uOiBmdW5jdGlvbiBWYXJpYWJsZURlZmluaXRpb24obm9kZSkge1xuICAgICAgdmFyaWFibGVOYW1lRGVmaW5lZFtub2RlLnZhcmlhYmxlLm5hbWUudmFsdWVdID0gdHJ1ZTtcbiAgICB9XG4gIH07XG59XG4iLCJpbXBvcnQgeyBHcmFwaFFMRXJyb3IgfSBmcm9tIFwiLi4vLi4vZXJyb3IvR3JhcGhRTEVycm9yLm1qc1wiO1xuXG4vKipcbiAqIE5vIHVudXNlZCBmcmFnbWVudHNcbiAqXG4gKiBBIEdyYXBoUUwgZG9jdW1lbnQgaXMgb25seSB2YWxpZCBpZiBhbGwgZnJhZ21lbnQgZGVmaW5pdGlvbnMgYXJlIHNwcmVhZFxuICogd2l0aGluIG9wZXJhdGlvbnMsIG9yIHNwcmVhZCB3aXRoaW4gb3RoZXIgZnJhZ21lbnRzIHNwcmVhZCB3aXRoaW4gb3BlcmF0aW9ucy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIE5vVW51c2VkRnJhZ21lbnRzUnVsZShjb250ZXh0KSB7XG4gIHZhciBvcGVyYXRpb25EZWZzID0gW107XG4gIHZhciBmcmFnbWVudERlZnMgPSBbXTtcbiAgcmV0dXJuIHtcbiAgICBPcGVyYXRpb25EZWZpbml0aW9uOiBmdW5jdGlvbiBPcGVyYXRpb25EZWZpbml0aW9uKG5vZGUpIHtcbiAgICAgIG9wZXJhdGlvbkRlZnMucHVzaChub2RlKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuICAgIEZyYWdtZW50RGVmaW5pdGlvbjogZnVuY3Rpb24gRnJhZ21lbnREZWZpbml0aW9uKG5vZGUpIHtcbiAgICAgIGZyYWdtZW50RGVmcy5wdXNoKG5vZGUpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG4gICAgRG9jdW1lbnQ6IHtcbiAgICAgIGxlYXZlOiBmdW5jdGlvbiBsZWF2ZSgpIHtcbiAgICAgICAgdmFyIGZyYWdtZW50TmFtZVVzZWQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gICAgICAgIGZvciAodmFyIF9pMiA9IDA7IF9pMiA8IG9wZXJhdGlvbkRlZnMubGVuZ3RoOyBfaTIrKykge1xuICAgICAgICAgIHZhciBvcGVyYXRpb24gPSBvcGVyYXRpb25EZWZzW19pMl07XG5cbiAgICAgICAgICBmb3IgKHZhciBfaTQgPSAwLCBfY29udGV4dCRnZXRSZWN1cnNpdmUyID0gY29udGV4dC5nZXRSZWN1cnNpdmVseVJlZmVyZW5jZWRGcmFnbWVudHMob3BlcmF0aW9uKTsgX2k0IDwgX2NvbnRleHQkZ2V0UmVjdXJzaXZlMi5sZW5ndGg7IF9pNCsrKSB7XG4gICAgICAgICAgICB2YXIgZnJhZ21lbnQgPSBfY29udGV4dCRnZXRSZWN1cnNpdmUyW19pNF07XG4gICAgICAgICAgICBmcmFnbWVudE5hbWVVc2VkW2ZyYWdtZW50Lm5hbWUudmFsdWVdID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBfaTYgPSAwOyBfaTYgPCBmcmFnbWVudERlZnMubGVuZ3RoOyBfaTYrKykge1xuICAgICAgICAgIHZhciBmcmFnbWVudERlZiA9IGZyYWdtZW50RGVmc1tfaTZdO1xuICAgICAgICAgIHZhciBmcmFnTmFtZSA9IGZyYWdtZW50RGVmLm5hbWUudmFsdWU7XG5cbiAgICAgICAgICBpZiAoZnJhZ21lbnROYW1lVXNlZFtmcmFnTmFtZV0gIT09IHRydWUpIHtcbiAgICAgICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IobmV3IEdyYXBoUUxFcnJvcihcIkZyYWdtZW50IFxcXCJcIi5jb25jYXQoZnJhZ05hbWUsIFwiXFxcIiBpcyBuZXZlciB1c2VkLlwiKSwgZnJhZ21lbnREZWYpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG4iLCJpbXBvcnQgeyBHcmFwaFFMRXJyb3IgfSBmcm9tIFwiLi4vLi4vZXJyb3IvR3JhcGhRTEVycm9yLm1qc1wiO1xuXG4vKipcbiAqIE5vIHVudXNlZCB2YXJpYWJsZXNcbiAqXG4gKiBBIEdyYXBoUUwgb3BlcmF0aW9uIGlzIG9ubHkgdmFsaWQgaWYgYWxsIHZhcmlhYmxlcyBkZWZpbmVkIGJ5IGFuIG9wZXJhdGlvblxuICogYXJlIHVzZWQsIGVpdGhlciBkaXJlY3RseSBvciB3aXRoaW4gYSBzcHJlYWQgZnJhZ21lbnQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBOb1VudXNlZFZhcmlhYmxlc1J1bGUoY29udGV4dCkge1xuICB2YXIgdmFyaWFibGVEZWZzID0gW107XG4gIHJldHVybiB7XG4gICAgT3BlcmF0aW9uRGVmaW5pdGlvbjoge1xuICAgICAgZW50ZXI6IGZ1bmN0aW9uIGVudGVyKCkge1xuICAgICAgICB2YXJpYWJsZURlZnMgPSBbXTtcbiAgICAgIH0sXG4gICAgICBsZWF2ZTogZnVuY3Rpb24gbGVhdmUob3BlcmF0aW9uKSB7XG4gICAgICAgIHZhciB2YXJpYWJsZU5hbWVVc2VkID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgdmFyIHVzYWdlcyA9IGNvbnRleHQuZ2V0UmVjdXJzaXZlVmFyaWFibGVVc2FnZXMob3BlcmF0aW9uKTtcblxuICAgICAgICBmb3IgKHZhciBfaTIgPSAwOyBfaTIgPCB1c2FnZXMubGVuZ3RoOyBfaTIrKykge1xuICAgICAgICAgIHZhciBfcmVmMiA9IHVzYWdlc1tfaTJdO1xuICAgICAgICAgIHZhciBub2RlID0gX3JlZjIubm9kZTtcbiAgICAgICAgICB2YXJpYWJsZU5hbWVVc2VkW25vZGUubmFtZS52YWx1ZV0gPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgX2k0ID0gMCwgX3ZhcmlhYmxlRGVmczIgPSB2YXJpYWJsZURlZnM7IF9pNCA8IF92YXJpYWJsZURlZnMyLmxlbmd0aDsgX2k0KyspIHtcbiAgICAgICAgICB2YXIgdmFyaWFibGVEZWYgPSBfdmFyaWFibGVEZWZzMltfaTRdO1xuICAgICAgICAgIHZhciB2YXJpYWJsZU5hbWUgPSB2YXJpYWJsZURlZi52YXJpYWJsZS5uYW1lLnZhbHVlO1xuXG4gICAgICAgICAgaWYgKHZhcmlhYmxlTmFtZVVzZWRbdmFyaWFibGVOYW1lXSAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihuZXcgR3JhcGhRTEVycm9yKG9wZXJhdGlvbi5uYW1lID8gXCJWYXJpYWJsZSBcXFwiJFwiLmNvbmNhdCh2YXJpYWJsZU5hbWUsIFwiXFxcIiBpcyBuZXZlciB1c2VkIGluIG9wZXJhdGlvbiBcXFwiXCIpLmNvbmNhdChvcGVyYXRpb24ubmFtZS52YWx1ZSwgXCJcXFwiLlwiKSA6IFwiVmFyaWFibGUgXFxcIiRcIi5jb25jYXQodmFyaWFibGVOYW1lLCBcIlxcXCIgaXMgbmV2ZXIgdXNlZC5cIiksIHZhcmlhYmxlRGVmKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBWYXJpYWJsZURlZmluaXRpb246IGZ1bmN0aW9uIFZhcmlhYmxlRGVmaW5pdGlvbihkZWYpIHtcbiAgICAgIHZhcmlhYmxlRGVmcy5wdXNoKGRlZik7XG4gICAgfVxuICB9O1xufVxuIiwiaW1wb3J0IGZpbmQgZnJvbSBcIi4uLy4uL3BvbHlmaWxscy9maW5kLm1qc1wiO1xuaW1wb3J0IG9iamVjdEVudHJpZXMgZnJvbSBcIi4uLy4uL3BvbHlmaWxscy9vYmplY3RFbnRyaWVzLm1qc1wiO1xuaW1wb3J0IGluc3BlY3QgZnJvbSBcIi4uLy4uL2pzdXRpbHMvaW5zcGVjdC5tanNcIjtcbmltcG9ydCB7IEdyYXBoUUxFcnJvciB9IGZyb20gXCIuLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IubWpzXCI7XG5pbXBvcnQgeyBLaW5kIH0gZnJvbSBcIi4uLy4uL2xhbmd1YWdlL2tpbmRzLm1qc1wiO1xuaW1wb3J0IHsgcHJpbnQgfSBmcm9tIFwiLi4vLi4vbGFuZ3VhZ2UvcHJpbnRlci5tanNcIjtcbmltcG9ydCB7IGdldE5hbWVkVHlwZSwgaXNOb25OdWxsVHlwZSwgaXNMZWFmVHlwZSwgaXNPYmplY3RUeXBlLCBpc0xpc3RUeXBlLCBpc0ludGVyZmFjZVR5cGUgfSBmcm9tIFwiLi4vLi4vdHlwZS9kZWZpbml0aW9uLm1qc1wiO1xuaW1wb3J0IHsgdHlwZUZyb21BU1QgfSBmcm9tIFwiLi4vLi4vdXRpbGl0aWVzL3R5cGVGcm9tQVNULm1qc1wiO1xuXG5mdW5jdGlvbiByZWFzb25NZXNzYWdlKHJlYXNvbikge1xuICBpZiAoQXJyYXkuaXNBcnJheShyZWFzb24pKSB7XG4gICAgcmV0dXJuIHJlYXNvbi5tYXAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgIHZhciByZXNwb25zZU5hbWUgPSBfcmVmWzBdLFxuICAgICAgICAgIHN1YlJlYXNvbiA9IF9yZWZbMV07XG4gICAgICByZXR1cm4gXCJzdWJmaWVsZHMgXFxcIlwiLmNvbmNhdChyZXNwb25zZU5hbWUsIFwiXFxcIiBjb25mbGljdCBiZWNhdXNlIFwiKSArIHJlYXNvbk1lc3NhZ2Uoc3ViUmVhc29uKTtcbiAgICB9KS5qb2luKCcgYW5kICcpO1xuICB9XG5cbiAgcmV0dXJuIHJlYXNvbjtcbn1cbi8qKlxuICogT3ZlcmxhcHBpbmcgZmllbGRzIGNhbiBiZSBtZXJnZWRcbiAqXG4gKiBBIHNlbGVjdGlvbiBzZXQgaXMgb25seSB2YWxpZCBpZiBhbGwgZmllbGRzIChpbmNsdWRpbmcgc3ByZWFkaW5nIGFueVxuICogZnJhZ21lbnRzKSBlaXRoZXIgY29ycmVzcG9uZCB0byBkaXN0aW5jdCByZXNwb25zZSBuYW1lcyBvciBjYW4gYmUgbWVyZ2VkXG4gKiB3aXRob3V0IGFtYmlndWl0eS5cbiAqL1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBPdmVybGFwcGluZ0ZpZWxkc0NhbkJlTWVyZ2VkUnVsZShjb250ZXh0KSB7XG4gIC8vIEEgbWVtb2l6YXRpb24gZm9yIHdoZW4gdHdvIGZyYWdtZW50cyBhcmUgY29tcGFyZWQgXCJiZXR3ZWVuXCIgZWFjaCBvdGhlciBmb3JcbiAgLy8gY29uZmxpY3RzLiBUd28gZnJhZ21lbnRzIG1heSBiZSBjb21wYXJlZCBtYW55IHRpbWVzLCBzbyBtZW1vaXppbmcgdGhpcyBjYW5cbiAgLy8gZHJhbWF0aWNhbGx5IGltcHJvdmUgdGhlIHBlcmZvcm1hbmNlIG9mIHRoaXMgdmFsaWRhdG9yLlxuICB2YXIgY29tcGFyZWRGcmFnbWVudFBhaXJzID0gbmV3IFBhaXJTZXQoKTsgLy8gQSBjYWNoZSBmb3IgdGhlIFwiZmllbGQgbWFwXCIgYW5kIGxpc3Qgb2YgZnJhZ21lbnQgbmFtZXMgZm91bmQgaW4gYW55IGdpdmVuXG4gIC8vIHNlbGVjdGlvbiBzZXQuIFNlbGVjdGlvbiBzZXRzIG1heSBiZSBhc2tlZCBmb3IgdGhpcyBpbmZvcm1hdGlvbiBtdWx0aXBsZVxuICAvLyB0aW1lcywgc28gdGhpcyBpbXByb3ZlcyB0aGUgcGVyZm9ybWFuY2Ugb2YgdGhpcyB2YWxpZGF0b3IuXG5cbiAgdmFyIGNhY2hlZEZpZWxkc0FuZEZyYWdtZW50TmFtZXMgPSBuZXcgTWFwKCk7XG4gIHJldHVybiB7XG4gICAgU2VsZWN0aW9uU2V0OiBmdW5jdGlvbiBTZWxlY3Rpb25TZXQoc2VsZWN0aW9uU2V0KSB7XG4gICAgICB2YXIgY29uZmxpY3RzID0gZmluZENvbmZsaWN0c1dpdGhpblNlbGVjdGlvblNldChjb250ZXh0LCBjYWNoZWRGaWVsZHNBbmRGcmFnbWVudE5hbWVzLCBjb21wYXJlZEZyYWdtZW50UGFpcnMsIGNvbnRleHQuZ2V0UGFyZW50VHlwZSgpLCBzZWxlY3Rpb25TZXQpO1xuXG4gICAgICBmb3IgKHZhciBfaTIgPSAwOyBfaTIgPCBjb25mbGljdHMubGVuZ3RoOyBfaTIrKykge1xuICAgICAgICB2YXIgX3JlZjMgPSBjb25mbGljdHNbX2kyXTtcbiAgICAgICAgdmFyIF9yZWYyJCA9IF9yZWYzWzBdO1xuICAgICAgICB2YXIgcmVzcG9uc2VOYW1lID0gX3JlZjIkWzBdO1xuICAgICAgICB2YXIgcmVhc29uID0gX3JlZjIkWzFdO1xuICAgICAgICB2YXIgZmllbGRzMSA9IF9yZWYzWzFdO1xuICAgICAgICB2YXIgZmllbGRzMiA9IF9yZWYzWzJdO1xuICAgICAgICB2YXIgcmVhc29uTXNnID0gcmVhc29uTWVzc2FnZShyZWFzb24pO1xuICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKG5ldyBHcmFwaFFMRXJyb3IoXCJGaWVsZHMgXFxcIlwiLmNvbmNhdChyZXNwb25zZU5hbWUsIFwiXFxcIiBjb25mbGljdCBiZWNhdXNlIFwiKS5jb25jYXQocmVhc29uTXNnLCBcIi4gVXNlIGRpZmZlcmVudCBhbGlhc2VzIG9uIHRoZSBmaWVsZHMgdG8gZmV0Y2ggYm90aCBpZiB0aGlzIHdhcyBpbnRlbnRpb25hbC5cIiksIGZpZWxkczEuY29uY2F0KGZpZWxkczIpKSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuXG4vKipcbiAqIEFsZ29yaXRobTpcbiAqXG4gKiBDb25mbGljdHMgb2NjdXIgd2hlbiB0d28gZmllbGRzIGV4aXN0IGluIGEgcXVlcnkgd2hpY2ggd2lsbCBwcm9kdWNlIHRoZSBzYW1lXG4gKiByZXNwb25zZSBuYW1lLCBidXQgcmVwcmVzZW50IGRpZmZlcmluZyB2YWx1ZXMsIHRodXMgY3JlYXRpbmcgYSBjb25mbGljdC5cbiAqIFRoZSBhbGdvcml0aG0gYmVsb3cgZmluZHMgYWxsIGNvbmZsaWN0cyB2aWEgbWFraW5nIGEgc2VyaWVzIG9mIGNvbXBhcmlzb25zXG4gKiBiZXR3ZWVuIGZpZWxkcy4gSW4gb3JkZXIgdG8gY29tcGFyZSBhcyBmZXcgZmllbGRzIGFzIHBvc3NpYmxlLCB0aGlzIG1ha2VzXG4gKiBhIHNlcmllcyBvZiBjb21wYXJpc29ucyBcIndpdGhpblwiIHNldHMgb2YgZmllbGRzIGFuZCBcImJldHdlZW5cIiBzZXRzIG9mIGZpZWxkcy5cbiAqXG4gKiBHaXZlbiBhbnkgc2VsZWN0aW9uIHNldCwgYSBjb2xsZWN0aW9uIHByb2R1Y2VzIGJvdGggYSBzZXQgb2YgZmllbGRzIGJ5XG4gKiBhbHNvIGluY2x1ZGluZyBhbGwgaW5saW5lIGZyYWdtZW50cywgYXMgd2VsbCBhcyBhIGxpc3Qgb2YgZnJhZ21lbnRzXG4gKiByZWZlcmVuY2VkIGJ5IGZyYWdtZW50IHNwcmVhZHMuXG4gKlxuICogQSkgRWFjaCBzZWxlY3Rpb24gc2V0IHJlcHJlc2VudGVkIGluIHRoZSBkb2N1bWVudCBmaXJzdCBjb21wYXJlcyBcIndpdGhpblwiIGl0c1xuICogY29sbGVjdGVkIHNldCBvZiBmaWVsZHMsIGZpbmRpbmcgYW55IGNvbmZsaWN0cyBiZXR3ZWVuIGV2ZXJ5IHBhaXIgb2ZcbiAqIG92ZXJsYXBwaW5nIGZpZWxkcy5cbiAqIE5vdGU6IFRoaXMgaXMgdGhlICpvbmx5IHRpbWUqIHRoYXQgYSB0aGUgZmllbGRzIFwid2l0aGluXCIgYSBzZXQgYXJlIGNvbXBhcmVkXG4gKiB0byBlYWNoIG90aGVyLiBBZnRlciB0aGlzIG9ubHkgZmllbGRzIFwiYmV0d2VlblwiIHNldHMgYXJlIGNvbXBhcmVkLlxuICpcbiAqIEIpIEFsc28sIGlmIGFueSBmcmFnbWVudCBpcyByZWZlcmVuY2VkIGluIGEgc2VsZWN0aW9uIHNldCwgdGhlbiBhXG4gKiBjb21wYXJpc29uIGlzIG1hZGUgXCJiZXR3ZWVuXCIgdGhlIG9yaWdpbmFsIHNldCBvZiBmaWVsZHMgYW5kIHRoZVxuICogcmVmZXJlbmNlZCBmcmFnbWVudC5cbiAqXG4gKiBDKSBBbHNvLCBpZiBtdWx0aXBsZSBmcmFnbWVudHMgYXJlIHJlZmVyZW5jZWQsIHRoZW4gY29tcGFyaXNvbnNcbiAqIGFyZSBtYWRlIFwiYmV0d2VlblwiIGVhY2ggcmVmZXJlbmNlZCBmcmFnbWVudC5cbiAqXG4gKiBEKSBXaGVuIGNvbXBhcmluZyBcImJldHdlZW5cIiBhIHNldCBvZiBmaWVsZHMgYW5kIGEgcmVmZXJlbmNlZCBmcmFnbWVudCwgZmlyc3RcbiAqIGEgY29tcGFyaXNvbiBpcyBtYWRlIGJldHdlZW4gZWFjaCBmaWVsZCBpbiB0aGUgb3JpZ2luYWwgc2V0IG9mIGZpZWxkcyBhbmRcbiAqIGVhY2ggZmllbGQgaW4gdGhlIHRoZSByZWZlcmVuY2VkIHNldCBvZiBmaWVsZHMuXG4gKlxuICogRSkgQWxzbywgaWYgYW55IGZyYWdtZW50IGlzIHJlZmVyZW5jZWQgaW4gdGhlIHJlZmVyZW5jZWQgc2VsZWN0aW9uIHNldCxcbiAqIHRoZW4gYSBjb21wYXJpc29uIGlzIG1hZGUgXCJiZXR3ZWVuXCIgdGhlIG9yaWdpbmFsIHNldCBvZiBmaWVsZHMgYW5kIHRoZVxuICogcmVmZXJlbmNlZCBmcmFnbWVudCAocmVjdXJzaXZlbHkgcmVmZXJyaW5nIHRvIHN0ZXAgRCkuXG4gKlxuICogRikgV2hlbiBjb21wYXJpbmcgXCJiZXR3ZWVuXCIgdHdvIGZyYWdtZW50cywgZmlyc3QgYSBjb21wYXJpc29uIGlzIG1hZGUgYmV0d2VlblxuICogZWFjaCBmaWVsZCBpbiB0aGUgZmlyc3QgcmVmZXJlbmNlZCBzZXQgb2YgZmllbGRzIGFuZCBlYWNoIGZpZWxkIGluIHRoZSB0aGVcbiAqIHNlY29uZCByZWZlcmVuY2VkIHNldCBvZiBmaWVsZHMuXG4gKlxuICogRykgQWxzbywgYW55IGZyYWdtZW50cyByZWZlcmVuY2VkIGJ5IHRoZSBmaXJzdCBtdXN0IGJlIGNvbXBhcmVkIHRvIHRoZVxuICogc2Vjb25kLCBhbmQgYW55IGZyYWdtZW50cyByZWZlcmVuY2VkIGJ5IHRoZSBzZWNvbmQgbXVzdCBiZSBjb21wYXJlZCB0byB0aGVcbiAqIGZpcnN0IChyZWN1cnNpdmVseSByZWZlcnJpbmcgdG8gc3RlcCBGKS5cbiAqXG4gKiBIKSBXaGVuIGNvbXBhcmluZyB0d28gZmllbGRzLCBpZiBib3RoIGhhdmUgc2VsZWN0aW9uIHNldHMsIHRoZW4gYSBjb21wYXJpc29uXG4gKiBpcyBtYWRlIFwiYmV0d2VlblwiIGJvdGggc2VsZWN0aW9uIHNldHMsIGZpcnN0IGNvbXBhcmluZyB0aGUgc2V0IG9mIGZpZWxkcyBpblxuICogdGhlIGZpcnN0IHNlbGVjdGlvbiBzZXQgd2l0aCB0aGUgc2V0IG9mIGZpZWxkcyBpbiB0aGUgc2Vjb25kLlxuICpcbiAqIEkpIEFsc28sIGlmIGFueSBmcmFnbWVudCBpcyByZWZlcmVuY2VkIGluIGVpdGhlciBzZWxlY3Rpb24gc2V0LCB0aGVuIGFcbiAqIGNvbXBhcmlzb24gaXMgbWFkZSBcImJldHdlZW5cIiB0aGUgb3RoZXIgc2V0IG9mIGZpZWxkcyBhbmQgdGhlXG4gKiByZWZlcmVuY2VkIGZyYWdtZW50LlxuICpcbiAqIEopIEFsc28sIGlmIHR3byBmcmFnbWVudHMgYXJlIHJlZmVyZW5jZWQgaW4gYm90aCBzZWxlY3Rpb24gc2V0cywgdGhlbiBhXG4gKiBjb21wYXJpc29uIGlzIG1hZGUgXCJiZXR3ZWVuXCIgdGhlIHR3byBmcmFnbWVudHMuXG4gKlxuICovXG4vLyBGaW5kIGFsbCBjb25mbGljdHMgZm91bmQgXCJ3aXRoaW5cIiBhIHNlbGVjdGlvbiBzZXQsIGluY2x1ZGluZyB0aG9zZSBmb3VuZFxuLy8gdmlhIHNwcmVhZGluZyBpbiBmcmFnbWVudHMuIENhbGxlZCB3aGVuIHZpc2l0aW5nIGVhY2ggU2VsZWN0aW9uU2V0IGluIHRoZVxuLy8gR3JhcGhRTCBEb2N1bWVudC5cbmZ1bmN0aW9uIGZpbmRDb25mbGljdHNXaXRoaW5TZWxlY3Rpb25TZXQoY29udGV4dCwgY2FjaGVkRmllbGRzQW5kRnJhZ21lbnROYW1lcywgY29tcGFyZWRGcmFnbWVudFBhaXJzLCBwYXJlbnRUeXBlLCBzZWxlY3Rpb25TZXQpIHtcbiAgdmFyIGNvbmZsaWN0cyA9IFtdO1xuXG4gIHZhciBfZ2V0RmllbGRzQW5kRnJhZ21lbnQgPSBnZXRGaWVsZHNBbmRGcmFnbWVudE5hbWVzKGNvbnRleHQsIGNhY2hlZEZpZWxkc0FuZEZyYWdtZW50TmFtZXMsIHBhcmVudFR5cGUsIHNlbGVjdGlvblNldCksXG4gICAgICBmaWVsZE1hcCA9IF9nZXRGaWVsZHNBbmRGcmFnbWVudFswXSxcbiAgICAgIGZyYWdtZW50TmFtZXMgPSBfZ2V0RmllbGRzQW5kRnJhZ21lbnRbMV07IC8vIChBKSBGaW5kIGZpbmQgYWxsIGNvbmZsaWN0cyBcIndpdGhpblwiIHRoZSBmaWVsZHMgb2YgdGhpcyBzZWxlY3Rpb24gc2V0LlxuICAvLyBOb3RlOiB0aGlzIGlzIHRoZSAqb25seSBwbGFjZSogYGNvbGxlY3RDb25mbGljdHNXaXRoaW5gIGlzIGNhbGxlZC5cblxuXG4gIGNvbGxlY3RDb25mbGljdHNXaXRoaW4oY29udGV4dCwgY29uZmxpY3RzLCBjYWNoZWRGaWVsZHNBbmRGcmFnbWVudE5hbWVzLCBjb21wYXJlZEZyYWdtZW50UGFpcnMsIGZpZWxkTWFwKTtcblxuICBpZiAoZnJhZ21lbnROYW1lcy5sZW5ndGggIT09IDApIHtcbiAgICAvLyAoQikgVGhlbiBjb2xsZWN0IGNvbmZsaWN0cyBiZXR3ZWVuIHRoZXNlIGZpZWxkcyBhbmQgdGhvc2UgcmVwcmVzZW50ZWQgYnlcbiAgICAvLyBlYWNoIHNwcmVhZCBmcmFnbWVudCBuYW1lIGZvdW5kLlxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZnJhZ21lbnROYW1lcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29sbGVjdENvbmZsaWN0c0JldHdlZW5GaWVsZHNBbmRGcmFnbWVudChjb250ZXh0LCBjb25mbGljdHMsIGNhY2hlZEZpZWxkc0FuZEZyYWdtZW50TmFtZXMsIGNvbXBhcmVkRnJhZ21lbnRQYWlycywgZmFsc2UsIGZpZWxkTWFwLCBmcmFnbWVudE5hbWVzW2ldKTsgLy8gKEMpIFRoZW4gY29tcGFyZSB0aGlzIGZyYWdtZW50IHdpdGggYWxsIG90aGVyIGZyYWdtZW50cyBmb3VuZCBpbiB0aGlzXG4gICAgICAvLyBzZWxlY3Rpb24gc2V0IHRvIGNvbGxlY3QgY29uZmxpY3RzIGJldHdlZW4gZnJhZ21lbnRzIHNwcmVhZCB0b2dldGhlci5cbiAgICAgIC8vIFRoaXMgY29tcGFyZXMgZWFjaCBpdGVtIGluIHRoZSBsaXN0IG9mIGZyYWdtZW50IG5hbWVzIHRvIGV2ZXJ5IG90aGVyXG4gICAgICAvLyBpdGVtIGluIHRoYXQgc2FtZSBsaXN0IChleGNlcHQgZm9yIGl0c2VsZikuXG5cbiAgICAgIGZvciAodmFyIGogPSBpICsgMTsgaiA8IGZyYWdtZW50TmFtZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgY29sbGVjdENvbmZsaWN0c0JldHdlZW5GcmFnbWVudHMoY29udGV4dCwgY29uZmxpY3RzLCBjYWNoZWRGaWVsZHNBbmRGcmFnbWVudE5hbWVzLCBjb21wYXJlZEZyYWdtZW50UGFpcnMsIGZhbHNlLCBmcmFnbWVudE5hbWVzW2ldLCBmcmFnbWVudE5hbWVzW2pdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gY29uZmxpY3RzO1xufSAvLyBDb2xsZWN0IGFsbCBjb25mbGljdHMgZm91bmQgYmV0d2VlbiBhIHNldCBvZiBmaWVsZHMgYW5kIGEgZnJhZ21lbnQgcmVmZXJlbmNlXG4vLyBpbmNsdWRpbmcgdmlhIHNwcmVhZGluZyBpbiBhbnkgbmVzdGVkIGZyYWdtZW50cy5cblxuXG5mdW5jdGlvbiBjb2xsZWN0Q29uZmxpY3RzQmV0d2VlbkZpZWxkc0FuZEZyYWdtZW50KGNvbnRleHQsIGNvbmZsaWN0cywgY2FjaGVkRmllbGRzQW5kRnJhZ21lbnROYW1lcywgY29tcGFyZWRGcmFnbWVudFBhaXJzLCBhcmVNdXR1YWxseUV4Y2x1c2l2ZSwgZmllbGRNYXAsIGZyYWdtZW50TmFtZSkge1xuICB2YXIgZnJhZ21lbnQgPSBjb250ZXh0LmdldEZyYWdtZW50KGZyYWdtZW50TmFtZSk7XG5cbiAgaWYgKCFmcmFnbWVudCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBfZ2V0UmVmZXJlbmNlZEZpZWxkc0EgPSBnZXRSZWZlcmVuY2VkRmllbGRzQW5kRnJhZ21lbnROYW1lcyhjb250ZXh0LCBjYWNoZWRGaWVsZHNBbmRGcmFnbWVudE5hbWVzLCBmcmFnbWVudCksXG4gICAgICBmaWVsZE1hcDIgPSBfZ2V0UmVmZXJlbmNlZEZpZWxkc0FbMF0sXG4gICAgICBmcmFnbWVudE5hbWVzMiA9IF9nZXRSZWZlcmVuY2VkRmllbGRzQVsxXTsgLy8gRG8gbm90IGNvbXBhcmUgYSBmcmFnbWVudCdzIGZpZWxkTWFwIHRvIGl0c2VsZi5cblxuXG4gIGlmIChmaWVsZE1hcCA9PT0gZmllbGRNYXAyKSB7XG4gICAgcmV0dXJuO1xuICB9IC8vIChEKSBGaXJzdCBjb2xsZWN0IGFueSBjb25mbGljdHMgYmV0d2VlbiB0aGUgcHJvdmlkZWQgY29sbGVjdGlvbiBvZiBmaWVsZHNcbiAgLy8gYW5kIHRoZSBjb2xsZWN0aW9uIG9mIGZpZWxkcyByZXByZXNlbnRlZCBieSB0aGUgZ2l2ZW4gZnJhZ21lbnQuXG5cblxuICBjb2xsZWN0Q29uZmxpY3RzQmV0d2Vlbihjb250ZXh0LCBjb25mbGljdHMsIGNhY2hlZEZpZWxkc0FuZEZyYWdtZW50TmFtZXMsIGNvbXBhcmVkRnJhZ21lbnRQYWlycywgYXJlTXV0dWFsbHlFeGNsdXNpdmUsIGZpZWxkTWFwLCBmaWVsZE1hcDIpOyAvLyAoRSkgVGhlbiBjb2xsZWN0IGFueSBjb25mbGljdHMgYmV0d2VlbiB0aGUgcHJvdmlkZWQgY29sbGVjdGlvbiBvZiBmaWVsZHNcbiAgLy8gYW5kIGFueSBmcmFnbWVudCBuYW1lcyBmb3VuZCBpbiB0aGUgZ2l2ZW4gZnJhZ21lbnQuXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBmcmFnbWVudE5hbWVzMi5sZW5ndGg7IGkrKykge1xuICAgIGNvbGxlY3RDb25mbGljdHNCZXR3ZWVuRmllbGRzQW5kRnJhZ21lbnQoY29udGV4dCwgY29uZmxpY3RzLCBjYWNoZWRGaWVsZHNBbmRGcmFnbWVudE5hbWVzLCBjb21wYXJlZEZyYWdtZW50UGFpcnMsIGFyZU11dHVhbGx5RXhjbHVzaXZlLCBmaWVsZE1hcCwgZnJhZ21lbnROYW1lczJbaV0pO1xuICB9XG59IC8vIENvbGxlY3QgYWxsIGNvbmZsaWN0cyBmb3VuZCBiZXR3ZWVuIHR3byBmcmFnbWVudHMsIGluY2x1ZGluZyB2aWEgc3ByZWFkaW5nIGluXG4vLyBhbnkgbmVzdGVkIGZyYWdtZW50cy5cblxuXG5mdW5jdGlvbiBjb2xsZWN0Q29uZmxpY3RzQmV0d2VlbkZyYWdtZW50cyhjb250ZXh0LCBjb25mbGljdHMsIGNhY2hlZEZpZWxkc0FuZEZyYWdtZW50TmFtZXMsIGNvbXBhcmVkRnJhZ21lbnRQYWlycywgYXJlTXV0dWFsbHlFeGNsdXNpdmUsIGZyYWdtZW50TmFtZTEsIGZyYWdtZW50TmFtZTIpIHtcbiAgLy8gTm8gbmVlZCB0byBjb21wYXJlIGEgZnJhZ21lbnQgdG8gaXRzZWxmLlxuICBpZiAoZnJhZ21lbnROYW1lMSA9PT0gZnJhZ21lbnROYW1lMikge1xuICAgIHJldHVybjtcbiAgfSAvLyBNZW1vaXplIHNvIHR3byBmcmFnbWVudHMgYXJlIG5vdCBjb21wYXJlZCBmb3IgY29uZmxpY3RzIG1vcmUgdGhhbiBvbmNlLlxuXG5cbiAgaWYgKGNvbXBhcmVkRnJhZ21lbnRQYWlycy5oYXMoZnJhZ21lbnROYW1lMSwgZnJhZ21lbnROYW1lMiwgYXJlTXV0dWFsbHlFeGNsdXNpdmUpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29tcGFyZWRGcmFnbWVudFBhaXJzLmFkZChmcmFnbWVudE5hbWUxLCBmcmFnbWVudE5hbWUyLCBhcmVNdXR1YWxseUV4Y2x1c2l2ZSk7XG4gIHZhciBmcmFnbWVudDEgPSBjb250ZXh0LmdldEZyYWdtZW50KGZyYWdtZW50TmFtZTEpO1xuICB2YXIgZnJhZ21lbnQyID0gY29udGV4dC5nZXRGcmFnbWVudChmcmFnbWVudE5hbWUyKTtcblxuICBpZiAoIWZyYWdtZW50MSB8fCAhZnJhZ21lbnQyKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIF9nZXRSZWZlcmVuY2VkRmllbGRzQTIgPSBnZXRSZWZlcmVuY2VkRmllbGRzQW5kRnJhZ21lbnROYW1lcyhjb250ZXh0LCBjYWNoZWRGaWVsZHNBbmRGcmFnbWVudE5hbWVzLCBmcmFnbWVudDEpLFxuICAgICAgZmllbGRNYXAxID0gX2dldFJlZmVyZW5jZWRGaWVsZHNBMlswXSxcbiAgICAgIGZyYWdtZW50TmFtZXMxID0gX2dldFJlZmVyZW5jZWRGaWVsZHNBMlsxXTtcblxuICB2YXIgX2dldFJlZmVyZW5jZWRGaWVsZHNBMyA9IGdldFJlZmVyZW5jZWRGaWVsZHNBbmRGcmFnbWVudE5hbWVzKGNvbnRleHQsIGNhY2hlZEZpZWxkc0FuZEZyYWdtZW50TmFtZXMsIGZyYWdtZW50MiksXG4gICAgICBmaWVsZE1hcDIgPSBfZ2V0UmVmZXJlbmNlZEZpZWxkc0EzWzBdLFxuICAgICAgZnJhZ21lbnROYW1lczIgPSBfZ2V0UmVmZXJlbmNlZEZpZWxkc0EzWzFdOyAvLyAoRikgRmlyc3QsIGNvbGxlY3QgYWxsIGNvbmZsaWN0cyBiZXR3ZWVuIHRoZXNlIHR3byBjb2xsZWN0aW9ucyBvZiBmaWVsZHNcbiAgLy8gKG5vdCBpbmNsdWRpbmcgYW55IG5lc3RlZCBmcmFnbWVudHMpLlxuXG5cbiAgY29sbGVjdENvbmZsaWN0c0JldHdlZW4oY29udGV4dCwgY29uZmxpY3RzLCBjYWNoZWRGaWVsZHNBbmRGcmFnbWVudE5hbWVzLCBjb21wYXJlZEZyYWdtZW50UGFpcnMsIGFyZU11dHVhbGx5RXhjbHVzaXZlLCBmaWVsZE1hcDEsIGZpZWxkTWFwMik7IC8vIChHKSBUaGVuIGNvbGxlY3QgY29uZmxpY3RzIGJldHdlZW4gdGhlIGZpcnN0IGZyYWdtZW50IGFuZCBhbnkgbmVzdGVkXG4gIC8vIGZyYWdtZW50cyBzcHJlYWQgaW4gdGhlIHNlY29uZCBmcmFnbWVudC5cblxuICBmb3IgKHZhciBqID0gMDsgaiA8IGZyYWdtZW50TmFtZXMyLmxlbmd0aDsgaisrKSB7XG4gICAgY29sbGVjdENvbmZsaWN0c0JldHdlZW5GcmFnbWVudHMoY29udGV4dCwgY29uZmxpY3RzLCBjYWNoZWRGaWVsZHNBbmRGcmFnbWVudE5hbWVzLCBjb21wYXJlZEZyYWdtZW50UGFpcnMsIGFyZU11dHVhbGx5RXhjbHVzaXZlLCBmcmFnbWVudE5hbWUxLCBmcmFnbWVudE5hbWVzMltqXSk7XG4gIH0gLy8gKEcpIFRoZW4gY29sbGVjdCBjb25mbGljdHMgYmV0d2VlbiB0aGUgc2Vjb25kIGZyYWdtZW50IGFuZCBhbnkgbmVzdGVkXG4gIC8vIGZyYWdtZW50cyBzcHJlYWQgaW4gdGhlIGZpcnN0IGZyYWdtZW50LlxuXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBmcmFnbWVudE5hbWVzMS5sZW5ndGg7IGkrKykge1xuICAgIGNvbGxlY3RDb25mbGljdHNCZXR3ZWVuRnJhZ21lbnRzKGNvbnRleHQsIGNvbmZsaWN0cywgY2FjaGVkRmllbGRzQW5kRnJhZ21lbnROYW1lcywgY29tcGFyZWRGcmFnbWVudFBhaXJzLCBhcmVNdXR1YWxseUV4Y2x1c2l2ZSwgZnJhZ21lbnROYW1lczFbaV0sIGZyYWdtZW50TmFtZTIpO1xuICB9XG59IC8vIEZpbmQgYWxsIGNvbmZsaWN0cyBmb3VuZCBiZXR3ZWVuIHR3byBzZWxlY3Rpb24gc2V0cywgaW5jbHVkaW5nIHRob3NlIGZvdW5kXG4vLyB2aWEgc3ByZWFkaW5nIGluIGZyYWdtZW50cy4gQ2FsbGVkIHdoZW4gZGV0ZXJtaW5pbmcgaWYgY29uZmxpY3RzIGV4aXN0XG4vLyBiZXR3ZWVuIHRoZSBzdWItZmllbGRzIG9mIHR3byBvdmVybGFwcGluZyBmaWVsZHMuXG5cblxuZnVuY3Rpb24gZmluZENvbmZsaWN0c0JldHdlZW5TdWJTZWxlY3Rpb25TZXRzKGNvbnRleHQsIGNhY2hlZEZpZWxkc0FuZEZyYWdtZW50TmFtZXMsIGNvbXBhcmVkRnJhZ21lbnRQYWlycywgYXJlTXV0dWFsbHlFeGNsdXNpdmUsIHBhcmVudFR5cGUxLCBzZWxlY3Rpb25TZXQxLCBwYXJlbnRUeXBlMiwgc2VsZWN0aW9uU2V0Mikge1xuICB2YXIgY29uZmxpY3RzID0gW107XG5cbiAgdmFyIF9nZXRGaWVsZHNBbmRGcmFnbWVudDIgPSBnZXRGaWVsZHNBbmRGcmFnbWVudE5hbWVzKGNvbnRleHQsIGNhY2hlZEZpZWxkc0FuZEZyYWdtZW50TmFtZXMsIHBhcmVudFR5cGUxLCBzZWxlY3Rpb25TZXQxKSxcbiAgICAgIGZpZWxkTWFwMSA9IF9nZXRGaWVsZHNBbmRGcmFnbWVudDJbMF0sXG4gICAgICBmcmFnbWVudE5hbWVzMSA9IF9nZXRGaWVsZHNBbmRGcmFnbWVudDJbMV07XG5cbiAgdmFyIF9nZXRGaWVsZHNBbmRGcmFnbWVudDMgPSBnZXRGaWVsZHNBbmRGcmFnbWVudE5hbWVzKGNvbnRleHQsIGNhY2hlZEZpZWxkc0FuZEZyYWdtZW50TmFtZXMsIHBhcmVudFR5cGUyLCBzZWxlY3Rpb25TZXQyKSxcbiAgICAgIGZpZWxkTWFwMiA9IF9nZXRGaWVsZHNBbmRGcmFnbWVudDNbMF0sXG4gICAgICBmcmFnbWVudE5hbWVzMiA9IF9nZXRGaWVsZHNBbmRGcmFnbWVudDNbMV07IC8vIChIKSBGaXJzdCwgY29sbGVjdCBhbGwgY29uZmxpY3RzIGJldHdlZW4gdGhlc2UgdHdvIGNvbGxlY3Rpb25zIG9mIGZpZWxkLlxuXG5cbiAgY29sbGVjdENvbmZsaWN0c0JldHdlZW4oY29udGV4dCwgY29uZmxpY3RzLCBjYWNoZWRGaWVsZHNBbmRGcmFnbWVudE5hbWVzLCBjb21wYXJlZEZyYWdtZW50UGFpcnMsIGFyZU11dHVhbGx5RXhjbHVzaXZlLCBmaWVsZE1hcDEsIGZpZWxkTWFwMik7IC8vIChJKSBUaGVuIGNvbGxlY3QgY29uZmxpY3RzIGJldHdlZW4gdGhlIGZpcnN0IGNvbGxlY3Rpb24gb2YgZmllbGRzIGFuZFxuICAvLyB0aG9zZSByZWZlcmVuY2VkIGJ5IGVhY2ggZnJhZ21lbnQgbmFtZSBhc3NvY2lhdGVkIHdpdGggdGhlIHNlY29uZC5cblxuICBpZiAoZnJhZ21lbnROYW1lczIubGVuZ3RoICE9PSAwKSB7XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBmcmFnbWVudE5hbWVzMi5sZW5ndGg7IGorKykge1xuICAgICAgY29sbGVjdENvbmZsaWN0c0JldHdlZW5GaWVsZHNBbmRGcmFnbWVudChjb250ZXh0LCBjb25mbGljdHMsIGNhY2hlZEZpZWxkc0FuZEZyYWdtZW50TmFtZXMsIGNvbXBhcmVkRnJhZ21lbnRQYWlycywgYXJlTXV0dWFsbHlFeGNsdXNpdmUsIGZpZWxkTWFwMSwgZnJhZ21lbnROYW1lczJbal0pO1xuICAgIH1cbiAgfSAvLyAoSSkgVGhlbiBjb2xsZWN0IGNvbmZsaWN0cyBiZXR3ZWVuIHRoZSBzZWNvbmQgY29sbGVjdGlvbiBvZiBmaWVsZHMgYW5kXG4gIC8vIHRob3NlIHJlZmVyZW5jZWQgYnkgZWFjaCBmcmFnbWVudCBuYW1lIGFzc29jaWF0ZWQgd2l0aCB0aGUgZmlyc3QuXG5cblxuICBpZiAoZnJhZ21lbnROYW1lczEubGVuZ3RoICE9PSAwKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmcmFnbWVudE5hbWVzMS5sZW5ndGg7IGkrKykge1xuICAgICAgY29sbGVjdENvbmZsaWN0c0JldHdlZW5GaWVsZHNBbmRGcmFnbWVudChjb250ZXh0LCBjb25mbGljdHMsIGNhY2hlZEZpZWxkc0FuZEZyYWdtZW50TmFtZXMsIGNvbXBhcmVkRnJhZ21lbnRQYWlycywgYXJlTXV0dWFsbHlFeGNsdXNpdmUsIGZpZWxkTWFwMiwgZnJhZ21lbnROYW1lczFbaV0pO1xuICAgIH1cbiAgfSAvLyAoSikgQWxzbyBjb2xsZWN0IGNvbmZsaWN0cyBiZXR3ZWVuIGFueSBmcmFnbWVudCBuYW1lcyBieSB0aGUgZmlyc3QgYW5kXG4gIC8vIGZyYWdtZW50IG5hbWVzIGJ5IHRoZSBzZWNvbmQuIFRoaXMgY29tcGFyZXMgZWFjaCBpdGVtIGluIHRoZSBmaXJzdCBzZXQgb2ZcbiAgLy8gbmFtZXMgdG8gZWFjaCBpdGVtIGluIHRoZSBzZWNvbmQgc2V0IG9mIG5hbWVzLlxuXG5cbiAgZm9yICh2YXIgX2kzID0gMDsgX2kzIDwgZnJhZ21lbnROYW1lczEubGVuZ3RoOyBfaTMrKykge1xuICAgIGZvciAodmFyIF9qID0gMDsgX2ogPCBmcmFnbWVudE5hbWVzMi5sZW5ndGg7IF9qKyspIHtcbiAgICAgIGNvbGxlY3RDb25mbGljdHNCZXR3ZWVuRnJhZ21lbnRzKGNvbnRleHQsIGNvbmZsaWN0cywgY2FjaGVkRmllbGRzQW5kRnJhZ21lbnROYW1lcywgY29tcGFyZWRGcmFnbWVudFBhaXJzLCBhcmVNdXR1YWxseUV4Y2x1c2l2ZSwgZnJhZ21lbnROYW1lczFbX2kzXSwgZnJhZ21lbnROYW1lczJbX2pdKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gY29uZmxpY3RzO1xufSAvLyBDb2xsZWN0IGFsbCBDb25mbGljdHMgXCJ3aXRoaW5cIiBvbmUgY29sbGVjdGlvbiBvZiBmaWVsZHMuXG5cblxuZnVuY3Rpb24gY29sbGVjdENvbmZsaWN0c1dpdGhpbihjb250ZXh0LCBjb25mbGljdHMsIGNhY2hlZEZpZWxkc0FuZEZyYWdtZW50TmFtZXMsIGNvbXBhcmVkRnJhZ21lbnRQYWlycywgZmllbGRNYXApIHtcbiAgLy8gQSBmaWVsZCBtYXAgaXMgYSBrZXllZCBjb2xsZWN0aW9uLCB3aGVyZSBlYWNoIGtleSByZXByZXNlbnRzIGEgcmVzcG9uc2VcbiAgLy8gbmFtZSBhbmQgdGhlIHZhbHVlIGF0IHRoYXQga2V5IGlzIGEgbGlzdCBvZiBhbGwgZmllbGRzIHdoaWNoIHByb3ZpZGUgdGhhdFxuICAvLyByZXNwb25zZSBuYW1lLiBGb3IgZXZlcnkgcmVzcG9uc2UgbmFtZSwgaWYgdGhlcmUgYXJlIG11bHRpcGxlIGZpZWxkcywgdGhleVxuICAvLyBtdXN0IGJlIGNvbXBhcmVkIHRvIGZpbmQgYSBwb3RlbnRpYWwgY29uZmxpY3QuXG4gIGZvciAodmFyIF9pNSA9IDAsIF9vYmplY3RFbnRyaWVzMiA9IG9iamVjdEVudHJpZXMoZmllbGRNYXApOyBfaTUgPCBfb2JqZWN0RW50cmllczIubGVuZ3RoOyBfaTUrKykge1xuICAgIHZhciBfcmVmNSA9IF9vYmplY3RFbnRyaWVzMltfaTVdO1xuICAgIHZhciByZXNwb25zZU5hbWUgPSBfcmVmNVswXTtcbiAgICB2YXIgZmllbGRzID0gX3JlZjVbMV07XG5cbiAgICAvLyBUaGlzIGNvbXBhcmVzIGV2ZXJ5IGZpZWxkIGluIHRoZSBsaXN0IHRvIGV2ZXJ5IG90aGVyIGZpZWxkIGluIHRoaXMgbGlzdFxuICAgIC8vIChleGNlcHQgdG8gaXRzZWxmKS4gSWYgdGhlIGxpc3Qgb25seSBoYXMgb25lIGl0ZW0sIG5vdGhpbmcgbmVlZHMgdG9cbiAgICAvLyBiZSBjb21wYXJlZC5cbiAgICBpZiAoZmllbGRzLmxlbmd0aCA+IDEpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZmllbGRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGZvciAodmFyIGogPSBpICsgMTsgaiA8IGZpZWxkcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgIHZhciBjb25mbGljdCA9IGZpbmRDb25mbGljdChjb250ZXh0LCBjYWNoZWRGaWVsZHNBbmRGcmFnbWVudE5hbWVzLCBjb21wYXJlZEZyYWdtZW50UGFpcnMsIGZhbHNlLCAvLyB3aXRoaW4gb25lIGNvbGxlY3Rpb24gaXMgbmV2ZXIgbXV0dWFsbHkgZXhjbHVzaXZlXG4gICAgICAgICAgcmVzcG9uc2VOYW1lLCBmaWVsZHNbaV0sIGZpZWxkc1tqXSk7XG5cbiAgICAgICAgICBpZiAoY29uZmxpY3QpIHtcbiAgICAgICAgICAgIGNvbmZsaWN0cy5wdXNoKGNvbmZsaWN0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn0gLy8gQ29sbGVjdCBhbGwgQ29uZmxpY3RzIGJldHdlZW4gdHdvIGNvbGxlY3Rpb25zIG9mIGZpZWxkcy4gVGhpcyBpcyBzaW1pbGFyIHRvLFxuLy8gYnV0IGRpZmZlcmVudCBmcm9tIHRoZSBgY29sbGVjdENvbmZsaWN0c1dpdGhpbmAgZnVuY3Rpb24gYWJvdmUuIFRoaXMgY2hlY2tcbi8vIGFzc3VtZXMgdGhhdCBgY29sbGVjdENvbmZsaWN0c1dpdGhpbmAgaGFzIGFscmVhZHkgYmVlbiBjYWxsZWQgb24gZWFjaFxuLy8gcHJvdmlkZWQgY29sbGVjdGlvbiBvZiBmaWVsZHMuIFRoaXMgaXMgdHJ1ZSBiZWNhdXNlIHRoaXMgdmFsaWRhdG9yIHRyYXZlcnNlc1xuLy8gZWFjaCBpbmRpdmlkdWFsIHNlbGVjdGlvbiBzZXQuXG5cblxuZnVuY3Rpb24gY29sbGVjdENvbmZsaWN0c0JldHdlZW4oY29udGV4dCwgY29uZmxpY3RzLCBjYWNoZWRGaWVsZHNBbmRGcmFnbWVudE5hbWVzLCBjb21wYXJlZEZyYWdtZW50UGFpcnMsIHBhcmVudEZpZWxkc0FyZU11dHVhbGx5RXhjbHVzaXZlLCBmaWVsZE1hcDEsIGZpZWxkTWFwMikge1xuICAvLyBBIGZpZWxkIG1hcCBpcyBhIGtleWVkIGNvbGxlY3Rpb24sIHdoZXJlIGVhY2gga2V5IHJlcHJlc2VudHMgYSByZXNwb25zZVxuICAvLyBuYW1lIGFuZCB0aGUgdmFsdWUgYXQgdGhhdCBrZXkgaXMgYSBsaXN0IG9mIGFsbCBmaWVsZHMgd2hpY2ggcHJvdmlkZSB0aGF0XG4gIC8vIHJlc3BvbnNlIG5hbWUuIEZvciBhbnkgcmVzcG9uc2UgbmFtZSB3aGljaCBhcHBlYXJzIGluIGJvdGggcHJvdmlkZWQgZmllbGRcbiAgLy8gbWFwcywgZWFjaCBmaWVsZCBmcm9tIHRoZSBmaXJzdCBmaWVsZCBtYXAgbXVzdCBiZSBjb21wYXJlZCB0byBldmVyeSBmaWVsZFxuICAvLyBpbiB0aGUgc2Vjb25kIGZpZWxkIG1hcCB0byBmaW5kIHBvdGVudGlhbCBjb25mbGljdHMuXG4gIGZvciAodmFyIF9pNyA9IDAsIF9PYmplY3Qka2V5czIgPSBPYmplY3Qua2V5cyhmaWVsZE1hcDEpOyBfaTcgPCBfT2JqZWN0JGtleXMyLmxlbmd0aDsgX2k3KyspIHtcbiAgICB2YXIgcmVzcG9uc2VOYW1lID0gX09iamVjdCRrZXlzMltfaTddO1xuICAgIHZhciBmaWVsZHMyID0gZmllbGRNYXAyW3Jlc3BvbnNlTmFtZV07XG5cbiAgICBpZiAoZmllbGRzMikge1xuICAgICAgdmFyIGZpZWxkczEgPSBmaWVsZE1hcDFbcmVzcG9uc2VOYW1lXTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmaWVsZHMxLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgZmllbGRzMi5sZW5ndGg7IGorKykge1xuICAgICAgICAgIHZhciBjb25mbGljdCA9IGZpbmRDb25mbGljdChjb250ZXh0LCBjYWNoZWRGaWVsZHNBbmRGcmFnbWVudE5hbWVzLCBjb21wYXJlZEZyYWdtZW50UGFpcnMsIHBhcmVudEZpZWxkc0FyZU11dHVhbGx5RXhjbHVzaXZlLCByZXNwb25zZU5hbWUsIGZpZWxkczFbaV0sIGZpZWxkczJbal0pO1xuXG4gICAgICAgICAgaWYgKGNvbmZsaWN0KSB7XG4gICAgICAgICAgICBjb25mbGljdHMucHVzaChjb25mbGljdCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59IC8vIERldGVybWluZXMgaWYgdGhlcmUgaXMgYSBjb25mbGljdCBiZXR3ZWVuIHR3byBwYXJ0aWN1bGFyIGZpZWxkcywgaW5jbHVkaW5nXG4vLyBjb21wYXJpbmcgdGhlaXIgc3ViLWZpZWxkcy5cblxuXG5mdW5jdGlvbiBmaW5kQ29uZmxpY3QoY29udGV4dCwgY2FjaGVkRmllbGRzQW5kRnJhZ21lbnROYW1lcywgY29tcGFyZWRGcmFnbWVudFBhaXJzLCBwYXJlbnRGaWVsZHNBcmVNdXR1YWxseUV4Y2x1c2l2ZSwgcmVzcG9uc2VOYW1lLCBmaWVsZDEsIGZpZWxkMikge1xuICB2YXIgcGFyZW50VHlwZTEgPSBmaWVsZDFbMF0sXG4gICAgICBub2RlMSA9IGZpZWxkMVsxXSxcbiAgICAgIGRlZjEgPSBmaWVsZDFbMl07XG4gIHZhciBwYXJlbnRUeXBlMiA9IGZpZWxkMlswXSxcbiAgICAgIG5vZGUyID0gZmllbGQyWzFdLFxuICAgICAgZGVmMiA9IGZpZWxkMlsyXTsgLy8gSWYgaXQgaXMga25vd24gdGhhdCB0d28gZmllbGRzIGNvdWxkIG5vdCBwb3NzaWJseSBhcHBseSBhdCB0aGUgc2FtZVxuICAvLyB0aW1lLCBkdWUgdG8gdGhlIHBhcmVudCB0eXBlcywgdGhlbiBpdCBpcyBzYWZlIHRvIHBlcm1pdCB0aGVtIHRvIGRpdmVyZ2VcbiAgLy8gaW4gYWxpYXNlZCBmaWVsZCBvciBhcmd1bWVudHMgdXNlZCBhcyB0aGV5IHdpbGwgbm90IHByZXNlbnQgYW55IGFtYmlndWl0eVxuICAvLyBieSBkaWZmZXJpbmcuXG4gIC8vIEl0IGlzIGtub3duIHRoYXQgdHdvIHBhcmVudCB0eXBlcyBjb3VsZCBuZXZlciBvdmVybGFwIGlmIHRoZXkgYXJlXG4gIC8vIGRpZmZlcmVudCBPYmplY3QgdHlwZXMuIEludGVyZmFjZSBvciBVbmlvbiB0eXBlcyBtaWdodCBvdmVybGFwIC0gaWYgbm90XG4gIC8vIGluIHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBzY2hlbWEsIHRoZW4gcGVyaGFwcyBpbiBzb21lIGZ1dHVyZSB2ZXJzaW9uLFxuICAvLyB0aHVzIG1heSBub3Qgc2FmZWx5IGRpdmVyZ2UuXG5cbiAgdmFyIGFyZU11dHVhbGx5RXhjbHVzaXZlID0gcGFyZW50RmllbGRzQXJlTXV0dWFsbHlFeGNsdXNpdmUgfHwgcGFyZW50VHlwZTEgIT09IHBhcmVudFR5cGUyICYmIGlzT2JqZWN0VHlwZShwYXJlbnRUeXBlMSkgJiYgaXNPYmplY3RUeXBlKHBhcmVudFR5cGUyKTtcblxuICBpZiAoIWFyZU11dHVhbGx5RXhjbHVzaXZlKSB7XG4gICAgdmFyIF9ub2RlMSRhcmd1bWVudHMsIF9ub2RlMiRhcmd1bWVudHM7XG5cbiAgICAvLyBUd28gYWxpYXNlcyBtdXN0IHJlZmVyIHRvIHRoZSBzYW1lIGZpZWxkLlxuICAgIHZhciBuYW1lMSA9IG5vZGUxLm5hbWUudmFsdWU7XG4gICAgdmFyIG5hbWUyID0gbm9kZTIubmFtZS52YWx1ZTtcblxuICAgIGlmIChuYW1lMSAhPT0gbmFtZTIpIHtcbiAgICAgIHJldHVybiBbW3Jlc3BvbnNlTmFtZSwgXCJcXFwiXCIuY29uY2F0KG5hbWUxLCBcIlxcXCIgYW5kIFxcXCJcIikuY29uY2F0KG5hbWUyLCBcIlxcXCIgYXJlIGRpZmZlcmVudCBmaWVsZHNcIildLCBbbm9kZTFdLCBbbm9kZTJdXTtcbiAgICB9IC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0IChTZWU6ICdodHRwczovL2dpdGh1Yi5jb20vZ3JhcGhxbC9ncmFwaHFsLWpzL2lzc3Vlcy8yMjAzJylcblxuXG4gICAgdmFyIGFyZ3MxID0gKF9ub2RlMSRhcmd1bWVudHMgPSBub2RlMS5hcmd1bWVudHMpICE9PSBudWxsICYmIF9ub2RlMSRhcmd1bWVudHMgIT09IHZvaWQgMCA/IF9ub2RlMSRhcmd1bWVudHMgOiBbXTsgLy8gaXN0YW5idWwgaWdub3JlIG5leHQgKFNlZTogJ2h0dHBzOi8vZ2l0aHViLmNvbS9ncmFwaHFsL2dyYXBocWwtanMvaXNzdWVzLzIyMDMnKVxuXG4gICAgdmFyIGFyZ3MyID0gKF9ub2RlMiRhcmd1bWVudHMgPSBub2RlMi5hcmd1bWVudHMpICE9PSBudWxsICYmIF9ub2RlMiRhcmd1bWVudHMgIT09IHZvaWQgMCA/IF9ub2RlMiRhcmd1bWVudHMgOiBbXTsgLy8gVHdvIGZpZWxkIGNhbGxzIG11c3QgaGF2ZSB0aGUgc2FtZSBhcmd1bWVudHMuXG5cbiAgICBpZiAoIXNhbWVBcmd1bWVudHMoYXJnczEsIGFyZ3MyKSkge1xuICAgICAgcmV0dXJuIFtbcmVzcG9uc2VOYW1lLCAndGhleSBoYXZlIGRpZmZlcmluZyBhcmd1bWVudHMnXSwgW25vZGUxXSwgW25vZGUyXV07XG4gICAgfVxuICB9IC8vIFRoZSByZXR1cm4gdHlwZSBmb3IgZWFjaCBmaWVsZC5cblxuXG4gIHZhciB0eXBlMSA9IGRlZjEgPT09IG51bGwgfHwgZGVmMSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGVmMS50eXBlO1xuICB2YXIgdHlwZTIgPSBkZWYyID09PSBudWxsIHx8IGRlZjIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRlZjIudHlwZTtcblxuICBpZiAodHlwZTEgJiYgdHlwZTIgJiYgZG9UeXBlc0NvbmZsaWN0KHR5cGUxLCB0eXBlMikpIHtcbiAgICByZXR1cm4gW1tyZXNwb25zZU5hbWUsIFwidGhleSByZXR1cm4gY29uZmxpY3RpbmcgdHlwZXMgXFxcIlwiLmNvbmNhdChpbnNwZWN0KHR5cGUxKSwgXCJcXFwiIGFuZCBcXFwiXCIpLmNvbmNhdChpbnNwZWN0KHR5cGUyKSwgXCJcXFwiXCIpXSwgW25vZGUxXSwgW25vZGUyXV07XG4gIH0gLy8gQ29sbGVjdCBhbmQgY29tcGFyZSBzdWItZmllbGRzLiBVc2UgdGhlIHNhbWUgXCJ2aXNpdGVkIGZyYWdtZW50IG5hbWVzXCIgbGlzdFxuICAvLyBmb3IgYm90aCBjb2xsZWN0aW9ucyBzbyBmaWVsZHMgaW4gYSBmcmFnbWVudCByZWZlcmVuY2UgYXJlIG5ldmVyXG4gIC8vIGNvbXBhcmVkIHRvIHRoZW1zZWx2ZXMuXG5cblxuICB2YXIgc2VsZWN0aW9uU2V0MSA9IG5vZGUxLnNlbGVjdGlvblNldDtcbiAgdmFyIHNlbGVjdGlvblNldDIgPSBub2RlMi5zZWxlY3Rpb25TZXQ7XG5cbiAgaWYgKHNlbGVjdGlvblNldDEgJiYgc2VsZWN0aW9uU2V0Mikge1xuICAgIHZhciBjb25mbGljdHMgPSBmaW5kQ29uZmxpY3RzQmV0d2VlblN1YlNlbGVjdGlvblNldHMoY29udGV4dCwgY2FjaGVkRmllbGRzQW5kRnJhZ21lbnROYW1lcywgY29tcGFyZWRGcmFnbWVudFBhaXJzLCBhcmVNdXR1YWxseUV4Y2x1c2l2ZSwgZ2V0TmFtZWRUeXBlKHR5cGUxKSwgc2VsZWN0aW9uU2V0MSwgZ2V0TmFtZWRUeXBlKHR5cGUyKSwgc2VsZWN0aW9uU2V0Mik7XG4gICAgcmV0dXJuIHN1YmZpZWxkQ29uZmxpY3RzKGNvbmZsaWN0cywgcmVzcG9uc2VOYW1lLCBub2RlMSwgbm9kZTIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHNhbWVBcmd1bWVudHMoYXJndW1lbnRzMSwgYXJndW1lbnRzMikge1xuICBpZiAoYXJndW1lbnRzMS5sZW5ndGggIT09IGFyZ3VtZW50czIubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIGFyZ3VtZW50czEuZXZlcnkoZnVuY3Rpb24gKGFyZ3VtZW50MSkge1xuICAgIHZhciBhcmd1bWVudDIgPSBmaW5kKGFyZ3VtZW50czIsIGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICAgICAgcmV0dXJuIGFyZ3VtZW50Lm5hbWUudmFsdWUgPT09IGFyZ3VtZW50MS5uYW1lLnZhbHVlO1xuICAgIH0pO1xuXG4gICAgaWYgKCFhcmd1bWVudDIpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2FtZVZhbHVlKGFyZ3VtZW50MS52YWx1ZSwgYXJndW1lbnQyLnZhbHVlKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHNhbWVWYWx1ZSh2YWx1ZTEsIHZhbHVlMikge1xuICByZXR1cm4gcHJpbnQodmFsdWUxKSA9PT0gcHJpbnQodmFsdWUyKTtcbn0gLy8gVHdvIHR5cGVzIGNvbmZsaWN0IGlmIGJvdGggdHlwZXMgY291bGQgbm90IGFwcGx5IHRvIGEgdmFsdWUgc2ltdWx0YW5lb3VzbHkuXG4vLyBDb21wb3NpdGUgdHlwZXMgYXJlIGlnbm9yZWQgYXMgdGhlaXIgaW5kaXZpZHVhbCBmaWVsZCB0eXBlcyB3aWxsIGJlIGNvbXBhcmVkXG4vLyBsYXRlciByZWN1cnNpdmVseS4gSG93ZXZlciBMaXN0IGFuZCBOb24tTnVsbCB0eXBlcyBtdXN0IG1hdGNoLlxuXG5cbmZ1bmN0aW9uIGRvVHlwZXNDb25mbGljdCh0eXBlMSwgdHlwZTIpIHtcbiAgaWYgKGlzTGlzdFR5cGUodHlwZTEpKSB7XG4gICAgcmV0dXJuIGlzTGlzdFR5cGUodHlwZTIpID8gZG9UeXBlc0NvbmZsaWN0KHR5cGUxLm9mVHlwZSwgdHlwZTIub2ZUeXBlKSA6IHRydWU7XG4gIH1cblxuICBpZiAoaXNMaXN0VHlwZSh0eXBlMikpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmIChpc05vbk51bGxUeXBlKHR5cGUxKSkge1xuICAgIHJldHVybiBpc05vbk51bGxUeXBlKHR5cGUyKSA/IGRvVHlwZXNDb25mbGljdCh0eXBlMS5vZlR5cGUsIHR5cGUyLm9mVHlwZSkgOiB0cnVlO1xuICB9XG5cbiAgaWYgKGlzTm9uTnVsbFR5cGUodHlwZTIpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoaXNMZWFmVHlwZSh0eXBlMSkgfHwgaXNMZWFmVHlwZSh0eXBlMikpIHtcbiAgICByZXR1cm4gdHlwZTEgIT09IHR5cGUyO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufSAvLyBHaXZlbiBhIHNlbGVjdGlvbiBzZXQsIHJldHVybiB0aGUgY29sbGVjdGlvbiBvZiBmaWVsZHMgKGEgbWFwcGluZyBvZiByZXNwb25zZVxuLy8gbmFtZSB0byBmaWVsZCBub2RlcyBhbmQgZGVmaW5pdGlvbnMpIGFzIHdlbGwgYXMgYSBsaXN0IG9mIGZyYWdtZW50IG5hbWVzXG4vLyByZWZlcmVuY2VkIHZpYSBmcmFnbWVudCBzcHJlYWRzLlxuXG5cbmZ1bmN0aW9uIGdldEZpZWxkc0FuZEZyYWdtZW50TmFtZXMoY29udGV4dCwgY2FjaGVkRmllbGRzQW5kRnJhZ21lbnROYW1lcywgcGFyZW50VHlwZSwgc2VsZWN0aW9uU2V0KSB7XG4gIHZhciBjYWNoZWQgPSBjYWNoZWRGaWVsZHNBbmRGcmFnbWVudE5hbWVzLmdldChzZWxlY3Rpb25TZXQpO1xuXG4gIGlmICghY2FjaGVkKSB7XG4gICAgdmFyIG5vZGVBbmREZWZzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB2YXIgZnJhZ21lbnROYW1lcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgICBfY29sbGVjdEZpZWxkc0FuZEZyYWdtZW50TmFtZXMoY29udGV4dCwgcGFyZW50VHlwZSwgc2VsZWN0aW9uU2V0LCBub2RlQW5kRGVmcywgZnJhZ21lbnROYW1lcyk7XG5cbiAgICBjYWNoZWQgPSBbbm9kZUFuZERlZnMsIE9iamVjdC5rZXlzKGZyYWdtZW50TmFtZXMpXTtcbiAgICBjYWNoZWRGaWVsZHNBbmRGcmFnbWVudE5hbWVzLnNldChzZWxlY3Rpb25TZXQsIGNhY2hlZCk7XG4gIH1cblxuICByZXR1cm4gY2FjaGVkO1xufSAvLyBHaXZlbiBhIHJlZmVyZW5jZSB0byBhIGZyYWdtZW50LCByZXR1cm4gdGhlIHJlcHJlc2VudGVkIGNvbGxlY3Rpb24gb2YgZmllbGRzXG4vLyBhcyB3ZWxsIGFzIGEgbGlzdCBvZiBuZXN0ZWQgZnJhZ21lbnQgbmFtZXMgcmVmZXJlbmNlZCB2aWEgZnJhZ21lbnQgc3ByZWFkcy5cblxuXG5mdW5jdGlvbiBnZXRSZWZlcmVuY2VkRmllbGRzQW5kRnJhZ21lbnROYW1lcyhjb250ZXh0LCBjYWNoZWRGaWVsZHNBbmRGcmFnbWVudE5hbWVzLCBmcmFnbWVudCkge1xuICAvLyBTaG9ydC1jaXJjdWl0IGJ1aWxkaW5nIGEgdHlwZSBmcm9tIHRoZSBub2RlIGlmIHBvc3NpYmxlLlxuICB2YXIgY2FjaGVkID0gY2FjaGVkRmllbGRzQW5kRnJhZ21lbnROYW1lcy5nZXQoZnJhZ21lbnQuc2VsZWN0aW9uU2V0KTtcblxuICBpZiAoY2FjaGVkKSB7XG4gICAgcmV0dXJuIGNhY2hlZDtcbiAgfVxuXG4gIHZhciBmcmFnbWVudFR5cGUgPSB0eXBlRnJvbUFTVChjb250ZXh0LmdldFNjaGVtYSgpLCBmcmFnbWVudC50eXBlQ29uZGl0aW9uKTtcbiAgcmV0dXJuIGdldEZpZWxkc0FuZEZyYWdtZW50TmFtZXMoY29udGV4dCwgY2FjaGVkRmllbGRzQW5kRnJhZ21lbnROYW1lcywgZnJhZ21lbnRUeXBlLCBmcmFnbWVudC5zZWxlY3Rpb25TZXQpO1xufVxuXG5mdW5jdGlvbiBfY29sbGVjdEZpZWxkc0FuZEZyYWdtZW50TmFtZXMoY29udGV4dCwgcGFyZW50VHlwZSwgc2VsZWN0aW9uU2V0LCBub2RlQW5kRGVmcywgZnJhZ21lbnROYW1lcykge1xuICBmb3IgKHZhciBfaTkgPSAwLCBfc2VsZWN0aW9uU2V0JHNlbGVjdGkyID0gc2VsZWN0aW9uU2V0LnNlbGVjdGlvbnM7IF9pOSA8IF9zZWxlY3Rpb25TZXQkc2VsZWN0aTIubGVuZ3RoOyBfaTkrKykge1xuICAgIHZhciBzZWxlY3Rpb24gPSBfc2VsZWN0aW9uU2V0JHNlbGVjdGkyW19pOV07XG5cbiAgICBzd2l0Y2ggKHNlbGVjdGlvbi5raW5kKSB7XG4gICAgICBjYXNlIEtpbmQuRklFTEQ6XG4gICAgICAgIHtcbiAgICAgICAgICB2YXIgZmllbGROYW1lID0gc2VsZWN0aW9uLm5hbWUudmFsdWU7XG4gICAgICAgICAgdmFyIGZpZWxkRGVmID0gdm9pZCAwO1xuXG4gICAgICAgICAgaWYgKGlzT2JqZWN0VHlwZShwYXJlbnRUeXBlKSB8fCBpc0ludGVyZmFjZVR5cGUocGFyZW50VHlwZSkpIHtcbiAgICAgICAgICAgIGZpZWxkRGVmID0gcGFyZW50VHlwZS5nZXRGaWVsZHMoKVtmaWVsZE5hbWVdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciByZXNwb25zZU5hbWUgPSBzZWxlY3Rpb24uYWxpYXMgPyBzZWxlY3Rpb24uYWxpYXMudmFsdWUgOiBmaWVsZE5hbWU7XG5cbiAgICAgICAgICBpZiAoIW5vZGVBbmREZWZzW3Jlc3BvbnNlTmFtZV0pIHtcbiAgICAgICAgICAgIG5vZGVBbmREZWZzW3Jlc3BvbnNlTmFtZV0gPSBbXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBub2RlQW5kRGVmc1tyZXNwb25zZU5hbWVdLnB1c2goW3BhcmVudFR5cGUsIHNlbGVjdGlvbiwgZmllbGREZWZdKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICBjYXNlIEtpbmQuRlJBR01FTlRfU1BSRUFEOlxuICAgICAgICBmcmFnbWVudE5hbWVzW3NlbGVjdGlvbi5uYW1lLnZhbHVlXSA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIEtpbmQuSU5MSU5FX0ZSQUdNRU5UOlxuICAgICAgICB7XG4gICAgICAgICAgdmFyIHR5cGVDb25kaXRpb24gPSBzZWxlY3Rpb24udHlwZUNvbmRpdGlvbjtcbiAgICAgICAgICB2YXIgaW5saW5lRnJhZ21lbnRUeXBlID0gdHlwZUNvbmRpdGlvbiA/IHR5cGVGcm9tQVNUKGNvbnRleHQuZ2V0U2NoZW1hKCksIHR5cGVDb25kaXRpb24pIDogcGFyZW50VHlwZTtcblxuICAgICAgICAgIF9jb2xsZWN0RmllbGRzQW5kRnJhZ21lbnROYW1lcyhjb250ZXh0LCBpbmxpbmVGcmFnbWVudFR5cGUsIHNlbGVjdGlvbi5zZWxlY3Rpb25TZXQsIG5vZGVBbmREZWZzLCBmcmFnbWVudE5hbWVzKTtcblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICB9XG59IC8vIEdpdmVuIGEgc2VyaWVzIG9mIENvbmZsaWN0cyB3aGljaCBvY2N1cnJlZCBiZXR3ZWVuIHR3byBzdWItZmllbGRzLCBnZW5lcmF0ZVxuLy8gYSBzaW5nbGUgQ29uZmxpY3QuXG5cblxuZnVuY3Rpb24gc3ViZmllbGRDb25mbGljdHMoY29uZmxpY3RzLCByZXNwb25zZU5hbWUsIG5vZGUxLCBub2RlMikge1xuICBpZiAoY29uZmxpY3RzLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gW1tyZXNwb25zZU5hbWUsIGNvbmZsaWN0cy5tYXAoZnVuY3Rpb24gKF9yZWY2KSB7XG4gICAgICB2YXIgcmVhc29uID0gX3JlZjZbMF07XG4gICAgICByZXR1cm4gcmVhc29uO1xuICAgIH0pXSwgY29uZmxpY3RzLnJlZHVjZShmdW5jdGlvbiAoYWxsRmllbGRzLCBfcmVmNykge1xuICAgICAgdmFyIGZpZWxkczEgPSBfcmVmN1sxXTtcbiAgICAgIHJldHVybiBhbGxGaWVsZHMuY29uY2F0KGZpZWxkczEpO1xuICAgIH0sIFtub2RlMV0pLCBjb25mbGljdHMucmVkdWNlKGZ1bmN0aW9uIChhbGxGaWVsZHMsIF9yZWY4KSB7XG4gICAgICB2YXIgZmllbGRzMiA9IF9yZWY4WzJdO1xuICAgICAgcmV0dXJuIGFsbEZpZWxkcy5jb25jYXQoZmllbGRzMik7XG4gICAgfSwgW25vZGUyXSldO1xuICB9XG59XG4vKipcbiAqIEEgd2F5IHRvIGtlZXAgdHJhY2sgb2YgcGFpcnMgb2YgdGhpbmdzIHdoZW4gdGhlIG9yZGVyaW5nIG9mIHRoZSBwYWlyIGRvZXNcbiAqIG5vdCBtYXR0ZXIuIFdlIGRvIHRoaXMgYnkgbWFpbnRhaW5pbmcgYSBzb3J0IG9mIGRvdWJsZSBhZGphY2VuY3kgc2V0cy5cbiAqL1xuXG5cbnZhciBQYWlyU2V0ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUGFpclNldCgpIHtcbiAgICB0aGlzLl9kYXRhID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBQYWlyU2V0LnByb3RvdHlwZTtcblxuICBfcHJvdG8uaGFzID0gZnVuY3Rpb24gaGFzKGEsIGIsIGFyZU11dHVhbGx5RXhjbHVzaXZlKSB7XG4gICAgdmFyIGZpcnN0ID0gdGhpcy5fZGF0YVthXTtcbiAgICB2YXIgcmVzdWx0ID0gZmlyc3QgJiYgZmlyc3RbYl07XG5cbiAgICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IC8vIGFyZU11dHVhbGx5RXhjbHVzaXZlIGJlaW5nIGZhbHNlIGlzIGEgc3VwZXJzZXQgb2YgYmVpbmcgdHJ1ZSxcbiAgICAvLyBoZW5jZSBpZiB3ZSB3YW50IHRvIGtub3cgaWYgdGhpcyBQYWlyU2V0IFwiaGFzXCIgdGhlc2UgdHdvIHdpdGggbm9cbiAgICAvLyBleGNsdXNpdml0eSwgd2UgaGF2ZSB0byBlbnN1cmUgaXQgd2FzIGFkZGVkIGFzIHN1Y2guXG5cblxuICAgIGlmIChhcmVNdXR1YWxseUV4Y2x1c2l2ZSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybiByZXN1bHQgPT09IGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG4gIF9wcm90by5hZGQgPSBmdW5jdGlvbiBhZGQoYSwgYiwgYXJlTXV0dWFsbHlFeGNsdXNpdmUpIHtcbiAgICB0aGlzLl9wYWlyU2V0QWRkKGEsIGIsIGFyZU11dHVhbGx5RXhjbHVzaXZlKTtcblxuICAgIHRoaXMuX3BhaXJTZXRBZGQoYiwgYSwgYXJlTXV0dWFsbHlFeGNsdXNpdmUpO1xuICB9O1xuXG4gIF9wcm90by5fcGFpclNldEFkZCA9IGZ1bmN0aW9uIF9wYWlyU2V0QWRkKGEsIGIsIGFyZU11dHVhbGx5RXhjbHVzaXZlKSB7XG4gICAgdmFyIG1hcCA9IHRoaXMuX2RhdGFbYV07XG5cbiAgICBpZiAoIW1hcCkge1xuICAgICAgbWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgIHRoaXMuX2RhdGFbYV0gPSBtYXA7XG4gICAgfVxuXG4gICAgbWFwW2JdID0gYXJlTXV0dWFsbHlFeGNsdXNpdmU7XG4gIH07XG5cbiAgcmV0dXJuIFBhaXJTZXQ7XG59KCk7XG4iLCJpbXBvcnQgaW5zcGVjdCBmcm9tIFwiLi4vLi4vanN1dGlscy9pbnNwZWN0Lm1qc1wiO1xuaW1wb3J0IHsgR3JhcGhRTEVycm9yIH0gZnJvbSBcIi4uLy4uL2Vycm9yL0dyYXBoUUxFcnJvci5tanNcIjtcbmltcG9ydCB7IGlzQ29tcG9zaXRlVHlwZSB9IGZyb20gXCIuLi8uLi90eXBlL2RlZmluaXRpb24ubWpzXCI7XG5pbXBvcnQgeyB0eXBlRnJvbUFTVCB9IGZyb20gXCIuLi8uLi91dGlsaXRpZXMvdHlwZUZyb21BU1QubWpzXCI7XG5pbXBvcnQgeyBkb1R5cGVzT3ZlcmxhcCB9IGZyb20gXCIuLi8uLi91dGlsaXRpZXMvdHlwZUNvbXBhcmF0b3JzLm1qc1wiO1xuXG4vKipcbiAqIFBvc3NpYmxlIGZyYWdtZW50IHNwcmVhZFxuICpcbiAqIEEgZnJhZ21lbnQgc3ByZWFkIGlzIG9ubHkgdmFsaWQgaWYgdGhlIHR5cGUgY29uZGl0aW9uIGNvdWxkIGV2ZXIgcG9zc2libHlcbiAqIGJlIHRydWU6IGlmIHRoZXJlIGlzIGEgbm9uLWVtcHR5IGludGVyc2VjdGlvbiBvZiB0aGUgcG9zc2libGUgcGFyZW50IHR5cGVzLFxuICogYW5kIHBvc3NpYmxlIHR5cGVzIHdoaWNoIHBhc3MgdGhlIHR5cGUgY29uZGl0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gUG9zc2libGVGcmFnbWVudFNwcmVhZHNSdWxlKGNvbnRleHQpIHtcbiAgcmV0dXJuIHtcbiAgICBJbmxpbmVGcmFnbWVudDogZnVuY3Rpb24gSW5saW5lRnJhZ21lbnQobm9kZSkge1xuICAgICAgdmFyIGZyYWdUeXBlID0gY29udGV4dC5nZXRUeXBlKCk7XG4gICAgICB2YXIgcGFyZW50VHlwZSA9IGNvbnRleHQuZ2V0UGFyZW50VHlwZSgpO1xuXG4gICAgICBpZiAoaXNDb21wb3NpdGVUeXBlKGZyYWdUeXBlKSAmJiBpc0NvbXBvc2l0ZVR5cGUocGFyZW50VHlwZSkgJiYgIWRvVHlwZXNPdmVybGFwKGNvbnRleHQuZ2V0U2NoZW1hKCksIGZyYWdUeXBlLCBwYXJlbnRUeXBlKSkge1xuICAgICAgICB2YXIgcGFyZW50VHlwZVN0ciA9IGluc3BlY3QocGFyZW50VHlwZSk7XG4gICAgICAgIHZhciBmcmFnVHlwZVN0ciA9IGluc3BlY3QoZnJhZ1R5cGUpO1xuICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKG5ldyBHcmFwaFFMRXJyb3IoXCJGcmFnbWVudCBjYW5ub3QgYmUgc3ByZWFkIGhlcmUgYXMgb2JqZWN0cyBvZiB0eXBlIFxcXCJcIi5jb25jYXQocGFyZW50VHlwZVN0ciwgXCJcXFwiIGNhbiBuZXZlciBiZSBvZiB0eXBlIFxcXCJcIikuY29uY2F0KGZyYWdUeXBlU3RyLCBcIlxcXCIuXCIpLCBub2RlKSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBGcmFnbWVudFNwcmVhZDogZnVuY3Rpb24gRnJhZ21lbnRTcHJlYWQobm9kZSkge1xuICAgICAgdmFyIGZyYWdOYW1lID0gbm9kZS5uYW1lLnZhbHVlO1xuICAgICAgdmFyIGZyYWdUeXBlID0gZ2V0RnJhZ21lbnRUeXBlKGNvbnRleHQsIGZyYWdOYW1lKTtcbiAgICAgIHZhciBwYXJlbnRUeXBlID0gY29udGV4dC5nZXRQYXJlbnRUeXBlKCk7XG5cbiAgICAgIGlmIChmcmFnVHlwZSAmJiBwYXJlbnRUeXBlICYmICFkb1R5cGVzT3ZlcmxhcChjb250ZXh0LmdldFNjaGVtYSgpLCBmcmFnVHlwZSwgcGFyZW50VHlwZSkpIHtcbiAgICAgICAgdmFyIHBhcmVudFR5cGVTdHIgPSBpbnNwZWN0KHBhcmVudFR5cGUpO1xuICAgICAgICB2YXIgZnJhZ1R5cGVTdHIgPSBpbnNwZWN0KGZyYWdUeXBlKTtcbiAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihuZXcgR3JhcGhRTEVycm9yKFwiRnJhZ21lbnQgXFxcIlwiLmNvbmNhdChmcmFnTmFtZSwgXCJcXFwiIGNhbm5vdCBiZSBzcHJlYWQgaGVyZSBhcyBvYmplY3RzIG9mIHR5cGUgXFxcIlwiKS5jb25jYXQocGFyZW50VHlwZVN0ciwgXCJcXFwiIGNhbiBuZXZlciBiZSBvZiB0eXBlIFxcXCJcIikuY29uY2F0KGZyYWdUeXBlU3RyLCBcIlxcXCIuXCIpLCBub2RlKSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBnZXRGcmFnbWVudFR5cGUoY29udGV4dCwgbmFtZSkge1xuICB2YXIgZnJhZyA9IGNvbnRleHQuZ2V0RnJhZ21lbnQobmFtZSk7XG5cbiAgaWYgKGZyYWcpIHtcbiAgICB2YXIgdHlwZSA9IHR5cGVGcm9tQVNUKGNvbnRleHQuZ2V0U2NoZW1hKCksIGZyYWcudHlwZUNvbmRpdGlvbik7XG5cbiAgICBpZiAoaXNDb21wb3NpdGVUeXBlKHR5cGUpKSB7XG4gICAgICByZXR1cm4gdHlwZTtcbiAgICB9XG4gIH1cbn1cbiIsInZhciBfZGVmS2luZFRvRXh0S2luZDtcblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuaW1wb3J0IGluc3BlY3QgZnJvbSBcIi4uLy4uL2pzdXRpbHMvaW5zcGVjdC5tanNcIjtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcIi4uLy4uL2pzdXRpbHMvaW52YXJpYW50Lm1qc1wiO1xuaW1wb3J0IGRpZFlvdU1lYW4gZnJvbSBcIi4uLy4uL2pzdXRpbHMvZGlkWW91TWVhbi5tanNcIjtcbmltcG9ydCBzdWdnZXN0aW9uTGlzdCBmcm9tIFwiLi4vLi4vanN1dGlscy9zdWdnZXN0aW9uTGlzdC5tanNcIjtcbmltcG9ydCB7IEdyYXBoUUxFcnJvciB9IGZyb20gXCIuLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IubWpzXCI7XG5pbXBvcnQgeyBLaW5kIH0gZnJvbSBcIi4uLy4uL2xhbmd1YWdlL2tpbmRzLm1qc1wiO1xuaW1wb3J0IHsgaXNUeXBlRGVmaW5pdGlvbk5vZGUgfSBmcm9tIFwiLi4vLi4vbGFuZ3VhZ2UvcHJlZGljYXRlcy5tanNcIjtcbmltcG9ydCB7IGlzU2NhbGFyVHlwZSwgaXNPYmplY3RUeXBlLCBpc0ludGVyZmFjZVR5cGUsIGlzVW5pb25UeXBlLCBpc0VudW1UeXBlLCBpc0lucHV0T2JqZWN0VHlwZSB9IGZyb20gXCIuLi8uLi90eXBlL2RlZmluaXRpb24ubWpzXCI7XG5cbi8qKlxuICogUG9zc2libGUgdHlwZSBleHRlbnNpb25cbiAqXG4gKiBBIHR5cGUgZXh0ZW5zaW9uIGlzIG9ubHkgdmFsaWQgaWYgdGhlIHR5cGUgaXMgZGVmaW5lZCBhbmQgaGFzIHRoZSBzYW1lIGtpbmQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBQb3NzaWJsZVR5cGVFeHRlbnNpb25zUnVsZShjb250ZXh0KSB7XG4gIHZhciBzY2hlbWEgPSBjb250ZXh0LmdldFNjaGVtYSgpO1xuICB2YXIgZGVmaW5lZFR5cGVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICBmb3IgKHZhciBfaTIgPSAwLCBfY29udGV4dCRnZXREb2N1bWVudCQyID0gY29udGV4dC5nZXREb2N1bWVudCgpLmRlZmluaXRpb25zOyBfaTIgPCBfY29udGV4dCRnZXREb2N1bWVudCQyLmxlbmd0aDsgX2kyKyspIHtcbiAgICB2YXIgZGVmID0gX2NvbnRleHQkZ2V0RG9jdW1lbnQkMltfaTJdO1xuXG4gICAgaWYgKGlzVHlwZURlZmluaXRpb25Ob2RlKGRlZikpIHtcbiAgICAgIGRlZmluZWRUeXBlc1tkZWYubmFtZS52YWx1ZV0gPSBkZWY7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBTY2FsYXJUeXBlRXh0ZW5zaW9uOiBjaGVja0V4dGVuc2lvbixcbiAgICBPYmplY3RUeXBlRXh0ZW5zaW9uOiBjaGVja0V4dGVuc2lvbixcbiAgICBJbnRlcmZhY2VUeXBlRXh0ZW5zaW9uOiBjaGVja0V4dGVuc2lvbixcbiAgICBVbmlvblR5cGVFeHRlbnNpb246IGNoZWNrRXh0ZW5zaW9uLFxuICAgIEVudW1UeXBlRXh0ZW5zaW9uOiBjaGVja0V4dGVuc2lvbixcbiAgICBJbnB1dE9iamVjdFR5cGVFeHRlbnNpb246IGNoZWNrRXh0ZW5zaW9uXG4gIH07XG5cbiAgZnVuY3Rpb24gY2hlY2tFeHRlbnNpb24obm9kZSkge1xuICAgIHZhciB0eXBlTmFtZSA9IG5vZGUubmFtZS52YWx1ZTtcbiAgICB2YXIgZGVmTm9kZSA9IGRlZmluZWRUeXBlc1t0eXBlTmFtZV07XG4gICAgdmFyIGV4aXN0aW5nVHlwZSA9IHNjaGVtYSA9PT0gbnVsbCB8fCBzY2hlbWEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNjaGVtYS5nZXRUeXBlKHR5cGVOYW1lKTtcbiAgICB2YXIgZXhwZWN0ZWRLaW5kO1xuXG4gICAgaWYgKGRlZk5vZGUpIHtcbiAgICAgIGV4cGVjdGVkS2luZCA9IGRlZktpbmRUb0V4dEtpbmRbZGVmTm9kZS5raW5kXTtcbiAgICB9IGVsc2UgaWYgKGV4aXN0aW5nVHlwZSkge1xuICAgICAgZXhwZWN0ZWRLaW5kID0gdHlwZVRvRXh0S2luZChleGlzdGluZ1R5cGUpO1xuICAgIH1cblxuICAgIGlmIChleHBlY3RlZEtpbmQpIHtcbiAgICAgIGlmIChleHBlY3RlZEtpbmQgIT09IG5vZGUua2luZCkge1xuICAgICAgICB2YXIga2luZFN0ciA9IGV4dGVuc2lvbktpbmRUb1R5cGVOYW1lKG5vZGUua2luZCk7XG4gICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IobmV3IEdyYXBoUUxFcnJvcihcIkNhbm5vdCBleHRlbmQgbm9uLVwiLmNvbmNhdChraW5kU3RyLCBcIiB0eXBlIFxcXCJcIikuY29uY2F0KHR5cGVOYW1lLCBcIlxcXCIuXCIpLCBkZWZOb2RlID8gW2RlZk5vZGUsIG5vZGVdIDogbm9kZSkpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYWxsVHlwZU5hbWVzID0gT2JqZWN0LmtleXMoZGVmaW5lZFR5cGVzKTtcblxuICAgICAgaWYgKHNjaGVtYSkge1xuICAgICAgICBhbGxUeXBlTmFtZXMgPSBhbGxUeXBlTmFtZXMuY29uY2F0KE9iamVjdC5rZXlzKHNjaGVtYS5nZXRUeXBlTWFwKCkpKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHN1Z2dlc3RlZFR5cGVzID0gc3VnZ2VzdGlvbkxpc3QodHlwZU5hbWUsIGFsbFR5cGVOYW1lcyk7XG4gICAgICBjb250ZXh0LnJlcG9ydEVycm9yKG5ldyBHcmFwaFFMRXJyb3IoXCJDYW5ub3QgZXh0ZW5kIHR5cGUgXFxcIlwiLmNvbmNhdCh0eXBlTmFtZSwgXCJcXFwiIGJlY2F1c2UgaXQgaXMgbm90IGRlZmluZWQuXCIpICsgZGlkWW91TWVhbihzdWdnZXN0ZWRUeXBlcyksIG5vZGUubmFtZSkpO1xuICAgIH1cbiAgfVxufVxudmFyIGRlZktpbmRUb0V4dEtpbmQgPSAoX2RlZktpbmRUb0V4dEtpbmQgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9kZWZLaW5kVG9FeHRLaW5kLCBLaW5kLlNDQUxBUl9UWVBFX0RFRklOSVRJT04sIEtpbmQuU0NBTEFSX1RZUEVfRVhURU5TSU9OKSwgX2RlZmluZVByb3BlcnR5KF9kZWZLaW5kVG9FeHRLaW5kLCBLaW5kLk9CSkVDVF9UWVBFX0RFRklOSVRJT04sIEtpbmQuT0JKRUNUX1RZUEVfRVhURU5TSU9OKSwgX2RlZmluZVByb3BlcnR5KF9kZWZLaW5kVG9FeHRLaW5kLCBLaW5kLklOVEVSRkFDRV9UWVBFX0RFRklOSVRJT04sIEtpbmQuSU5URVJGQUNFX1RZUEVfRVhURU5TSU9OKSwgX2RlZmluZVByb3BlcnR5KF9kZWZLaW5kVG9FeHRLaW5kLCBLaW5kLlVOSU9OX1RZUEVfREVGSU5JVElPTiwgS2luZC5VTklPTl9UWVBFX0VYVEVOU0lPTiksIF9kZWZpbmVQcm9wZXJ0eShfZGVmS2luZFRvRXh0S2luZCwgS2luZC5FTlVNX1RZUEVfREVGSU5JVElPTiwgS2luZC5FTlVNX1RZUEVfRVhURU5TSU9OKSwgX2RlZmluZVByb3BlcnR5KF9kZWZLaW5kVG9FeHRLaW5kLCBLaW5kLklOUFVUX09CSkVDVF9UWVBFX0RFRklOSVRJT04sIEtpbmQuSU5QVVRfT0JKRUNUX1RZUEVfRVhURU5TSU9OKSwgX2RlZktpbmRUb0V4dEtpbmQpO1xuXG5mdW5jdGlvbiB0eXBlVG9FeHRLaW5kKHR5cGUpIHtcbiAgaWYgKGlzU2NhbGFyVHlwZSh0eXBlKSkge1xuICAgIHJldHVybiBLaW5kLlNDQUxBUl9UWVBFX0VYVEVOU0lPTjtcbiAgfVxuXG4gIGlmIChpc09iamVjdFR5cGUodHlwZSkpIHtcbiAgICByZXR1cm4gS2luZC5PQkpFQ1RfVFlQRV9FWFRFTlNJT047XG4gIH1cblxuICBpZiAoaXNJbnRlcmZhY2VUeXBlKHR5cGUpKSB7XG4gICAgcmV0dXJuIEtpbmQuSU5URVJGQUNFX1RZUEVfRVhURU5TSU9OO1xuICB9XG5cbiAgaWYgKGlzVW5pb25UeXBlKHR5cGUpKSB7XG4gICAgcmV0dXJuIEtpbmQuVU5JT05fVFlQRV9FWFRFTlNJT047XG4gIH1cblxuICBpZiAoaXNFbnVtVHlwZSh0eXBlKSkge1xuICAgIHJldHVybiBLaW5kLkVOVU1fVFlQRV9FWFRFTlNJT047XG4gIH0gLy8gaXN0YW5idWwgaWdub3JlIGVsc2UgKFNlZTogJ2h0dHBzOi8vZ2l0aHViLmNvbS9ncmFwaHFsL2dyYXBocWwtanMvaXNzdWVzLzI2MTgnKVxuXG5cbiAgaWYgKGlzSW5wdXRPYmplY3RUeXBlKHR5cGUpKSB7XG4gICAgcmV0dXJuIEtpbmQuSU5QVVRfT0JKRUNUX1RZUEVfRVhURU5TSU9OO1xuICB9IC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0IChOb3QgcmVhY2hhYmxlLiBBbGwgcG9zc2libGUgdHlwZXMgaGF2ZSBiZWVuIGNvbnNpZGVyZWQpXG5cblxuICBmYWxzZSB8fCBpbnZhcmlhbnQoMCwgJ1VuZXhwZWN0ZWQgdHlwZTogJyArIGluc3BlY3QodHlwZSkpO1xufVxuXG5mdW5jdGlvbiBleHRlbnNpb25LaW5kVG9UeXBlTmFtZShraW5kKSB7XG4gIHN3aXRjaCAoa2luZCkge1xuICAgIGNhc2UgS2luZC5TQ0FMQVJfVFlQRV9FWFRFTlNJT046XG4gICAgICByZXR1cm4gJ3NjYWxhcic7XG5cbiAgICBjYXNlIEtpbmQuT0JKRUNUX1RZUEVfRVhURU5TSU9OOlxuICAgICAgcmV0dXJuICdvYmplY3QnO1xuXG4gICAgY2FzZSBLaW5kLklOVEVSRkFDRV9UWVBFX0VYVEVOU0lPTjpcbiAgICAgIHJldHVybiAnaW50ZXJmYWNlJztcblxuICAgIGNhc2UgS2luZC5VTklPTl9UWVBFX0VYVEVOU0lPTjpcbiAgICAgIHJldHVybiAndW5pb24nO1xuXG4gICAgY2FzZSBLaW5kLkVOVU1fVFlQRV9FWFRFTlNJT046XG4gICAgICByZXR1cm4gJ2VudW0nO1xuXG4gICAgY2FzZSBLaW5kLklOUFVUX09CSkVDVF9UWVBFX0VYVEVOU0lPTjpcbiAgICAgIHJldHVybiAnaW5wdXQgb2JqZWN0JztcbiAgfSAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAoTm90IHJlYWNoYWJsZS4gQWxsIHBvc3NpYmxlIHR5cGVzIGhhdmUgYmVlbiBjb25zaWRlcmVkKVxuXG5cbiAgZmFsc2UgfHwgaW52YXJpYW50KDAsICdVbmV4cGVjdGVkIGtpbmQ6ICcgKyBpbnNwZWN0KGtpbmQpKTtcbn1cbiIsImZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBpZiAoZW51bWVyYWJsZU9ubHkpIHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KTsga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV0gIT0gbnVsbCA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpZiAoaSAlIDIpIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSwgdHJ1ZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KTsgfSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycykgeyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpOyB9IGVsc2UgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5pbXBvcnQgaW5zcGVjdCBmcm9tIFwiLi4vLi4vanN1dGlscy9pbnNwZWN0Lm1qc1wiO1xuaW1wb3J0IGtleU1hcCBmcm9tIFwiLi4vLi4vanN1dGlscy9rZXlNYXAubWpzXCI7XG5pbXBvcnQgeyBHcmFwaFFMRXJyb3IgfSBmcm9tIFwiLi4vLi4vZXJyb3IvR3JhcGhRTEVycm9yLm1qc1wiO1xuaW1wb3J0IHsgS2luZCB9IGZyb20gXCIuLi8uLi9sYW5ndWFnZS9raW5kcy5tanNcIjtcbmltcG9ydCB7IHByaW50IH0gZnJvbSBcIi4uLy4uL2xhbmd1YWdlL3ByaW50ZXIubWpzXCI7XG5pbXBvcnQgeyBzcGVjaWZpZWREaXJlY3RpdmVzIH0gZnJvbSBcIi4uLy4uL3R5cGUvZGlyZWN0aXZlcy5tanNcIjtcbmltcG9ydCB7IGlzVHlwZSwgaXNSZXF1aXJlZEFyZ3VtZW50IH0gZnJvbSBcIi4uLy4uL3R5cGUvZGVmaW5pdGlvbi5tanNcIjtcblxuLyoqXG4gKiBQcm92aWRlZCByZXF1aXJlZCBhcmd1bWVudHNcbiAqXG4gKiBBIGZpZWxkIG9yIGRpcmVjdGl2ZSBpcyBvbmx5IHZhbGlkIGlmIGFsbCByZXF1aXJlZCAobm9uLW51bGwgd2l0aG91dCBhXG4gKiBkZWZhdWx0IHZhbHVlKSBmaWVsZCBhcmd1bWVudHMgaGF2ZSBiZWVuIHByb3ZpZGVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gUHJvdmlkZWRSZXF1aXJlZEFyZ3VtZW50c1J1bGUoY29udGV4dCkge1xuICByZXR1cm4gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBQcm92aWRlZFJlcXVpcmVkQXJndW1lbnRzT25EaXJlY3RpdmVzUnVsZShjb250ZXh0KSksIHt9LCB7XG4gICAgRmllbGQ6IHtcbiAgICAgIC8vIFZhbGlkYXRlIG9uIGxlYXZlIHRvIGFsbG93IGZvciBkZWVwZXIgZXJyb3JzIHRvIGFwcGVhciBmaXJzdC5cbiAgICAgIGxlYXZlOiBmdW5jdGlvbiBsZWF2ZShmaWVsZE5vZGUpIHtcbiAgICAgICAgdmFyIF9maWVsZE5vZGUkYXJndW1lbnRzO1xuXG4gICAgICAgIHZhciBmaWVsZERlZiA9IGNvbnRleHQuZ2V0RmllbGREZWYoKTtcblxuICAgICAgICBpZiAoIWZpZWxkRGVmKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9IC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0IChTZWU6ICdodHRwczovL2dpdGh1Yi5jb20vZ3JhcGhxbC9ncmFwaHFsLWpzL2lzc3Vlcy8yMjAzJylcblxuXG4gICAgICAgIHZhciBhcmdOb2RlcyA9IChfZmllbGROb2RlJGFyZ3VtZW50cyA9IGZpZWxkTm9kZS5hcmd1bWVudHMpICE9PSBudWxsICYmIF9maWVsZE5vZGUkYXJndW1lbnRzICE9PSB2b2lkIDAgPyBfZmllbGROb2RlJGFyZ3VtZW50cyA6IFtdO1xuICAgICAgICB2YXIgYXJnTm9kZU1hcCA9IGtleU1hcChhcmdOb2RlcywgZnVuY3Rpb24gKGFyZykge1xuICAgICAgICAgIHJldHVybiBhcmcubmFtZS52YWx1ZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZm9yICh2YXIgX2kyID0gMCwgX2ZpZWxkRGVmJGFyZ3MyID0gZmllbGREZWYuYXJnczsgX2kyIDwgX2ZpZWxkRGVmJGFyZ3MyLmxlbmd0aDsgX2kyKyspIHtcbiAgICAgICAgICB2YXIgYXJnRGVmID0gX2ZpZWxkRGVmJGFyZ3MyW19pMl07XG4gICAgICAgICAgdmFyIGFyZ05vZGUgPSBhcmdOb2RlTWFwW2FyZ0RlZi5uYW1lXTtcblxuICAgICAgICAgIGlmICghYXJnTm9kZSAmJiBpc1JlcXVpcmVkQXJndW1lbnQoYXJnRGVmKSkge1xuICAgICAgICAgICAgdmFyIGFyZ1R5cGVTdHIgPSBpbnNwZWN0KGFyZ0RlZi50eXBlKTtcbiAgICAgICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IobmV3IEdyYXBoUUxFcnJvcihcIkZpZWxkIFxcXCJcIi5jb25jYXQoZmllbGREZWYubmFtZSwgXCJcXFwiIGFyZ3VtZW50IFxcXCJcIikuY29uY2F0KGFyZ0RlZi5uYW1lLCBcIlxcXCIgb2YgdHlwZSBcXFwiXCIpLmNvbmNhdChhcmdUeXBlU3RyLCBcIlxcXCIgaXMgcmVxdWlyZWQsIGJ1dCBpdCB3YXMgbm90IHByb3ZpZGVkLlwiKSwgZmllbGROb2RlKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn1cbi8qKlxuICogQGludGVybmFsXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIFByb3ZpZGVkUmVxdWlyZWRBcmd1bWVudHNPbkRpcmVjdGl2ZXNSdWxlKGNvbnRleHQpIHtcbiAgdmFyIHJlcXVpcmVkQXJnc01hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHZhciBzY2hlbWEgPSBjb250ZXh0LmdldFNjaGVtYSgpO1xuICB2YXIgZGVmaW5lZERpcmVjdGl2ZXMgPSBzY2hlbWEgPyBzY2hlbWEuZ2V0RGlyZWN0aXZlcygpIDogc3BlY2lmaWVkRGlyZWN0aXZlcztcblxuICBmb3IgKHZhciBfaTQgPSAwOyBfaTQgPCBkZWZpbmVkRGlyZWN0aXZlcy5sZW5ndGg7IF9pNCsrKSB7XG4gICAgdmFyIGRpcmVjdGl2ZSA9IGRlZmluZWREaXJlY3RpdmVzW19pNF07XG4gICAgcmVxdWlyZWRBcmdzTWFwW2RpcmVjdGl2ZS5uYW1lXSA9IGtleU1hcChkaXJlY3RpdmUuYXJncy5maWx0ZXIoaXNSZXF1aXJlZEFyZ3VtZW50KSwgZnVuY3Rpb24gKGFyZykge1xuICAgICAgcmV0dXJuIGFyZy5uYW1lO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIGFzdERlZmluaXRpb25zID0gY29udGV4dC5nZXREb2N1bWVudCgpLmRlZmluaXRpb25zO1xuXG4gIGZvciAodmFyIF9pNiA9IDA7IF9pNiA8IGFzdERlZmluaXRpb25zLmxlbmd0aDsgX2k2KyspIHtcbiAgICB2YXIgZGVmID0gYXN0RGVmaW5pdGlvbnNbX2k2XTtcblxuICAgIGlmIChkZWYua2luZCA9PT0gS2luZC5ESVJFQ1RJVkVfREVGSU5JVElPTikge1xuICAgICAgdmFyIF9kZWYkYXJndW1lbnRzO1xuXG4gICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAoU2VlOiAnaHR0cHM6Ly9naXRodWIuY29tL2dyYXBocWwvZ3JhcGhxbC1qcy9pc3N1ZXMvMjIwMycpXG4gICAgICB2YXIgYXJnTm9kZXMgPSAoX2RlZiRhcmd1bWVudHMgPSBkZWYuYXJndW1lbnRzKSAhPT0gbnVsbCAmJiBfZGVmJGFyZ3VtZW50cyAhPT0gdm9pZCAwID8gX2RlZiRhcmd1bWVudHMgOiBbXTtcbiAgICAgIHJlcXVpcmVkQXJnc01hcFtkZWYubmFtZS52YWx1ZV0gPSBrZXlNYXAoYXJnTm9kZXMuZmlsdGVyKGlzUmVxdWlyZWRBcmd1bWVudE5vZGUpLCBmdW5jdGlvbiAoYXJnKSB7XG4gICAgICAgIHJldHVybiBhcmcubmFtZS52YWx1ZTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgRGlyZWN0aXZlOiB7XG4gICAgICAvLyBWYWxpZGF0ZSBvbiBsZWF2ZSB0byBhbGxvdyBmb3IgZGVlcGVyIGVycm9ycyB0byBhcHBlYXIgZmlyc3QuXG4gICAgICBsZWF2ZTogZnVuY3Rpb24gbGVhdmUoZGlyZWN0aXZlTm9kZSkge1xuICAgICAgICB2YXIgZGlyZWN0aXZlTmFtZSA9IGRpcmVjdGl2ZU5vZGUubmFtZS52YWx1ZTtcbiAgICAgICAgdmFyIHJlcXVpcmVkQXJncyA9IHJlcXVpcmVkQXJnc01hcFtkaXJlY3RpdmVOYW1lXTtcblxuICAgICAgICBpZiAocmVxdWlyZWRBcmdzKSB7XG4gICAgICAgICAgdmFyIF9kaXJlY3RpdmVOb2RlJGFyZ3VtZTtcblxuICAgICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0IChTZWU6ICdodHRwczovL2dpdGh1Yi5jb20vZ3JhcGhxbC9ncmFwaHFsLWpzL2lzc3Vlcy8yMjAzJylcbiAgICAgICAgICB2YXIgX2FyZ05vZGVzID0gKF9kaXJlY3RpdmVOb2RlJGFyZ3VtZSA9IGRpcmVjdGl2ZU5vZGUuYXJndW1lbnRzKSAhPT0gbnVsbCAmJiBfZGlyZWN0aXZlTm9kZSRhcmd1bWUgIT09IHZvaWQgMCA/IF9kaXJlY3RpdmVOb2RlJGFyZ3VtZSA6IFtdO1xuXG4gICAgICAgICAgdmFyIGFyZ05vZGVNYXAgPSBrZXlNYXAoX2FyZ05vZGVzLCBmdW5jdGlvbiAoYXJnKSB7XG4gICAgICAgICAgICByZXR1cm4gYXJnLm5hbWUudmFsdWU7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBmb3IgKHZhciBfaTggPSAwLCBfT2JqZWN0JGtleXMyID0gT2JqZWN0LmtleXMocmVxdWlyZWRBcmdzKTsgX2k4IDwgX09iamVjdCRrZXlzMi5sZW5ndGg7IF9pOCsrKSB7XG4gICAgICAgICAgICB2YXIgYXJnTmFtZSA9IF9PYmplY3Qka2V5czJbX2k4XTtcblxuICAgICAgICAgICAgaWYgKCFhcmdOb2RlTWFwW2FyZ05hbWVdKSB7XG4gICAgICAgICAgICAgIHZhciBhcmdUeXBlID0gcmVxdWlyZWRBcmdzW2FyZ05hbWVdLnR5cGU7XG4gICAgICAgICAgICAgIHZhciBhcmdUeXBlU3RyID0gaXNUeXBlKGFyZ1R5cGUpID8gaW5zcGVjdChhcmdUeXBlKSA6IHByaW50KGFyZ1R5cGUpO1xuICAgICAgICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKG5ldyBHcmFwaFFMRXJyb3IoXCJEaXJlY3RpdmUgXFxcIkBcIi5jb25jYXQoZGlyZWN0aXZlTmFtZSwgXCJcXFwiIGFyZ3VtZW50IFxcXCJcIikuY29uY2F0KGFyZ05hbWUsIFwiXFxcIiBvZiB0eXBlIFxcXCJcIikuY29uY2F0KGFyZ1R5cGVTdHIsIFwiXFxcIiBpcyByZXF1aXJlZCwgYnV0IGl0IHdhcyBub3QgcHJvdmlkZWQuXCIpLCBkaXJlY3RpdmVOb2RlKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBpc1JlcXVpcmVkQXJndW1lbnROb2RlKGFyZykge1xuICByZXR1cm4gYXJnLnR5cGUua2luZCA9PT0gS2luZC5OT05fTlVMTF9UWVBFICYmIGFyZy5kZWZhdWx0VmFsdWUgPT0gbnVsbDtcbn1cbiIsImltcG9ydCBpbnNwZWN0IGZyb20gXCIuLi8uLi9qc3V0aWxzL2luc3BlY3QubWpzXCI7XG5pbXBvcnQgeyBHcmFwaFFMRXJyb3IgfSBmcm9tIFwiLi4vLi4vZXJyb3IvR3JhcGhRTEVycm9yLm1qc1wiO1xuaW1wb3J0IHsgZ2V0TmFtZWRUeXBlLCBpc0xlYWZUeXBlIH0gZnJvbSBcIi4uLy4uL3R5cGUvZGVmaW5pdGlvbi5tanNcIjtcblxuLyoqXG4gKiBTY2FsYXIgbGVhZnNcbiAqXG4gKiBBIEdyYXBoUUwgZG9jdW1lbnQgaXMgdmFsaWQgb25seSBpZiBhbGwgbGVhZiBmaWVsZHMgKGZpZWxkcyB3aXRob3V0XG4gKiBzdWIgc2VsZWN0aW9ucykgYXJlIG9mIHNjYWxhciBvciBlbnVtIHR5cGVzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gU2NhbGFyTGVhZnNSdWxlKGNvbnRleHQpIHtcbiAgcmV0dXJuIHtcbiAgICBGaWVsZDogZnVuY3Rpb24gRmllbGQobm9kZSkge1xuICAgICAgdmFyIHR5cGUgPSBjb250ZXh0LmdldFR5cGUoKTtcbiAgICAgIHZhciBzZWxlY3Rpb25TZXQgPSBub2RlLnNlbGVjdGlvblNldDtcblxuICAgICAgaWYgKHR5cGUpIHtcbiAgICAgICAgaWYgKGlzTGVhZlR5cGUoZ2V0TmFtZWRUeXBlKHR5cGUpKSkge1xuICAgICAgICAgIGlmIChzZWxlY3Rpb25TZXQpIHtcbiAgICAgICAgICAgIHZhciBmaWVsZE5hbWUgPSBub2RlLm5hbWUudmFsdWU7XG4gICAgICAgICAgICB2YXIgdHlwZVN0ciA9IGluc3BlY3QodHlwZSk7XG4gICAgICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKG5ldyBHcmFwaFFMRXJyb3IoXCJGaWVsZCBcXFwiXCIuY29uY2F0KGZpZWxkTmFtZSwgXCJcXFwiIG11c3Qgbm90IGhhdmUgYSBzZWxlY3Rpb24gc2luY2UgdHlwZSBcXFwiXCIpLmNvbmNhdCh0eXBlU3RyLCBcIlxcXCIgaGFzIG5vIHN1YmZpZWxkcy5cIiksIHNlbGVjdGlvblNldCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghc2VsZWN0aW9uU2V0KSB7XG4gICAgICAgICAgdmFyIF9maWVsZE5hbWUgPSBub2RlLm5hbWUudmFsdWU7XG5cbiAgICAgICAgICB2YXIgX3R5cGVTdHIgPSBpbnNwZWN0KHR5cGUpO1xuXG4gICAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihuZXcgR3JhcGhRTEVycm9yKFwiRmllbGQgXFxcIlwiLmNvbmNhdChfZmllbGROYW1lLCBcIlxcXCIgb2YgdHlwZSBcXFwiXCIpLmNvbmNhdChfdHlwZVN0ciwgXCJcXFwiIG11c3QgaGF2ZSBhIHNlbGVjdGlvbiBvZiBzdWJmaWVsZHMuIERpZCB5b3UgbWVhbiBcXFwiXCIpLmNvbmNhdChfZmllbGROYW1lLCBcIiB7IC4uLiB9XFxcIj9cIiksIG5vZGUpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cbiIsImltcG9ydCB7IEdyYXBoUUxFcnJvciB9IGZyb20gXCIuLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IubWpzXCI7XG5cbi8qKlxuICogU3Vic2NyaXB0aW9ucyBtdXN0IG9ubHkgaW5jbHVkZSBvbmUgZmllbGQuXG4gKlxuICogQSBHcmFwaFFMIHN1YnNjcmlwdGlvbiBpcyB2YWxpZCBvbmx5IGlmIGl0IGNvbnRhaW5zIGEgc2luZ2xlIHJvb3QgZmllbGQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBTaW5nbGVGaWVsZFN1YnNjcmlwdGlvbnNSdWxlKGNvbnRleHQpIHtcbiAgcmV0dXJuIHtcbiAgICBPcGVyYXRpb25EZWZpbml0aW9uOiBmdW5jdGlvbiBPcGVyYXRpb25EZWZpbml0aW9uKG5vZGUpIHtcbiAgICAgIGlmIChub2RlLm9wZXJhdGlvbiA9PT0gJ3N1YnNjcmlwdGlvbicpIHtcbiAgICAgICAgaWYgKG5vZGUuc2VsZWN0aW9uU2V0LnNlbGVjdGlvbnMubGVuZ3RoICE9PSAxKSB7XG4gICAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihuZXcgR3JhcGhRTEVycm9yKG5vZGUubmFtZSA/IFwiU3Vic2NyaXB0aW9uIFxcXCJcIi5jb25jYXQobm9kZS5uYW1lLnZhbHVlLCBcIlxcXCIgbXVzdCBzZWxlY3Qgb25seSBvbmUgdG9wIGxldmVsIGZpZWxkLlwiKSA6ICdBbm9ueW1vdXMgU3Vic2NyaXB0aW9uIG11c3Qgc2VsZWN0IG9ubHkgb25lIHRvcCBsZXZlbCBmaWVsZC4nLCBub2RlLnNlbGVjdGlvblNldC5zZWxlY3Rpb25zLnNsaWNlKDEpKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG4iLCJpbXBvcnQgeyBHcmFwaFFMRXJyb3IgfSBmcm9tIFwiLi4vLi4vZXJyb3IvR3JhcGhRTEVycm9yLm1qc1wiO1xuXG4vKipcbiAqIFVuaXF1ZSBhcmd1bWVudCBuYW1lc1xuICpcbiAqIEEgR3JhcGhRTCBmaWVsZCBvciBkaXJlY3RpdmUgaXMgb25seSB2YWxpZCBpZiBhbGwgc3VwcGxpZWQgYXJndW1lbnRzIGFyZVxuICogdW5pcXVlbHkgbmFtZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBVbmlxdWVBcmd1bWVudE5hbWVzUnVsZShjb250ZXh0KSB7XG4gIHZhciBrbm93bkFyZ05hbWVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgcmV0dXJuIHtcbiAgICBGaWVsZDogZnVuY3Rpb24gRmllbGQoKSB7XG4gICAgICBrbm93bkFyZ05hbWVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB9LFxuICAgIERpcmVjdGl2ZTogZnVuY3Rpb24gRGlyZWN0aXZlKCkge1xuICAgICAga25vd25BcmdOYW1lcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgfSxcbiAgICBBcmd1bWVudDogZnVuY3Rpb24gQXJndW1lbnQobm9kZSkge1xuICAgICAgdmFyIGFyZ05hbWUgPSBub2RlLm5hbWUudmFsdWU7XG5cbiAgICAgIGlmIChrbm93bkFyZ05hbWVzW2FyZ05hbWVdKSB7XG4gICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IobmV3IEdyYXBoUUxFcnJvcihcIlRoZXJlIGNhbiBiZSBvbmx5IG9uZSBhcmd1bWVudCBuYW1lZCBcXFwiXCIuY29uY2F0KGFyZ05hbWUsIFwiXFxcIi5cIiksIFtrbm93bkFyZ05hbWVzW2FyZ05hbWVdLCBub2RlLm5hbWVdKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBrbm93bkFyZ05hbWVzW2FyZ05hbWVdID0gbm9kZS5uYW1lO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9O1xufVxuIiwiaW1wb3J0IHsgR3JhcGhRTEVycm9yIH0gZnJvbSBcIi4uLy4uL2Vycm9yL0dyYXBoUUxFcnJvci5tanNcIjtcblxuLyoqXG4gKiBVbmlxdWUgZGlyZWN0aXZlIG5hbWVzXG4gKlxuICogQSBHcmFwaFFMIGRvY3VtZW50IGlzIG9ubHkgdmFsaWQgaWYgYWxsIGRlZmluZWQgZGlyZWN0aXZlcyBoYXZlIHVuaXF1ZSBuYW1lcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIFVuaXF1ZURpcmVjdGl2ZU5hbWVzUnVsZShjb250ZXh0KSB7XG4gIHZhciBrbm93bkRpcmVjdGl2ZU5hbWVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdmFyIHNjaGVtYSA9IGNvbnRleHQuZ2V0U2NoZW1hKCk7XG4gIHJldHVybiB7XG4gICAgRGlyZWN0aXZlRGVmaW5pdGlvbjogZnVuY3Rpb24gRGlyZWN0aXZlRGVmaW5pdGlvbihub2RlKSB7XG4gICAgICB2YXIgZGlyZWN0aXZlTmFtZSA9IG5vZGUubmFtZS52YWx1ZTtcblxuICAgICAgaWYgKHNjaGVtYSAhPT0gbnVsbCAmJiBzY2hlbWEgIT09IHZvaWQgMCAmJiBzY2hlbWEuZ2V0RGlyZWN0aXZlKGRpcmVjdGl2ZU5hbWUpKSB7XG4gICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IobmV3IEdyYXBoUUxFcnJvcihcIkRpcmVjdGl2ZSBcXFwiQFwiLmNvbmNhdChkaXJlY3RpdmVOYW1lLCBcIlxcXCIgYWxyZWFkeSBleGlzdHMgaW4gdGhlIHNjaGVtYS4gSXQgY2Fubm90IGJlIHJlZGVmaW5lZC5cIiksIG5vZGUubmFtZSkpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChrbm93bkRpcmVjdGl2ZU5hbWVzW2RpcmVjdGl2ZU5hbWVdKSB7XG4gICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IobmV3IEdyYXBoUUxFcnJvcihcIlRoZXJlIGNhbiBiZSBvbmx5IG9uZSBkaXJlY3RpdmUgbmFtZWQgXFxcIkBcIi5jb25jYXQoZGlyZWN0aXZlTmFtZSwgXCJcXFwiLlwiKSwgW2tub3duRGlyZWN0aXZlTmFtZXNbZGlyZWN0aXZlTmFtZV0sIG5vZGUubmFtZV0pKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGtub3duRGlyZWN0aXZlTmFtZXNbZGlyZWN0aXZlTmFtZV0gPSBub2RlLm5hbWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH07XG59XG4iLCJpbXBvcnQgeyBHcmFwaFFMRXJyb3IgfSBmcm9tIFwiLi4vLi4vZXJyb3IvR3JhcGhRTEVycm9yLm1qc1wiO1xuaW1wb3J0IHsgS2luZCB9IGZyb20gXCIuLi8uLi9sYW5ndWFnZS9raW5kcy5tanNcIjtcbmltcG9ydCB7IGlzVHlwZURlZmluaXRpb25Ob2RlLCBpc1R5cGVFeHRlbnNpb25Ob2RlIH0gZnJvbSBcIi4uLy4uL2xhbmd1YWdlL3ByZWRpY2F0ZXMubWpzXCI7XG5pbXBvcnQgeyBzcGVjaWZpZWREaXJlY3RpdmVzIH0gZnJvbSBcIi4uLy4uL3R5cGUvZGlyZWN0aXZlcy5tanNcIjtcblxuLyoqXG4gKiBVbmlxdWUgZGlyZWN0aXZlIG5hbWVzIHBlciBsb2NhdGlvblxuICpcbiAqIEEgR3JhcGhRTCBkb2N1bWVudCBpcyBvbmx5IHZhbGlkIGlmIGFsbCBub24tcmVwZWF0YWJsZSBkaXJlY3RpdmVzIGF0XG4gKiBhIGdpdmVuIGxvY2F0aW9uIGFyZSB1bmlxdWVseSBuYW1lZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIFVuaXF1ZURpcmVjdGl2ZXNQZXJMb2NhdGlvblJ1bGUoY29udGV4dCkge1xuICB2YXIgdW5pcXVlRGlyZWN0aXZlTWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdmFyIHNjaGVtYSA9IGNvbnRleHQuZ2V0U2NoZW1hKCk7XG4gIHZhciBkZWZpbmVkRGlyZWN0aXZlcyA9IHNjaGVtYSA/IHNjaGVtYS5nZXREaXJlY3RpdmVzKCkgOiBzcGVjaWZpZWREaXJlY3RpdmVzO1xuXG4gIGZvciAodmFyIF9pMiA9IDA7IF9pMiA8IGRlZmluZWREaXJlY3RpdmVzLmxlbmd0aDsgX2kyKyspIHtcbiAgICB2YXIgZGlyZWN0aXZlID0gZGVmaW5lZERpcmVjdGl2ZXNbX2kyXTtcbiAgICB1bmlxdWVEaXJlY3RpdmVNYXBbZGlyZWN0aXZlLm5hbWVdID0gIWRpcmVjdGl2ZS5pc1JlcGVhdGFibGU7XG4gIH1cblxuICB2YXIgYXN0RGVmaW5pdGlvbnMgPSBjb250ZXh0LmdldERvY3VtZW50KCkuZGVmaW5pdGlvbnM7XG5cbiAgZm9yICh2YXIgX2k0ID0gMDsgX2k0IDwgYXN0RGVmaW5pdGlvbnMubGVuZ3RoOyBfaTQrKykge1xuICAgIHZhciBkZWYgPSBhc3REZWZpbml0aW9uc1tfaTRdO1xuXG4gICAgaWYgKGRlZi5raW5kID09PSBLaW5kLkRJUkVDVElWRV9ERUZJTklUSU9OKSB7XG4gICAgICB1bmlxdWVEaXJlY3RpdmVNYXBbZGVmLm5hbWUudmFsdWVdID0gIWRlZi5yZXBlYXRhYmxlO1xuICAgIH1cbiAgfVxuXG4gIHZhciBzY2hlbWFEaXJlY3RpdmVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdmFyIHR5cGVEaXJlY3RpdmVzTWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgcmV0dXJuIHtcbiAgICAvLyBNYW55IGRpZmZlcmVudCBBU1Qgbm9kZXMgbWF5IGNvbnRhaW4gZGlyZWN0aXZlcy4gUmF0aGVyIHRoYW4gbGlzdGluZ1xuICAgIC8vIHRoZW0gYWxsLCBqdXN0IGxpc3RlbiBmb3IgZW50ZXJpbmcgYW55IG5vZGUsIGFuZCBjaGVjayB0byBzZWUgaWYgaXRcbiAgICAvLyBkZWZpbmVzIGFueSBkaXJlY3RpdmVzLlxuICAgIGVudGVyOiBmdW5jdGlvbiBlbnRlcihub2RlKSB7XG4gICAgICBpZiAobm9kZS5kaXJlY3RpdmVzID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgc2VlbkRpcmVjdGl2ZXM7XG5cbiAgICAgIGlmIChub2RlLmtpbmQgPT09IEtpbmQuU0NIRU1BX0RFRklOSVRJT04gfHwgbm9kZS5raW5kID09PSBLaW5kLlNDSEVNQV9FWFRFTlNJT04pIHtcbiAgICAgICAgc2VlbkRpcmVjdGl2ZXMgPSBzY2hlbWFEaXJlY3RpdmVzO1xuICAgICAgfSBlbHNlIGlmIChpc1R5cGVEZWZpbml0aW9uTm9kZShub2RlKSB8fCBpc1R5cGVFeHRlbnNpb25Ob2RlKG5vZGUpKSB7XG4gICAgICAgIHZhciB0eXBlTmFtZSA9IG5vZGUubmFtZS52YWx1ZTtcbiAgICAgICAgc2VlbkRpcmVjdGl2ZXMgPSB0eXBlRGlyZWN0aXZlc01hcFt0eXBlTmFtZV07XG5cbiAgICAgICAgaWYgKHNlZW5EaXJlY3RpdmVzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0eXBlRGlyZWN0aXZlc01hcFt0eXBlTmFtZV0gPSBzZWVuRGlyZWN0aXZlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlZW5EaXJlY3RpdmVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgX2k2ID0gMCwgX25vZGUkZGlyZWN0aXZlczIgPSBub2RlLmRpcmVjdGl2ZXM7IF9pNiA8IF9ub2RlJGRpcmVjdGl2ZXMyLmxlbmd0aDsgX2k2KyspIHtcbiAgICAgICAgdmFyIF9kaXJlY3RpdmUgPSBfbm9kZSRkaXJlY3RpdmVzMltfaTZdO1xuICAgICAgICB2YXIgZGlyZWN0aXZlTmFtZSA9IF9kaXJlY3RpdmUubmFtZS52YWx1ZTtcblxuICAgICAgICBpZiAodW5pcXVlRGlyZWN0aXZlTWFwW2RpcmVjdGl2ZU5hbWVdKSB7XG4gICAgICAgICAgaWYgKHNlZW5EaXJlY3RpdmVzW2RpcmVjdGl2ZU5hbWVdKSB7XG4gICAgICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKG5ldyBHcmFwaFFMRXJyb3IoXCJUaGUgZGlyZWN0aXZlIFxcXCJAXCIuY29uY2F0KGRpcmVjdGl2ZU5hbWUsIFwiXFxcIiBjYW4gb25seSBiZSB1c2VkIG9uY2UgYXQgdGhpcyBsb2NhdGlvbi5cIiksIFtzZWVuRGlyZWN0aXZlc1tkaXJlY3RpdmVOYW1lXSwgX2RpcmVjdGl2ZV0pKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VlbkRpcmVjdGl2ZXNbZGlyZWN0aXZlTmFtZV0gPSBfZGlyZWN0aXZlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cbiIsImltcG9ydCB7IEdyYXBoUUxFcnJvciB9IGZyb20gXCIuLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IubWpzXCI7XG5pbXBvcnQgeyBpc0VudW1UeXBlIH0gZnJvbSBcIi4uLy4uL3R5cGUvZGVmaW5pdGlvbi5tanNcIjtcblxuLyoqXG4gKiBVbmlxdWUgZW51bSB2YWx1ZSBuYW1lc1xuICpcbiAqIEEgR3JhcGhRTCBlbnVtIHR5cGUgaXMgb25seSB2YWxpZCBpZiBhbGwgaXRzIHZhbHVlcyBhcmUgdW5pcXVlbHkgbmFtZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBVbmlxdWVFbnVtVmFsdWVOYW1lc1J1bGUoY29udGV4dCkge1xuICB2YXIgc2NoZW1hID0gY29udGV4dC5nZXRTY2hlbWEoKTtcbiAgdmFyIGV4aXN0aW5nVHlwZU1hcCA9IHNjaGVtYSA/IHNjaGVtYS5nZXRUeXBlTWFwKCkgOiBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2YXIga25vd25WYWx1ZU5hbWVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgcmV0dXJuIHtcbiAgICBFbnVtVHlwZURlZmluaXRpb246IGNoZWNrVmFsdWVVbmlxdWVuZXNzLFxuICAgIEVudW1UeXBlRXh0ZW5zaW9uOiBjaGVja1ZhbHVlVW5pcXVlbmVzc1xuICB9O1xuXG4gIGZ1bmN0aW9uIGNoZWNrVmFsdWVVbmlxdWVuZXNzKG5vZGUpIHtcbiAgICB2YXIgX25vZGUkdmFsdWVzO1xuXG4gICAgdmFyIHR5cGVOYW1lID0gbm9kZS5uYW1lLnZhbHVlO1xuXG4gICAgaWYgKCFrbm93blZhbHVlTmFtZXNbdHlwZU5hbWVdKSB7XG4gICAgICBrbm93blZhbHVlTmFtZXNbdHlwZU5hbWVdID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB9IC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0IChTZWU6ICdodHRwczovL2dpdGh1Yi5jb20vZ3JhcGhxbC9ncmFwaHFsLWpzL2lzc3Vlcy8yMjAzJylcblxuXG4gICAgdmFyIHZhbHVlTm9kZXMgPSAoX25vZGUkdmFsdWVzID0gbm9kZS52YWx1ZXMpICE9PSBudWxsICYmIF9ub2RlJHZhbHVlcyAhPT0gdm9pZCAwID8gX25vZGUkdmFsdWVzIDogW107XG4gICAgdmFyIHZhbHVlTmFtZXMgPSBrbm93blZhbHVlTmFtZXNbdHlwZU5hbWVdO1xuXG4gICAgZm9yICh2YXIgX2kyID0gMDsgX2kyIDwgdmFsdWVOb2Rlcy5sZW5ndGg7IF9pMisrKSB7XG4gICAgICB2YXIgdmFsdWVEZWYgPSB2YWx1ZU5vZGVzW19pMl07XG4gICAgICB2YXIgdmFsdWVOYW1lID0gdmFsdWVEZWYubmFtZS52YWx1ZTtcbiAgICAgIHZhciBleGlzdGluZ1R5cGUgPSBleGlzdGluZ1R5cGVNYXBbdHlwZU5hbWVdO1xuXG4gICAgICBpZiAoaXNFbnVtVHlwZShleGlzdGluZ1R5cGUpICYmIGV4aXN0aW5nVHlwZS5nZXRWYWx1ZSh2YWx1ZU5hbWUpKSB7XG4gICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IobmV3IEdyYXBoUUxFcnJvcihcIkVudW0gdmFsdWUgXFxcIlwiLmNvbmNhdCh0eXBlTmFtZSwgXCIuXCIpLmNvbmNhdCh2YWx1ZU5hbWUsIFwiXFxcIiBhbHJlYWR5IGV4aXN0cyBpbiB0aGUgc2NoZW1hLiBJdCBjYW5ub3QgYWxzbyBiZSBkZWZpbmVkIGluIHRoaXMgdHlwZSBleHRlbnNpb24uXCIpLCB2YWx1ZURlZi5uYW1lKSk7XG4gICAgICB9IGVsc2UgaWYgKHZhbHVlTmFtZXNbdmFsdWVOYW1lXSkge1xuICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKG5ldyBHcmFwaFFMRXJyb3IoXCJFbnVtIHZhbHVlIFxcXCJcIi5jb25jYXQodHlwZU5hbWUsIFwiLlwiKS5jb25jYXQodmFsdWVOYW1lLCBcIlxcXCIgY2FuIG9ubHkgYmUgZGVmaW5lZCBvbmNlLlwiKSwgW3ZhbHVlTmFtZXNbdmFsdWVOYW1lXSwgdmFsdWVEZWYubmFtZV0pKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlTmFtZXNbdmFsdWVOYW1lXSA9IHZhbHVlRGVmLm5hbWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG4iLCJpbXBvcnQgeyBHcmFwaFFMRXJyb3IgfSBmcm9tIFwiLi4vLi4vZXJyb3IvR3JhcGhRTEVycm9yLm1qc1wiO1xuaW1wb3J0IHsgaXNPYmplY3RUeXBlLCBpc0ludGVyZmFjZVR5cGUsIGlzSW5wdXRPYmplY3RUeXBlIH0gZnJvbSBcIi4uLy4uL3R5cGUvZGVmaW5pdGlvbi5tanNcIjtcblxuLyoqXG4gKiBVbmlxdWUgZmllbGQgZGVmaW5pdGlvbiBuYW1lc1xuICpcbiAqIEEgR3JhcGhRTCBjb21wbGV4IHR5cGUgaXMgb25seSB2YWxpZCBpZiBhbGwgaXRzIGZpZWxkcyBhcmUgdW5pcXVlbHkgbmFtZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBVbmlxdWVGaWVsZERlZmluaXRpb25OYW1lc1J1bGUoY29udGV4dCkge1xuICB2YXIgc2NoZW1hID0gY29udGV4dC5nZXRTY2hlbWEoKTtcbiAgdmFyIGV4aXN0aW5nVHlwZU1hcCA9IHNjaGVtYSA/IHNjaGVtYS5nZXRUeXBlTWFwKCkgOiBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2YXIga25vd25GaWVsZE5hbWVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgcmV0dXJuIHtcbiAgICBJbnB1dE9iamVjdFR5cGVEZWZpbml0aW9uOiBjaGVja0ZpZWxkVW5pcXVlbmVzcyxcbiAgICBJbnB1dE9iamVjdFR5cGVFeHRlbnNpb246IGNoZWNrRmllbGRVbmlxdWVuZXNzLFxuICAgIEludGVyZmFjZVR5cGVEZWZpbml0aW9uOiBjaGVja0ZpZWxkVW5pcXVlbmVzcyxcbiAgICBJbnRlcmZhY2VUeXBlRXh0ZW5zaW9uOiBjaGVja0ZpZWxkVW5pcXVlbmVzcyxcbiAgICBPYmplY3RUeXBlRGVmaW5pdGlvbjogY2hlY2tGaWVsZFVuaXF1ZW5lc3MsXG4gICAgT2JqZWN0VHlwZUV4dGVuc2lvbjogY2hlY2tGaWVsZFVuaXF1ZW5lc3NcbiAgfTtcblxuICBmdW5jdGlvbiBjaGVja0ZpZWxkVW5pcXVlbmVzcyhub2RlKSB7XG4gICAgdmFyIF9ub2RlJGZpZWxkcztcblxuICAgIHZhciB0eXBlTmFtZSA9IG5vZGUubmFtZS52YWx1ZTtcblxuICAgIGlmICgha25vd25GaWVsZE5hbWVzW3R5cGVOYW1lXSkge1xuICAgICAga25vd25GaWVsZE5hbWVzW3R5cGVOYW1lXSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgfSAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAoU2VlOiAnaHR0cHM6Ly9naXRodWIuY29tL2dyYXBocWwvZ3JhcGhxbC1qcy9pc3N1ZXMvMjIwMycpXG5cblxuICAgIHZhciBmaWVsZE5vZGVzID0gKF9ub2RlJGZpZWxkcyA9IG5vZGUuZmllbGRzKSAhPT0gbnVsbCAmJiBfbm9kZSRmaWVsZHMgIT09IHZvaWQgMCA/IF9ub2RlJGZpZWxkcyA6IFtdO1xuICAgIHZhciBmaWVsZE5hbWVzID0ga25vd25GaWVsZE5hbWVzW3R5cGVOYW1lXTtcblxuICAgIGZvciAodmFyIF9pMiA9IDA7IF9pMiA8IGZpZWxkTm9kZXMubGVuZ3RoOyBfaTIrKykge1xuICAgICAgdmFyIGZpZWxkRGVmID0gZmllbGROb2Rlc1tfaTJdO1xuICAgICAgdmFyIGZpZWxkTmFtZSA9IGZpZWxkRGVmLm5hbWUudmFsdWU7XG5cbiAgICAgIGlmIChoYXNGaWVsZChleGlzdGluZ1R5cGVNYXBbdHlwZU5hbWVdLCBmaWVsZE5hbWUpKSB7XG4gICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IobmV3IEdyYXBoUUxFcnJvcihcIkZpZWxkIFxcXCJcIi5jb25jYXQodHlwZU5hbWUsIFwiLlwiKS5jb25jYXQoZmllbGROYW1lLCBcIlxcXCIgYWxyZWFkeSBleGlzdHMgaW4gdGhlIHNjaGVtYS4gSXQgY2Fubm90IGFsc28gYmUgZGVmaW5lZCBpbiB0aGlzIHR5cGUgZXh0ZW5zaW9uLlwiKSwgZmllbGREZWYubmFtZSkpO1xuICAgICAgfSBlbHNlIGlmIChmaWVsZE5hbWVzW2ZpZWxkTmFtZV0pIHtcbiAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihuZXcgR3JhcGhRTEVycm9yKFwiRmllbGQgXFxcIlwiLmNvbmNhdCh0eXBlTmFtZSwgXCIuXCIpLmNvbmNhdChmaWVsZE5hbWUsIFwiXFxcIiBjYW4gb25seSBiZSBkZWZpbmVkIG9uY2UuXCIpLCBbZmllbGROYW1lc1tmaWVsZE5hbWVdLCBmaWVsZERlZi5uYW1lXSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmllbGROYW1lc1tmaWVsZE5hbWVdID0gZmllbGREZWYubmFtZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gaGFzRmllbGQodHlwZSwgZmllbGROYW1lKSB7XG4gIGlmIChpc09iamVjdFR5cGUodHlwZSkgfHwgaXNJbnRlcmZhY2VUeXBlKHR5cGUpIHx8IGlzSW5wdXRPYmplY3RUeXBlKHR5cGUpKSB7XG4gICAgcmV0dXJuIHR5cGUuZ2V0RmllbGRzKClbZmllbGROYW1lXSAhPSBudWxsO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuIiwiaW1wb3J0IHsgR3JhcGhRTEVycm9yIH0gZnJvbSBcIi4uLy4uL2Vycm9yL0dyYXBoUUxFcnJvci5tanNcIjtcblxuLyoqXG4gKiBVbmlxdWUgZnJhZ21lbnQgbmFtZXNcbiAqXG4gKiBBIEdyYXBoUUwgZG9jdW1lbnQgaXMgb25seSB2YWxpZCBpZiBhbGwgZGVmaW5lZCBmcmFnbWVudHMgaGF2ZSB1bmlxdWUgbmFtZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBVbmlxdWVGcmFnbWVudE5hbWVzUnVsZShjb250ZXh0KSB7XG4gIHZhciBrbm93bkZyYWdtZW50TmFtZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICByZXR1cm4ge1xuICAgIE9wZXJhdGlvbkRlZmluaXRpb246IGZ1bmN0aW9uIE9wZXJhdGlvbkRlZmluaXRpb24oKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcbiAgICBGcmFnbWVudERlZmluaXRpb246IGZ1bmN0aW9uIEZyYWdtZW50RGVmaW5pdGlvbihub2RlKSB7XG4gICAgICB2YXIgZnJhZ21lbnROYW1lID0gbm9kZS5uYW1lLnZhbHVlO1xuXG4gICAgICBpZiAoa25vd25GcmFnbWVudE5hbWVzW2ZyYWdtZW50TmFtZV0pIHtcbiAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihuZXcgR3JhcGhRTEVycm9yKFwiVGhlcmUgY2FuIGJlIG9ubHkgb25lIGZyYWdtZW50IG5hbWVkIFxcXCJcIi5jb25jYXQoZnJhZ21lbnROYW1lLCBcIlxcXCIuXCIpLCBba25vd25GcmFnbWVudE5hbWVzW2ZyYWdtZW50TmFtZV0sIG5vZGUubmFtZV0pKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGtub3duRnJhZ21lbnROYW1lc1tmcmFnbWVudE5hbWVdID0gbm9kZS5uYW1lO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9O1xufVxuIiwiaW1wb3J0IHsgR3JhcGhRTEVycm9yIH0gZnJvbSBcIi4uLy4uL2Vycm9yL0dyYXBoUUxFcnJvci5tanNcIjtcblxuLyoqXG4gKiBVbmlxdWUgaW5wdXQgZmllbGQgbmFtZXNcbiAqXG4gKiBBIEdyYXBoUUwgaW5wdXQgb2JqZWN0IHZhbHVlIGlzIG9ubHkgdmFsaWQgaWYgYWxsIHN1cHBsaWVkIGZpZWxkcyBhcmVcbiAqIHVuaXF1ZWx5IG5hbWVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gVW5pcXVlSW5wdXRGaWVsZE5hbWVzUnVsZShjb250ZXh0KSB7XG4gIHZhciBrbm93bk5hbWVTdGFjayA9IFtdO1xuICB2YXIga25vd25OYW1lcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHJldHVybiB7XG4gICAgT2JqZWN0VmFsdWU6IHtcbiAgICAgIGVudGVyOiBmdW5jdGlvbiBlbnRlcigpIHtcbiAgICAgICAga25vd25OYW1lU3RhY2sucHVzaChrbm93bk5hbWVzKTtcbiAgICAgICAga25vd25OYW1lcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICB9LFxuICAgICAgbGVhdmU6IGZ1bmN0aW9uIGxlYXZlKCkge1xuICAgICAgICBrbm93bk5hbWVzID0ga25vd25OYW1lU3RhY2sucG9wKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBPYmplY3RGaWVsZDogZnVuY3Rpb24gT2JqZWN0RmllbGQobm9kZSkge1xuICAgICAgdmFyIGZpZWxkTmFtZSA9IG5vZGUubmFtZS52YWx1ZTtcblxuICAgICAgaWYgKGtub3duTmFtZXNbZmllbGROYW1lXSkge1xuICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKG5ldyBHcmFwaFFMRXJyb3IoXCJUaGVyZSBjYW4gYmUgb25seSBvbmUgaW5wdXQgZmllbGQgbmFtZWQgXFxcIlwiLmNvbmNhdChmaWVsZE5hbWUsIFwiXFxcIi5cIiksIFtrbm93bk5hbWVzW2ZpZWxkTmFtZV0sIG5vZGUubmFtZV0pKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGtub3duTmFtZXNbZmllbGROYW1lXSA9IG5vZGUubmFtZTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG4iLCJpbXBvcnQgeyBHcmFwaFFMRXJyb3IgfSBmcm9tIFwiLi4vLi4vZXJyb3IvR3JhcGhRTEVycm9yLm1qc1wiO1xuXG4vKipcbiAqIFVuaXF1ZSBvcGVyYXRpb24gbmFtZXNcbiAqXG4gKiBBIEdyYXBoUUwgZG9jdW1lbnQgaXMgb25seSB2YWxpZCBpZiBhbGwgZGVmaW5lZCBvcGVyYXRpb25zIGhhdmUgdW5pcXVlIG5hbWVzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gVW5pcXVlT3BlcmF0aW9uTmFtZXNSdWxlKGNvbnRleHQpIHtcbiAgdmFyIGtub3duT3BlcmF0aW9uTmFtZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICByZXR1cm4ge1xuICAgIE9wZXJhdGlvbkRlZmluaXRpb246IGZ1bmN0aW9uIE9wZXJhdGlvbkRlZmluaXRpb24obm9kZSkge1xuICAgICAgdmFyIG9wZXJhdGlvbk5hbWUgPSBub2RlLm5hbWU7XG5cbiAgICAgIGlmIChvcGVyYXRpb25OYW1lKSB7XG4gICAgICAgIGlmIChrbm93bk9wZXJhdGlvbk5hbWVzW29wZXJhdGlvbk5hbWUudmFsdWVdKSB7XG4gICAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihuZXcgR3JhcGhRTEVycm9yKFwiVGhlcmUgY2FuIGJlIG9ubHkgb25lIG9wZXJhdGlvbiBuYW1lZCBcXFwiXCIuY29uY2F0KG9wZXJhdGlvbk5hbWUudmFsdWUsIFwiXFxcIi5cIiksIFtrbm93bk9wZXJhdGlvbk5hbWVzW29wZXJhdGlvbk5hbWUudmFsdWVdLCBvcGVyYXRpb25OYW1lXSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGtub3duT3BlcmF0aW9uTmFtZXNbb3BlcmF0aW9uTmFtZS52YWx1ZV0gPSBvcGVyYXRpb25OYW1lO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuICAgIEZyYWdtZW50RGVmaW5pdGlvbjogZnVuY3Rpb24gRnJhZ21lbnREZWZpbml0aW9uKCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfTtcbn1cbiIsImltcG9ydCB7IEdyYXBoUUxFcnJvciB9IGZyb20gXCIuLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IubWpzXCI7XG5cbi8qKlxuICogVW5pcXVlIG9wZXJhdGlvbiB0eXBlc1xuICpcbiAqIEEgR3JhcGhRTCBkb2N1bWVudCBpcyBvbmx5IHZhbGlkIGlmIGl0IGhhcyBvbmx5IG9uZSB0eXBlIHBlciBvcGVyYXRpb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBVbmlxdWVPcGVyYXRpb25UeXBlc1J1bGUoY29udGV4dCkge1xuICB2YXIgc2NoZW1hID0gY29udGV4dC5nZXRTY2hlbWEoKTtcbiAgdmFyIGRlZmluZWRPcGVyYXRpb25UeXBlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHZhciBleGlzdGluZ09wZXJhdGlvblR5cGVzID0gc2NoZW1hID8ge1xuICAgIHF1ZXJ5OiBzY2hlbWEuZ2V0UXVlcnlUeXBlKCksXG4gICAgbXV0YXRpb246IHNjaGVtYS5nZXRNdXRhdGlvblR5cGUoKSxcbiAgICBzdWJzY3JpcHRpb246IHNjaGVtYS5nZXRTdWJzY3JpcHRpb25UeXBlKClcbiAgfSA6IHt9O1xuICByZXR1cm4ge1xuICAgIFNjaGVtYURlZmluaXRpb246IGNoZWNrT3BlcmF0aW9uVHlwZXMsXG4gICAgU2NoZW1hRXh0ZW5zaW9uOiBjaGVja09wZXJhdGlvblR5cGVzXG4gIH07XG5cbiAgZnVuY3Rpb24gY2hlY2tPcGVyYXRpb25UeXBlcyhub2RlKSB7XG4gICAgdmFyIF9ub2RlJG9wZXJhdGlvblR5cGVzO1xuXG4gICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHQgKFNlZTogJ2h0dHBzOi8vZ2l0aHViLmNvbS9ncmFwaHFsL2dyYXBocWwtanMvaXNzdWVzLzIyMDMnKVxuICAgIHZhciBvcGVyYXRpb25UeXBlc05vZGVzID0gKF9ub2RlJG9wZXJhdGlvblR5cGVzID0gbm9kZS5vcGVyYXRpb25UeXBlcykgIT09IG51bGwgJiYgX25vZGUkb3BlcmF0aW9uVHlwZXMgIT09IHZvaWQgMCA/IF9ub2RlJG9wZXJhdGlvblR5cGVzIDogW107XG5cbiAgICBmb3IgKHZhciBfaTIgPSAwOyBfaTIgPCBvcGVyYXRpb25UeXBlc05vZGVzLmxlbmd0aDsgX2kyKyspIHtcbiAgICAgIHZhciBvcGVyYXRpb25UeXBlID0gb3BlcmF0aW9uVHlwZXNOb2Rlc1tfaTJdO1xuICAgICAgdmFyIG9wZXJhdGlvbiA9IG9wZXJhdGlvblR5cGUub3BlcmF0aW9uO1xuICAgICAgdmFyIGFscmVhZHlEZWZpbmVkT3BlcmF0aW9uVHlwZSA9IGRlZmluZWRPcGVyYXRpb25UeXBlc1tvcGVyYXRpb25dO1xuXG4gICAgICBpZiAoZXhpc3RpbmdPcGVyYXRpb25UeXBlc1tvcGVyYXRpb25dKSB7XG4gICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IobmV3IEdyYXBoUUxFcnJvcihcIlR5cGUgZm9yIFwiLmNvbmNhdChvcGVyYXRpb24sIFwiIGFscmVhZHkgZGVmaW5lZCBpbiB0aGUgc2NoZW1hLiBJdCBjYW5ub3QgYmUgcmVkZWZpbmVkLlwiKSwgb3BlcmF0aW9uVHlwZSkpO1xuICAgICAgfSBlbHNlIGlmIChhbHJlYWR5RGVmaW5lZE9wZXJhdGlvblR5cGUpIHtcbiAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihuZXcgR3JhcGhRTEVycm9yKFwiVGhlcmUgY2FuIGJlIG9ubHkgb25lIFwiLmNvbmNhdChvcGVyYXRpb24sIFwiIHR5cGUgaW4gc2NoZW1hLlwiKSwgW2FscmVhZHlEZWZpbmVkT3BlcmF0aW9uVHlwZSwgb3BlcmF0aW9uVHlwZV0pKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlZmluZWRPcGVyYXRpb25UeXBlc1tvcGVyYXRpb25dID0gb3BlcmF0aW9uVHlwZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cbiIsImltcG9ydCB7IEdyYXBoUUxFcnJvciB9IGZyb20gXCIuLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IubWpzXCI7XG5cbi8qKlxuICogVW5pcXVlIHR5cGUgbmFtZXNcbiAqXG4gKiBBIEdyYXBoUUwgZG9jdW1lbnQgaXMgb25seSB2YWxpZCBpZiBhbGwgZGVmaW5lZCB0eXBlcyBoYXZlIHVuaXF1ZSBuYW1lcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIFVuaXF1ZVR5cGVOYW1lc1J1bGUoY29udGV4dCkge1xuICB2YXIga25vd25UeXBlTmFtZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2YXIgc2NoZW1hID0gY29udGV4dC5nZXRTY2hlbWEoKTtcbiAgcmV0dXJuIHtcbiAgICBTY2FsYXJUeXBlRGVmaW5pdGlvbjogY2hlY2tUeXBlTmFtZSxcbiAgICBPYmplY3RUeXBlRGVmaW5pdGlvbjogY2hlY2tUeXBlTmFtZSxcbiAgICBJbnRlcmZhY2VUeXBlRGVmaW5pdGlvbjogY2hlY2tUeXBlTmFtZSxcbiAgICBVbmlvblR5cGVEZWZpbml0aW9uOiBjaGVja1R5cGVOYW1lLFxuICAgIEVudW1UeXBlRGVmaW5pdGlvbjogY2hlY2tUeXBlTmFtZSxcbiAgICBJbnB1dE9iamVjdFR5cGVEZWZpbml0aW9uOiBjaGVja1R5cGVOYW1lXG4gIH07XG5cbiAgZnVuY3Rpb24gY2hlY2tUeXBlTmFtZShub2RlKSB7XG4gICAgdmFyIHR5cGVOYW1lID0gbm9kZS5uYW1lLnZhbHVlO1xuXG4gICAgaWYgKHNjaGVtYSAhPT0gbnVsbCAmJiBzY2hlbWEgIT09IHZvaWQgMCAmJiBzY2hlbWEuZ2V0VHlwZSh0eXBlTmFtZSkpIHtcbiAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IobmV3IEdyYXBoUUxFcnJvcihcIlR5cGUgXFxcIlwiLmNvbmNhdCh0eXBlTmFtZSwgXCJcXFwiIGFscmVhZHkgZXhpc3RzIGluIHRoZSBzY2hlbWEuIEl0IGNhbm5vdCBhbHNvIGJlIGRlZmluZWQgaW4gdGhpcyB0eXBlIGRlZmluaXRpb24uXCIpLCBub2RlLm5hbWUpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoa25vd25UeXBlTmFtZXNbdHlwZU5hbWVdKSB7XG4gICAgICBjb250ZXh0LnJlcG9ydEVycm9yKG5ldyBHcmFwaFFMRXJyb3IoXCJUaGVyZSBjYW4gYmUgb25seSBvbmUgdHlwZSBuYW1lZCBcXFwiXCIuY29uY2F0KHR5cGVOYW1lLCBcIlxcXCIuXCIpLCBba25vd25UeXBlTmFtZXNbdHlwZU5hbWVdLCBub2RlLm5hbWVdKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGtub3duVHlwZU5hbWVzW3R5cGVOYW1lXSA9IG5vZGUubmFtZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cbiIsImltcG9ydCB7IEdyYXBoUUxFcnJvciB9IGZyb20gXCIuLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IubWpzXCI7XG5cbi8qKlxuICogVW5pcXVlIHZhcmlhYmxlIG5hbWVzXG4gKlxuICogQSBHcmFwaFFMIG9wZXJhdGlvbiBpcyBvbmx5IHZhbGlkIGlmIGFsbCBpdHMgdmFyaWFibGVzIGFyZSB1bmlxdWVseSBuYW1lZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIFVuaXF1ZVZhcmlhYmxlTmFtZXNSdWxlKGNvbnRleHQpIHtcbiAgdmFyIGtub3duVmFyaWFibGVOYW1lcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHJldHVybiB7XG4gICAgT3BlcmF0aW9uRGVmaW5pdGlvbjogZnVuY3Rpb24gT3BlcmF0aW9uRGVmaW5pdGlvbigpIHtcbiAgICAgIGtub3duVmFyaWFibGVOYW1lcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgfSxcbiAgICBWYXJpYWJsZURlZmluaXRpb246IGZ1bmN0aW9uIFZhcmlhYmxlRGVmaW5pdGlvbihub2RlKSB7XG4gICAgICB2YXIgdmFyaWFibGVOYW1lID0gbm9kZS52YXJpYWJsZS5uYW1lLnZhbHVlO1xuXG4gICAgICBpZiAoa25vd25WYXJpYWJsZU5hbWVzW3ZhcmlhYmxlTmFtZV0pIHtcbiAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihuZXcgR3JhcGhRTEVycm9yKFwiVGhlcmUgY2FuIGJlIG9ubHkgb25lIHZhcmlhYmxlIG5hbWVkIFxcXCIkXCIuY29uY2F0KHZhcmlhYmxlTmFtZSwgXCJcXFwiLlwiKSwgW2tub3duVmFyaWFibGVOYW1lc1t2YXJpYWJsZU5hbWVdLCBub2RlLnZhcmlhYmxlLm5hbWVdKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBrbm93blZhcmlhYmxlTmFtZXNbdmFyaWFibGVOYW1lXSA9IG5vZGUudmFyaWFibGUubmFtZTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG4iLCJpbXBvcnQgb2JqZWN0VmFsdWVzIGZyb20gXCIuLi8uLi9wb2x5ZmlsbHMvb2JqZWN0VmFsdWVzLm1qc1wiO1xuaW1wb3J0IGtleU1hcCBmcm9tIFwiLi4vLi4vanN1dGlscy9rZXlNYXAubWpzXCI7XG5pbXBvcnQgaW5zcGVjdCBmcm9tIFwiLi4vLi4vanN1dGlscy9pbnNwZWN0Lm1qc1wiO1xuaW1wb3J0IGRpZFlvdU1lYW4gZnJvbSBcIi4uLy4uL2pzdXRpbHMvZGlkWW91TWVhbi5tanNcIjtcbmltcG9ydCBzdWdnZXN0aW9uTGlzdCBmcm9tIFwiLi4vLi4vanN1dGlscy9zdWdnZXN0aW9uTGlzdC5tanNcIjtcbmltcG9ydCB7IEdyYXBoUUxFcnJvciB9IGZyb20gXCIuLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IubWpzXCI7XG5pbXBvcnQgeyBwcmludCB9IGZyb20gXCIuLi8uLi9sYW5ndWFnZS9wcmludGVyLm1qc1wiO1xuaW1wb3J0IHsgaXNMZWFmVHlwZSwgaXNJbnB1dE9iamVjdFR5cGUsIGlzTGlzdFR5cGUsIGlzTm9uTnVsbFR5cGUsIGlzUmVxdWlyZWRJbnB1dEZpZWxkLCBnZXROdWxsYWJsZVR5cGUsIGdldE5hbWVkVHlwZSB9IGZyb20gXCIuLi8uLi90eXBlL2RlZmluaXRpb24ubWpzXCI7XG5cbi8qKlxuICogVmFsdWUgbGl0ZXJhbHMgb2YgY29ycmVjdCB0eXBlXG4gKlxuICogQSBHcmFwaFFMIGRvY3VtZW50IGlzIG9ubHkgdmFsaWQgaWYgYWxsIHZhbHVlIGxpdGVyYWxzIGFyZSBvZiB0aGUgdHlwZVxuICogZXhwZWN0ZWQgYXQgdGhlaXIgcG9zaXRpb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBWYWx1ZXNPZkNvcnJlY3RUeXBlUnVsZShjb250ZXh0KSB7XG4gIHJldHVybiB7XG4gICAgTGlzdFZhbHVlOiBmdW5jdGlvbiBMaXN0VmFsdWUobm9kZSkge1xuICAgICAgLy8gTm90ZTogVHlwZUluZm8gd2lsbCB0cmF2ZXJzZSBpbnRvIGEgbGlzdCdzIGl0ZW0gdHlwZSwgc28gbG9vayB0byB0aGVcbiAgICAgIC8vIHBhcmVudCBpbnB1dCB0eXBlIHRvIGNoZWNrIGlmIGl0IGlzIGEgbGlzdC5cbiAgICAgIHZhciB0eXBlID0gZ2V0TnVsbGFibGVUeXBlKGNvbnRleHQuZ2V0UGFyZW50SW5wdXRUeXBlKCkpO1xuXG4gICAgICBpZiAoIWlzTGlzdFR5cGUodHlwZSkpIHtcbiAgICAgICAgaXNWYWxpZFZhbHVlTm9kZShjb250ZXh0LCBub2RlKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBEb24ndCB0cmF2ZXJzZSBmdXJ0aGVyLlxuICAgICAgfVxuICAgIH0sXG4gICAgT2JqZWN0VmFsdWU6IGZ1bmN0aW9uIE9iamVjdFZhbHVlKG5vZGUpIHtcbiAgICAgIHZhciB0eXBlID0gZ2V0TmFtZWRUeXBlKGNvbnRleHQuZ2V0SW5wdXRUeXBlKCkpO1xuXG4gICAgICBpZiAoIWlzSW5wdXRPYmplY3RUeXBlKHR5cGUpKSB7XG4gICAgICAgIGlzVmFsaWRWYWx1ZU5vZGUoY29udGV4dCwgbm9kZSk7XG4gICAgICAgIHJldHVybiBmYWxzZTsgLy8gRG9uJ3QgdHJhdmVyc2UgZnVydGhlci5cbiAgICAgIH0gLy8gRW5zdXJlIGV2ZXJ5IHJlcXVpcmVkIGZpZWxkIGV4aXN0cy5cblxuXG4gICAgICB2YXIgZmllbGROb2RlTWFwID0ga2V5TWFwKG5vZGUuZmllbGRzLCBmdW5jdGlvbiAoZmllbGQpIHtcbiAgICAgICAgcmV0dXJuIGZpZWxkLm5hbWUudmFsdWU7XG4gICAgICB9KTtcblxuICAgICAgZm9yICh2YXIgX2kyID0gMCwgX29iamVjdFZhbHVlczIgPSBvYmplY3RWYWx1ZXModHlwZS5nZXRGaWVsZHMoKSk7IF9pMiA8IF9vYmplY3RWYWx1ZXMyLmxlbmd0aDsgX2kyKyspIHtcbiAgICAgICAgdmFyIGZpZWxkRGVmID0gX29iamVjdFZhbHVlczJbX2kyXTtcbiAgICAgICAgdmFyIGZpZWxkTm9kZSA9IGZpZWxkTm9kZU1hcFtmaWVsZERlZi5uYW1lXTtcblxuICAgICAgICBpZiAoIWZpZWxkTm9kZSAmJiBpc1JlcXVpcmVkSW5wdXRGaWVsZChmaWVsZERlZikpIHtcbiAgICAgICAgICB2YXIgdHlwZVN0ciA9IGluc3BlY3QoZmllbGREZWYudHlwZSk7XG4gICAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihuZXcgR3JhcGhRTEVycm9yKFwiRmllbGQgXFxcIlwiLmNvbmNhdCh0eXBlLm5hbWUsIFwiLlwiKS5jb25jYXQoZmllbGREZWYubmFtZSwgXCJcXFwiIG9mIHJlcXVpcmVkIHR5cGUgXFxcIlwiKS5jb25jYXQodHlwZVN0ciwgXCJcXFwiIHdhcyBub3QgcHJvdmlkZWQuXCIpLCBub2RlKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIE9iamVjdEZpZWxkOiBmdW5jdGlvbiBPYmplY3RGaWVsZChub2RlKSB7XG4gICAgICB2YXIgcGFyZW50VHlwZSA9IGdldE5hbWVkVHlwZShjb250ZXh0LmdldFBhcmVudElucHV0VHlwZSgpKTtcbiAgICAgIHZhciBmaWVsZFR5cGUgPSBjb250ZXh0LmdldElucHV0VHlwZSgpO1xuXG4gICAgICBpZiAoIWZpZWxkVHlwZSAmJiBpc0lucHV0T2JqZWN0VHlwZShwYXJlbnRUeXBlKSkge1xuICAgICAgICB2YXIgc3VnZ2VzdGlvbnMgPSBzdWdnZXN0aW9uTGlzdChub2RlLm5hbWUudmFsdWUsIE9iamVjdC5rZXlzKHBhcmVudFR5cGUuZ2V0RmllbGRzKCkpKTtcbiAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihuZXcgR3JhcGhRTEVycm9yKFwiRmllbGQgXFxcIlwiLmNvbmNhdChub2RlLm5hbWUudmFsdWUsIFwiXFxcIiBpcyBub3QgZGVmaW5lZCBieSB0eXBlIFxcXCJcIikuY29uY2F0KHBhcmVudFR5cGUubmFtZSwgXCJcXFwiLlwiKSArIGRpZFlvdU1lYW4oc3VnZ2VzdGlvbnMpLCBub2RlKSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBOdWxsVmFsdWU6IGZ1bmN0aW9uIE51bGxWYWx1ZShub2RlKSB7XG4gICAgICB2YXIgdHlwZSA9IGNvbnRleHQuZ2V0SW5wdXRUeXBlKCk7XG5cbiAgICAgIGlmIChpc05vbk51bGxUeXBlKHR5cGUpKSB7XG4gICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IobmV3IEdyYXBoUUxFcnJvcihcIkV4cGVjdGVkIHZhbHVlIG9mIHR5cGUgXFxcIlwiLmNvbmNhdChpbnNwZWN0KHR5cGUpLCBcIlxcXCIsIGZvdW5kIFwiKS5jb25jYXQocHJpbnQobm9kZSksIFwiLlwiKSwgbm9kZSkpO1xuICAgICAgfVxuICAgIH0sXG4gICAgRW51bVZhbHVlOiBmdW5jdGlvbiBFbnVtVmFsdWUobm9kZSkge1xuICAgICAgcmV0dXJuIGlzVmFsaWRWYWx1ZU5vZGUoY29udGV4dCwgbm9kZSk7XG4gICAgfSxcbiAgICBJbnRWYWx1ZTogZnVuY3Rpb24gSW50VmFsdWUobm9kZSkge1xuICAgICAgcmV0dXJuIGlzVmFsaWRWYWx1ZU5vZGUoY29udGV4dCwgbm9kZSk7XG4gICAgfSxcbiAgICBGbG9hdFZhbHVlOiBmdW5jdGlvbiBGbG9hdFZhbHVlKG5vZGUpIHtcbiAgICAgIHJldHVybiBpc1ZhbGlkVmFsdWVOb2RlKGNvbnRleHQsIG5vZGUpO1xuICAgIH0sXG4gICAgU3RyaW5nVmFsdWU6IGZ1bmN0aW9uIFN0cmluZ1ZhbHVlKG5vZGUpIHtcbiAgICAgIHJldHVybiBpc1ZhbGlkVmFsdWVOb2RlKGNvbnRleHQsIG5vZGUpO1xuICAgIH0sXG4gICAgQm9vbGVhblZhbHVlOiBmdW5jdGlvbiBCb29sZWFuVmFsdWUobm9kZSkge1xuICAgICAgcmV0dXJuIGlzVmFsaWRWYWx1ZU5vZGUoY29udGV4dCwgbm9kZSk7XG4gICAgfVxuICB9O1xufVxuLyoqXG4gKiBBbnkgdmFsdWUgbGl0ZXJhbCBtYXkgYmUgYSB2YWxpZCByZXByZXNlbnRhdGlvbiBvZiBhIFNjYWxhciwgZGVwZW5kaW5nIG9uXG4gKiB0aGF0IHNjYWxhciB0eXBlLlxuICovXG5cbmZ1bmN0aW9uIGlzVmFsaWRWYWx1ZU5vZGUoY29udGV4dCwgbm9kZSkge1xuICAvLyBSZXBvcnQgYW55IGVycm9yIGF0IHRoZSBmdWxsIHR5cGUgZXhwZWN0ZWQgYnkgdGhlIGxvY2F0aW9uLlxuICB2YXIgbG9jYXRpb25UeXBlID0gY29udGV4dC5nZXRJbnB1dFR5cGUoKTtcblxuICBpZiAoIWxvY2F0aW9uVHlwZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciB0eXBlID0gZ2V0TmFtZWRUeXBlKGxvY2F0aW9uVHlwZSk7XG5cbiAgaWYgKCFpc0xlYWZUeXBlKHR5cGUpKSB7XG4gICAgdmFyIHR5cGVTdHIgPSBpbnNwZWN0KGxvY2F0aW9uVHlwZSk7XG4gICAgY29udGV4dC5yZXBvcnRFcnJvcihuZXcgR3JhcGhRTEVycm9yKFwiRXhwZWN0ZWQgdmFsdWUgb2YgdHlwZSBcXFwiXCIuY29uY2F0KHR5cGVTdHIsIFwiXFxcIiwgZm91bmQgXCIpLmNvbmNhdChwcmludChub2RlKSwgXCIuXCIpLCBub2RlKSk7XG4gICAgcmV0dXJuO1xuICB9IC8vIFNjYWxhcnMgYW5kIEVudW1zIGRldGVybWluZSBpZiBhIGxpdGVyYWwgdmFsdWUgaXMgdmFsaWQgdmlhIHBhcnNlTGl0ZXJhbCgpLFxuICAvLyB3aGljaCBtYXkgdGhyb3cgb3IgcmV0dXJuIGFuIGludmFsaWQgdmFsdWUgdG8gaW5kaWNhdGUgZmFpbHVyZS5cblxuXG4gIHRyeSB7XG4gICAgdmFyIHBhcnNlUmVzdWx0ID0gdHlwZS5wYXJzZUxpdGVyYWwobm9kZSwgdW5kZWZpbmVkXG4gICAgLyogdmFyaWFibGVzICovXG4gICAgKTtcblxuICAgIGlmIChwYXJzZVJlc3VsdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YXIgX3R5cGVTdHIgPSBpbnNwZWN0KGxvY2F0aW9uVHlwZSk7XG5cbiAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IobmV3IEdyYXBoUUxFcnJvcihcIkV4cGVjdGVkIHZhbHVlIG9mIHR5cGUgXFxcIlwiLmNvbmNhdChfdHlwZVN0ciwgXCJcXFwiLCBmb3VuZCBcIikuY29uY2F0KHByaW50KG5vZGUpLCBcIi5cIiksIG5vZGUpKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgdmFyIF90eXBlU3RyMiA9IGluc3BlY3QobG9jYXRpb25UeXBlKTtcblxuICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEdyYXBoUUxFcnJvcikge1xuICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihlcnJvcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IobmV3IEdyYXBoUUxFcnJvcihcIkV4cGVjdGVkIHZhbHVlIG9mIHR5cGUgXFxcIlwiLmNvbmNhdChfdHlwZVN0cjIsIFwiXFxcIiwgZm91bmQgXCIpLmNvbmNhdChwcmludChub2RlKSwgXCI7IFwiKSArIGVycm9yLm1lc3NhZ2UsIG5vZGUsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGVycm9yKSk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBHcmFwaFFMRXJyb3IgfSBmcm9tIFwiLi4vLi4vZXJyb3IvR3JhcGhRTEVycm9yLm1qc1wiO1xuaW1wb3J0IHsgcHJpbnQgfSBmcm9tIFwiLi4vLi4vbGFuZ3VhZ2UvcHJpbnRlci5tanNcIjtcbmltcG9ydCB7IGlzSW5wdXRUeXBlIH0gZnJvbSBcIi4uLy4uL3R5cGUvZGVmaW5pdGlvbi5tanNcIjtcbmltcG9ydCB7IHR5cGVGcm9tQVNUIH0gZnJvbSBcIi4uLy4uL3V0aWxpdGllcy90eXBlRnJvbUFTVC5tanNcIjtcblxuLyoqXG4gKiBWYXJpYWJsZXMgYXJlIGlucHV0IHR5cGVzXG4gKlxuICogQSBHcmFwaFFMIG9wZXJhdGlvbiBpcyBvbmx5IHZhbGlkIGlmIGFsbCB0aGUgdmFyaWFibGVzIGl0IGRlZmluZXMgYXJlIG9mXG4gKiBpbnB1dCB0eXBlcyAoc2NhbGFyLCBlbnVtLCBvciBpbnB1dCBvYmplY3QpLlxuICovXG5leHBvcnQgZnVuY3Rpb24gVmFyaWFibGVzQXJlSW5wdXRUeXBlc1J1bGUoY29udGV4dCkge1xuICByZXR1cm4ge1xuICAgIFZhcmlhYmxlRGVmaW5pdGlvbjogZnVuY3Rpb24gVmFyaWFibGVEZWZpbml0aW9uKG5vZGUpIHtcbiAgICAgIHZhciB0eXBlID0gdHlwZUZyb21BU1QoY29udGV4dC5nZXRTY2hlbWEoKSwgbm9kZS50eXBlKTtcblxuICAgICAgaWYgKHR5cGUgJiYgIWlzSW5wdXRUeXBlKHR5cGUpKSB7XG4gICAgICAgIHZhciB2YXJpYWJsZU5hbWUgPSBub2RlLnZhcmlhYmxlLm5hbWUudmFsdWU7XG4gICAgICAgIHZhciB0eXBlTmFtZSA9IHByaW50KG5vZGUudHlwZSk7XG4gICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IobmV3IEdyYXBoUUxFcnJvcihcIlZhcmlhYmxlIFxcXCIkXCIuY29uY2F0KHZhcmlhYmxlTmFtZSwgXCJcXFwiIGNhbm5vdCBiZSBub24taW5wdXQgdHlwZSBcXFwiXCIpLmNvbmNhdCh0eXBlTmFtZSwgXCJcXFwiLlwiKSwgbm9kZS50eXBlKSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuIiwiaW1wb3J0IGluc3BlY3QgZnJvbSBcIi4uLy4uL2pzdXRpbHMvaW5zcGVjdC5tanNcIjtcbmltcG9ydCB7IEdyYXBoUUxFcnJvciB9IGZyb20gXCIuLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IubWpzXCI7XG5pbXBvcnQgeyBLaW5kIH0gZnJvbSBcIi4uLy4uL2xhbmd1YWdlL2tpbmRzLm1qc1wiO1xuaW1wb3J0IHsgaXNOb25OdWxsVHlwZSB9IGZyb20gXCIuLi8uLi90eXBlL2RlZmluaXRpb24ubWpzXCI7XG5pbXBvcnQgeyB0eXBlRnJvbUFTVCB9IGZyb20gXCIuLi8uLi91dGlsaXRpZXMvdHlwZUZyb21BU1QubWpzXCI7XG5pbXBvcnQgeyBpc1R5cGVTdWJUeXBlT2YgfSBmcm9tIFwiLi4vLi4vdXRpbGl0aWVzL3R5cGVDb21wYXJhdG9ycy5tanNcIjtcblxuLyoqXG4gKiBWYXJpYWJsZXMgcGFzc2VkIHRvIGZpZWxkIGFyZ3VtZW50cyBjb25mb3JtIHRvIHR5cGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIFZhcmlhYmxlc0luQWxsb3dlZFBvc2l0aW9uUnVsZShjb250ZXh0KSB7XG4gIHZhciB2YXJEZWZNYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICByZXR1cm4ge1xuICAgIE9wZXJhdGlvbkRlZmluaXRpb246IHtcbiAgICAgIGVudGVyOiBmdW5jdGlvbiBlbnRlcigpIHtcbiAgICAgICAgdmFyRGVmTWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgIH0sXG4gICAgICBsZWF2ZTogZnVuY3Rpb24gbGVhdmUob3BlcmF0aW9uKSB7XG4gICAgICAgIHZhciB1c2FnZXMgPSBjb250ZXh0LmdldFJlY3Vyc2l2ZVZhcmlhYmxlVXNhZ2VzKG9wZXJhdGlvbik7XG5cbiAgICAgICAgZm9yICh2YXIgX2kyID0gMDsgX2kyIDwgdXNhZ2VzLmxlbmd0aDsgX2kyKyspIHtcbiAgICAgICAgICB2YXIgX3JlZjIgPSB1c2FnZXNbX2kyXTtcbiAgICAgICAgICB2YXIgbm9kZSA9IF9yZWYyLm5vZGU7XG4gICAgICAgICAgdmFyIHR5cGUgPSBfcmVmMi50eXBlO1xuICAgICAgICAgIHZhciBkZWZhdWx0VmFsdWUgPSBfcmVmMi5kZWZhdWx0VmFsdWU7XG4gICAgICAgICAgdmFyIHZhck5hbWUgPSBub2RlLm5hbWUudmFsdWU7XG4gICAgICAgICAgdmFyIHZhckRlZiA9IHZhckRlZk1hcFt2YXJOYW1lXTtcblxuICAgICAgICAgIGlmICh2YXJEZWYgJiYgdHlwZSkge1xuICAgICAgICAgICAgLy8gQSB2YXIgdHlwZSBpcyBhbGxvd2VkIGlmIGl0IGlzIHRoZSBzYW1lIG9yIG1vcmUgc3RyaWN0IChlLmcuIGlzXG4gICAgICAgICAgICAvLyBhIHN1YnR5cGUgb2YpIHRoYW4gdGhlIGV4cGVjdGVkIHR5cGUuIEl0IGNhbiBiZSBtb3JlIHN0cmljdCBpZlxuICAgICAgICAgICAgLy8gdGhlIHZhcmlhYmxlIHR5cGUgaXMgbm9uLW51bGwgd2hlbiB0aGUgZXhwZWN0ZWQgdHlwZSBpcyBudWxsYWJsZS5cbiAgICAgICAgICAgIC8vIElmIGJvdGggYXJlIGxpc3QgdHlwZXMsIHRoZSB2YXJpYWJsZSBpdGVtIHR5cGUgY2FuIGJlIG1vcmUgc3RyaWN0XG4gICAgICAgICAgICAvLyB0aGFuIHRoZSBleHBlY3RlZCBpdGVtIHR5cGUgKGNvbnRyYXZhcmlhbnQpLlxuICAgICAgICAgICAgdmFyIHNjaGVtYSA9IGNvbnRleHQuZ2V0U2NoZW1hKCk7XG4gICAgICAgICAgICB2YXIgdmFyVHlwZSA9IHR5cGVGcm9tQVNUKHNjaGVtYSwgdmFyRGVmLnR5cGUpO1xuXG4gICAgICAgICAgICBpZiAodmFyVHlwZSAmJiAhYWxsb3dlZFZhcmlhYmxlVXNhZ2Uoc2NoZW1hLCB2YXJUeXBlLCB2YXJEZWYuZGVmYXVsdFZhbHVlLCB0eXBlLCBkZWZhdWx0VmFsdWUpKSB7XG4gICAgICAgICAgICAgIHZhciB2YXJUeXBlU3RyID0gaW5zcGVjdCh2YXJUeXBlKTtcbiAgICAgICAgICAgICAgdmFyIHR5cGVTdHIgPSBpbnNwZWN0KHR5cGUpO1xuICAgICAgICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKG5ldyBHcmFwaFFMRXJyb3IoXCJWYXJpYWJsZSBcXFwiJFwiLmNvbmNhdCh2YXJOYW1lLCBcIlxcXCIgb2YgdHlwZSBcXFwiXCIpLmNvbmNhdCh2YXJUeXBlU3RyLCBcIlxcXCIgdXNlZCBpbiBwb3NpdGlvbiBleHBlY3RpbmcgdHlwZSBcXFwiXCIpLmNvbmNhdCh0eXBlU3RyLCBcIlxcXCIuXCIpLCBbdmFyRGVmLCBub2RlXSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgVmFyaWFibGVEZWZpbml0aW9uOiBmdW5jdGlvbiBWYXJpYWJsZURlZmluaXRpb24obm9kZSkge1xuICAgICAgdmFyRGVmTWFwW25vZGUudmFyaWFibGUubmFtZS52YWx1ZV0gPSBub2RlO1xuICAgIH1cbiAgfTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSB2YXJpYWJsZSBpcyBhbGxvd2VkIGluIHRoZSBsb2NhdGlvbiBpdCB3YXMgZm91bmQsXG4gKiB3aGljaCBpbmNsdWRlcyBjb25zaWRlcmluZyBpZiBkZWZhdWx0IHZhbHVlcyBleGlzdCBmb3IgZWl0aGVyIHRoZSB2YXJpYWJsZVxuICogb3IgdGhlIGxvY2F0aW9uIGF0IHdoaWNoIGl0IGlzIGxvY2F0ZWQuXG4gKi9cblxuZnVuY3Rpb24gYWxsb3dlZFZhcmlhYmxlVXNhZ2Uoc2NoZW1hLCB2YXJUeXBlLCB2YXJEZWZhdWx0VmFsdWUsIGxvY2F0aW9uVHlwZSwgbG9jYXRpb25EZWZhdWx0VmFsdWUpIHtcbiAgaWYgKGlzTm9uTnVsbFR5cGUobG9jYXRpb25UeXBlKSAmJiAhaXNOb25OdWxsVHlwZSh2YXJUeXBlKSkge1xuICAgIHZhciBoYXNOb25OdWxsVmFyaWFibGVEZWZhdWx0VmFsdWUgPSB2YXJEZWZhdWx0VmFsdWUgIT0gbnVsbCAmJiB2YXJEZWZhdWx0VmFsdWUua2luZCAhPT0gS2luZC5OVUxMO1xuICAgIHZhciBoYXNMb2NhdGlvbkRlZmF1bHRWYWx1ZSA9IGxvY2F0aW9uRGVmYXVsdFZhbHVlICE9PSB1bmRlZmluZWQ7XG5cbiAgICBpZiAoIWhhc05vbk51bGxWYXJpYWJsZURlZmF1bHRWYWx1ZSAmJiAhaGFzTG9jYXRpb25EZWZhdWx0VmFsdWUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgbnVsbGFibGVMb2NhdGlvblR5cGUgPSBsb2NhdGlvblR5cGUub2ZUeXBlO1xuICAgIHJldHVybiBpc1R5cGVTdWJUeXBlT2Yoc2NoZW1hLCB2YXJUeXBlLCBudWxsYWJsZUxvY2F0aW9uVHlwZSk7XG4gIH1cblxuICByZXR1cm4gaXNUeXBlU3ViVHlwZU9mKHNjaGVtYSwgdmFyVHlwZSwgbG9jYXRpb25UeXBlKTtcbn1cbiIsImltcG9ydCBpbnZhcmlhbnQgZnJvbSBcIi4uLy4uLy4uL2pzdXRpbHMvaW52YXJpYW50Lm1qc1wiO1xuaW1wb3J0IHsgR3JhcGhRTEVycm9yIH0gZnJvbSBcIi4uLy4uLy4uL2Vycm9yL0dyYXBoUUxFcnJvci5tanNcIjtcbmltcG9ydCB7IGdldE5hbWVkVHlwZSwgaXNJbnB1dE9iamVjdFR5cGUgfSBmcm9tIFwiLi4vLi4vLi4vdHlwZS9kZWZpbml0aW9uLm1qc1wiO1xuXG4vKipcbiAqIE5vIGRlcHJlY2F0ZWRcbiAqXG4gKiBBIEdyYXBoUUwgZG9jdW1lbnQgaXMgb25seSB2YWxpZCBpZiBhbGwgc2VsZWN0ZWQgZmllbGRzIGFuZCBhbGwgdXNlZCBlbnVtIHZhbHVlcyBoYXZlIG5vdCBiZWVuXG4gKiBkZXByZWNhdGVkLlxuICpcbiAqIE5vdGU6IFRoaXMgcnVsZSBpcyBvcHRpb25hbCBhbmQgaXMgbm90IHBhcnQgb2YgdGhlIFZhbGlkYXRpb24gc2VjdGlvbiBvZiB0aGUgR3JhcGhRTFxuICogU3BlY2lmaWNhdGlvbi4gVGhlIG1haW4gcHVycG9zZSBvZiB0aGlzIHJ1bGUgaXMgZGV0ZWN0aW9uIG9mIGRlcHJlY2F0ZWQgdXNhZ2VzIGFuZCBub3RcbiAqIG5lY2Vzc2FyaWx5IHRvIGZvcmJpZCB0aGVpciB1c2Ugd2hlbiBxdWVyeWluZyBhIHNlcnZpY2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBOb0RlcHJlY2F0ZWRDdXN0b21SdWxlKGNvbnRleHQpIHtcbiAgcmV0dXJuIHtcbiAgICBGaWVsZDogZnVuY3Rpb24gRmllbGQobm9kZSkge1xuICAgICAgdmFyIGZpZWxkRGVmID0gY29udGV4dC5nZXRGaWVsZERlZigpO1xuICAgICAgdmFyIGRlcHJlY2F0aW9uUmVhc29uID0gZmllbGREZWYgPT09IG51bGwgfHwgZmllbGREZWYgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGZpZWxkRGVmLmRlcHJlY2F0aW9uUmVhc29uO1xuXG4gICAgICBpZiAoZmllbGREZWYgJiYgZGVwcmVjYXRpb25SZWFzb24gIT0gbnVsbCkge1xuICAgICAgICB2YXIgcGFyZW50VHlwZSA9IGNvbnRleHQuZ2V0UGFyZW50VHlwZSgpO1xuICAgICAgICBwYXJlbnRUeXBlICE9IG51bGwgfHwgaW52YXJpYW50KDApO1xuICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKG5ldyBHcmFwaFFMRXJyb3IoXCJUaGUgZmllbGQgXCIuY29uY2F0KHBhcmVudFR5cGUubmFtZSwgXCIuXCIpLmNvbmNhdChmaWVsZERlZi5uYW1lLCBcIiBpcyBkZXByZWNhdGVkLiBcIikuY29uY2F0KGRlcHJlY2F0aW9uUmVhc29uKSwgbm9kZSkpO1xuICAgICAgfVxuICAgIH0sXG4gICAgQXJndW1lbnQ6IGZ1bmN0aW9uIEFyZ3VtZW50KG5vZGUpIHtcbiAgICAgIHZhciBhcmdEZWYgPSBjb250ZXh0LmdldEFyZ3VtZW50KCk7XG4gICAgICB2YXIgZGVwcmVjYXRpb25SZWFzb24gPSBhcmdEZWYgPT09IG51bGwgfHwgYXJnRGVmID09PSB2b2lkIDAgPyB2b2lkIDAgOiBhcmdEZWYuZGVwcmVjYXRpb25SZWFzb247XG5cbiAgICAgIGlmIChhcmdEZWYgJiYgZGVwcmVjYXRpb25SZWFzb24gIT0gbnVsbCkge1xuICAgICAgICB2YXIgZGlyZWN0aXZlRGVmID0gY29udGV4dC5nZXREaXJlY3RpdmUoKTtcblxuICAgICAgICBpZiAoZGlyZWN0aXZlRGVmICE9IG51bGwpIHtcbiAgICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKG5ldyBHcmFwaFFMRXJyb3IoXCJEaXJlY3RpdmUgXFxcIkBcIi5jb25jYXQoZGlyZWN0aXZlRGVmLm5hbWUsIFwiXFxcIiBhcmd1bWVudCBcXFwiXCIpLmNvbmNhdChhcmdEZWYubmFtZSwgXCJcXFwiIGlzIGRlcHJlY2F0ZWQuIFwiKS5jb25jYXQoZGVwcmVjYXRpb25SZWFzb24pLCBub2RlKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHBhcmVudFR5cGUgPSBjb250ZXh0LmdldFBhcmVudFR5cGUoKTtcbiAgICAgICAgICB2YXIgZmllbGREZWYgPSBjb250ZXh0LmdldEZpZWxkRGVmKCk7XG4gICAgICAgICAgcGFyZW50VHlwZSAhPSBudWxsICYmIGZpZWxkRGVmICE9IG51bGwgfHwgaW52YXJpYW50KDApO1xuICAgICAgICAgIGNvbnRleHQucmVwb3J0RXJyb3IobmV3IEdyYXBoUUxFcnJvcihcIkZpZWxkIFxcXCJcIi5jb25jYXQocGFyZW50VHlwZS5uYW1lLCBcIi5cIikuY29uY2F0KGZpZWxkRGVmLm5hbWUsIFwiXFxcIiBhcmd1bWVudCBcXFwiXCIpLmNvbmNhdChhcmdEZWYubmFtZSwgXCJcXFwiIGlzIGRlcHJlY2F0ZWQuIFwiKS5jb25jYXQoZGVwcmVjYXRpb25SZWFzb24pLCBub2RlKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIE9iamVjdEZpZWxkOiBmdW5jdGlvbiBPYmplY3RGaWVsZChub2RlKSB7XG4gICAgICB2YXIgaW5wdXRPYmplY3REZWYgPSBnZXROYW1lZFR5cGUoY29udGV4dC5nZXRQYXJlbnRJbnB1dFR5cGUoKSk7XG5cbiAgICAgIGlmIChpc0lucHV0T2JqZWN0VHlwZShpbnB1dE9iamVjdERlZikpIHtcbiAgICAgICAgdmFyIGlucHV0RmllbGREZWYgPSBpbnB1dE9iamVjdERlZi5nZXRGaWVsZHMoKVtub2RlLm5hbWUudmFsdWVdOyAvLyBmbG93bGludC1uZXh0LWxpbmUgdW5uZWNlc3Nhcnktb3B0aW9uYWwtY2hhaW46b2ZmXG5cbiAgICAgICAgdmFyIGRlcHJlY2F0aW9uUmVhc29uID0gaW5wdXRGaWVsZERlZiA9PT0gbnVsbCB8fCBpbnB1dEZpZWxkRGVmID09PSB2b2lkIDAgPyB2b2lkIDAgOiBpbnB1dEZpZWxkRGVmLmRlcHJlY2F0aW9uUmVhc29uO1xuXG4gICAgICAgIGlmIChkZXByZWNhdGlvblJlYXNvbiAhPSBudWxsKSB7XG4gICAgICAgICAgY29udGV4dC5yZXBvcnRFcnJvcihuZXcgR3JhcGhRTEVycm9yKFwiVGhlIGlucHV0IGZpZWxkIFwiLmNvbmNhdChpbnB1dE9iamVjdERlZi5uYW1lLCBcIi5cIikuY29uY2F0KGlucHV0RmllbGREZWYubmFtZSwgXCIgaXMgZGVwcmVjYXRlZC4gXCIpLmNvbmNhdChkZXByZWNhdGlvblJlYXNvbiksIG5vZGUpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgRW51bVZhbHVlOiBmdW5jdGlvbiBFbnVtVmFsdWUobm9kZSkge1xuICAgICAgdmFyIGVudW1WYWx1ZURlZiA9IGNvbnRleHQuZ2V0RW51bVZhbHVlKCk7XG4gICAgICB2YXIgZGVwcmVjYXRpb25SZWFzb24gPSBlbnVtVmFsdWVEZWYgPT09IG51bGwgfHwgZW51bVZhbHVlRGVmID09PSB2b2lkIDAgPyB2b2lkIDAgOiBlbnVtVmFsdWVEZWYuZGVwcmVjYXRpb25SZWFzb247XG5cbiAgICAgIGlmIChlbnVtVmFsdWVEZWYgJiYgZGVwcmVjYXRpb25SZWFzb24gIT0gbnVsbCkge1xuICAgICAgICB2YXIgZW51bVR5cGVEZWYgPSBnZXROYW1lZFR5cGUoY29udGV4dC5nZXRJbnB1dFR5cGUoKSk7XG4gICAgICAgIGVudW1UeXBlRGVmICE9IG51bGwgfHwgaW52YXJpYW50KDApO1xuICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKG5ldyBHcmFwaFFMRXJyb3IoXCJUaGUgZW51bSB2YWx1ZSBcXFwiXCIuY29uY2F0KGVudW1UeXBlRGVmLm5hbWUsIFwiLlwiKS5jb25jYXQoZW51bVZhbHVlRGVmLm5hbWUsIFwiXFxcIiBpcyBkZXByZWNhdGVkLiBcIikuY29uY2F0KGRlcHJlY2F0aW9uUmVhc29uKSwgbm9kZSkpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cbiIsImltcG9ydCB7IEdyYXBoUUxFcnJvciB9IGZyb20gXCIuLi8uLi8uLi9lcnJvci9HcmFwaFFMRXJyb3IubWpzXCI7XG5pbXBvcnQgeyBnZXROYW1lZFR5cGUgfSBmcm9tIFwiLi4vLi4vLi4vdHlwZS9kZWZpbml0aW9uLm1qc1wiO1xuaW1wb3J0IHsgaXNJbnRyb3NwZWN0aW9uVHlwZSB9IGZyb20gXCIuLi8uLi8uLi90eXBlL2ludHJvc3BlY3Rpb24ubWpzXCI7XG5cbi8qKlxuICogUHJvaGliaXQgaW50cm9zcGVjdGlvbiBxdWVyaWVzXG4gKlxuICogQSBHcmFwaFFMIGRvY3VtZW50IGlzIG9ubHkgdmFsaWQgaWYgYWxsIGZpZWxkcyBzZWxlY3RlZCBhcmUgbm90IGZpZWxkcyB0aGF0XG4gKiByZXR1cm4gYW4gaW50cm9zcGVjdGlvbiB0eXBlLlxuICpcbiAqIE5vdGU6IFRoaXMgcnVsZSBpcyBvcHRpb25hbCBhbmQgaXMgbm90IHBhcnQgb2YgdGhlIFZhbGlkYXRpb24gc2VjdGlvbiBvZiB0aGVcbiAqIEdyYXBoUUwgU3BlY2lmaWNhdGlvbi4gVGhpcyBydWxlIGVmZmVjdGl2ZWx5IGRpc2FibGVzIGludHJvc3BlY3Rpb24sIHdoaWNoXG4gKiBkb2VzIG5vdCByZWZsZWN0IGJlc3QgcHJhY3RpY2VzIGFuZCBzaG91bGQgb25seSBiZSBkb25lIGlmIGFic29sdXRlbHkgbmVjZXNzYXJ5LlxuICovXG5leHBvcnQgZnVuY3Rpb24gTm9TY2hlbWFJbnRyb3NwZWN0aW9uQ3VzdG9tUnVsZShjb250ZXh0KSB7XG4gIHJldHVybiB7XG4gICAgRmllbGQ6IGZ1bmN0aW9uIEZpZWxkKG5vZGUpIHtcbiAgICAgIHZhciB0eXBlID0gZ2V0TmFtZWRUeXBlKGNvbnRleHQuZ2V0VHlwZSgpKTtcblxuICAgICAgaWYgKHR5cGUgJiYgaXNJbnRyb3NwZWN0aW9uVHlwZSh0eXBlKSkge1xuICAgICAgICBjb250ZXh0LnJlcG9ydEVycm9yKG5ldyBHcmFwaFFMRXJyb3IoXCJHcmFwaFFMIGludHJvc3BlY3Rpb24gaGFzIGJlZW4gZGlzYWJsZWQsIGJ1dCB0aGUgcmVxdWVzdGVkIHF1ZXJ5IGNvbnRhaW5lZCB0aGUgZmllbGQgXFxcIlwiLmNvbmNhdChub2RlLm5hbWUudmFsdWUsIFwiXFxcIi5cIiksIG5vZGUpKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG4iLCIvLyBTcGVjIFNlY3Rpb246IFwiRXhlY3V0YWJsZSBEZWZpbml0aW9uc1wiXG5pbXBvcnQgeyBFeGVjdXRhYmxlRGVmaW5pdGlvbnNSdWxlIH0gZnJvbSBcIi4vcnVsZXMvRXhlY3V0YWJsZURlZmluaXRpb25zUnVsZS5tanNcIjsgLy8gU3BlYyBTZWN0aW9uOiBcIk9wZXJhdGlvbiBOYW1lIFVuaXF1ZW5lc3NcIlxuXG5pbXBvcnQgeyBVbmlxdWVPcGVyYXRpb25OYW1lc1J1bGUgfSBmcm9tIFwiLi9ydWxlcy9VbmlxdWVPcGVyYXRpb25OYW1lc1J1bGUubWpzXCI7IC8vIFNwZWMgU2VjdGlvbjogXCJMb25lIEFub255bW91cyBPcGVyYXRpb25cIlxuXG5pbXBvcnQgeyBMb25lQW5vbnltb3VzT3BlcmF0aW9uUnVsZSB9IGZyb20gXCIuL3J1bGVzL0xvbmVBbm9ueW1vdXNPcGVyYXRpb25SdWxlLm1qc1wiOyAvLyBTcGVjIFNlY3Rpb246IFwiU3Vic2NyaXB0aW9ucyB3aXRoIFNpbmdsZSBSb290IEZpZWxkXCJcblxuaW1wb3J0IHsgU2luZ2xlRmllbGRTdWJzY3JpcHRpb25zUnVsZSB9IGZyb20gXCIuL3J1bGVzL1NpbmdsZUZpZWxkU3Vic2NyaXB0aW9uc1J1bGUubWpzXCI7IC8vIFNwZWMgU2VjdGlvbjogXCJGcmFnbWVudCBTcHJlYWQgVHlwZSBFeGlzdGVuY2VcIlxuXG5pbXBvcnQgeyBLbm93blR5cGVOYW1lc1J1bGUgfSBmcm9tIFwiLi9ydWxlcy9Lbm93blR5cGVOYW1lc1J1bGUubWpzXCI7IC8vIFNwZWMgU2VjdGlvbjogXCJGcmFnbWVudHMgb24gQ29tcG9zaXRlIFR5cGVzXCJcblxuaW1wb3J0IHsgRnJhZ21lbnRzT25Db21wb3NpdGVUeXBlc1J1bGUgfSBmcm9tIFwiLi9ydWxlcy9GcmFnbWVudHNPbkNvbXBvc2l0ZVR5cGVzUnVsZS5tanNcIjsgLy8gU3BlYyBTZWN0aW9uOiBcIlZhcmlhYmxlcyBhcmUgSW5wdXQgVHlwZXNcIlxuXG5pbXBvcnQgeyBWYXJpYWJsZXNBcmVJbnB1dFR5cGVzUnVsZSB9IGZyb20gXCIuL3J1bGVzL1ZhcmlhYmxlc0FyZUlucHV0VHlwZXNSdWxlLm1qc1wiOyAvLyBTcGVjIFNlY3Rpb246IFwiTGVhZiBGaWVsZCBTZWxlY3Rpb25zXCJcblxuaW1wb3J0IHsgU2NhbGFyTGVhZnNSdWxlIH0gZnJvbSBcIi4vcnVsZXMvU2NhbGFyTGVhZnNSdWxlLm1qc1wiOyAvLyBTcGVjIFNlY3Rpb246IFwiRmllbGQgU2VsZWN0aW9ucyBvbiBPYmplY3RzLCBJbnRlcmZhY2VzLCBhbmQgVW5pb25zIFR5cGVzXCJcblxuaW1wb3J0IHsgRmllbGRzT25Db3JyZWN0VHlwZVJ1bGUgfSBmcm9tIFwiLi9ydWxlcy9GaWVsZHNPbkNvcnJlY3RUeXBlUnVsZS5tanNcIjsgLy8gU3BlYyBTZWN0aW9uOiBcIkZyYWdtZW50IE5hbWUgVW5pcXVlbmVzc1wiXG5cbmltcG9ydCB7IFVuaXF1ZUZyYWdtZW50TmFtZXNSdWxlIH0gZnJvbSBcIi4vcnVsZXMvVW5pcXVlRnJhZ21lbnROYW1lc1J1bGUubWpzXCI7IC8vIFNwZWMgU2VjdGlvbjogXCJGcmFnbWVudCBzcHJlYWQgdGFyZ2V0IGRlZmluZWRcIlxuXG5pbXBvcnQgeyBLbm93bkZyYWdtZW50TmFtZXNSdWxlIH0gZnJvbSBcIi4vcnVsZXMvS25vd25GcmFnbWVudE5hbWVzUnVsZS5tanNcIjsgLy8gU3BlYyBTZWN0aW9uOiBcIkZyYWdtZW50cyBtdXN0IGJlIHVzZWRcIlxuXG5pbXBvcnQgeyBOb1VudXNlZEZyYWdtZW50c1J1bGUgfSBmcm9tIFwiLi9ydWxlcy9Ob1VudXNlZEZyYWdtZW50c1J1bGUubWpzXCI7IC8vIFNwZWMgU2VjdGlvbjogXCJGcmFnbWVudCBzcHJlYWQgaXMgcG9zc2libGVcIlxuXG5pbXBvcnQgeyBQb3NzaWJsZUZyYWdtZW50U3ByZWFkc1J1bGUgfSBmcm9tIFwiLi9ydWxlcy9Qb3NzaWJsZUZyYWdtZW50U3ByZWFkc1J1bGUubWpzXCI7IC8vIFNwZWMgU2VjdGlvbjogXCJGcmFnbWVudHMgbXVzdCBub3QgZm9ybSBjeWNsZXNcIlxuXG5pbXBvcnQgeyBOb0ZyYWdtZW50Q3ljbGVzUnVsZSB9IGZyb20gXCIuL3J1bGVzL05vRnJhZ21lbnRDeWNsZXNSdWxlLm1qc1wiOyAvLyBTcGVjIFNlY3Rpb246IFwiVmFyaWFibGUgVW5pcXVlbmVzc1wiXG5cbmltcG9ydCB7IFVuaXF1ZVZhcmlhYmxlTmFtZXNSdWxlIH0gZnJvbSBcIi4vcnVsZXMvVW5pcXVlVmFyaWFibGVOYW1lc1J1bGUubWpzXCI7IC8vIFNwZWMgU2VjdGlvbjogXCJBbGwgVmFyaWFibGUgVXNlZCBEZWZpbmVkXCJcblxuaW1wb3J0IHsgTm9VbmRlZmluZWRWYXJpYWJsZXNSdWxlIH0gZnJvbSBcIi4vcnVsZXMvTm9VbmRlZmluZWRWYXJpYWJsZXNSdWxlLm1qc1wiOyAvLyBTcGVjIFNlY3Rpb246IFwiQWxsIFZhcmlhYmxlcyBVc2VkXCJcblxuaW1wb3J0IHsgTm9VbnVzZWRWYXJpYWJsZXNSdWxlIH0gZnJvbSBcIi4vcnVsZXMvTm9VbnVzZWRWYXJpYWJsZXNSdWxlLm1qc1wiOyAvLyBTcGVjIFNlY3Rpb246IFwiRGlyZWN0aXZlcyBBcmUgRGVmaW5lZFwiXG5cbmltcG9ydCB7IEtub3duRGlyZWN0aXZlc1J1bGUgfSBmcm9tIFwiLi9ydWxlcy9Lbm93bkRpcmVjdGl2ZXNSdWxlLm1qc1wiOyAvLyBTcGVjIFNlY3Rpb246IFwiRGlyZWN0aXZlcyBBcmUgVW5pcXVlIFBlciBMb2NhdGlvblwiXG5cbmltcG9ydCB7IFVuaXF1ZURpcmVjdGl2ZXNQZXJMb2NhdGlvblJ1bGUgfSBmcm9tIFwiLi9ydWxlcy9VbmlxdWVEaXJlY3RpdmVzUGVyTG9jYXRpb25SdWxlLm1qc1wiOyAvLyBTcGVjIFNlY3Rpb246IFwiQXJndW1lbnQgTmFtZXNcIlxuXG5pbXBvcnQgeyBLbm93bkFyZ3VtZW50TmFtZXNSdWxlLCBLbm93bkFyZ3VtZW50TmFtZXNPbkRpcmVjdGl2ZXNSdWxlIH0gZnJvbSBcIi4vcnVsZXMvS25vd25Bcmd1bWVudE5hbWVzUnVsZS5tanNcIjsgLy8gU3BlYyBTZWN0aW9uOiBcIkFyZ3VtZW50IFVuaXF1ZW5lc3NcIlxuXG5pbXBvcnQgeyBVbmlxdWVBcmd1bWVudE5hbWVzUnVsZSB9IGZyb20gXCIuL3J1bGVzL1VuaXF1ZUFyZ3VtZW50TmFtZXNSdWxlLm1qc1wiOyAvLyBTcGVjIFNlY3Rpb246IFwiVmFsdWUgVHlwZSBDb3JyZWN0bmVzc1wiXG5cbmltcG9ydCB7IFZhbHVlc09mQ29ycmVjdFR5cGVSdWxlIH0gZnJvbSBcIi4vcnVsZXMvVmFsdWVzT2ZDb3JyZWN0VHlwZVJ1bGUubWpzXCI7IC8vIFNwZWMgU2VjdGlvbjogXCJBcmd1bWVudCBPcHRpb25hbGl0eVwiXG5cbmltcG9ydCB7IFByb3ZpZGVkUmVxdWlyZWRBcmd1bWVudHNSdWxlLCBQcm92aWRlZFJlcXVpcmVkQXJndW1lbnRzT25EaXJlY3RpdmVzUnVsZSB9IGZyb20gXCIuL3J1bGVzL1Byb3ZpZGVkUmVxdWlyZWRBcmd1bWVudHNSdWxlLm1qc1wiOyAvLyBTcGVjIFNlY3Rpb246IFwiQWxsIFZhcmlhYmxlIFVzYWdlcyBBcmUgQWxsb3dlZFwiXG5cbmltcG9ydCB7IFZhcmlhYmxlc0luQWxsb3dlZFBvc2l0aW9uUnVsZSB9IGZyb20gXCIuL3J1bGVzL1ZhcmlhYmxlc0luQWxsb3dlZFBvc2l0aW9uUnVsZS5tanNcIjsgLy8gU3BlYyBTZWN0aW9uOiBcIkZpZWxkIFNlbGVjdGlvbiBNZXJnaW5nXCJcblxuaW1wb3J0IHsgT3ZlcmxhcHBpbmdGaWVsZHNDYW5CZU1lcmdlZFJ1bGUgfSBmcm9tIFwiLi9ydWxlcy9PdmVybGFwcGluZ0ZpZWxkc0NhbkJlTWVyZ2VkUnVsZS5tanNcIjsgLy8gU3BlYyBTZWN0aW9uOiBcIklucHV0IE9iamVjdCBGaWVsZCBVbmlxdWVuZXNzXCJcblxuaW1wb3J0IHsgVW5pcXVlSW5wdXRGaWVsZE5hbWVzUnVsZSB9IGZyb20gXCIuL3J1bGVzL1VuaXF1ZUlucHV0RmllbGROYW1lc1J1bGUubWpzXCI7IC8vIFNETC1zcGVjaWZpYyB2YWxpZGF0aW9uIHJ1bGVzXG5cbmltcG9ydCB7IExvbmVTY2hlbWFEZWZpbml0aW9uUnVsZSB9IGZyb20gXCIuL3J1bGVzL0xvbmVTY2hlbWFEZWZpbml0aW9uUnVsZS5tanNcIjtcbmltcG9ydCB7IFVuaXF1ZU9wZXJhdGlvblR5cGVzUnVsZSB9IGZyb20gXCIuL3J1bGVzL1VuaXF1ZU9wZXJhdGlvblR5cGVzUnVsZS5tanNcIjtcbmltcG9ydCB7IFVuaXF1ZVR5cGVOYW1lc1J1bGUgfSBmcm9tIFwiLi9ydWxlcy9VbmlxdWVUeXBlTmFtZXNSdWxlLm1qc1wiO1xuaW1wb3J0IHsgVW5pcXVlRW51bVZhbHVlTmFtZXNSdWxlIH0gZnJvbSBcIi4vcnVsZXMvVW5pcXVlRW51bVZhbHVlTmFtZXNSdWxlLm1qc1wiO1xuaW1wb3J0IHsgVW5pcXVlRmllbGREZWZpbml0aW9uTmFtZXNSdWxlIH0gZnJvbSBcIi4vcnVsZXMvVW5pcXVlRmllbGREZWZpbml0aW9uTmFtZXNSdWxlLm1qc1wiO1xuaW1wb3J0IHsgVW5pcXVlRGlyZWN0aXZlTmFtZXNSdWxlIH0gZnJvbSBcIi4vcnVsZXMvVW5pcXVlRGlyZWN0aXZlTmFtZXNSdWxlLm1qc1wiO1xuaW1wb3J0IHsgUG9zc2libGVUeXBlRXh0ZW5zaW9uc1J1bGUgfSBmcm9tIFwiLi9ydWxlcy9Qb3NzaWJsZVR5cGVFeHRlbnNpb25zUnVsZS5tanNcIjtcbi8qKlxuICogVGhpcyBzZXQgaW5jbHVkZXMgYWxsIHZhbGlkYXRpb24gcnVsZXMgZGVmaW5lZCBieSB0aGUgR3JhcGhRTCBzcGVjLlxuICpcbiAqIFRoZSBvcmRlciBvZiB0aGUgcnVsZXMgaW4gdGhpcyBsaXN0IGhhcyBiZWVuIGFkanVzdGVkIHRvIGxlYWQgdG8gdGhlXG4gKiBtb3N0IGNsZWFyIG91dHB1dCB3aGVuIGVuY291bnRlcmluZyBtdWx0aXBsZSB2YWxpZGF0aW9uIGVycm9ycy5cbiAqL1xuXG5leHBvcnQgdmFyIHNwZWNpZmllZFJ1bGVzID0gT2JqZWN0LmZyZWV6ZShbRXhlY3V0YWJsZURlZmluaXRpb25zUnVsZSwgVW5pcXVlT3BlcmF0aW9uTmFtZXNSdWxlLCBMb25lQW5vbnltb3VzT3BlcmF0aW9uUnVsZSwgU2luZ2xlRmllbGRTdWJzY3JpcHRpb25zUnVsZSwgS25vd25UeXBlTmFtZXNSdWxlLCBGcmFnbWVudHNPbkNvbXBvc2l0ZVR5cGVzUnVsZSwgVmFyaWFibGVzQXJlSW5wdXRUeXBlc1J1bGUsIFNjYWxhckxlYWZzUnVsZSwgRmllbGRzT25Db3JyZWN0VHlwZVJ1bGUsIFVuaXF1ZUZyYWdtZW50TmFtZXNSdWxlLCBLbm93bkZyYWdtZW50TmFtZXNSdWxlLCBOb1VudXNlZEZyYWdtZW50c1J1bGUsIFBvc3NpYmxlRnJhZ21lbnRTcHJlYWRzUnVsZSwgTm9GcmFnbWVudEN5Y2xlc1J1bGUsIFVuaXF1ZVZhcmlhYmxlTmFtZXNSdWxlLCBOb1VuZGVmaW5lZFZhcmlhYmxlc1J1bGUsIE5vVW51c2VkVmFyaWFibGVzUnVsZSwgS25vd25EaXJlY3RpdmVzUnVsZSwgVW5pcXVlRGlyZWN0aXZlc1BlckxvY2F0aW9uUnVsZSwgS25vd25Bcmd1bWVudE5hbWVzUnVsZSwgVW5pcXVlQXJndW1lbnROYW1lc1J1bGUsIFZhbHVlc09mQ29ycmVjdFR5cGVSdWxlLCBQcm92aWRlZFJlcXVpcmVkQXJndW1lbnRzUnVsZSwgVmFyaWFibGVzSW5BbGxvd2VkUG9zaXRpb25SdWxlLCBPdmVybGFwcGluZ0ZpZWxkc0NhbkJlTWVyZ2VkUnVsZSwgVW5pcXVlSW5wdXRGaWVsZE5hbWVzUnVsZV0pO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuXG5leHBvcnQgdmFyIHNwZWNpZmllZFNETFJ1bGVzID0gT2JqZWN0LmZyZWV6ZShbTG9uZVNjaGVtYURlZmluaXRpb25SdWxlLCBVbmlxdWVPcGVyYXRpb25UeXBlc1J1bGUsIFVuaXF1ZVR5cGVOYW1lc1J1bGUsIFVuaXF1ZUVudW1WYWx1ZU5hbWVzUnVsZSwgVW5pcXVlRmllbGREZWZpbml0aW9uTmFtZXNSdWxlLCBVbmlxdWVEaXJlY3RpdmVOYW1lc1J1bGUsIEtub3duVHlwZU5hbWVzUnVsZSwgS25vd25EaXJlY3RpdmVzUnVsZSwgVW5pcXVlRGlyZWN0aXZlc1BlckxvY2F0aW9uUnVsZSwgUG9zc2libGVUeXBlRXh0ZW5zaW9uc1J1bGUsIEtub3duQXJndW1lbnROYW1lc09uRGlyZWN0aXZlc1J1bGUsIFVuaXF1ZUFyZ3VtZW50TmFtZXNSdWxlLCBVbmlxdWVJbnB1dEZpZWxkTmFtZXNSdWxlLCBQcm92aWRlZFJlcXVpcmVkQXJndW1lbnRzT25EaXJlY3RpdmVzUnVsZV0pO1xuIiwiaW1wb3J0IGRldkFzc2VydCBmcm9tIFwiLi4vanN1dGlscy9kZXZBc3NlcnQubWpzXCI7XG5pbXBvcnQgeyBHcmFwaFFMRXJyb3IgfSBmcm9tIFwiLi4vZXJyb3IvR3JhcGhRTEVycm9yLm1qc1wiO1xuaW1wb3J0IHsgdmlzaXQsIHZpc2l0SW5QYXJhbGxlbCB9IGZyb20gXCIuLi9sYW5ndWFnZS92aXNpdG9yLm1qc1wiO1xuaW1wb3J0IHsgYXNzZXJ0VmFsaWRTY2hlbWEgfSBmcm9tIFwiLi4vdHlwZS92YWxpZGF0ZS5tanNcIjtcbmltcG9ydCB7IFR5cGVJbmZvLCB2aXNpdFdpdGhUeXBlSW5mbyB9IGZyb20gXCIuLi91dGlsaXRpZXMvVHlwZUluZm8ubWpzXCI7XG5pbXBvcnQgeyBzcGVjaWZpZWRSdWxlcywgc3BlY2lmaWVkU0RMUnVsZXMgfSBmcm9tIFwiLi9zcGVjaWZpZWRSdWxlcy5tanNcIjtcbmltcG9ydCB7IFNETFZhbGlkYXRpb25Db250ZXh0LCBWYWxpZGF0aW9uQ29udGV4dCB9IGZyb20gXCIuL1ZhbGlkYXRpb25Db250ZXh0Lm1qc1wiO1xuLyoqXG4gKiBJbXBsZW1lbnRzIHRoZSBcIlZhbGlkYXRpb25cIiBzZWN0aW9uIG9mIHRoZSBzcGVjLlxuICpcbiAqIFZhbGlkYXRpb24gcnVucyBzeW5jaHJvbm91c2x5LCByZXR1cm5pbmcgYW4gYXJyYXkgb2YgZW5jb3VudGVyZWQgZXJyb3JzLCBvclxuICogYW4gZW1wdHkgYXJyYXkgaWYgbm8gZXJyb3JzIHdlcmUgZW5jb3VudGVyZWQgYW5kIHRoZSBkb2N1bWVudCBpcyB2YWxpZC5cbiAqXG4gKiBBIGxpc3Qgb2Ygc3BlY2lmaWMgdmFsaWRhdGlvbiBydWxlcyBtYXkgYmUgcHJvdmlkZWQuIElmIG5vdCBwcm92aWRlZCwgdGhlXG4gKiBkZWZhdWx0IGxpc3Qgb2YgcnVsZXMgZGVmaW5lZCBieSB0aGUgR3JhcGhRTCBzcGVjaWZpY2F0aW9uIHdpbGwgYmUgdXNlZC5cbiAqXG4gKiBFYWNoIHZhbGlkYXRpb24gcnVsZXMgaXMgYSBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGEgdmlzaXRvclxuICogKHNlZSB0aGUgbGFuZ3VhZ2UvdmlzaXRvciBBUEkpLiBWaXNpdG9yIG1ldGhvZHMgYXJlIGV4cGVjdGVkIHRvIHJldHVyblxuICogR3JhcGhRTEVycm9ycywgb3IgQXJyYXlzIG9mIEdyYXBoUUxFcnJvcnMgd2hlbiBpbnZhbGlkLlxuICpcbiAqIE9wdGlvbmFsbHkgYSBjdXN0b20gVHlwZUluZm8gaW5zdGFuY2UgbWF5IGJlIHByb3ZpZGVkLiBJZiBub3QgcHJvdmlkZWQsIG9uZVxuICogd2lsbCBiZSBjcmVhdGVkIGZyb20gdGhlIHByb3ZpZGVkIHNjaGVtYS5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGUoc2NoZW1hLCBkb2N1bWVudEFTVCkge1xuICB2YXIgcnVsZXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHNwZWNpZmllZFJ1bGVzO1xuICB2YXIgdHlwZUluZm8gPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IG5ldyBUeXBlSW5mbyhzY2hlbWEpO1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiA0ICYmIGFyZ3VtZW50c1s0XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzRdIDoge1xuICAgIG1heEVycm9yczogdW5kZWZpbmVkXG4gIH07XG4gIGRvY3VtZW50QVNUIHx8IGRldkFzc2VydCgwLCAnTXVzdCBwcm92aWRlIGRvY3VtZW50LicpOyAvLyBJZiB0aGUgc2NoZW1hIHVzZWQgZm9yIHZhbGlkYXRpb24gaXMgaW52YWxpZCwgdGhyb3cgYW4gZXJyb3IuXG5cbiAgYXNzZXJ0VmFsaWRTY2hlbWEoc2NoZW1hKTtcbiAgdmFyIGFib3J0T2JqID0gT2JqZWN0LmZyZWV6ZSh7fSk7XG4gIHZhciBlcnJvcnMgPSBbXTtcbiAgdmFyIGNvbnRleHQgPSBuZXcgVmFsaWRhdGlvbkNvbnRleHQoc2NoZW1hLCBkb2N1bWVudEFTVCwgdHlwZUluZm8sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgIGlmIChvcHRpb25zLm1heEVycm9ycyAhPSBudWxsICYmIGVycm9ycy5sZW5ndGggPj0gb3B0aW9ucy5tYXhFcnJvcnMpIHtcbiAgICAgIGVycm9ycy5wdXNoKG5ldyBHcmFwaFFMRXJyb3IoJ1RvbyBtYW55IHZhbGlkYXRpb24gZXJyb3JzLCBlcnJvciBsaW1pdCByZWFjaGVkLiBWYWxpZGF0aW9uIGFib3J0ZWQuJykpO1xuICAgICAgdGhyb3cgYWJvcnRPYmo7XG4gICAgfVxuXG4gICAgZXJyb3JzLnB1c2goZXJyb3IpO1xuICB9KTsgLy8gVGhpcyB1c2VzIGEgc3BlY2lhbGl6ZWQgdmlzaXRvciB3aGljaCBydW5zIG11bHRpcGxlIHZpc2l0b3JzIGluIHBhcmFsbGVsLFxuICAvLyB3aGlsZSBtYWludGFpbmluZyB0aGUgdmlzaXRvciBza2lwIGFuZCBicmVhayBBUEkuXG5cbiAgdmFyIHZpc2l0b3IgPSB2aXNpdEluUGFyYWxsZWwocnVsZXMubWFwKGZ1bmN0aW9uIChydWxlKSB7XG4gICAgcmV0dXJuIHJ1bGUoY29udGV4dCk7XG4gIH0pKTsgLy8gVmlzaXQgdGhlIHdob2xlIGRvY3VtZW50IHdpdGggZWFjaCBpbnN0YW5jZSBvZiBhbGwgcHJvdmlkZWQgcnVsZXMuXG5cbiAgdHJ5IHtcbiAgICB2aXNpdChkb2N1bWVudEFTVCwgdmlzaXRXaXRoVHlwZUluZm8odHlwZUluZm8sIHZpc2l0b3IpKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChlICE9PSBhYm9ydE9iaikge1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZXJyb3JzO1xufVxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVTREwoZG9jdW1lbnRBU1QsIHNjaGVtYVRvRXh0ZW5kKSB7XG4gIHZhciBydWxlcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogc3BlY2lmaWVkU0RMUnVsZXM7XG4gIHZhciBlcnJvcnMgPSBbXTtcbiAgdmFyIGNvbnRleHQgPSBuZXcgU0RMVmFsaWRhdGlvbkNvbnRleHQoZG9jdW1lbnRBU1QsIHNjaGVtYVRvRXh0ZW5kLCBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICBlcnJvcnMucHVzaChlcnJvcik7XG4gIH0pO1xuICB2YXIgdmlzaXRvcnMgPSBydWxlcy5tYXAoZnVuY3Rpb24gKHJ1bGUpIHtcbiAgICByZXR1cm4gcnVsZShjb250ZXh0KTtcbiAgfSk7XG4gIHZpc2l0KGRvY3VtZW50QVNULCB2aXNpdEluUGFyYWxsZWwodmlzaXRvcnMpKTtcbiAgcmV0dXJuIGVycm9ycztcbn1cbi8qKlxuICogVXRpbGl0eSBmdW5jdGlvbiB3aGljaCBhc3NlcnRzIGEgU0RMIGRvY3VtZW50IGlzIHZhbGlkIGJ5IHRocm93aW5nIGFuIGVycm9yXG4gKiBpZiBpdCBpcyBpbnZhbGlkLlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRWYWxpZFNETChkb2N1bWVudEFTVCkge1xuICB2YXIgZXJyb3JzID0gdmFsaWRhdGVTREwoZG9jdW1lbnRBU1QpO1xuXG4gIGlmIChlcnJvcnMubGVuZ3RoICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGVycm9ycy5tYXAoZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICByZXR1cm4gZXJyb3IubWVzc2FnZTtcbiAgICB9KS5qb2luKCdcXG5cXG4nKSk7XG4gIH1cbn1cbi8qKlxuICogVXRpbGl0eSBmdW5jdGlvbiB3aGljaCBhc3NlcnRzIGEgU0RMIGRvY3VtZW50IGlzIHZhbGlkIGJ5IHRocm93aW5nIGFuIGVycm9yXG4gKiBpZiBpdCBpcyBpbnZhbGlkLlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRWYWxpZFNETEV4dGVuc2lvbihkb2N1bWVudEFTVCwgc2NoZW1hKSB7XG4gIHZhciBlcnJvcnMgPSB2YWxpZGF0ZVNETChkb2N1bWVudEFTVCwgc2NoZW1hKTtcblxuICBpZiAoZXJyb3JzLmxlbmd0aCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcihlcnJvcnMubWFwKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgcmV0dXJuIGVycm9yLm1lc3NhZ2U7XG4gICAgfSkuam9pbignXFxuXFxuJykpO1xuICB9XG59XG4iLCIvKipcbiAqIE5vdGU6IFRoaXMgZmlsZSBpcyBhdXRvZ2VuZXJhdGVkIHVzaW5nIFwicmVzb3VyY2VzL2dlbi12ZXJzaW9uLmpzXCIgc2NyaXB0IGFuZFxuICogYXV0b21hdGljYWxseSB1cGRhdGVkIGJ5IFwibnBtIHZlcnNpb25cIiBjb21tYW5kLlxuICovXG5cbi8qKlxuICogQSBzdHJpbmcgY29udGFpbmluZyB0aGUgdmVyc2lvbiBvZiB0aGUgR3JhcGhRTC5qcyBsaWJyYXJ5XG4gKi9cbmV4cG9ydCB2YXIgdmVyc2lvbiA9ICcxNS42LjEnO1xuLyoqXG4gKiBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgY29tcG9uZW50cyBvZiB0aGUgR3JhcGhRTC5qcyB2ZXJzaW9uIHN0cmluZ1xuICovXG5cbmV4cG9ydCB2YXIgdmVyc2lvbkluZm8gPSBPYmplY3QuZnJlZXplKHtcbiAgbWFqb3I6IDE1LFxuICBtaW5vcjogNixcbiAgcGF0Y2g6IDEsXG4gIHByZVJlbGVhc2VUYWc6IG51bGxcbn0pO1xuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCIvLyBzdGFydHVwXG4vLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8vIFRoaXMgZW50cnkgbW9kdWxlIGlzIHJlZmVyZW5jZWQgYnkgb3RoZXIgbW9kdWxlcyBzbyBpdCBjYW4ndCBiZSBpbmxpbmVkXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3NyYy9iYWNrZ3JvdW5kLnRzXCIpO1xuIl0sIm5hbWVzIjpbImUiLCJyIiwicmVoeWRyYXRlR3JhcGhRbEVycm9yIiwiR3JhcGhRTEVycm9yIiwibWVzc2FnZSIsIm5vZGVzIiwic291cmNlIiwicG9zaXRpb25zIiwicGF0aCIsImV4dGVuc2lvbnMiLCJ0IiwiQ29tYmluZWRFcnJvciIsIm5ldHdvcmtFcnJvciIsIm4iLCJyZXNwb25zZSIsIm8iLCJncmFwaFFMRXJyb3JzIiwibWFwIiwiaSIsImZvckVhY2giLCJ0cmltIiwiY2FsbCIsInRoaXMiLCJuYW1lIiwiX19wcm90b19fIiwicHJvdG90eXBlIiwiT2JqZWN0IiwiY3JlYXRlIiwiY29uc3RydWN0b3IiLCJ0b1N0cmluZyIsIkVycm9yIiwicGhhc2giLCJsZW5ndGgiLCJjaGFyQ29kZUF0IiwiaGFzaCIsIlNldCIsIldlYWtNYXAiLCJzdHJpbmdpZnkiLCJoYXMiLCJKU09OIiwidG9KU09OIiwiQXJyYXkiLCJpc0FycmF5IiwiYSIsInMiLCJrZXlzIiwic29ydCIsInUiLCJnZXQiLCJNYXRoIiwicmFuZG9tIiwic2xpY2UiLCJzZXQiLCJhZGQiLCJmIiwiYyIsImwiLCJwIiwiaCIsImRlbGV0ZSIsInN0cmluZ2lmeVZhcmlhYmxlcyIsImNsZWFyIiwic3RyaW5naWZ5RG9jdW1lbnQiLCJsb2MiLCJib2R5IiwicHJpbnQiLCJyZXBsYWNlIiwiZ2V0T3BlcmF0aW9uTmFtZSIsInN0YXJ0IiwiZW5kIiwibG9jYXRpb25PZmZzZXQiLCJsaW5lIiwiY29sdW1uIiwiTWFwIiwia2V5RG9jdW1lbnQiLCJwYXJzZSIsIm5vTG9jYXRpb24iLCJfX2tleSIsImRlZmluaXRpb25zIiwia2luZCIsIktpbmQiLCJPUEVSQVRJT05fREVGSU5JVElPTiIsInZhbHVlIiwiX2V4dGVuZHMiLCJhc3NpZ24iLCJhcmd1bWVudHMiLCJoYXNPd25Qcm9wZXJ0eSIsImFwcGx5IiwibWFrZVJlc3VsdCIsIm9wZXJhdGlvbiIsImRhdGEiLCJlcnJvciIsImVycm9ycyIsImhhc05leHQiLCJtZXJnZVJlc3VsdFBhdGNoIiwiY29uY2F0IiwibWFrZUVycm9yUmVzdWx0Iiwic2hvdWxkVXNlR2V0IiwiY29udGV4dCIsInByZWZlckdldE1ldGhvZCIsIlN5bWJvbCIsImFzeW5jSXRlcmF0b3IiLCJUZXh0RGVjb2RlciIsImV4ZWN1dGVJbmNyZW1lbnRhbEZldGNoIiwiaGVhZGVycyIsInRlc3QiLCJqc29uIiwidGhlbiIsIm1hdGNoIiwiY2FuY2VsIiwibmV4dCIsImJpbmQiLCJUeXBlRXJyb3IiLCJnZXRSZWFkZXIiLCJyZWFkIiwiZCIsInYiLCJ5IiwiZG9uZSIsIkJ1ZmZlciIsImlzQnVmZmVyIiwiZGVjb2RlIiwiaW5kZXhPZiIsIm0iLCJnIiwibGFzdEluZGV4T2YiLCJ4IiwiZmluYWxseSIsImV4cG9ydHMiLCJjcmVhdGVSZXF1ZXN0Iiwia2V5IiwicXVlcnkiLCJ2YXJpYWJsZXMiLCJnZXRPcGVyYXRpb25UeXBlIiwibWFrZUZldGNoQm9keSIsIm9wZXJhdGlvbk5hbWUiLCJtYWtlRmV0Y2hPcHRpb25zIiwiZmV0Y2hPcHRpb25zIiwibWV0aG9kIiwibWFrZUZldGNoU291cmNlIiwicmVkaXJlY3QiLCJmZXRjaCIsIm1ha2UiLCJjb21wbGV0ZSIsIkFib3J0Q29udHJvbGxlciIsInNpZ25hbCIsIlByb21pc2UiLCJyZXNvbHZlIiwic3RhdHVzIiwiY2F0Y2giLCJzdGF0dXNUZXh0IiwiYWJvcnQiLCJtYWtlRmV0Y2hVUkwiLCJ1cmwiLCJwdXNoIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwiam9pbiIsImNvbGxlY3RUeXBlcyIsImNvbGxlY3RUeXBlc0Zyb21SZXNwb25zZSIsImZvcm1hdE5vZGUiLCJzZWxlY3Rpb25TZXQiLCJzZWxlY3Rpb25zIiwic29tZSIsIkZJRUxEIiwiYWxpYXMiLCJOQU1FIiwiZm9ybWF0RG9jdW1lbnQiLCJ2aXNpdCIsIkZpZWxkIiwiSW5saW5lRnJhZ21lbnQiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJtYXNrVHlwZW5hbWUiLCJyZWR1Y2UiLCJ3aXRoUHJvbWlzZSIsInRvUHJvbWlzZSIsInRha2UiLCJmaWx0ZXIiLCJzdGFsZSIsIm1ha2VPcGVyYXRpb24iLCJhZGRNZXRhZGF0YSIsIm1ldGEiLCJub29wIiwiYXBwbHlEZWZpbml0aW9ucyIsIkZSQUdNRU5UX0RFRklOSVRJT04iLCJjb25zb2xlIiwid2FybiIsInNob3VsZFNraXAiLCJjYWNoZUV4Y2hhbmdlIiwiZm9yd2FyZCIsImNsaWVudCIsImRpc3BhdGNoRGVidWciLCJtYXBUeXBlTmFtZXMiLCJpc09wZXJhdGlvbkNhY2hlZCIsInJlcXVlc3RQb2xpY3kiLCJzaGFyZSIsInR5cGUiLCJjYWNoZU91dGNvbWUiLCJyZWV4ZWN1dGVPcGVyYXRpb24iLCJ0YXAiLCJhZGRpdGlvbmFsVHlwZW5hbWVzIiwidHlwZW5hbWVzIiwibWVyZ2UiLCJkZWR1cEV4Y2hhbmdlIiwiZmlsdGVySW5jb21pbmdPcGVyYXRpb24iLCJhZnRlck9wZXJhdGlvblJlc3VsdCIsImZldGNoRXhjaGFuZ2UiLCJtZXJnZU1hcCIsIm9uUHVzaCIsInRha2VVbnRpbCIsImZhbGxiYWNrRXhjaGFuZ2UiLCJjb21wb3NlRXhjaGFuZ2VzIiwicmVkdWNlUmlnaHQiLCJ0aW1lc3RhbXAiLCJEYXRlIiwibm93IiwiQ2xpZW50IiwibWFrZVN1YmplY3QiLCJkaXNwYXRjaE9wZXJhdGlvbiIsInNoaWZ0IiwibWFrZVJlc3VsdFNvdXJjZSIsImsiLCJvblN0YXJ0Iiwib25FbmQiLCJzcGxpY2UiLCJzd2l0Y2hNYXAiLCJmcm9tVmFsdWUiLCJzdXNwZW5zZSIsIm9wZXJhdGlvbnMkIiwiY3JlYXRlT3BlcmF0aW9uQ29udGV4dCIsImNyZWF0ZVJlcXVlc3RPcGVyYXRpb24iLCJleGVjdXRlUmVxdWVzdE9wZXJhdGlvbiIsInN1YnNjcmliZSIsInVuc3Vic2NyaWJlIiwiZXhlY3V0ZVF1ZXJ5IiwiZXhlY3V0ZVN1YnNjcmlwdGlvbiIsImV4ZWN1dGVNdXRhdGlvbiIsInJlYWRRdWVyeSIsInN1YnNjcmlwdGlvbiIsIm11dGF0aW9uIiwic3Vic2NyaWJlVG9EZWJ1Z1RhcmdldCIsImV4Y2hhbmdlcyIsInB1Ymxpc2giLCJjcmVhdGVDbGllbnQiLCJkZWJ1Z0V4Y2hhbmdlIiwibG9nIiwiZGVmYXVsdEV4Y2hhbmdlcyIsImVycm9yRXhjaGFuZ2UiLCJvbkVycm9yIiwiZmFsbGJhY2tFeGNoYW5nZUlPIiwiZ3FsIiwiRE9DVU1FTlQiLCJzc3JFeGNoYW5nZSIsInN0YWxlV2hpbGVSZXZhbGlkYXRlIiwiaW5jbHVkZUV4dGVuc2lvbnMiLCJpbnZhbGlkYXRlIiwic3NyIiwiaXNDbGllbnQiLCJyZXN0b3JlRGF0YSIsImV4dHJhY3REYXRhIiwiaW5pdGlhbFN0YXRlIiwic3Vic2NyaXB0aW9uRXhjaGFuZ2UiLCJmb3J3YXJkU3Vic2NyaXB0aW9uIiwiZW5hYmxlQWxsT3BlcmF0aW9ucyIsImlzU3Vic2NyaXB0aW9uT3BlcmF0aW9uIiwicnVubmluZ1ZhbGlkYXRpb25zQ2FjaGUiLCJjaHJvbWUiLCJzdG9yYWdlIiwib25DaGFuZ2VkIiwiYWRkTGlzdGVuZXIiLCJjaGFuZ2VzIiwibmFtZXNwYWNlIiwiZW50cmllcyIsIm9sZFZhbHVlIiwibmV3VmFsdWUiLCJjcmVhdGVGaWxlQW5hbHlzaXNNdXRhdGlvbiIsImNvZGUiLCJmaW5nZXJwcmludCIsImxhbmd1YWdlIiwiZmlsZW5hbWUiLCJnZXRGaWxlQW5hbHlzaXNRdWVyeSIsImFuYWx5c2lzSWQiLCJpbm5lckFuYWx5c2lzSWQiLCJzaG91bGRGZXRjaCIsImNhY2hlS2V5IiwicnVudGltZSIsIm9uTWVzc2FnZSIsInJlcXVlc3QiLCJzZW5kZXIiLCJzZW5kUmVzcG9uc2UiLCJjb250ZW50U2NyaXB0UXVlcnkiLCJzeW5jIiwicmVzdWx0IiwiU1RPUkFHRV9GSU5HRVJQUklOVF9LRVkiLCJjb2RlRWxlbWVudElkIiwiaWQiLCJleGVjdXRpb25JZCIsImV4Y2VjdXRpb25JZCIsImZldGNoQ2hlY2tlciIsIkZldGNoQ2hlY2tlciIsInRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwidW5kZWZpbmVkIiwiY3JlYXRlQW5hbHlzaXNSZXN1bHQiLCJjcmVhdGVGaWxlQW5hbHlzaXMiLCJzZXRJbnRlcnZhbCIsImdldEFuYWx5c2lzUmVzdWx0IiwiZ2V0RmlsZUFuYWx5c2lzIiwiY2xlYXJJbnRlcnZhbCIsInZpb2xhdGlvbnMiLCJhY2MiLCJjdXJyIiwibWFwcGVkVmlvbGF0aW9ucyIsImdyb3VwIiwidmFsaWRhdGVDb2RlIiwidGFicyIsIm9uVXBkYXRlZCIsInRhYklkIiwiY2hhbmdlSW5mbyIsInRhYiIsInNlbmRNZXNzYWdlIiwiYWN0aW9uIiwiZ2V0T3V0cHV0TGVuZ3RoIiwiaW5wdXRMZW5ndGg4Iiwic2FmZUFkZCIsImxzdyIsIm1kNWNtbiIsInEiLCJiIiwibnVtIiwiY250IiwibWQ1ZmYiLCJtZDVnZyIsIm1kNWhoIiwibWQ1aWkiLCJieXRlcyIsIm1zZyIsInVuZXNjYXBlIiwiVWludDhBcnJheSIsImlucHV0Iiwib3V0cHV0IiwibGVuZ3RoMzIiLCJoZXhUYWIiLCJoZXgiLCJwYXJzZUludCIsImNoYXJBdCIsIm1kNVRvSGV4RW5jb2RlZEFycmF5IiwibGVuIiwib2xkYSIsIm9sZGIiLCJvbGRjIiwib2xkZCIsIndvcmRzVG9NZDUiLCJsZW5ndGg4IiwiVWludDMyQXJyYXkiLCJieXRlc1RvV29yZHMiLCJ1dWlkIiwiYXJyIiwiZ2V0UmFuZG9tVmFsdWVzIiwicm5kczgiLCJybmciLCJjcnlwdG8iLCJtc0NyeXB0byIsInoiLCJST1RMIiwiSyIsIkgiLCJOIiwiY2VpbCIsIk0iLCJfaSIsImoiLCJwb3ciLCJmbG9vciIsIl9pMiIsIlciLCJfdCIsIl90MiIsIlQiLCJieXRlVG9IZXgiLCJzdWJzdHIiLCJvZmZzZXQiLCJ0b0xvd2VyQ2FzZSIsIl9ub2RlSWQiLCJfY2xvY2tzZXEiLCJfbGFzdE1TZWNzIiwiX2xhc3ROU2VjcyIsIm9wdGlvbnMiLCJidWYiLCJub2RlIiwiY2xvY2tzZXEiLCJzZWVkQnl0ZXMiLCJtc2VjcyIsIm5zZWNzIiwiZHQiLCJ0bCIsInRtaCIsIkROUyIsIlVSTCIsInZlcnNpb24iLCJoYXNoZnVuYyIsImdlbmVyYXRlVVVJRCIsInN0ciIsInN0cmluZ1RvQnl0ZXMiLCJlcnIiLCJybmRzIiwiX18iLCJ0YWciLCJ0YWxrYmFja1BsYWNlaG9sZGVyIiwiZnJvbUFycmF5IiwiX3JlZiIsIl9yZWY0IiwiZW1wdHkiLCJ1bmRlZmluZWRIZWFkZXIiLCJ2YWxGcm9tT3B0aW9uIiwiY29uY2F0TWFwIiwiX3JlZjMiLCJfcmVmNCQxIiwiX3JlZjciLCJfcmVmOCIsIl9yZWY5IiwibWVyZ2VBbGwiLCJfcmVmMTEiLCJfcmVmMTYiLCJ0YWtlTGFzdCIsIl9yZWYkMSIsIl9yZWYkMiIsIl9yZWYyIiwiX3JlZjMkMSIsIl9yZWYzJDIiLCJhZGRFdmVudExpc3RlbmVyIiwiX3JlZjQkMiIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJidWZmZXIkMSIsImNvbWJpbmUkMSIsImNvbmNhdE1hcCQxIiwiY29uY2F0QWxsJDEiLCJjb25jYXQkMSIsImZpbHRlciQxIiwibWFwJDEiLCJtZXJnZU1hcCQxIiwibWVyZ2UkMSIsIm1lcmdlQWxsJDEiLCJmbGF0dGVuJDEiLCJvbkVuZCQxIiwib25QdXNoJDEiLCJ0YXAkMSIsIm9uU3RhcnQkMSIsInNhbXBsZSQxIiwic2NhbiQxIiwic2hhcmUkMSIsInNraXAkMSIsInNraXBVbnRpbCQxIiwic2tpcFdoaWxlJDEiLCJzd2l0Y2hNYXAkMSIsInN3aXRjaEFsbCQxIiwidGFrZSQxIiwidGFrZUxhc3QkMSIsInRha2VVbnRpbCQxIiwidGFrZVdoaWxlJDEiLCJzdWJzY3JpYmUkMSIsImZvckVhY2gkMSIsInB1Ymxpc2gkMSIsInRvQXJyYXkkMSIsIm9ic2VydmFibGVTeW1ib2wiLCJmcm9tT2JzZXJ2YWJsZSQyIiwidG9PYnNlcnZhYmxlJDIiLCJmcm9tQ2FsbGJhZyQyIiwidG9DYWxsYmFnJDIiLCJkZWJvdW5jZSQxIiwiZGVsYXkkMSIsInRocm90dGxlJDEiLCJ0b1Byb21pc2UkMSIsImludGVydmFsJDEiLCJmcm9tRG9tRXZlbnQkMSIsImZyb21Qcm9taXNlJDEiLCJmcm9tQXJyYXkkMSIsImVtcHR5JDEiLCJvYnNlcnZhYmxlIiwiY2xvc2VkIiwiYnVmZmVyIiwiY29tYmluZSIsImNvbmNhdEFsbCIsImRlYm91bmNlIiwiZGVsYXkiLCJmbGF0dGVuIiwiZnJvbUNhbGxiYWciLCJmcm9tRG9tRXZlbnQiLCJmcm9tTGlzdCIsImZyb21PYnNlcnZhYmxlIiwiZnJvbVByb21pc2UiLCJpbnRlcnZhbCIsIm5ldmVyIiwicGlwZSIsInNhbXBsZSIsInNjYW4iLCJza2lwIiwic2tpcFVudGlsIiwic2tpcFdoaWxlIiwic3dpdGNoQWxsIiwidGFrZVdoaWxlIiwidGhyb3R0bGUiLCJ0b0FycmF5IiwidG9DYWxsYmFnIiwidG9PYnNlcnZhYmxlIiwiX3R5cGVvZiIsIm9iaiIsIml0ZXJhdG9yIiwiX2RlZmluZVByb3BlcnRpZXMiLCJ0YXJnZXQiLCJwcm9wcyIsImRlc2NyaXB0b3IiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwic2VsZiIsIl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJSZWZlcmVuY2VFcnJvciIsIl93cmFwTmF0aXZlU3VwZXIiLCJDbGFzcyIsIl9jYWNoZSIsImZuIiwiRnVuY3Rpb24iLCJXcmFwcGVyIiwiX2NvbnN0cnVjdCIsIl9nZXRQcm90b3R5cGVPZiIsIl9zZXRQcm90b3R5cGVPZiIsIlBhcmVudCIsImFyZ3MiLCJfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsImluc3RhbmNlIiwic2hhbSIsIlByb3h5Iiwic2V0UHJvdG90eXBlT2YiLCJnZXRQcm90b3R5cGVPZiIsIl9FcnJvciIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsIl9pbmhlcml0cyIsIkRlcml2ZWQiLCJoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiQ29uc3RydWN0b3IiLCJwcm90b1Byb3BzIiwiX3N1cGVyIiwiU3VwZXIiLCJOZXdUYXJnZXQiLCJvcmlnaW5hbEVycm9yIiwiX2xvY2F0aW9uczIiLCJfc291cmNlMiIsIl9wb3NpdGlvbnMyIiwiX2V4dGVuc2lvbnMyIiwiX3RoaXMiLCJfY2xhc3NDYWxsQ2hlY2siLCJfbm9kZXMkMCRsb2MiLCJfbm9kZXMiLCJfc291cmNlIiwiX2xvY2F0aW9ucyIsIl9wb3NpdGlvbnMiLCJsaXN0IiwicG9zIiwiZ2V0TG9jYXRpb24iLCJfZXh0ZW5zaW9ucyIsIm9yaWdpbmFsRXh0ZW5zaW9ucyIsImRlZmluZVByb3BlcnRpZXMiLCJsb2NhdGlvbnMiLCJzdGFjayIsImNhcHR1cmVTdGFja1RyYWNlIiwicHJpbnRFcnJvciIsIlNZTUJPTF9UT19TVFJJTkdfVEFHIiwiX2Vycm9yJG5vZGVzMiIsInByaW50TG9jYXRpb24iLCJfaTQiLCJfZXJyb3IkbG9jYXRpb25zMiIsImxvY2F0aW9uIiwicHJpbnRTb3VyY2VMb2NhdGlvbiIsImZvcm1hdEVycm9yIiwiX2Vycm9yJG1lc3NhZ2UiLCJsb2NhdGVkRXJyb3IiLCJyYXdPcmlnaW5hbEVycm9yIiwic3ludGF4RXJyb3IiLCJwb3NpdGlvbiIsImRlc2NyaXB0aW9uIiwiZXhlY3V0ZSIsImFyZ3NPclNjaGVtYSIsImRvY3VtZW50Iiwicm9vdFZhbHVlIiwiY29udGV4dFZhbHVlIiwidmFyaWFibGVWYWx1ZXMiLCJmaWVsZFJlc29sdmVyIiwidHlwZVJlc29sdmVyIiwiZXhlY3V0ZUltcGwiLCJzY2hlbWEiLCJleGVjdXRlU3luYyIsImFzc2VydFZhbGlkRXhlY3V0aW9uQXJndW1lbnRzIiwiZXhlQ29udGV4dCIsImJ1aWxkRXhlY3V0aW9uQ29udGV4dCIsImdldE9wZXJhdGlvblJvb3RUeXBlIiwiZmllbGRzIiwiY29sbGVjdEZpZWxkcyIsInBhcmVudFR5cGUiLCJzb3VyY2VWYWx1ZSIsInJlc3VsdHMiLCJyZXNwb25zZU5hbWUiLCJmaWVsZE5vZGVzIiwiZmllbGRQYXRoIiwiYWRkUGF0aCIsInJlc29sdmVGaWVsZCIsInJlc29sdmVkUmVzdWx0IiwiZXhlY3V0ZUZpZWxkc1NlcmlhbGx5IiwiZXhlY3V0ZUZpZWxkcyIsImV4ZWN1dGVPcGVyYXRpb24iLCJidWlsZFJlc3BvbnNlIiwicmVzb2x2ZWQiLCJyYXdWYXJpYWJsZVZhbHVlcyIsImFzc2VydFZhbGlkU2NoZW1hIiwiX2RlZmluaXRpb24kbmFtZSIsIl9vcGVyYXRpb24kdmFyaWFibGVEZSIsImZyYWdtZW50cyIsIl9kb2N1bWVudCRkZWZpbml0aW9uczIiLCJkZWZpbml0aW9uIiwidmFyaWFibGVEZWZpbml0aW9ucyIsImNvZXJjZWRWYXJpYWJsZVZhbHVlcyIsImdldFZhcmlhYmxlVmFsdWVzIiwibWF4RXJyb3JzIiwiY29lcmNlZCIsImRlZmF1bHRGaWVsZFJlc29sdmVyIiwiZGVmYXVsdFR5cGVSZXNvbHZlciIsImNvbnRhaW5zUHJvbWlzZSIsIl9PYmplY3Qka2V5czIiLCJydW50aW1lVHlwZSIsInZpc2l0ZWRGcmFnbWVudE5hbWVzIiwiX2k2IiwiX3NlbGVjdGlvblNldCRzZWxlY3RpMiIsInNlbGVjdGlvbiIsInNob3VsZEluY2x1ZGVOb2RlIiwiZG9lc0ZyYWdtZW50Q29uZGl0aW9uTWF0Y2giLCJmcmFnTmFtZSIsImZyYWdtZW50IiwiZ2V0RGlyZWN0aXZlVmFsdWVzIiwiR3JhcGhRTFNraXBEaXJlY3RpdmUiLCJpZiIsImluY2x1ZGUiLCJHcmFwaFFMSW5jbHVkZURpcmVjdGl2ZSIsInR5cGVDb25kaXRpb25Ob2RlIiwidHlwZUNvbmRpdGlvbiIsImNvbmRpdGlvbmFsVHlwZSIsInR5cGVGcm9tQVNUIiwiaXNBYnN0cmFjdFR5cGUiLCJpc1N1YlR5cGUiLCJfZmllbGREZWYkcmVzb2x2ZSIsImZpZWxkTmFtZSIsImZpZWxkRGVmIiwiZ2V0RmllbGREZWYiLCJyZXR1cm5UeXBlIiwicmVzb2x2ZUZuIiwiaW5mbyIsImJ1aWxkUmVzb2x2ZUluZm8iLCJjb21wbGV0ZWQiLCJnZXRBcmd1bWVudFZhbHVlcyIsImNvbXBsZXRlVmFsdWUiLCJyYXdFcnJvciIsImhhbmRsZUZpZWxkRXJyb3IiLCJwYXRoVG9BcnJheSIsImlzTm9uTnVsbFR5cGUiLCJvZlR5cGUiLCJpc0xpc3RUeXBlIiwiaXRlbVR5cGUiLCJjb21wbGV0ZWRSZXN1bHRzIiwiaXRlbSIsImluZGV4IiwiaXRlbVBhdGgiLCJjb21wbGV0ZWRJdGVtIiwiYWxsIiwiY29tcGxldGVMaXN0VmFsdWUiLCJpc0xlYWZUeXBlIiwic2VyaWFsaXplZFJlc3VsdCIsInNlcmlhbGl6ZSIsImNvbXBsZXRlTGVhZlZhbHVlIiwiX3JldHVyblR5cGUkcmVzb2x2ZVR5IiwicmVzb2x2ZVR5cGVGbiIsInJlc29sdmVUeXBlIiwicmVzb2x2ZWRSdW50aW1lVHlwZSIsImNvbXBsZXRlT2JqZWN0VmFsdWUiLCJlbnN1cmVWYWxpZFJ1bnRpbWVUeXBlIiwiY29tcGxldGVBYnN0cmFjdFZhbHVlIiwiaXNPYmplY3RUeXBlIiwicnVudGltZVR5cGVPck5hbWUiLCJydW50aW1lVHlwZU5hbWUiLCJpc05hbWVkVHlwZSIsImdldFR5cGUiLCJpc1R5cGVPZiIsInJlc29sdmVkSXNUeXBlT2YiLCJpbnZhbGlkUmV0dXJuVHlwZUVycm9yIiwiY29sbGVjdEFuZEV4ZWN1dGVTdWJmaWVsZHMiLCJjb2xsZWN0U3ViZmllbGRzIiwic3ViRmllbGROb2RlcyIsIl9pOCIsImFic3RyYWN0VHlwZSIsIl9fdHlwZW5hbWUiLCJwb3NzaWJsZVR5cGVzIiwiZ2V0UG9zc2libGVUeXBlcyIsInByb21pc2VkSXNUeXBlT2ZSZXN1bHRzIiwiaXNUeXBlT2ZSZXN1bHQiLCJpc1R5cGVPZlJlc3VsdHMiLCJfaTkiLCJwcm9wZXJ0eSIsIlNjaGVtYU1ldGFGaWVsZERlZiIsImdldFF1ZXJ5VHlwZSIsIlR5cGVNZXRhRmllbGREZWYiLCJUeXBlTmFtZU1ldGFGaWVsZERlZiIsImdldEZpZWxkcyIsInZhckRlZk5vZGVzIiwiaW5wdXRzIiwiY29lcmNlZFZhbHVlcyIsIl9sb29wIiwidmFyRGVmTm9kZSIsInZhck5hbWUiLCJ2YXJpYWJsZSIsInZhclR5cGUiLCJpc0lucHV0VHlwZSIsInZhclR5cGVTdHIiLCJkZWZhdWx0VmFsdWUiLCJ2YWx1ZUZyb21BU1QiLCJfdmFyVHlwZVN0ciIsIl92YXJUeXBlU3RyMiIsImNvZXJjZUlucHV0VmFsdWUiLCJpbnZhbGlkVmFsdWUiLCJwcmVmaXgiLCJjb2VyY2VWYXJpYWJsZVZhbHVlcyIsImRlZiIsIl9ub2RlJGFyZ3VtZW50cyIsImFyZ3VtZW50Tm9kZXMiLCJhcmdOb2RlTWFwIiwiYXJnIiwiX2RlZiRhcmdzMiIsImFyZ0RlZiIsImFyZ1R5cGUiLCJhcmd1bWVudE5vZGUiLCJ2YWx1ZU5vZGUiLCJpc051bGwiLCJ2YXJpYWJsZU5hbWUiLCJjb2VyY2VkVmFsdWUiLCJkaXJlY3RpdmVEZWYiLCJkaXJlY3RpdmVOb2RlIiwiZGlyZWN0aXZlcyIsImRpcmVjdGl2ZSIsInByb3AiLCJncmFwaHFsIiwiX2FyZ3VtZW50cyIsImdyYXBocWxJbXBsIiwiZ3JhcGhxbFN5bmMiLCJzY2hlbWFWYWxpZGF0aW9uRXJyb3JzIiwidmFsaWRhdGVTY2hlbWEiLCJ2YWxpZGF0aW9uRXJyb3JzIiwidmFsaWRhdGUiLCJwcmV2IiwidHlwZW5hbWUiLCJmbGF0dGVuZWQiLCJyZXZlcnNlIiwiZGVmaW5lSW5zcGVjdCIsImNsYXNzT2JqZWN0IiwiaW5zcGVjdCIsImRldkFzc2VydCIsImNvbmRpdGlvbiIsIkJvb2xlYW4iLCJkaWRZb3VNZWFuIiwiZmlyc3RBcmciLCJzZWNvbmRBcmciLCJzdWJNZXNzYWdlIiwic3VnZ2VzdGlvbnMiLCJzZWxlY3RlZCIsImxhc3RJdGVtIiwicG9wIiwiaWRlbnRpdHlGdW5jIiwiZm9ybWF0VmFsdWUiLCJzZWVuVmFsdWVzIiwicHJldmlvdXNseVNlZW5WYWx1ZXMiLCJjdXN0b21JbnNwZWN0Rm4iLCJvYmplY3QiLCJTdHJpbmciLCJnZXRDdXN0b21GbiIsImN1c3RvbVZhbHVlIiwiYXJyYXkiLCJtaW4iLCJyZW1haW5pbmciLCJpdGVtcyIsImZvcm1hdEFycmF5IiwiZ2V0T2JqZWN0VGFnIiwiZm9ybWF0T2JqZWN0IiwiZm9ybWF0T2JqZWN0VmFsdWUiLCJfdmFsdWUkY29uc3RydWN0b3IiLCJjbGFzc05hbWUiLCJ0b1N0cmluZ1RhZyIsInN0cmluZ2lmaWVkVmFsdWUiLCJpbnZhcmlhbnQiLCJpc0FzeW5jSXRlcmFibGUiLCJtYXliZUFzeW5jSXRlcmFibGUiLCJTWU1CT0xfQVNZTkNfSVRFUkFUT1IiLCJpc09iamVjdExpa2UiLCJpc1Byb21pc2UiLCJrZXlNYXAiLCJrZXlGbiIsImtleVZhbE1hcCIsInZhbEZuIiwibWFwVmFsdWUiLCJfb2JqZWN0RW50cmllczIiLCJfa2V5IiwiX3ZhbHVlIiwibWVtb2l6ZTMiLCJjYWNoZTAiLCJhMSIsImEyIiwiYTMiLCJjYWNoZTIiLCJjYWNoZTEiLCJjYWNoZWRWYWx1ZSIsIm5hdHVyYWxDb21wYXJlIiwiYVN0ciIsImJTdHIiLCJhSWR4IiwiYklkeCIsImFDaGFyIiwiYkNoYXIiLCJpc0RpZ2l0IiwiYU51bSIsIkRJR0lUXzAiLCJiTnVtIiwiaXNOYU4iLCJmb3IiLCJwcmludFBhdGhBcnJheSIsInByb21pc2VGb3JPYmplY3QiLCJ2YWx1ZXNBbmRQcm9taXNlcyIsInZhbHVlcyIsInJlc29sdmVkT2JqZWN0IiwicHJvbWlzZVJlZHVjZSIsImNhbGxiYWNrIiwiaW5pdGlhbFZhbHVlIiwicHJldmlvdXMiLCJzYWZlQXJyYXlGcm9tIiwiY29sbGVjdGlvbiIsIm1hcEZuIiwiaXRlcmF0b3JNZXRob2QiLCJTWU1CT0xfSVRFUkFUT1IiLCJzdGVwIiwiX3Jlc3VsdCIsInN1Z2dlc3Rpb25MaXN0Iiwib3B0aW9uc0J5RGlzdGFuY2UiLCJsZXhpY2FsRGlzdGFuY2UiLCJMZXhpY2FsRGlzdGFuY2UiLCJ0aHJlc2hvbGQiLCJvcHRpb24iLCJkaXN0YW5jZSIsIm1lYXN1cmUiLCJkaXN0YW5jZURpZmYiLCJfaW5wdXQiLCJfaW5wdXRMb3dlckNhc2UiLCJfaW5wdXRBcnJheSIsInN0cmluZ1RvQXJyYXkiLCJfcm93cyIsImZpbGwiLCJvcHRpb25Mb3dlckNhc2UiLCJ0bXAiLCJhTGVuZ3RoIiwiYkxlbmd0aCIsInJvd3MiLCJ1cFJvdyIsImN1cnJlbnRSb3ciLCJzbWFsbGVzdENlbGwiLCJfaiIsImNvc3QiLCJjdXJyZW50Q2VsbCIsImRvdWJsZURpYWdvbmFsQ2VsbCIsInN0ckxlbmd0aCIsInRvT2JqTWFwIiwiTG9jYXRpb24iLCJzdGFydFRva2VuIiwiZW5kVG9rZW4iLCJUb2tlbiIsImlzTm9kZSIsIm1heWJlTm9kZSIsImRlZGVudEJsb2NrU3RyaW5nVmFsdWUiLCJyYXdTdHJpbmciLCJsaW5lcyIsInNwbGl0IiwiY29tbW9uSW5kZW50IiwiZ2V0QmxvY2tTdHJpbmdJbmRlbnRhdGlvbiIsInN0YXJ0TGluZSIsImlzQmxhbmsiLCJlbmRMaW5lIiwiX2NvbW1vbkluZGVudCIsImlzRmlyc3RMaW5lIiwiaXNFbXB0eUxpbmUiLCJpbmRlbnQiLCJwcmludEJsb2NrU3RyaW5nIiwiaW5kZW50YXRpb24iLCJwcmVmZXJNdWx0aXBsZUxpbmVzIiwiaXNTaW5nbGVMaW5lIiwiaGFzTGVhZGluZ1NwYWNlIiwiaGFzVHJhaWxpbmdRdW90ZSIsImhhc1RyYWlsaW5nU2xhc2giLCJwcmludEFzTXVsdGlwbGVMaW5lcyIsIkRpcmVjdGl2ZUxvY2F0aW9uIiwiZnJlZXplIiwiUVVFUlkiLCJNVVRBVElPTiIsIlNVQlNDUklQVElPTiIsIkZSQUdNRU5UX1NQUkVBRCIsIklOTElORV9GUkFHTUVOVCIsIlZBUklBQkxFX0RFRklOSVRJT04iLCJTQ0hFTUEiLCJTQ0FMQVIiLCJPQkpFQ1QiLCJGSUVMRF9ERUZJTklUSU9OIiwiQVJHVU1FTlRfREVGSU5JVElPTiIsIklOVEVSRkFDRSIsIlVOSU9OIiwiRU5VTSIsIkVOVU1fVkFMVUUiLCJJTlBVVF9PQkpFQ1QiLCJJTlBVVF9GSUVMRF9ERUZJTklUSU9OIiwiU0VMRUNUSU9OX1NFVCIsIkFSR1VNRU5UIiwiVkFSSUFCTEUiLCJJTlQiLCJGTE9BVCIsIlNUUklORyIsIkJPT0xFQU4iLCJOVUxMIiwiTElTVCIsIk9CSkVDVF9GSUVMRCIsIkRJUkVDVElWRSIsIk5BTUVEX1RZUEUiLCJMSVNUX1RZUEUiLCJOT05fTlVMTF9UWVBFIiwiU0NIRU1BX0RFRklOSVRJT04iLCJPUEVSQVRJT05fVFlQRV9ERUZJTklUSU9OIiwiU0NBTEFSX1RZUEVfREVGSU5JVElPTiIsIk9CSkVDVF9UWVBFX0RFRklOSVRJT04iLCJJTlBVVF9WQUxVRV9ERUZJTklUSU9OIiwiSU5URVJGQUNFX1RZUEVfREVGSU5JVElPTiIsIlVOSU9OX1RZUEVfREVGSU5JVElPTiIsIkVOVU1fVFlQRV9ERUZJTklUSU9OIiwiRU5VTV9WQUxVRV9ERUZJTklUSU9OIiwiSU5QVVRfT0JKRUNUX1RZUEVfREVGSU5JVElPTiIsIkRJUkVDVElWRV9ERUZJTklUSU9OIiwiU0NIRU1BX0VYVEVOU0lPTiIsIlNDQUxBUl9UWVBFX0VYVEVOU0lPTiIsIk9CSkVDVF9UWVBFX0VYVEVOU0lPTiIsIklOVEVSRkFDRV9UWVBFX0VYVEVOU0lPTiIsIlVOSU9OX1RZUEVfRVhURU5TSU9OIiwiRU5VTV9UWVBFX0VYVEVOU0lPTiIsIklOUFVUX09CSkVDVF9UWVBFX0VYVEVOU0lPTiIsIkxleGVyIiwic3RhcnRPZkZpbGVUb2tlbiIsIlRva2VuS2luZCIsImxhc3RUb2tlbiIsInRva2VuIiwibGluZVN0YXJ0IiwiX3Byb3RvIiwiYWR2YW5jZSIsImxvb2thaGVhZCIsIl90b2tlbiRuZXh0IiwicmVhZFRva2VuIiwiaXNQdW5jdHVhdG9yVG9rZW5LaW5kIiwicHJpbnRDaGFyQ29kZSIsImZyb21DaGFyQ29kZSIsInRvVXBwZXJDYXNlIiwibGV4ZXIiLCJib2R5TGVuZ3RoIiwiX2xpbmUiLCJfY29sIiwicmVhZENvbW1lbnQiLCJyZWFkQmxvY2tTdHJpbmciLCJyZWFkU3RyaW5nIiwicmVhZE51bWJlciIsInJlYWROYW1lIiwidW5leHBlY3RlZENoYXJhY3Rlck1lc3NhZ2UiLCJjb2wiLCJmaXJzdENvZGUiLCJpc0Zsb2F0IiwicmVhZERpZ2l0cyIsImlzTmFtZVN0YXJ0IiwiY2h1bmtTdGFydCIsImNoYXJDb2RlIiwiY2hhcjJoZXgiLCJpbnZhbGlkU2VxdWVuY2UiLCJyYXdWYWx1ZSIsImxpbmVSZWdleHAiLCJleGVjIiwiUGFyc2VyIiwicGFyc2VEb2N1bWVudCIsInBhcnNlVmFsdWUiLCJwYXJzZXIiLCJleHBlY3RUb2tlbiIsInBhcnNlVmFsdWVMaXRlcmFsIiwicGFyc2VUeXBlIiwicGFyc2VUeXBlUmVmZXJlbmNlIiwic291cmNlT2JqIiwiaXNTb3VyY2UiLCJTb3VyY2UiLCJfbGV4ZXIiLCJfb3B0aW9ucyIsInBhcnNlTmFtZSIsIm1hbnkiLCJwYXJzZURlZmluaXRpb24iLCJwZWVrIiwicGFyc2VPcGVyYXRpb25EZWZpbml0aW9uIiwicGFyc2VGcmFnbWVudERlZmluaXRpb24iLCJwYXJzZVR5cGVTeXN0ZW1EZWZpbml0aW9uIiwicGFyc2VUeXBlU3lzdGVtRXh0ZW5zaW9uIiwicGVla0Rlc2NyaXB0aW9uIiwidW5leHBlY3RlZCIsInBhcnNlU2VsZWN0aW9uU2V0IiwicGFyc2VPcGVyYXRpb25UeXBlIiwicGFyc2VWYXJpYWJsZURlZmluaXRpb25zIiwicGFyc2VEaXJlY3RpdmVzIiwib3BlcmF0aW9uVG9rZW4iLCJvcHRpb25hbE1hbnkiLCJwYXJzZVZhcmlhYmxlRGVmaW5pdGlvbiIsInBhcnNlVmFyaWFibGUiLCJleHBlY3RPcHRpb25hbFRva2VuIiwicGFyc2VTZWxlY3Rpb24iLCJwYXJzZUZyYWdtZW50IiwicGFyc2VGaWVsZCIsIm5hbWVPckFsaWFzIiwicGFyc2VBcmd1bWVudHMiLCJpc0NvbnN0IiwicGFyc2VDb25zdEFyZ3VtZW50IiwicGFyc2VBcmd1bWVudCIsImhhc1R5cGVDb25kaXRpb24iLCJleHBlY3RPcHRpb25hbEtleXdvcmQiLCJwYXJzZUZyYWdtZW50TmFtZSIsInBhcnNlTmFtZWRUeXBlIiwiX3RoaXMkX29wdGlvbnMiLCJleHBlY3RLZXl3b3JkIiwiZXhwZXJpbWVudGFsRnJhZ21lbnRWYXJpYWJsZXMiLCJwYXJzZUxpc3QiLCJwYXJzZU9iamVjdCIsInBhcnNlU3RyaW5nTGl0ZXJhbCIsImJsb2NrIiwiYW55IiwiX3RoaXMyIiwicGFyc2VPYmplY3RGaWVsZCIsInBhcnNlRGlyZWN0aXZlIiwia2V5d29yZFRva2VuIiwicGFyc2VTY2hlbWFEZWZpbml0aW9uIiwicGFyc2VTY2FsYXJUeXBlRGVmaW5pdGlvbiIsInBhcnNlT2JqZWN0VHlwZURlZmluaXRpb24iLCJwYXJzZUludGVyZmFjZVR5cGVEZWZpbml0aW9uIiwicGFyc2VVbmlvblR5cGVEZWZpbml0aW9uIiwicGFyc2VFbnVtVHlwZURlZmluaXRpb24iLCJwYXJzZUlucHV0T2JqZWN0VHlwZURlZmluaXRpb24iLCJwYXJzZURpcmVjdGl2ZURlZmluaXRpb24iLCJwYXJzZURlc2NyaXB0aW9uIiwib3BlcmF0aW9uVHlwZXMiLCJwYXJzZU9wZXJhdGlvblR5cGVEZWZpbml0aW9uIiwiaW50ZXJmYWNlcyIsInBhcnNlSW1wbGVtZW50c0ludGVyZmFjZXMiLCJwYXJzZUZpZWxkc0RlZmluaXRpb24iLCJfdGhpcyRfb3B0aW9uczIiLCJhbGxvd0xlZ2FjeVNETEltcGxlbWVudHNJbnRlcmZhY2VzIiwidHlwZXMiLCJkZWxpbWl0ZWRNYW55IiwiX3RoaXMkX29wdGlvbnMzIiwiYWxsb3dMZWdhY3lTRExFbXB0eUZpZWxkcyIsInBhcnNlRmllbGREZWZpbml0aW9uIiwicGFyc2VBcmd1bWVudERlZnMiLCJwYXJzZUlucHV0VmFsdWVEZWYiLCJwYXJzZVVuaW9uTWVtYmVyVHlwZXMiLCJwYXJzZUVudW1WYWx1ZXNEZWZpbml0aW9uIiwicGFyc2VFbnVtVmFsdWVEZWZpbml0aW9uIiwicGFyc2VJbnB1dEZpZWxkc0RlZmluaXRpb24iLCJwYXJzZVNjaGVtYUV4dGVuc2lvbiIsInBhcnNlU2NhbGFyVHlwZUV4dGVuc2lvbiIsInBhcnNlT2JqZWN0VHlwZUV4dGVuc2lvbiIsInBhcnNlSW50ZXJmYWNlVHlwZUV4dGVuc2lvbiIsInBhcnNlVW5pb25UeXBlRXh0ZW5zaW9uIiwicGFyc2VFbnVtVHlwZUV4dGVuc2lvbiIsInBhcnNlSW5wdXRPYmplY3RUeXBlRXh0ZW5zaW9uIiwicmVwZWF0YWJsZSIsInBhcnNlRGlyZWN0aXZlTG9jYXRpb25zIiwicGFyc2VEaXJlY3RpdmVMb2NhdGlvbiIsIl90aGlzJF9vcHRpb25zNCIsImdldFRva2VuS2luZERlc2MiLCJnZXRUb2tlbkRlc2MiLCJhdFRva2VuIiwib3BlbktpbmQiLCJwYXJzZUZuIiwiY2xvc2VLaW5kIiwiZGVsaW1pdGVyS2luZCIsImlzRGVmaW5pdGlvbk5vZGUiLCJpc0V4ZWN1dGFibGVEZWZpbml0aW9uTm9kZSIsImlzVHlwZVN5c3RlbURlZmluaXRpb25Ob2RlIiwiaXNUeXBlU3lzdGVtRXh0ZW5zaW9uTm9kZSIsImlzU2VsZWN0aW9uTm9kZSIsImlzVmFsdWVOb2RlIiwiaXNUeXBlTm9kZSIsImlzVHlwZURlZmluaXRpb25Ob2RlIiwiaXNUeXBlRXh0ZW5zaW9uTm9kZSIsInNvdXJjZUxvY2F0aW9uIiwiZmlyc3RMaW5lQ29sdW1uT2Zmc2V0Iiwid2hpdGVzcGFjZSIsImxpbmVJbmRleCIsImxpbmVPZmZzZXQiLCJsaW5lTnVtIiwiY29sdW1uT2Zmc2V0IiwiY29sdW1uTnVtIiwibG9jYXRpb25TdHIiLCJsb2NhdGlvbkxpbmUiLCJzdWJMaW5lSW5kZXgiLCJzdWJMaW5lQ29sdW1uTnVtIiwic3ViTGluZXMiLCJwcmludFByZWZpeGVkTGluZXMiLCJzdWJMaW5lIiwiZXhpc3RpbmdMaW5lcyIsInBhZExlbiIsIm1heCIsImFzdCIsImxlYXZlIiwicHJpbnREb2NBU1RSZWR1Y2VyIiwiTmFtZSIsIlZhcmlhYmxlIiwiRG9jdW1lbnQiLCJPcGVyYXRpb25EZWZpbml0aW9uIiwib3AiLCJ2YXJEZWZzIiwid3JhcCIsIlZhcmlhYmxlRGVmaW5pdGlvbiIsIlNlbGVjdGlvblNldCIsImFyZ3NMaW5lIiwiQXJndW1lbnQiLCJGcmFnbWVudFNwcmVhZCIsIl9yZWY1IiwiX3JlZjYiLCJGcmFnbWVudERlZmluaXRpb24iLCJJbnRWYWx1ZSIsIkZsb2F0VmFsdWUiLCJTdHJpbmdWYWx1ZSIsIl9yZWYxMCIsIkJvb2xlYW5WYWx1ZSIsIk51bGxWYWx1ZSIsIkVudW1WYWx1ZSIsIl9yZWYxMiIsIkxpc3RWYWx1ZSIsIl9yZWYxMyIsIk9iamVjdFZhbHVlIiwiX3JlZjE0IiwiT2JqZWN0RmllbGQiLCJfcmVmMTUiLCJEaXJlY3RpdmUiLCJOYW1lZFR5cGUiLCJfcmVmMTciLCJMaXN0VHlwZSIsIl9yZWYxOCIsIk5vbk51bGxUeXBlIiwiX3JlZjE5IiwiU2NoZW1hRGVmaW5pdGlvbiIsImFkZERlc2NyaXB0aW9uIiwiX3JlZjIwIiwiT3BlcmF0aW9uVHlwZURlZmluaXRpb24iLCJfcmVmMjEiLCJTY2FsYXJUeXBlRGVmaW5pdGlvbiIsIl9yZWYyMiIsIk9iamVjdFR5cGVEZWZpbml0aW9uIiwiX3JlZjIzIiwiRmllbGREZWZpbml0aW9uIiwiX3JlZjI0IiwiaGFzTXVsdGlsaW5lSXRlbXMiLCJJbnB1dFZhbHVlRGVmaW5pdGlvbiIsIl9yZWYyNSIsIkludGVyZmFjZVR5cGVEZWZpbml0aW9uIiwiX3JlZjI2IiwiVW5pb25UeXBlRGVmaW5pdGlvbiIsIl9yZWYyNyIsIkVudW1UeXBlRGVmaW5pdGlvbiIsIl9yZWYyOCIsIkVudW1WYWx1ZURlZmluaXRpb24iLCJfcmVmMjkiLCJJbnB1dE9iamVjdFR5cGVEZWZpbml0aW9uIiwiX3JlZjMwIiwiRGlyZWN0aXZlRGVmaW5pdGlvbiIsIl9yZWYzMSIsIlNjaGVtYUV4dGVuc2lvbiIsIl9yZWYzMiIsIlNjYWxhclR5cGVFeHRlbnNpb24iLCJfcmVmMzMiLCJPYmplY3RUeXBlRXh0ZW5zaW9uIiwiX3JlZjM0IiwiSW50ZXJmYWNlVHlwZUV4dGVuc2lvbiIsIl9yZWYzNSIsIlVuaW9uVHlwZUV4dGVuc2lvbiIsIl9yZWYzNiIsIkVudW1UeXBlRXh0ZW5zaW9uIiwiX3JlZjM3IiwiSW5wdXRPYmplY3RUeXBlRXh0ZW5zaW9uIiwiX3JlZjM4IiwiY2IiLCJtYXliZUFycmF5IiwiX21heWJlQXJyYXkkZmlsdGVyJGpvIiwic2VwYXJhdG9yIiwibWF5YmVTdHJpbmciLCJpc011bHRpbGluZSIsIlNPRiIsIkVPRiIsIkJBTkciLCJET0xMQVIiLCJBTVAiLCJQQVJFTl9MIiwiUEFSRU5fUiIsIlNQUkVBRCIsIkNPTE9OIiwiRVFVQUxTIiwiQVQiLCJCUkFDS0VUX0wiLCJCUkFDS0VUX1IiLCJCUkFDRV9MIiwiUElQRSIsIkJSQUNFX1IiLCJCTE9DS19TVFJJTkciLCJDT01NRU5UIiwiUXVlcnlEb2N1bWVudEtleXMiLCJCUkVBSyIsInJvb3QiLCJ2aXNpdG9yIiwidmlzaXRvcktleXMiLCJpbkFycmF5IiwiZWRpdHMiLCJwYXJlbnQiLCJhbmNlc3RvcnMiLCJuZXdSb290IiwiaXNMZWF2aW5nIiwiaXNFZGl0ZWQiLCJjbG9uZSIsImVkaXRPZmZzZXQiLCJpaSIsImVkaXRLZXkiLCJlZGl0VmFsdWUiLCJfdmlzaXRvcktleXMkbm9kZSRraW4iLCJ2aXNpdEZuIiwiZ2V0VmlzaXRGbiIsInZpc2l0SW5QYXJhbGxlbCIsInZpc2l0b3JzIiwic2tpcHBpbmciLCJlbnRlciIsImtpbmRWaXNpdG9yIiwia2luZFNwZWNpZmljVmlzaXRvciIsInNwZWNpZmljVmlzaXRvciIsInNwZWNpZmljS2luZFZpc2l0b3IiLCJmcm9tIiwidGhpc0FyZyIsImZpbmQiLCJwcmVkaWNhdGUiLCJOdW1iZXIiLCJpc0Zpbml0ZSIsImlzSW50ZWdlciIsIm1hcEFzeW5jSXRlcmF0b3IiLCJpdGVyYWJsZSIsInJlamVjdENhbGxiYWNrIiwiJHJldHVybiIsImFicnVwdENsb3NlIiwibWFwUmVqZWN0IiwibWFwUmVzdWx0IiwiYXN5bmNNYXBWYWx1ZSIsIml0ZXJhdG9yUmVzdWx0IiwicmV0dXJuIiwicmV0aHJvdyIsInJlamVjdCIsInRocm93Iiwic3Vic2NyaWJlRmllbGRSZXNvbHZlciIsInN1YnNjcmliZUltcGwiLCJyZXBvcnRHcmFwaFFMRXJyb3IiLCJzb3VyY2VQcm9taXNlIiwiY3JlYXRlU291cmNlRXZlbnRTdHJlYW0iLCJtYXBTb3VyY2VUb1Jlc3BvbnNlIiwicGF5bG9hZCIsInJlc3VsdE9yU3RyZWFtIiwicmVzb2x2ZVJlc3VsdCIsIl9maWVsZERlZiRzdWJzY3JpYmUiLCJldmVudFN0cmVhbSIsIl9jcmVhdGVDbGFzcyIsInN0YXRpY1Byb3BzIiwiaXNUeXBlIiwiaXNTY2FsYXJUeXBlIiwiaXNJbnRlcmZhY2VUeXBlIiwiaXNVbmlvblR5cGUiLCJpc0VudW1UeXBlIiwiaXNJbnB1dE9iamVjdFR5cGUiLCJhc3NlcnRUeXBlIiwiR3JhcGhRTFNjYWxhclR5cGUiLCJhc3NlcnRTY2FsYXJUeXBlIiwiR3JhcGhRTE9iamVjdFR5cGUiLCJhc3NlcnRPYmplY3RUeXBlIiwiR3JhcGhRTEludGVyZmFjZVR5cGUiLCJhc3NlcnRJbnRlcmZhY2VUeXBlIiwiR3JhcGhRTFVuaW9uVHlwZSIsImFzc2VydFVuaW9uVHlwZSIsIkdyYXBoUUxFbnVtVHlwZSIsImFzc2VydEVudW1UeXBlIiwiR3JhcGhRTElucHV0T2JqZWN0VHlwZSIsImFzc2VydElucHV0T2JqZWN0VHlwZSIsIkdyYXBoUUxMaXN0IiwiYXNzZXJ0TGlzdFR5cGUiLCJHcmFwaFFMTm9uTnVsbCIsImFzc2VydE5vbk51bGxUeXBlIiwiaXNXcmFwcGluZ1R5cGUiLCJhc3NlcnRJbnB1dFR5cGUiLCJpc091dHB1dFR5cGUiLCJhc3NlcnRPdXRwdXRUeXBlIiwiYXNzZXJ0TGVhZlR5cGUiLCJpc0NvbXBvc2l0ZVR5cGUiLCJhc3NlcnRDb21wb3NpdGVUeXBlIiwiYXNzZXJ0QWJzdHJhY3RUeXBlIiwiYXNzZXJ0TnVsbGFibGVUeXBlIiwiYXNzZXJ0V3JhcHBpbmdUeXBlIiwiaXNOdWxsYWJsZVR5cGUiLCJnZXROdWxsYWJsZVR5cGUiLCJhc3NlcnROYW1lZFR5cGUiLCJnZXROYW1lZFR5cGUiLCJ1bndyYXBwZWRUeXBlIiwicmVzb2x2ZVRodW5rIiwidGh1bmsiLCJ1bmRlZmluZUlmRW1wdHkiLCJjb25maWciLCJfY29uZmlnJHBhcnNlVmFsdWUiLCJfY29uZmlnJHNlcmlhbGl6ZSIsIl9jb25maWckcGFyc2VMaXRlcmFsIiwic3BlY2lmaWVkQnlVcmwiLCJwYXJzZUxpdGVyYWwiLCJ2YWx1ZUZyb21BU1RVbnR5cGVkIiwiYXN0Tm9kZSIsImV4dGVuc2lvbkFTVE5vZGVzIiwidG9Db25maWciLCJfdGhpcyRleHRlbnNpb25BU1ROb2QiLCJfZmllbGRzIiwiZGVmaW5lRmllbGRNYXAiLCJfaW50ZXJmYWNlcyIsImRlZmluZUludGVyZmFjZXMiLCJfcHJvdG8yIiwiZ2V0SW50ZXJmYWNlcyIsImZpZWxkc1RvRmllbGRzQ29uZmlnIiwiX3Jlc29sdmVUaHVuayIsImZpZWxkTWFwIiwiaXNQbGFpbk9iaiIsImZpZWxkQ29uZmlnIiwiX2ZpZWxkQ29uZmlnJGFyZ3MiLCJhcmdzQ29uZmlnIiwiYXJnTmFtZSIsImFyZ0NvbmZpZyIsImRlcHJlY2F0aW9uUmVhc29uIiwiaXNEZXByZWNhdGVkIiwiZmllbGQiLCJhcmdzVG9BcmdzQ29uZmlnIiwiaXNSZXF1aXJlZEFyZ3VtZW50IiwiX3Byb3RvMyIsIl90aGlzJGV4dGVuc2lvbkFTVE5vZDIiLCJfdHlwZXMiLCJkZWZpbmVUeXBlcyIsIl9wcm90bzQiLCJnZXRUeXBlcyIsIl90aGlzJGV4dGVuc2lvbkFTVE5vZDMiLCJ0eXBlTmFtZSIsInZhbHVlTWFwIiwiX3ZhbHVlcyIsInZhbHVlTmFtZSIsInZhbHVlQ29uZmlnIiwiX3ZhbHVlTG9va3VwIiwiZW51bVZhbHVlIiwiX25hbWVMb29rdXAiLCJfcHJvdG81IiwiZ2V0VmFsdWVzIiwiZ2V0VmFsdWUiLCJvdXRwdXRWYWx1ZSIsImlucHV0VmFsdWUiLCJ2YWx1ZVN0ciIsImRpZFlvdU1lYW5FbnVtVmFsdWUiLCJfdmFyaWFibGVzIiwiX3ZhbHVlU3RyIiwiX3RoaXMkZXh0ZW5zaW9uQVNUTm9kNCIsImVudW1UeXBlIiwidW5rbm93blZhbHVlU3RyIiwiYWxsTmFtZXMiLCJzdWdnZXN0ZWRWYWx1ZXMiLCJkZWZpbmVJbnB1dEZpZWxkTWFwIiwiX3Byb3RvNiIsIl90aGlzJGV4dGVuc2lvbkFTVE5vZDUiLCJpc1JlcXVpcmVkSW5wdXRGaWVsZCIsImlzRGlyZWN0aXZlIiwiR3JhcGhRTERpcmVjdGl2ZSIsImFzc2VydERpcmVjdGl2ZSIsIl9jb25maWckaXNSZXBlYXRhYmxlIiwiX2NvbmZpZyRhcmdzIiwiaXNSZXBlYXRhYmxlIiwiR3JhcGhRTEJvb2xlYW4iLCJERUZBVUxUX0RFUFJFQ0FUSU9OX1JFQVNPTiIsIkdyYXBoUUxEZXByZWNhdGVkRGlyZWN0aXZlIiwicmVhc29uIiwiR3JhcGhRTFN0cmluZyIsIkdyYXBoUUxTcGVjaWZpZWRCeURpcmVjdGl2ZSIsInNwZWNpZmllZERpcmVjdGl2ZXMiLCJpc1NwZWNpZmllZERpcmVjdGl2ZSIsIl9fU2NoZW1hIiwiX19UeXBlIiwiZ2V0VHlwZU1hcCIsInF1ZXJ5VHlwZSIsIm11dGF0aW9uVHlwZSIsImdldE11dGF0aW9uVHlwZSIsInN1YnNjcmlwdGlvblR5cGUiLCJnZXRTdWJzY3JpcHRpb25UeXBlIiwiX19EaXJlY3RpdmUiLCJnZXREaXJlY3RpdmVzIiwiX19EaXJlY3RpdmVMb2NhdGlvbiIsIl9fSW5wdXRWYWx1ZSIsImluY2x1ZGVEZXByZWNhdGVkIiwiX19UeXBlS2luZCIsIlR5cGVLaW5kIiwiTk9OX05VTEwiLCJfX0ZpZWxkIiwiX2FyZ3MiLCJfY29udGV4dCIsImVudW1WYWx1ZXMiLCJfX0VudW1WYWx1ZSIsImlucHV0RmllbGRzIiwidmFsdWVBU1QiLCJhc3RGcm9tVmFsdWUiLCJpbnRyb3NwZWN0aW9uVHlwZXMiLCJpc0ludHJvc3BlY3Rpb25UeXBlIiwiTUFYX0lOVCIsIk1JTl9JTlQiLCJHcmFwaFFMSW50Iiwic2VyaWFsaXplT2JqZWN0IiwiR3JhcGhRTEZsb2F0IiwicGFyc2VGbG9hdCIsInZhbHVlT2YiLCJ2YWx1ZU9mUmVzdWx0IiwiR3JhcGhRTElEIiwic3BlY2lmaWVkU2NhbGFyVHlwZXMiLCJpc1NwZWNpZmllZFNjYWxhclR5cGUiLCJpc1NjaGVtYSIsIkdyYXBoUUxTY2hlbWEiLCJhc3NlcnRTY2hlbWEiLCJfY29uZmlnJGRpcmVjdGl2ZXMiLCJfX3ZhbGlkYXRpb25FcnJvcnMiLCJhc3N1bWVWYWxpZCIsIl9xdWVyeVR5cGUiLCJfbXV0YXRpb25UeXBlIiwiX3N1YnNjcmlwdGlvblR5cGUiLCJfZGlyZWN0aXZlcyIsImFsbFJlZmVyZW5jZWRUeXBlcyIsIl9jb25maWckdHlwZXMyIiwiY29sbGVjdFJlZmVyZW5jZWRUeXBlcyIsIl90aGlzJF9kaXJlY3RpdmVzMiIsIl9kaXJlY3RpdmUkYXJnczIiLCJfdHlwZU1hcCIsIl9zdWJUeXBlTWFwIiwiX2ltcGxlbWVudGF0aW9uc01hcCIsIl9hcnJheUZyb20yIiwibmFtZWRUeXBlIiwiX2kxMCIsIl9uYW1lZFR5cGUkZ2V0SW50ZXJmYTIiLCJpZmFjZSIsImltcGxlbWVudGF0aW9ucyIsIm9iamVjdHMiLCJfaTEyIiwiX25hbWVkVHlwZSRnZXRJbnRlcmZhNCIsIl9pZmFjZSIsIl9pbXBsZW1lbnRhdGlvbnMiLCJnZXRJbXBsZW1lbnRhdGlvbnMiLCJpbnRlcmZhY2VUeXBlIiwiaXNQb3NzaWJsZVR5cGUiLCJwb3NzaWJsZVR5cGUiLCJtYXliZVN1YlR5cGUiLCJfaTE0IiwiX2Fic3RyYWN0VHlwZSRnZXRUeXBlMiIsIl9pMTYiLCJfaW1wbGVtZW50YXRpb25zJG9iamUyIiwiX2kxOCIsIl9pbXBsZW1lbnRhdGlvbnMkaW50ZTIiLCJnZXREaXJlY3RpdmUiLCJ0eXBlU2V0IiwiX2kyMCIsIl9uYW1lZFR5cGUkZ2V0VHlwZXMyIiwiX2kyMiIsIl9uYW1lZFR5cGUkZ2V0SW50ZXJmYTYiLCJfaTI0IiwiX29iamVjdFZhbHVlczIiLCJfaTI2IiwiX2ZpZWxkJGFyZ3MyIiwiX2kyOCIsIl9vYmplY3RWYWx1ZXM0IiwiU2NoZW1hVmFsaWRhdGlvbkNvbnRleHQiLCJfZ2V0T3BlcmF0aW9uVHlwZU5vZGUiLCJyZXBvcnRFcnJvciIsImdldE9wZXJhdGlvblR5cGVOb2RlIiwiX2dldE9wZXJhdGlvblR5cGVOb2RlMiIsIl9nZXRPcGVyYXRpb25UeXBlTm9kZTMiLCJ2YWxpZGF0ZVJvb3RUeXBlcyIsIl9jb250ZXh0JHNjaGVtYSRnZXREaTIiLCJ2YWxpZGF0ZU5hbWUiLCJfYXJnJGFzdE5vZGUiLCJnZXREZXByZWNhdGVkRGlyZWN0aXZlTm9kZSIsInZhbGlkYXRlRGlyZWN0aXZlcyIsInZhbGlkYXRlSW5wdXRPYmplY3RDaXJjdWxhclJlZnMiLCJ2aXNpdGVkVHlwZXMiLCJmaWVsZFBhdGhJbmRleEJ5VHlwZU5hbWUiLCJkZXRlY3RDeWNsZVJlY3Vyc2l2ZSIsImlucHV0T2JqIiwiX2kzMCIsImZpZWxkVHlwZSIsImN5Y2xlSW5kZXgiLCJjeWNsZVBhdGgiLCJwYXRoU3RyIiwiZmllbGRPYmoiLCJjcmVhdGVJbnB1dE9iamVjdENpcmN1bGFyUmVmc1ZhbGlkYXRvciIsInR5cGVNYXAiLCJ2YWxpZGF0ZUZpZWxkcyIsInZhbGlkYXRlSW50ZXJmYWNlcyIsInZhbGlkYXRlVW5pb25NZW1iZXJzIiwidmFsaWRhdGVFbnVtVmFsdWVzIiwidmFsaWRhdGVJbnB1dEZpZWxkcyIsInZhbGlkYXRlVHlwZXMiLCJnZXRFcnJvcnMiLCJfZXJyb3JzIiwiYWRkRXJyb3IiLCJvcGVyYXRpb25Ob2RlcyIsImdldEFsbFN1Yk5vZGVzIiwiaXNWYWxpZE5hbWVFcnJvciIsImdldEFsbE5vZGVzIiwiX2ZpZWxkJGFzdE5vZGUiLCJfYXJnJGFzdE5vZGUyIiwiX2FyZyRhc3ROb2RlMyIsImlmYWNlVHlwZU5hbWVzIiwiX3R5cGUkZ2V0SW50ZXJmYWNlczIiLCJnZXRBbGxJbXBsZW1lbnRzSW50ZXJmYWNlTm9kZXMiLCJ2YWxpZGF0ZVR5cGVJbXBsZW1lbnRzQW5jZXN0b3JzIiwidmFsaWRhdGVUeXBlSW1wbGVtZW50c0ludGVyZmFjZSIsInR5cGVGaWVsZE1hcCIsImlmYWNlRmllbGQiLCJ0eXBlRmllbGQiLCJfaWZhY2VGaWVsZCRhc3ROb2RlIiwiX3R5cGVGaWVsZCRhc3ROb2RlIiwiaXNUeXBlU3ViVHlwZU9mIiwiX2lmYWNlRmllbGQkYXJnczIiLCJfaWZhY2VBcmckYXN0Tm9kZSIsIl90eXBlQXJnJGFzdE5vZGUiLCJpZmFjZUFyZyIsInR5cGVBcmciLCJpc0VxdWFsVHlwZSIsIl9sb29wMiIsIl90eXBlRmllbGQkYXJnczIiLCJpZmFjZUludGVyZmFjZXMiLCJfaWZhY2UkZ2V0SW50ZXJmYWNlczIiLCJ0cmFuc2l0aXZlIiwidW5pb24iLCJtZW1iZXJUeXBlcyIsImluY2x1ZGVkVHlwZU5hbWVzIiwibWVtYmVyVHlwZSIsImdldFVuaW9uTWVtYmVyVHlwZU5vZGVzIiwiX2ZpZWxkJGFzdE5vZGUyIiwiX2ZpZWxkJGFzdE5vZGUzIiwiZ2V0dGVyIiwic3ViTm9kZXMiLCJfaTMyIiwiX2dldEFsbE5vZGVzMiIsIl9nZXR0ZXIiLCJ0eXBlTm9kZSIsImlmYWNlTm9kZSIsInVuaW9uTm9kZSIsImRlZmluaXRpb25Ob2RlIiwiX2RlZmluaXRpb25Ob2RlJGRpcmVjIiwiVHlwZUluZm8iLCJnZXRGaWVsZERlZkZuIiwiaW5pdGlhbFR5cGUiLCJfc2NoZW1hIiwiX3R5cGVTdGFjayIsIl9wYXJlbnRUeXBlU3RhY2siLCJfaW5wdXRUeXBlU3RhY2siLCJfZmllbGREZWZTdGFjayIsIl9kZWZhdWx0VmFsdWVTdGFjayIsIl9kaXJlY3RpdmUiLCJfYXJndW1lbnQiLCJfZW51bVZhbHVlIiwiX2dldEZpZWxkRGVmIiwiZ2V0UGFyZW50VHlwZSIsImdldElucHV0VHlwZSIsImdldFBhcmVudElucHV0VHlwZSIsImdldERlZmF1bHRWYWx1ZSIsImdldEFyZ3VtZW50IiwiZ2V0RW51bVZhbHVlIiwidHlwZUNvbmRpdGlvbkFTVCIsIm91dHB1dFR5cGUiLCJpbnB1dFR5cGUiLCJfdGhpcyRnZXREaXJlY3RpdmUiLCJmaWVsZE9yRGlyZWN0aXZlIiwibGlzdFR5cGUiLCJpbnB1dEZpZWxkVHlwZSIsImlucHV0RmllbGQiLCJvYmplY3RUeXBlIiwiZmllbGROb2RlIiwidmlzaXRXaXRoVHlwZUluZm8iLCJ0eXBlSW5mbyIsIk5BTUVfUlgiLCJhc3NlcnRWYWxpZE5hbWUiLCJhc3RWYWx1ZSIsInZhbHVlc05vZGVzIiwiaXRlbU5vZGUiLCJmaWVsZFZhbHVlIiwic2VyaWFsaXplZCIsInN0cmluZ051bSIsImludGVnZXJTdHJpbmdSZWdFeHAiLCJidWlsZEFTVFNjaGVtYSIsImRvY3VtZW50QVNUIiwiYXNzdW1lVmFsaWRTREwiLCJhc3NlcnRWYWxpZFNETCIsImV4dGVuZFNjaGVtYUltcGwiLCJzdGREaXJlY3RpdmUiLCJldmVyeSIsImJ1aWxkU2NoZW1hIiwiY29tbWVudERlc2NyaXB0aW9ucyIsImJ1aWxkQ2xpZW50U2NoZW1hIiwiaW50cm9zcGVjdGlvbiIsIl9fc2NoZW1hIiwic2NoZW1hSW50cm9zcGVjdGlvbiIsInR5cGVJbnRyb3NwZWN0aW9uIiwic2NhbGFySW50cm9zcGVjdGlvbiIsIm9iamVjdEludHJvc3BlY3Rpb24iLCJidWlsZEltcGxlbWVudGF0aW9uc0xpc3QiLCJidWlsZEZpZWxkRGVmTWFwIiwiaW50ZXJmYWNlSW50cm9zcGVjdGlvbiIsInVuaW9uSW50cm9zcGVjdGlvbiIsInVuaW9uSW50cm9zcGVjdGlvblN0ciIsImdldE9iamVjdFR5cGUiLCJidWlsZFVuaW9uRGVmIiwiZW51bUludHJvc3BlY3Rpb24iLCJlbnVtSW50cm9zcGVjdGlvblN0ciIsInZhbHVlSW50cm9zcGVjdGlvbiIsImJ1aWxkRW51bURlZiIsImlucHV0T2JqZWN0SW50cm9zcGVjdGlvbiIsImlucHV0T2JqZWN0SW50cm9zcGVjdGlvblN0ciIsImJ1aWxkSW5wdXRWYWx1ZURlZk1hcCIsImJ1aWxkSW5wdXRPYmplY3REZWYiLCJ0eXBlU3RyIiwiYnVpbGRUeXBlIiwic3RkVHlwZSIsImRpcmVjdGl2ZUludHJvc3BlY3Rpb24iLCJkaXJlY3RpdmVJbnRyb3NwZWN0aW9uU3RyIiwiX2RpcmVjdGl2ZUludHJvc3BlY3Rpb25TdHIiLCJ0eXBlUmVmIiwiaXRlbVJlZiIsIm51bGxhYmxlUmVmIiwibnVsbGFibGVUeXBlIiwiZ2V0SW50ZXJmYWNlVHlwZSIsImltcGxlbWVudGluZ0ludHJvc3BlY3Rpb24iLCJpbXBsZW1lbnRpbmdJbnRyb3NwZWN0aW9uU3RyIiwiZmllbGRJbnRyb3NwZWN0aW9uIiwiYnVpbGRGaWVsZCIsImZpZWxkSW50cm9zcGVjdGlvblN0ciIsImlucHV0VmFsdWVJbnRyb3NwZWN0aW9ucyIsImJ1aWxkSW5wdXRWYWx1ZSIsImlucHV0VmFsdWVJbnRyb3NwZWN0aW9uIiwiZGVmYXVsdE9uRXJyb3IiLCJjb2VyY2VJbnB1dFZhbHVlSW1wbCIsImVycm9yUHJlZml4IiwiY29lcmNlZExpc3QiLCJpdGVtVmFsdWUiLCJmaWVsZERlZnMiLCJwYXJzZVJlc3VsdCIsImNvbmNhdEFTVCIsImRvY3VtZW50cyIsImRvYyIsIm93bktleXMiLCJlbnVtZXJhYmxlT25seSIsImdldE93blByb3BlcnR5U3ltYm9scyIsInN5bWJvbHMiLCJzeW0iLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJfb2JqZWN0U3ByZWFkIiwiX2RlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImV4dGVuZFNjaGVtYSIsImFzc2VydFZhbGlkU0RMRXh0ZW5zaW9uIiwic2NoZW1hQ29uZmlnIiwiZXh0ZW5kZWRDb25maWciLCJfc2NoZW1hRGVmIiwiX3NjaGVtYURlZiRkZXNjcmlwdGlvIiwiX3NjaGVtYURlZjIiLCJfb3B0aW9ucyRhc3N1bWVWYWxpZCIsInNjaGVtYURlZiIsInR5cGVEZWZzIiwidHlwZUV4dGVuc2lvbnNNYXAiLCJkaXJlY3RpdmVEZWZzIiwic2NoZW1hRXh0ZW5zaW9ucyIsIl9kb2N1bWVudEFTVCRkZWZpbml0aTIiLCJleHRlbmRlZFR5cGVOYW1lIiwiZXhpc3RpbmdUeXBlRXh0ZW5zaW9ucyIsIl9zY2hlbWFDb25maWckdHlwZXMyIiwiZXhpc3RpbmdUeXBlIiwiX3R5cGVFeHRlbnNpb25zTWFwJGNvMiIsIl9nZXRTcGVjaWZpZWRCeVVybCIsImdldFNwZWNpZmllZEJ5VXJsIiwiZXh0ZW5kU2NhbGFyVHlwZSIsIl90eXBlRXh0ZW5zaW9uc01hcCRjbzMiLCJyZXBsYWNlTmFtZWRUeXBlIiwiYnVpbGRJbnRlcmZhY2VzIiwiZXh0ZW5kRmllbGQiLCJidWlsZEZpZWxkTWFwIiwiZXh0ZW5kT2JqZWN0VHlwZSIsIl90eXBlRXh0ZW5zaW9uc01hcCRjbzQiLCJleHRlbmRJbnRlcmZhY2VUeXBlIiwiX3R5cGVFeHRlbnNpb25zTWFwJGNvNSIsImJ1aWxkVW5pb25UeXBlcyIsImV4dGVuZFVuaW9uVHlwZSIsIl90eXBlRXh0ZW5zaW9uc01hcCR0eSIsImJ1aWxkRW51bVZhbHVlTWFwIiwiZXh0ZW5kRW51bVR5cGUiLCJfdHlwZUV4dGVuc2lvbnNNYXAkY28iLCJyZXBsYWNlVHlwZSIsImJ1aWxkSW5wdXRGaWVsZE1hcCIsImV4dGVuZElucHV0T2JqZWN0VHlwZSIsIl9zdGRUeXBlTWFwJG5hbWUiLCJzdGRUeXBlTWFwIiwiZ2V0T3BlcmF0aW9uVHlwZXMiLCJleHRlbmRBcmciLCJnZXREZXNjcmlwdGlvbiIsImJ1aWxkQXJndW1lbnRNYXAiLCJvcFR5cGVzIiwiX25vZGUkb3BlcmF0aW9uVHlwZXMiLCJvcGVyYXRpb25UeXBlc05vZGVzIiwib3BlcmF0aW9uVHlwZSIsIl9zdGRUeXBlTWFwJG5hbWUyIiwiZ2V0V3JhcHBlZFR5cGUiLCJmaWVsZENvbmZpZ01hcCIsIl9ub2RlJGZpZWxkcyIsIm5vZGVGaWVsZHMiLCJnZXREZXByZWNhdGlvblJlYXNvbiIsImFyZ3NOb2RlcyIsImFyZ0NvbmZpZ01hcCIsImlucHV0RmllbGRNYXAiLCJfbm9kZSRmaWVsZHMyIiwiZmllbGRzTm9kZXMiLCJlbnVtVmFsdWVNYXAiLCJfbm9kZSR2YWx1ZXMiLCJfbm9kZSRpbnRlcmZhY2VzIiwiaW50ZXJmYWNlc05vZGVzIiwiX25vZGUkdHlwZXMiLCJ0eXBlTm9kZXMiLCJfaTM0IiwiX3R5cGVFeHRlbnNpb25zTWFwJG5hIiwiZXh0ZW5zaW9uTm9kZXMiLCJhbGxOb2RlcyIsIl9leHRlbnNpb25BU1ROb2RlcyIsIl9hbGxOb2RlcyIsIl9leHRlbnNpb25BU1ROb2RlczIiLCJfYWxsTm9kZXMyIiwiX2V4dGVuc2lvbkFTVE5vZGVzMyIsIl9hbGxOb2RlczMiLCJfZXh0ZW5zaW9uQVNUTm9kZXM0IiwiX2V4dGVuc2lvbkFTVE5vZGVzNSIsIl9hbGxOb2RlczQiLCJkZXByZWNhdGVkIiwic3BlY2lmaWVkQnkiLCJjb21tZW50cyIsImdldExlYWRpbmdDb21tZW50QmxvY2siLCJCcmVha2luZ0NoYW5nZVR5cGUiLCJUWVBFX1JFTU9WRUQiLCJUWVBFX0NIQU5HRURfS0lORCIsIlRZUEVfUkVNT1ZFRF9GUk9NX1VOSU9OIiwiVkFMVUVfUkVNT1ZFRF9GUk9NX0VOVU0iLCJSRVFVSVJFRF9JTlBVVF9GSUVMRF9BRERFRCIsIklNUExFTUVOVEVEX0lOVEVSRkFDRV9SRU1PVkVEIiwiRklFTERfUkVNT1ZFRCIsIkZJRUxEX0NIQU5HRURfS0lORCIsIlJFUVVJUkVEX0FSR19BRERFRCIsIkFSR19SRU1PVkVEIiwiQVJHX0NIQU5HRURfS0lORCIsIkRJUkVDVElWRV9SRU1PVkVEIiwiRElSRUNUSVZFX0FSR19SRU1PVkVEIiwiUkVRVUlSRURfRElSRUNUSVZFX0FSR19BRERFRCIsIkRJUkVDVElWRV9SRVBFQVRBQkxFX1JFTU9WRUQiLCJESVJFQ1RJVkVfTE9DQVRJT05fUkVNT1ZFRCIsIkRhbmdlcm91c0NoYW5nZVR5cGUiLCJWQUxVRV9BRERFRF9UT19FTlVNIiwiVFlQRV9BRERFRF9UT19VTklPTiIsIk9QVElPTkFMX0lOUFVUX0ZJRUxEX0FEREVEIiwiT1BUSU9OQUxfQVJHX0FEREVEIiwiSU1QTEVNRU5URURfSU5URVJGQUNFX0FEREVEIiwiQVJHX0RFRkFVTFRfVkFMVUVfQ0hBTkdFIiwiZmluZEJyZWFraW5nQ2hhbmdlcyIsIm9sZFNjaGVtYSIsIm5ld1NjaGVtYSIsImZpbmRTY2hlbWFDaGFuZ2VzIiwiY2hhbmdlIiwiZmluZERhbmdlcm91c0NoYW5nZXMiLCJzY2hlbWFDaGFuZ2VzIiwidHlwZXNEaWZmIiwiZGlmZiIsIl90eXBlc0RpZmYkcmVtb3ZlZDIiLCJyZW1vdmVkIiwib2xkVHlwZSIsIl90eXBlc0RpZmYkcGVyc2lzdGVkMiIsInBlcnNpc3RlZCIsIl9vbGRUeXBlIiwibmV3VHlwZSIsImZpbmRFbnVtVHlwZUNoYW5nZXMiLCJmaW5kVW5pb25UeXBlQ2hhbmdlcyIsImZpbmRJbnB1dE9iamVjdFR5cGVDaGFuZ2VzIiwiZmluZEZpZWxkQ2hhbmdlcyIsImZpbmRJbXBsZW1lbnRlZEludGVyZmFjZXNDaGFuZ2VzIiwidHlwZUtpbmROYW1lIiwiZmluZFR5cGVDaGFuZ2VzIiwiZGlyZWN0aXZlc0RpZmYiLCJfZGlyZWN0aXZlc0RpZmYkcmVtb3YyIiwib2xkRGlyZWN0aXZlIiwiX2RpcmVjdGl2ZXNEaWZmJHBlcnNpMiIsIl9vbGREaXJlY3RpdmUiLCJuZXdEaXJlY3RpdmUiLCJhcmdzRGlmZiIsIl9hcmdzRGlmZiRhZGRlZDIiLCJhZGRlZCIsIm5ld0FyZyIsIl9hcmdzRGlmZiRyZW1vdmVkMiIsIm9sZEFyZyIsIl9vbGREaXJlY3RpdmUkbG9jYXRpbzIiLCJmaW5kRGlyZWN0aXZlQ2hhbmdlcyIsImZpZWxkc0RpZmYiLCJfZmllbGRzRGlmZiRhZGRlZDIiLCJuZXdGaWVsZCIsIl9maWVsZHNEaWZmJHJlbW92ZWQyIiwib2xkRmllbGQiLCJfZmllbGRzRGlmZiRwZXJzaXN0ZWQyIiwiX29sZEZpZWxkIiwiX25ld0ZpZWxkIiwiaXNDaGFuZ2VTYWZlRm9ySW5wdXRPYmplY3RGaWVsZE9yRmllbGRBcmciLCJwb3NzaWJsZVR5cGVzRGlmZiIsIl9wb3NzaWJsZVR5cGVzRGlmZiRhZDIiLCJuZXdQb3NzaWJsZVR5cGUiLCJfcG9zc2libGVUeXBlc0RpZmYkcmUyIiwib2xkUG9zc2libGVUeXBlIiwidmFsdWVzRGlmZiIsIl92YWx1ZXNEaWZmJGFkZGVkMiIsIl92YWx1ZXNEaWZmJHJlbW92ZWQyIiwiaW50ZXJmYWNlc0RpZmYiLCJfaW50ZXJmYWNlc0RpZmYkYWRkZWQyIiwibmV3SW50ZXJmYWNlIiwiX2ludGVyZmFjZXNEaWZmJHJlbW92MiIsIm9sZEludGVyZmFjZSIsIl9maWVsZHNEaWZmJHJlbW92ZWQ0IiwiX2kzNiIsIl9maWVsZHNEaWZmJHBlcnNpc3RlZDQiLCJfb2xkRmllbGQyIiwiZmluZEFyZ0NoYW5nZXMiLCJpc0NoYW5nZVNhZmVGb3JPYmplY3RPckludGVyZmFjZUZpZWxkIiwiX2kzOCIsIl9hcmdzRGlmZiRyZW1vdmVkNCIsIl9pNDAiLCJfYXJnc0RpZmYkcGVyc2lzdGVkMiIsIl9vbGRBcmciLCJvbGRWYWx1ZVN0ciIsInN0cmluZ2lmeVZhbHVlIiwibmV3VmFsdWVTdHIiLCJfaTQyIiwiX2FyZ3NEaWZmJGFkZGVkNCIsIl9uZXdBcmciLCJzb3J0ZWRBU1QiLCJvYmplY3ROb2RlIiwiZmllbGRBIiwiZmllbGRCIiwib2xkQXJyYXkiLCJuZXdBcnJheSIsIm9sZE1hcCIsIm5ld01hcCIsIl9pNDQiLCJvbGRJdGVtIiwibmV3SXRlbSIsIl9pNDYiLCJfbmV3SXRlbSIsImZpbmREZXByZWNhdGVkVXNhZ2VzIiwiTm9EZXByZWNhdGVkQ3VzdG9tUnVsZSIsImdldEludHJvc3BlY3Rpb25RdWVyeSIsIm9wdGlvbnNXaXRoRGVmYXVsdCIsImRlc2NyaXB0aW9ucyIsImRpcmVjdGl2ZUlzUmVwZWF0YWJsZSIsInNjaGVtYURlc2NyaXB0aW9uIiwiaW5wdXRWYWx1ZURlcHJlY2F0aW9uIiwiaW5wdXREZXByZWNhdGlvbiIsImdldE9wZXJhdGlvbkFTVCIsImludHJvc3BlY3Rpb25Gcm9tU2NoZW1hIiwib3B0aW9uc1dpdGhEZWZhdWx0cyIsImxleGljb2dyYXBoaWNTb3J0U2NoZW1hIiwic29ydEJ5TmFtZSIsInNvcnRUeXBlcyIsInNvcnRGaWVsZHMiLCJfY29uZmlnIiwiX2NvbmZpZzIiLCJfY29uZmlnMyIsInNvcnRPYmpNYXAiLCJfY29uZmlnNCIsInNvcnRCeSIsInNvcnRBcmdzIiwicmVwbGFjZU1heWJlVHlwZSIsIm1heWJlVHlwZSIsImZpZWxkc01hcCIsInNvcnRWYWx1ZUZuIiwic29ydGVkTWFwIiwic29ydGVkS2V5cyIsIm1hcFRvS2V5Iiwib2JqMSIsIm9iajIiLCJrZXkxIiwia2V5MiIsInByaW50U2NoZW1hIiwicHJpbnRGaWx0ZXJlZFNjaGVtYSIsImlzRGVmaW5lZFR5cGUiLCJwcmludEludHJvc3BlY3Rpb25TY2hlbWEiLCJkaXJlY3RpdmVGaWx0ZXIiLCJ0eXBlRmlsdGVyIiwicHJpbnRTY2hlbWFEZWZpbml0aW9uIiwicHJpbnREZXNjcmlwdGlvbiIsInByaW50QXJncyIsInByaW50RGlyZWN0aXZlIiwicHJpbnRUeXBlIiwiaXNTY2hlbWFPZkNvbW1vbk5hbWVzIiwic2NhbGFyIiwidXJsQVNUIiwicHJpbnRTcGVjaWZpZWRCeVVybCIsInByaW50U2NhbGFyIiwicHJpbnRJbXBsZW1lbnRlZEludGVyZmFjZXMiLCJwcmludEZpZWxkcyIsInByaW50T2JqZWN0IiwicHJpbnRJbnRlcmZhY2UiLCJwcmludFVuaW9uIiwicHJpbnREZXByZWNhdGVkIiwicHJpbnRCbG9jayIsInByaW50RW51bSIsInByaW50SW5wdXRWYWx1ZSIsInByaW50SW5wdXRPYmplY3QiLCJkZWZhdWx0QVNUIiwiYXJnRGVjbCIsInJlYXNvbkFTVCIsImZpcnN0SW5CbG9jayIsInByaW50RGVzY3JpcHRpb25XaXRoQ29tbWVudHMiLCJibG9ja1N0cmluZyIsInNlcGFyYXRlT3BlcmF0aW9ucyIsIm9wZXJhdGlvbnMiLCJkZXBHcmFwaCIsImNvbGxlY3REZXBlbmRlbmNpZXMiLCJzZXBhcmF0ZWREb2N1bWVudEFTVHMiLCJkZXBlbmRlbmNpZXMiLCJfY29sbGVjdERlcGVuZGVuY2llczIiLCJmcmFnbWVudE5hbWUiLCJjb2xsZWN0VHJhbnNpdGl2ZURlcGVuZGVuY2llcyIsImNvbGxlY3RlZCIsImZyb21OYW1lIiwiaW1tZWRpYXRlRGVwcyIsInN0cmlwSWdub3JlZENoYXJhY3RlcnMiLCJzdHJpcHBlZEJvZHkiLCJ3YXNMYXN0QWRkZWRUb2tlbk5vblB1bmN0dWF0b3IiLCJjdXJyZW50VG9rZW4iLCJ0b2tlbktpbmQiLCJpc05vblB1bmN0dWF0b3IiLCJ0b2tlbkJvZHkiLCJkZWRlbnRCbG9ja1N0cmluZyIsImJsb2NrU3RyIiwicmF3U3RyIiwibGFzdENoYXIiLCJ0eXBlQSIsInR5cGVCIiwic3VwZXJUeXBlIiwiZG9UeXBlc092ZXJsYXAiLCJpbm5lclR5cGUiLCJ2YXJpYWJsZVZhbHVlIiwiX3ZhbHVlTm9kZSR2YWx1ZXMyIiwiaXNNaXNzaW5nVmFyaWFibGUiLCJjb2VyY2VkT2JqIiwiX2Vycm9yIiwiX2luaGVyaXRzTG9vc2UiLCJBU1RWYWxpZGF0aW9uQ29udGV4dCIsIl9hc3QiLCJfZnJhZ21lbnRzIiwiX2ZyYWdtZW50U3ByZWFkcyIsIl9yZWN1cnNpdmVseVJlZmVyZW5jZWRGcmFnbWVudHMiLCJfb25FcnJvciIsImdldERvY3VtZW50IiwiZ2V0RnJhZ21lbnQiLCJmcmFncyIsInN0YXRlbWVudCIsImdldEZyYWdtZW50U3ByZWFkcyIsInNwcmVhZHMiLCJzZXRzVG9WaXNpdCIsIl9zZXQkc2VsZWN0aW9uczIiLCJnZXRSZWN1cnNpdmVseVJlZmVyZW5jZWRGcmFnbWVudHMiLCJjb2xsZWN0ZWROYW1lcyIsIm5vZGVzVG9WaXNpdCIsIl90aGlzJGdldEZyYWdtZW50U3ByZTIiLCJTRExWYWxpZGF0aW9uQ29udGV4dCIsIl9BU1RWYWxpZGF0aW9uQ29udGV4dCIsImdldFNjaGVtYSIsIlZhbGlkYXRpb25Db250ZXh0IiwiX0FTVFZhbGlkYXRpb25Db250ZXh0MiIsIl90eXBlSW5mbyIsIl92YXJpYWJsZVVzYWdlcyIsIl9yZWN1cnNpdmVWYXJpYWJsZVVzYWdlcyIsImdldFZhcmlhYmxlVXNhZ2VzIiwidXNhZ2VzIiwibmV3VXNhZ2VzIiwiZ2V0UmVjdXJzaXZlVmFyaWFibGVVc2FnZXMiLCJfdGhpcyRnZXRSZWN1cnNpdmVseVIyIiwiZnJhZyIsIkV4ZWN1dGFibGVEZWZpbml0aW9uc1J1bGUiLCJfbm9kZSRkZWZpbml0aW9uczIiLCJkZWZOYW1lIiwiRmllbGRzT25Db3JyZWN0VHlwZVJ1bGUiLCJzdWdnZXN0aW9uIiwic3VnZ2VzdGVkVHlwZXMiLCJ1c2FnZUNvdW50IiwiX3NjaGVtYSRnZXRQb3NzaWJsZVR5MiIsIl9wb3NzaWJsZVR5cGUkZ2V0SW50ZTIiLCJfdXNhZ2VDb3VudCRwb3NzaWJsZUkiLCJwb3NzaWJsZUludGVyZmFjZSIsInVzYWdlQ291bnREaWZmIiwiZ2V0U3VnZ2VzdGVkVHlwZU5hbWVzIiwicG9zc2libGVGaWVsZE5hbWVzIiwiZ2V0U3VnZ2VzdGVkRmllbGROYW1lcyIsIkZyYWdtZW50c09uQ29tcG9zaXRlVHlwZXNSdWxlIiwiS25vd25Bcmd1bWVudE5hbWVzUnVsZSIsIktub3duQXJndW1lbnROYW1lc09uRGlyZWN0aXZlc1J1bGUiLCJhcmdOb2RlIiwia25vd25BcmdzTmFtZXMiLCJkaXJlY3RpdmVBcmdzIiwiZGVmaW5lZERpcmVjdGl2ZXMiLCJhc3REZWZpbml0aW9ucyIsIl9kZWYkYXJndW1lbnRzIiwiZGlyZWN0aXZlTmFtZSIsImtub3duQXJncyIsIl9kaXJlY3RpdmVOb2RlJGFyZ3VtZTIiLCJLbm93bkRpcmVjdGl2ZXNSdWxlIiwibG9jYXRpb25zTWFwIiwiX3BhcmVudCIsIl9wYXRoIiwiY2FuZGlkYXRlTG9jYXRpb24iLCJhcHBsaWVkVG8iLCJnZXREaXJlY3RpdmVMb2NhdGlvbkZvck9wZXJhdGlvbiIsImdldERpcmVjdGl2ZUxvY2F0aW9uRm9yQVNUUGF0aCIsIktub3duRnJhZ21lbnROYW1lc1J1bGUiLCJLbm93blR5cGVOYW1lc1J1bGUiLCJleGlzdGluZ1R5cGVzTWFwIiwiZGVmaW5lZFR5cGVzIiwiX2NvbnRleHQkZ2V0RG9jdW1lbnQkMiIsInR5cGVOYW1lcyIsIl8xIiwiXzIiLCJfYW5jZXN0b3JzJCIsImlzU0RMIiwic3RhbmRhcmRUeXBlTmFtZXMiLCJpc1N0YW5kYXJkVHlwZU5hbWUiLCJMb25lQW5vbnltb3VzT3BlcmF0aW9uUnVsZSIsIm9wZXJhdGlvbkNvdW50IiwiTG9uZVNjaGVtYURlZmluaXRpb25SdWxlIiwiX29sZFNjaGVtYSRhc3ROb2RlIiwiYWxyZWFkeURlZmluZWQiLCJzY2hlbWFEZWZpbml0aW9uc0NvdW50IiwiTm9GcmFnbWVudEN5Y2xlc1J1bGUiLCJ2aXNpdGVkRnJhZ3MiLCJzcHJlYWRQYXRoIiwic3ByZWFkUGF0aEluZGV4QnlOYW1lIiwic3ByZWFkTm9kZXMiLCJzcHJlYWROb2RlIiwic3ByZWFkTmFtZSIsInNwcmVhZEZyYWdtZW50IiwidmlhUGF0aCIsIk5vVW5kZWZpbmVkVmFyaWFibGVzUnVsZSIsInZhcmlhYmxlTmFtZURlZmluZWQiLCJOb1VudXNlZEZyYWdtZW50c1J1bGUiLCJvcGVyYXRpb25EZWZzIiwiZnJhZ21lbnREZWZzIiwiZnJhZ21lbnROYW1lVXNlZCIsIl9jb250ZXh0JGdldFJlY3Vyc2l2ZTIiLCJmcmFnbWVudERlZiIsIk5vVW51c2VkVmFyaWFibGVzUnVsZSIsInZhcmlhYmxlRGVmcyIsInZhcmlhYmxlTmFtZVVzZWQiLCJfdmFyaWFibGVEZWZzMiIsInZhcmlhYmxlRGVmIiwicmVhc29uTWVzc2FnZSIsInN1YlJlYXNvbiIsIk92ZXJsYXBwaW5nRmllbGRzQ2FuQmVNZXJnZWRSdWxlIiwiY29tcGFyZWRGcmFnbWVudFBhaXJzIiwiUGFpclNldCIsImNhY2hlZEZpZWxkc0FuZEZyYWdtZW50TmFtZXMiLCJjb25mbGljdHMiLCJfZ2V0RmllbGRzQW5kRnJhZ21lbnQiLCJnZXRGaWVsZHNBbmRGcmFnbWVudE5hbWVzIiwiZnJhZ21lbnROYW1lcyIsIl9pNSIsImNvbmZsaWN0IiwiZmluZENvbmZsaWN0IiwiY29sbGVjdENvbmZsaWN0c1dpdGhpbiIsImNvbGxlY3RDb25mbGljdHNCZXR3ZWVuRmllbGRzQW5kRnJhZ21lbnQiLCJjb2xsZWN0Q29uZmxpY3RzQmV0d2VlbkZyYWdtZW50cyIsImZpbmRDb25mbGljdHNXaXRoaW5TZWxlY3Rpb25TZXQiLCJfcmVmMiQiLCJmaWVsZHMxIiwiZmllbGRzMiIsInJlYXNvbk1zZyIsImFyZU11dHVhbGx5RXhjbHVzaXZlIiwiX2dldFJlZmVyZW5jZWRGaWVsZHNBIiwiZ2V0UmVmZXJlbmNlZEZpZWxkc0FuZEZyYWdtZW50TmFtZXMiLCJmaWVsZE1hcDIiLCJmcmFnbWVudE5hbWVzMiIsImNvbGxlY3RDb25mbGljdHNCZXR3ZWVuIiwiZnJhZ21lbnROYW1lMSIsImZyYWdtZW50TmFtZTIiLCJmcmFnbWVudDEiLCJmcmFnbWVudDIiLCJfZ2V0UmVmZXJlbmNlZEZpZWxkc0EyIiwiZmllbGRNYXAxIiwiZnJhZ21lbnROYW1lczEiLCJfZ2V0UmVmZXJlbmNlZEZpZWxkc0EzIiwicGFyZW50RmllbGRzQXJlTXV0dWFsbHlFeGNsdXNpdmUiLCJfaTciLCJmaWVsZDEiLCJmaWVsZDIiLCJhcmd1bWVudHMxIiwiYXJndW1lbnRzMiIsInBhcmVudFR5cGUxIiwibm9kZTEiLCJkZWYxIiwicGFyZW50VHlwZTIiLCJub2RlMiIsImRlZjIiLCJfbm9kZTEkYXJndW1lbnRzIiwiX25vZGUyJGFyZ3VtZW50cyIsIm5hbWUxIiwibmFtZTIiLCJhcmd1bWVudDEiLCJ2YWx1ZTEiLCJ2YWx1ZTIiLCJhcmd1bWVudDIiLCJhcmd1bWVudCIsInR5cGUxIiwidHlwZTIiLCJkb1R5cGVzQ29uZmxpY3QiLCJzZWxlY3Rpb25TZXQxIiwic2VsZWN0aW9uU2V0MiIsIl9nZXRGaWVsZHNBbmRGcmFnbWVudDIiLCJfZ2V0RmllbGRzQW5kRnJhZ21lbnQzIiwiX2kzIiwiZmluZENvbmZsaWN0c0JldHdlZW5TdWJTZWxlY3Rpb25TZXRzIiwiYWxsRmllbGRzIiwic3ViZmllbGRDb25mbGljdHMiLCJjYWNoZWQiLCJub2RlQW5kRGVmcyIsIl9jb2xsZWN0RmllbGRzQW5kRnJhZ21lbnROYW1lcyIsImZyYWdtZW50VHlwZSIsImlubGluZUZyYWdtZW50VHlwZSIsIl9kYXRhIiwiZmlyc3QiLCJfcGFpclNldEFkZCIsIlBvc3NpYmxlRnJhZ21lbnRTcHJlYWRzUnVsZSIsImZyYWdUeXBlIiwicGFyZW50VHlwZVN0ciIsImZyYWdUeXBlU3RyIiwiZ2V0RnJhZ21lbnRUeXBlIiwiX2RlZktpbmRUb0V4dEtpbmQiLCJQb3NzaWJsZVR5cGVFeHRlbnNpb25zUnVsZSIsImNoZWNrRXh0ZW5zaW9uIiwiZXhwZWN0ZWRLaW5kIiwiZGVmTm9kZSIsImRlZktpbmRUb0V4dEtpbmQiLCJraW5kU3RyIiwiZXh0ZW5zaW9uS2luZFRvVHlwZU5hbWUiLCJhbGxUeXBlTmFtZXMiLCJQcm92aWRlZFJlcXVpcmVkQXJndW1lbnRzUnVsZSIsIlByb3ZpZGVkUmVxdWlyZWRBcmd1bWVudHNPbkRpcmVjdGl2ZXNSdWxlIiwiX2ZpZWxkTm9kZSRhcmd1bWVudHMiLCJhcmdOb2RlcyIsIl9maWVsZERlZiRhcmdzMiIsImFyZ1R5cGVTdHIiLCJyZXF1aXJlZEFyZ3NNYXAiLCJpc1JlcXVpcmVkQXJndW1lbnROb2RlIiwicmVxdWlyZWRBcmdzIiwiX2RpcmVjdGl2ZU5vZGUkYXJndW1lIiwiX2FyZ05vZGVzIiwiU2NhbGFyTGVhZnNSdWxlIiwiX2ZpZWxkTmFtZSIsIl90eXBlU3RyIiwiU2luZ2xlRmllbGRTdWJzY3JpcHRpb25zUnVsZSIsIlVuaXF1ZUFyZ3VtZW50TmFtZXNSdWxlIiwia25vd25BcmdOYW1lcyIsIlVuaXF1ZURpcmVjdGl2ZU5hbWVzUnVsZSIsImtub3duRGlyZWN0aXZlTmFtZXMiLCJVbmlxdWVEaXJlY3RpdmVzUGVyTG9jYXRpb25SdWxlIiwidW5pcXVlRGlyZWN0aXZlTWFwIiwic2NoZW1hRGlyZWN0aXZlcyIsInR5cGVEaXJlY3RpdmVzTWFwIiwic2VlbkRpcmVjdGl2ZXMiLCJfbm9kZSRkaXJlY3RpdmVzMiIsIlVuaXF1ZUVudW1WYWx1ZU5hbWVzUnVsZSIsImV4aXN0aW5nVHlwZU1hcCIsImtub3duVmFsdWVOYW1lcyIsImNoZWNrVmFsdWVVbmlxdWVuZXNzIiwidmFsdWVOb2RlcyIsInZhbHVlTmFtZXMiLCJ2YWx1ZURlZiIsIlVuaXF1ZUZpZWxkRGVmaW5pdGlvbk5hbWVzUnVsZSIsImtub3duRmllbGROYW1lcyIsImNoZWNrRmllbGRVbmlxdWVuZXNzIiwiZmllbGROYW1lcyIsImhhc0ZpZWxkIiwiVW5pcXVlRnJhZ21lbnROYW1lc1J1bGUiLCJrbm93bkZyYWdtZW50TmFtZXMiLCJVbmlxdWVJbnB1dEZpZWxkTmFtZXNSdWxlIiwia25vd25OYW1lU3RhY2siLCJrbm93bk5hbWVzIiwiVW5pcXVlT3BlcmF0aW9uTmFtZXNSdWxlIiwia25vd25PcGVyYXRpb25OYW1lcyIsIlVuaXF1ZU9wZXJhdGlvblR5cGVzUnVsZSIsImRlZmluZWRPcGVyYXRpb25UeXBlcyIsImV4aXN0aW5nT3BlcmF0aW9uVHlwZXMiLCJjaGVja09wZXJhdGlvblR5cGVzIiwiYWxyZWFkeURlZmluZWRPcGVyYXRpb25UeXBlIiwiVW5pcXVlVHlwZU5hbWVzUnVsZSIsImtub3duVHlwZU5hbWVzIiwiY2hlY2tUeXBlTmFtZSIsIlVuaXF1ZVZhcmlhYmxlTmFtZXNSdWxlIiwia25vd25WYXJpYWJsZU5hbWVzIiwiVmFsdWVzT2ZDb3JyZWN0VHlwZVJ1bGUiLCJpc1ZhbGlkVmFsdWVOb2RlIiwiZmllbGROb2RlTWFwIiwibG9jYXRpb25UeXBlIiwiX3R5cGVTdHIyIiwiVmFyaWFibGVzQXJlSW5wdXRUeXBlc1J1bGUiLCJWYXJpYWJsZXNJbkFsbG93ZWRQb3NpdGlvblJ1bGUiLCJ2YXJEZWZNYXAiLCJ2YXJEZWYiLCJhbGxvd2VkVmFyaWFibGVVc2FnZSIsInZhckRlZmF1bHRWYWx1ZSIsImxvY2F0aW9uRGVmYXVsdFZhbHVlIiwibnVsbGFibGVMb2NhdGlvblR5cGUiLCJpbnB1dE9iamVjdERlZiIsImlucHV0RmllbGREZWYiLCJlbnVtVmFsdWVEZWYiLCJlbnVtVHlwZURlZiIsIk5vU2NoZW1hSW50cm9zcGVjdGlvbkN1c3RvbVJ1bGUiLCJzcGVjaWZpZWRSdWxlcyIsInNwZWNpZmllZFNETFJ1bGVzIiwicnVsZXMiLCJhYm9ydE9iaiIsInJ1bGUiLCJ2YWxpZGF0ZVNETCIsInNjaGVtYVRvRXh0ZW5kIiwidmVyc2lvbkluZm8iLCJtYWpvciIsIm1pbm9yIiwicGF0Y2giLCJwcmVSZWxlYXNlVGFnIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwibW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyJdLCJzb3VyY2VSb290IjoiIn0=