/*! For license information please see content_script.js.LICENSE.txt */
(()=>{var e={"./node_modules/@popperjs/core/lib/createPopper.js":(e,t,o)=>{"use strict";o.r(t),o.d(t,{popperGenerator:()=>y,createPopper:()=>_,detectOverflow:()=>m.default});var n=o("./node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js"),r=o("./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js"),i=o("./node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js"),s=o("./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js"),l=o("./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js"),a=o("./node_modules/@popperjs/core/lib/utils/orderModifiers.js"),d=o("./node_modules/@popperjs/core/lib/utils/debounce.js"),u=o("./node_modules/@popperjs/core/lib/utils/validateModifiers.js"),c=o("./node_modules/@popperjs/core/lib/utils/uniqueBy.js"),p=o("./node_modules/@popperjs/core/lib/utils/getBasePlacement.js"),f=o("./node_modules/@popperjs/core/lib/utils/mergeByName.js"),m=o("./node_modules/@popperjs/core/lib/utils/detectOverflow.js"),h=o("./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js"),g=o("./node_modules/@popperjs/core/lib/enums.js"),b="Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.",v={placement:"bottom",modifiers:[],strategy:"absolute"};function j(){for(var e=arguments.length,t=new Array(e),o=0;o<e;o++)t[o]=arguments[o];return!t.some((function(e){return!(e&&"function"==typeof e.getBoundingClientRect)}))}function y(e){void 0===e&&(e={});var t=e,o=t.defaultModifiers,m=void 0===o?[]:o,y=t.defaultOptions,_=void 0===y?v:y;return function(e,t,o){void 0===o&&(o=_);var y={placement:"bottom",orderedModifiers:[],options:Object.assign({},v,_),modifiersData:{},elements:{reference:e,popper:t},attributes:{},styles:{}},w=[],E=!1,O={state:y,setOptions:function(o){var n="function"==typeof o?o(y.options):o;C(),y.options=Object.assign({},_,y.options,n),y.scrollParents={reference:(0,h.isElement)(e)?(0,i.default)(e):e.contextElement?(0,i.default)(e.contextElement):[],popper:(0,i.default)(t)};var r=(0,a.default)((0,f.default)([].concat(m,y.options.modifiers)));y.orderedModifiers=r.filter((function(e){return e.enabled}));var s=(0,c.default)([].concat(r,y.options.modifiers),(function(e){return e.name}));(0,u.default)(s),(0,p.default)(y.options.placement)===g.auto&&(y.orderedModifiers.find((function(e){return"flip"===e.name}))||console.error(['Popper: "auto" placements require the "flip" modifier be',"present and enabled to work."].join(" ")));var d=(0,l.default)(t);return[d.marginTop,d.marginRight,d.marginBottom,d.marginLeft].some((function(e){return parseFloat(e)}))&&console.warn(['Popper: CSS "margin" styles cannot be used to apply padding',"between the popper and its reference element or boundary.","To replicate margin, use the `offset` modifier, as well as","the `padding` option in the `preventOverflow` and `flip`","modifiers."].join(" ")),y.orderedModifiers.forEach((function(e){var t=e.name,o=e.options,n=void 0===o?{}:o,r=e.effect;if("function"==typeof r){var i=r({state:y,name:t,instance:O,options:n});w.push(i||function(){})}})),O.update()},forceUpdate:function(){if(!E){var e=y.elements,t=e.reference,o=e.popper;if(j(t,o)){y.rects={reference:(0,n.default)(t,(0,s.default)(o),"fixed"===y.options.strategy),popper:(0,r.default)(o)},y.reset=!1,y.placement=y.options.placement,y.orderedModifiers.forEach((function(e){return y.modifiersData[e.name]=Object.assign({},e.data)}));for(var i=0,l=0;l<y.orderedModifiers.length;l++){if((i+=1)>100){console.error("Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.");break}if(!0!==y.reset){var a=y.orderedModifiers[l],d=a.fn,u=a.options,c=void 0===u?{}:u,p=a.name;"function"==typeof d&&(y=d({state:y,options:c,name:p,instance:O})||y)}else y.reset=!1,l=-1}}else console.error(b)}},update:(0,d.default)((function(){return new Promise((function(e){O.forceUpdate(),e(y)}))})),destroy:function(){C(),E=!0}};if(!j(e,t))return console.error(b),O;function C(){w.forEach((function(e){return e()})),w=[]}return O.setOptions(o).then((function(e){!E&&o.onFirstUpdate&&o.onFirstUpdate(e)})),O}}var _=y()},"./node_modules/@popperjs/core/lib/dom-utils/contains.js":(e,t,o)=>{"use strict";o.r(t),o.d(t,{default:()=>r});var n=o("./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");function r(e,t){var o=t.getRootNode&&t.getRootNode();if(e.contains(t))return!0;if(o&&(0,n.isShadowRoot)(o)){var r=t;do{if(r&&e.isSameNode(r))return!0;r=r.parentNode||r.host}while(r)}return!1}},"./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js":(e,t,o)=>{"use strict";function n(e,t){void 0===t&&(t=!1);var o=e.getBoundingClientRect();return{width:o.width/1,height:o.height/1,top:o.top/1,right:o.right/1,bottom:o.bottom/1,left:o.left/1,x:o.left/1,y:o.top/1}}o.r(t),o.d(t,{default:()=>n})},"./node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js":(e,t,o)=>{"use strict";o.r(t),o.d(t,{default:()=>v});var n=o("./node_modules/@popperjs/core/lib/enums.js"),r=o("./node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js"),i=o("./node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js"),s=o("./node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js"),l=o("./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js"),a=o("./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js"),d=o("./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js"),u=o("./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js"),c=o("./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js"),p=o("./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js"),f=o("./node_modules/@popperjs/core/lib/dom-utils/contains.js"),m=o("./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js"),h=o("./node_modules/@popperjs/core/lib/utils/rectToClientRect.js"),g=o("./node_modules/@popperjs/core/lib/utils/math.js");function b(e,t){return t===n.viewport?(0,h.default)((0,r.default)(e)):(0,u.isHTMLElement)(t)?function(e){var t=(0,c.default)(e);return t.top=t.top+e.clientTop,t.left=t.left+e.clientLeft,t.bottom=t.top+e.clientHeight,t.right=t.left+e.clientWidth,t.width=e.clientWidth,t.height=e.clientHeight,t.x=t.left,t.y=t.top,t}(t):(0,h.default)((0,i.default)((0,a.default)(e)))}function v(e,t,o){var n="clippingParents"===t?function(e){var t=(0,s.default)((0,p.default)(e)),o=["absolute","fixed"].indexOf((0,d.default)(e).position)>=0&&(0,u.isHTMLElement)(e)?(0,l.default)(e):e;return(0,u.isElement)(o)?t.filter((function(e){return(0,u.isElement)(e)&&(0,f.default)(e,o)&&"body"!==(0,m.default)(e)})):[]}(e):[].concat(t),r=[].concat(n,[o]),i=r[0],a=r.reduce((function(t,o){var n=b(e,o);return t.top=(0,g.max)(n.top,t.top),t.right=(0,g.min)(n.right,t.right),t.bottom=(0,g.min)(n.bottom,t.bottom),t.left=(0,g.max)(n.left,t.left),t}),b(e,i));return a.width=a.right-a.left,a.height=a.bottom-a.top,a.x=a.left,a.y=a.top,a}},"./node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js":(e,t,o)=>{"use strict";o.r(t),o.d(t,{default:()=>u});var n=o("./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js"),r=o("./node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js"),i=o("./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js"),s=o("./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js"),l=o("./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js"),a=o("./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js"),d=o("./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js");function u(e,t,o){void 0===o&&(o=!1);var u=(0,s.isHTMLElement)(t),c=(0,s.isHTMLElement)(t)&&function(e){var t=e.getBoundingClientRect(),o=t.width/e.offsetWidth||1,n=t.height/e.offsetHeight||1;return 1!==o||1!==n}(t),p=(0,a.default)(t),f=(0,n.default)(e,c),m={scrollLeft:0,scrollTop:0},h={x:0,y:0};return(u||!u&&!o)&&(("body"!==(0,i.default)(t)||(0,d.default)(p))&&(m=(0,r.default)(t)),(0,s.isHTMLElement)(t)?((h=(0,n.default)(t,!0)).x+=t.clientLeft,h.y+=t.clientTop):p&&(h.x=(0,l.default)(p))),{x:f.left+m.scrollLeft-h.x,y:f.top+m.scrollTop-h.y,width:f.width,height:f.height}}},"./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js":(e,t,o)=>{"use strict";o.r(t),o.d(t,{default:()=>r});var n=o("./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");function r(e){return(0,n.default)(e).getComputedStyle(e)}},"./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js":(e,t,o)=>{"use strict";o.r(t),o.d(t,{default:()=>r});var n=o("./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");function r(e){return(((0,n.isElement)(e)?e.ownerDocument:e.document)||window.document).documentElement}},"./node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js":(e,t,o)=>{"use strict";o.r(t),o.d(t,{default:()=>a});var n=o("./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js"),r=o("./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js"),i=o("./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js"),s=o("./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js"),l=o("./node_modules/@popperjs/core/lib/utils/math.js");function a(e){var t,o=(0,n.default)(e),a=(0,s.default)(e),d=null==(t=e.ownerDocument)?void 0:t.body,u=(0,l.max)(o.scrollWidth,o.clientWidth,d?d.scrollWidth:0,d?d.clientWidth:0),c=(0,l.max)(o.scrollHeight,o.clientHeight,d?d.scrollHeight:0,d?d.clientHeight:0),p=-a.scrollLeft+(0,i.default)(e),f=-a.scrollTop;return"rtl"===(0,r.default)(d||o).direction&&(p+=(0,l.max)(o.clientWidth,d?d.clientWidth:0)-u),{width:u,height:c,x:p,y:f}}},"./node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js":(e,t,o)=>{"use strict";function n(e){return{scrollLeft:e.scrollLeft,scrollTop:e.scrollTop}}o.r(t),o.d(t,{default:()=>n})},"./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js":(e,t,o)=>{"use strict";o.r(t),o.d(t,{default:()=>r});var n=o("./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js");function r(e){var t=(0,n.default)(e),o=e.offsetWidth,r=e.offsetHeight;return Math.abs(t.width-o)<=1&&(o=t.width),Math.abs(t.height-r)<=1&&(r=t.height),{x:e.offsetLeft,y:e.offsetTop,width:o,height:r}}},"./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js":(e,t,o)=>{"use strict";function n(e){return e?(e.nodeName||"").toLowerCase():null}o.r(t),o.d(t,{default:()=>n})},"./node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js":(e,t,o)=>{"use strict";o.r(t),o.d(t,{default:()=>l});var n=o("./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js"),r=o("./node_modules/@popperjs/core/lib/dom-utils/getWindow.js"),i=o("./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js"),s=o("./node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js");function l(e){return e!==(0,r.default)(e)&&(0,i.isHTMLElement)(e)?(0,s.default)(e):(0,n.default)(e)}},"./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js":(e,t,o)=>{"use strict";o.r(t),o.d(t,{default:()=>u});var n=o("./node_modules/@popperjs/core/lib/dom-utils/getWindow.js"),r=o("./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js"),i=o("./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js"),s=o("./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js"),l=o("./node_modules/@popperjs/core/lib/dom-utils/isTableElement.js"),a=o("./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js");function d(e){return(0,s.isHTMLElement)(e)&&"fixed"!==(0,i.default)(e).position?e.offsetParent:null}function u(e){for(var t=(0,n.default)(e),o=d(e);o&&(0,l.default)(o)&&"static"===(0,i.default)(o).position;)o=d(o);return o&&("html"===(0,r.default)(o)||"body"===(0,r.default)(o)&&"static"===(0,i.default)(o).position)?t:o||function(e){var t=-1!==navigator.userAgent.toLowerCase().indexOf("firefox");if(-1!==navigator.userAgent.indexOf("Trident")&&(0,s.isHTMLElement)(e)&&"fixed"===(0,i.default)(e).position)return null;for(var o=(0,a.default)(e);(0,s.isHTMLElement)(o)&&["html","body"].indexOf((0,r.default)(o))<0;){var n=(0,i.default)(o);if("none"!==n.transform||"none"!==n.perspective||"paint"===n.contain||-1!==["transform","perspective"].indexOf(n.willChange)||t&&"filter"===n.willChange||t&&n.filter&&"none"!==n.filter)return o;o=o.parentNode}return null}(e)||t}},"./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js":(e,t,o)=>{"use strict";o.r(t),o.d(t,{default:()=>s});var n=o("./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js"),r=o("./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js"),i=o("./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");function s(e){return"html"===(0,n.default)(e)?e:e.assignedSlot||e.parentNode||((0,i.isShadowRoot)(e)?e.host:null)||(0,r.default)(e)}},"./node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js":(e,t,o)=>{"use strict";o.r(t),o.d(t,{default:()=>l});var n=o("./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js"),r=o("./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js"),i=o("./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js"),s=o("./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");function l(e){return["html","body","#document"].indexOf((0,i.default)(e))>=0?e.ownerDocument.body:(0,s.isHTMLElement)(e)&&(0,r.default)(e)?e:l((0,n.default)(e))}},"./node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js":(e,t,o)=>{"use strict";o.r(t),o.d(t,{default:()=>s});var n=o("./node_modules/@popperjs/core/lib/dom-utils/getWindow.js"),r=o("./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js"),i=o("./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js");function s(e){var t=(0,n.default)(e),o=(0,r.default)(e),s=t.visualViewport,l=o.clientWidth,a=o.clientHeight,d=0,u=0;return s&&(l=s.width,a=s.height,/^((?!chrome|android).)*safari/i.test(navigator.userAgent)||(d=s.offsetLeft,u=s.offsetTop)),{width:l,height:a,x:d+(0,i.default)(e),y:u}}},"./node_modules/@popperjs/core/lib/dom-utils/getWindow.js":(e,t,o)=>{"use strict";function n(e){if(null==e)return window;if("[object Window]"!==e.toString()){var t=e.ownerDocument;return t&&t.defaultView||window}return e}o.r(t),o.d(t,{default:()=>n})},"./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js":(e,t,o)=>{"use strict";o.r(t),o.d(t,{default:()=>r});var n=o("./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");function r(e){var t=(0,n.default)(e);return{scrollLeft:t.pageXOffset,scrollTop:t.pageYOffset}}},"./node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js":(e,t,o)=>{"use strict";o.r(t),o.d(t,{default:()=>s});var n=o("./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js"),r=o("./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js"),i=o("./node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js");function s(e){return(0,n.default)((0,r.default)(e)).left+(0,i.default)(e).scrollLeft}},"./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js":(e,t,o)=>{"use strict";o.r(t),o.d(t,{isElement:()=>r,isHTMLElement:()=>i,isShadowRoot:()=>s});var n=o("./node_modules/@popperjs/core/lib/dom-utils/getWindow.js");function r(e){return e instanceof(0,n.default)(e).Element||e instanceof Element}function i(e){return e instanceof(0,n.default)(e).HTMLElement||e instanceof HTMLElement}function s(e){return"undefined"!=typeof ShadowRoot&&(e instanceof(0,n.default)(e).ShadowRoot||e instanceof ShadowRoot)}},"./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js":(e,t,o)=>{"use strict";o.r(t),o.d(t,{default:()=>r});var n=o("./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js");function r(e){var t=(0,n.default)(e),o=t.overflow,r=t.overflowX,i=t.overflowY;return/auto|scroll|overlay|hidden/.test(o+i+r)}},"./node_modules/@popperjs/core/lib/dom-utils/isTableElement.js":(e,t,o)=>{"use strict";o.r(t),o.d(t,{default:()=>r});var n=o("./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js");function r(e){return["table","td","th"].indexOf((0,n.default)(e))>=0}},"./node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js":(e,t,o)=>{"use strict";o.r(t),o.d(t,{default:()=>l});var n=o("./node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js"),r=o("./node_modules/@popperjs/core/lib/dom-utils/getParentNode.js"),i=o("./node_modules/@popperjs/core/lib/dom-utils/getWindow.js"),s=o("./node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js");function l(e,t){var o;void 0===t&&(t=[]);var a=(0,n.default)(e),d=a===(null==(o=e.ownerDocument)?void 0:o.body),u=(0,i.default)(a),c=d?[u].concat(u.visualViewport||[],(0,s.default)(a)?a:[]):a,p=t.concat(c);return d?p:p.concat(l((0,r.default)(c)))}},"./node_modules/@popperjs/core/lib/enums.js":(e,t,o)=>{"use strict";o.r(t),o.d(t,{top:()=>n,bottom:()=>r,right:()=>i,left:()=>s,auto:()=>l,basePlacements:()=>a,start:()=>d,end:()=>u,clippingParents:()=>c,viewport:()=>p,popper:()=>f,reference:()=>m,variationPlacements:()=>h,placements:()=>g,beforeRead:()=>b,read:()=>v,afterRead:()=>j,beforeMain:()=>y,main:()=>_,afterMain:()=>w,beforeWrite:()=>E,write:()=>O,afterWrite:()=>C,modifierPhases:()=>x});var n="top",r="bottom",i="right",s="left",l="auto",a=[n,r,i,s],d="start",u="end",c="clippingParents",p="viewport",f="popper",m="reference",h=a.reduce((function(e,t){return e.concat([t+"-"+d,t+"-"+u])}),[]),g=[].concat(a,[l]).reduce((function(e,t){return e.concat([t,t+"-"+d,t+"-"+u])}),[]),b="beforeRead",v="read",j="afterRead",y="beforeMain",_="main",w="afterMain",E="beforeWrite",O="write",C="afterWrite",x=[b,v,j,y,_,w,E,O,C]},"./node_modules/@popperjs/core/lib/index.js":(e,t,o)=>{"use strict";o.r(t),o.d(t,{afterMain:()=>n.afterMain,afterRead:()=>n.afterRead,afterWrite:()=>n.afterWrite,auto:()=>n.auto,basePlacements:()=>n.basePlacements,beforeMain:()=>n.beforeMain,beforeRead:()=>n.beforeRead,beforeWrite:()=>n.beforeWrite,bottom:()=>n.bottom,clippingParents:()=>n.clippingParents,end:()=>n.end,left:()=>n.left,main:()=>n.main,modifierPhases:()=>n.modifierPhases,placements:()=>n.placements,popper:()=>n.popper,read:()=>n.read,reference:()=>n.reference,right:()=>n.right,start:()=>n.start,top:()=>n.top,variationPlacements:()=>n.variationPlacements,viewport:()=>n.viewport,write:()=>n.write,applyStyles:()=>r.applyStyles,arrow:()=>r.arrow,computeStyles:()=>r.computeStyles,eventListeners:()=>r.eventListeners,flip:()=>r.flip,hide:()=>r.hide,offset:()=>r.offset,popperOffsets:()=>r.popperOffsets,preventOverflow:()=>r.preventOverflow,popperGenerator:()=>i.popperGenerator,detectOverflow:()=>s.default,createPopperBase:()=>i.createPopper,createPopper:()=>l.createPopper,createPopperLite:()=>a.createPopper});var n=o("./node_modules/@popperjs/core/lib/enums.js"),r=o("./node_modules/@popperjs/core/lib/modifiers/index.js"),i=o("./node_modules/@popperjs/core/lib/createPopper.js"),s=o("./node_modules/@popperjs/core/lib/utils/detectOverflow.js"),l=o("./node_modules/@popperjs/core/lib/popper.js"),a=o("./node_modules/@popperjs/core/lib/popper-lite.js")},"./node_modules/@popperjs/core/lib/modifiers/applyStyles.js":(e,t,o)=>{"use strict";o.r(t),o.d(t,{default:()=>i});var n=o("./node_modules/@popperjs/core/lib/dom-utils/getNodeName.js"),r=o("./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");const i={name:"applyStyles",enabled:!0,phase:"write",fn:function(e){var t=e.state;Object.keys(t.elements).forEach((function(e){var o=t.styles[e]||{},i=t.attributes[e]||{},s=t.elements[e];(0,r.isHTMLElement)(s)&&(0,n.default)(s)&&(Object.assign(s.style,o),Object.keys(i).forEach((function(e){var t=i[e];!1===t?s.removeAttribute(e):s.setAttribute(e,!0===t?"":t)})))}))},effect:function(e){var t=e.state,o={popper:{position:t.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(t.elements.popper.style,o.popper),t.styles=o,t.elements.arrow&&Object.assign(t.elements.arrow.style,o.arrow),function(){Object.keys(t.elements).forEach((function(e){var i=t.elements[e],s=t.attributes[e]||{},l=Object.keys(t.styles.hasOwnProperty(e)?t.styles[e]:o[e]).reduce((function(e,t){return e[t]="",e}),{});(0,r.isHTMLElement)(i)&&(0,n.default)(i)&&(Object.assign(i.style,l),Object.keys(s).forEach((function(e){i.removeAttribute(e)})))}))}},requires:["computeStyles"]}},"./node_modules/@popperjs/core/lib/modifiers/arrow.js":(e,t,o)=>{"use strict";o.r(t),o.d(t,{default:()=>f});var n=o("./node_modules/@popperjs/core/lib/utils/getBasePlacement.js"),r=o("./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js"),i=o("./node_modules/@popperjs/core/lib/dom-utils/contains.js"),s=o("./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js"),l=o("./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js"),a=o("./node_modules/@popperjs/core/lib/utils/within.js"),d=o("./node_modules/@popperjs/core/lib/utils/mergePaddingObject.js"),u=o("./node_modules/@popperjs/core/lib/utils/expandToHashMap.js"),c=o("./node_modules/@popperjs/core/lib/enums.js"),p=o("./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js");const f={name:"arrow",enabled:!0,phase:"main",fn:function(e){var t,o=e.state,i=e.name,p=e.options,f=o.elements.arrow,m=o.modifiersData.popperOffsets,h=(0,n.default)(o.placement),g=(0,l.default)(h),b=[c.left,c.right].indexOf(h)>=0?"height":"width";if(f&&m){var v=function(e,t){return e="function"==typeof e?e(Object.assign({},t.rects,{placement:t.placement})):e,(0,d.default)("number"!=typeof e?e:(0,u.default)(e,c.basePlacements))}(p.padding,o),j=(0,r.default)(f),y="y"===g?c.top:c.left,_="y"===g?c.bottom:c.right,w=o.rects.reference[b]+o.rects.reference[g]-m[g]-o.rects.popper[b],E=m[g]-o.rects.reference[g],O=(0,s.default)(f),C=O?"y"===g?O.clientHeight||0:O.clientWidth||0:0,x=w/2-E/2,S=v[y],P=C-j[b]-v[_],M=C/2-j[b]/2+x,T=(0,a.default)(S,M,P),L=g;o.modifiersData[i]=((t={})[L]=T,t.centerOffset=T-M,t)}},effect:function(e){var t=e.state,o=e.options.element,n=void 0===o?"[data-popper-arrow]":o;null!=n&&("string"!=typeof n||(n=t.elements.popper.querySelector(n)))&&((0,p.isHTMLElement)(n)||console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).',"To use an SVG arrow, wrap it in an HTMLElement that will be used as","the arrow."].join(" ")),(0,i.default)(t.elements.popper,n)?t.elements.arrow=n:console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper',"element."].join(" ")))},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]}},"./node_modules/@popperjs/core/lib/modifiers/computeStyles.js":(e,t,o)=>{"use strict";o.r(t),o.d(t,{mapToStyles:()=>p,default:()=>f});var n=o("./node_modules/@popperjs/core/lib/enums.js"),r=o("./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js"),i=o("./node_modules/@popperjs/core/lib/dom-utils/getWindow.js"),s=o("./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js"),l=o("./node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js"),a=o("./node_modules/@popperjs/core/lib/utils/getBasePlacement.js"),d=o("./node_modules/@popperjs/core/lib/utils/getVariation.js"),u=o("./node_modules/@popperjs/core/lib/utils/math.js"),c={top:"auto",right:"auto",bottom:"auto",left:"auto"};function p(e){var t,o=e.popper,a=e.popperRect,d=e.placement,p=e.variation,f=e.offsets,m=e.position,h=e.gpuAcceleration,g=e.adaptive,b=e.roundOffsets,v=!0===b?function(e){var t=e.x,o=e.y,n=window.devicePixelRatio||1;return{x:(0,u.round)((0,u.round)(t*n)/n)||0,y:(0,u.round)((0,u.round)(o*n)/n)||0}}(f):"function"==typeof b?b(f):f,j=v.x,y=void 0===j?0:j,_=v.y,w=void 0===_?0:_,E=f.hasOwnProperty("x"),O=f.hasOwnProperty("y"),C=n.left,x=n.top,S=window;if(g){var P=(0,r.default)(o),M="clientHeight",T="clientWidth";P===(0,i.default)(o)&&(P=(0,s.default)(o),"static"!==(0,l.default)(P).position&&"absolute"===m&&(M="scrollHeight",T="scrollWidth")),P=P,d!==n.top&&(d!==n.left&&d!==n.right||p!==n.end)||(x=n.bottom,w-=P[M]-a.height,w*=h?1:-1),d!==n.left&&(d!==n.top&&d!==n.bottom||p!==n.end)||(C=n.right,y-=P[T]-a.width,y*=h?1:-1)}var L,D=Object.assign({position:m},g&&c);return h?Object.assign({},D,((L={})[x]=O?"0":"",L[C]=E?"0":"",L.transform=(S.devicePixelRatio||1)<=1?"translate("+y+"px, "+w+"px)":"translate3d("+y+"px, "+w+"px, 0)",L)):Object.assign({},D,((t={})[x]=O?w+"px":"",t[C]=E?y+"px":"",t.transform="",t))}const f={name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(e){var t=e.state,o=e.options,n=o.gpuAcceleration,r=void 0===n||n,i=o.adaptive,s=void 0===i||i,u=o.roundOffsets,c=void 0===u||u,f=(0,l.default)(t.elements.popper).transitionProperty||"";s&&["transform","top","right","bottom","left"].some((function(e){return f.indexOf(e)>=0}))&&console.warn(["Popper: Detected CSS transitions on at least one of the following",'CSS properties: "transform", "top", "right", "bottom", "left".',"\n\n",'Disable the "computeStyles" modifier\'s `adaptive` option to allow',"for smooth transitions, or remove these properties from the CSS","transition declaration on the popper element if only transitioning","opacity or background-color for example.","\n\n","We recommend using the popper element as a wrapper around an inner","element that can have any CSS property transitioned for animations."].join(" "));var m={placement:(0,a.default)(t.placement),variation:(0,d.default)(t.placement),popper:t.elements.popper,popperRect:t.rects.popper,gpuAcceleration:r};null!=t.modifiersData.popperOffsets&&(t.styles.popper=Object.assign({},t.styles.popper,p(Object.assign({},m,{offsets:t.modifiersData.popperOffsets,position:t.options.strategy,adaptive:s,roundOffsets:c})))),null!=t.modifiersData.arrow&&(t.styles.arrow=Object.assign({},t.styles.arrow,p(Object.assign({},m,{offsets:t.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:c})))),t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-placement":t.placement})},data:{}}},"./node_modules/@popperjs/core/lib/modifiers/eventListeners.js":(e,t,o)=>{"use strict";o.r(t),o.d(t,{default:()=>i});var n=o("./node_modules/@popperjs/core/lib/dom-utils/getWindow.js"),r={passive:!0};const i={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(e){var t=e.state,o=e.instance,i=e.options,s=i.scroll,l=void 0===s||s,a=i.resize,d=void 0===a||a,u=(0,n.default)(t.elements.popper),c=[].concat(t.scrollParents.reference,t.scrollParents.popper);return l&&c.forEach((function(e){e.addEventListener("scroll",o.update,r)})),d&&u.addEventListener("resize",o.update,r),function(){l&&c.forEach((function(e){e.removeEventListener("scroll",o.update,r)})),d&&u.removeEventListener("resize",o.update,r)}},data:{}}},"./node_modules/@popperjs/core/lib/modifiers/flip.js":(e,t,o)=>{"use strict";o.r(t),o.d(t,{default:()=>u});var n=o("./node_modules/@popperjs/core/lib/utils/getOppositePlacement.js"),r=o("./node_modules/@popperjs/core/lib/utils/getBasePlacement.js"),i=o("./node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js"),s=o("./node_modules/@popperjs/core/lib/utils/detectOverflow.js"),l=o("./node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js"),a=o("./node_modules/@popperjs/core/lib/enums.js"),d=o("./node_modules/@popperjs/core/lib/utils/getVariation.js");const u={name:"flip",enabled:!0,phase:"main",fn:function(e){var t=e.state,o=e.options,u=e.name;if(!t.modifiersData[u]._skip){for(var c=o.mainAxis,p=void 0===c||c,f=o.altAxis,m=void 0===f||f,h=o.fallbackPlacements,g=o.padding,b=o.boundary,v=o.rootBoundary,j=o.altBoundary,y=o.flipVariations,_=void 0===y||y,w=o.allowedAutoPlacements,E=t.options.placement,O=(0,r.default)(E),C=h||(O!==E&&_?function(e){if((0,r.default)(e)===a.auto)return[];var t=(0,n.default)(e);return[(0,i.default)(e),t,(0,i.default)(t)]}(E):[(0,n.default)(E)]),x=[E].concat(C).reduce((function(e,o){return e.concat((0,r.default)(o)===a.auto?(0,l.default)(t,{placement:o,boundary:b,rootBoundary:v,padding:g,flipVariations:_,allowedAutoPlacements:w}):o)}),[]),S=t.rects.reference,P=t.rects.popper,M=new Map,T=!0,L=x[0],D=0;D<x.length;D++){var A=x[D],N=(0,r.default)(A),k=(0,d.default)(A)===a.start,H=[a.top,a.bottom].indexOf(N)>=0,R=H?"width":"height",B=(0,s.default)(t,{placement:A,boundary:b,rootBoundary:v,altBoundary:j,padding:g}),F=H?k?a.right:a.left:k?a.bottom:a.top;S[R]>P[R]&&(F=(0,n.default)(F));var W=(0,n.default)(F),q=[];if(p&&q.push(B[N]<=0),m&&q.push(B[F]<=0,B[W]<=0),q.every((function(e){return e}))){L=A,T=!1;break}M.set(A,q)}if(T)for(var I=function(e){var t=x.find((function(t){var o=M.get(t);if(o)return o.slice(0,e).every((function(e){return e}))}));if(t)return L=t,"break"},V=_?3:1;V>0&&"break"!==I(V);V--);t.placement!==L&&(t.modifiersData[u]._skip=!0,t.placement=L,t.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}}},"./node_modules/@popperjs/core/lib/modifiers/hide.js":(e,t,o)=>{"use strict";o.r(t),o.d(t,{default:()=>l});var n=o("./node_modules/@popperjs/core/lib/enums.js"),r=o("./node_modules/@popperjs/core/lib/utils/detectOverflow.js");function i(e,t,o){return void 0===o&&(o={x:0,y:0}),{top:e.top-t.height-o.y,right:e.right-t.width+o.x,bottom:e.bottom-t.height+o.y,left:e.left-t.width-o.x}}function s(e){return[n.top,n.right,n.bottom,n.left].some((function(t){return e[t]>=0}))}const l={name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(e){var t=e.state,o=e.name,n=t.rects.reference,l=t.rects.popper,a=t.modifiersData.preventOverflow,d=(0,r.default)(t,{elementContext:"reference"}),u=(0,r.default)(t,{altBoundary:!0}),c=i(d,n),p=i(u,l,a),f=s(c),m=s(p);t.modifiersData[o]={referenceClippingOffsets:c,popperEscapeOffsets:p,isReferenceHidden:f,hasPopperEscaped:m},t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-reference-hidden":f,"data-popper-escaped":m})}}},"./node_modules/@popperjs/core/lib/modifiers/index.js":(e,t,o)=>{"use strict";o.r(t),o.d(t,{applyStyles:()=>n.default,arrow:()=>r.default,computeStyles:()=>i.default,eventListeners:()=>s.default,flip:()=>l.default,hide:()=>a.default,offset:()=>d.default,popperOffsets:()=>u.default,preventOverflow:()=>c.default});var n=o("./node_modules/@popperjs/core/lib/modifiers/applyStyles.js"),r=o("./node_modules/@popperjs/core/lib/modifiers/arrow.js"),i=o("./node_modules/@popperjs/core/lib/modifiers/computeStyles.js"),s=o("./node_modules/@popperjs/core/lib/modifiers/eventListeners.js"),l=o("./node_modules/@popperjs/core/lib/modifiers/flip.js"),a=o("./node_modules/@popperjs/core/lib/modifiers/hide.js"),d=o("./node_modules/@popperjs/core/lib/modifiers/offset.js"),u=o("./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js"),c=o("./node_modules/@popperjs/core/lib/modifiers/preventOverflow.js")},"./node_modules/@popperjs/core/lib/modifiers/offset.js":(e,t,o)=>{"use strict";o.r(t),o.d(t,{distanceAndSkiddingToXY:()=>i,default:()=>s});var n=o("./node_modules/@popperjs/core/lib/utils/getBasePlacement.js"),r=o("./node_modules/@popperjs/core/lib/enums.js");function i(e,t,o){var i=(0,n.default)(e),s=[r.left,r.top].indexOf(i)>=0?-1:1,l="function"==typeof o?o(Object.assign({},t,{placement:e})):o,a=l[0],d=l[1];return a=a||0,d=(d||0)*s,[r.left,r.right].indexOf(i)>=0?{x:d,y:a}:{x:a,y:d}}const s={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(e){var t=e.state,o=e.options,n=e.name,s=o.offset,l=void 0===s?[0,0]:s,a=r.placements.reduce((function(e,o){return e[o]=i(o,t.rects,l),e}),{}),d=a[t.placement],u=d.x,c=d.y;null!=t.modifiersData.popperOffsets&&(t.modifiersData.popperOffsets.x+=u,t.modifiersData.popperOffsets.y+=c),t.modifiersData[n]=a}}},"./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js":(e,t,o)=>{"use strict";o.r(t),o.d(t,{default:()=>r});var n=o("./node_modules/@popperjs/core/lib/utils/computeOffsets.js");const r={name:"popperOffsets",enabled:!0,phase:"read",fn:function(e){var t=e.state,o=e.name;t.modifiersData[o]=(0,n.default)({reference:t.rects.reference,element:t.rects.popper,strategy:"absolute",placement:t.placement})},data:{}}},"./node_modules/@popperjs/core/lib/modifiers/preventOverflow.js":(e,t,o)=>{"use strict";o.r(t),o.d(t,{default:()=>m});var n=o("./node_modules/@popperjs/core/lib/enums.js"),r=o("./node_modules/@popperjs/core/lib/utils/getBasePlacement.js"),i=o("./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js"),s=o("./node_modules/@popperjs/core/lib/utils/getAltAxis.js"),l=o("./node_modules/@popperjs/core/lib/utils/within.js"),a=o("./node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js"),d=o("./node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js"),u=o("./node_modules/@popperjs/core/lib/utils/detectOverflow.js"),c=o("./node_modules/@popperjs/core/lib/utils/getVariation.js"),p=o("./node_modules/@popperjs/core/lib/utils/getFreshSideObject.js"),f=o("./node_modules/@popperjs/core/lib/utils/math.js");const m={name:"preventOverflow",enabled:!0,phase:"main",fn:function(e){var t=e.state,o=e.options,m=e.name,h=o.mainAxis,g=void 0===h||h,b=o.altAxis,v=void 0!==b&&b,j=o.boundary,y=o.rootBoundary,_=o.altBoundary,w=o.padding,E=o.tether,O=void 0===E||E,C=o.tetherOffset,x=void 0===C?0:C,S=(0,u.default)(t,{boundary:j,rootBoundary:y,padding:w,altBoundary:_}),P=(0,r.default)(t.placement),M=(0,c.default)(t.placement),T=!M,L=(0,i.default)(P),D=(0,s.default)(L),A=t.modifiersData.popperOffsets,N=t.rects.reference,k=t.rects.popper,H="function"==typeof x?x(Object.assign({},t.rects,{placement:t.placement})):x,R={x:0,y:0};if(A){if(g||v){var B="y"===L?n.top:n.left,F="y"===L?n.bottom:n.right,W="y"===L?"height":"width",q=A[L],I=A[L]+S[B],V=A[L]-S[F],G=O?-k[W]/2:0,z=M===n.start?N[W]:k[W],U=M===n.start?-k[W]:-N[W],J=t.elements.arrow,Y=O&&J?(0,a.default)(J):{width:0,height:0},X=t.modifiersData["arrow#persistent"]?t.modifiersData["arrow#persistent"].padding:(0,p.default)(),K=X[B],Q=X[F],$=(0,l.default)(0,N[W],Y[W]),Z=T?N[W]/2-G-$-K-H:z-$-K-H,ee=T?-N[W]/2+G+$+Q+H:U+$+Q+H,te=t.elements.arrow&&(0,d.default)(t.elements.arrow),oe=te?"y"===L?te.clientTop||0:te.clientLeft||0:0,ne=t.modifiersData.offset?t.modifiersData.offset[t.placement][L]:0,re=A[L]+Z-ne-oe,ie=A[L]+ee-ne;if(g){var se=(0,l.default)(O?(0,f.min)(I,re):I,q,O?(0,f.max)(V,ie):V);A[L]=se,R[L]=se-q}if(v){var le="x"===L?n.top:n.left,ae="x"===L?n.bottom:n.right,de=A[D],ue=de+S[le],ce=de-S[ae],pe=(0,l.default)(O?(0,f.min)(ue,re):ue,de,O?(0,f.max)(ce,ie):ce);A[D]=pe,R[D]=pe-de}}t.modifiersData[m]=R}},requiresIfExists:["offset"]}},"./node_modules/@popperjs/core/lib/popper-lite.js":(e,t,o)=>{"use strict";o.r(t),o.d(t,{createPopper:()=>u,popperGenerator:()=>n.popperGenerator,defaultModifiers:()=>d,detectOverflow:()=>r.default});var n=o("./node_modules/@popperjs/core/lib/createPopper.js"),r=o("./node_modules/@popperjs/core/lib/utils/detectOverflow.js"),i=o("./node_modules/@popperjs/core/lib/modifiers/eventListeners.js"),s=o("./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js"),l=o("./node_modules/@popperjs/core/lib/modifiers/computeStyles.js"),a=o("./node_modules/@popperjs/core/lib/modifiers/applyStyles.js"),d=[i.default,s.default,l.default,a.default],u=(0,n.popperGenerator)({defaultModifiers:d})},"./node_modules/@popperjs/core/lib/popper.js":(e,t,o)=>{"use strict";o.r(t),o.d(t,{createPopper:()=>b,popperGenerator:()=>n.popperGenerator,defaultModifiers:()=>g,detectOverflow:()=>r.default,createPopperLite:()=>m.createPopper,applyStyles:()=>h.applyStyles,arrow:()=>h.arrow,computeStyles:()=>h.computeStyles,eventListeners:()=>h.eventListeners,flip:()=>h.flip,hide:()=>h.hide,offset:()=>h.offset,popperOffsets:()=>h.popperOffsets,preventOverflow:()=>h.preventOverflow});var n=o("./node_modules/@popperjs/core/lib/createPopper.js"),r=o("./node_modules/@popperjs/core/lib/utils/detectOverflow.js"),i=o("./node_modules/@popperjs/core/lib/modifiers/eventListeners.js"),s=o("./node_modules/@popperjs/core/lib/modifiers/popperOffsets.js"),l=o("./node_modules/@popperjs/core/lib/modifiers/computeStyles.js"),a=o("./node_modules/@popperjs/core/lib/modifiers/applyStyles.js"),d=o("./node_modules/@popperjs/core/lib/modifiers/offset.js"),u=o("./node_modules/@popperjs/core/lib/modifiers/flip.js"),c=o("./node_modules/@popperjs/core/lib/modifiers/preventOverflow.js"),p=o("./node_modules/@popperjs/core/lib/modifiers/arrow.js"),f=o("./node_modules/@popperjs/core/lib/modifiers/hide.js"),m=o("./node_modules/@popperjs/core/lib/popper-lite.js"),h=o("./node_modules/@popperjs/core/lib/modifiers/index.js"),g=[i.default,s.default,l.default,a.default,d.default,u.default,c.default,p.default,f.default],b=(0,n.popperGenerator)({defaultModifiers:g})},"./node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js":(e,t,o)=>{"use strict";o.r(t),o.d(t,{default:()=>l});var n=o("./node_modules/@popperjs/core/lib/utils/getVariation.js"),r=o("./node_modules/@popperjs/core/lib/enums.js"),i=o("./node_modules/@popperjs/core/lib/utils/detectOverflow.js"),s=o("./node_modules/@popperjs/core/lib/utils/getBasePlacement.js");function l(e,t){void 0===t&&(t={});var o=t,l=o.placement,a=o.boundary,d=o.rootBoundary,u=o.padding,c=o.flipVariations,p=o.allowedAutoPlacements,f=void 0===p?r.placements:p,m=(0,n.default)(l),h=m?c?r.variationPlacements:r.variationPlacements.filter((function(e){return(0,n.default)(e)===m})):r.basePlacements,g=h.filter((function(e){return f.indexOf(e)>=0}));0===g.length&&(g=h,console.error(["Popper: The `allowedAutoPlacements` option did not allow any","placements. Ensure the `placement` option matches the variation","of the allowed placements.",'For example, "auto" cannot be used to allow "bottom-start".','Use "auto-start" instead.'].join(" ")));var b=g.reduce((function(t,o){return t[o]=(0,i.default)(e,{placement:o,boundary:a,rootBoundary:d,padding:u})[(0,s.default)(o)],t}),{});return Object.keys(b).sort((function(e,t){return b[e]-b[t]}))}},"./node_modules/@popperjs/core/lib/utils/computeOffsets.js":(e,t,o)=>{"use strict";o.r(t),o.d(t,{default:()=>l});var n=o("./node_modules/@popperjs/core/lib/utils/getBasePlacement.js"),r=o("./node_modules/@popperjs/core/lib/utils/getVariation.js"),i=o("./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js"),s=o("./node_modules/@popperjs/core/lib/enums.js");function l(e){var t,o=e.reference,l=e.element,a=e.placement,d=a?(0,n.default)(a):null,u=a?(0,r.default)(a):null,c=o.x+o.width/2-l.width/2,p=o.y+o.height/2-l.height/2;switch(d){case s.top:t={x:c,y:o.y-l.height};break;case s.bottom:t={x:c,y:o.y+o.height};break;case s.right:t={x:o.x+o.width,y:p};break;case s.left:t={x:o.x-l.width,y:p};break;default:t={x:o.x,y:o.y}}var f=d?(0,i.default)(d):null;if(null!=f){var m="y"===f?"height":"width";switch(u){case s.start:t[f]=t[f]-(o[m]/2-l[m]/2);break;case s.end:t[f]=t[f]+(o[m]/2-l[m]/2)}}return t}},"./node_modules/@popperjs/core/lib/utils/debounce.js":(e,t,o)=>{"use strict";function n(e){var t;return function(){return t||(t=new Promise((function(o){Promise.resolve().then((function(){t=void 0,o(e())}))}))),t}}o.r(t),o.d(t,{default:()=>n})},"./node_modules/@popperjs/core/lib/utils/detectOverflow.js":(e,t,o)=>{"use strict";o.r(t),o.d(t,{default:()=>p});var n=o("./node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js"),r=o("./node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js"),i=o("./node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js"),s=o("./node_modules/@popperjs/core/lib/utils/computeOffsets.js"),l=o("./node_modules/@popperjs/core/lib/utils/rectToClientRect.js"),a=o("./node_modules/@popperjs/core/lib/enums.js"),d=o("./node_modules/@popperjs/core/lib/dom-utils/instanceOf.js"),u=o("./node_modules/@popperjs/core/lib/utils/mergePaddingObject.js"),c=o("./node_modules/@popperjs/core/lib/utils/expandToHashMap.js");function p(e,t){void 0===t&&(t={});var o=t,p=o.placement,f=void 0===p?e.placement:p,m=o.boundary,h=void 0===m?a.clippingParents:m,g=o.rootBoundary,b=void 0===g?a.viewport:g,v=o.elementContext,j=void 0===v?a.popper:v,y=o.altBoundary,_=void 0!==y&&y,w=o.padding,E=void 0===w?0:w,O=(0,u.default)("number"!=typeof E?E:(0,c.default)(E,a.basePlacements)),C=j===a.popper?a.reference:a.popper,x=e.rects.popper,S=e.elements[_?C:j],P=(0,n.default)((0,d.isElement)(S)?S:S.contextElement||(0,r.default)(e.elements.popper),h,b),M=(0,i.default)(e.elements.reference),T=(0,s.default)({reference:M,element:x,strategy:"absolute",placement:f}),L=(0,l.default)(Object.assign({},x,T)),D=j===a.popper?L:M,A={top:P.top-D.top+O.top,bottom:D.bottom-P.bottom+O.bottom,left:P.left-D.left+O.left,right:D.right-P.right+O.right},N=e.modifiersData.offset;if(j===a.popper&&N){var k=N[f];Object.keys(A).forEach((function(e){var t=[a.right,a.bottom].indexOf(e)>=0?1:-1,o=[a.top,a.bottom].indexOf(e)>=0?"y":"x";A[e]+=k[o]*t}))}return A}},"./node_modules/@popperjs/core/lib/utils/expandToHashMap.js":(e,t,o)=>{"use strict";function n(e,t){return t.reduce((function(t,o){return t[o]=e,t}),{})}o.r(t),o.d(t,{default:()=>n})},"./node_modules/@popperjs/core/lib/utils/format.js":(e,t,o)=>{"use strict";function n(e){for(var t=arguments.length,o=new Array(t>1?t-1:0),n=1;n<t;n++)o[n-1]=arguments[n];return[].concat(o).reduce((function(e,t){return e.replace(/%s/,t)}),e)}o.r(t),o.d(t,{default:()=>n})},"./node_modules/@popperjs/core/lib/utils/getAltAxis.js":(e,t,o)=>{"use strict";function n(e){return"x"===e?"y":"x"}o.r(t),o.d(t,{default:()=>n})},"./node_modules/@popperjs/core/lib/utils/getBasePlacement.js":(e,t,o)=>{"use strict";function n(e){return e.split("-")[0]}o.r(t),o.d(t,{default:()=>n})},"./node_modules/@popperjs/core/lib/utils/getFreshSideObject.js":(e,t,o)=>{"use strict";function n(){return{top:0,right:0,bottom:0,left:0}}o.r(t),o.d(t,{default:()=>n})},"./node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js":(e,t,o)=>{"use strict";function n(e){return["top","bottom"].indexOf(e)>=0?"x":"y"}o.r(t),o.d(t,{default:()=>n})},"./node_modules/@popperjs/core/lib/utils/getOppositePlacement.js":(e,t,o)=>{"use strict";o.r(t),o.d(t,{default:()=>r});var n={left:"right",right:"left",bottom:"top",top:"bottom"};function r(e){return e.replace(/left|right|bottom|top/g,(function(e){return n[e]}))}},"./node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js":(e,t,o)=>{"use strict";o.r(t),o.d(t,{default:()=>r});var n={start:"end",end:"start"};function r(e){return e.replace(/start|end/g,(function(e){return n[e]}))}},"./node_modules/@popperjs/core/lib/utils/getVariation.js":(e,t,o)=>{"use strict";function n(e){return e.split("-")[1]}o.r(t),o.d(t,{default:()=>n})},"./node_modules/@popperjs/core/lib/utils/math.js":(e,t,o)=>{"use strict";o.r(t),o.d(t,{max:()=>n,min:()=>r,round:()=>i});var n=Math.max,r=Math.min,i=Math.round},"./node_modules/@popperjs/core/lib/utils/mergeByName.js":(e,t,o)=>{"use strict";function n(e){var t=e.reduce((function(e,t){var o=e[t.name];return e[t.name]=o?Object.assign({},o,t,{options:Object.assign({},o.options,t.options),data:Object.assign({},o.data,t.data)}):t,e}),{});return Object.keys(t).map((function(e){return t[e]}))}o.r(t),o.d(t,{default:()=>n})},"./node_modules/@popperjs/core/lib/utils/mergePaddingObject.js":(e,t,o)=>{"use strict";o.r(t),o.d(t,{default:()=>r});var n=o("./node_modules/@popperjs/core/lib/utils/getFreshSideObject.js");function r(e){return Object.assign({},(0,n.default)(),e)}},"./node_modules/@popperjs/core/lib/utils/orderModifiers.js":(e,t,o)=>{"use strict";o.r(t),o.d(t,{default:()=>i});var n=o("./node_modules/@popperjs/core/lib/enums.js");function r(e){var t=new Map,o=new Set,n=[];function r(e){o.add(e.name),[].concat(e.requires||[],e.requiresIfExists||[]).forEach((function(e){if(!o.has(e)){var n=t.get(e);n&&r(n)}})),n.push(e)}return e.forEach((function(e){t.set(e.name,e)})),e.forEach((function(e){o.has(e.name)||r(e)})),n}function i(e){var t=r(e);return n.modifierPhases.reduce((function(e,o){return e.concat(t.filter((function(e){return e.phase===o})))}),[])}},"./node_modules/@popperjs/core/lib/utils/rectToClientRect.js":(e,t,o)=>{"use strict";function n(e){return Object.assign({},e,{left:e.x,top:e.y,right:e.x+e.width,bottom:e.y+e.height})}o.r(t),o.d(t,{default:()=>n})},"./node_modules/@popperjs/core/lib/utils/uniqueBy.js":(e,t,o)=>{"use strict";function n(e,t){var o=new Set;return e.filter((function(e){var n=t(e);if(!o.has(n))return o.add(n),!0}))}o.r(t),o.d(t,{default:()=>n})},"./node_modules/@popperjs/core/lib/utils/validateModifiers.js":(e,t,o)=>{"use strict";o.r(t),o.d(t,{default:()=>l});var n=o("./node_modules/@popperjs/core/lib/utils/format.js"),r=o("./node_modules/@popperjs/core/lib/enums.js"),i='Popper: modifier "%s" provided an invalid %s property, expected %s but got %s',s=["name","enabled","phase","fn","effect","requires","options"];function l(e){e.forEach((function(t){[].concat(Object.keys(t),s).filter((function(e,t,o){return o.indexOf(e)===t})).forEach((function(o){switch(o){case"name":"string"!=typeof t.name&&console.error((0,n.default)(i,String(t.name),'"name"','"string"','"'+String(t.name)+'"'));break;case"enabled":"boolean"!=typeof t.enabled&&console.error((0,n.default)(i,t.name,'"enabled"','"boolean"','"'+String(t.enabled)+'"'));break;case"phase":r.modifierPhases.indexOf(t.phase)<0&&console.error((0,n.default)(i,t.name,'"phase"',"either "+r.modifierPhases.join(", "),'"'+String(t.phase)+'"'));break;case"fn":"function"!=typeof t.fn&&console.error((0,n.default)(i,t.name,'"fn"','"function"','"'+String(t.fn)+'"'));break;case"effect":null!=t.effect&&"function"!=typeof t.effect&&console.error((0,n.default)(i,t.name,'"effect"','"function"','"'+String(t.fn)+'"'));break;case"requires":null==t.requires||Array.isArray(t.requires)||console.error((0,n.default)(i,t.name,'"requires"','"array"','"'+String(t.requires)+'"'));break;case"requiresIfExists":Array.isArray(t.requiresIfExists)||console.error((0,n.default)(i,t.name,'"requiresIfExists"','"array"','"'+String(t.requiresIfExists)+'"'));break;case"options":case"data":break;default:console.error('PopperJS: an invalid property has been provided to the "'+t.name+'" modifier, valid properties are '+s.map((function(e){return'"'+e+'"'})).join(", ")+'; but "'+o+'" was provided.')}t.requires&&t.requires.forEach((function(o){null==e.find((function(e){return e.name===o}))&&console.error((0,n.default)('Popper: modifier "%s" requires "%s", but "%s" modifier is not available',String(t.name),o,o))}))}))}))}},"./node_modules/@popperjs/core/lib/utils/within.js":(e,t,o)=>{"use strict";o.r(t),o.d(t,{default:()=>r});var n=o("./node_modules/@popperjs/core/lib/utils/math.js");function r(e,t,o){return(0,n.max)(e,(0,n.min)(t,o))}},"./node_modules/@webcomponents/custom-elements/custom-elements.min.js":()=>{(function(){"use strict";var e=window.Document.prototype.createElement,t=window.Document.prototype.createElementNS,o=window.Document.prototype.importNode,n=window.Document.prototype.prepend,r=window.Document.prototype.append,i=window.DocumentFragment.prototype.prepend,s=window.DocumentFragment.prototype.append,l=window.Node.prototype.cloneNode,a=window.Node.prototype.appendChild,d=window.Node.prototype.insertBefore,u=window.Node.prototype.removeChild,c=window.Node.prototype.replaceChild,p=Object.getOwnPropertyDescriptor(window.Node.prototype,"textContent"),f=window.Element.prototype.attachShadow,m=Object.getOwnPropertyDescriptor(window.Element.prototype,"innerHTML"),h=window.Element.prototype.getAttribute,g=window.Element.prototype.setAttribute,b=window.Element.prototype.removeAttribute,v=window.Element.prototype.getAttributeNS,j=window.Element.prototype.setAttributeNS,y=window.Element.prototype.removeAttributeNS,_=window.Element.prototype.insertAdjacentElement,w=window.Element.prototype.insertAdjacentHTML,E=window.Element.prototype.prepend,O=window.Element.prototype.append,C=window.Element.prototype.before,x=window.Element.prototype.after,S=window.Element.prototype.replaceWith,P=window.Element.prototype.remove,M=window.HTMLElement,T=Object.getOwnPropertyDescriptor(window.HTMLElement.prototype,"innerHTML"),L=window.HTMLElement.prototype.insertAdjacentElement,D=window.HTMLElement.prototype.insertAdjacentHTML,A=new Set;function N(e){var t=A.has(e);return e=/^[a-z][.0-9_a-z]*-[-.0-9_a-z]*$/.test(e),!t&&e}"annotation-xml color-profile font-face font-face-src font-face-uri font-face-format font-face-name missing-glyph".split(" ").forEach((function(e){return A.add(e)}));var k=document.contains?document.contains.bind(document):document.documentElement.contains.bind(document.documentElement);function H(e){var t=e.isConnected;if(void 0!==t)return t;if(k(e))return!0;for(;e&&!(e.__CE_isImportDocument||e instanceof Document);)e=e.parentNode||(window.ShadowRoot&&e instanceof ShadowRoot?e.host:void 0);return!(!e||!(e.__CE_isImportDocument||e instanceof Document))}function R(e){var t=e.children;if(t)return Array.prototype.slice.call(t);for(t=[],e=e.firstChild;e;e=e.nextSibling)e.nodeType===Node.ELEMENT_NODE&&t.push(e);return t}function B(e,t){for(;t&&t!==e&&!t.nextSibling;)t=t.parentNode;return t&&t!==e?t.nextSibling:null}function F(e,t,o){for(var n=e;n;){if(n.nodeType===Node.ELEMENT_NODE){var r=n;t(r);var i=r.localName;if("link"===i&&"import"===r.getAttribute("rel")){if(n=r.import,void 0===o&&(o=new Set),n instanceof Node&&!o.has(n))for(o.add(n),n=n.firstChild;n;n=n.nextSibling)F(n,t,o);n=B(e,r);continue}if("template"===i){n=B(e,r);continue}if(r=r.__CE_shadowRoot)for(r=r.firstChild;r;r=r.nextSibling)F(r,t,o)}n=n.firstChild?n.firstChild:B(e,n)}}function W(){var e=!(null==se||!se.noDocumentConstructionObserver),t=!(null==se||!se.shadyDomFastWalk);this.m=[],this.g=[],this.j=!1,this.shadyDomFastWalk=t,this.I=!e}function q(e,t,o,n){var r=window.ShadyDOM;if(e.shadyDomFastWalk&&r&&r.inUse){if(t.nodeType===Node.ELEMENT_NODE&&o(t),t.querySelectorAll)for(e=r.nativeMethods.querySelectorAll.call(t,"*"),t=0;t<e.length;t++)o(e[t])}else F(t,o,n)}function I(e,t){e.j&&q(e,t,(function(t){return V(e,t)}))}function V(e,t){if(e.j&&!t.__CE_patched){t.__CE_patched=!0;for(var o=0;o<e.m.length;o++)e.m[o](t);for(o=0;o<e.g.length;o++)e.g[o](t)}}function G(e,t){var o=[];for(q(e,t,(function(e){return o.push(e)})),t=0;t<o.length;t++){var n=o[t];1===n.__CE_state?e.connectedCallback(n):J(e,n)}}function z(e,t){var o=[];for(q(e,t,(function(e){return o.push(e)})),t=0;t<o.length;t++){var n=o[t];1===n.__CE_state&&e.disconnectedCallback(n)}}function U(e,t,o){var n=(o=void 0===o?{}:o).J,r=o.upgrade||function(t){return J(e,t)},i=[];for(q(e,t,(function(t){if(e.j&&V(e,t),"link"===t.localName&&"import"===t.getAttribute("rel")){var o=t.import;o instanceof Node&&(o.__CE_isImportDocument=!0,o.__CE_registry=document.__CE_registry),o&&"complete"===o.readyState?o.__CE_documentLoadHandled=!0:t.addEventListener("load",(function(){var o=t.import;if(!o.__CE_documentLoadHandled){o.__CE_documentLoadHandled=!0;var i=new Set;n&&(n.forEach((function(e){return i.add(e)})),i.delete(o)),U(e,o,{J:i,upgrade:r})}}))}else i.push(t)}),n),t=0;t<i.length;t++)r(i[t])}function J(e,t){try{var o=t.ownerDocument,n=o.__CE_registry,r=n&&(o.defaultView||o.__CE_isImportDocument)?ne(n,t.localName):void 0;if(r&&void 0===t.__CE_state){r.constructionStack.push(t);try{try{if(new r.constructorFunction!==t)throw Error("The custom element constructor did not produce the element being upgraded.")}finally{r.constructionStack.pop()}}catch(e){throw t.__CE_state=2,e}if(t.__CE_state=1,t.__CE_definition=r,r.attributeChangedCallback&&t.hasAttributes()){var i=r.observedAttributes;for(r=0;r<i.length;r++){var s=i[r],l=t.getAttribute(s);null!==l&&e.attributeChangedCallback(t,s,null,l,null)}}H(t)&&e.connectedCallback(t)}}catch(e){X(e)}}function Y(o,n,r,i){var s=n.__CE_registry;if(s&&(null===i||"http://www.w3.org/1999/xhtml"===i)&&(s=ne(s,r)))try{var l=new s.constructorFunction;if(void 0===l.__CE_state||void 0===l.__CE_definition)throw Error("Failed to construct '"+r+"': The returned value was not constructed with the HTMLElement constructor.");if("http://www.w3.org/1999/xhtml"!==l.namespaceURI)throw Error("Failed to construct '"+r+"': The constructed element's namespace must be the HTML namespace.");if(l.hasAttributes())throw Error("Failed to construct '"+r+"': The constructed element must not have any attributes.");if(null!==l.firstChild)throw Error("Failed to construct '"+r+"': The constructed element must not have any children.");if(null!==l.parentNode)throw Error("Failed to construct '"+r+"': The constructed element must not have a parent node.");if(l.ownerDocument!==n)throw Error("Failed to construct '"+r+"': The constructed element's owner document is incorrect.");if(l.localName!==r)throw Error("Failed to construct '"+r+"': The constructed element's local name is incorrect.");return l}catch(s){return X(s),n=null===i?e.call(n,r):t.call(n,i,r),Object.setPrototypeOf(n,HTMLUnknownElement.prototype),n.__CE_state=2,n.__CE_definition=void 0,V(o,n),n}return V(o,n=null===i?e.call(n,r):t.call(n,i,r)),n}function X(e){var t=e.message,o=e.sourceURL||e.fileName||"",n=e.line||e.lineNumber||0,r=e.column||e.columnNumber||0,i=void 0;void 0===ErrorEvent.prototype.initErrorEvent?i=new ErrorEvent("error",{cancelable:!0,message:t,filename:o,lineno:n,colno:r,error:e}):((i=document.createEvent("ErrorEvent")).initErrorEvent("error",!1,!0,t,o,n),i.preventDefault=function(){Object.defineProperty(this,"defaultPrevented",{configurable:!0,get:function(){return!0}})}),void 0===i.error&&Object.defineProperty(i,"error",{configurable:!0,enumerable:!0,get:function(){return e}}),window.dispatchEvent(i),i.defaultPrevented||console.error(e)}function K(){var e=this;this.g=void 0,this.F=new Promise((function(t){e.l=t}))}function Q(e){var t=document;this.l=void 0,this.h=e,this.g=t,U(this.h,this.g),"loading"===this.g.readyState&&(this.l=new MutationObserver(this.G.bind(this)),this.l.observe(this.g,{childList:!0,subtree:!0}))}function $(e){e.l&&e.l.disconnect()}function Z(e){this.s=new Map,this.u=new Map,this.C=new Map,this.A=!1,this.B=new Map,this.o=function(e){return e()},this.i=!1,this.v=[],this.h=e,this.D=e.I?new Q(e):void 0}function ee(e,t){if(!N(t))throw new SyntaxError("The element name '"+t+"' is not valid.");if(ne(e,t))throw Error("A custom element with name '"+t+"' has already been defined.");if(e.A)throw Error("A custom element is already being defined.")}function te(e,t,o){var n;e.A=!0;try{var r=o.prototype;if(!(r instanceof Object))throw new TypeError("The custom element constructor's prototype is not an object.");var i=function(e){var t=r[e];if(void 0!==t&&!(t instanceof Function))throw Error("The '"+e+"' callback must be a function.");return t},s=i("connectedCallback"),l=i("disconnectedCallback"),a=i("adoptedCallback"),d=(n=i("attributeChangedCallback"))&&o.observedAttributes||[]}catch(e){throw e}finally{e.A=!1}return o={localName:t,constructorFunction:o,connectedCallback:s,disconnectedCallback:l,adoptedCallback:a,attributeChangedCallback:n,observedAttributes:d,constructionStack:[]},e.u.set(t,o),e.C.set(o.constructorFunction,o),o}function oe(e){if(!1!==e.i){e.i=!1;for(var t=[],o=e.v,n=new Map,r=0;r<o.length;r++)n.set(o[r],[]);for(U(e.h,document,{upgrade:function(o){if(void 0===o.__CE_state){var r=o.localName,i=n.get(r);i?i.push(o):e.u.has(r)&&t.push(o)}}}),r=0;r<t.length;r++)J(e.h,t[r]);for(r=0;r<o.length;r++){for(var i=o[r],s=n.get(i),l=0;l<s.length;l++)J(e.h,s[l]);(i=e.B.get(i))&&i.resolve(void 0)}o.length=0}}function ne(e,t){var o=e.u.get(t);if(o)return o;if(o=e.s.get(t)){e.s.delete(t);try{return te(e,t,o())}catch(e){X(e)}}}function re(e,t,o){function n(t){return function(o){for(var n=[],r=0;r<arguments.length;++r)n[r]=arguments[r];r=[];for(var i=[],s=0;s<n.length;s++){var l=n[s];if(l instanceof Element&&H(l)&&i.push(l),l instanceof DocumentFragment)for(l=l.firstChild;l;l=l.nextSibling)r.push(l);else r.push(l)}for(t.apply(this,n),n=0;n<i.length;n++)z(e,i[n]);if(H(this))for(n=0;n<r.length;n++)(i=r[n])instanceof Element&&G(e,i)}}void 0!==o.prepend&&(t.prepend=n(o.prepend)),void 0!==o.append&&(t.append=n(o.append))}W.prototype.connectedCallback=function(e){var t=e.__CE_definition;if(t.connectedCallback)try{t.connectedCallback.call(e)}catch(e){X(e)}},W.prototype.disconnectedCallback=function(e){var t=e.__CE_definition;if(t.disconnectedCallback)try{t.disconnectedCallback.call(e)}catch(e){X(e)}},W.prototype.attributeChangedCallback=function(e,t,o,n,r){var i=e.__CE_definition;if(i.attributeChangedCallback&&-1<i.observedAttributes.indexOf(t))try{i.attributeChangedCallback.call(e,t,o,n,r)}catch(e){X(e)}},K.prototype.resolve=function(e){if(this.g)throw Error("Already resolved.");this.g=e,this.l(e)},Q.prototype.G=function(e){var t=this.g.readyState;for("interactive"!==t&&"complete"!==t||$(this),t=0;t<e.length;t++)for(var o=e[t].addedNodes,n=0;n<o.length;n++)U(this.h,o[n])},Z.prototype.H=function(e,t){var o=this;if(!(t instanceof Function))throw new TypeError("Custom element constructor getters must be functions.");ee(this,e),this.s.set(e,t),this.v.push(e),this.i||(this.i=!0,this.o((function(){return oe(o)})))},Z.prototype.define=function(e,t){var o=this;if(!(t instanceof Function))throw new TypeError("Custom element constructors must be functions.");ee(this,e),te(this,e,t),this.v.push(e),this.i||(this.i=!0,this.o((function(){return oe(o)})))},Z.prototype.upgrade=function(e){U(this.h,e)},Z.prototype.get=function(e){if(e=ne(this,e))return e.constructorFunction},Z.prototype.whenDefined=function(e){if(!N(e))return Promise.reject(new SyntaxError("'"+e+"' is not a valid custom element name."));var t=this.B.get(e);if(t)return t.F;t=new K,this.B.set(e,t);var o=this.u.has(e)||this.s.has(e);return e=-1===this.v.indexOf(e),o&&e&&t.resolve(void 0),t.F},Z.prototype.polyfillWrapFlushCallback=function(e){this.D&&$(this.D);var t=this.o;this.o=function(o){return e((function(){return t(o)}))}},window.CustomElementRegistry=Z,Z.prototype.define=Z.prototype.define,Z.prototype.upgrade=Z.prototype.upgrade,Z.prototype.get=Z.prototype.get,Z.prototype.whenDefined=Z.prototype.whenDefined,Z.prototype.polyfillDefineLazy=Z.prototype.H,Z.prototype.polyfillWrapFlushCallback=Z.prototype.polyfillWrapFlushCallback;var ie={},se=window.customElements;function le(){var A=new W;!function(t){function o(){var o=this.constructor,n=document.__CE_registry.C.get(o);if(!n)throw Error("Failed to construct a custom element: The constructor was not registered with `customElements`.");var r=n.constructionStack;if(0===r.length)return r=e.call(document,n.localName),Object.setPrototypeOf(r,o.prototype),r.__CE_state=1,r.__CE_definition=n,V(t,r),r;var i=r.length-1,s=r[i];if(s===ie)throw Error("Failed to construct '"+n.localName+"': This element was already constructed.");return r[i]=ie,Object.setPrototypeOf(s,o.prototype),V(t,s),s}o.prototype=M.prototype,Object.defineProperty(HTMLElement.prototype,"constructor",{writable:!0,configurable:!0,enumerable:!1,value:o}),window.HTMLElement=o}(A),function(e){Document.prototype.createElement=function(t){return Y(e,this,t,null)},Document.prototype.importNode=function(t,n){return t=o.call(this,t,!!n),this.__CE_registry?U(e,t):I(e,t),t},Document.prototype.createElementNS=function(t,o){return Y(e,this,o,t)},re(e,Document.prototype,{prepend:n,append:r})}(A),re(A,DocumentFragment.prototype,{prepend:i,append:s}),function(e){function t(t,o){Object.defineProperty(t,"textContent",{enumerable:o.enumerable,configurable:!0,get:o.get,set:function(t){if(this.nodeType===Node.TEXT_NODE)o.set.call(this,t);else{var n=void 0;if(this.firstChild){var r=this.childNodes,i=r.length;if(0<i&&H(this)){n=Array(i);for(var s=0;s<i;s++)n[s]=r[s]}}if(o.set.call(this,t),n)for(t=0;t<n.length;t++)z(e,n[t])}}})}Node.prototype.insertBefore=function(t,o){if(t instanceof DocumentFragment){var n=R(t);if(t=d.call(this,t,o),H(this))for(o=0;o<n.length;o++)G(e,n[o]);return t}return n=t instanceof Element&&H(t),o=d.call(this,t,o),n&&z(e,t),H(this)&&G(e,t),o},Node.prototype.appendChild=function(t){if(t instanceof DocumentFragment){var o=R(t);if(t=a.call(this,t),H(this))for(var n=0;n<o.length;n++)G(e,o[n]);return t}return o=t instanceof Element&&H(t),n=a.call(this,t),o&&z(e,t),H(this)&&G(e,t),n},Node.prototype.cloneNode=function(t){return t=l.call(this,!!t),this.ownerDocument.__CE_registry?U(e,t):I(e,t),t},Node.prototype.removeChild=function(t){var o=t instanceof Element&&H(t),n=u.call(this,t);return o&&z(e,t),n},Node.prototype.replaceChild=function(t,o){if(t instanceof DocumentFragment){var n=R(t);if(t=c.call(this,t,o),H(this))for(z(e,o),o=0;o<n.length;o++)G(e,n[o]);return t}n=t instanceof Element&&H(t);var r=c.call(this,t,o),i=H(this);return i&&z(e,o),n&&z(e,t),i&&G(e,t),r},p&&p.get?t(Node.prototype,p):function(e,t){e.j=!0,e.m.push(t)}(e,(function(e){t(e,{enumerable:!0,configurable:!0,get:function(){for(var e=[],t=this.firstChild;t;t=t.nextSibling)t.nodeType!==Node.COMMENT_NODE&&e.push(t.textContent);return e.join("")},set:function(e){for(;this.firstChild;)u.call(this,this.firstChild);null!=e&&""!==e&&a.call(this,document.createTextNode(e))}})}))}(A),function(e){function o(t,o){Object.defineProperty(t,"innerHTML",{enumerable:o.enumerable,configurable:!0,get:o.get,set:function(t){var n=this,r=void 0;if(H(this)&&(r=[],q(e,this,(function(e){e!==n&&r.push(e)}))),o.set.call(this,t),r)for(var i=0;i<r.length;i++){var s=r[i];1===s.__CE_state&&e.disconnectedCallback(s)}return this.ownerDocument.__CE_registry?U(e,this):I(e,this),t}})}function n(t,o){t.insertAdjacentElement=function(t,n){var r=H(n);return t=o.call(this,t,n),r&&z(e,n),H(t)&&G(e,n),t}}function r(t,o){function n(t,o){for(var n=[];t!==o;t=t.nextSibling)n.push(t);for(o=0;o<n.length;o++)U(e,n[o])}t.insertAdjacentHTML=function(e,t){if("beforebegin"===(e=e.toLowerCase())){var r=this.previousSibling;o.call(this,e,t),n(r||this.parentNode.firstChild,this)}else if("afterbegin"===e)r=this.firstChild,o.call(this,e,t),n(this.firstChild,r);else if("beforeend"===e)r=this.lastChild,o.call(this,e,t),n(r||this.firstChild,null);else{if("afterend"!==e)throw new SyntaxError("The value provided ("+String(e)+") is not one of 'beforebegin', 'afterbegin', 'beforeend', or 'afterend'.");r=this.nextSibling,o.call(this,e,t),n(this.nextSibling,r)}}}f&&(Element.prototype.attachShadow=function(t){if(t=f.call(this,t),e.j&&!t.__CE_patched){t.__CE_patched=!0;for(var o=0;o<e.m.length;o++)e.m[o](t)}return this.__CE_shadowRoot=t}),m&&m.get?o(Element.prototype,m):T&&T.get?o(HTMLElement.prototype,T):function(e,t){e.j=!0,e.g.push(t)}(e,(function(e){o(e,{enumerable:!0,configurable:!0,get:function(){return l.call(this,!0).innerHTML},set:function(e){var o="template"===this.localName,n=o?this.content:this,r=t.call(document,this.namespaceURI,this.localName);for(r.innerHTML=e;0<n.childNodes.length;)u.call(n,n.childNodes[0]);for(e=o?r.content:r;0<e.childNodes.length;)a.call(n,e.childNodes[0])}})})),Element.prototype.setAttribute=function(t,o){if(1!==this.__CE_state)return g.call(this,t,o);var n=h.call(this,t);g.call(this,t,o),o=h.call(this,t),e.attributeChangedCallback(this,t,n,o,null)},Element.prototype.setAttributeNS=function(t,o,n){if(1!==this.__CE_state)return j.call(this,t,o,n);var r=v.call(this,t,o);j.call(this,t,o,n),n=v.call(this,t,o),e.attributeChangedCallback(this,o,r,n,t)},Element.prototype.removeAttribute=function(t){if(1!==this.__CE_state)return b.call(this,t);var o=h.call(this,t);b.call(this,t),null!==o&&e.attributeChangedCallback(this,t,o,null,null)},Element.prototype.removeAttributeNS=function(t,o){if(1!==this.__CE_state)return y.call(this,t,o);var n=v.call(this,t,o);y.call(this,t,o);var r=v.call(this,t,o);n!==r&&e.attributeChangedCallback(this,o,n,r,t)},L?n(HTMLElement.prototype,L):_&&n(Element.prototype,_),D?r(HTMLElement.prototype,D):w&&r(Element.prototype,w),re(e,Element.prototype,{prepend:E,append:O}),function(e){function t(t){return function(o){for(var n=[],r=0;r<arguments.length;++r)n[r]=arguments[r];r=[];for(var i=[],s=0;s<n.length;s++){var l=n[s];if(l instanceof Element&&H(l)&&i.push(l),l instanceof DocumentFragment)for(l=l.firstChild;l;l=l.nextSibling)r.push(l);else r.push(l)}for(t.apply(this,n),n=0;n<i.length;n++)z(e,i[n]);if(H(this))for(n=0;n<r.length;n++)(i=r[n])instanceof Element&&G(e,i)}}var o=Element.prototype;void 0!==C&&(o.before=t(C)),void 0!==x&&(o.after=t(x)),void 0!==S&&(o.replaceWith=function(t){for(var o=[],n=0;n<arguments.length;++n)o[n]=arguments[n];n=[];for(var r=[],i=0;i<o.length;i++){var s=o[i];if(s instanceof Element&&H(s)&&r.push(s),s instanceof DocumentFragment)for(s=s.firstChild;s;s=s.nextSibling)n.push(s);else n.push(s)}for(i=H(this),S.apply(this,o),o=0;o<r.length;o++)z(e,r[o]);if(i)for(z(e,this),o=0;o<n.length;o++)(r=n[o])instanceof Element&&G(e,r)}),void 0!==P&&(o.remove=function(){var t=H(this);P.call(this),t&&z(e,this)})}(e)}(A),A=new Z(A),document.__CE_registry=A,Object.defineProperty(window,"customElements",{configurable:!0,enumerable:!0,value:A})}se&&!se.forcePolyfill&&"function"==typeof se.define&&"function"==typeof se.get||le(),window.__CE_installPolyfill=le}).call(self)},"./src/content_script.ts":function(e,t,o){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,o,n){void 0===n&&(n=o),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[o]}})}:function(e,t,o,n){void 0===n&&(n=o),e[n]=t[o]}),r=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)"default"!==o&&Object.prototype.hasOwnProperty.call(e,o)&&n(t,e,o);return r(t,e),t},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.addTooltipToHighlight=t.getHighlightDimensions=t.runCodeValidation=void 0;var l=s(o("./src/customelements/CodigaExtension.ts")),a=o("./src/github/containerElement.ts"),d=o("./src/utils.ts"),u=o("./node_modules/@popperjs/core/lib/index.js"),c=s(o("./src/customelements/CodigaExtensionHighlights.ts")),p=i(o("./src/customelements/CodigaStatus.ts")),f=o("./src/github/edit/containerLogic.ts"),m=o("./src/github/view/containerLogic.ts"),h={Code_Style:"Code style",Error_Prone:"Error prone",Documentation:"Documentation",Security:"Security",Design:"Design",Safety:"Safety",Best_Practice:"Best practice",Unknown:"Unknown"};o("./node_modules/@webcomponents/custom-elements/custom-elements.min.js");var g=s(o("./src/customelements/CodigaHighlight.ts")),b=(0,a.getContainerElement)(),v={childList:!0,subtree:!0};t.runCodeValidation=function(e){var t=e.code,o=e.language,n=e.codigaExtensionHighlightsElement,r=e.codigaExtensionElement,i=e.codeElement,s=e.filename,l=e.scrollContainer,u=y(r);u.status=p.CodigaStatus.LOADING,(0,d.resetComponentShadowDOM)(n),chrome.runtime.sendMessage({contentScriptQuery:"validateCode",data:{code:t,language:o,filename:s,id:i.getAttribute(a.CODIGA_ELEMENT_ID_KEY)}},(function(e){var t;e&&e.violations&&e.violations.length?(j(n,e.violations,i),_(u,e.violations),l.addEventListener("scroll",(function(){(0,d.resetComponentShadowDOM)(n),t&&clearTimeout(t),t=setTimeout((function(){_(u,e.violations),j(n,e.violations,i)}),150)}),!1)):u.status=p.CodigaStatus.ALL_GOOD}))};var j=function(e,t,o){(0,d.resetComponentShadowDOM)(e);var n=document.createElement("style");n.innerHTML="\n      .codiga-highlight {\n          position: absolute;\n          z-index: 3; \n      }\n\n      /* Slide in */\n      .codiga-highlight {\n          overflow: hidden;\n      }\n\n      @keyframes slidein {\n          from {\n            transform: translate3d(-100%, 0, 0);\n          }\n        \n          to {\n            transform: translate3d(0, 0, 0);\n          }\n      }\n\n      .codiga-highlight::after {\n          content: '';\n          position: absolute;\n          bottom: 0;\n          left: 0;\n          width: 100%;\n          height: 0.1rem;\n          background-color: #cc498b;\n          opacity: 1;\n          animation: slidein .2s;\n      }\n      \n      .codiga-highlight:hover{\n          background: #c1424282;\n      }\n  ",e.shadowRoot.appendChild(n),t.forEach((function(t){b.isEdit?(0,f.addHiglightToEditViolation)(t,e,o):(0,m.addHiglightToViewViolation)(t,e,o)}))};t.getHighlightDimensions=function(e,t){var o;return(null===(o=t.textContent)||void 0===o?void 0:o.replace(/\u200B/g,"").length)?(0,d.getDimensions)(e):(0,d.getDimensions)(t)},t.addTooltipToHighlight=function(e,t){var o=document.createElement("div"),n=document.createElement("style");n.innerHTML="\n      .codiga-tooltip {\n          display: none;\n      }\n\n      .codiga-tooltip[data-show] {\n          background: #300623;\n          color: white;\n          display: block;\n          min-width: max-content;\n          z-index: 10;\n          border-radius: .2rem;\n          padding: .6rem;\n          border: 1px solid white;\n      }\n      \n      .single-violation {\n          border-top: 1px solid white;\n          padding: .4rem 0;\n      }\n  ",o.innerHTML="\n      <img src='"+chrome.runtime.getURL("icon16.png")+'\'/>\n      <div class="violations-list">\n      '+t.group.map((function(e,t){return'<div class="single-violation">\n                  <div class="codiga-tooltip-header"><b>'+(t+1)+". "+(h[e.category]||e.category)+'</b> violation:</div>\n                  <div class="codiga-inspector-violation"> '+e.description+" </div>\n              </div>"})).join("")+"\n      </div>\n      ",o.classList.add("codiga-tooltip");var r=(0,u.createPopper)(e,o);return["mouseenter","focus"].forEach((function(t){e.addEventListener(t,function(e,t){return function(){e.setAttribute("data-show",""),t.update()}}(o,r))})),["mouseleave","blur"].forEach((function(t){e.addEventListener(t,function(e){return function(){e.removeAttribute("data-show")}}(o))})),[o,n]};var y=function(e){var t=e.shadowRoot.querySelector(".codiga-wrapper"),o=null==t?void 0:t.querySelector("codiga-status-btn");if(o)return o;var n=document.createElement("codiga-status-btn");n.status=p.CodigaStatus.LOADING,null==t||t.appendChild(n);var r=document.createElement("style");return r.innerHTML="\n      .codiga-status-btn {\n          position: absolute;\n          right: 1rem;\n          bottom: 1rem;\n          z-index: 5;\n          border-radius: 100%;\n          font-weight: bold;\n          width: 26px;\n          height: 26px;\n          justify-content: center;\n          align-items: center;\n          display: flex;\n          font-size: 15px;\n          color: white;\n      }\n\n      @keyframes spin { \n          100% { \n              -webkit-transform: rotate(360deg); \n              transform:rotate(360deg); \n          } \n      }\n\n      .clear{\n          background: #5ca258;\n      }\n\n      .loading{\n          background: url("+chrome.runtime.getURL("icon48.png")+");\n          background-position: center; /* Center the image */\n          background-repeat: no-repeat; /* Do not repeat the image */\n          background-size: cover;\n          animation:spin 4s linear infinite;\n      }\n\n      .violations{\n          background: #d25b5b;\n      }\n  ",e.shadowRoot.appendChild(r),n},_=function(e,t){e.status=""+t.length||p.CodigaStatus.LOADING};chrome.runtime.onMessage.addListener((function(e,t,o){if("updateContainer"===e.action){var n;if((b=(0,a.getContainerElement)()).isView&&(n=b.container)){var r=n.offsetTop;(0,m.addLogicToCodeBoxInstance)(b.container,r,b)}b.isEdit&&(n=b.container)&&new MutationObserver(f.detectCodeMirrorInstances).observe(n,v)}o({result:!0})})),console.log("hereeeee"),console.log(window.customElements),window.customElements.define("codiga-status-btn",p.default),window.customElements.define("codiga-extension",l.default),window.customElements.define("codiga-extension-highlights",c.default),window.customElements.define("codiga-highlight",g.default)},"./src/customelements/CodigaElement.ts":function(e,t,o){"use strict";var n,r=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function o(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(o.prototype=t.prototype,new o)});Object.defineProperty(t,"__esModule",{value:!0}),o("./node_modules/@webcomponents/custom-elements/custom-elements.min.js");var i=function(e){function t(){var t=e.call(this)||this;return t.attachShadow({mode:"open"}),t.wrapper=document.createElement("div"),t.wrapper.setAttribute("class","codiga-wrapper"),t.shadowRoot.append(t.wrapper),t}return r(t,e),Object.defineProperty(t,"observedAttributes",{get:function(){return["width","height"]},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"width",{get:function(){return Number(this.getAttribute("width"))||0},set:function(e){null==e?this.removeAttribute("width"):this.setAttribute("width",""+e)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"height",{get:function(){return Number(this.getAttribute("height"))||0},set:function(e){null==e?this.removeAttribute("height"):this.setAttribute("height",""+e)},enumerable:!1,configurable:!0}),t.prototype.attributeChangedCallback=function(e,t,o){"width"===e&&(this.wrapper.style.width=o+"px"),"height"===e&&(this.wrapper.style.height=o+"px")},t}(HTMLElement);t.default=i},"./src/customelements/CodigaExtension.ts":function(e,t,o){"use strict";var n,r=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function o(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(o.prototype=t.prototype,new o)}),i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),o("./node_modules/@webcomponents/custom-elements/custom-elements.min.js");var s=function(e){function t(){return e.call(this)||this}return r(t,e),t}(i(o("./src/customelements/CodigaElement.ts")).default);t.default=s},"./src/customelements/CodigaExtensionHighlights.ts":function(e,t,o){"use strict";var n,r=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function o(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(o.prototype=t.prototype,new o)}),i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),o("./node_modules/@webcomponents/custom-elements/custom-elements.min.js");var s=function(e){function t(){return e.call(this)||this}return r(t,e),t}(i(o("./src/customelements/CodigaElement.ts")).default);t.default=s},"./src/customelements/CodigaHighlight.ts":function(e,t,o){"use strict";var n,r=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function o(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(o.prototype=t.prototype,new o)});Object.defineProperty(t,"__esModule",{value:!0}),o("./node_modules/@webcomponents/custom-elements/custom-elements.min.js");var i=function(e){function t(){return e.call(this)||this}return r(t,e),Object.defineProperty(t,"observedAttributes",{get:function(){return["width","height","top","left"]},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"width",{get:function(){return Number(this.getAttribute("width"))||0},set:function(e){null==e?this.removeAttribute("width"):this.setAttribute("width",""+e)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"height",{get:function(){return Number(this.getAttribute("height"))||0},set:function(e){null==e?this.removeAttribute("height"):this.setAttribute("height",""+e)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"top",{get:function(){return Number(this.getAttribute("top"))||0},set:function(e){null==e?this.removeAttribute("top"):this.setAttribute("top",""+e)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"left",{get:function(){return Number(this.getAttribute("left"))||0},set:function(e){null==e?this.removeAttribute("left"):this.setAttribute("left",""+e)},enumerable:!1,configurable:!0}),t.prototype.attributeChangedCallback=function(e,t,o){"width"===e&&(this.style.width=o+"px"),"height"===e&&(this.style.height=o+"px"),"top"===e&&(this.style.top=o+"px"),"left"===e&&(this.style.left=o+"px")},t}(HTMLElement);t.default=i},"./src/customelements/CodigaStatus.ts":function(e,t,o){"use strict";var n,r,i=this&&this.__extends||(n=function(e,t){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])},n(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function o(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(o.prototype=t.prototype,new o)});Object.defineProperty(t,"__esModule",{value:!0}),t.CodigaStatus=void 0,o("./node_modules/@webcomponents/custom-elements/custom-elements.min.js"),function(e){e.LOADING="LOADING",e.ALL_GOOD="ALL_GOOD"}(r=t.CodigaStatus||(t.CodigaStatus={}));var s=function(e){function t(){return e.call(this)||this}return i(t,e),Object.defineProperty(t,"observedAttributes",{get:function(){return["status"]},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"status",{get:function(){return this.getAttribute("status")},set:function(e){null==e?this.removeAttribute("status"):this.setAttribute("status",e)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"loadingHTML",{get:function(){return"\n            <div class='loading codiga-status-btn'>\n            </div>\n        "},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"allGoodHTML",{get:function(){return"\n            <div class='clear codiga-status-btn'>\n                &#x2714;\n            </div>\n        "},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"violationsHTML",{get:function(){return"\n            <div class='violations codiga-status-btn'>\n                "+this.status+"\n            </div>\n        "},enumerable:!1,configurable:!0}),t.prototype.attributeChangedCallback=function(e,t,o){"status"===e&&(this.innerHTML=this.calculateInnerHTML(o))},t.prototype.calculateInnerHTML=function(e){switch(e){case r.LOADING:return this.loadingHTML;case r.ALL_GOOD:return this.allGoodHTML;default:return this.violationsHTML}},t}(HTMLElement);t.default=s},"./src/github/containerElement.ts":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getContainerElement=t.CODIGA_ELEMENT_ID_KEY=void 0,t.CODIGA_ELEMENT_ID_KEY="codiga-id",t.getContainerElement=function(){var e=document.querySelector(".commit-create"),t=document.querySelector(".blob-wrapper");return{isEdit:null!=e,isView:null!=t,container:e||t}}},"./src/github/edit/containerLogic.ts":(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.addHiglightToEditViolation=t.detectCodeMirrorInstances=void 0;var n=o("./src/content_script.ts"),r=o("./src/utils.ts"),i=o("./src/github/containerElement.ts"),s=o("./src/github/pickFilename.ts"),l=o("./src/github/pickLanguage.ts");t.detectCodeMirrorInstances=function(e){for(var t=0,o=e;t<o.length;t++)"childList"===o[t].type&&d()};var a=function(e){var t=e.codigaExtensionElement,o=e.codigaExtensionHighlightsElement,i=e.codeElement,a=e.textArea,d=e.scrollContainer,u=e.codeMirror;(0,r.assignSize)(o,u),(0,r.assignSize)(t,u);var p=c(a),f=(0,l.pickLanguage)(),m=(0,s.pickFilename)();if(f&&m){var h={code:p,language:f,codigaExtensionHighlightsElement:o,codigaExtensionElement:t,codeElement:i,filename:m,scrollContainer:d};(0,n.runCodeValidation)(h)}};t.addHiglightToEditViolation=function(e,t,o){var i=e.line,s=Array.from(o.children).find((function(e){var t;return(null===(t=e.querySelector(".CodeMirror-gutter-wrapper"))||void 0===t?void 0:t.textContent)===""+i}));if(s){var l=s.getAttribute("class"),a=l&&l.includes("CodeMirror-line")?s:s.querySelector(".CodeMirror-line"),d=null==a?void 0:a.querySelector("[role=presentation]");if(d){var u=d,c=(0,r.getPos)(u),p=(0,n.getHighlightDimensions)(u,a),f=(0,r.getPos)(t),m=document.createElement("codiga-highlight");m.classList.add("codiga-highlight"),m.top=c.y-f.y,m.left=c.x-f.x,m.width=p.width,m.height=p.height;var h=(0,n.addTooltipToHighlight)(m,e);t.shadowRoot.appendChild(m),h.forEach((function(e){t.shadowRoot.appendChild(e)}))}}};var d=function(){Array.from(document.querySelectorAll(".CodeMirror:not([detected=true])")).map((function(e){return e})).forEach(u)},u=function(e){var t;e.setAttribute("detected",""+!0);var o=e.querySelector(".CodeMirror-lines"),n=e.querySelector(".CodeMirror-scroll"),s=null==o?void 0:o.querySelector('[role="presentation"]'),l=e.querySelector(".CodeMirror-code");null==l||l.setAttribute(i.CODIGA_ELEMENT_ID_KEY,JSON.stringify((0,r.getPos)(l)));var d=document.createElement("codiga-extension");d.style.cssText+="position: absolute; top: 0px; left: 0px",e.insertBefore(d,e.firstChild);var u=document.createElement("codiga-extension-highlights");u.style.cssText+="position: absolute; top: 0px; left: 0px",null==s||s.insertBefore(u,s.firstChild);var c=null===(t=e.parentElement)||void 0===t?void 0:t.querySelector("textarea");if(c){var p={codeMirror:e,codigaExtensionElement:d,codigaExtensionHighlightsElement:u,codeElement:l,textArea:c,scrollContainer:n};a(p),c.addEventListener("change",(function(){a(p)})),c.addEventListener("input",(function(){a(p)})),window.addEventListener("resize",(function(){(0,r.assignSize)(d,e)}))}},c=function(e){return e.value}},"./src/github/pickFilename.ts":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.pickFilename=void 0,t.pickFilename=function(){var e,t=document.querySelector("textarea.file-editor-textarea.js-code-textarea");return t?t.getAttribute("data-filename"):null===(e=document.querySelector(".final-path"))||void 0===e?void 0:e.textContent}},"./src/github/pickLanguage.ts":(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.pickLanguage=void 0;var n=o("./src/github/pickFilename.ts");t.pickLanguage=function(){var e=(0,n.pickFilename)();if(e){var t=e.split("."),o=t[t.length-1];return"Dockerfile"===e?"Docker":{js:"Javascript",py:"Python",java:"Java",cls:"Apex",c:"C",cpp:"Cpp",dart:"Dart",go:"Go",php:"Php",rb:"Ruby",rs:"Rust",scala:"Scala",sh:"Shell",ts:"Typescript",kt:"Kotlin",yaml:"Yaml",json:"Json",tf:"Terraform",tsx:"Typescript",jsx:"Javascript"}[o]||"Unknown"}}},"./src/github/view/containerLogic.ts":(e,t,o)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.addLogicToCodeBoxInstance=t.addHiglightToViewViolation=void 0;var n=o("./src/github/pickLanguage.ts"),r=o("./src/github/pickFilename.ts"),i=o("./src/utils.ts"),s=o("./src/github/containerElement.ts"),l=o("./src/content_script.ts");t.addHiglightToViewViolation=function(e,t,o){var n=e.line,r=Array.from(o.querySelectorAll("tr")).find((function(e){var t;return(null===(t=e.querySelector(".blob-num"))||void 0===t?void 0:t.getAttribute("data-line-number"))===""+n}));if(r){var s=r.querySelector(".blob-code");if(s&&s.firstChild&&s.lastChild){var a=s.firstChild,d=(0,i.getPos)(a),u=s.lastChild,c=(0,i.getPos)(u).x+(0,i.getDimensions)(u).width-d.x,p=(0,i.getDimensions)(a).height,f=(0,i.getPos)(t),m=document.createElement("codiga-highlight");m.classList.add("codiga-highlight"),m.top=d.y-f.y,m.left=d.x-f.x,m.width=c,m.height=p;var h=(0,l.addTooltipToHighlight)(m,e);t.shadowRoot.appendChild(m),h.forEach((function(e){t.shadowRoot.appendChild(e)}))}}},t.addLogicToCodeBoxInstance=function(e,t,o){e.setAttribute("detected",""+!0);var d=e.querySelector("tbody");d.setAttribute(s.CODIGA_ELEMENT_ID_KEY,JSON.stringify((0,i.getPos)(d)));var u=document.createElement("codiga-extension");u.style.cssText+="position: absolute; top: "+t+"px; left: 0px",o.container.insertBefore(u,o.container.firstChild);var c=document.createElement("codiga-extension-highlights");c.style.cssText+="position: absolute; top: "+t+"px; left: 0px",d.insertBefore(c,d.firstChild),function(e){var t=e.codigaExtensionElement,o=e.codigaExtensionHighlightsElement,s=e.codeBoxContainer,d=e.containerElement;(0,i.assignSize)(o,s),(0,i.assignSize)(t,d.container);var u=a(s),c=(0,n.pickLanguage)(),p=(0,r.pickFilename)();if(c&&p){var f={code:u,language:c,codigaExtensionHighlightsElement:o,codigaExtensionElement:t,filename:p,scrollContainer:s,codeElement:s};(0,l.runCodeValidation)(f)}}({codigaExtensionElement:u,codigaExtensionHighlightsElement:c,codeBoxContainer:d,containerElement:o}),window.addEventListener("resize",(function(){(0,i.assignSize)(u,o.container)}))};var a=function(e){return Array.from(e.querySelectorAll("tr")).map((function(e){var t,o;return null===(o=null===(t=e.querySelector(".blob-code"))||void 0===t?void 0:t.textContent)||void 0===o?void 0:o.replace(/\u200B/g,"").replace("\n","")})).join("\n")}},"./src/utils.ts":(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.assignSize=t.resetComponentShadowDOM=t.getDimensions=t.getPos=void 0;var o=function(e){var t;if(e.getBoundingClientRect)t=e.getBoundingClientRect();else{var o=document.createRange();o.selectNode(e),t=o.getBoundingClientRect(),o.detach()}return t};t.getPos=function(e){var t=o(e);return{x:t.left,y:t.top}},t.getDimensions=function(e){var t=o(e);return{width:t.width,height:t.height}},t.resetComponentShadowDOM=function(e){e.shadowRoot&&(e.shadowRoot.innerHTML="")},t.assignSize=function(e,t){var o=t.clientWidth,n=t.clientHeight;e.width=o,e.height=n}}},t={};function o(n){var r=t[n];if(void 0!==r)return r.exports;var i=t[n]={exports:{}};return e[n].call(i.exports,i,i.exports,o),i.exports}o.d=(e,t)=>{for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o("./src/content_script.ts")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,